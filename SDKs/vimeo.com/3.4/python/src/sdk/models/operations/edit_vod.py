"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import on_demand_page as shared_on_demand_page
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EditVodSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVodRequestBodyPreorder:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""If set to true, you will enable pre-orders on the On Demand page."""  
    publish_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_time'), 'exclude': lambda f: f is None }})
    r"""The time that the On Demand page will be published. *Required if `preorder.active` is `true`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVodRequestBodyPublish:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether to publish the On Demand page."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVodRequestBody:
    
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The custom string to use in this On Demand page's Vimeo URL."""  
    preorder: Optional[EditVodRequestBodyPreorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preorder'), 'exclude': lambda f: f is None }})  
    publish: Optional[EditVodRequestBodyPublish] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish'), 'exclude': lambda f: f is None }})  
    publish_when_ready: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_when_ready'), 'exclude': lambda f: f is None }})
    r"""Whether to publish the On Demand page automatically after all videos are finished transcoding."""  
    

@dataclasses.dataclass
class EditVodRequest:
    
    ondemand_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'ondemand_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the On Demand."""  
    request_body: Optional[EditVodRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/vnd.vimeo.ondemand.page+json' }})  
    

@dataclasses.dataclass
class EditVodResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""The authenticated user can't edit the On Demand page."""  
    on_demand_page: Optional[shared_on_demand_page.OnDemandPage] = dataclasses.field(default=None)
    r"""The On Demand page was edited."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    