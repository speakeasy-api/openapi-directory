// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UvarFilterMatchEnum - Indicates how the filter should be matched to the values.
type UvarFilterMatchEnum string

const (
	UvarFilterMatchEnumUnspecified UvarFilterMatchEnum = "UNSPECIFIED"
	UvarFilterMatchEnumExact       UvarFilterMatchEnum = "EXACT"
	UvarFilterMatchEnumContains    UvarFilterMatchEnum = "CONTAINS"
)

func (e *UvarFilterMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED":
		fallthrough
	case "EXACT":
		fallthrough
	case "CONTAINS":
		*e = UvarFilterMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UvarFilterMatchEnum: %s", s)
	}
}

// UvarFilter - Defines the filtering on a single uvar.
type UvarFilter struct {
	// Return rows which don't match this filter.
	Complement *bool `json:"complement,omitempty"`
	// Custom variable index the filter is applied to.
	Index *string `json:"index,omitempty"`
	// The kind of resource this is, in this case dfareporting#uvarFilter.
	Kind *string `json:"kind,omitempty"`
	// Indicates how the filter should be matched to the values.
	Match *UvarFilterMatchEnum `json:"match,omitempty"`
	// Values to filter on.
	Values []string `json:"values,omitempty"`
}
