// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscriptionsAPICountRequestBodyType string

const (
	SubscriptionsAPICountRequestBodyTypeAPICredentials SubscriptionsAPICountRequestBodyType = "ApiCredentials"
)

type SubscriptionsAPICountRequestBody struct {
	APICredentials *shared.APICredentials

	Type SubscriptionsAPICountRequestBodyType
}

func CreateSubscriptionsAPICountRequestBodyAPICredentials(apiCredentials shared.APICredentials) SubscriptionsAPICountRequestBody {
	typ := SubscriptionsAPICountRequestBodyTypeAPICredentials

	return SubscriptionsAPICountRequestBody{
		APICredentials: &apiCredentials,
		Type:           typ,
	}
}

func (u *SubscriptionsAPICountRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	apiCredentials := new(shared.APICredentials)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&apiCredentials); err == nil {
		u.APICredentials = apiCredentials
		u.Type = SubscriptionsAPICountRequestBodyTypeAPICredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPICountRequestBody) MarshalJSON() ([]byte, error) {
	if u.APICredentials != nil {
		return json.Marshal(u.APICredentials)
	}

	return nil, nil
}

type SubscriptionsAPICount200ApplicationJSONType string

const (
	SubscriptionsAPICount200ApplicationJSONTypeCountOf SubscriptionsAPICount200ApplicationJSONType = "CountOf"
)

type SubscriptionsAPICount200ApplicationJSON struct {
	CountOf *shared.CountOf

	Type SubscriptionsAPICount200ApplicationJSONType
}

func CreateSubscriptionsAPICount200ApplicationJSONCountOf(countOf shared.CountOf) SubscriptionsAPICount200ApplicationJSON {
	typ := SubscriptionsAPICount200ApplicationJSONTypeCountOf

	return SubscriptionsAPICount200ApplicationJSON{
		CountOf: &countOf,
		Type:    typ,
	}
}

func (u *SubscriptionsAPICount200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	countOf := new(shared.CountOf)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&countOf); err == nil {
		u.CountOf = countOf
		u.Type = SubscriptionsAPICount200ApplicationJSONTypeCountOf
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPICount200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.CountOf != nil {
		return json.Marshal(u.CountOf)
	}

	return nil, nil
}

type SubscriptionsAPICountResponse struct {
	ContentType                                  string
	StatusCode                                   int
	RawResponse                                  *http.Response
	SubscriptionsAPICount200ApplicationJSONOneOf *SubscriptionsAPICount200ApplicationJSON
}
