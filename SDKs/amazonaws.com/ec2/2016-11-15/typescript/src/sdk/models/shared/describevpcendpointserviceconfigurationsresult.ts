/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The payer responsibility.
 */
export enum DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPayerResponsibilityEnum {
  ServiceOwner = "ServiceOwner",
}

/**
 * <p>The verification state of the VPC endpoint service.</p> <p>&gt;Consumers of the endpoint service can use the private name only when the state is <code>verified</code>.</p>
 */
export enum DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPrivateDnsNameConfigurationStateEnum {
  PendingVerification = "pendingVerification",
  Verified = "verified",
  Failed = "failed",
}

/**
 * Information about the endpoint service private DNS name configuration.
 */
export class DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPrivateDnsNameConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  name?: string;

  @SpeakeasyMetadata()
  state?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPrivateDnsNameConfigurationStateEnum;

  @SpeakeasyMetadata()
  type?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The service state.
 */
export enum DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceStateEnum {
  Pending = "Pending",
  Available = "Available",
  Deleting = "Deleting",
  Deleted = "Deleted",
  Failed = "Failed",
}

/**
 * The type of service.
 */
export enum DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceTypeServiceTypeEnum {
  Interface = "Interface",
  Gateway = "Gateway",
  GatewayLoadBalancer = "GatewayLoadBalancer",
}

/**
 * Describes the type of service for a VPC endpoint.
 */
export class DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  serviceType?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceTypeServiceTypeEnum;
}

export enum DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsSupportedIpAddressTypesEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * Describes a tag.
 */
export class DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a service configuration for a VPC endpoint service.
 */
export class DescribeVpcEndpointServiceConfigurationsResultServiceConfigurations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  acceptanceRequired?: boolean;

  @SpeakeasyMetadata()
  availabilityZones?: string[];

  @SpeakeasyMetadata()
  baseEndpointDnsNames?: string[];

  @SpeakeasyMetadata()
  gatewayLoadBalancerArns?: string[];

  @SpeakeasyMetadata()
  managesVpcEndpoints?: boolean;

  @SpeakeasyMetadata()
  networkLoadBalancerArns?: string[];

  @SpeakeasyMetadata()
  payerResponsibility?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPayerResponsibilityEnum;

  @SpeakeasyMetadata()
  privateDnsName?: string;

  @SpeakeasyMetadata()
  privateDnsNameConfiguration?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsPrivateDnsNameConfiguration;

  @SpeakeasyMetadata()
  serviceId?: string;

  @SpeakeasyMetadata()
  serviceName?: string;

  @SpeakeasyMetadata()
  serviceState?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceStateEnum;

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceType,
  })
  serviceType?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsServiceType[];

  @SpeakeasyMetadata()
  supportedIpAddressTypes?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsSupportedIpAddressTypesEnum[];

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsTags,
  })
  tags?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurationsTags[];
}

/**
 * Success
 */
export class DescribeVpcEndpointServiceConfigurationsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcEndpointServiceConfigurationsResultServiceConfigurations,
  })
  serviceConfigurations?: DescribeVpcEndpointServiceConfigurationsResultServiceConfigurations[];
}
