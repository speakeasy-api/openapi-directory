// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ListPopulationTermOperatorEnum - Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
type ListPopulationTermOperatorEnum string

const (
	ListPopulationTermOperatorEnumNumEquals           ListPopulationTermOperatorEnum = "NUM_EQUALS"
	ListPopulationTermOperatorEnumNumLessThan         ListPopulationTermOperatorEnum = "NUM_LESS_THAN"
	ListPopulationTermOperatorEnumNumLessThanEqual    ListPopulationTermOperatorEnum = "NUM_LESS_THAN_EQUAL"
	ListPopulationTermOperatorEnumNumGreaterThan      ListPopulationTermOperatorEnum = "NUM_GREATER_THAN"
	ListPopulationTermOperatorEnumNumGreaterThanEqual ListPopulationTermOperatorEnum = "NUM_GREATER_THAN_EQUAL"
	ListPopulationTermOperatorEnumStringEquals        ListPopulationTermOperatorEnum = "STRING_EQUALS"
	ListPopulationTermOperatorEnumStringContains      ListPopulationTermOperatorEnum = "STRING_CONTAINS"
)

func (e ListPopulationTermOperatorEnum) ToPointer() *ListPopulationTermOperatorEnum {
	return &e
}

func (e *ListPopulationTermOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUM_EQUALS":
		fallthrough
	case "NUM_LESS_THAN":
		fallthrough
	case "NUM_LESS_THAN_EQUAL":
		fallthrough
	case "NUM_GREATER_THAN":
		fallthrough
	case "NUM_GREATER_THAN_EQUAL":
		fallthrough
	case "STRING_EQUALS":
		fallthrough
	case "STRING_CONTAINS":
		*e = ListPopulationTermOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPopulationTermOperatorEnum: %v", v)
	}
}

// ListPopulationTermTypeEnum - List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.
type ListPopulationTermTypeEnum string

const (
	ListPopulationTermTypeEnumCustomVariableTerm ListPopulationTermTypeEnum = "CUSTOM_VARIABLE_TERM"
	ListPopulationTermTypeEnumListMembershipTerm ListPopulationTermTypeEnum = "LIST_MEMBERSHIP_TERM"
	ListPopulationTermTypeEnumReferrerTerm       ListPopulationTermTypeEnum = "REFERRER_TERM"
)

func (e ListPopulationTermTypeEnum) ToPointer() *ListPopulationTermTypeEnum {
	return &e
}

func (e *ListPopulationTermTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CUSTOM_VARIABLE_TERM":
		fallthrough
	case "LIST_MEMBERSHIP_TERM":
		fallthrough
	case "REFERRER_TERM":
		*e = ListPopulationTermTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPopulationTermTypeEnum: %v", v)
	}
}

// ListPopulationTerm - Remarketing List Population Rule Term.
type ListPopulationTerm struct {
	// Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.
	Contains *bool `json:"contains,omitempty"`
	// Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
	Negation *bool `json:"negation,omitempty"`
	// Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
	Operator *ListPopulationTermOperatorEnum `json:"operator,omitempty"`
	// ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.
	RemarketingListID *string `json:"remarketingListId,omitempty"`
	// List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.
	Type *ListPopulationTermTypeEnum `json:"type,omitempty"`
	// Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
	Value *string `json:"value,omitempty"`
	// Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.
	VariableFriendlyName *string `json:"variableFriendlyName,omitempty"`
	// Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.
	VariableName *string `json:"variableName,omitempty"`
}
