// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UserMessageContractInboxEnum string

const (
	UserMessageContractInboxEnumNothing       UserMessageContractInboxEnum = "Nothing"
	UserMessageContractInboxEnumReceived      UserMessageContractInboxEnum = "Received"
	UserMessageContractInboxEnumSent          UserMessageContractInboxEnum = "Sent"
	UserMessageContractInboxEnumNotifications UserMessageContractInboxEnum = "Notifications"
)

func (e *UserMessageContractInboxEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Received":
		fallthrough
	case "Sent":
		fallthrough
	case "Notifications":
		*e = UserMessageContractInboxEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserMessageContractInboxEnum: %s", s)
	}
}

// UserMessageContract - OK
type UserMessageContract struct {
	Body             *string                       `json:"body,omitempty" form:"name=body"`
	CreatedFormatted *string                       `json:"createdFormatted,omitempty" form:"name=createdFormatted"`
	HighPriority     *bool                         `json:"highPriority,omitempty" form:"name=highPriority"`
	ID               *int                          `json:"id,omitempty" form:"name=id"`
	Inbox            *UserMessageContractInboxEnum `json:"inbox,omitempty" form:"name=inbox"`
	Read             *bool                         `json:"read,omitempty" form:"name=read"`
	Receiver         *UserForAPIContract           `json:"receiver,omitempty" form:"name=receiver,json"`
	Sender           *UserForAPIContract           `json:"sender,omitempty" form:"name=sender,json"`
	Subject          *string                       `json:"subject,omitempty" form:"name=subject"`
}
