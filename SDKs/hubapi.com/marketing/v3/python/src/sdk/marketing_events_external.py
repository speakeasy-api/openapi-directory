"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MarketingEventsExternal:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_marketing_v3_marketing_events_events_external_event_id_archive(self, request: operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveRequest, security: operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveSecurity) -> operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}', request)
        
        query_params = utils.get_query_params(operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMarketingV3MarketingEventsEventsExternalEventIDArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_marketing_v3_marketing_events_events_external_event_id_get_by_id(self, request: operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDRequest, security: operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDSecurity) -> operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}', request)
        
        query_params = utils.get_query_params(operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMarketingV3MarketingEventsEventsExternalEventIDGetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventPublicReadResponse])
                res.marketing_event_public_read_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_marketing_v3_marketing_events_events_external_event_id_update(self, request: operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateRequest, security: operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateSecurity) -> operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "marketing_event_update_request_params", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMarketingV3MarketingEventsEventsExternalEventIDUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventPublicDefaultResponse])
                res.marketing_event_public_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_delete_archive_batch(self, request: shared.BatchInputMarketingEventExternalUniqueIdentifier, security: operations.PostMarketingV3MarketingEventsEventsDeleteArchiveBatchSecurity) -> operations.PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/marketing/v3/marketing-events/events/delete'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsDeleteArchiveBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_upsert_do_upsert(self, request: shared.BatchInputMarketingEventCreateRequestParams, security: operations.PostMarketingV3MarketingEventsEventsUpsertDoUpsertSecurity) -> operations.PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/marketing/v3/marketing-events/events/upsert'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsUpsertDoUpsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchResponseMarketingEventPublicDefaultResponse])
                res.batch_response_marketing_event_public_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_external_event_id_cancel_do_cancel(self, request: operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelSecurity) -> operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}/cancel', request)
        
        query_params = utils.get_query_params(operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsExternalEventIDCancelDoCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventDefaultResponse])
                res.marketing_event_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_external_event_id_complete_complete(self, request: operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteSecurity) -> operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}/complete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "marketing_event_complete_request_params", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsExternalEventIDCompleteCompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventDefaultResponse])
                res.marketing_event_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_external_event_id_subscriber_state_email_upsert_do_email_upsert_by_id(self, request: operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDSecurity) -> operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_input_marketing_event_email_subscriber", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateEmailUpsertDoEmailUpsertByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_external_event_id_subscriber_state_upsert_do_upsert_by_id(self, request: operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDRequest, security: operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDSecurity) -> operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_input_marketing_event_subscriber", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsExternalEventIDSubscriberStateUpsertDoUpsertByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_marketing_v3_marketing_events_events_create(self, request: shared.MarketingEventCreateRequestParams, security: operations.PostMarketingV3MarketingEventsEventsCreateSecurity) -> operations.PostMarketingV3MarketingEventsEventsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/marketing/v3/marketing-events/events'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMarketingV3MarketingEventsEventsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventDefaultResponse])
                res.marketing_event_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_marketing_v3_marketing_events_events_external_event_id_replace(self, request: operations.PutMarketingV3MarketingEventsEventsExternalEventIDReplaceRequest, security: operations.PutMarketingV3MarketingEventsEventsExternalEventIDReplaceSecurity) -> operations.PutMarketingV3MarketingEventsEventsExternalEventIDReplaceResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutMarketingV3MarketingEventsEventsExternalEventIDReplaceRequest, base_url, '/marketing/v3/marketing-events/events/{externalEventId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "marketing_event_create_request_params", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutMarketingV3MarketingEventsEventsExternalEventIDReplaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarketingEventPublicDefaultResponse])
                res.marketing_event_public_default_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    