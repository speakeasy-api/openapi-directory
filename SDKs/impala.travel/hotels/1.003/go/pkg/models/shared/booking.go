// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// BookingCancellation - Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
type BookingCancellation struct {
	// Describes the costs associated with a cancellation and how it is calculated.
	Fee CancellationFee `json:"fee"`
}

// BookingPerson - Information on a person and their contact details.
type BookingPerson struct {
	// Unique identifier of this guest within the Impala platform.
	ContactID string `json:"contactId"`
	// Email address.
	Email string `json:"email"`
	// First name.
	FirstName string `json:"firstName"`
	// Family name or surname.
	LastName string `json:"lastName"`
}

// BookingNotes - The notes that were transmitted to the hotel as part of this booking.
//
// These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
type BookingNotes struct {
	// Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference).
	FromGuest string `json:"fromGuest"`
	// Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you.
	FromSeller string `json:"fromSeller"`
}

// BookingStatusEnum - Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
type BookingStatusEnum string

const (
	BookingStatusEnumCancelled        BookingStatusEnum = "CANCELLED"
	BookingStatusEnumPending          BookingStatusEnum = "PENDING"
	BookingStatusEnumAccepted         BookingStatusEnum = "ACCEPTED"
	BookingStatusEnumPaymentRequired  BookingStatusEnum = "PAYMENT_REQUIRED"
	BookingStatusEnumPaymentAbandoned BookingStatusEnum = "PAYMENT_ABANDONED"
)

func (e *BookingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CANCELLED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ACCEPTED":
		fallthrough
	case "PAYMENT_REQUIRED":
		fallthrough
	case "PAYMENT_ABANDONED":
		*e = BookingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BookingStatusEnum: %s", s)
	}
}

// Booking - Details of an existing booking.
type Booking struct {
	// List of rooms booked
	BookedRooms []BookedRoom `json:"bookedRooms"`
	// Unique identifier for this booking within the Impala platform.
	BookingID string `json:"bookingId"`
	// Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
	Cancellation *BookingCancellation `json:"cancellation,omitempty"`
	// Guest details for this booking.
	Contact BookingPerson `json:"contact"`
	// Date and time (in UTC and ISO 8601 format) when the booking was created.
	CreatedAt time.Time `json:"createdAt"`
	// The departure date of the booking.
	End types.Date `json:"end"`
	// Essential information on a hotel returned as part of other resources, linking to the full resource within its `href` field.
	Hotel HotelStub `json:"hotel"`
	// The hotel's confirmation identifier for this booking.
	HotelConfirmationCode *string `json:"hotelConfirmationCode,omitempty"`
	// The notes that were transmitted to the hotel as part of this booking.
	//
	// These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
	Notes BookingNotes `json:"notes"`
	// If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.
	PaymentBearerToken *string `json:"paymentBearerToken,omitempty"`
	// If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.
	PaymentClientSecret *string `json:"paymentClientSecret,omitempty"`
	// The arrival date of the booking.
	Start types.Date `json:"start"`
	// Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
	Status BookingStatusEnum `json:"status"`
	// Date and time (in UTC and ISO 8601 format) when the booking was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}
