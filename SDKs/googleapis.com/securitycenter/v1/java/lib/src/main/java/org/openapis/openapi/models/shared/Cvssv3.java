/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Cvssv3 - Common Vulnerability Scoring System version 3.
 */
public class Cvssv3 {
    /**
     * This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attackComplexity")
    public Cvssv3AttackComplexityEnum attackComplexity;
    public Cvssv3 withAttackComplexity(Cvssv3AttackComplexityEnum attackComplexity) {
        this.attackComplexity = attackComplexity;
        return this;
    }
    
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. This metric reflects the context by which vulnerability exploitation is possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attackVector")
    public Cvssv3AttackVectorEnum attackVector;
    public Cvssv3 withAttackVector(Cvssv3AttackVectorEnum attackVector) {
        this.attackVector = attackVector;
        return this;
    }
    
    /**
     * This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityImpact")
    public Cvssv3AvailabilityImpactEnum availabilityImpact;
    public Cvssv3 withAvailabilityImpact(Cvssv3AvailabilityImpactEnum availabilityImpact) {
        this.availabilityImpact = availabilityImpact;
        return this;
    }
    
    /**
     * The base score is a function of the base metric scores.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseScore")
    public Double baseScore;
    public Cvssv3 withBaseScore(Double baseScore) {
        this.baseScore = baseScore;
        return this;
    }
    
    /**
     * This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidentialityImpact")
    public Cvssv3ConfidentialityImpactEnum confidentialityImpact;
    public Cvssv3 withConfidentialityImpact(Cvssv3ConfidentialityImpactEnum confidentialityImpact) {
        this.confidentialityImpact = confidentialityImpact;
        return this;
    }
    
    /**
     * This metric measures the impact to integrity of a successfully exploited vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrityImpact")
    public Cvssv3IntegrityImpactEnum integrityImpact;
    public Cvssv3 withIntegrityImpact(Cvssv3IntegrityImpactEnum integrityImpact) {
        this.integrityImpact = integrityImpact;
        return this;
    }
    
    /**
     * This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privilegesRequired")
    public Cvssv3PrivilegesRequiredEnum privilegesRequired;
    public Cvssv3 withPrivilegesRequired(Cvssv3PrivilegesRequiredEnum privilegesRequired) {
        this.privilegesRequired = privilegesRequired;
        return this;
    }
    
    /**
     * The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public Cvssv3ScopeEnum scope;
    public Cvssv3 withScope(Cvssv3ScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInteraction")
    public Cvssv3UserInteractionEnum userInteraction;
    public Cvssv3 withUserInteraction(Cvssv3UserInteractionEnum userInteraction) {
        this.userInteraction = userInteraction;
        return this;
    }
    
}
