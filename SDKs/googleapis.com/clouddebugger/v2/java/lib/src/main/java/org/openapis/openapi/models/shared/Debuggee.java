/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Debuggee - Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
 */
public class Debuggee {
    /**
     * Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentVersion")
    public String agentVersion;

    public Debuggee withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }
    
    /**
     * Used when setting breakpoint canary for this debuggee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canaryMode")
    public DebuggeeCanaryModeEnum canaryMode;

    public Debuggee withCanaryMode(DebuggeeCanaryModeEnum canaryMode) {
        this.canaryMode = canaryMode;
        return this;
    }
    
    /**
     * Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Debuggee withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * References to the locations and revisions of the source code used in the deployed application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extSourceContexts")
    public ExtendedSourceContext[] extSourceContexts;

    public Debuggee withExtSourceContexts(ExtendedSourceContext[] extSourceContexts) {
        this.extSourceContexts = extSourceContexts;
        return this;
    }
    
    /**
     * Unique identifier for the debuggee generated by the controller service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Debuggee withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDisabled")
    public Boolean isDisabled;

    public Debuggee withIsDisabled(Boolean isDisabled) {
        this.isDisabled = isDisabled;
        return this;
    }
    
    /**
     * If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isInactive")
    public Boolean isInactive;

    public Debuggee withIsInactive(Boolean isInactive) {
        this.isInactive = isInactive;
        return this;
    }
    
    /**
     * A set of custom debuggee properties, populated by the agent, to be displayed to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Debuggee withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public Debuggee withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * References to the locations and revisions of the source code used in the deployed application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceContexts")
    public SourceContext[] sourceContexts;

    public Debuggee withSourceContexts(SourceContext[] sourceContexts) {
        this.sourceContexts = sourceContexts;
        return this;
    }
    
    /**
     * Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public StatusMessage status;

    public Debuggee withStatus(StatusMessage status) {
        this.status = status;
        return this;
    }
    
    /**
     * Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniquifier")
    public String uniquifier;

    public Debuggee withUniquifier(String uniquifier) {
        this.uniquifier = uniquifier;
        return this;
    }
    
    public Debuggee(){}
}
