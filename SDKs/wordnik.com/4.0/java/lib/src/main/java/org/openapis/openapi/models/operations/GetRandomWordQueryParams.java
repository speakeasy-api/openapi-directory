/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetRandomWordQueryParams {
    /**
     * CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=excludePartOfSpeech")
    public String excludePartOfSpeech;
    public GetRandomWordQueryParams withExcludePartOfSpeech(String excludePartOfSpeech) {
        this.excludePartOfSpeech = excludePartOfSpeech;
        return this;
    }
    
    /**
     * Only return words with dictionary definitions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=hasDictionaryDef")
    public String hasDictionaryDef;
    public GetRandomWordQueryParams withHasDictionaryDef(String hasDictionaryDef) {
        this.hasDictionaryDef = hasDictionaryDef;
        return this;
    }
    
    /**
     * CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includePartOfSpeech")
    public String includePartOfSpeech;
    public GetRandomWordQueryParams withIncludePartOfSpeech(String includePartOfSpeech) {
        this.includePartOfSpeech = includePartOfSpeech;
        return this;
    }
    
    /**
     * Maximum corpus frequency for terms
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxCorpusCount")
    public Integer maxCorpusCount;
    public GetRandomWordQueryParams withMaxCorpusCount(Integer maxCorpusCount) {
        this.maxCorpusCount = maxCorpusCount;
        return this;
    }
    
    /**
     * Maximum dictionary count
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxDictionaryCount")
    public Integer maxDictionaryCount;
    public GetRandomWordQueryParams withMaxDictionaryCount(Integer maxDictionaryCount) {
        this.maxDictionaryCount = maxDictionaryCount;
        return this;
    }
    
    /**
     * Maximum word length
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxLength")
    public Integer maxLength;
    public GetRandomWordQueryParams withMaxLength(Integer maxLength) {
        this.maxLength = maxLength;
        return this;
    }
    
    /**
     * Minimum corpus frequency for terms
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=minCorpusCount")
    public Integer minCorpusCount;
    public GetRandomWordQueryParams withMinCorpusCount(Integer minCorpusCount) {
        this.minCorpusCount = minCorpusCount;
        return this;
    }
    
    /**
     * Minimum dictionary count
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=minDictionaryCount")
    public Integer minDictionaryCount;
    public GetRandomWordQueryParams withMinDictionaryCount(Integer minDictionaryCount) {
        this.minDictionaryCount = minDictionaryCount;
        return this;
    }
    
    /**
     * Minimum word length
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=minLength")
    public Integer minLength;
    public GetRandomWordQueryParams withMinLength(Integer minLength) {
        this.minLength = minLength;
        return this;
    }
    
}
