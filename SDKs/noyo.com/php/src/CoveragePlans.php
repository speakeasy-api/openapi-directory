<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CoveragePlans 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Coverage Plan
     * 
     * Here you can associate a plan with a line of coverage and then pass information about the plan like the name, network, waiting periods, and other details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanResponse
     */
	public function createCoveragePlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/group_coverages/{group_coverage_id}/coverage_plans', \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "coveragePlanCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCoveragePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->coveragePlanResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CoveragePlanResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a Coverage Plan
     * 
     * Edit a coverage plan based on the ID provided. The version parameter must match the latest coverage plan version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanResponse
     */
	public function editCoveragePlan(
        \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/coverage_plans/{plan_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "coveragePlanEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditCoveragePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->coveragePlanResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CoveragePlanResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Coverage Plan
     * 
     * Returns the latest version of a single coverage plan based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanResponse
     */
	public function getCoveragePlan(
        \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/coverage_plans/{plan_id}', \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCoveragePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->coveragePlanResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CoveragePlanResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Group Coverage Plans
     * 
     * Returns a list of all coverage plans for a given group coverage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansResponse
     */
	public function getGroupCoveragePlans(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/group_coverages/{group_coverage_id}/coverage_plans', \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupCoveragePlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedCoveragePlanResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedCoveragePlanResult', 'json');
            }
        }

        return $response;
    }
}