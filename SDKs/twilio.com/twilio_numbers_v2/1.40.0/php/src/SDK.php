<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_BUNDLE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_BUNDLE_COPY_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_END_USER_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_EVALUATION_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_ITEM_ASSIGNMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_REPLACE_ITEMS_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const CREATE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const DELETE_BUNDLE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const DELETE_END_USER_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const DELETE_ITEM_ASSIGNMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const DELETE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_BUNDLE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_END_USER_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_END_USER_TYPE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_EVALUATION_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_ITEM_ASSIGNMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_REGULATION_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_SUPPORTING_DOCUMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_BUNDLE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_BUNDLE_COPY_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_END_USER_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_END_USER_TYPE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_EVALUATION_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_ITEM_ASSIGNMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_REGULATION_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_SUPPORTING_DOCUMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const UPDATE_BUNDLE_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const UPDATE_END_USER_SERVERS = [
		'https://numbers.twilio.com',
	];
	
	public const UPDATE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://numbers.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new Bundle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBundleCreateBundleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBundleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBundleResponse
     */
	public function createBundle(
        \OpenAPI\OpenAPI\Models\Operations\CreateBundleCreateBundleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBundleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBundleResponse
    {
        $baseUrl = SDK::CREATE_BUNDLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new copy of a Bundle. It will internally create copies of all the bundle items (identities and documents) of the original bundle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyResponse
     */
	public function createBundleCopy(
        \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyResponse
    {
        $baseUrl = SDK::CREATE_BUNDLE_COPY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/Copies', \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBundleCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleBundleCopy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleBundleCopy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndUserCreateEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse
     */
	public function createEndUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateEndUserCreateEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse
    {
        $baseUrl = SDK::CREATE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUsers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceEndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceEndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an evaluation for a bundle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationResponse
     */
	public function createEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationResponse
    {
        $baseUrl = SDK::CREATE_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Assigned Item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentResponse
     */
	public function createItemAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentResponse
    {
        $baseUrl = SDK::CREATE_ITEM_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments', \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateItemAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleItemAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleItemAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces all bundle items in the target bundle (specified in the path) with all the bundle items of the source bundle (specified by the from_bundle_sid body param)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsResponse
     */
	public function createReplaceItems(
        \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsResponse
    {
        $baseUrl = SDK::CREATE_REPLACE_ITEMS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/ReplaceItems', \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReplaceItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleReplaceItems = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleReplaceItems', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentCreateSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse
     */
	public function createSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentCreateSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse
    {
        $baseUrl = SDK::CREATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocuments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceSupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceSupportingDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific Bundle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBundleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBundleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBundleResponse
     */
	public function deleteBundle(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBundleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBundleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBundleResponse
    {
        $baseUrl = SDK::DELETE_BUNDLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteBundleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse
     */
	public function deleteEndUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse
    {
        $baseUrl = SDK::DELETE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Assignment Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentResponse
     */
	public function deleteItemAssignment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentResponse
    {
        $baseUrl = SDK::DELETE_ITEM_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteItemAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse
     */
	public function deleteSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse
    {
        $baseUrl = SDK::DELETE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch a specific Bundle instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBundleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBundleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBundleResponse
     */
	public function fetchBundle(
        \OpenAPI\OpenAPI\Models\Operations\FetchBundleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBundleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBundleResponse
    {
        $baseUrl = SDK::FETCH_BUNDLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchBundleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific End User Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse
     */
	public function fetchEndUser(
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse
    {
        $baseUrl = SDK::FETCH_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceEndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceEndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific End-User Type Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse
     */
	public function fetchEndUserType(
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse
    {
        $baseUrl = SDK::FETCH_END_USER_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUserTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceEndUserType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceEndUserType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Evaluation Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationResponse
     */
	public function fetchEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationResponse
    {
        $baseUrl = SDK::FETCH_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Assigned Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentResponse
     */
	public function fetchItemAssignment(
        \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentResponse
    {
        $baseUrl = SDK::FETCH_ITEM_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchItemAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundleItemAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundleItemAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Regulation Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRegulationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRegulationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRegulationResponse
     */
	public function fetchRegulation(
        \OpenAPI\OpenAPI\Models\Operations\FetchRegulationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRegulationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRegulationResponse
    {
        $baseUrl = SDK::FETCH_REGULATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Regulations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRegulationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRegulationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceRegulation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceRegulation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Supporting Document Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse
     */
	public function fetchSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse
    {
        $baseUrl = SDK::FETCH_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceSupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceSupportingDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Supporting Document Type Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse
     */
	public function fetchSupportingDocumentType(
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse
    {
        $baseUrl = SDK::FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocumentTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceSupportingDocumentType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceSupportingDocumentType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Bundles for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBundleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBundleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBundleResponse
     */
	public function listBundle(
        \OpenAPI\OpenAPI\Models\Operations\ListBundleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBundleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBundleResponse
    {
        $baseUrl = SDK::LIST_BUNDLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBundleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBundleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBundleListBundleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Bundles Copies for a Bundle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBundleCopySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyResponse
     */
	public function listBundleCopy(
        \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBundleCopySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyResponse
    {
        $baseUrl = SDK::LIST_BUNDLE_COPY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/Copies', \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBundleCopyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBundleCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBundleCopyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBundleCopyListBundleCopyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all End User for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse
     */
	public function listEndUser(
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse
    {
        $baseUrl = SDK::LIST_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUsers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEndUserListEndUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all End-User Types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse
     */
	public function listEndUserType(
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse
    {
        $baseUrl = SDK::LIST_END_USER_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUserTypes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndUserTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeListEndUserTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Evaluations associated to the Bundle resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEvaluationResponse
     */
	public function listEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\ListEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEvaluationResponse
    {
        $baseUrl = SDK::LIST_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\ListEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEvaluationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEvaluationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEvaluationListEvaluationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assigned Items for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentResponse
     */
	public function listItemAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentResponse
    {
        $baseUrl = SDK::LIST_ITEM_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments', \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listItemAssignmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListItemAssignmentListItemAssignmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Regulations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRegulationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRegulationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRegulationResponse
     */
	public function listRegulation(
        \OpenAPI\OpenAPI\Models\Operations\ListRegulationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRegulationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRegulationResponse
    {
        $baseUrl = SDK::LIST_REGULATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Regulations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRegulationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRegulationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRegulationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRegulationListRegulationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Supporting Document for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse
     */
	public function listSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse
    {
        $baseUrl = SDK::LIST_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocuments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSupportingDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentListSupportingDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Supporting Document Types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse
     */
	public function listSupportingDocumentType(
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse
    {
        $baseUrl = SDK::LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocumentTypes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSupportingDocumentTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeListSupportingDocumentTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Bundle in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBundleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBundleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBundleResponse
     */
	public function updateBundle(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBundleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBundleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBundleResponse
    {
        $baseUrl = SDK::UPDATE_BUNDLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/Bundles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateBundleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceBundle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceBundle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse
     */
	public function updateEndUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse
    {
        $baseUrl = SDK::UPDATE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceEndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceEndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse
     */
	public function updateSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse
    {
        $baseUrl = SDK::UPDATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/RegulatoryCompliance/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numbersV2RegulatoryComplianceSupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumbersV2RegulatoryComplianceSupportingDocument', 'json');
            }
        }

        return $response;
    }
}