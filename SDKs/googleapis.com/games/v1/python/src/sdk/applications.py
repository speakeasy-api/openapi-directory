"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Applications:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def games_applications_get(self, request: operations.GamesApplicationsGetRequest, security: operations.GamesApplicationsGetSecurity) -> operations.GamesApplicationsGetResponse:
        r"""Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesApplicationsGetRequest, base_url, '/games/v1/applications/{applicationId}', request)
        
        query_params = utils.get_query_params(operations.GamesApplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesApplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Application])
                res.application = out

        return res

    def games_applications_get_end_point(self, request: operations.GamesApplicationsGetEndPointRequest, security: operations.GamesApplicationsGetEndPointSecurity) -> operations.GamesApplicationsGetEndPointResponse:
        r"""Returns a URL for the requested end point type."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1/applications/getEndPoint'
        
        query_params = utils.get_query_params(operations.GamesApplicationsGetEndPointRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesApplicationsGetEndPointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndPoint])
                res.end_point = out

        return res

    def games_applications_played(self, request: operations.GamesApplicationsPlayedRequest, security: operations.GamesApplicationsPlayedSecurity) -> operations.GamesApplicationsPlayedResponse:
        r"""Indicate that the currently authenticated user is playing your application."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1/applications/played'
        
        query_params = utils.get_query_params(operations.GamesApplicationsPlayedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesApplicationsPlayedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def games_applications_verify(self, request: operations.GamesApplicationsVerifyRequest, security: operations.GamesApplicationsVerifySecurity) -> operations.GamesApplicationsVerifyResponse:
        r"""Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesApplicationsVerifyRequest, base_url, '/games/v1/applications/{applicationId}/verify', request)
        
        query_params = utils.get_query_params(operations.GamesApplicationsVerifyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesApplicationsVerifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationVerifyResponse])
                res.application_verify_response = out

        return res

    