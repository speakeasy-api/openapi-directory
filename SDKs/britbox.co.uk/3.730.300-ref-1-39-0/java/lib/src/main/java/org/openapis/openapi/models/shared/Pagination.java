/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Pagination {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorization")
    public PaginationAuth authorization;

    public Pagination withAuthorization(PaginationAuth authorization) {
        this.authorization = authorization;
        return this;
    }
    
    /**
     * Path to load next page of data, or null if not available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    public String next;

    public Pagination withNext(String next) {
        this.next = next;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public PaginationOptions options;

    public Pagination withOptions(PaginationOptions options) {
        this.options = options;
        return this;
    }
    
    /**
     * The current page number.
     * 
     * A value of 0 indicates that the fist page has not yet been loaded. This is
     * useful when wanting to return the paging metadata to indicate how to
     * load in the first page.
     * 
     */
    @JsonProperty("page")
    public Integer page;

    public Pagination withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * Path to load previous page of data, or null if not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous")
    public String previous;

    public Pagination withPrevious(String previous) {
        this.previous = previous;
        return this;
    }
    
    /**
     * The current page size.
     * 
     * A value of -1 indicates that the size has not yet been determined. This may
     * arise when embedding secure list pagination info in a page which must be cached
     * by a CDN. For example a Bookmarks list.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Integer size;

    public Pagination withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    /**
     * The total number of pages available given the current page size.
     * 
     * A value of -1 indicates that the total has not yet been determined. This may
     * arise when embedding secure list pagination info in a page which must be cached
     * by a CDN. For example a Bookmarks list.
     * 
     */
    @JsonProperty("total")
    public Integer total;

    public Pagination withTotal(Integer total) {
        this.total = total;
        return this;
    }
    
    public Pagination(@JsonProperty("page") Integer page, @JsonProperty("total") Integer total) {
        this.page = page;
        this.total = total;
  }
}
