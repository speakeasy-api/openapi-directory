/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReportRequest - A request object used to create a DoubleClick Search report.
 */
public class ReportRequest {
    /**
     * The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\ The maximum number of columns per request is 300.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columns")
    public ReportApiColumnSpec[] columns;
    public ReportRequest withColumns(ReportApiColumnSpec[] columns) {
        this.columns = columns;
        return this;
    }
    
    /**
     * Format that the report should be returned in. Currently `csv` or `tsv` is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadFormat")
    public String downloadFormat;
    public ReportRequest withDownloadFormat(String downloadFormat) {
        this.downloadFormat = downloadFormat;
        return this;
    }
    
    /**
     * A list of filters to be applied to the report.\ The maximum number of filters per request is 300.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filters")
    public ReportRequestFilters[] filters;
    public ReportRequest withFilters(ReportRequestFilters[] filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeDeletedEntities")
    public Boolean includeDeletedEntities;
    public ReportRequest withIncludeDeletedEntities(Boolean includeDeletedEntities) {
        this.includeDeletedEntities = includeDeletedEntities;
        return this;
    }
    
    /**
     * Determines if removed entities should be included in the report. Defaults to `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeRemovedEntities")
    public Boolean includeRemovedEntities;
    public ReportRequest withIncludeRemovedEntities(Boolean includeRemovedEntities) {
        this.includeRemovedEntities = includeRemovedEntities;
        return this;
    }
    
    /**
     * Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRowsPerFile")
    public Integer maxRowsPerFile;
    public ReportRequest withMaxRowsPerFile(Integer maxRowsPerFile) {
        this.maxRowsPerFile = maxRowsPerFile;
        return this;
    }
    
    /**
     * Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\ The maximum number of orderings per request is 300.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderBy")
    public ReportRequestOrderBy[] orderBy;
    public ReportRequest withOrderBy(ReportRequestOrderBy[] orderBy) {
        this.orderBy = orderBy;
        return this;
    }
    
    /**
     * The reportScope is a set of IDs that are used to determine which subset of entities will be returned in the report. The full lineage of IDs from the lowest scoped level desired up through agency is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportScope")
    public ReportRequestReportScope reportScope;
    public ReportRequest withReportScope(ReportRequestReportScope reportScope) {
        this.reportScope = reportScope;
        return this;
    }
    
    /**
     * Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportType")
    public String reportType;
    public ReportRequest withReportType(String reportType) {
        this.reportType = reportType;
        return this;
    }
    
    /**
     * Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowCount")
    public Integer rowCount;
    public ReportRequest withRowCount(Integer rowCount) {
        this.rowCount = rowCount;
        return this;
    }
    
    /**
     * Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startRow")
    public Integer startRow;
    public ReportRequest withStartRow(Integer startRow) {
        this.startRow = startRow;
        return this;
    }
    
    /**
     * Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statisticsCurrency")
    public String statisticsCurrency;
    public ReportRequest withStatisticsCurrency(String statisticsCurrency) {
        this.statisticsCurrency = statisticsCurrency;
        return this;
    }
    
    /**
     * If metrics are requested in a report, this argument will be used to restrict the metrics to a specific time range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeRange")
    public ReportRequestTimeRange timeRange;
    public ReportRequest withTimeRange(ReportRequestTimeRange timeRange) {
        this.timeRange = timeRange;
        return this;
    }
    
    /**
     * If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifySingleTimeZone")
    public Boolean verifySingleTimeZone;
    public ReportRequest withVerifySingleTimeZone(Boolean verifySingleTimeZone) {
        this.verifySingleTimeZone = verifySingleTimeZone;
        return this;
    }
    
}
