"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import error as shared_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BackfillJobStateEnum(str, Enum):
    r"""Backfill job state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NOT_STARTED = 'NOT_STARTED'
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    STOPPED = 'STOPPED'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    UNSUPPORTED = 'UNSUPPORTED'

class BackfillJobTriggerEnum(str, Enum):
    r"""Backfill job's triggering reason."""
    TRIGGER_UNSPECIFIED = 'TRIGGER_UNSPECIFIED'
    AUTOMATIC = 'AUTOMATIC'
    MANUAL = 'MANUAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackfillJob:
    r"""Represents a backfill job on a specific stream object."""
    
    errors: Optional[list[shared_error.Error]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Output only. Errors which caused the backfill job to fail."""  
    last_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastEndTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Backfill job's end time."""  
    last_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastStartTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Backfill job's start time."""  
    state: Optional[BackfillJobStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Backfill job state."""  
    trigger: Optional[BackfillJobTriggerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger'), 'exclude': lambda f: f is None }})
    r"""Backfill job's triggering reason."""  
    