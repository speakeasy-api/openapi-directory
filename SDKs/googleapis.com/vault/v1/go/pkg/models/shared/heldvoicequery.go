// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HeldVoiceQueryCoveredDataEnum string

const (
	HeldVoiceQueryCoveredDataEnumCoveredDataUnspecified HeldVoiceQueryCoveredDataEnum = "COVERED_DATA_UNSPECIFIED"
	HeldVoiceQueryCoveredDataEnumTextMessages           HeldVoiceQueryCoveredDataEnum = "TEXT_MESSAGES"
	HeldVoiceQueryCoveredDataEnumVoicemails             HeldVoiceQueryCoveredDataEnum = "VOICEMAILS"
	HeldVoiceQueryCoveredDataEnumCallLogs               HeldVoiceQueryCoveredDataEnum = "CALL_LOGS"
)

func (e HeldVoiceQueryCoveredDataEnum) ToPointer() *HeldVoiceQueryCoveredDataEnum {
	return &e
}

func (e *HeldVoiceQueryCoveredDataEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COVERED_DATA_UNSPECIFIED":
		fallthrough
	case "TEXT_MESSAGES":
		fallthrough
	case "VOICEMAILS":
		fallthrough
	case "CALL_LOGS":
		*e = HeldVoiceQueryCoveredDataEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HeldVoiceQueryCoveredDataEnum: %v", v)
	}
}

// HeldVoiceQuery - Options for Voice holds.
type HeldVoiceQuery struct {
	// A list of data types covered by the hold. Should be non-empty. Order does not matter and duplicates are ignored.
	CoveredData []HeldVoiceQueryCoveredDataEnum `json:"coveredData,omitempty"`
}
