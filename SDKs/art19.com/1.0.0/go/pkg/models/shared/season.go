// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SeasonAttributesStatusEnum - The current status of the season
type SeasonAttributesStatusEnum string

const (
	SeasonAttributesStatusEnumActive   SeasonAttributesStatusEnum = "active"
	SeasonAttributesStatusEnumInactive SeasonAttributesStatusEnum = "inactive"
)

func (e SeasonAttributesStatusEnum) ToPointer() *SeasonAttributesStatusEnum {
	return &e
}

func (e *SeasonAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = SeasonAttributesStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SeasonAttributesStatusEnum: %v", v)
	}
}

type SeasonAttributes struct {
	// This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>
	// The image ID of the cover art for this season. If there is no specific cover for the season,
	// the image ID of the series' cover art will be returned.
	// The `/images` endpoint provideds details to the image.
	//
	CascadedCoverImageID *string `json:"cascaded_cover_image_id,omitempty"`
	// This will be replaced by the relationship `cover_image` in a future update.<br/>
	// The image ID of the cover art for this season. The `/images` endpoint provideds details to the image.
	//
	CoverImageID *string    `json:"cover_image_id,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	// The description of the season eventually in HTML format
	Description *string `json:"description,omitempty"`
	// Determines whether `description` is in HTML format or plain.
	DescriptionIsHTML *bool `json:"description_is_html,omitempty"`
	// The description with all HTML markup removed. If the description does not contain markup
	// this is identitcal to `description`.
	//
	DescriptionPlain *string `json:"description_plain,omitempty"`
	// This will be replaced by the relationship `first_released_episode` in a future update.<br/>
	// The ID of the first released episode within the season
	//
	FirstReleasedEpisodeID *string `json:"first_released_episode_id,omitempty"`
	// This will be replaced by the relationship `last_released_episode` in a future update.<br/>
	// The ID of the most recently released episode within the season
	//
	LastReleasedEpisodeID *string `json:"last_released_episode_id,omitempty"`
	// The number of the season. This could be `null` as well.
	SeasonNumber *int64 `json:"season_number,omitempty"`
	// The title of the season modified for sorting. This converts all characters to
	// lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
	//
	SortTitle *string `json:"sort_title,omitempty"`
	// The current status of the season
	Status *SeasonAttributesStatusEnum `json:"status,omitempty"`
	// The title of the season
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// SeasonRelationshipsCascadedCoverImage - The cover art for this season. If there is no specific cover for the season,
// the cover image of the series' cover art will be returned.
// The `/images` endpoint provideds details to the image.
type SeasonRelationshipsCascadedCoverImage struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

// SeasonRelationshipsCoverImage - The cover image for the season
type SeasonRelationshipsCoverImage struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

// SeasonRelationshipsFirstReleasedEpisode - The first released episode within the season
type SeasonRelationshipsFirstReleasedEpisode struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

// SeasonRelationshipsLastReleasedEpisode - The most recently released episode within the season
type SeasonRelationshipsLastReleasedEpisode struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsTheSeriesTheSeasonBelongsTo struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationshipsAListOfTagsAssociatedWithTheSeason struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeasonRelationships struct {
	// The cover art for this season. If there is no specific cover for the season,
	// the cover image of the series' cover art will be returned.
	// The `/images` endpoint provideds details to the image.
	//
	CascadedCoverImage       *SeasonRelationshipsCascadedCoverImage                            `json:"cascaded_cover_image,omitempty"`
	ClassificationInclusions *SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason `json:"classification_inclusions,omitempty"`
	// The cover image for the season
	CoverImage *SeasonRelationshipsCoverImage                                                              `json:"cover_image,omitempty"`
	Credits    *SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason                                  `json:"credits,omitempty"`
	Episodes   *SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason `json:"episodes,omitempty"`
	// The first released episode within the season
	FirstReleasedEpisode *SeasonRelationshipsFirstReleasedEpisode                                  `json:"first_released_episode,omitempty"`
	Images               *SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason `json:"images,omitempty"`
	// The most recently released episode within the season
	LastReleasedEpisode *SeasonRelationshipsLastReleasedEpisode                       `json:"last_released_episode,omitempty"`
	Series              *SeasonRelationshipsTheSeriesTheSeasonBelongsTo               `json:"series,omitempty"`
	Taggings            *SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason `json:"taggings,omitempty"`
	Tags                *SeasonRelationshipsAListOfTagsAssociatedWithTheSeason        `json:"tags,omitempty"`
}

type Season struct {
	Attributes    *SeasonAttributes    `json:"attributes,omitempty"`
	ID            *string              `json:"id,omitempty"`
	Relationships *SeasonRelationships `json:"relationships,omitempty"`
	// The type of resource. This is always `seasons`
	Type *string `json:"type,omitempty"`
}
