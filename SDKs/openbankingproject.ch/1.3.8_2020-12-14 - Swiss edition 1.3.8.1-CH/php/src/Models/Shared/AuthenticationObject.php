<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AuthenticationObject - Authentication object.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AuthenticationObject
{
    /**
     * An identification provided by the ASPSP for the later identification of the authentication method selection.
     * 
     * 
     * 
     * @var string $authenticationMethodId
     */
	#[\JMS\Serializer\Annotation\SerializedName('authenticationMethodId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $authenticationMethodId;
    
    /**
     * Type of the authentication method.
     * 
     * 
     * More authentication types might be added during implementation projects and documented in the ASPSP documentation.
     * 
     *   - 'SMS_OTP': An SCA method, where an OTP linked to the transaction to be authorised is sent to the PSU through a SMS channel.
     *   - 'CHIP_OTP': An SCA method, where an OTP is generated by a chip card, e.g. a TOP derived from an EMV cryptogram. 
     *     To contact the card, the PSU normally needs a (handheld) device. 
     *     With this device, the PSU either reads the challenging data through a visual interface like flickering or 
     *     the PSU types in the challenge through the device key pad. 
     *     The device then derives an OTP from the challenge data and displays the OTP to the PSU.
     *   - 'PHOTO_OTP': An SCA method, where the challenge is a QR code or similar encoded visual data
     *     which can be read in by a consumer device or specific mobile app.
     *     The device resp. the specific app than derives an OTP from the visual challenge data and displays
     *     the OTP to the PSU.
     *   - 'PUSH_OTP': An OTP is pushed to a dedicated authentication APP and displayed to the PSU.
     *   - 'SMTP_OTP': An OTP is sent via email to the PSU.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AuthenticationTypeEnum $authenticationType
     */
	#[\JMS\Serializer\Annotation\SerializedName('authenticationType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AuthenticationTypeEnum>')]
    public AuthenticationTypeEnum $authenticationType;
    
    /**
     * Depending on the "authenticationType".
     * 
     * This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type.
     * This version can be referred to in the ASPSP?s documentation.
     * 
     * 
     * @var ?string $authenticationVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('authenticationVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authenticationVersion = null;
    
    /**
     * Detailed information about the SCA method for the PSU.
     * 
     * 
     * 
     * @var ?string $explanation
     */
	#[\JMS\Serializer\Annotation\SerializedName('explanation')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $explanation = null;
    
    /**
     * This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP.
     * 
     * Alternatively this could be a description provided by the ASPSP like "SMS OTP on phone +49160 xxxxx 28".
     * This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.
     * 
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	public function __construct()
	{
		$this->authenticationMethodId = "";
		$this->authenticationType = \OpenAPI\OpenAPI\Models\Shared\AuthenticationTypeEnum::SMS_OTP;
		$this->authenticationVersion = null;
		$this->explanation = null;
		$this->name = null;
	}
}
