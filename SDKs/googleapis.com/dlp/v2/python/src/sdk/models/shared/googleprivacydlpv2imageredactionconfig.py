"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2color as shared_googleprivacydlpv2color
from ..shared import googleprivacydlpv2infotype as shared_googleprivacydlpv2infotype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2ImageRedactionConfig:
    r"""Configuration for determining how redaction of images should occur."""
    
    info_type: Optional[shared_googleprivacydlpv2infotype.GooglePrivacyDlpV2InfoType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infoType'), 'exclude': lambda f: f is None }})
    r"""Type of information detected by the API."""  
    redact_all_text: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactAllText'), 'exclude': lambda f: f is None }})
    r"""If true, all text found in the image, regardless whether it matches an info_type, is redacted. Only one should be provided."""  
    redaction_color: Optional[shared_googleprivacydlpv2color.GooglePrivacyDlpV2Color] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactionColor'), 'exclude': lambda f: f is None }})
    r"""Represents a color in the RGB color space."""  
    