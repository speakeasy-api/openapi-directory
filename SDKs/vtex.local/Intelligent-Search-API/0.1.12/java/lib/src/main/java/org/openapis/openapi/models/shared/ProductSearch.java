/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProductSearch - List of products for the given query.
 */
public class ProductSearch {
    /**
     * Object with information of misspelled terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correction")
    public ProductSearchCorrection correction;
    public ProductSearch withCorrection(ProductSearchCorrection correction) {
        this.correction = correction;
        return this;
    }
    
    /**
     * Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fuzzy")
    public String fuzzy;
    public ProductSearch withFuzzy(String fuzzy) {
        this.fuzzy = fuzzy;
        return this;
    }
    
    /**
     * Indicates how the search-engine dealt with the fullText when there is more than one word.
     *  * `and` - It means that the products contains all the words in the query.
     *  * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operator")
    public ProductSearchOperatorEnum operator;
    public ProductSearch withOperator(ProductSearchOperatorEnum operator) {
        this.operator = operator;
        return this;
    }
    
    /**
     * List of products
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public java.util.Map<String, Object>[] products;
    public ProductSearch withProducts(java.util.Map<String, Object>[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * Total number of products.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordsFiltered")
    public Double recordsFiltered;
    public ProductSearch withRecordsFiltered(Double recordsFiltered) {
        this.recordsFiltered = recordsFiltered;
        return this;
    }
    
    /**
     * Whether the list of products was translated by the IS (`true`) or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("translated")
    public Boolean translated;
    public ProductSearch withTranslated(Boolean translated) {
        this.translated = translated;
        return this;
    }
    
}
