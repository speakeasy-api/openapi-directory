"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dnskeyspec as shared_dnskeyspec
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Quota:
    r"""Limits associated with a Project."""
    
    dns_keys_per_managed_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsKeysPerManagedZone'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of DnsKeys per ManagedZone."""  
    gke_clusters_per_managed_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeClustersPerManagedZone'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of GKE clusters to which a privately scoped zone can be attached."""  
    gke_clusters_per_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeClustersPerPolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of GKE clusters per policy."""  
    gke_clusters_per_response_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeClustersPerResponsePolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of GKE clusters per response policy."""  
    items_per_routing_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsPerRoutingPolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of items per routing policy."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    managed_zones: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedZones'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of managed zones in the project."""  
    managed_zones_per_gke_cluster: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedZonesPerGkeCluster'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of managed zones which can be attached to a GKE cluster."""  
    managed_zones_per_network: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedZonesPerNetwork'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of managed zones which can be attached to a network."""  
    networks_per_managed_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networksPerManagedZone'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of networks to which a privately scoped zone can be attached."""  
    networks_per_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networksPerPolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of networks per policy."""  
    networks_per_response_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networksPerResponsePolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of networks per response policy."""  
    peering_zones_per_target_network: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peeringZonesPerTargetNetwork'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of consumer peering zones per target network owned by this producer project"""  
    policies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policies'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of policies per project."""  
    resource_records_per_rrset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceRecordsPerRrset'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of ResourceRecords per ResourceRecordSet."""  
    response_policies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsePolicies'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of response policies per project."""  
    response_policy_rules_per_response_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsePolicyRulesPerResponsePolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of rules per response policy."""  
    rrset_additions_per_change: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rrsetAdditionsPerChange'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest."""  
    rrset_deletions_per_change: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rrsetDeletionsPerChange'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest."""  
    rrsets_per_managed_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rrsetsPerManagedZone'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of ResourceRecordSets per zone in the project."""  
    target_name_servers_per_managed_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetNameServersPerManagedZone'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of target name servers per managed forwarding zone."""  
    target_name_servers_per_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetNameServersPerPolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed number of alternative target name servers per policy."""  
    total_rrdata_size_per_change: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalRrdataSizePerChange'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes."""  
    whitelisted_key_specs: Optional[list[shared_dnskeyspec.DNSKeySpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelistedKeySpecs'), 'exclude': lambda f: f is None }})
    r"""DNSSEC algorithm and key length types that can be used for DnsKeys."""  
    