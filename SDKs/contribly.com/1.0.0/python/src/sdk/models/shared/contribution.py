"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assignment as shared_assignment
from ..shared import mediausage as shared_mediausage
from ..shared import moderationhistoryitem as shared_moderationhistoryitem
from ..shared import place as shared_place
from ..shared import via as shared_via
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Contribution:
    r"""Contribution object to be created"""
    
    assignment: Optional[shared_assignment.Assignment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignment'), 'exclude': lambda f: f is None }})  
    attribution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribution'), 'exclude': lambda f: f is None }})
    r"""The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution."""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    headline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headline'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    media_usages: Optional[list[shared_mediausage.MediaUsage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaUsages'), 'exclude': lambda f: f is None }})  
    moderation_history: Optional[list[shared_moderationhistoryitem.ModerationHistoryItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderationHistory'), 'exclude': lambda f: f is None }})  
    place: Optional[shared_place.Place] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})  
    url_words: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlWords'), 'exclude': lambda f: f is None }})  
    via: Optional[shared_via.Via] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('via'), 'exclude': lambda f: f is None }})  
    