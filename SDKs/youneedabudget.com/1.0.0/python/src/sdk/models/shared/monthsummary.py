"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MonthSummary:
    
    activity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity') }})
    r"""The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'"""  
    budgeted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budgeted') }})
    r"""The total amount budgeted in the month"""  
    deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted') }})
    r"""Whether or not the month has been deleted.  Deleted months will only be included in delta requests."""  
    income: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('income') }})
    r"""The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month"""  
    month: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('month'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})  
    to_be_budgeted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to_be_budgeted') }})
    r"""The available amount for 'Ready to Assign'"""  
    age_of_money: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('age_of_money'), 'exclude': lambda f: f is None }})
    r"""The Age of Money as of the month"""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})  
    