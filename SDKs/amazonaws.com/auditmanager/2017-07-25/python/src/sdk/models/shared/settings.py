"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assessmentreportsdestination as shared_assessmentreportsdestination
from ..shared import deregistrationpolicy as shared_deregistrationpolicy
from ..shared import evidencefinderenablement as shared_evidencefinderenablement
from ..shared import role as shared_role
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Settings:
    r"""The settings object that holds all supported Audit Manager settings."""
    
    default_assessment_reports_destination: Optional[shared_assessmentreportsdestination.AssessmentReportsDestination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAssessmentReportsDestination'), 'exclude': lambda f: f is None }})  
    default_process_owners: Optional[list[shared_role.Role]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultProcessOwners'), 'exclude': lambda f: f is None }})  
    deregistration_policy: Optional[shared_deregistrationpolicy.DeregistrationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deregistrationPolicy'), 'exclude': lambda f: f is None }})  
    evidence_finder_enablement: Optional[shared_evidencefinderenablement.EvidenceFinderEnablement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evidenceFinderEnablement'), 'exclude': lambda f: f is None }})  
    is_aws_org_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAwsOrgEnabled'), 'exclude': lambda f: f is None }})  
    kms_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKey'), 'exclude': lambda f: f is None }})  
    sns_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snsTopic'), 'exclude': lambda f: f is None }})  
    