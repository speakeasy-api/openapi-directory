// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeAnalysisSchemesActionEnum
type GETDescribeAnalysisSchemesActionEnum string

const (
	GETDescribeAnalysisSchemesActionEnumDescribeAnalysisSchemes GETDescribeAnalysisSchemesActionEnum = "DescribeAnalysisSchemes"
)

func (e *GETDescribeAnalysisSchemesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeAnalysisSchemes":
		*e = GETDescribeAnalysisSchemesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAnalysisSchemesActionEnum: %s", s)
	}
}

// GETDescribeAnalysisSchemesVersionEnum
type GETDescribeAnalysisSchemesVersionEnum string

const (
	GETDescribeAnalysisSchemesVersionEnumTwoThousandAndThirteen0101 GETDescribeAnalysisSchemesVersionEnum = "2013-01-01"
)

func (e *GETDescribeAnalysisSchemesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-01-01":
		*e = GETDescribeAnalysisSchemesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAnalysisSchemesVersionEnum: %s", s)
	}
}

type GETDescribeAnalysisSchemesQueryParams struct {
	Action GETDescribeAnalysisSchemesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The analysis schemes you want to describe.
	AnalysisSchemeNames []string `queryParam:"style=form,explode=true,name=AnalysisSchemeNames"`
	// Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
	Deployed *bool `queryParam:"style=form,explode=true,name=Deployed"`
	// The name of the domain you want to describe.
	DomainName string                                `queryParam:"style=form,explode=true,name=DomainName"`
	Version    GETDescribeAnalysisSchemesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeAnalysisSchemesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeAnalysisSchemesRequest struct {
	QueryParams GETDescribeAnalysisSchemesQueryParams
	Headers     GETDescribeAnalysisSchemesHeaders
}

type GETDescribeAnalysisSchemesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
