"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SummarizeHotelViewsResponse:
    r"""Response message for HotelViewService.SummarizeHotelViews."""
    
    last_feed_submission_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFeedSubmissionTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last hotel feed submission."""  
    last_manifest_update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastManifestUpdateTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last hotel manifest update."""  
    live_on_google_property_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveOnGooglePropertyCount'), 'exclude': lambda f: f is None }})
    r"""The number of properties that are Live on Google."""  
    matched_property_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedPropertyCount'), 'exclude': lambda f: f is None }})
    r"""The number of properties that match Google's manifest."""  
    overclustered_property_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overclusteredPropertyCount'), 'exclude': lambda f: f is None }})
    r"""The number of hotels that are considered overclustered."""  
    overclustered_property_with_errors_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overclusteredPropertyWithErrorsCount'), 'exclude': lambda f: f is None }})
    r"""The number of overclustered properties that have data-related errors."""  
    unmatched_property_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unmatchedPropertyCount'), 'exclude': lambda f: f is None }})
    r"""The number of properties that are considered unmatched."""  
    unmatched_property_with_errors_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unmatchedPropertyWithErrorsCount'), 'exclude': lambda f: f is None }})
    r"""The number of unmatched properties that have data-related errors."""  
    