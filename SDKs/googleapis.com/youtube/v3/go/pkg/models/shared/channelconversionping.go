// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChannelConversionPingContextEnum - Defines the context of the ping.
type ChannelConversionPingContextEnum string

const (
	ChannelConversionPingContextEnumSubscribe   ChannelConversionPingContextEnum = "subscribe"
	ChannelConversionPingContextEnumUnsubscribe ChannelConversionPingContextEnum = "unsubscribe"
	ChannelConversionPingContextEnumCview       ChannelConversionPingContextEnum = "cview"
)

func (e *ChannelConversionPingContextEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "subscribe":
		fallthrough
	case "unsubscribe":
		fallthrough
	case "cview":
		*e = ChannelConversionPingContextEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelConversionPingContextEnum: %s", s)
	}
}

// ChannelConversionPing - Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
type ChannelConversionPing struct {
	// Defines the context of the ping.
	Context *ChannelConversionPingContextEnum `json:"context,omitempty"`
	// The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
	ConversionURL *string `json:"conversionUrl,omitempty"`
}
