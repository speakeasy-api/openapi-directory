// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PurchaseHostReservationResultCurrencyCodeEnum - The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.
type PurchaseHostReservationResultCurrencyCodeEnum string

const (
	PurchaseHostReservationResultCurrencyCodeEnumUsd PurchaseHostReservationResultCurrencyCodeEnum = "USD"
)

func (e *PurchaseHostReservationResultCurrencyCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		*e = PurchaseHostReservationResultCurrencyCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseHostReservationResultCurrencyCodeEnum: %s", s)
	}
}

// PurchaseHostReservationResultPurchaseCurrencyCodeEnum - The currency in which the <code>UpfrontPrice</code> and <code>HourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.
type PurchaseHostReservationResultPurchaseCurrencyCodeEnum string

const (
	PurchaseHostReservationResultPurchaseCurrencyCodeEnumUsd PurchaseHostReservationResultPurchaseCurrencyCodeEnum = "USD"
)

func (e *PurchaseHostReservationResultPurchaseCurrencyCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		*e = PurchaseHostReservationResultPurchaseCurrencyCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseHostReservationResultPurchaseCurrencyCodeEnum: %s", s)
	}
}

// PurchaseHostReservationResultPurchasePaymentOptionEnum - The payment option for the reservation.
type PurchaseHostReservationResultPurchasePaymentOptionEnum string

const (
	PurchaseHostReservationResultPurchasePaymentOptionEnumAllUpfront     PurchaseHostReservationResultPurchasePaymentOptionEnum = "AllUpfront"
	PurchaseHostReservationResultPurchasePaymentOptionEnumPartialUpfront PurchaseHostReservationResultPurchasePaymentOptionEnum = "PartialUpfront"
	PurchaseHostReservationResultPurchasePaymentOptionEnumNoUpfront      PurchaseHostReservationResultPurchasePaymentOptionEnum = "NoUpfront"
)

func (e *PurchaseHostReservationResultPurchasePaymentOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AllUpfront":
		fallthrough
	case "PartialUpfront":
		fallthrough
	case "NoUpfront":
		*e = PurchaseHostReservationResultPurchasePaymentOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseHostReservationResultPurchasePaymentOptionEnum: %s", s)
	}
}

// PurchaseHostReservationResultPurchase - Describes the result of the purchase.
type PurchaseHostReservationResultPurchase struct {
	CurrencyCode      *PurchaseHostReservationResultPurchaseCurrencyCodeEnum
	Duration          *int64
	HostIDSet         []string
	HostReservationID *string
	HourlyPrice       *string
	InstanceFamily    *string
	PaymentOption     *PurchaseHostReservationResultPurchasePaymentOptionEnum
	UpfrontPrice      *string
}

// PurchaseHostReservationResult - Success
type PurchaseHostReservationResult struct {
	ClientToken       *string
	CurrencyCode      *PurchaseHostReservationResultCurrencyCodeEnum
	Purchase          []PurchaseHostReservationResultPurchase
	TotalHourlyPrice  *string
	TotalUpfrontPrice *string
}
