// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// GbrGlobalAddressAdministrativeCountyEnum - Not available for non-UK addresses
type GbrGlobalAddressAdministrativeCountyEnum string

const (
	GbrGlobalAddressAdministrativeCountyEnumUnknown GbrGlobalAddressAdministrativeCountyEnum = ""
)

func (e *GbrGlobalAddressAdministrativeCountyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressAdministrativeCountyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressAdministrativeCountyEnum: %s", s)
	}
}

// GbrGlobalAddressBuildingNameEnum - Not available for non-UK addresses
type GbrGlobalAddressBuildingNameEnum string

const (
	GbrGlobalAddressBuildingNameEnumUnknown GbrGlobalAddressBuildingNameEnum = ""
)

func (e *GbrGlobalAddressBuildingNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressBuildingNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressBuildingNameEnum: %s", s)
	}
}

// GbrGlobalAddressBuildingNumberEnum - Not available for non-UK addresses
type GbrGlobalAddressBuildingNumberEnum string

const (
	GbrGlobalAddressBuildingNumberEnumUnknown GbrGlobalAddressBuildingNumberEnum = ""
)

func (e *GbrGlobalAddressBuildingNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressBuildingNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressBuildingNumberEnum: %s", s)
	}
}

// GbrGlobalAddressDeliveryPointSuffixEnum - Not available for non-UK addresses
type GbrGlobalAddressDeliveryPointSuffixEnum string

const (
	GbrGlobalAddressDeliveryPointSuffixEnumUnknown GbrGlobalAddressDeliveryPointSuffixEnum = ""
)

func (e *GbrGlobalAddressDeliveryPointSuffixEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDeliveryPointSuffixEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDeliveryPointSuffixEnum: %s", s)
	}
}

// GbrGlobalAddressDepartmentNameEnum - Not available for non-UK addresses
type GbrGlobalAddressDepartmentNameEnum string

const (
	GbrGlobalAddressDepartmentNameEnumUnknown GbrGlobalAddressDepartmentNameEnum = ""
)

func (e *GbrGlobalAddressDepartmentNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDepartmentNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDepartmentNameEnum: %s", s)
	}
}

// GbrGlobalAddressDependantLocalityEnum - Not available for non-UK addresses
type GbrGlobalAddressDependantLocalityEnum string

const (
	GbrGlobalAddressDependantLocalityEnumUnknown GbrGlobalAddressDependantLocalityEnum = ""
)

func (e *GbrGlobalAddressDependantLocalityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDependantLocalityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDependantLocalityEnum: %s", s)
	}
}

// GbrGlobalAddressDependantThoroughfareEnum - Not available for non-UK addresses
type GbrGlobalAddressDependantThoroughfareEnum string

const (
	GbrGlobalAddressDependantThoroughfareEnumUnknown GbrGlobalAddressDependantThoroughfareEnum = ""
)

func (e *GbrGlobalAddressDependantThoroughfareEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDependantThoroughfareEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDependantThoroughfareEnum: %s", s)
	}
}

// GbrGlobalAddressDistrictEnum - Not available for non-UK addresses
type GbrGlobalAddressDistrictEnum string

const (
	GbrGlobalAddressDistrictEnumUnknown GbrGlobalAddressDistrictEnum = ""
)

func (e *GbrGlobalAddressDistrictEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDistrictEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDistrictEnum: %s", s)
	}
}

// GbrGlobalAddressDoubleDependantLocalityEnum - Not available for non-UK addresses
type GbrGlobalAddressDoubleDependantLocalityEnum string

const (
	GbrGlobalAddressDoubleDependantLocalityEnumUnknown GbrGlobalAddressDoubleDependantLocalityEnum = ""
)

func (e *GbrGlobalAddressDoubleDependantLocalityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressDoubleDependantLocalityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressDoubleDependantLocalityEnum: %s", s)
	}
}

// GbrGlobalAddressEastingsEnum - Not available for non-UK addresses
type GbrGlobalAddressEastingsEnum string

const (
	GbrGlobalAddressEastingsEnumUnknown GbrGlobalAddressEastingsEnum = ""
)

func (e *GbrGlobalAddressEastingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressEastingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressEastingsEnum: %s", s)
	}
}

type GbrGlobalAddressNativeType string

const (
	GbrGlobalAddressNativeTypeEcadAddress GbrGlobalAddressNativeType = "EcadAddress"
	GbrGlobalAddressNativeTypeEcafAddress GbrGlobalAddressNativeType = "EcafAddress"
	GbrGlobalAddressNativeTypeUspsAddress GbrGlobalAddressNativeType = "UspsAddress"
)

type GbrGlobalAddressNative struct {
	EcadAddress *EcadAddress
	EcafAddress *EcafAddress
	UspsAddress *UspsAddress

	Type GbrGlobalAddressNativeType
}

func CreateGbrGlobalAddressNativeEcadAddress(ecadAddress EcadAddress) GbrGlobalAddressNative {
	typ := GbrGlobalAddressNativeTypeEcadAddress

	return GbrGlobalAddressNative{
		EcadAddress: &ecadAddress,
		Type:        typ,
	}
}

func CreateGbrGlobalAddressNativeEcafAddress(ecafAddress EcafAddress) GbrGlobalAddressNative {
	typ := GbrGlobalAddressNativeTypeEcafAddress

	return GbrGlobalAddressNative{
		EcafAddress: &ecafAddress,
		Type:        typ,
	}
}

func CreateGbrGlobalAddressNativeUspsAddress(uspsAddress UspsAddress) GbrGlobalAddressNative {
	typ := GbrGlobalAddressNativeTypeUspsAddress

	return GbrGlobalAddressNative{
		UspsAddress: &uspsAddress,
		Type:        typ,
	}
}

func (u *GbrGlobalAddressNative) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	ecadAddress := new(EcadAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ecadAddress); err == nil {
		u.EcadAddress = ecadAddress
		u.Type = GbrGlobalAddressNativeTypeEcadAddress
		return nil
	}

	ecafAddress := new(EcafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ecafAddress); err == nil {
		u.EcafAddress = ecafAddress
		u.Type = GbrGlobalAddressNativeTypeEcafAddress
		return nil
	}

	uspsAddress := new(UspsAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uspsAddress); err == nil {
		u.UspsAddress = uspsAddress
		u.Type = GbrGlobalAddressNativeTypeUspsAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GbrGlobalAddressNative) MarshalJSON() ([]byte, error) {
	if u.EcadAddress != nil {
		return json.Marshal(u.EcadAddress)
	}

	if u.EcafAddress != nil {
		return json.Marshal(u.EcafAddress)
	}

	if u.UspsAddress != nil {
		return json.Marshal(u.UspsAddress)
	}

	return nil, nil
}

// GbrGlobalAddressNorthingsEnum - Not available for non-UK addresses
type GbrGlobalAddressNorthingsEnum string

const (
	GbrGlobalAddressNorthingsEnumUnknown GbrGlobalAddressNorthingsEnum = ""
)

func (e *GbrGlobalAddressNorthingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressNorthingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressNorthingsEnum: %s", s)
	}
}

// GbrGlobalAddressOrganisationNameEnum - Not available for non-UK addresses
type GbrGlobalAddressOrganisationNameEnum string

const (
	GbrGlobalAddressOrganisationNameEnumUnknown GbrGlobalAddressOrganisationNameEnum = ""
)

func (e *GbrGlobalAddressOrganisationNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressOrganisationNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressOrganisationNameEnum: %s", s)
	}
}

// GbrGlobalAddressPoBoxEnum - Not available for non-UK addresses
type GbrGlobalAddressPoBoxEnum string

const (
	GbrGlobalAddressPoBoxEnumUnknown GbrGlobalAddressPoBoxEnum = ""
)

func (e *GbrGlobalAddressPoBoxEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPoBoxEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPoBoxEnum: %s", s)
	}
}

// GbrGlobalAddressPostalCountyEnum - Not available for non-UK addresses
type GbrGlobalAddressPostalCountyEnum string

const (
	GbrGlobalAddressPostalCountyEnumUnknown GbrGlobalAddressPostalCountyEnum = ""
)

func (e *GbrGlobalAddressPostalCountyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPostalCountyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPostalCountyEnum: %s", s)
	}
}

// GbrGlobalAddressPostcodeInwardEnum - Not available for non-UK addresses
type GbrGlobalAddressPostcodeInwardEnum string

const (
	GbrGlobalAddressPostcodeInwardEnumUnknown GbrGlobalAddressPostcodeInwardEnum = ""
)

func (e *GbrGlobalAddressPostcodeInwardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPostcodeInwardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPostcodeInwardEnum: %s", s)
	}
}

// GbrGlobalAddressPostcodeOutwardEnum - Not available for non-UK addresses
type GbrGlobalAddressPostcodeOutwardEnum string

const (
	GbrGlobalAddressPostcodeOutwardEnumUnknown GbrGlobalAddressPostcodeOutwardEnum = ""
)

func (e *GbrGlobalAddressPostcodeOutwardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPostcodeOutwardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPostcodeOutwardEnum: %s", s)
	}
}

// GbrGlobalAddressPostcodeTypeEnum - Not available for non-UK addresses
type GbrGlobalAddressPostcodeTypeEnum string

const (
	GbrGlobalAddressPostcodeTypeEnumUnknown GbrGlobalAddressPostcodeTypeEnum = ""
)

func (e *GbrGlobalAddressPostcodeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPostcodeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPostcodeTypeEnum: %s", s)
	}
}

// GbrGlobalAddressPremiseEnum - Not available for non-UK addresses
type GbrGlobalAddressPremiseEnum string

const (
	GbrGlobalAddressPremiseEnumUnknown GbrGlobalAddressPremiseEnum = ""
)

func (e *GbrGlobalAddressPremiseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressPremiseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressPremiseEnum: %s", s)
	}
}

// GbrGlobalAddressSuOrganisationIndicatorEnum - Not available for non-UK addresses
type GbrGlobalAddressSuOrganisationIndicatorEnum string

const (
	GbrGlobalAddressSuOrganisationIndicatorEnumUnknown GbrGlobalAddressSuOrganisationIndicatorEnum = ""
)

func (e *GbrGlobalAddressSuOrganisationIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressSuOrganisationIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressSuOrganisationIndicatorEnum: %s", s)
	}
}

// GbrGlobalAddressSubBuildingNameEnum - Not available for non-UK addresses
type GbrGlobalAddressSubBuildingNameEnum string

const (
	GbrGlobalAddressSubBuildingNameEnumUnknown GbrGlobalAddressSubBuildingNameEnum = ""
)

func (e *GbrGlobalAddressSubBuildingNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressSubBuildingNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressSubBuildingNameEnum: %s", s)
	}
}

// GbrGlobalAddressThoroughfareEnum - Not available for non-UK addresses
type GbrGlobalAddressThoroughfareEnum string

const (
	GbrGlobalAddressThoroughfareEnumUnknown GbrGlobalAddressThoroughfareEnum = ""
)

func (e *GbrGlobalAddressThoroughfareEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressThoroughfareEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressThoroughfareEnum: %s", s)
	}
}

// GbrGlobalAddressTraditionalCountyEnum - Not available for non-UK addresses
type GbrGlobalAddressTraditionalCountyEnum string

const (
	GbrGlobalAddressTraditionalCountyEnumUnknown GbrGlobalAddressTraditionalCountyEnum = ""
)

func (e *GbrGlobalAddressTraditionalCountyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressTraditionalCountyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressTraditionalCountyEnum: %s", s)
	}
}

// GbrGlobalAddressUmprnEnum - Not available for non-UK addresses. See `id` for address identifier
type GbrGlobalAddressUmprnEnum string

const (
	GbrGlobalAddressUmprnEnumUnknown GbrGlobalAddressUmprnEnum = ""
)

func (e *GbrGlobalAddressUmprnEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressUmprnEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressUmprnEnum: %s", s)
	}
}

// GbrGlobalAddressUprnEnum - Not available for non-UK addresses. See `id` for address identifier
type GbrGlobalAddressUprnEnum string

const (
	GbrGlobalAddressUprnEnumUnknown GbrGlobalAddressUprnEnum = ""
)

func (e *GbrGlobalAddressUprnEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressUprnEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressUprnEnum: %s", s)
	}
}

// GbrGlobalAddressWardEnum - Not available for non-UK addresses
type GbrGlobalAddressWardEnum string

const (
	GbrGlobalAddressWardEnumUnknown GbrGlobalAddressWardEnum = ""
)

func (e *GbrGlobalAddressWardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GbrGlobalAddressWardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrGlobalAddressWardEnum: %s", s)
	}
}

// GbrGlobalAddress - Global (non-UK) address in the UK address format
type GbrGlobalAddress struct {
	// Not available for non-UK addresses
	AdministrativeCounty GbrGlobalAddressAdministrativeCountyEnum `json:"administrative_county"`
	// Not available for non-UK addresses
	BuildingName GbrGlobalAddressBuildingNameEnum `json:"building_name"`
	// Not available for non-UK addresses
	BuildingNumber GbrGlobalAddressBuildingNumberEnum `json:"building_number"`
	//   Full country names (ISO 3166)
	//
	Country CountryEnum `json:"country"`
	//   3 letter country code (ISO 3166-1)
	//
	CountryIso CountryISOEnum `json:"country_iso"`
	//  2 letter country code (ISO 3166-1)
	//
	CountryIso2 CountryIso2Enum `json:"country_iso_2"`
	// State or county name
	County string `json:"county"`
	// Code abbreviation for state or county used in some countries.
	CountyCode string `json:"county_code"`
	// Indicates the provenance of an address.
	//
	//   - `paf` (GBR) Postcode Address File
	//   - `mr` (GBR) Multiple Residence File
	//   - `nyb` (GBR) Not Yet Built File
	//   - `pafa` (GBR) Alias File
	//   - `pafw` (GBR) Welsh File
	//   - `ecaf` (IRL) Eircode ECAF
	//   - `ecad` (IRL) Eircode ECAD
	//   - `usps` (USA) USPS Zip+4
	Dataset DatasetEnum `json:"dataset"`
	// Not available for non-UK addresses
	DeliveryPointSuffix GbrGlobalAddressDeliveryPointSuffixEnum `json:"delivery_point_suffix"`
	// Not available for non-UK addresses
	DepartmentName GbrGlobalAddressDepartmentNameEnum `json:"department_name"`
	// Not available for non-UK addresses
	DependantLocality GbrGlobalAddressDependantLocalityEnum `json:"dependant_locality"`
	// Not available for non-UK addresses
	DependantThoroughfare GbrGlobalAddressDependantThoroughfareEnum `json:"dependant_thoroughfare"`
	// Not available for non-UK addresses
	District GbrGlobalAddressDistrictEnum `json:"district"`
	// Not available for non-UK addresses
	DoubleDependantLocality GbrGlobalAddressDoubleDependantLocalityEnum `json:"double_dependant_locality"`
	// Not available for non-UK addresses
	Eastings GbrGlobalAddressEastingsEnum `json:"eastings"`
	// Global unique internally generated identifier for an address
	ID string `json:"id"`
	// Language represented by 2 letter ISO Code (639-1)
	//
	Language LanguageEnum `json:"language"`
	// The latitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. `51.5083983`.
	//
	// Returns an empty string if no location data is available.
	Latitude Latitude `json:"latitude"`
	// First line of the address. Typically the building number and street name
	Line1 string `json:"line_1"`
	// Second line of the address. Can be blank
	Line2 string `json:"line_2"`
	// Third line of the address. Can also be blank
	Line3 string `json:"line_3"`
	// The longitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. -0.1283983
	//
	// Returns an empty string if no location data is available.
	Longitude Longitude `json:"longitude"`
	// The native representation of a non-UK address
	Native GbrGlobalAddressNative `json:"native"`
	// Not available for non-UK addresses
	Northings GbrGlobalAddressNorthingsEnum `json:"northings"`
	// Not available for non-UK addresses
	OrganisationName GbrGlobalAddressOrganisationNameEnum `json:"organisation_name"`
	// Not available for non-UK addresses
	PoBox GbrGlobalAddressPoBoxEnum `json:"po_box"`
	// The city, town or other primary locality
	//
	PostTown string `json:"post_town"`
	// Not available for non-UK addresses
	PostalCounty GbrGlobalAddressPostalCountyEnum `json:"postal_county"`
	// Represents the postal or zip code
	Postcode string `json:"postcode"`
	// Not available for non-UK addresses
	PostcodeInward GbrGlobalAddressPostcodeInwardEnum `json:"postcode_inward"`
	// Not available for non-UK addresses
	PostcodeOutward GbrGlobalAddressPostcodeOutwardEnum `json:"postcode_outward"`
	// Not available for non-UK addresses
	PostcodeType GbrGlobalAddressPostcodeTypeEnum `json:"postcode_type"`
	// Not available for non-UK addresses
	Premise GbrGlobalAddressPremiseEnum `json:"premise"`
	// Not available for non-UK addresses
	SuOrganisationIndicator GbrGlobalAddressSuOrganisationIndicatorEnum `json:"su_organisation_indicator"`
	// Not available for non-UK addresses
	SubBuildingName GbrGlobalAddressSubBuildingNameEnum `json:"sub_building_name"`
	// Not available for non-UK addresses
	Thoroughfare GbrGlobalAddressThoroughfareEnum `json:"thoroughfare"`
	// Not available for non-UK addresses
	TraditionalCounty GbrGlobalAddressTraditionalCountyEnum `json:"traditional_county"`
	// Not available for non-UK addresses. See `id` for address identifier
	Udprn string `json:"udprn"`
	// Not available for non-UK addresses. See `id` for address identifier
	Umprn GbrGlobalAddressUmprnEnum `json:"umprn"`
	// Not available for non-UK addresses. See `id` for address identifier
	Uprn GbrGlobalAddressUprnEnum `json:"uprn"`
	// Not available for non-UK addresses
	Ward GbrGlobalAddressWardEnum `json:"ward"`
}
