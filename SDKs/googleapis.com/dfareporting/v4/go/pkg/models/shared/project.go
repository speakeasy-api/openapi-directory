// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// ProjectAudienceAgeGroupEnum - Audience age group of this project.
type ProjectAudienceAgeGroupEnum string

const (
	ProjectAudienceAgeGroupEnumPlanningAudienceAge1824     ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_18_24"
	ProjectAudienceAgeGroupEnumPlanningAudienceAge2534     ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_25_34"
	ProjectAudienceAgeGroupEnumPlanningAudienceAge3544     ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_35_44"
	ProjectAudienceAgeGroupEnumPlanningAudienceAge4554     ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_45_54"
	ProjectAudienceAgeGroupEnumPlanningAudienceAge5564     ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_55_64"
	ProjectAudienceAgeGroupEnumPlanningAudienceAge65OrMore ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_65_OR_MORE"
	ProjectAudienceAgeGroupEnumPlanningAudienceAgeUnknown  ProjectAudienceAgeGroupEnum = "PLANNING_AUDIENCE_AGE_UNKNOWN"
)

func (e *ProjectAudienceAgeGroupEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PLANNING_AUDIENCE_AGE_18_24":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_25_34":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_35_44":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_45_54":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_55_64":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_65_OR_MORE":
		fallthrough
	case "PLANNING_AUDIENCE_AGE_UNKNOWN":
		*e = ProjectAudienceAgeGroupEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectAudienceAgeGroupEnum: %s", s)
	}
}

// ProjectAudienceGenderEnum - Audience gender of this project.
type ProjectAudienceGenderEnum string

const (
	ProjectAudienceGenderEnumPlanningAudienceGenderMale   ProjectAudienceGenderEnum = "PLANNING_AUDIENCE_GENDER_MALE"
	ProjectAudienceGenderEnumPlanningAudienceGenderFemale ProjectAudienceGenderEnum = "PLANNING_AUDIENCE_GENDER_FEMALE"
)

func (e *ProjectAudienceGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PLANNING_AUDIENCE_GENDER_MALE":
		fallthrough
	case "PLANNING_AUDIENCE_GENDER_FEMALE":
		*e = ProjectAudienceGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectAudienceGenderEnum: %s", s)
	}
}

// Project - Contains properties of a Planning project.
type Project struct {
	// Account ID of this project.
	AccountID *string `json:"accountId,omitempty"`
	// Advertiser ID of this project.
	AdvertiserID *string `json:"advertiserId,omitempty"`
	// Audience age group of this project.
	AudienceAgeGroup *ProjectAudienceAgeGroupEnum `json:"audienceAgeGroup,omitempty"`
	// Audience gender of this project.
	AudienceGender *ProjectAudienceGenderEnum `json:"audienceGender,omitempty"`
	// Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.
	Budget *string `json:"budget,omitempty"`
	// Client billing code of this project.
	ClientBillingCode *string `json:"clientBillingCode,omitempty"`
	// Name of the project client.
	ClientName *string     `json:"clientName,omitempty"`
	EndDate    *types.Date `json:"endDate,omitempty"`
	// ID of this project. This is a read-only, auto-generated field.
	ID *string `json:"id,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "dfareporting#project".
	Kind *string `json:"kind,omitempty"`
	// Modification timestamp.
	LastModifiedInfo *LastModifiedInfo `json:"lastModifiedInfo,omitempty"`
	// Name of this project.
	Name *string `json:"name,omitempty"`
	// Overview of this project.
	Overview  *string     `json:"overview,omitempty"`
	StartDate *types.Date `json:"startDate,omitempty"`
	// Subaccount ID of this project.
	SubaccountID *string `json:"subaccountId,omitempty"`
	// Number of clicks that the advertiser is targeting.
	TargetClicks *string `json:"targetClicks,omitempty"`
	// Number of conversions that the advertiser is targeting.
	TargetConversions *string `json:"targetConversions,omitempty"`
	// CPA that the advertiser is targeting.
	TargetCpaNanos *string `json:"targetCpaNanos,omitempty"`
	// CPC that the advertiser is targeting.
	TargetCpcNanos *string `json:"targetCpcNanos,omitempty"`
	// vCPM from Active View that the advertiser is targeting.
	TargetCpmActiveViewNanos *string `json:"targetCpmActiveViewNanos,omitempty"`
	// CPM that the advertiser is targeting.
	TargetCpmNanos *string `json:"targetCpmNanos,omitempty"`
	// Number of impressions that the advertiser is targeting.
	TargetImpressions *string `json:"targetImpressions,omitempty"`
}
