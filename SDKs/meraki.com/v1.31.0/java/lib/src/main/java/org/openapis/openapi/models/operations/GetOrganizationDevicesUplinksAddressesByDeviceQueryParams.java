/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetOrganizationDevicesUplinksAddressesByDeviceQueryParams {
    /**
     * A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endingBefore")
    public String endingBefore;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withEndingBefore(String endingBefore) {
        this.endingBefore = endingBefore;
        return this;
    }
    
    /**
     * Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=networkIds")
    public String[] networkIds;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withNetworkIds(String[] networkIds) {
        this.networkIds = networkIds;
        return this;
    }
    
    /**
     * The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=perPage")
    public Long perPage;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=productTypes")
    public String[] productTypes;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withProductTypes(String[] productTypes) {
        this.productTypes = productTypes;
        return this;
    }
    
    /**
     * Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=serials")
    public String[] serials;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withSerials(String[] serials) {
        this.serials = serials;
        return this;
    }
    
    /**
     * A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startingAfter")
    public String startingAfter;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withStartingAfter(String startingAfter) {
        this.startingAfter = startingAfter;
        return this;
    }
    
    /**
     * An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=tags")
    public String[] tags;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tagsFilterType")
    public GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum tagsFilterType;
    public GetOrganizationDevicesUplinksAddressesByDeviceQueryParams withTagsFilterType(GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum tagsFilterType) {
        this.tagsFilterType = tagsFilterType;
        return this;
    }
    
}
