"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import extendedsourcecontext as shared_extendedsourcecontext
from ..shared import sourcecontext as shared_sourcecontext
from ..shared import statusmessage as shared_statusmessage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DebuggeeCanaryModeEnum(str, Enum):
    r"""Used when setting breakpoint canary for this debuggee."""
    CANARY_MODE_UNSPECIFIED = 'CANARY_MODE_UNSPECIFIED'
    CANARY_MODE_ALWAYS_ENABLED = 'CANARY_MODE_ALWAYS_ENABLED'
    CANARY_MODE_ALWAYS_DISABLED = 'CANARY_MODE_ALWAYS_DISABLED'
    CANARY_MODE_DEFAULT_ENABLED = 'CANARY_MODE_DEFAULT_ENABLED'
    CANARY_MODE_DEFAULT_DISABLED = 'CANARY_MODE_DEFAULT_DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Debuggee:
    r"""Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering."""
    
    agent_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agentVersion'), 'exclude': lambda f: f is None }})
    r"""Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`)."""  
    canary_mode: Optional[DebuggeeCanaryModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canaryMode'), 'exclude': lambda f: f is None }})
    r"""Used when setting breakpoint canary for this debuggee."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended."""  
    ext_source_contexts: Optional[list[shared_extendedsourcecontext.ExtendedSourceContext]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extSourceContexts'), 'exclude': lambda f: f is None }})
    r"""References to the locations and revisions of the source code used in the deployed application."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the debuggee generated by the controller service."""  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisabled'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, indicates that the agent should disable itself and detach from the debuggee."""  
    is_inactive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isInactive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A set of custom debuggee properties, populated by the agent, to be displayed to the user."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project."""  
    source_contexts: Optional[list[shared_sourcecontext.SourceContext]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceContexts'), 'exclude': lambda f: f is None }})
    r"""References to the locations and revisions of the source code used in the deployed application."""  
    status: Optional[shared_statusmessage.StatusMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`."""  
    uniquifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniquifier'), 'exclude': lambda f: f is None }})
    r"""Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment."""  
    