// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GETListQueueTagsPathParams struct {
	// The AWS account number
	AccountNumber int64 `pathParam:"style=simple,explode=false,name=AccountNumber"`
	// The name of the queue
	QueueName string `pathParam:"style=simple,explode=false,name=QueueName"`
}

// GETListQueueTagsActionEnum
type GETListQueueTagsActionEnum string

const (
	GETListQueueTagsActionEnumListQueueTags GETListQueueTagsActionEnum = "ListQueueTags"
)

func (e *GETListQueueTagsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListQueueTags":
		*e = GETListQueueTagsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListQueueTagsActionEnum: %s", s)
	}
}

// GETListQueueTagsVersionEnum
type GETListQueueTagsVersionEnum string

const (
	GETListQueueTagsVersionEnumTwoThousandAndTwelve1105 GETListQueueTagsVersionEnum = "2012-11-05"
)

func (e *GETListQueueTagsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-11-05":
		*e = GETListQueueTagsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListQueueTagsVersionEnum: %s", s)
	}
}

type GETListQueueTagsQueryParams struct {
	Action  GETListQueueTagsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version GETListQueueTagsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETListQueueTagsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListQueueTagsRequest struct {
	PathParams  GETListQueueTagsPathParams
	QueryParams GETListQueueTagsQueryParams
	Headers     GETListQueueTagsHeaders
}

type GETListQueueTagsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
