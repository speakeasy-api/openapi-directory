"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ephemeralstorage as shared_ephemeralstorage
from ..shared import fargateplatformconfiguration as shared_fargateplatformconfiguration
from ..shared import keyvaluepair as shared_keyvaluepair
from ..shared import linuxparameters as shared_linuxparameters
from ..shared import logconfiguration as shared_logconfiguration
from ..shared import mountpoint as shared_mountpoint
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import networkinterface as shared_networkinterface
from ..shared import resourcerequirement as shared_resourcerequirement
from ..shared import secret as shared_secret
from ..shared import ulimit as shared_ulimit
from ..shared import volume as shared_volume
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainerDetail:
    r"""An object that represents the details of a container that's part of a job."""
    
    command: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command'), 'exclude': lambda f: f is None }})  
    container_instance_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerInstanceArn'), 'exclude': lambda f: f is None }})  
    environment: Optional[list[shared_keyvaluepair.KeyValuePair]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})  
    ephemeral_storage: Optional[shared_ephemeralstorage.EphemeralStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ephemeralStorage'), 'exclude': lambda f: f is None }})
    r"""The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate."""  
    execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRoleArn'), 'exclude': lambda f: f is None }})  
    exit_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exitCode'), 'exclude': lambda f: f is None }})  
    fargate_platform_configuration: Optional[shared_fargateplatformconfiguration.FargatePlatformConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fargatePlatformConfiguration'), 'exclude': lambda f: f is None }})  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})  
    job_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobRoleArn'), 'exclude': lambda f: f is None }})  
    linux_parameters: Optional[shared_linuxparameters.LinuxParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linuxParameters'), 'exclude': lambda f: f is None }})  
    log_configuration: Optional[shared_logconfiguration.LogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logConfiguration'), 'exclude': lambda f: f is None }})  
    log_stream_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logStreamName'), 'exclude': lambda f: f is None }})  
    memory: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})  
    mount_points: Optional[list[shared_mountpoint.MountPoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountPoints'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_networkconfiguration.NetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfiguration'), 'exclude': lambda f: f is None }})  
    network_interfaces: Optional[list[shared_networkinterface.NetworkInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaces'), 'exclude': lambda f: f is None }})  
    privileged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privileged'), 'exclude': lambda f: f is None }})  
    readonly_root_filesystem: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readonlyRootFilesystem'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})  
    resource_requirements: Optional[list[shared_resourcerequirement.ResourceRequirement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceRequirements'), 'exclude': lambda f: f is None }})  
    secrets: Optional[list[shared_secret.Secret]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secrets'), 'exclude': lambda f: f is None }})  
    task_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskArn'), 'exclude': lambda f: f is None }})  
    ulimits: Optional[list[shared_ulimit.Ulimit]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ulimits'), 'exclude': lambda f: f is None }})  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    vcpus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcpus'), 'exclude': lambda f: f is None }})  
    volumes: Optional[list[shared_volume.Volume]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})  
    