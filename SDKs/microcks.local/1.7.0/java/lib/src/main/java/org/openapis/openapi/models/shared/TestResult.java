/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestResult - Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ...
 */
public class TestResult {
    /**
     * Elapsed time in milliseconds since test beginning
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elapsedTime")
    public Double elapsedTime;

    public TestResult withElapsedTime(Double elapsedTime) {
        this.elapsedTime = elapsedTime;
        return this;
    }
    
    /**
     * Unique identifier of TestResult
     */
    @JsonProperty("id")
    public String id;

    public TestResult withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Flag telling is test is still in progress
     */
    @JsonProperty("inProgress")
    public Boolean inProgress;

    public TestResult withInProgress(Boolean inProgress) {
        this.inProgress = inProgress;
        return this;
    }
    
    /**
     * Specification of additional headers for a Service/API operations. Keys are operation name or "globals" (if header applies to all), values are Header objects DTO.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationHeaders")
    public java.util.Map<String, HeaderDTO[]> operationHeaders;

    public TestResult withOperationHeaders(java.util.Map<String, HeaderDTO[]> operationHeaders) {
        this.operationHeaders = operationHeaders;
        return this;
    }
    
    /**
     * Type of test strategy (different strategies are implemented by different runners)
     */
    @JsonProperty("runnerType")
    public TestRunnerTypeEnum runnerType;

    public TestResult withRunnerType(TestRunnerTypeEnum runnerType) {
        this.runnerType = runnerType;
        return this;
    }
    
    /**
     * Lightweight reference for an existing Secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretRef")
    public SecretRef secretRef;

    public TestResult withSecretRef(SecretRef secretRef) {
        this.secretRef = secretRef;
        return this;
    }
    
    /**
     * Unique identifier of service tested
     */
    @JsonProperty("serviceId")
    public String serviceId;

    public TestResult withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }
    
    /**
     * Flag telling if test is a success
     */
    @JsonProperty("success")
    public Boolean success;

    public TestResult withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * TestCase results associated to this test
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testCaseResults")
    public TestCaseResult[] testCaseResults;

    public TestResult withTestCaseResults(TestCaseResult[] testCaseResults) {
        this.testCaseResults = testCaseResults;
        return this;
    }
    
    /**
     * Timestamp of creation date of this service
     */
    @JsonProperty("testDate")
    public Long testDate;

    public TestResult withTestDate(Long testDate) {
        this.testDate = testDate;
        return this;
    }
    
    /**
     * Incremental number for tracking number of tests of a service
     */
    @JsonProperty("testNumber")
    public Double testNumber;

    public TestResult withTestNumber(Double testNumber) {
        this.testNumber = testNumber;
        return this;
    }
    
    /**
     * Endpoint used during test
     */
    @JsonProperty("testedEndpoint")
    public String testedEndpoint;

    public TestResult withTestedEndpoint(String testedEndpoint) {
        this.testedEndpoint = testedEndpoint;
        return this;
    }
    
    /**
     * The maximum time (in milliseconds) to wait for this test ends
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public Long timeout;

    public TestResult withTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * Revision number of this test
     */
    @JsonProperty("version")
    public Double version;

    public TestResult withVersion(Double version) {
        this.version = version;
        return this;
    }
    
    public TestResult(@JsonProperty("id") String id, @JsonProperty("inProgress") Boolean inProgress, @JsonProperty("runnerType") TestRunnerTypeEnum runnerType, @JsonProperty("serviceId") String serviceId, @JsonProperty("success") Boolean success, @JsonProperty("testDate") Long testDate, @JsonProperty("testNumber") Double testNumber, @JsonProperty("testedEndpoint") String testedEndpoint, @JsonProperty("version") Double version) {
        this.id = id;
        this.inProgress = inProgress;
        this.runnerType = runnerType;
        this.serviceId = serviceId;
        this.success = success;
        this.testDate = testDate;
        this.testNumber = testNumber;
        this.testedEndpoint = testedEndpoint;
        this.version = version;
  }
}
