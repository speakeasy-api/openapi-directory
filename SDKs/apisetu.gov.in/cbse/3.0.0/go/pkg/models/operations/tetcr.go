// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TetcrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type TetcrRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year-Month
	YearMonth string `json:"year_month"`
}

// TetcrRequestBodyFormatEnum - The format of the certificate in response.
type TetcrRequestBodyFormatEnum string

const (
	TetcrRequestBodyFormatEnumPdf TetcrRequestBodyFormatEnum = "pdf"
)

func (e *TetcrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TetcrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TetcrRequestBodyFormatEnum: %s", s)
	}
}

// TetcrRequestBody - Request format
type TetcrRequestBody struct {
	CertificateParameters *TetcrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TetcrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Tetcr504ApplicationJSONErrorEnum string

const (
	Tetcr504ApplicationJSONErrorEnumGatewayTimeout Tetcr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Tetcr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Tetcr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr504ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tetcr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Tetcr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Tetcr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr504ApplicationJSON - Gateway timeout
type Tetcr504ApplicationJSON struct {
	Error            *Tetcr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr503ApplicationJSONErrorEnum string

const (
	Tetcr503ApplicationJSONErrorEnumServiceUnavailable Tetcr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Tetcr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Tetcr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr503ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tetcr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Tetcr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Tetcr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr503ApplicationJSON - Service unavailable
type Tetcr503ApplicationJSON struct {
	Error            *Tetcr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr502ApplicationJSONErrorEnum string

const (
	Tetcr502ApplicationJSONErrorEnumBadGatewy Tetcr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Tetcr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Tetcr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr502ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tetcr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Tetcr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Tetcr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr502ApplicationJSON - Bad gateway
type Tetcr502ApplicationJSON struct {
	Error            *Tetcr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr500ApplicationJSONErrorEnum string

const (
	Tetcr500ApplicationJSONErrorEnumInternalServerError Tetcr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Tetcr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Tetcr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr500ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr500ApplicationJSONErrorDescriptionEnumInternalServerError Tetcr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Tetcr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Tetcr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr500ApplicationJSON - Internal server error
type Tetcr500ApplicationJSON struct {
	Error            *Tetcr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr404ApplicationJSONErrorEnum string

const (
	Tetcr404ApplicationJSONErrorEnumRecordNotFound Tetcr404ApplicationJSONErrorEnum = "record_not_found"
	Tetcr404ApplicationJSONErrorEnumURLNotFound    Tetcr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Tetcr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tetcr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr404ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tetcr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tetcr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tetcr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Tetcr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tetcr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr404ApplicationJSON - No record found
type Tetcr404ApplicationJSON struct {
	Error            *Tetcr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr401ApplicationJSONErrorEnum string

const (
	Tetcr401ApplicationJSONErrorEnumInvalidAuthentication Tetcr401ApplicationJSONErrorEnum = "invalid_authentication"
	Tetcr401ApplicationJSONErrorEnumInvalidAuthorization  Tetcr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Tetcr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tetcr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr401ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tetcr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tetcr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tetcr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Tetcr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tetcr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr401ApplicationJSON - Unauthorized access
type Tetcr401ApplicationJSON struct {
	Error            *Tetcr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetcr400ApplicationJSONErrorEnum string

const (
	Tetcr400ApplicationJSONErrorEnumMissingParameter Tetcr400ApplicationJSONErrorEnum = "missing_parameter"
	Tetcr400ApplicationJSONErrorEnumInvalidParameter Tetcr400ApplicationJSONErrorEnum = "invalid_parameter"
	Tetcr400ApplicationJSONErrorEnumInvalidFormat    Tetcr400ApplicationJSONErrorEnum = "invalid_format"
	Tetcr400ApplicationJSONErrorEnumInvalidTxnid     Tetcr400ApplicationJSONErrorEnum = "invalid_txnid"
	Tetcr400ApplicationJSONErrorEnumInvalidConsentid Tetcr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Tetcr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tetcr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Tetcr400ApplicationJSONErrorDescriptionEnum string

const (
	Tetcr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tetcr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tetcr400ApplicationJSONErrorDescriptionEnumBadRequest                              Tetcr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tetcr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tetcr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tetcr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tetcr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tetcr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tetcr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Tetcr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tetcr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetcr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tetcr400ApplicationJSON - Bad request
type Tetcr400ApplicationJSON struct {
	Error            *Tetcr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetcr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TetcrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tetcr400ApplicationJSONObject *Tetcr400ApplicationJSON
	// Unauthorized access
	Tetcr401ApplicationJSONObject *Tetcr401ApplicationJSON
	// No record found
	Tetcr404ApplicationJSONObject *Tetcr404ApplicationJSON
	// Internal server error
	Tetcr500ApplicationJSONObject *Tetcr500ApplicationJSON
	// Bad gateway
	Tetcr502ApplicationJSONObject *Tetcr502ApplicationJSON
	// Service unavailable
	Tetcr503ApplicationJSONObject *Tetcr503ApplicationJSON
	// Gateway timeout
	Tetcr504ApplicationJSONObject *Tetcr504ApplicationJSON
}
