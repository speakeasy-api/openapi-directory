/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ProxyGetPaymentMethodSnapshot {
    /**
     * The ID of the customer account associated with this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyGetPaymentMethodSnapshot withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAbaCode")
    public String achAbaCode;
    public ProxyGetPaymentMethodSnapshot withAchAbaCode(String achAbaCode) {
        this.achAbaCode = achAbaCode;
        return this;
    }
    
    /**
     * The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountName")
    public String achAccountName;
    public ProxyGetPaymentMethodSnapshot withAchAccountName(String achAccountName) {
        this.achAccountName = achAccountName;
        return this;
    }
    
    /**
     * This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountNumberMask")
    public String achAccountNumberMask;
    public ProxyGetPaymentMethodSnapshot withAchAccountNumberMask(String achAccountNumberMask) {
        this.achAccountNumberMask = achAccountNumberMask;
        return this;
    }
    
    /**
     * The type of bank account associated with the ACH payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountType")
    public ProxyGetPaymentMethodSnapshotAchAccountTypeEnum achAccountType;
    public ProxyGetPaymentMethodSnapshot withAchAccountType(ProxyGetPaymentMethodSnapshotAchAccountTypeEnum achAccountType) {
        this.achAccountType = achAccountType;
        return this;
    }
    
    /**
     * The name of the bank where the ACH payment account is held.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchBankName")
    public String achBankName;
    public ProxyGetPaymentMethodSnapshot withAchBankName(String achBankName) {
        this.achBankName = achBankName;
        return this;
    }
    
    /**
     * The branch code of the bank used for direct debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankBranchCode")
    public String bankBranchCode;
    public ProxyGetPaymentMethodSnapshot withBankBranchCode(String bankBranchCode) {
        this.bankBranchCode = bankBranchCode;
        return this;
    }
    
    /**
     * The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCheckDigit")
    public String bankCheckDigit;
    public ProxyGetPaymentMethodSnapshot withBankCheckDigit(String bankCheckDigit) {
        this.bankCheckDigit = bankCheckDigit;
        return this;
    }
    
    /**
     * The city of the direct debit bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCity")
    public String bankCity;
    public ProxyGetPaymentMethodSnapshot withBankCity(String bankCity) {
        this.bankCity = bankCity;
        return this;
    }
    
    /**
     * The sort code or number that identifies the bank. This is also known as the sort code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCode")
    public String bankCode;
    public ProxyGetPaymentMethodSnapshot withBankCode(String bankCode) {
        this.bankCode = bankCode;
        return this;
    }
    
    /**
     * The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankIdentificationNumber")
    public String bankIdentificationNumber;
    public ProxyGetPaymentMethodSnapshot withBankIdentificationNumber(String bankIdentificationNumber) {
        this.bankIdentificationNumber = bankIdentificationNumber;
        return this;
    }
    
    /**
     * The name of the direct debit bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankName")
    public String bankName;
    public ProxyGetPaymentMethodSnapshot withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     * The zip code or postal code of the direct debit bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankPostalCode")
    public String bankPostalCode;
    public ProxyGetPaymentMethodSnapshot withBankPostalCode(String bankPostalCode) {
        this.bankPostalCode = bankPostalCode;
        return this;
    }
    
    /**
     * The name of the street of the direct debit bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankStreetName")
    public String bankStreetName;
    public ProxyGetPaymentMethodSnapshot withBankStreetName(String bankStreetName) {
        this.bankStreetName = bankStreetName;
        return this;
    }
    
    /**
     * The number of the direct debit bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankStreetNumber")
    public String bankStreetNumber;
    public ProxyGetPaymentMethodSnapshot withBankStreetNumber(String bankStreetNumber) {
        this.bankStreetNumber = bankStreetNumber;
        return this;
    }
    
    /**
     * The name on the direct debit bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountName")
    public String bankTransferAccountName;
    public ProxyGetPaymentMethodSnapshot withBankTransferAccountName(String bankTransferAccountName) {
        this.bankTransferAccountName = bankTransferAccountName;
        return this;
    }
    
    /**
     * This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountNumberMask")
    public String bankTransferAccountNumberMask;
    public ProxyGetPaymentMethodSnapshot withBankTransferAccountNumberMask(String bankTransferAccountNumberMask) {
        this.bankTransferAccountNumberMask = bankTransferAccountNumberMask;
        return this;
    }
    
    /**
     * The type of the customer's bank account. Applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountType")
    public String bankTransferAccountType;
    public ProxyGetPaymentMethodSnapshot withBankTransferAccountType(String bankTransferAccountType) {
        this.bankTransferAccountType = bankTransferAccountType;
        return this;
    }
    
    /**
     * Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
     * 
     * Possible Values: 
     * 
     * 
     * * `AutomatischIncasso` (NL)
     * 
     * * `LastschriftDE` (Germany)
     * 
     * * `LastschriftAT` (Austria)
     * 
     * * `DemandeDePrelevement` (FR)
     * 
     * * `DirectDebitUK` (UK)
     * 
     * * `Domicil` (Belgium)
     * 
     * * `LastschriftCH` (CH)
     * 
     * * `RID` (Italy)
     * 
     * * `OrdenDeDomiciliacion` (Spain)
     * * `Autogiro` (Sweden)
     * * `Betalingsservice` (Denmark)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferType")
    public ProxyGetPaymentMethodSnapshotBankTransferTypeEnum bankTransferType;
    public ProxyGetPaymentMethodSnapshot withBankTransferType(ProxyGetPaymentMethodSnapshotBankTransferTypeEnum bankTransferType) {
        this.bankTransferType = bankTransferType;
        return this;
    }
    
    /**
     * The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BusinessIdentificationCode")
    public String businessIdentificationCode;
    public ProxyGetPaymentMethodSnapshot withBusinessIdentificationCode(String businessIdentificationCode) {
        this.businessIdentificationCode = businessIdentificationCode;
        return this;
    }
    
    /**
     * The city of the customer's address. Applicable to debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    public String city;
    public ProxyGetPaymentMethodSnapshot withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The name of the company.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CompanyName")
    public String companyName;
    public ProxyGetPaymentMethodSnapshot withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The two-letter country code of the customer's address. Applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    public String country;
    public ProxyGetPaymentMethodSnapshot withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress1")
    public String creditCardAddress1;
    public ProxyGetPaymentMethodSnapshot withCreditCardAddress1(String creditCardAddress1) {
        this.creditCardAddress1 = creditCardAddress1;
        return this;
    }
    
    /**
     * The second line of the card holder's address. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress2")
    public String creditCardAddress2;
    public ProxyGetPaymentMethodSnapshot withCreditCardAddress2(String creditCardAddress2) {
        this.creditCardAddress2 = creditCardAddress2;
        return this;
    }
    
    /**
     * The city of the card holder's address. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCity")
    public String creditCardCity;
    public ProxyGetPaymentMethodSnapshot withCreditCardCity(String creditCardCity) {
        this.creditCardCity = creditCardCity;
        return this;
    }
    
    /**
     * The country of the card holder's address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCountry")
    public String creditCardCountry;
    public ProxyGetPaymentMethodSnapshot withCreditCardCountry(String creditCardCountry) {
        this.creditCardCountry = creditCardCountry;
        return this;
    }
    
    /**
     * The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationMonth")
    public Integer creditCardExpirationMonth;
    public ProxyGetPaymentMethodSnapshot withCreditCardExpirationMonth(Integer creditCardExpirationMonth) {
        this.creditCardExpirationMonth = creditCardExpirationMonth;
        return this;
    }
    
    /**
     * The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationYear")
    public Integer creditCardExpirationYear;
    public ProxyGetPaymentMethodSnapshot withCreditCardExpirationYear(Integer creditCardExpirationYear) {
        this.creditCardExpirationYear = creditCardExpirationYear;
        return this;
    }
    
    /**
     * The full name of the card holder. Applicable to credit card and direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardHolderName")
    public String creditCardHolderName;
    public ProxyGetPaymentMethodSnapshot withCreditCardHolderName(String creditCardHolderName) {
        this.creditCardHolderName = creditCardHolderName;
        return this;
    }
    
    /**
     * A masked version of the credit or debit card number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardMaskNumber")
    public String creditCardMaskNumber;
    public ProxyGetPaymentMethodSnapshot withCreditCardMaskNumber(String creditCardMaskNumber) {
        this.creditCardMaskNumber = creditCardMaskNumber;
        return this;
    }
    
    /**
     * The billing address's zip code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardPostalCode")
    public String creditCardPostalCode;
    public ProxyGetPaymentMethodSnapshot withCreditCardPostalCode(String creditCardPostalCode) {
        this.creditCardPostalCode = creditCardPostalCode;
        return this;
    }
    
    /**
     * The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardState")
    public String creditCardState;
    public ProxyGetPaymentMethodSnapshot withCreditCardState(String creditCardState) {
        this.creditCardState = creditCardState;
        return this;
    }
    
    /**
     * The type of credit card or debit card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardType")
    public ProxyGetPaymentMethodSnapshotCreditCardTypeEnum creditCardType;
    public ProxyGetPaymentMethodSnapshot withCreditCardType(ProxyGetPaymentMethodSnapshotCreditCardTypeEnum creditCardType) {
        this.creditCardType = creditCardType;
        return this;
    }
    
    /**
     * The session ID of the user when the `PaymentMethod` was created or updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeviceSessionId")
    public String deviceSessionId;
    public ProxyGetPaymentMethodSnapshot withDeviceSessionId(String deviceSessionId) {
        this.deviceSessionId = deviceSessionId;
        return this;
    }
    
    /**
     * An email address for the payment method in addition to the bill to contact email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Email")
    public String email;
    public ProxyGetPaymentMethodSnapshot withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Indicates if the customer has an existing mandate or a new mandate. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExistingMandate")
    public ProxyGetPaymentMethodSnapshotExistingMandateEnum existingMandate;
    public ProxyGetPaymentMethodSnapshot withExistingMandate(ProxyGetPaymentMethodSnapshotExistingMandateEnum existingMandate) {
        this.existingMandate = existingMandate;
        return this;
    }
    
    /**
     * The customer's first name. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FirstName")
    public String firstName;
    public ProxyGetPaymentMethodSnapshot withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The International Bank Account Number. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    public String iban;
    public ProxyGetPaymentMethodSnapshot withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     * The IP address of the user when the payment method was created or updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPAddress")
    public String ipAddress;
    public ProxyGetPaymentMethodSnapshot withIPAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetPaymentMethodSnapshot withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The unique identity number of the customer account. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IdentityNumber")
    public String identityNumber;
    public ProxyGetPaymentMethodSnapshot withIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
        return this;
    }
    
    /**
     * Whether the customer account is a company.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsCompany")
    public Boolean isCompany;
    public ProxyGetPaymentMethodSnapshot withIsCompany(Boolean isCompany) {
        this.isCompany = isCompany;
        return this;
    }
    
    /**
     * The date of the last failed attempt to collect payment with this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastFailedSaleTransactionDate")
    public OffsetDateTime lastFailedSaleTransactionDate;
    public ProxyGetPaymentMethodSnapshot withLastFailedSaleTransactionDate(OffsetDateTime lastFailedSaleTransactionDate) {
        this.lastFailedSaleTransactionDate = lastFailedSaleTransactionDate;
        return this;
    }
    
    /**
     * The customer's last name. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastName")
    public String lastName;
    public ProxyGetPaymentMethodSnapshot withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * The date of the most recent transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastTransactionDateTime")
    public OffsetDateTime lastTransactionDateTime;
    public ProxyGetPaymentMethodSnapshot withLastTransactionDateTime(OffsetDateTime lastTransactionDateTime) {
        this.lastTransactionDateTime = lastTransactionDateTime;
        return this;
    }
    
    /**
     * The status of the most recent transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastTransactionStatus")
    public String lastTransactionStatus;
    public ProxyGetPaymentMethodSnapshot withLastTransactionStatus(String lastTransactionStatus) {
        this.lastTransactionStatus = lastTransactionStatus;
        return this;
    }
    
    /**
     * The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateCreationDate")
    public LocalDate mandateCreationDate;
    public ProxyGetPaymentMethodSnapshot withMandateCreationDate(LocalDate mandateCreationDate) {
        this.mandateCreationDate = mandateCreationDate;
        return this;
    }
    
    /**
     * The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateID")
    public String mandateID;
    public ProxyGetPaymentMethodSnapshot withMandateID(String mandateID) {
        this.mandateID = mandateID;
        return this;
    }
    
    /**
     * Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateReceived")
    public String mandateReceived;
    public ProxyGetPaymentMethodSnapshot withMandateReceived(String mandateReceived) {
        this.mandateReceived = mandateReceived;
        return this;
    }
    
    /**
     * The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateUpdateDate")
    public LocalDate mandateUpdateDate;
    public ProxyGetPaymentMethodSnapshot withMandateUpdateDate(LocalDate mandateUpdateDate) {
        this.mandateUpdateDate = mandateUpdateDate;
        return this;
    }
    
    /**
     * The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxConsecutivePaymentFailures")
    public Long maxConsecutivePaymentFailures;
    public ProxyGetPaymentMethodSnapshot withMaxConsecutivePaymentFailures(Long maxConsecutivePaymentFailures) {
        this.maxConsecutivePaymentFailures = maxConsecutivePaymentFailures;
        return this;
    }
    
    /**
     * The name of the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ProxyGetPaymentMethodSnapshot withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of consecutive failed payment for the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumConsecutiveFailures")
    public Integer numConsecutiveFailures;
    public ProxyGetPaymentMethodSnapshot withNumConsecutiveFailures(Integer numConsecutiveFailures) {
        this.numConsecutiveFailures = numConsecutiveFailures;
        return this;
    }
    
    /**
     * Object identifier of the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodId")
    public String paymentMethodId;
    public ProxyGetPaymentMethodSnapshot withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * Specifies the status of the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodStatus")
    public ProxyGetPaymentMethodSnapshotPaymentMethodStatusEnum paymentMethodStatus;
    public ProxyGetPaymentMethodSnapshot withPaymentMethodStatus(ProxyGetPaymentMethodSnapshotPaymentMethodStatusEnum paymentMethodStatus) {
        this.paymentMethodStatus = paymentMethodStatus;
        return this;
    }
    
    /**
     * The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentRetryWindow")
    public Long paymentRetryWindow;
    public ProxyGetPaymentMethodSnapshot withPaymentRetryWindow(Long paymentRetryWindow) {
        this.paymentRetryWindow = paymentRetryWindow;
        return this;
    }
    
    /**
     * The PayPal billing agreement ID, which is a contract between two PayPal accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalBaid")
    public String paypalBaid;
    public ProxyGetPaymentMethodSnapshot withPaypalBaid(String paypalBaid) {
        this.paypalBaid = paypalBaid;
        return this;
    }
    
    /**
     * The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalEmail")
    public String paypalEmail;
    public ProxyGetPaymentMethodSnapshot withPaypalEmail(String paypalEmail) {
        this.paypalEmail = paypalEmail;
        return this;
    }
    
    /**
     * PayPal's Adaptive Payments API key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalPreapprovalKey")
    public String paypalPreapprovalKey;
    public ProxyGetPaymentMethodSnapshot withPaypalPreapprovalKey(String paypalPreapprovalKey) {
        this.paypalPreapprovalKey = paypalPreapprovalKey;
        return this;
    }
    
    /**
     * Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalType")
    public ProxyGetPaymentMethodSnapshotPaypalTypeEnum paypalType;
    public ProxyGetPaymentMethodSnapshot withPaypalType(ProxyGetPaymentMethodSnapshotPaypalTypeEnum paypalType) {
        this.paypalType = paypalType;
        return this;
    }
    
    /**
     * The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Phone")
    public String phone;
    public ProxyGetPaymentMethodSnapshot withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * The zip code of the customer's address. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostalCode")
    public String postalCode;
    public ProxyGetPaymentMethodSnapshot withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondTokenId")
    public String secondTokenId;
    public ProxyGetPaymentMethodSnapshot withSecondTokenId(String secondTokenId) {
        this.secondTokenId = secondTokenId;
        return this;
    }
    
    /**
     * The state of the customer's address. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public String state;
    public ProxyGetPaymentMethodSnapshot withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The street name of the customer's address. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetName")
    public String streetName;
    public ProxyGetPaymentMethodSnapshot withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     * The street number of the customer's address. Only applicable to direct debit payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetNumber")
    public String streetNumber;
    public ProxyGetPaymentMethodSnapshot withStreetNumber(String streetNumber) {
        this.streetNumber = streetNumber;
        return this;
    }
    
    /**
     * A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TokenId")
    public String tokenId;
    public ProxyGetPaymentMethodSnapshot withTokenId(String tokenId) {
        this.tokenId = tokenId;
        return this;
    }
    
    /**
     * The number of error payments that used this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalNumberOfErrorPayments")
    public Integer totalNumberOfErrorPayments;
    public ProxyGetPaymentMethodSnapshot withTotalNumberOfErrorPayments(Integer totalNumberOfErrorPayments) {
        this.totalNumberOfErrorPayments = totalNumberOfErrorPayments;
        return this;
    }
    
    /**
     * The number of successful payments that used this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalNumberOfProcessedPayments")
    public Integer totalNumberOfProcessedPayments;
    public ProxyGetPaymentMethodSnapshot withTotalNumberOfProcessedPayments(Integer totalNumberOfProcessedPayments) {
        this.totalNumberOfProcessedPayments = totalNumberOfProcessedPayments;
        return this;
    }
    
    /**
     * The type of payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public ProxyGetPaymentMethodSnapshotTypeEnum type;
    public ProxyGetPaymentMethodSnapshot withType(ProxyGetPaymentMethodSnapshotTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Determines whether to use the default retry rules configured in the Zuora Payments settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseDefaultRetryRule")
    public Boolean useDefaultRetryRule;
    public ProxyGetPaymentMethodSnapshot withUseDefaultRetryRule(Boolean useDefaultRetryRule) {
        this.useDefaultRetryRule = useDefaultRetryRule;
        return this;
    }
    
}
