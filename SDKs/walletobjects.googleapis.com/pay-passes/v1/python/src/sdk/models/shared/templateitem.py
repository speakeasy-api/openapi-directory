"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldselector as shared_fieldselector
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TemplateItemPredefinedItemEnum(str, Enum):
    r"""A predefined item to display. Only one of `firstValue` or `predefinedItem` may be set."""
    PREDEFINED_ITEM_UNSPECIFIED = 'PREDEFINED_ITEM_UNSPECIFIED'
    FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER_UPPER = 'FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER'
    FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER_MIXED = 'frequentFlyerProgramNameAndNumber'
    FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER_UPPER = 'FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER'
    FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER_MIXED = 'flightNumberAndOperatingFlightNumber'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateItem:
    
    first_value: Optional[shared_fieldselector.FieldSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstValue'), 'exclude': lambda f: f is None }})
    r"""Custom field selector to use with field overrides."""  
    predefined_item: Optional[TemplateItemPredefinedItemEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predefinedItem'), 'exclude': lambda f: f is None }})
    r"""A predefined item to display. Only one of `firstValue` or `predefinedItem` may be set."""  
    second_value: Optional[shared_fieldselector.FieldSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondValue'), 'exclude': lambda f: f is None }})
    r"""Custom field selector to use with field overrides."""  
    