"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import capabilityproblementity_recursive as shared_capabilityproblementity_recursive
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CapabilityProblemEntityTypeEnum(str, Enum):
    BANK_ACCOUNT = 'BankAccount'
    DOCUMENT = 'Document'
    LEGAL_ENTITY = 'LegalEntity'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CapabilityProblemEntity:
    
    documents: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    owner: Optional[shared_capabilityproblementity_recursive.CapabilityProblemEntityRecursive] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})  
    type: Optional[CapabilityProblemEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    