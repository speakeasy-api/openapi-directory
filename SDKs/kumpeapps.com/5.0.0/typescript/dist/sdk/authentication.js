"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentication = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Authenticate KumpeApps users (required to get apiKey)
 */
var Authentication = /** @class */ (function () {
    function Authentication(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Compromise app key
     *
     * @remarks
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     */
    Authentication.prototype.appkeyPatch = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AppkeyPatchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/appkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "patch" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AppkeyPatchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Request app key
     *
     * @remarks
     * Request a new app key by passing username and password for app account
     */
    Authentication.prototype.appkeyPost = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AppkeyPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/appkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AppkeyPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse201 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse201);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deactivate app key
     *
     * @remarks
     * Pass your app key to deactivate the key
     */
    Authentication.prototype.appkeyPut = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AppkeyPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/appkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AppkeyPutSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AppkeyPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Compromise app key
     *
     * @remarks
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     */
    Authentication.prototype.authAppkeyPatch = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAppkeyPatchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/appkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "patch" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAppkeyPatchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Request app key
     *
     * @remarks
     * Request a new app key by passing username and password for app account
     */
    Authentication.prototype.authAppkeyPost = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAppkeyPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/appkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAppkeyPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse201 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse201);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deactivate app key
     *
     * @remarks
     * Pass your app key to deactivate the key
     */
    Authentication.prototype.authAppkeyPut = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAppkeyPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/appkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthAppkeyPutSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAppkeyPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Request auth key for user (login user)
     *
     * @remarks
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     */
    Authentication.prototype.authAuthkeyGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAuthkeyGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthAuthkeyGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAuthkeyGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse2011 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse2011);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndThree = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndThree);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 449:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFortyNine = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFortyNine);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Compromise auth key
     *
     * @remarks
     * Mark user auth key as compromised
     */
    Authentication.prototype.authAuthkeyPatch = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAuthkeyPatchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/authkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "patch" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAuthkeyPatchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
            }
            return res;
        });
    };
    /**
     * Request auth key for user (login user)
     *
     * @remarks
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     */
    Authentication.prototype.authAuthkeyPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAuthkeyPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthAuthkeyPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAuthkeyPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse2011 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse2011);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndThree = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndThree);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 449:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFortyNine = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFortyNine);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deactivate auth key (logout)
     *
     * @remarks
     * Deactivate auth key for user logging them out of your application
     */
    Authentication.prototype.authAuthkeyPut = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthAuthkeyPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthAuthkeyPutSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthAuthkeyPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
            }
            return res;
        });
    };
    /**
     * Verifies YubiKey OTP for authenticated user
     *
     * @remarks
     * Verifies YubiKey OTP for authenticated user
     */
    Authentication.prototype.authVerifyotpGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthVerifyotpGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authentication/verifyotp";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthVerifyotpGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthVerifyotpGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [200, 401].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndThree = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndThree);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Request auth key for user (login user)
     *
     * @remarks
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     */
    Authentication.prototype.authkeyGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthkeyGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthkeyGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthkeyGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse2011 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse2011);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndThree = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndThree);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 449:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFortyNine = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFortyNine);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Compromise auth key
     *
     * @remarks
     * Mark user auth key as compromised
     */
    Authentication.prototype.authkeyPatch = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthkeyPatchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authkey";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "patch" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthkeyPatchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
            }
            return res;
        });
    };
    /**
     * Request auth key for user (login user)
     *
     * @remarks
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     */
    Authentication.prototype.authkeyPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthkeyPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthkeyPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthkeyPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse2011 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse2011);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndThree = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndThree);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 449:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFortyNine = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFortyNine);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deactivate auth key (logout)
     *
     * @remarks
     * Deactivate auth key for user logging them out of your application
     */
    Authentication.prototype.authkeyPut = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AuthkeyPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/authkey";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AuthkeyPutSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AuthkeyPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.inlineResponse202 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InlineResponse202);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    break;
            }
            return res;
        });
    };
    return Authentication;
}());
exports.Authentication = Authentication;
