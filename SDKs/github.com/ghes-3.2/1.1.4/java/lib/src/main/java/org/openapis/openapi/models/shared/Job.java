/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Job - Information of a job execution in a workflow run
 */
public class Job {
    @JsonProperty("check_run_url")
    public String checkRunUrl;

    public Job withCheckRunUrl(String checkRunUrl) {
        this.checkRunUrl = checkRunUrl;
        return this;
    }
    
    /**
     * The time that the job finished, in ISO 8601 format.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completed_at")
    public OffsetDateTime completedAt;

    public Job withCompletedAt(OffsetDateTime completedAt) {
        this.completedAt = completedAt;
        return this;
    }
    
    /**
     * The outcome of the job.
     */
    @JsonProperty("conclusion")
    public JobConclusionEnum conclusion;

    public Job withConclusion(JobConclusionEnum conclusion) {
        this.conclusion = conclusion;
        return this;
    }
    
    /**
     * The SHA of the commit that is being run.
     */
    @JsonProperty("head_sha")
    public String headSha;

    public Job withHeadSha(String headSha) {
        this.headSha = headSha;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;

    public Job withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The id of the job.
     */
    @JsonProperty("id")
    public Long id;

    public Job withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the job.
     */
    @JsonProperty("name")
    public String name;

    public Job withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;

    public Job withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * The id of the associated workflow run.
     */
    @JsonProperty("run_id")
    public Long runId;

    public Job withRunId(Long runId) {
        this.runId = runId;
        return this;
    }
    
    @JsonProperty("run_url")
    public String runUrl;

    public Job withRunUrl(String runUrl) {
        this.runUrl = runUrl;
        return this;
    }
    
    /**
     * The time that the job started, in ISO 8601 format.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("started_at")
    public OffsetDateTime startedAt;

    public Job withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    @JsonProperty("status")
    public JobStatusEnum status;

    public Job withStatus(JobStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Steps in this job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("steps")
    public JobSteps[] steps;

    public Job withSteps(JobSteps[] steps) {
        this.steps = steps;
        return this;
    }
    
    @JsonProperty("url")
    public String url;

    public Job withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public Job(@JsonProperty("check_run_url") String checkRunUrl, @JsonProperty("completed_at") OffsetDateTime completedAt, @JsonProperty("conclusion") JobConclusionEnum conclusion, @JsonProperty("head_sha") String headSha, @JsonProperty("html_url") String htmlUrl, @JsonProperty("id") Long id, @JsonProperty("name") String name, @JsonProperty("node_id") String nodeId, @JsonProperty("run_id") Long runId, @JsonProperty("run_url") String runUrl, @JsonProperty("started_at") OffsetDateTime startedAt, @JsonProperty("status") JobStatusEnum status, @JsonProperty("url") String url) {
        this.checkRunUrl = checkRunUrl;
        this.completedAt = completedAt;
        this.conclusion = conclusion;
        this.headSha = headSha;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.name = name;
        this.nodeId = nodeId;
        this.runId = runId;
        this.runUrl = runUrl;
        this.startedAt = startedAt;
        this.status = status;
        this.url = url;
  }
}
