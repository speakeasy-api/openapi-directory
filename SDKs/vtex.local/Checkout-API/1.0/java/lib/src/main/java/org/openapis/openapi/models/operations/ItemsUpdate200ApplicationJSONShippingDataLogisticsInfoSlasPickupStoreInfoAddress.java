/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress - Address information.
 */
public class ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress {
    /**
     * Type of address. For example, `Residential` or `Pickup`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressType")
    public String addressType;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withAddressType(String addressType) {
        this.addressType = addressType;
        return this;
    }
    
    /**
     * City of the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Complement to the shipping address, in case it applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complement")
    public String complement;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withComplement(String complement) {
        this.complement = complement;
        return this;
    }
    
    /**
     * Three letter ISO code of the country of the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Array with two strings with geocoordinates, first latitude, then longitude.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geoCoordinates")
    public String[] geoCoordinates;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withGeoCoordinates(String[] geoCoordinates) {
        this.geoCoordinates = geoCoordinates;
        return this;
    }
    
    /**
     * Neighborhood of the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("neighborhood")
    public String neighborhood;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withNeighborhood(String neighborhood) {
        this.neighborhood = neighborhood;
        return this;
    }
    
    /**
     * Number of the building, house or apartment in the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Postal code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    public String postalCode;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * Complement that might help locate the shipping address more precisely in case of delivery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * State of the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Street of the shipping address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street")
    public String street;

    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress withStreet(String street) {
        this.street = street;
        return this;
    }
    
    public ItemsUpdate200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress(){}
}
