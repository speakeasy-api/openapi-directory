// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum - Consistency level mandated for this VM or empty string for none.
type VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum string

const (
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumUnknown              VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "UNKNOWN"
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumInconsistent         VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "INCONSISTENT"
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumCrashConsistent      VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "CRASH_CONSISTENT"
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumFileSystemConsistent VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "FILE_SYSTEM_CONSISTENT"
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumVssConsistent        VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "VSS_CONSISTENT"
	VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnumAppConsistent        VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum = "APP_CONSISTENT"
)

func (e VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum) ToPointer() *VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum {
	return &e
}

func (e *VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "INCONSISTENT":
		fallthrough
	case "CRASH_CONSISTENT":
		fallthrough
	case "FILE_SYSTEM_CONSISTENT":
		fallthrough
	case "VSS_CONSISTENT":
		fallthrough
	case "APP_CONSISTENT":
		*e = VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum: %v", v)
	}
}

// VirtualMachineUpdateWithSecret - Properties to update.
type VirtualMachineUpdateWithSecret struct {
	CloudInstantiationSpec *CloudInstantiationSpec `json:"cloudInstantiationSpec,omitempty"`
	// Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
	ConfiguredSLADomainID *string              `json:"configuredSlaDomainId,omitempty"`
	GuestCredential       *BaseGuestCredential `json:"guestCredential,omitempty"`
	// User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
	IsArrayIntegrationEnabled *bool `json:"isArrayIntegrationEnabled,omitempty"`
	// Whether to pause or resume backups/archival for this VM.
	IsVMPaused                *bool                       `json:"isVmPaused,omitempty"`
	MaxNestedVsphereSnapshots *int                        `json:"maxNestedVsphereSnapshots,omitempty"`
	PostBackupScript          *VirtualMachineScriptDetail `json:"postBackupScript,omitempty"`
	PostSnapScript            *VirtualMachineScriptDetail `json:"postSnapScript,omitempty"`
	PreBackupScript           *VirtualMachineScriptDetail `json:"preBackupScript,omitempty"`
	// A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.
	ShouldRefreshCacheAfterUpdate *bool `json:"shouldRefreshCacheAfterUpdate,omitempty"`
	// Consistency level mandated for this VM or empty string for none.
	SnapshotConsistencyMandate *VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum `json:"snapshotConsistencyMandate,omitempty"`
	ThrottlingSettings         *VmwareAdaptiveThrottlingSettings                             `json:"throttlingSettings,omitempty"`
}
