/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PolicyRequest } from "./policyrequest";
import { Expose, Type } from "class-transformer";

/**
 * Enables automatic message moderation
 */
export enum CreateChannelTypeRequestAutoModerationEnum {
  Disabled = "disabled",
  Simple = "simple",
  Ai = "AI",
}

/**
 * Sets behavior of automatic moderation
 */
export enum CreateChannelTypeRequestAutoModerationBehaviorEnum {
  Flag = "flag",
  Block = "block",
}

/**
 * Sets behavior of blocklist
 */
export enum CreateChannelTypeRequestBlocklistBehaviorEnum {
  Flag = "flag",
  Block = "block",
}

export class CreateChannelTypeRequest extends SpeakeasyBase {
  /**
   * Enables automatic message moderation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automod" })
  automod: CreateChannelTypeRequestAutoModerationEnum;

  /**
   * Sets behavior of automatic moderation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automod_behavior" })
  automodBehavior?: CreateChannelTypeRequestAutoModerationBehaviorEnum;

  /**
   * Name of the blocklist to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocklist" })
  blocklist?: string;

  /**
   * Sets behavior of blocklist
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocklist_behavior" })
  blocklistBehavior?: CreateChannelTypeRequestBlocklistBehaviorEnum;

  /**
   * List of commands that channel supports
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commands" })
  commands?: string[];

  /**
   * Connect events support
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connect_events" })
  connectEvents?: boolean;

  /**
   * Enables custom events
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_events" })
  customEvents?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "grants" })
  grants?: Record<string, string[]>;

  /**
   * Number of maximum message characters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_message_length" })
  maxMessageLength?: number;

  /**
   * Number of days to keep messages. 'infinite' disables retention
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_retention" })
  messageRetention?: string;

  /**
   * Enables mutes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mutes" })
  mutes?: boolean;

  /**
   * Channel type name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * List of permissions for the channel type
   */
  @SpeakeasyMetadata({ elemType: PolicyRequest })
  @Expose({ name: "permissions" })
  @Type(() => PolicyRequest)
  permissions?: PolicyRequest[];

  /**
   * Enables push notifications
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_notifications" })
  pushNotifications?: boolean;

  /**
   * Enables message reactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  reactions?: boolean;

  /**
   * Read events support
   */
  @SpeakeasyMetadata()
  @Expose({ name: "read_events" })
  readEvents?: boolean;

  /**
   * Enables message replies (threads)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replies" })
  replies?: boolean;

  /**
   * Enables message search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "search" })
  search?: boolean;

  /**
   * Typing events support
   */
  @SpeakeasyMetadata()
  @Expose({ name: "typing_events" })
  typingEvents?: boolean;

  /**
   * Enables file uploads
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploads" })
  uploads?: boolean;

  /**
   * Enables URL enrichment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url_enrichment" })
  urlEnrichment?: boolean;
}
