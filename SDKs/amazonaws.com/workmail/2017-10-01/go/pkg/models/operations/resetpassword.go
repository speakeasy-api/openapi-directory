// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ResetPasswordXAmzTargetEnum
type ResetPasswordXAmzTargetEnum string

const (
	ResetPasswordXAmzTargetEnumWorkMailServiceResetPassword ResetPasswordXAmzTargetEnum = "WorkMailService.ResetPassword"
)

func (e ResetPasswordXAmzTargetEnum) ToPointer() *ResetPasswordXAmzTargetEnum {
	return &e
}

func (e *ResetPasswordXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.ResetPassword":
		*e = ResetPasswordXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResetPasswordXAmzTargetEnum: %v", v)
	}
}

type ResetPasswordRequest struct {
	ResetPasswordRequest shared.ResetPasswordRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           ResetPasswordXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ResetPasswordResponse struct {
	ContentType string
	// DirectoryServiceAuthenticationFailedException
	DirectoryServiceAuthenticationFailedException interface{}
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// EntityStateException
	EntityStateException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidPasswordException
	InvalidPasswordException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	// Success
	ResetPasswordResponse map[string]interface{}
	StatusCode            int
	RawResponse           *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
