<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BackendServices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a key for validating requests with signed URLs for this backend service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyResponse
     */
	public function computeBackendServicesAddSignedUrlKey(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "signedUrlKey", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAddSignedUrlKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of all BackendService resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListResponse
     */
	public function computeBackendServicesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/backendServices', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendServiceAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendServiceAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified BackendService resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteResponse
     */
	public function computeBackendServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a key for validating requests with signed URLs for this backend service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyResponse
     */
	public function computeBackendServicesDeleteSignedUrlKey(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesDeleteSignedUrlKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified BackendService resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetResponse
     */
	public function computeBackendServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the most recent health check results for this BackendService. Example request body: { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthResponse
     */
	public function computeBackendServicesGetHealth(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}/getHealth', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourceGroupReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetHealthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendServiceGroupHealth = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendServiceGroupHealth', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyResponse
     */
	public function computeBackendServicesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertResponse
     */
	public function computeBackendServicesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of BackendService resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListResponse
     */
	public function computeBackendServicesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendServiceList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendServiceList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchResponse
     */
	public function computeBackendServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the edge security policy for the specified backend service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyResponse
     */
	public function computeBackendServicesSetEdgeSecurityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetEdgeSecurityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyResponse
     */
	public function computeBackendServicesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyResponse
     */
	public function computeBackendServicesSetSecurityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesSetSecurityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateResponse
     */
	public function computeBackendServicesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeBackendServicesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}