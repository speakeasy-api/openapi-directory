/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Policy - A policy resource represents a group of settings that govern the behavior of a managed device and the apps installed on it.
 */
public class Policy {
    /**
     * Account types that can't be managed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountTypesWithManagementDisabled")
    public String[] accountTypesWithManagementDisabled;

    public Policy withAccountTypesWithManagementDisabled(String[] accountTypesWithManagementDisabled) {
        this.accountTypesWithManagementDisabled = accountTypesWithManagementDisabled;
        return this;
    }
    
    /**
     * Whether adding new users and profiles is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addUserDisabled")
    public Boolean addUserDisabled;

    public Policy withAddUserDisabled(Boolean addUserDisabled) {
        this.addUserDisabled = addUserDisabled;
        return this;
    }
    
    /**
     * Whether adjusting the master volume is disabled. Also mutes the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustVolumeDisabled")
    public Boolean adjustVolumeDisabled;

    public Policy withAdjustVolumeDisabled(Boolean adjustVolumeDisabled) {
        this.adjustVolumeDisabled = adjustVolumeDisabled;
        return this;
    }
    
    /**
     * Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advancedSecurityOverrides")
    public AdvancedSecurityOverrides advancedSecurityOverrides;

    public Policy withAdvancedSecurityOverrides(AdvancedSecurityOverrides advancedSecurityOverrides) {
        this.advancedSecurityOverrides = advancedSecurityOverrides;
        return this;
    }
    
    /**
     * Configuration for an always-on VPN connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alwaysOnVpnPackage")
    public AlwaysOnVpnPackage alwaysOnVpnPackage;

    public Policy withAlwaysOnVpnPackage(AlwaysOnVpnPackage alwaysOnVpnPackage) {
        this.alwaysOnVpnPackage = alwaysOnVpnPackage;
        return this;
    }
    
    /**
     * The app tracks for Android Device Policy the device can access. The device receives the latest version among all accessible tracks. If no tracks are specified, then the device only uses the production track.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("androidDevicePolicyTracks")
    public PolicyAndroidDevicePolicyTracksEnum[] androidDevicePolicyTracks;

    public Policy withAndroidDevicePolicyTracks(PolicyAndroidDevicePolicyTracksEnum[] androidDevicePolicyTracks) {
        this.androidDevicePolicyTracks = androidDevicePolicyTracks;
        return this;
    }
    
    /**
     * Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency.When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect.The app auto update policy, which controls when automatic app updates can be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appAutoUpdatePolicy")
    public PolicyAppAutoUpdatePolicyEnum appAutoUpdatePolicy;

    public Policy withAppAutoUpdatePolicy(PolicyAppAutoUpdatePolicyEnum appAutoUpdatePolicy) {
        this.appAutoUpdatePolicy = appAutoUpdatePolicy;
        return this;
    }
    
    /**
     * Policy applied to apps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    public ApplicationPolicy[] applications;

    public Policy withApplications(ApplicationPolicy[] applications) {
        this.applications = applications;
        return this;
    }
    
    /**
     * Whether auto date, time, and time zone are enabled on a company-owned device. If this is set, then autoTimeRequired is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoDateAndTimeZone")
    public PolicyAutoDateAndTimeZoneEnum autoDateAndTimeZone;

    public Policy withAutoDateAndTimeZone(PolicyAutoDateAndTimeZoneEnum autoDateAndTimeZone) {
        this.autoDateAndTimeZone = autoDateAndTimeZone;
        return this;
    }
    
    /**
     * Whether auto time is required, which prevents the user from manually setting the date and time. If autoDateAndTimeZone is set, this field is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoTimeRequired")
    public Boolean autoTimeRequired;

    public Policy withAutoTimeRequired(Boolean autoTimeRequired) {
        this.autoTimeRequired = autoTimeRequired;
        return this;
    }
    
    /**
     * Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no longer appear in the policy are automatically uninstalled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockApplicationsEnabled")
    public Boolean blockApplicationsEnabled;

    public Policy withBlockApplicationsEnabled(Boolean blockApplicationsEnabled) {
        this.blockApplicationsEnabled = blockApplicationsEnabled;
        return this;
    }
    
    /**
     * Whether configuring bluetooth is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bluetoothConfigDisabled")
    public Boolean bluetoothConfigDisabled;

    public Policy withBluetoothConfigDisabled(Boolean bluetoothConfigDisabled) {
        this.bluetoothConfigDisabled = bluetoothConfigDisabled;
        return this;
    }
    
    /**
     * Whether bluetooth contact sharing is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bluetoothContactSharingDisabled")
    public Boolean bluetoothContactSharingDisabled;

    public Policy withBluetoothContactSharingDisabled(Boolean bluetoothContactSharingDisabled) {
        this.bluetoothContactSharingDisabled = bluetoothContactSharingDisabled;
        return this;
    }
    
    /**
     * Whether bluetooth is disabled. Prefer this setting over bluetooth_config_disabled because bluetooth_config_disabled can be bypassed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bluetoothDisabled")
    public Boolean bluetoothDisabled;

    public Policy withBluetoothDisabled(Boolean bluetoothDisabled) {
        this.bluetoothDisabled = bluetoothDisabled;
        return this;
    }
    
    /**
     * Controls the use of the camera and whether the user has access to the camera access toggle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cameraAccess")
    public PolicyCameraAccessEnum cameraAccess;

    public Policy withCameraAccess(PolicyCameraAccessEnum cameraAccess) {
        this.cameraAccess = cameraAccess;
        return this;
    }
    
    /**
     * If camera_access is set to any value other than CAMERA_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether cameras are disabled: If true, all cameras are disabled, otherwise they are available. For fully managed devices this field applies for all apps on the device. For work profiles, this field applies only to apps in the work profile, and the camera access of apps outside the work profile is unaffected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cameraDisabled")
    public Boolean cameraDisabled;

    public Policy withCameraDisabled(Boolean cameraDisabled) {
        this.cameraDisabled = cameraDisabled;
        return this;
    }
    
    /**
     * Whether configuring cell broadcast is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cellBroadcastsConfigDisabled")
    public Boolean cellBroadcastsConfigDisabled;

    public Policy withCellBroadcastsConfigDisabled(Boolean cellBroadcastsConfigDisabled) {
        this.cellBroadcastsConfigDisabled = cellBroadcastsConfigDisabled;
        return this;
    }
    
    /**
     * Rules for determining apps' access to private keys. See ChoosePrivateKeyRule for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("choosePrivateKeyRules")
    public ChoosePrivateKeyRule[] choosePrivateKeyRules;

    public Policy withChoosePrivateKeyRules(ChoosePrivateKeyRule[] choosePrivateKeyRules) {
        this.choosePrivateKeyRules = choosePrivateKeyRules;
        return this;
    }
    
    /**
     * Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules. Use policy enforcement rules instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complianceRules")
    public ComplianceRule[] complianceRules;

    public Policy withComplianceRules(ComplianceRule[] complianceRules) {
        this.complianceRules = complianceRules;
        return this;
    }
    
    /**
     * Whether creating windows besides app windows is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createWindowsDisabled")
    public Boolean createWindowsDisabled;

    public Policy withCreateWindowsDisabled(Boolean createWindowsDisabled) {
        this.createWindowsDisabled = createWindowsDisabled;
        return this;
    }
    
    /**
     * Whether configuring user credentials is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialsConfigDisabled")
    public Boolean credentialsConfigDisabled;

    public Policy withCredentialsConfigDisabled(Boolean credentialsConfigDisabled) {
        this.credentialsConfigDisabled = credentialsConfigDisabled;
        return this;
    }
    
    /**
     * Cross-profile policies applied on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossProfilePolicies")
    public CrossProfilePolicies crossProfilePolicies;

    public Policy withCrossProfilePolicies(CrossProfilePolicies crossProfilePolicies) {
        this.crossProfilePolicies = crossProfilePolicies;
        return this;
    }
    
    /**
     * Whether roaming data services are disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataRoamingDisabled")
    public Boolean dataRoamingDisabled;

    public Policy withDataRoamingDisabled(Boolean dataRoamingDisabled) {
        this.dataRoamingDisabled = dataRoamingDisabled;
        return this;
    }
    
    /**
     * Whether the user is allowed to enable debugging features.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debuggingFeaturesAllowed")
    public Boolean debuggingFeaturesAllowed;

    public Policy withDebuggingFeaturesAllowed(Boolean debuggingFeaturesAllowed) {
        this.debuggingFeaturesAllowed = debuggingFeaturesAllowed;
        return this;
    }
    
    /**
     * The default permission policy for runtime permission requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPermissionPolicy")
    public PolicyDefaultPermissionPolicyEnum defaultPermissionPolicy;

    public Policy withDefaultPermissionPolicy(PolicyDefaultPermissionPolicyEnum defaultPermissionPolicy) {
        this.defaultPermissionPolicy = defaultPermissionPolicy;
        return this;
    }
    
    /**
     * Provides a user-facing message with locale info. The maximum message length is 4096 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceOwnerLockScreenInfo")
    public UserFacingMessage deviceOwnerLockScreenInfo;

    public Policy withDeviceOwnerLockScreenInfo(UserFacingMessage deviceOwnerLockScreenInfo) {
        this.deviceOwnerLockScreenInfo = deviceOwnerLockScreenInfo;
        return this;
    }
    
    /**
     * Whether encryption is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionPolicy")
    public PolicyEncryptionPolicyEnum encryptionPolicy;

    public Policy withEncryptionPolicy(PolicyEncryptionPolicyEnum encryptionPolicy) {
        this.encryptionPolicy = encryptionPolicy;
        return this;
    }
    
    /**
     * Whether app verification is force-enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ensureVerifyAppsEnabled")
    public Boolean ensureVerifyAppsEnabled;

    public Policy withEnsureVerifyAppsEnabled(Boolean ensureVerifyAppsEnabled) {
        this.ensureVerifyAppsEnabled = ensureVerifyAppsEnabled;
        return this;
    }
    
    /**
     * Whether factory resetting from settings is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("factoryResetDisabled")
    public Boolean factoryResetDisabled;

    public Policy withFactoryResetDisabled(Boolean factoryResetDisabled) {
        this.factoryResetDisabled = factoryResetDisabled;
        return this;
    }
    
    /**
     * Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email and password to unlock the device. If no admins are specified, the device won't provide factory reset protection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frpAdminEmails")
    public String[] frpAdminEmails;

    public Policy withFrpAdminEmails(String[] frpAdminEmails) {
        this.frpAdminEmails = frpAdminEmails;
        return this;
    }
    
    /**
     * Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("funDisabled")
    public Boolean funDisabled;

    public Policy withFunDisabled(Boolean funDisabled) {
        this.funDisabled = funDisabled;
        return this;
    }
    
    /**
     * Whether user installation of apps is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installAppsDisabled")
    public Boolean installAppsDisabled;

    public Policy withInstallAppsDisabled(Boolean installAppsDisabled) {
        this.installAppsDisabled = installAppsDisabled;
        return this;
    }
    
    /**
     * This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installUnknownSourcesAllowed")
    public Boolean installUnknownSourcesAllowed;

    public Policy withInstallUnknownSourcesAllowed(Boolean installUnknownSourcesAllowed) {
        this.installUnknownSourcesAllowed = installUnknownSourcesAllowed;
        return this;
    }
    
    /**
     * If true, this disables the Lock Screen (https://source.android.com/docs/core/display/multi_display/lock-screen) for primary and/or secondary displays.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyguardDisabled")
    public Boolean keyguardDisabled;

    public Policy withKeyguardDisabled(Boolean keyguardDisabled) {
        this.keyguardDisabled = keyguardDisabled;
        return this;
    }
    
    /**
     * Disabled keyguard customizations, such as widgets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyguardDisabledFeatures")
    public PolicyKeyguardDisabledFeaturesEnum[] keyguardDisabledFeatures;

    public Policy withKeyguardDisabledFeatures(PolicyKeyguardDisabledFeaturesEnum[] keyguardDisabledFeatures) {
        this.keyguardDisabledFeatures = keyguardDisabledFeatures;
        return this;
    }
    
    /**
     * Whether the kiosk custom launcher is enabled. This replaces the home screen with a launcher that locks down the device to the apps installed via the applications setting. Apps appear on a single page in alphabetical order. Use kioskCustomization to further configure the kiosk device behavior.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kioskCustomLauncherEnabled")
    public Boolean kioskCustomLauncherEnabled;

    public Policy withKioskCustomLauncherEnabled(Boolean kioskCustomLauncherEnabled) {
        this.kioskCustomLauncherEnabled = kioskCustomLauncherEnabled;
        return this;
    }
    
    /**
     * Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kioskCustomization")
    public KioskCustomization kioskCustomization;

    public Policy withKioskCustomization(KioskCustomization kioskCustomization) {
        this.kioskCustomization = kioskCustomization;
        return this;
    }
    
    /**
     * The degree of location detection enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationMode")
    public PolicyLocationModeEnum locationMode;

    public Policy withLocationMode(PolicyLocationModeEnum locationMode) {
        this.locationMode = locationMode;
        return this;
    }
    
    /**
     * Provides a user-facing message with locale info. The maximum message length is 4096 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longSupportMessage")
    public UserFacingMessage longSupportMessage;

    public Policy withLongSupportMessage(UserFacingMessage longSupportMessage) {
        this.longSupportMessage = longSupportMessage;
        return this;
    }
    
    /**
     * Maximum time in milliseconds for user activity until the device locks. A value of 0 means there is no restriction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumTimeToLock")
    public String maximumTimeToLock;

    public Policy withMaximumTimeToLock(String maximumTimeToLock) {
        this.maximumTimeToLock = maximumTimeToLock;
        return this;
    }
    
    /**
     * Controls the use of the microphone and whether the user has access to the microphone access toggle. This applies only on fully managed devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microphoneAccess")
    public PolicyMicrophoneAccessEnum microphoneAccess;

    public Policy withMicrophoneAccess(PolicyMicrophoneAccessEnum microphoneAccess) {
        this.microphoneAccess = microphoneAccess;
        return this;
    }
    
    /**
     * The minimum allowed Android API level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumApiLevel")
    public Integer minimumApiLevel;

    public Policy withMinimumApiLevel(Integer minimumApiLevel) {
        this.minimumApiLevel = minimumApiLevel;
        return this;
    }
    
    /**
     * Whether configuring mobile networks is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileNetworksConfigDisabled")
    public Boolean mobileNetworksConfigDisabled;

    public Policy withMobileNetworksConfigDisabled(Boolean mobileNetworksConfigDisabled) {
        this.mobileNetworksConfigDisabled = mobileNetworksConfigDisabled;
        return this;
    }
    
    /**
     * Whether adding or removing accounts is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifyAccountsDisabled")
    public Boolean modifyAccountsDisabled;

    public Policy withModifyAccountsDisabled(Boolean modifyAccountsDisabled) {
        this.modifyAccountsDisabled = modifyAccountsDisabled;
        return this;
    }
    
    /**
     * Whether the user mounting physical external media is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountPhysicalMediaDisabled")
    public Boolean mountPhysicalMediaDisabled;

    public Policy withMountPhysicalMediaDisabled(Boolean mountPhysicalMediaDisabled) {
        this.mountPhysicalMediaDisabled = mountPhysicalMediaDisabled;
        return this;
    }
    
    /**
     * The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Policy withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.Note: Setting wifiConfigDisabled to true will override this setting under specific circumstances. Please see wifiConfigDisabled for further details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkEscapeHatchEnabled")
    public Boolean networkEscapeHatchEnabled;

    public Policy withNetworkEscapeHatchEnabled(Boolean networkEscapeHatchEnabled) {
        this.networkEscapeHatchEnabled = networkEscapeHatchEnabled;
        return this;
    }
    
    /**
     * Whether resetting network settings is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkResetDisabled")
    public Boolean networkResetDisabled;

    public Policy withNetworkResetDisabled(Boolean networkResetDisabled) {
        this.networkResetDisabled = networkResetDisabled;
        return this;
    }
    
    /**
     * This feature is not generally available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oncCertificateProviders")
    public OncCertificateProvider[] oncCertificateProviders;

    public Policy withOncCertificateProviders(OncCertificateProvider[] oncCertificateProviders) {
        this.oncCertificateProviders = oncCertificateProviders;
        return this;
    }
    
    /**
     * Network configuration for the device. See configure networks for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openNetworkConfiguration")
    public java.util.Map<String, Object> openNetworkConfiguration;

    public Policy withOpenNetworkConfiguration(java.util.Map<String, Object> openNetworkConfiguration) {
        this.openNetworkConfiguration = openNetworkConfiguration;
        return this;
    }
    
    /**
     * Whether using NFC to beam data from apps is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outgoingBeamDisabled")
    public Boolean outgoingBeamDisabled;

    public Policy withOutgoingBeamDisabled(Boolean outgoingBeamDisabled) {
        this.outgoingBeamDisabled = outgoingBeamDisabled;
        return this;
    }
    
    /**
     * Whether outgoing calls are disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outgoingCallsDisabled")
    public Boolean outgoingCallsDisabled;

    public Policy withOutgoingCallsDisabled(Boolean outgoingCallsDisabled) {
        this.outgoingCallsDisabled = outgoingCallsDisabled;
        return this;
    }
    
    /**
     * Password requirement policies. Different policies can be set for work profile or fully managed devices by setting the password_scope field in the policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordPolicies")
    public PasswordRequirements[] passwordPolicies;

    public Policy withPasswordPolicies(PasswordRequirements[] passwordPolicies) {
        this.passwordPolicies = passwordPolicies;
        return this;
    }
    
    /**
     * Requirements for the password used to unlock a device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordRequirements")
    public PasswordRequirements passwordRequirements;

    public Policy withPasswordRequirements(PasswordRequirements passwordRequirements) {
        this.passwordRequirements = passwordRequirements;
        return this;
    }
    
    /**
     * Explicit permission or group grants or denials for all apps. These values override the default_permission_policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionGrants")
    public PermissionGrant[] permissionGrants;

    public Policy withPermissionGrants(PermissionGrant[] permissionGrants) {
        this.permissionGrants = permissionGrants;
        return this;
    }
    
    /**
     * A list of package names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permittedAccessibilityServices")
    public PackageNameList permittedAccessibilityServices;

    public Policy withPermittedAccessibilityServices(PackageNameList permittedAccessibilityServices) {
        this.permittedAccessibilityServices = permittedAccessibilityServices;
        return this;
    }
    
    /**
     * A list of package names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permittedInputMethods")
    public PackageNameList permittedInputMethods;

    public Policy withPermittedInputMethods(PackageNameList permittedInputMethods) {
        this.permittedInputMethods = permittedInputMethods;
        return this;
    }
    
    /**
     * Default intent handler activities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("persistentPreferredActivities")
    public PersistentPreferredActivity[] persistentPreferredActivities;

    public Policy withPersistentPreferredActivities(PersistentPreferredActivity[] persistentPreferredActivities) {
        this.persistentPreferredActivities = persistentPreferredActivities;
        return this;
    }
    
    /**
     * Policies controlling personal usage on a company-owned device with a work profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personalUsagePolicies")
    public PersonalUsagePolicies personalUsagePolicies;

    public Policy withPersonalUsagePolicies(PersonalUsagePolicies personalUsagePolicies) {
        this.personalUsagePolicies = personalUsagePolicies;
        return this;
    }
    
    /**
     * This mode controls which apps are available to the user in the Play Store and the behavior on the device when apps are removed from the policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playStoreMode")
    public PolicyPlayStoreModeEnum playStoreMode;

    public Policy withPlayStoreMode(PolicyPlayStoreModeEnum playStoreMode) {
        this.playStoreMode = playStoreMode;
        return this;
    }
    
    /**
     * Rules that define the behavior when a particular policy can not be applied on device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyEnforcementRules")
    public PolicyEnforcementRule[] policyEnforcementRules;

    public Policy withPolicyEnforcementRules(PolicyEnforcementRule[] policyEnforcementRules) {
        this.policyEnforcementRules = policyEnforcementRules;
        return this;
    }
    
    /**
     * Controls whether preferential network service is enabled on the work profile. For example, an organization may have an agreement with a carrier that all of the work data from its employees' devices will be sent via a network service dedicated for enterprise use. An example of a supported preferential network service is the enterprise slice on 5G networks. This has no effect on fully managed devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferentialNetworkService")
    public PolicyPreferentialNetworkServiceEnum preferentialNetworkService;

    public Policy withPreferentialNetworkService(PolicyPreferentialNetworkServiceEnum preferentialNetworkService) {
        this.preferentialNetworkService = preferentialNetworkService;
        return this;
    }
    
    /**
     * Allows showing UI on a device for a user to choose a private key alias if there are no matching rules in ChoosePrivateKeyRules. For devices below Android P, setting this may leave enterprise keys vulnerable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateKeySelectionEnabled")
    public Boolean privateKeySelectionEnabled;

    public Policy withPrivateKeySelectionEnabled(Boolean privateKeySelectionEnabled) {
        this.privateKeySelectionEnabled = privateKeySelectionEnabled;
        return this;
    }
    
    /**
     * Configuration info for an HTTP proxy. For a direct proxy, set the host, port, and excluded_hosts fields. For a PAC script proxy, set the pac_uri field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendedGlobalProxy")
    public ProxyInfo recommendedGlobalProxy;

    public Policy withRecommendedGlobalProxy(ProxyInfo recommendedGlobalProxy) {
        this.recommendedGlobalProxy = recommendedGlobalProxy;
        return this;
    }
    
    /**
     * Whether removing other users is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removeUserDisabled")
    public Boolean removeUserDisabled;

    public Policy withRemoveUserDisabled(Boolean removeUserDisabled) {
        this.removeUserDisabled = removeUserDisabled;
        return this;
    }
    
    /**
     * Whether rebooting the device into safe boot is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safeBootDisabled")
    public Boolean safeBootDisabled;

    public Policy withSafeBootDisabled(Boolean safeBootDisabled) {
        this.safeBootDisabled = safeBootDisabled;
        return this;
    }
    
    /**
     * Whether screen capture is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenCaptureDisabled")
    public Boolean screenCaptureDisabled;

    public Policy withScreenCaptureDisabled(Boolean screenCaptureDisabled) {
        this.screenCaptureDisabled = screenCaptureDisabled;
        return this;
    }
    
    /**
     * Whether changing the user icon is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setUserIconDisabled")
    public Boolean setUserIconDisabled;

    public Policy withSetUserIconDisabled(Boolean setUserIconDisabled) {
        this.setUserIconDisabled = setUserIconDisabled;
        return this;
    }
    
    /**
     * Whether changing the wallpaper is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setWallpaperDisabled")
    public Boolean setWallpaperDisabled;

    public Policy withSetWallpaperDisabled(Boolean setWallpaperDisabled) {
        this.setWallpaperDisabled = setWallpaperDisabled;
        return this;
    }
    
    /**
     * Action to take during the setup process. At most one action may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setupActions")
    public SetupAction[] setupActions;

    public Policy withSetupActions(SetupAction[] setupActions) {
        this.setupActions = setupActions;
        return this;
    }
    
    /**
     * Whether location sharing is disabled. share_location_disabled is supported for both fully managed devices and personally owned work profiles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shareLocationDisabled")
    public Boolean shareLocationDisabled;

    public Policy withShareLocationDisabled(Boolean shareLocationDisabled) {
        this.shareLocationDisabled = shareLocationDisabled;
        return this;
    }
    
    /**
     * Provides a user-facing message with locale info. The maximum message length is 4096 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortSupportMessage")
    public UserFacingMessage shortSupportMessage;

    public Policy withShortSupportMessage(UserFacingMessage shortSupportMessage) {
        this.shortSupportMessage = shortSupportMessage;
        return this;
    }
    
    /**
     * Flag to skip hints on the first use. Enterprise admin can enable the system recommendation for apps to skip their user tutorial and other introductory hints on first start-up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipFirstUseHintsEnabled")
    public Boolean skipFirstUseHintsEnabled;

    public Policy withSkipFirstUseHintsEnabled(Boolean skipFirstUseHintsEnabled) {
        this.skipFirstUseHintsEnabled = skipFirstUseHintsEnabled;
        return this;
    }
    
    /**
     * Whether sending and receiving SMS messages is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsDisabled")
    public Boolean smsDisabled;

    public Policy withSmsDisabled(Boolean smsDisabled) {
        this.smsDisabled = smsDisabled;
        return this;
    }
    
    /**
     * Whether the status bar is disabled. This disables notifications, quick settings, and other screen overlays that allow escape from full-screen mode. DEPRECATED. To disable the status bar on a kiosk device, use InstallType KIOSK or kioskCustomLauncherEnabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusBarDisabled")
    public Boolean statusBarDisabled;

    public Policy withStatusBarDisabled(Boolean statusBarDisabled) {
        this.statusBarDisabled = statusBarDisabled;
        return this;
    }
    
    /**
     * Settings controlling the behavior of status reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusReportingSettings")
    public StatusReportingSettings statusReportingSettings;

    public Policy withStatusReportingSettings(StatusReportingSettings statusReportingSettings) {
        this.statusReportingSettings = statusReportingSettings;
        return this;
    }
    
    /**
     * The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it stays on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stayOnPluggedModes")
    public PolicyStayOnPluggedModesEnum[] stayOnPluggedModes;

    public Policy withStayOnPluggedModes(PolicyStayOnPluggedModesEnum[] stayOnPluggedModes) {
        this.stayOnPluggedModes = stayOnPluggedModes;
        return this;
    }
    
    /**
     * Configuration for managing system updates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemUpdate")
    public SystemUpdate systemUpdate;

    public Policy withSystemUpdate(SystemUpdate systemUpdate) {
        this.systemUpdate = systemUpdate;
        return this;
    }
    
    /**
     * Whether configuring tethering and portable hotspots is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tetheringConfigDisabled")
    public Boolean tetheringConfigDisabled;

    public Policy withTetheringConfigDisabled(Boolean tetheringConfigDisabled) {
        this.tetheringConfigDisabled = tetheringConfigDisabled;
        return this;
    }
    
    /**
     * Whether user uninstallation of applications is disabled. This prevents apps from being uninstalled, even those removed using applications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uninstallAppsDisabled")
    public Boolean uninstallAppsDisabled;

    public Policy withUninstallAppsDisabled(Boolean uninstallAppsDisabled) {
        this.uninstallAppsDisabled = uninstallAppsDisabled;
        return this;
    }
    
    /**
     * If microphone_access is set to any value other than MICROPHONE_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether microphones are disabled: If true, all microphones are disabled, otherwise they are available. This is available only on fully managed devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmuteMicrophoneDisabled")
    public Boolean unmuteMicrophoneDisabled;

    public Policy withUnmuteMicrophoneDisabled(Boolean unmuteMicrophoneDisabled) {
        this.unmuteMicrophoneDisabled = unmuteMicrophoneDisabled;
        return this;
    }
    
    /**
     * Controls types of device activity logs collected from the device and reported via Pub/Sub notification (https://developers.google.com/android/management/notifications).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageLog")
    public UsageLog usageLog;

    public Policy withUsageLog(UsageLog usageLog) {
        this.usageLog = usageLog;
        return this;
    }
    
    /**
     * Whether transferring files over USB is disabled. This is supported only on company-owned devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usbFileTransferDisabled")
    public Boolean usbFileTransferDisabled;

    public Policy withUsbFileTransferDisabled(Boolean usbFileTransferDisabled) {
        this.usbFileTransferDisabled = usbFileTransferDisabled;
        return this;
    }
    
    /**
     * Whether USB storage is enabled. Deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usbMassStorageEnabled")
    public Boolean usbMassStorageEnabled;

    public Policy withUsbMassStorageEnabled(Boolean usbMassStorageEnabled) {
        this.usbMassStorageEnabled = usbMassStorageEnabled;
        return this;
    }
    
    /**
     * The version of the policy. This is a read-only field. The version is incremented each time the policy is updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;

    public Policy withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Whether configuring VPN is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpnConfigDisabled")
    public Boolean vpnConfigDisabled;

    public Policy withVpnConfigDisabled(Boolean vpnConfigDisabled) {
        this.vpnConfigDisabled = vpnConfigDisabled;
        return this;
    }
    
    /**
     * Whether configuring Wi-Fi access points is disabled. Note: If a network connection can't be made at boot time and configuring Wi-Fi is disabled then network escape hatch will be shown in order to refresh the device policy (see networkEscapeHatchEnabled).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wifiConfigDisabled")
    public Boolean wifiConfigDisabled;

    public Policy withWifiConfigDisabled(Boolean wifiConfigDisabled) {
        this.wifiConfigDisabled = wifiConfigDisabled;
        return this;
    }
    
    /**
     * DEPRECATED - Use wifi_config_disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wifiConfigsLockdownEnabled")
    public Boolean wifiConfigsLockdownEnabled;

    public Policy withWifiConfigsLockdownEnabled(Boolean wifiConfigsLockdownEnabled) {
        this.wifiConfigsLockdownEnabled = wifiConfigsLockdownEnabled;
        return this;
    }
    
    public Policy(){}
}
