<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SubscriptionFilter - Represents a subscription filter.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SubscriptionFilter
{
	#[\JMS\Serializer\Annotation\SerializedName('creationTime')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $creationTime = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('destinationArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $destinationArn = null;
    
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DistributionEnum $distribution
     */
	#[\JMS\Serializer\Annotation\SerializedName('distribution')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DistributionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DistributionEnum $distribution = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('filterName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $filterName = null;
    
    /**
     * A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
     * 
     * @var ?string $filterPattern
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterPattern')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $filterPattern = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('logGroupName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $logGroupName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('roleArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $roleArn = null;
    
	public function __construct()
	{
		$this->creationTime = null;
		$this->destinationArn = null;
		$this->distribution = null;
		$this->filterName = null;
		$this->filterPattern = null;
		$this->logGroupName = null;
		$this->roleArn = null;
	}
}
