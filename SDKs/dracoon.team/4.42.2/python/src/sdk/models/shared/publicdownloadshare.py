"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import filekey as shared_filekey
from ..shared import privatekeycontainer as shared_privatekeycontainer
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicDownloadShare:
    r"""Download Share information"""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Creation date"""  
    creator_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorName') }})
    r"""Creator name"""  
    file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName') }})
    r"""File name"""  
    has_download_limit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDownloadLimit') }})
    r"""&#128640; Since v4.11.0
    
    Determines whether Download Share has a limit for amount of downloads
    """  
    is_protected: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isProtected') }})
    r"""Is share protected by password"""  
    limit_reached: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitReached') }})
    r"""Downloads limit reached"""  
    media_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaType') }})
    r"""&#128640; Since v4.11.0
    
    * `application/zip` (for folders and rooms)
    
    * actual file media type (for files only)
    """  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""File size or container size not compressed (in bytes)"""  
    creator_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorUsername'), 'exclude': lambda f: f is None }})
    r"""Creator username"""  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    file_key: Optional[shared_filekey.FileKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileKey'), 'exclude': lambda f: f is None }})
    r"""File key information"""  
    is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Share display name (alias name)"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes"""  
    private_key_container: Optional[shared_privatekeycontainer.PrivateKeyContainer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateKeyContainer'), 'exclude': lambda f: f is None }})
    r"""Private key container"""  
    