/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CatalogInfoResponseLimits {
    /**
     * The maximum number of object IDs that may be included in a single
     * `/v2/catalog/batch-delete` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_delete_max_object_ids")
    public Long batchDeleteMaxObjectIds;
    public CatalogInfoResponseLimits withBatchDeleteMaxObjectIds(Long batchDeleteMaxObjectIds) {
        this.batchDeleteMaxObjectIds = batchDeleteMaxObjectIds;
        return this;
    }
    
    /**
     * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_retrieve_max_object_ids")
    public Long batchRetrieveMaxObjectIds;
    public CatalogInfoResponseLimits withBatchRetrieveMaxObjectIds(Long batchRetrieveMaxObjectIds) {
        this.batchRetrieveMaxObjectIds = batchRetrieveMaxObjectIds;
        return this;
    }
    
    /**
     * The maximum number of objects that may appear within a single batch in a
     * `/v2/catalog/batch-upsert` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_upsert_max_objects_per_batch")
    public Long batchUpsertMaxObjectsPerBatch;
    public CatalogInfoResponseLimits withBatchUpsertMaxObjectsPerBatch(Long batchUpsertMaxObjectsPerBatch) {
        this.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch;
        return this;
    }
    
    /**
     * The maximum number of objects that may appear across all batches in a
     * `/v2/catalog/batch-upsert` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_upsert_max_total_objects")
    public Long batchUpsertMaxTotalObjects;
    public CatalogInfoResponseLimits withBatchUpsertMaxTotalObjects(Long batchUpsertMaxTotalObjects) {
        this.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects;
        return this;
    }
    
    /**
     * The maximum number of results that may be returned in a page of a
     * `/v2/catalog/search` response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_max_page_limit")
    public Long searchMaxPageLimit;
    public CatalogInfoResponseLimits withSearchMaxPageLimit(Long searchMaxPageLimit) {
        this.searchMaxPageLimit = searchMaxPageLimit;
        return this;
    }
    
    /**
     * The maximum number of item IDs that may be included in a single
     * `/v2/catalog/update-item-modifier-lists` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_modifier_lists_max_item_ids")
    public Long updateItemModifierListsMaxItemIds;
    public CatalogInfoResponseLimits withUpdateItemModifierListsMaxItemIds(Long updateItemModifierListsMaxItemIds) {
        this.updateItemModifierListsMaxItemIds = updateItemModifierListsMaxItemIds;
        return this;
    }
    
    /**
     * The maximum number of modifier list IDs to be disabled that may be included in
     * a single `/v2/catalog/update-item-modifier-lists` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_modifier_lists_max_modifier_lists_to_disable")
    public Long updateItemModifierListsMaxModifierListsToDisable;
    public CatalogInfoResponseLimits withUpdateItemModifierListsMaxModifierListsToDisable(Long updateItemModifierListsMaxModifierListsToDisable) {
        this.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable;
        return this;
    }
    
    /**
     * The maximum number of modifier list IDs to be enabled that may be included in
     * a single `/v2/catalog/update-item-modifier-lists` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_modifier_lists_max_modifier_lists_to_enable")
    public Long updateItemModifierListsMaxModifierListsToEnable;
    public CatalogInfoResponseLimits withUpdateItemModifierListsMaxModifierListsToEnable(Long updateItemModifierListsMaxModifierListsToEnable) {
        this.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable;
        return this;
    }
    
    /**
     * The maximum number of item IDs that may be included in a single
     * `/v2/catalog/update-item-taxes` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_taxes_max_item_ids")
    public Long updateItemTaxesMaxItemIds;
    public CatalogInfoResponseLimits withUpdateItemTaxesMaxItemIds(Long updateItemTaxesMaxItemIds) {
        this.updateItemTaxesMaxItemIds = updateItemTaxesMaxItemIds;
        return this;
    }
    
    /**
     * The maximum number of tax IDs to be disabled that may be included in a single
     * `/v2/catalog/update-item-taxes` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_taxes_max_taxes_to_disable")
    public Long updateItemTaxesMaxTaxesToDisable;
    public CatalogInfoResponseLimits withUpdateItemTaxesMaxTaxesToDisable(Long updateItemTaxesMaxTaxesToDisable) {
        this.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable;
        return this;
    }
    
    /**
     * The maximum number of tax IDs to be enabled that may be included in a single
     * `/v2/catalog/update-item-taxes` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_item_taxes_max_taxes_to_enable")
    public Long updateItemTaxesMaxTaxesToEnable;
    public CatalogInfoResponseLimits withUpdateItemTaxesMaxTaxesToEnable(Long updateItemTaxesMaxTaxesToEnable) {
        this.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable;
        return this;
    }
    
}
