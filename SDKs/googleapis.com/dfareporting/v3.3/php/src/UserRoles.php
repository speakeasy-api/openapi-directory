<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UserRoles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an existing user role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteResponse
     */
	public function dfareportingUserRolesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets one user role by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetResponse
     */
	public function dfareportingUserRolesGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new user role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertResponse
     */
	public function dfareportingUserRolesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userRole", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of user roles, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListResponse
     */
	public function dfareportingUserRolesList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRolesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRolesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing user role. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchResponse
     */
	public function dfareportingUserRolesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userRole", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing user role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateResponse
     */
	public function dfareportingUserRolesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/userRoles', \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userRole", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingUserRolesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRole', 'json');
            }
        }

        return $response;
    }
}