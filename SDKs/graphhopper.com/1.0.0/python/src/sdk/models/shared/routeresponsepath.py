"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RouteResponsePathInstructions:
    
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""The distance for this instruction, in meters."""  
    exit_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exit_number'), 'exclude': lambda f: f is None }})
    r"""Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout."""  
    interval: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""Two indices into `points`, referring to the beginning and the end of the segment of the route
    this instruction refers to.
    """  
    sign: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sign'), 'exclude': lambda f: f is None }})
    r"""A number which specifies the sign to show:
    
    | sign | description  |
    |---|---|
    |-98| an U-turn without the knowledge if it is a right or left U-turn |
    | -8| a left U-turn |
    | -7| keep left |
    | -6| **not yet used**: leave roundabout |
    | -3| turn sharp left |
    | -2| turn left |
    | -1| turn slight left |
    |  0| continue on street |
    |  1| turn slight right |
    |  2| turn right |
    |  3| turn sharp right |
    |  4| the finish instruction before the last point |
    |  5| the instruction before a via point |
    |  6| the instruction before entering a roundabout |
    |  7| keep right |
    |  8| a right U-turn |
    |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
    """  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_name'), 'exclude': lambda f: f is None }})
    r"""The name of the street to turn onto in order to follow the route."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""A description what the user has to do in order to follow the route. The language depends on the locale parameter."""  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The duration for this instruction, in milliseconds."""  
    turn_angle: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('turn_angle'), 'exclude': lambda f: f is None }})
    r"""Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
    `-2*PI < r < 0` for counterclockwise turns.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RouteResponsePath:
    
    ascend: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ascend'), 'exclude': lambda f: f is None }})
    r"""The total ascent, in meters."""  
    bbox: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bbox'), 'exclude': lambda f: f is None }})
    r"""The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`."""  
    descend: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descend'), 'exclude': lambda f: f is None }})
    r"""The total descent, in meters."""  
    details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Details, as requested with the `details` parameter. Consider the value `{\\"street_name\\": [[0,2,\\"Frankfurter Straße\\"],[2,6,\\"Zollweg\\"]]}`.
    In this example, the route uses two streets: The first, Frankfurter Straße, is
    used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
    See [here](https://discuss.graphhopper.com/t/2539) for discussion.
    """  
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/)."""  
    instructions: Optional[list[RouteResponsePathInstructions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions'), 'exclude': lambda f: f is None }})
    r"""The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
    so be mindful when using them for navigation.
    """  
    points: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points'), 'exclude': lambda f: f is None }})  
    points_encoded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points_encoded'), 'exclude': lambda f: f is None }})
    r"""Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
    of coordinates. See the field description for more information on the two formats.
    """  
    points_order: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points_order'), 'exclude': lambda f: f is None }})
    r"""An array of indices (zero-based), specifiying the order in which the input points are visited.
    Only present if the `optimize` parameter was used.
    """  
    snapped_waypoints: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapped_waypoints'), 'exclude': lambda f: f is None }})  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/)."""  
    