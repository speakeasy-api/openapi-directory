// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RuleDetailsPathParams struct {
	// Id of the target rule
	RuleID string `pathParam:"style=simple,explode=false,name=ruleId"`
}

type RuleDetailsRequest struct {
	PathParams RuleDetailsPathParams
}

// RuleDetails200ApplicationJSONActionEnum - The id of the action
type RuleDetails200ApplicationJSONActionEnum string

const (
	RuleDetails200ApplicationJSONActionEnumRuleDetails RuleDetails200ApplicationJSONActionEnum = "ruleDetails"
)

func (e *RuleDetails200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ruleDetails":
		*e = RuleDetails200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleDetails200ApplicationJSONActionEnum: %s", s)
	}
}

type RuleDetails200ApplicationJSONData struct {
	Rules []shared.Rule `json:"rules"`
}

// RuleDetails200ApplicationJSONResultEnum - Result of the request
type RuleDetails200ApplicationJSONResultEnum string

const (
	RuleDetails200ApplicationJSONResultEnumSuccess RuleDetails200ApplicationJSONResultEnum = "success"
	RuleDetails200ApplicationJSONResultEnumError   RuleDetails200ApplicationJSONResultEnum = "error"
)

func (e *RuleDetails200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = RuleDetails200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleDetails200ApplicationJSONResultEnum: %s", s)
	}
}

// RuleDetails200ApplicationJSON - Rules information
type RuleDetails200ApplicationJSON struct {
	// The id of the action
	Action RuleDetails200ApplicationJSONActionEnum `json:"action"`
	Data   RuleDetails200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result RuleDetails200ApplicationJSONResultEnum `json:"result"`
}

type RuleDetailsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Rules information
	RuleDetails200ApplicationJSONObject *RuleDetails200ApplicationJSON
}
