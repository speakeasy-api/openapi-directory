// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// InsightsV1Conference - OK
type InsightsV1Conference struct {
	// The unique SID identifier of the Account.
	AccountSid *string `json:"account_sid,omitempty"`
	// The unique SID identifier of the Conference.
	ConferenceSid *string `json:"conference_sid,omitempty"`
	// Duration of the between conference start event and conference end event in seconds.
	ConnectDurationSeconds *int64 `json:"connect_duration_seconds,omitempty"`
	// Conference creation date and time in ISO 8601 format.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// Potential issues detected by Twilio during the conference.
	DetectedIssues interface{} `json:"detected_issues,omitempty"`
	// Conference duration in seconds.
	DurationSeconds *int64                                 `json:"duration_seconds,omitempty"`
	EndReason       *ConferenceEnumConferenceEndReasonEnum `json:"end_reason,omitempty"`
	// Conference end date and time in ISO 8601 format.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Call SID of the participant whose actions ended the conference.
	EndedBy *string `json:"ended_by,omitempty"`
	// Custom label for the conference resource, up to 64 characters.
	FriendlyName *string `json:"friendly_name,omitempty"`
	// Contains a dictionary of URL links to nested resources of this Conference.
	Links map[string]interface{} `json:"links,omitempty"`
	// Actual maximum number of concurrent participants in the conference.
	MaxConcurrentParticipants *int64 `json:"max_concurrent_participants,omitempty"`
	// Maximum number of concurrent participants as specified by the configuration.
	MaxParticipants      *int64                             `json:"max_participants,omitempty"`
	MixerRegion          *ConferenceEnumRegionEnum          `json:"mixer_region,omitempty"`
	MixerRegionRequested *ConferenceEnumRegionEnum          `json:"mixer_region_requested,omitempty"`
	ProcessingState      *ConferenceEnumProcessingStateEnum `json:"processing_state,omitempty"`
	// Boolean. Indicates whether recording was enabled at the conference mixer.
	RecordingEnabled *bool `json:"recording_enabled,omitempty"`
	// Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.
	StartTime *time.Time                          `json:"start_time,omitempty"`
	Status    *ConferenceEnumConferenceStatusEnum `json:"status,omitempty"`
	// Object. Contains details about conference tags including severity.
	TagInfo interface{} `json:"tag_info,omitempty"`
	// Tags for detected conference conditions and participant behaviors which may be of interest.
	Tags []ConferenceEnumTagEnum `json:"tags,omitempty"`
	// Unique conference participants based on caller ID.
	UniqueParticipants *int64 `json:"unique_participants,omitempty"`
	// The URL of this resource.
	URL *string `json:"url,omitempty"`
}
