// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FindingFindingTypeEnum - The type of the Finding.
type FindingFindingTypeEnum string

const (
	FindingFindingTypeEnumFindingTypeUnspecified          FindingFindingTypeEnum = "FINDING_TYPE_UNSPECIFIED"
	FindingFindingTypeEnumMixedContent                    FindingFindingTypeEnum = "MIXED_CONTENT"
	FindingFindingTypeEnumOutdatedLibrary                 FindingFindingTypeEnum = "OUTDATED_LIBRARY"
	FindingFindingTypeEnumRosettaFlash                    FindingFindingTypeEnum = "ROSETTA_FLASH"
	FindingFindingTypeEnumXSSCallback                     FindingFindingTypeEnum = "XSS_CALLBACK"
	FindingFindingTypeEnumXSSError                        FindingFindingTypeEnum = "XSS_ERROR"
	FindingFindingTypeEnumClearTextPassword               FindingFindingTypeEnum = "CLEAR_TEXT_PASSWORD"
	FindingFindingTypeEnumInvalidContentType              FindingFindingTypeEnum = "INVALID_CONTENT_TYPE"
	FindingFindingTypeEnumXSSAngularCallback              FindingFindingTypeEnum = "XSS_ANGULAR_CALLBACK"
	FindingFindingTypeEnumInvalidHeader                   FindingFindingTypeEnum = "INVALID_HEADER"
	FindingFindingTypeEnumMisspelledSecurityHeaderName    FindingFindingTypeEnum = "MISSPELLED_SECURITY_HEADER_NAME"
	FindingFindingTypeEnumMismatchingSecurityHeaderValues FindingFindingTypeEnum = "MISMATCHING_SECURITY_HEADER_VALUES"
)

func (e *FindingFindingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FINDING_TYPE_UNSPECIFIED":
		fallthrough
	case "MIXED_CONTENT":
		fallthrough
	case "OUTDATED_LIBRARY":
		fallthrough
	case "ROSETTA_FLASH":
		fallthrough
	case "XSS_CALLBACK":
		fallthrough
	case "XSS_ERROR":
		fallthrough
	case "CLEAR_TEXT_PASSWORD":
		fallthrough
	case "INVALID_CONTENT_TYPE":
		fallthrough
	case "XSS_ANGULAR_CALLBACK":
		fallthrough
	case "INVALID_HEADER":
		fallthrough
	case "MISSPELLED_SECURITY_HEADER_NAME":
		fallthrough
	case "MISMATCHING_SECURITY_HEADER_VALUES":
		*e = FindingFindingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindingFindingTypeEnum: %s", s)
	}
}

// Finding - A Finding resource represents a vulnerability instance identified during a ScanRun.
type Finding struct {
	// The body of the request that triggered the vulnerability.
	Body *string `json:"body,omitempty"`
	// The description of the vulnerability.
	Description *string `json:"description,omitempty"`
	// The URL where the browser lands when the vulnerability is detected.
	FinalURL *string `json:"finalUrl,omitempty"`
	// The type of the Finding.
	FindingType *FindingFindingTypeEnum `json:"findingType,omitempty"`
	// If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
	FrameURL *string `json:"frameUrl,omitempty"`
	// The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
	FuzzedURL *string `json:"fuzzedUrl,omitempty"`
	// The http method of the request that triggered the vulnerability, in uppercase.
	HTTPMethod *string `json:"httpMethod,omitempty"`
	// The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
	Name *string `json:"name,omitempty"`
	// Information reported for an outdated library.
	OutdatedLibrary *OutdatedLibrary `json:"outdatedLibrary,omitempty"`
	// The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
	ReproductionURL *string `json:"reproductionUrl,omitempty"`
	// The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
	TrackingID *string `json:"trackingId,omitempty"`
	// Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
	ViolatingResource *ViolatingResource `json:"violatingResource,omitempty"`
	// Information about vulnerable or missing HTTP Headers.
	VulnerableHeaders *VulnerableHeaders `json:"vulnerableHeaders,omitempty"`
	// Information about vulnerable request parameters.
	VulnerableParameters *VulnerableParameters `json:"vulnerableParameters,omitempty"`
	// Information reported for an XSS.
	XSS *XSS `json:"xss,omitempty"`
}
