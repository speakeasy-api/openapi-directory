<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateNetworkSwitchStackRoutingInterfaceRequestBody
{
    /**
     * The next hop for any traffic that isn't going to a directly connected subnet or over a static route. This IP address must exist in a subnet with a routed interface.
     * 
     * @var ?string $defaultGateway
     */
	#[\JMS\Serializer\Annotation\SerializedName('defaultGateway')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $defaultGateway = null;
    
    /**
     * The IP address this switch stack will use for layer 3 routing on this VLAN or subnet. This cannot be the same as the switch's management IP.
     * 
     * @var ?string $interfaceIp
     */
	#[\JMS\Serializer\Annotation\SerializedName('interfaceIp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $interfaceIp = null;
    
    /**
     * The IPv6 settings of the interface.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6 $ipv6
     */
	#[\JMS\Serializer\Annotation\SerializedName('ipv6')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6 $ipv6 = null;
    
    /**
     * Enable multicast support if, multicast routing between VLANs is required. Options are, 'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyMulticastRoutingEnum $multicastRouting
     */
	#[\JMS\Serializer\Annotation\SerializedName('multicastRouting')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyMulticastRoutingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateNetworkSwitchStackRoutingInterfaceRequestBodyMulticastRoutingEnum $multicastRouting = null;
    
    /**
     * A friendly name or description for the interface or VLAN.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The OSPF routing settings of the interface.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings $ospfSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('ospfSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings $ospfSettings = null;
    
    /**
     * The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).
     * 
     * @var ?string $subnet
     */
	#[\JMS\Serializer\Annotation\SerializedName('subnet')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subnet = null;
    
    /**
     * The VLAN this routed interface is on. VLAN must be between 1 and 4094.
     * 
     * @var int $vlanId
     */
	#[\JMS\Serializer\Annotation\SerializedName('vlanId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $vlanId;
    
	public function __construct()
	{
		$this->defaultGateway = null;
		$this->interfaceIp = null;
		$this->ipv6 = null;
		$this->multicastRouting = null;
		$this->name = "";
		$this->ospfSettings = null;
		$this->subnet = null;
		$this->vlanId = 0;
	}
}
