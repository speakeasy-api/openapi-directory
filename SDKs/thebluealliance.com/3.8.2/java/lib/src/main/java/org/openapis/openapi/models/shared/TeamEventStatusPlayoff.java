/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TeamEventStatusPlayoff - Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
 */
public class TeamEventStatusPlayoff {
    /**
     * A Win-Loss-Tie record for a team, or an alliance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_level_record")
    public WLTRecord currentLevelRecord;
    public TeamEventStatusPlayoff withCurrentLevelRecord(WLTRecord currentLevelRecord) {
        this.currentLevelRecord = currentLevelRecord;
        return this;
    }
    
    /**
     * The highest playoff level the team reached.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    public TeamEventStatusPlayoffLevelEnum level;
    public TeamEventStatusPlayoff withLevel(TeamEventStatusPlayoffLevelEnum level) {
        this.level = level;
        return this;
    }
    
    /**
     * The average match score during playoffs. Year specific. May be null if not relevant for a given year.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playoff_average")
    public Long playoffAverage;
    public TeamEventStatusPlayoff withPlayoffAverage(Long playoffAverage) {
        this.playoffAverage = playoffAverage;
        return this;
    }
    
    /**
     * A Win-Loss-Tie record for a team, or an alliance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record")
    public WLTRecord record;
    public TeamEventStatusPlayoff withRecord(WLTRecord record) {
        this.record = record;
        return this;
    }
    
    /**
     * Current competition status for the playoffs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public TeamEventStatusPlayoffStatusEnum status;
    public TeamEventStatusPlayoff withStatus(TeamEventStatusPlayoffStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
