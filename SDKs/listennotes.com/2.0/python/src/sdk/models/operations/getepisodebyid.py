"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import episodefull as shared_episodefull
from typing import Optional


@dataclasses.dataclass
class GetEpisodeByIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""id for a specific episode. You can get episode id from using other endpoints, e.g., `GET /search`..."""  
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    show_transcript: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_transcript', 'style': 'form', 'explode': False }})
    r"""To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don't include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan."""  
    

@dataclasses.dataclass
class GetEpisodeByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    episode_full: Optional[shared_episodefull.EpisodeFull] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    