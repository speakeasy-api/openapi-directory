/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Node - Node information (Node can be a room, folder or file)
 */
public class Node {
    /**
     * &amp;#128640; Since v4.15.0
     * 
     * Auth parent room ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authParentId")
    public Long authParentId;
    public Node withAuthParentId(Long authParentId) {
        this.authParentId = authParentId;
        return this;
    }
    
    /**
     * Version of last change in this node or a node further down the tree.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branchVersion")
    public Long branchVersion;
    public Node withBranchVersion(Long branchVersion) {
        this.branchVersion = branchVersion;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * Child nodes list (if requested)
     * 
     * (for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    public Node[] children;
    public Node withChildren(Node[] children) {
        this.children = children;
        return this;
    }
    
    /**
     * Classification ID:
     * 
     * * `1` - public
     * 
     * * `2` - internal
     * 
     * * `3` - confidential
     * 
     * * `4` - strictly confidential
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    public NodeClassificationEnum classification;
    public Node withClassification(NodeClassificationEnum classification) {
        this.classification = classification;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.11.0
     * 
     * Number of direct children
     * 
     * (no recursion; for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntChildren")
    public Integer cntChildren;
    public Node withCntChildren(Integer cntChildren) {
        this.cntChildren = cntChildren;
        return this;
    }
    
    /**
     * Returns the number of comments of this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntComments")
    public Integer cntComments;
    public Node withCntComments(Integer cntComments) {
        this.cntComments = cntComments;
        return this;
    }
    
    /**
     * Number of deleted versions of this file / folder
     * 
     * (for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntDeletedVersions")
    public Integer cntDeletedVersions;
    public Node withCntDeletedVersions(Integer cntDeletedVersions) {
        this.cntDeletedVersions = cntDeletedVersions;
        return this;
    }
    
    /**
     * Returns the number of Download Shares of this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntDownloadShares")
    public Integer cntDownloadShares;
    public Node withCntDownloadShares(Integer cntDownloadShares) {
        this.cntDownloadShares = cntDownloadShares;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Amount of direct child files where this node is the parent node
     * 
     * (no recursion; for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntFiles")
    public Integer cntFiles;
    public Node withCntFiles(Integer cntFiles) {
        this.cntFiles = cntFiles;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Amount of direct child folders where this node is the parent node
     * 
     * (no recursion; for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntFolders")
    public Integer cntFolders;
    public Node withCntFolders(Integer cntFolders) {
        this.cntFolders = cntFolders;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Amount of direct child rooms where this node is the parent node
     * 
     * (no recursion; for rooms only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntRooms")
    public Integer cntRooms;
    public Node withCntRooms(Integer cntRooms) {
        this.cntRooms = cntRooms;
        return this;
    }
    
    /**
     * Returns the number of Upload Shares of this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntUploadShares")
    public Integer cntUploadShares;
    public Node withCntUploadShares(Integer cntUploadShares) {
        this.cntUploadShares = cntUploadShares;
        return this;
    }
    
    /**
     * Creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public Node withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public UserInfo createdBy;
    public Node withCreatedBy(UserInfo createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * Encryption states
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionInfo")
    public EncryptionInfo encryptionInfo;
    public Node withEncryptionInfo(EncryptionInfo encryptionInfo) {
        this.encryptionInfo = encryptionInfo;
        return this;
    }
    
    /**
     * Expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expireAt")
    public OffsetDateTime expireAt;
    public Node withExpireAt(OffsetDateTime expireAt) {
        this.expireAt = expireAt;
        return this;
    }
    
    /**
     * File type / extension (for files only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileType")
    public String fileType;
    public Node withFileType(String fileType) {
        this.fileType = fileType;
        return this;
    }
    
    /**
     * Is activities log active (for rooms only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasActivitiesLog")
    public Boolean hasActivitiesLog;
    public Node withHasActivitiesLog(Boolean hasActivitiesLog) {
        this.hasActivitiesLog = hasActivitiesLog;
        return this;
    }
    
    /**
     * MD5 hash of file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hash")
    public String hash;
    public Node withHash(String hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * Node ID
     */
    @JsonProperty("id")
    public Long id;
    public Node withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Inherit permissions from parent room
     * 
     * (default: `false` if `parentId` is `0`; otherwise: `true`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inheritPermissions")
    public Boolean inheritPermissions;
    public Node withInheritPermissions(Boolean inheritPermissions) {
        this.inheritPermissions = inheritPermissions;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Determines whether node is browsable by client (for rooms only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isBrowsable")
    public Boolean isBrowsable;
    public Node withIsBrowsable(Boolean isBrowsable) {
        this.isBrowsable = isBrowsable;
        return this;
    }
    
    /**
     * Encryption state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEncrypted")
    public Boolean isEncrypted;
    public Node withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }
    
    /**
     * Node is marked as favorite (for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFavorite")
    public Boolean isFavorite;
    public Node withIsFavorite(Boolean isFavorite) {
        this.isFavorite = isFavorite;
        return this;
    }
    
    /**
     * Media server media token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaToken")
    public String mediaToken;
    public Node withMediaToken(String mediaToken) {
        this.mediaToken = mediaToken;
        return this;
    }
    
    /**
     * File media type (for files only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaType")
    public String mediaType;
    public Node withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }
    
    /**
     * Name
     */
    @JsonProperty("name")
    public String name;
    public Node withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * User notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public Node withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Parent node ID (room or folder)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    public Long parentId;
    public Node withParentId(Long parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Parent node path
     * 
     * `/` if node is a root node (room)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentPath")
    public String parentPath;
    public Node withParentPath(String parentPath) {
        this.parentPath = parentPath;
        return this;
    }
    
    /**
     * Node permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public NodePermissions permissions;
    public Node withPermissions(NodePermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * Quota in byte
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quota")
    public Long quota;
    public Node withQuota(Long quota) {
        this.quota = quota;
        return this;
    }
    
    /**
     * Retention period for deleted nodes in days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recycleBinRetentionPeriod")
    public Integer recycleBinRetentionPeriod;
    public Node withRecycleBinRetentionPeriod(Integer recycleBinRetentionPeriod) {
        this.recycleBinRetentionPeriod = recycleBinRetentionPeriod;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.37.0
     * 
     * Reference ID. Identical across all versions of a file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public Long referenceId;
    public Node withReferenceId(Long referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * Node size in byte
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;
    public Node withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.22.0
     * 
     * Time the node was created on external file system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestampCreation")
    public OffsetDateTime timestampCreation;
    public Node withTimestampCreation(OffsetDateTime timestampCreation) {
        this.timestampCreation = timestampCreation;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.22.0
     * 
     * Time the content of a node was last modified on external file system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestampModification")
    public OffsetDateTime timestampModification;
    public Node withTimestampModification(OffsetDateTime timestampModification) {
        this.timestampModification = timestampModification;
        return this;
    }
    
    /**
     * Node type
     */
    @JsonProperty("type")
    public NodeTypeEnum type;
    public Node withType(NodeTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Modification date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public Node withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    public UserInfo updatedBy;
    public Node withUpdatedBy(UserInfo updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
}
