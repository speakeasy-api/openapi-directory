/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventChild } from "./eventchild";
import { Expose, Type } from "class-transformer";

/**
 * The visibility of event being tracked in this definition.
 */
export enum EventDefinitionVisibilityEnum {
  EventVisibilityUnspecified = "EVENT_VISIBILITY_UNSPECIFIED",
  Revealed = "REVEALED",
  Hidden = "HIDDEN",
}

/**
 * An event definition resource.
 */
export class EventDefinition extends SpeakeasyBase {
  /**
   * A list of events that are a child of this event.
   */
  @SpeakeasyMetadata({ elemType: EventChild })
  @Expose({ name: "childEvents" })
  @Type(() => EventChild)
  childEvents?: EventChild[];

  /**
   * Description of what this event represents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The name to display for the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The ID of the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The base URL for the image that represents the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageUrl" })
  imageUrl?: string;

  /**
   * Indicates whether the icon image being returned is a default image, or is game-provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDefaultImageUrl" })
  isDefaultImageUrl?: boolean;

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The visibility of event being tracked in this definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: EventDefinitionVisibilityEnum;
}
