<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QuotesClassic 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new language combination for a given quote without creating a task.
     * 
     * Creates a new language combination for a given quote without creating a task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Response
     */
	public function createLanguageCombination1(
        \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/languageCombinations', \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commonLanguageCombinationDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombination1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonLanguageCombinationDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonLanguageCombinationDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a payable.
     * 
     * Adds a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Response
     */
	public function createPayable1(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/payables', \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a receivable.
     * 
     * Adds a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Response
     */
	public function createReceivable1(
        \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/receivables', \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReceivable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new task for a given quote.
     * 
     * Creates a new task for a given quote. Required fields are presented in the example.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTask1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTask1Response
     */
	public function createTask1(
        \OpenAPI\OpenAPI\Models\Operations\CreateTask1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTask1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/tasks', \OpenAPI\OpenAPI\Models\Operations\CreateTask1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTask1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a payable.
     * 
     * Deletes a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Response
     */
	public function deletePayable1(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a receivable.
     * 
     * Deletes a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Response
     */
	public function deleteReceivable1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a quote.
     * 
     * Removes a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete13Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete13Response
     */
	public function delete13(
        \OpenAPI\OpenAPI\Models\Operations\Delete13Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete13Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}', \OpenAPI\OpenAPI\Models\Operations\Delete13Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete13Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns quotes' internal identifiers.
     * 
     * Returns quotes' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds7Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds7Response
     */
	public function getAllIds7(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds7Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds7Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds7Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds7Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds7DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns quote details.
     * 
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById8Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById8Response
     */
	public function getById8(
        \OpenAPI\OpenAPI\Models\Operations\GetById8Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById8Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}', \OpenAPI\OpenAPI\Models\Operations\GetById8Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetById8Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById8Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDTOv1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteDTOv1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given quote.
     * 
     * Returns custom fields of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Response
     */
	public function getCustomFields6(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields6Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns dates of a given quote.
     * 
     * Returns dates of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDates2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDates2Response
     */
	public function getDates2(
        \OpenAPI\OpenAPI\Models\Operations\GetDates2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDates2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/dates', \OpenAPI\OpenAPI\Models\Operations\GetDates2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDates2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns finance of a given quote.
     * 
     * Returns finance of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFinance1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFinance1Response
     */
	public function getFinance1(
        \OpenAPI\OpenAPI\Models\Operations\GetFinance1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFinance1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance', \OpenAPI\OpenAPI\Models\Operations\GetFinance1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFinance1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->financeDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FinanceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns instructions of a given quote.
     * 
     * Returns instructions of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Response
     */
	public function getInstructions1(
        \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/instructions', \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInstructions1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a quote for customer confirmation.
     * 
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Send1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Send1Response
     */
	public function send1(
        \OpenAPI\OpenAPI\Models\Operations\Send1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Send1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/confirmation/send', \OpenAPI\OpenAPI\Models\Operations\Send1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Send1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Starts a quote.
     * 
     * Starts a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartResponse
     */
	public function start(
        \OpenAPI\OpenAPI\Models\Operations\StartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/start', \OpenAPI\OpenAPI\Models\Operations\StartRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given quote.
     * 
     * Updates custom fields of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Response
     */
	public function updateCustomFields4(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates instructions of a given quote.
     * 
     * Updates instructions of a given quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Response
     */
	public function updateInstructions2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/instructions', \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instructionsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a payable.
     * 
     * Updates a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Response
     */
	public function updatePayable1(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a receivable.
     * 
     * Updates a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Response
     */
	public function updateReceivable1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quotes/{quoteId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
}