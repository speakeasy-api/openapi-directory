/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class CompanyIdAnnouncementsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=user_key",
  })
  userKey: string;
}

export class CompanyIdAnnouncementsRequest extends SpeakeasyBase {
  /**
   * If this parameter is set to false, you will only receive ids, and no additional data about announcements and no hits to the metric will be counted. (and potentially minimizing your costs)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=data" })
  data?: boolean;

  /**
   * company hex ID
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * limit of announcements in response (default 10)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * to paginate through results (default 0)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;
}

/**
 * Detailed information about the error
 */
export class CompanyIdAnnouncementsDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: number;

  @SpeakeasyMetadata()
  @Expose({ name: "fault" })
  fault?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag: string;
}

export class CompanyIdAnnouncements200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "countryCode" })
  countryCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "registrationNumber" })
  registrationNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "structured" })
  structured?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class CompanyIdAnnouncementsResponse extends SpeakeasyBase {
  /**
   * List of announcements
   */
  @SpeakeasyMetadata({ elemType: CompanyIdAnnouncements200ApplicationJSON })
  companyIdAnnouncements200ApplicationJSONObjects?: CompanyIdAnnouncements200ApplicationJSON[];

  /**
   * Detailed information about the error
   */
  @SpeakeasyMetadata()
  companyIdAnnouncementsDefaultApplicationJSONObject?: CompanyIdAnnouncementsDefaultApplicationJSON;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
