/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetBalancesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuthOAuth?: string;
}

export class GetBalancesRequest extends SpeakeasyBase {
  /**
   * This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Consent-ID",
  })
  consentID: string;

  /**
   * Is contained if and only if the "Signature" element is contained in the header of the request.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Digest" })
  digest?: string;

  /**
   * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Accept",
  })
  psuAccept?: string;

  /**
   * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Accept-Charset",
  })
  psuAcceptCharset?: string;

  /**
   * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Accept-Encoding",
  })
  psuAcceptEncoding?: string;

  /**
   * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Accept-Language",
  })
  psuAcceptLanguage?: string;

  /**
   * UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
   *
   * @remarks
   * UUID identifies either a device or a device dependant application installation.
   * In case of an installation identification this ID needs to be unaltered until removal from device.
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Device-ID",
  })
  psuDeviceID?: string;

  /**
   * The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Geo-Location",
  })
  psuGeoLocation?: string;

  /**
   * HTTP method used at the PSU ? TPP interface, if available.
   *
   * @remarks
   * Valid values are:
   * * GET
   * * POST
   * * PUT
   * * PATCH
   * * DELETE
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-Http-Method",
  })
  psuHttpMethod?: shared.PSUHttpMethodEnum;

  /**
   * The forwarded IP Address header field consists of the corresponding HTTP request
   *
   * @remarks
   * IP Address field between PSU and TPP.
   * It shall be contained if and only if this request was actively initiated by the PSU.
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-IP-Address",
  })
  psuIPAddress?: string;

  /**
   * The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-IP-Port",
  })
  psuIPPort?: string;

  /**
   * The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=PSU-User-Agent",
  })
  psuUserAgent?: string;

  /**
   * A signature of the request by the TPP on application level. This might be mandated by ASPSP.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Signature",
  })
  signature?: string;

  /**
   * The certificate used for signing the request, in base64 encoding.
   *
   * @remarks
   * Must be contained if a signature is contained.
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=TPP-Signature-Certificate",
  })
  tppSignatureCertificate?: string;

  /**
   * ID of the request, unique to the call, as determined by the initiating party.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Request-ID",
  })
  xRequestID: string;

  /**
   * This identification is denoting the addressed (card) account.
   *
   * @remarks
   * The account-id is retrieved by using a "Read Account List" or "Read Card Account list" call.
   * The account-id is the "resourceId" attribute of the account structure.
   * Its value is constant at least throughout the lifecycle of a given consent.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=account-id",
  })
  accountId: string;
}

export class GetBalancesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  error400AIS?: shared.Error400AIS;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  error400NGAIS?: shared.Error400NGAIS;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error401AIS?: shared.Error401AIS;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error401NGAIS?: shared.Error401NGAIS;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  error403AIS?: shared.Error403AIS;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  error403NGAIS?: shared.Error403NGAIS;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  error404AIS?: shared.Error404AIS;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  error404NGAIS?: shared.Error404NGAIS;

  /**
   * Method Not Allowed
   */
  @SpeakeasyMetadata()
  error405AIS?: shared.Error405AIS;

  /**
   * Method Not Allowed
   */
  @SpeakeasyMetadata()
  error405NGAIS?: shared.Error405NGAIS;

  /**
   * Not Acceptable
   */
  @SpeakeasyMetadata()
  error406AIS?: shared.Error406AIS;

  /**
   * Not Acceptable
   */
  @SpeakeasyMetadata()
  error406NGAIS?: shared.Error406NGAIS;

  /**
   * Conflict
   */
  @SpeakeasyMetadata()
  error409AIS?: shared.Error409AIS;

  /**
   * Conflict
   */
  @SpeakeasyMetadata()
  error409NGAIS?: shared.Error409NGAIS;

  /**
   * Too Many Requests
   */
  @SpeakeasyMetadata()
  error429AIS?: shared.Error429AIS;

  /**
   * Too Many Requests
   */
  @SpeakeasyMetadata()
  error429NGAIS?: shared.Error429NGAIS;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  readAccountBalanceResponse200?: shared.ReadAccountBalanceResponse200;
}
