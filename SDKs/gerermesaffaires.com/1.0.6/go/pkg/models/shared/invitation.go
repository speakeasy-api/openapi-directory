// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type InvitationClientManagementEnum string

const (
	InvitationClientManagementEnumNo      InvitationClientManagementEnum = "no"
	InvitationClientManagementEnumManager InvitationClientManagementEnum = "manager"
	InvitationClientManagementEnumAdn     InvitationClientManagementEnum = "adn"
)

func (e *InvitationClientManagementEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "no":
		fallthrough
	case "manager":
		fallthrough
	case "adn":
		*e = InvitationClientManagementEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationClientManagementEnum: %s", s)
	}
}

type InvitationCodeMethod3TypeEnum string

const (
	InvitationCodeMethod3TypeEnumSms InvitationCodeMethod3TypeEnum = "SMS"
)

func (e *InvitationCodeMethod3TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SMS":
		*e = InvitationCodeMethod3TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationCodeMethod3TypeEnum: %s", s)
	}
}

type InvitationCodeMethod3 struct {
	Type *InvitationCodeMethod3TypeEnum
}

type InvitationCodeMethod2TypeEnum string

const (
	InvitationCodeMethod2TypeEnumPayslip InvitationCodeMethod2TypeEnum = "payslip"
)

func (e *InvitationCodeMethod2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "payslip":
		*e = InvitationCodeMethod2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationCodeMethod2TypeEnum: %s", s)
	}
}

type InvitationCodeMethod2 struct {
	Month *string
	Type  *InvitationCodeMethod2TypeEnum
}

type InvitationCodeMethod1TypeEnum string

const (
	InvitationCodeMethod1TypeEnumManual InvitationCodeMethod1TypeEnum = "manual"
)

func (e *InvitationCodeMethod1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manual":
		*e = InvitationCodeMethod1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationCodeMethod1TypeEnum: %s", s)
	}
}

type InvitationCodeMethod1 struct {
	Code *string
	Type *InvitationCodeMethod1TypeEnum
}

type InvitationCodeMethodType string

const (
	InvitationCodeMethodTypeInvitationCodeMethod1 InvitationCodeMethodType = "Invitation_CodeMethod_1"
	InvitationCodeMethodTypeInvitationCodeMethod2 InvitationCodeMethodType = "Invitation_CodeMethod_2"
	InvitationCodeMethodTypeInvitationCodeMethod3 InvitationCodeMethodType = "Invitation_CodeMethod_3"
)

type InvitationCodeMethod struct {
	InvitationCodeMethod1 *InvitationCodeMethod1
	InvitationCodeMethod2 *InvitationCodeMethod2
	InvitationCodeMethod3 *InvitationCodeMethod3

	Type InvitationCodeMethodType
}

func CreateInvitationCodeMethodInvitationCodeMethod1(invitationCodeMethod1 InvitationCodeMethod1) InvitationCodeMethod {
	typ := InvitationCodeMethodTypeInvitationCodeMethod1

	return InvitationCodeMethod{
		InvitationCodeMethod1: &invitationCodeMethod1,
		Type:                  typ,
	}
}

func CreateInvitationCodeMethodInvitationCodeMethod2(invitationCodeMethod2 InvitationCodeMethod2) InvitationCodeMethod {
	typ := InvitationCodeMethodTypeInvitationCodeMethod2

	return InvitationCodeMethod{
		InvitationCodeMethod2: &invitationCodeMethod2,
		Type:                  typ,
	}
}

func CreateInvitationCodeMethodInvitationCodeMethod3(invitationCodeMethod3 InvitationCodeMethod3) InvitationCodeMethod {
	typ := InvitationCodeMethodTypeInvitationCodeMethod3

	return InvitationCodeMethod{
		InvitationCodeMethod3: &invitationCodeMethod3,
		Type:                  typ,
	}
}

func (u *InvitationCodeMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	invitationCodeMethod1 := new(InvitationCodeMethod1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invitationCodeMethod1); err == nil {
		u.InvitationCodeMethod1 = invitationCodeMethod1
		u.Type = InvitationCodeMethodTypeInvitationCodeMethod1
		return nil
	}

	invitationCodeMethod2 := new(InvitationCodeMethod2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invitationCodeMethod2); err == nil {
		u.InvitationCodeMethod2 = invitationCodeMethod2
		u.Type = InvitationCodeMethodTypeInvitationCodeMethod2
		return nil
	}

	invitationCodeMethod3 := new(InvitationCodeMethod3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invitationCodeMethod3); err == nil {
		u.InvitationCodeMethod3 = invitationCodeMethod3
		u.Type = InvitationCodeMethodTypeInvitationCodeMethod3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InvitationCodeMethod) MarshalJSON() ([]byte, error) {
	if u.InvitationCodeMethod1 != nil {
		return json.Marshal(u.InvitationCodeMethod1)
	}

	if u.InvitationCodeMethod2 != nil {
		return json.Marshal(u.InvitationCodeMethod2)
	}

	if u.InvitationCodeMethod3 != nil {
		return json.Marshal(u.InvitationCodeMethod3)
	}

	return nil, nil
}

type InvitationFoldersRightEnum string

const (
	InvitationFoldersRightEnumRead  InvitationFoldersRightEnum = "read"
	InvitationFoldersRightEnumWrite InvitationFoldersRightEnum = "write"
)

func (e *InvitationFoldersRightEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = InvitationFoldersRightEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationFoldersRightEnum: %s", s)
	}
}

type InvitationFolders struct {
	ID    *string
	Name  *string
	Right *InvitationFoldersRightEnum
}

type InvitationGroups struct {
	EndDate *string
	ID      *string
	Name    *string
}

type InvitationLinkMethodTypeEnum string

const (
	InvitationLinkMethodTypeEnumPostal InvitationLinkMethodTypeEnum = "Postal"
	InvitationLinkMethodTypeEnumEmail  InvitationLinkMethodTypeEnum = "Email"
)

func (e *InvitationLinkMethodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Postal":
		fallthrough
	case "Email":
		*e = InvitationLinkMethodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationLinkMethodTypeEnum: %s", s)
	}
}

type InvitationLinkMethod struct {
	Type *InvitationLinkMethodTypeEnum
}

type InvitationPlayerEnum string

const (
	InvitationPlayerEnumGuest        InvitationPlayerEnum = "guest"
	InvitationPlayerEnumOwner        InvitationPlayerEnum = "owner"
	InvitationPlayerEnumManager      InvitationPlayerEnum = "manager"
	InvitationPlayerEnumAssistant    InvitationPlayerEnum = "assistant"
	InvitationPlayerEnumCollaborator InvitationPlayerEnum = "collaborator"
)

func (e *InvitationPlayerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "guest":
		fallthrough
	case "owner":
		fallthrough
	case "manager":
		fallthrough
	case "assistant":
		fallthrough
	case "collaborator":
		*e = InvitationPlayerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationPlayerEnum: %s", s)
	}
}

type InvitationStatusEnum string

const (
	InvitationStatusEnumSent                        InvitationStatusEnum = "sent"
	InvitationStatusEnumAccepted                    InvitationStatusEnum = "accepted"
	InvitationStatusEnumRefused                     InvitationStatusEnum = "refused"
	InvitationStatusEnumExpired                     InvitationStatusEnum = "expired"
	InvitationStatusEnumFinished                    InvitationStatusEnum = "finished"
	InvitationStatusEnumWaitingForValidation        InvitationStatusEnum = "waiting for validation"
	InvitationStatusEnumWaitingForPasswordAndUserid InvitationStatusEnum = "waiting for password and userid"
	InvitationStatusEnumWaitingForLogin             InvitationStatusEnum = "waiting for login"
	InvitationStatusEnumNotSent                     InvitationStatusEnum = "not sent"
	InvitationStatusEnumWaitingForInvitation        InvitationStatusEnum = "waiting for invitation"
)

func (e *InvitationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sent":
		fallthrough
	case "accepted":
		fallthrough
	case "refused":
		fallthrough
	case "expired":
		fallthrough
	case "finished":
		fallthrough
	case "waiting for validation":
		fallthrough
	case "waiting for password and userid":
		fallthrough
	case "waiting for login":
		fallthrough
	case "not sent":
		fallthrough
	case "waiting for invitation":
		*e = InvitationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationStatusEnum: %s", s)
	}
}

// Invitation - Automatically created
type Invitation struct {
	ClientManagement *InvitationClientManagementEnum
	CodeMethod       *InvitationCodeMethod
	EmployeeAccess   *bool
	Folders          []InvitationFolders
	GroupIds         []string
	Groups           []InvitationGroups
	IsAdmin          *bool
	LinkMethod       *InvitationLinkMethod
	Player           *InvitationPlayerEnum
	PlayerEnd        *string
	Status           *InvitationStatusEnum
}
