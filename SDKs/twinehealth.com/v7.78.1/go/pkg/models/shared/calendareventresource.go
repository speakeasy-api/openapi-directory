// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CalendarEventResourceAttributesAttendeesResponseStatusEnum - Status of responses from attendees
type CalendarEventResourceAttributesAttendeesResponseStatusEnum string

const (
	CalendarEventResourceAttributesAttendeesResponseStatusEnumNeedsAction CalendarEventResourceAttributesAttendeesResponseStatusEnum = "needsAction"
	CalendarEventResourceAttributesAttendeesResponseStatusEnumDeclined    CalendarEventResourceAttributesAttendeesResponseStatusEnum = "declined"
	CalendarEventResourceAttributesAttendeesResponseStatusEnumTentative   CalendarEventResourceAttributesAttendeesResponseStatusEnum = "tentative"
	CalendarEventResourceAttributesAttendeesResponseStatusEnumAccepted    CalendarEventResourceAttributesAttendeesResponseStatusEnum = "accepted"
)

func (e CalendarEventResourceAttributesAttendeesResponseStatusEnum) ToPointer() *CalendarEventResourceAttributesAttendeesResponseStatusEnum {
	return &e
}

func (e *CalendarEventResourceAttributesAttendeesResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "needsAction":
		fallthrough
	case "declined":
		fallthrough
	case "tentative":
		fallthrough
	case "accepted":
		*e = CalendarEventResourceAttributesAttendeesResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventResourceAttributesAttendeesResponseStatusEnum: %v", v)
	}
}

type CalendarEventResourceAttributesAttendees struct {
	// Status of responses from attendees
	ResponseStatus *CalendarEventResourceAttributesAttendeesResponseStatusEnum `json:"response_status,omitempty"`
	User           *string                                                     `json:"user,omitempty"`
}

// CalendarEventResourceAttributesTypeEnum - The type of calendar event. Immutable after event creation.
type CalendarEventResourceAttributesTypeEnum string

const (
	CalendarEventResourceAttributesTypeEnumPlanCheckIn   CalendarEventResourceAttributesTypeEnum = "plan-check-in"
	CalendarEventResourceAttributesTypeEnumReminder      CalendarEventResourceAttributesTypeEnum = "reminder"
	CalendarEventResourceAttributesTypeEnumTelephoneCall CalendarEventResourceAttributesTypeEnum = "telephone-call"
	CalendarEventResourceAttributesTypeEnumOfficeVisit   CalendarEventResourceAttributesTypeEnum = "office-visit"
	CalendarEventResourceAttributesTypeEnumVideoCall     CalendarEventResourceAttributesTypeEnum = "video-call"
)

func (e CalendarEventResourceAttributesTypeEnum) ToPointer() *CalendarEventResourceAttributesTypeEnum {
	return &e
}

func (e *CalendarEventResourceAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plan-check-in":
		fallthrough
	case "reminder":
		fallthrough
	case "telephone-call":
		fallthrough
	case "office-visit":
		fallthrough
	case "video-call":
		*e = CalendarEventResourceAttributesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventResourceAttributesTypeEnum: %v", v)
	}
}

type CalendarEventResourceAttributes struct {
	// True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
	AllDay *bool `json:"all_day,omitempty"`
	// List of attendees for the calendar event
	Attendees []CalendarEventResourceAttributesAttendees `json:"attendees,omitempty"`
	// The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
	CompletedAt *string `json:"completed_at,omitempty"`
	// The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
	CompletedBy map[string]interface{} `json:"completed_by,omitempty"`
	Description *string                `json:"description,omitempty"`
	// The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
	EndAt    *string `json:"end_at,omitempty"`
	Location *string `json:"location,omitempty"`
	// The date and time when the calendar event starts
	StartAt *string `json:"start_at,omitempty"`
	// The time zone in which the dates for the calendar event are specified
	TimeZone *string `json:"time_zone,omitempty"`
	// The title of the calendar event. Must not be empty or null
	Title *string `json:"title,omitempty"`
	// The type of calendar event. Immutable after event creation.
	Type *CalendarEventResourceAttributesTypeEnum `json:"type,omitempty"`
}

type CalendarEventResourceLinks struct {
	Self *string `json:"self,omitempty"`
}

type CalendarEventResourceRelationshipsOwnerData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type CalendarEventResourceRelationshipsOwnerLinks struct {
	Related *string `json:"related,omitempty"`
}

// CalendarEventResourceRelationshipsOwner - The owner is the patient for whom the calendar event is created specificially for
type CalendarEventResourceRelationshipsOwner struct {
	Data  CalendarEventResourceRelationshipsOwnerData   `json:"data"`
	Links *CalendarEventResourceRelationshipsOwnerLinks `json:"links,omitempty"`
}

type CalendarEventResourceRelationships struct {
	// The owner is the patient for whom the calendar event is created specificially for
	Owner *CalendarEventResourceRelationshipsOwner `json:"owner,omitempty"`
}

type CalendarEventResourceTypeEnum string

const (
	CalendarEventResourceTypeEnumCalendarEvent CalendarEventResourceTypeEnum = "calendar_event"
)

func (e CalendarEventResourceTypeEnum) ToPointer() *CalendarEventResourceTypeEnum {
	return &e
}

func (e *CalendarEventResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "calendar_event":
		*e = CalendarEventResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventResourceTypeEnum: %v", v)
	}
}

type CalendarEventResource struct {
	Attributes    *CalendarEventResourceAttributes    `json:"attributes,omitempty"`
	ID            *string                             `json:"id,omitempty"`
	Links         *CalendarEventResourceLinks         `json:"links,omitempty"`
	Relationships *CalendarEventResourceRelationships `json:"relationships,omitempty"`
	Type          *CalendarEventResourceTypeEnum      `json:"type,omitempty"`
}
