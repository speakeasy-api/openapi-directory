// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ValidationResultValidatorEnum - Validator type to validate membership with.
type ValidationResultValidatorEnum string

const (
	ValidationResultValidatorEnumValidatorTypeUnspecified ValidationResultValidatorEnum = "VALIDATOR_TYPE_UNSPECIFIED"
	ValidationResultValidatorEnumMembershipID             ValidationResultValidatorEnum = "MEMBERSHIP_ID"
	ValidationResultValidatorEnumCrossProjectPermission   ValidationResultValidatorEnum = "CROSS_PROJECT_PERMISSION"
)

func (e *ValidationResultValidatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VALIDATOR_TYPE_UNSPECIFIED":
		fallthrough
	case "MEMBERSHIP_ID":
		fallthrough
	case "CROSS_PROJECT_PERMISSION":
		*e = ValidationResultValidatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidationResultValidatorEnum: %s", s)
	}
}

// ValidationResult - ValidationResults are results set by each validator running during ValidateCreateMembership.
type ValidationResult struct {
	// Additional information for the validation.
	Result *string `json:"result,omitempty"`
	// Whether the validation is passed or not.
	Success *bool `json:"success,omitempty"`
	// Validator type to validate membership with.
	Validator *ValidationResultValidatorEnum `json:"validator,omitempty"`
}
