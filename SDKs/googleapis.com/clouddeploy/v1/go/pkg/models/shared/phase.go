// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PhaseStateEnum - Output only. Current state of the Phase.
type PhaseStateEnum string

const (
	PhaseStateEnumStateUnspecified PhaseStateEnum = "STATE_UNSPECIFIED"
	PhaseStateEnumPending          PhaseStateEnum = "PENDING"
	PhaseStateEnumInProgress       PhaseStateEnum = "IN_PROGRESS"
	PhaseStateEnumSucceeded        PhaseStateEnum = "SUCCEEDED"
	PhaseStateEnumFailed           PhaseStateEnum = "FAILED"
	PhaseStateEnumAborted          PhaseStateEnum = "ABORTED"
	PhaseStateEnumSkipped          PhaseStateEnum = "SKIPPED"
)

func (e PhaseStateEnum) ToPointer() *PhaseStateEnum {
	return &e
}

func (e *PhaseStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "ABORTED":
		fallthrough
	case "SKIPPED":
		*e = PhaseStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PhaseStateEnum: %v", v)
	}
}

// Phase - Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
type Phase struct {
	// ChildRollouts job composition
	ChildRolloutJobs *ChildRolloutJobs `json:"childRolloutJobs,omitempty"`
	// Deployment job composition.
	DeploymentJobs *DeploymentJobs `json:"deploymentJobs,omitempty"`
	// Output only. The ID of the Phase.
	ID *string `json:"id,omitempty"`
	// Output only. Additional information on why the Phase was skipped, if available.
	SkipMessage *string `json:"skipMessage,omitempty"`
	// Output only. Current state of the Phase.
	State *PhaseStateEnum `json:"state,omitempty"`
}
