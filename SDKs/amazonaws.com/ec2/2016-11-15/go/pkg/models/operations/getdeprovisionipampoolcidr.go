// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeprovisionIpamPoolCidrActionEnum
type GETDeprovisionIpamPoolCidrActionEnum string

const (
	GETDeprovisionIpamPoolCidrActionEnumDeprovisionIpamPoolCidr GETDeprovisionIpamPoolCidrActionEnum = "DeprovisionIpamPoolCidr"
)

func (e GETDeprovisionIpamPoolCidrActionEnum) ToPointer() *GETDeprovisionIpamPoolCidrActionEnum {
	return &e
}

func (e *GETDeprovisionIpamPoolCidrActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeprovisionIpamPoolCidr":
		*e = GETDeprovisionIpamPoolCidrActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeprovisionIpamPoolCidrActionEnum: %v", v)
	}
}

// GETDeprovisionIpamPoolCidrVersionEnum
type GETDeprovisionIpamPoolCidrVersionEnum string

const (
	GETDeprovisionIpamPoolCidrVersionEnumTwoThousandAndSixteen1115 GETDeprovisionIpamPoolCidrVersionEnum = "2016-11-15"
)

func (e GETDeprovisionIpamPoolCidrVersionEnum) ToPointer() *GETDeprovisionIpamPoolCidrVersionEnum {
	return &e
}

func (e *GETDeprovisionIpamPoolCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDeprovisionIpamPoolCidrVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeprovisionIpamPoolCidrVersionEnum: %v", v)
	}
}

type GETDeprovisionIpamPoolCidrRequest struct {
	Action GETDeprovisionIpamPoolCidrActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The CIDR which you want to deprovision from the pool.
	Cidr *string `queryParam:"style=form,explode=true,name=Cidr"`
	// A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the pool that has the CIDR you want to deprovision.
	IpamPoolID        string                                `queryParam:"style=form,explode=true,name=IpamPoolId"`
	Version           GETDeprovisionIpamPoolCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeprovisionIpamPoolCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
