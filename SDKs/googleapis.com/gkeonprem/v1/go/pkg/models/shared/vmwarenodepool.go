// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VmwareNodePoolInput - Resource VmwareNodePool represents a VMware node pool. ##
type VmwareNodePoolInput struct {
	// Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Parameters that describe the configuration of all nodes within a given node pool.
	Config *VmwareNodeConfig `json:"config,omitempty"`
	// The display name for the node pool.
	DisplayName *string `json:"displayName,omitempty"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag *string `json:"etag,omitempty"`
	// Immutable. The resource name of this node pool.
	Name *string `json:"name,omitempty"`
	// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
	NodePoolAutoscaling *VmwareNodePoolAutoscalingConfig `json:"nodePoolAutoscaling,omitempty"`
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion *string `json:"onPremVersion,omitempty"`
	// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
	Status *ResourceStatus `json:"status,omitempty"`
}

// VmwareNodePoolStateEnum - Output only. The current state of the node pool.
type VmwareNodePoolStateEnum string

const (
	VmwareNodePoolStateEnumStateUnspecified VmwareNodePoolStateEnum = "STATE_UNSPECIFIED"
	VmwareNodePoolStateEnumProvisioning     VmwareNodePoolStateEnum = "PROVISIONING"
	VmwareNodePoolStateEnumRunning          VmwareNodePoolStateEnum = "RUNNING"
	VmwareNodePoolStateEnumReconciling      VmwareNodePoolStateEnum = "RECONCILING"
	VmwareNodePoolStateEnumStopping         VmwareNodePoolStateEnum = "STOPPING"
	VmwareNodePoolStateEnumError            VmwareNodePoolStateEnum = "ERROR"
	VmwareNodePoolStateEnumDegraded         VmwareNodePoolStateEnum = "DEGRADED"
)

func (e VmwareNodePoolStateEnum) ToPointer() *VmwareNodePoolStateEnum {
	return &e
}

func (e *VmwareNodePoolStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "RECONCILING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "ERROR":
		fallthrough
	case "DEGRADED":
		*e = VmwareNodePoolStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VmwareNodePoolStateEnum: %v", v)
	}
}

// VmwareNodePool - Resource VmwareNodePool represents a VMware node pool. ##
type VmwareNodePool struct {
	// Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Parameters that describe the configuration of all nodes within a given node pool.
	Config *VmwareNodeConfig `json:"config,omitempty"`
	// Output only. The time at which this node pool was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty
	DeleteTime *string `json:"deleteTime,omitempty"`
	// The display name for the node pool.
	DisplayName *string `json:"displayName,omitempty"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag *string `json:"etag,omitempty"`
	// Immutable. The resource name of this node pool.
	Name *string `json:"name,omitempty"`
	// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
	NodePoolAutoscaling *VmwareNodePoolAutoscalingConfig `json:"nodePoolAutoscaling,omitempty"`
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion *string `json:"onPremVersion,omitempty"`
	// Output only. If set, there are currently changes in flight to the node pool.
	Reconciling *bool `json:"reconciling,omitempty"`
	// Output only. The current state of the node pool.
	State *VmwareNodePoolStateEnum `json:"state,omitempty"`
	// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
	Status *ResourceStatus `json:"status,omitempty"`
	// Output only. The unique identifier of the node pool.
	UID *string `json:"uid,omitempty"`
	// Output only. The time at which this node pool was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}
