"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IconDisapprovalReasonsEnum(str, Enum):
    IMAGE_DISAPPROVAL_REASON_UNSPECIFIED = 'IMAGE_DISAPPROVAL_REASON_UNSPECIFIED'
    NOT_LIKE_SITE = 'NOT_LIKE_SITE'
    OFFENSIVE = 'OFFENSIVE'
    LOW_QUALITY = 'LOW_QUALITY'
    ANIMATED = 'ANIMATED'
    BAD_BACKGROUND = 'BAD_BACKGROUND'
    TEXT_TOO_SMALL = 'TEXT_TOO_SMALL'

class IconStateEnum(str, Enum):
    r"""Output only. The icon's current state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NEW = 'NEW'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Icon:
    r"""Information about a partner's icon."""
    
    disapproval_reasons: Optional[list[IconDisapprovalReasonsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disapprovalReasons'), 'exclude': lambda f: f is None }})
    r"""Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state."""  
    icon_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconUri'), 'exclude': lambda f: f is None }})
    r"""Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state."""  
    image_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageData'), 'exclude': lambda f: f is None }})
    r"""Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value."""  
    state: Optional[IconStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The icon's current state."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IconInput:
    r"""Information about a partner's icon."""
    
    image_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageData'), 'exclude': lambda f: f is None }})
    r"""Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value."""  
    