"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTTaxationItemForDMTypeFinanceInformation:
    r"""Container for the finance information related to the taxation item."""
    
    sales_tax_payable_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesTaxPayableAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the sales taxes payable."""  
    
class POSTTaxationItemForDMTypeTaxRateTypeEnum(str, Enum):
    r"""The type of the tax rate applied to the debit memo."""
    PERCENTAGE = 'Percentage'
    FLAT_FEE = 'FlatFee'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTTaxationItemForDMType:
    r"""Container for custom fields of a Taxation Item object."""
    
    jurisdiction: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdiction') }})
    r"""The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the taxation item."""  
    tax_amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxAmount') }})
    r"""The amount of the tax applied to the debit memo."""  
    tax_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRate') }})
    r"""The tax rate applied to the debit memo."""  
    tax_rate_type: POSTTaxationItemForDMTypeTaxRateTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRateType') }})
    r"""The type of the tax rate applied to the debit memo."""  
    exempt_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of taxes or VAT for which the customer has an exemption."""  
    finance_information: Optional[POSTTaxationItemForDMTypeFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the taxation item."""  
    location_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationCode'), 'exclude': lambda f: f is None }})
    r"""The identifier for the location based on the value of the `taxCode` field."""  
    memo_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the debit memo that the taxation item is created for."""  
    source_tax_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceTaxItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the taxation item of the invoice, which the debit memo is created from.
    
    If you want to use this REST API to create taxation items for a debit memo created from an invoice, the taxation items of the invoice must be created or imported through the SOAP API call.
    
    **Note:** 
      - This field is only used if the debit memo is created from an invoice. 
      - If you do not contain this field in the request body, Zuora will automatically set a value for the `sourceTaxItemId` field based on the tax location code, tax jurisdiction, and tax rate.
    """  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code identifies which tax rules and tax rates to apply to a specific debit memo."""  
    tax_code_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCodeDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the tax code."""  
    tax_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the tax is applied to the debit memo."""  
    tax_rate_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRateDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the tax rate."""  
    