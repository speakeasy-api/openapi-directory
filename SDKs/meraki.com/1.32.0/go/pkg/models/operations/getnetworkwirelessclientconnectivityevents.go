// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNetworkWirelessClientConnectivityEventsBandEnum - Filter results by band (either '2.4', '5', '6').
type GetNetworkWirelessClientConnectivityEventsBandEnum string

const (
	GetNetworkWirelessClientConnectivityEventsBandEnumTwo4 GetNetworkWirelessClientConnectivityEventsBandEnum = "2.4"
	GetNetworkWirelessClientConnectivityEventsBandEnumFive GetNetworkWirelessClientConnectivityEventsBandEnum = "5"
	GetNetworkWirelessClientConnectivityEventsBandEnumSix  GetNetworkWirelessClientConnectivityEventsBandEnum = "6"
)

func (e GetNetworkWirelessClientConnectivityEventsBandEnum) ToPointer() *GetNetworkWirelessClientConnectivityEventsBandEnum {
	return &e
}

func (e *GetNetworkWirelessClientConnectivityEventsBandEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		*e = GetNetworkWirelessClientConnectivityEventsBandEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessClientConnectivityEventsBandEnum: %v", v)
	}
}

type GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum string

const (
	GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnumBad  GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum = "bad"
	GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnumGood GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum = "good"
	GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnumInfo GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum = "info"
	GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnumWarn GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum = "warn"
)

func (e GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum) ToPointer() *GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum {
	return &e
}

func (e *GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad":
		fallthrough
	case "good":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		*e = GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum: %v", v)
	}
}

// GetNetworkWirelessClientConnectivityEventsSsidNumberEnum - An SSID number to include. If not specified, events for all SSIDs will be returned.
type GetNetworkWirelessClientConnectivityEventsSsidNumberEnum int64

const (
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumZero     GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 0
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumOne      GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 1
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumTwo      GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 2
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumThree    GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 3
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumFour     GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 4
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumFive     GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 5
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumSix      GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 6
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumSeven    GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 7
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumEight    GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 8
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumNine     GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 9
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumTen      GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 10
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumEleven   GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 11
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumTwelve   GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 12
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumThirteen GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 13
	GetNetworkWirelessClientConnectivityEventsSsidNumberEnumFourteen GetNetworkWirelessClientConnectivityEventsSsidNumberEnum = 14
)

func (e GetNetworkWirelessClientConnectivityEventsSsidNumberEnum) ToPointer() *GetNetworkWirelessClientConnectivityEventsSsidNumberEnum {
	return &e
}

func (e *GetNetworkWirelessClientConnectivityEventsSsidNumberEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		*e = GetNetworkWirelessClientConnectivityEventsSsidNumberEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessClientConnectivityEventsSsidNumberEnum: %v", v)
	}
}

type GetNetworkWirelessClientConnectivityEventsTypesEnum string

const (
	GetNetworkWirelessClientConnectivityEventsTypesEnumAssoc      GetNetworkWirelessClientConnectivityEventsTypesEnum = "assoc"
	GetNetworkWirelessClientConnectivityEventsTypesEnumAuth       GetNetworkWirelessClientConnectivityEventsTypesEnum = "auth"
	GetNetworkWirelessClientConnectivityEventsTypesEnumConnection GetNetworkWirelessClientConnectivityEventsTypesEnum = "connection"
	GetNetworkWirelessClientConnectivityEventsTypesEnumDeauth     GetNetworkWirelessClientConnectivityEventsTypesEnum = "deauth"
	GetNetworkWirelessClientConnectivityEventsTypesEnumDhcp       GetNetworkWirelessClientConnectivityEventsTypesEnum = "dhcp"
	GetNetworkWirelessClientConnectivityEventsTypesEnumDisassoc   GetNetworkWirelessClientConnectivityEventsTypesEnum = "disassoc"
	GetNetworkWirelessClientConnectivityEventsTypesEnumDNS        GetNetworkWirelessClientConnectivityEventsTypesEnum = "dns"
	GetNetworkWirelessClientConnectivityEventsTypesEnumRoam       GetNetworkWirelessClientConnectivityEventsTypesEnum = "roam"
	GetNetworkWirelessClientConnectivityEventsTypesEnumSticky     GetNetworkWirelessClientConnectivityEventsTypesEnum = "sticky"
)

func (e GetNetworkWirelessClientConnectivityEventsTypesEnum) ToPointer() *GetNetworkWirelessClientConnectivityEventsTypesEnum {
	return &e
}

func (e *GetNetworkWirelessClientConnectivityEventsTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assoc":
		fallthrough
	case "auth":
		fallthrough
	case "connection":
		fallthrough
	case "deauth":
		fallthrough
	case "dhcp":
		fallthrough
	case "disassoc":
		fallthrough
	case "dns":
		fallthrough
	case "roam":
		fallthrough
	case "sticky":
		*e = GetNetworkWirelessClientConnectivityEventsTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessClientConnectivityEventsTypesEnum: %v", v)
	}
}

type GetNetworkWirelessClientConnectivityEventsRequest struct {
	// Filter results by band (either '2.4', '5', '6').
	Band     *GetNetworkWirelessClientConnectivityEventsBandEnum `queryParam:"style=form,explode=true,name=band"`
	ClientID string                                              `pathParam:"style=simple,explode=false,name=clientId"`
	// Filter results by an AP's serial number.
	DeviceSerial *string `queryParam:"style=form,explode=true,name=deviceSerial"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
	IncludedSeverities []GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum `queryParam:"style=form,explode=false,name=includedSeverities"`
	NetworkID          string                                                             `pathParam:"style=simple,explode=false,name=networkId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// An SSID number to include. If not specified, events for all SSIDs will be returned.
	SsidNumber *GetNetworkWirelessClientConnectivityEventsSsidNumberEnum `queryParam:"style=form,explode=true,name=ssidNumber"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
	T1 *string `queryParam:"style=form,explode=true,name=t1"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
	// A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
	Types []GetNetworkWirelessClientConnectivityEventsTypesEnum `queryParam:"style=form,explode=false,name=types"`
}

type GetNetworkWirelessClientConnectivityEventsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkWirelessClientConnectivityEvents200ApplicationJSONObjects []map[string]interface{}
}
