/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BasicChartSpec - The specification for a basic chart. See BasicChartType for the list of charts this supports.
 */
public class BasicChartSpec {
    /**
     * The axis on the chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("axis")
    public BasicChartAxis[] axis;
    public BasicChartSpec withAxis(BasicChartAxis[] axis) {
        this.axis = axis;
        return this;
    }
    
    /**
     * The type of the chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chartType")
    public BasicChartSpecChartTypeEnum chartType;
    public BasicChartSpec withChartType(BasicChartSpecChartTypeEnum chartType) {
        this.chartType = chartType;
        return this;
    }
    
    /**
     * The behavior of tooltips and data highlighting when hovering on data and chart area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compareMode")
    public BasicChartSpecCompareModeEnum compareMode;
    public BasicChartSpec withCompareMode(BasicChartSpecCompareModeEnum compareMode) {
        this.compareMode = compareMode;
        return this;
    }
    
    /**
     * The domain of data this is charting. Only a single domain is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    public BasicChartDomain[] domains;
    public BasicChartSpec withDomains(BasicChartDomain[] domains) {
        this.domains = domains;
        return this;
    }
    
    /**
     * The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headerCount")
    public Integer headerCount;
    public BasicChartSpec withHeaderCount(Integer headerCount) {
        this.headerCount = headerCount;
        return this;
    }
    
    /**
     * If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interpolateNulls")
    public Boolean interpolateNulls;
    public BasicChartSpec withInterpolateNulls(Boolean interpolateNulls) {
        this.interpolateNulls = interpolateNulls;
        return this;
    }
    
    /**
     * The position of the chart legend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legendPosition")
    public BasicChartSpecLegendPositionEnum legendPosition;
    public BasicChartSpec withLegendPosition(BasicChartSpecLegendPositionEnum legendPosition) {
        this.legendPosition = legendPosition;
        return this;
    }
    
    /**
     * Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineSmoothing")
    public Boolean lineSmoothing;
    public BasicChartSpec withLineSmoothing(Boolean lineSmoothing) {
        this.lineSmoothing = lineSmoothing;
        return this;
    }
    
    /**
     * The data this chart is visualizing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("series")
    public BasicChartSeries[] series;
    public BasicChartSpec withSeries(BasicChartSeries[] series) {
        this.series = series;
        return this;
    }
    
    /**
     * The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackedType")
    public BasicChartSpecStackedTypeEnum stackedType;
    public BasicChartSpec withStackedType(BasicChartSpecStackedTypeEnum stackedType) {
        this.stackedType = stackedType;
        return this;
    }
    
    /**
     * True to make the chart 3D. Applies to Bar and Column charts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threeDimensional")
    public Boolean threeDimensional;
    public BasicChartSpec withThreeDimensional(Boolean threeDimensional) {
        this.threeDimensional = threeDimensional;
        return this;
    }
    
    /**
     * Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDataLabel")
    public DataLabel totalDataLabel;
    public BasicChartSpec withTotalDataLabel(DataLabel totalDataLabel) {
        this.totalDataLabel = totalDataLabel;
        return this;
    }
    
}
