"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class CreateOrUpdateAnnotationRequest:
    
    annotation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'annotationId', 'style': 'simple', 'explode': False }})
    r"""Either the uuid or external-id of the annotation."""  
    commit: str = dataclasses.field(metadata={'path_param': { 'field_name': 'commit', 'style': 'simple', 'explode': False }})
    r"""The commit the report belongs to."""  
    repo_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo_slug', 'style': 'simple', 'explode': False }})
    r"""The repository."""  
    report_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'reportId', 'style': 'simple', 'explode': False }})
    r"""Either the uuid or external-id of the report."""  
    request_body: dict[str, Any] = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The annotation to create or update"""  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`."""  
    

@dataclasses.dataclass
class CreateOrUpdateAnnotationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""The provided Annotation object is malformed or incomplete."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_annotation: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""OK"""  
    