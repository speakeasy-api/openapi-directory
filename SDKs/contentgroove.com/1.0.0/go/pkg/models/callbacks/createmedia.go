// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package callbacks

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type CreateMediaMediaProcessingFinishedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataAttributes struct {
	CreatedAt                 *string  `json:"created_at,omitempty"`
	Description               *string  `json:"description,omitempty"`
	ExternalID                *string  `json:"external_id,omitempty"`
	HasFetchError             *bool    `json:"has_fetch_error,omitempty"`
	IsProcessing              *bool    `json:"is_processing,omitempty"`
	Name                      *string  `json:"name,omitempty"`
	OriginalCreatedAt         *string  `json:"original_created_at,omitempty"`
	ProcessingStartedAt       *string  `json:"processing_started_at,omitempty"`
	SourceCreatedAt           *string  `json:"source_created_at,omitempty"`
	SourceFileContentType     *string  `json:"source_file_content_type,omitempty"`
	SourceFileDuration        *float64 `json:"source_file_duration,omitempty"`
	SourceFileHeight          *float64 `json:"source_file_height,omitempty"`
	SourceFilePreviewImageURL *string  `json:"source_file_preview_image_url,omitempty"`
	SourceFileWidth           *float64 `json:"source_file_width,omitempty"`
	SourceURL                 *string  `json:"source_url,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationshipsClipsData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationshipsClips struct {
	Data []CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationshipsClipsData `json:"data,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationships struct {
	Clips *CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationshipsClips `json:"clips,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataTranscriptionData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadDataTranscription struct {
	Data *CreateMediaMediaProcessingFinishedRequestBodyPayloadDataTranscriptionData `json:"data,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadData struct {
	Attributes    *CreateMediaMediaProcessingFinishedRequestBodyPayloadDataAttributes    `json:"attributes,omitempty"`
	ID            *string                                                                `json:"id,omitempty"`
	Relationships *CreateMediaMediaProcessingFinishedRequestBodyPayloadDataRelationships `json:"relationships,omitempty"`
	Transcription *CreateMediaMediaProcessingFinishedRequestBodyPayloadDataTranscription `json:"transcription,omitempty"`
	Type          *string                                                                `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2Attributes struct {
	Text *string `json:"text,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 struct {
	Attributes    *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2Attributes `json:"attributes,omitempty"`
	ID            *string                                                                  `json:"id,omitempty"`
	Relationships map[string]interface{}                                                   `json:"relationships,omitempty"`
	Type          *string                                                                  `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1Attributes struct {
	CreatedAt                *string  `json:"created_at,omitempty"`
	EndChar                  *string  `json:"end_char,omitempty"`
	EndTime                  *float64 `json:"end_time,omitempty"`
	ExternalID               *string  `json:"external_id,omitempty"`
	MediaFileContentType     *string  `json:"media_file_content_type,omitempty"`
	MediaFileDuration        *float64 `json:"media_file_duration,omitempty"`
	MediaFileHeight          *float64 `json:"media_file_height,omitempty"`
	MediaFilePreviewImageURL *string  `json:"media_file_preview_image_url,omitempty"`
	MediaFileURL             *string  `json:"media_file_url,omitempty"`
	MediaFileWidth           *float64 `json:"media_file_width,omitempty"`
	Name                     *string  `json:"name,omitempty"`
	Rank                     *int64   `json:"rank,omitempty"`
	StartChar                *int64   `json:"start_char,omitempty"`
	StartTime                *float64 `json:"start_time,omitempty"`
	Text                     *string  `json:"text,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1RelationshipsMediaData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1RelationshipsMedia struct {
	Data *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1RelationshipsMediaData `json:"data,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1Relationships struct {
	Media *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1RelationshipsMedia `json:"media,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 struct {
	Attributes    *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1Attributes    `json:"attributes,omitempty"`
	ID            *string                                                                     `json:"id,omitempty"`
	Relationships *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1Relationships `json:"relationships,omitempty"`
	Type          *string                                                                     `json:"type,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedType string

const (
	CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedType = "createMedia_media.processing_finished_requestBody_payload_included_1"
	CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedType = "createMedia_media.processing_finished_requestBody_payload_included_2"
)

type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded struct {
	CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1
	CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2

	Type CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedType
}

func CreateCreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1(createMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1) CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded {
	typ := CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1

	return CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded{
		CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1: &createMediaMediaProcessingFinishedRequestBodyPayloadIncluded1,
		Type: typ,
	}
}

func CreateCreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2(createMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2) CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded {
	typ := CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2

	return CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded{
		CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2: &createMediaMediaProcessingFinishedRequestBodyPayloadIncluded2,
		Type: typ,
	}
}

func (u *CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 := new(CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createMediaMediaProcessingFinishedRequestBodyPayloadIncluded1); err == nil {
		u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 = createMediaMediaProcessingFinishedRequestBodyPayloadIncluded1
		u.Type = CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1
		return nil
	}

	createMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 := new(CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createMediaMediaProcessingFinishedRequestBodyPayloadIncluded2); err == nil {
		u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 = createMediaMediaProcessingFinishedRequestBodyPayloadIncluded2
		u.Type = CreateMediaMediaProcessingFinishedRequestBodyPayloadIncludedTypeCreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded) MarshalJSON() ([]byte, error) {
	if u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1 != nil {
		return json.Marshal(u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded1)
	}

	if u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2 != nil {
		return json.Marshal(u.CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded2)
	}

	return nil, nil
}

type CreateMediaMediaProcessingFinishedRequestBodyPayload struct {
	Data     *CreateMediaMediaProcessingFinishedRequestBodyPayloadData      `json:"data,omitempty"`
	Included []CreateMediaMediaProcessingFinishedRequestBodyPayloadIncluded `json:"included,omitempty"`
}

type CreateMediaMediaProcessingFinishedRequestBody struct {
	Event   *string                                               `json:"event,omitempty"`
	Payload *CreateMediaMediaProcessingFinishedRequestBodyPayload `json:"payload,omitempty"`
}
