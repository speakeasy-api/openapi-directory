"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContextRule:
    r"""A context rule provides information about the context for an individual API element."""
    
    allowed_request_extensions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedRequestExtensions'), 'exclude': lambda f: f is None }})
    r"""A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend."""  
    allowed_response_extensions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedResponseExtensions'), 'exclude': lambda f: f is None }})
    r"""A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client."""  
    provided: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provided'), 'exclude': lambda f: f is None }})
    r"""A list of full type names of provided contexts."""  
    requested: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested'), 'exclude': lambda f: f is None }})
    r"""A list of full type names of requested contexts."""  
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector'), 'exclude': lambda f: f is None }})
    r"""Selects the methods to which this rule applies. Refer to selector for syntax details."""  
    