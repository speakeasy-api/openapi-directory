"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import modelpackagecontainerdefinition as shared_modelpackagecontainerdefinition
from ..shared import productionvariantinstancetype_enum as shared_productionvariantinstancetype_enum
from ..shared import transforminstancetype_enum as shared_transforminstancetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdditionalInferenceSpecificationDefinition:
    r"""A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package"""
    
    containers: list[shared_modelpackagecontainerdefinition.ModelPackageContainerDefinition] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Containers') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    supported_content_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedContentTypes'), 'exclude': lambda f: f is None }})  
    supported_realtime_inference_instance_types: Optional[list[shared_productionvariantinstancetype_enum.ProductionVariantInstanceTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedRealtimeInferenceInstanceTypes'), 'exclude': lambda f: f is None }})  
    supported_response_mime_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedResponseMIMETypes'), 'exclude': lambda f: f is None }})  
    supported_transform_instance_types: Optional[list[shared_transforminstancetype_enum.TransformInstanceTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedTransformInstanceTypes'), 'exclude': lambda f: f is None }})  
    