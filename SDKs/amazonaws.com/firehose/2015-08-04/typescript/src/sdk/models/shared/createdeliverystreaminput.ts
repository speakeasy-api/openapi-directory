/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AmazonOpenSearchServerlessDestinationConfiguration } from "./amazonopensearchserverlessdestinationconfiguration";
import { AmazonopensearchserviceDestinationConfiguration } from "./amazonopensearchservicedestinationconfiguration";
import { BufferingHints } from "./bufferinghints";
import { CloudWatchLoggingOptions } from "./cloudwatchloggingoptions";
import { CompressionFormatEnum } from "./compressionformatenum";
import { DeliveryStreamEncryptionConfigurationInput } from "./deliverystreamencryptionconfigurationinput";
import { DeliveryStreamTypeEnum } from "./deliverystreamtypeenum";
import { ElasticsearchDestinationConfiguration } from "./elasticsearchdestinationconfiguration";
import { EncryptionConfiguration } from "./encryptionconfiguration";
import { ExtendedS3DestinationConfiguration } from "./extendeds3destinationconfiguration";
import { HttpEndpointDestinationConfiguration } from "./httpendpointdestinationconfiguration";
import { KinesisStreamSourceConfiguration } from "./kinesisstreamsourceconfiguration";
import { RedshiftDestinationConfiguration } from "./redshiftdestinationconfiguration";
import { SplunkDestinationConfiguration } from "./splunkdestinationconfiguration";
import { Tag } from "./tag";
import { Expose, Type } from "class-transformer";

/**
 * [Deprecated] The destination in Amazon S3. You can specify only one destination.
 */
export class CreateDeliveryStreamInputS3DestinationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BucketARN" })
  bucketARN: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BufferingHints" })
  @Type(() => BufferingHints)
  bufferingHints?: BufferingHints;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchLoggingOptions" })
  @Type(() => CloudWatchLoggingOptions)
  cloudWatchLoggingOptions?: CloudWatchLoggingOptions;

  @SpeakeasyMetadata()
  @Expose({ name: "CompressionFormat" })
  compressionFormat?: CompressionFormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionConfiguration" })
  @Type(() => EncryptionConfiguration)
  encryptionConfiguration?: EncryptionConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ErrorOutputPrefix" })
  errorOutputPrefix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Prefix" })
  prefix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RoleARN" })
  roleARN: string;
}

export class CreateDeliveryStreamInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AmazonOpenSearchServerlessDestinationConfiguration" })
  @Type(() => AmazonOpenSearchServerlessDestinationConfiguration)
  amazonOpenSearchServerlessDestinationConfiguration?: AmazonOpenSearchServerlessDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "AmazonopensearchserviceDestinationConfiguration" })
  @Type(() => AmazonopensearchserviceDestinationConfiguration)
  amazonopensearchserviceDestinationConfiguration?: AmazonopensearchserviceDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryStreamEncryptionConfigurationInput" })
  @Type(() => DeliveryStreamEncryptionConfigurationInput)
  deliveryStreamEncryptionConfigurationInput?: DeliveryStreamEncryptionConfigurationInput;

  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryStreamName" })
  deliveryStreamName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryStreamType" })
  deliveryStreamType?: DeliveryStreamTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ElasticsearchDestinationConfiguration" })
  @Type(() => ElasticsearchDestinationConfiguration)
  elasticsearchDestinationConfiguration?: ElasticsearchDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ExtendedS3DestinationConfiguration" })
  @Type(() => ExtendedS3DestinationConfiguration)
  extendedS3DestinationConfiguration?: ExtendedS3DestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "HttpEndpointDestinationConfiguration" })
  @Type(() => HttpEndpointDestinationConfiguration)
  httpEndpointDestinationConfiguration?: HttpEndpointDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "KinesisStreamSourceConfiguration" })
  @Type(() => KinesisStreamSourceConfiguration)
  kinesisStreamSourceConfiguration?: KinesisStreamSourceConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftDestinationConfiguration" })
  @Type(() => RedshiftDestinationConfiguration)
  redshiftDestinationConfiguration?: RedshiftDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "S3DestinationConfiguration" })
  @Type(() => CreateDeliveryStreamInputS3DestinationConfiguration)
  s3DestinationConfiguration?: CreateDeliveryStreamInputS3DestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "SplunkDestinationConfiguration" })
  @Type(() => SplunkDestinationConfiguration)
  splunkDestinationConfiguration?: SplunkDestinationConfiguration;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
