<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Japanese 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullResponse
     */
	public function genderJapaneseNameFull(
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderJapaneseNameFull/{japaneseName}', \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 full names
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullBatchResponse
     */
	public function genderJapaneseNameFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderJapaneseNameFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNameFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinResponse
     */
	public function genderJapaneseNamePinyin(
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}', \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinBatchResponse
     */
	public function genderJapaneseNamePinyinBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderJapaneseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderJapaneseNamePinyinBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameGenderKanjiCandidatesBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameGenderKanjiCandidatesBatchResponse
     */
	public function japaneseNameGenderKanjiCandidatesBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderIn $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameGenderKanjiCandidatesBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameGenderKanjiCandidatesBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameGenderKanjiCandidatesBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameGenderKanjiCandidatesBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesResponse
     */
	public function japaneseNameKanjiCandidates(
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}', \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesBatchResponse
     */
	public function japaneseNameKanjiCandidatesBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameKanjiCandidatesBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidatesBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Response
     */
	public function japaneseNameKanjiCandidates1(
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}', \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameKanjiCandidates1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Romanize japanese name, based on the name in Kanji.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesResponse
     */
	public function japaneseNameLatinCandidates(
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}', \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Romanize japanese names, based on the name in KANJI
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesBatchResponse
     */
	public function japaneseNameLatinCandidatesBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameLatinCandidatesBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameLatinCandidatesBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchResponse
     */
	public function japaneseNameMatch(
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchMatchPersonalFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchBatchResponse
     */
	public function japaneseNameMatchBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchMatchPersonalFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameMatchBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopResponse
     */
	public function japaneseNameMatchFeedbackLoop(
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JapaneseNameMatchFeedbackLoopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feedbackLoopOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeedbackLoopOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameResponse
     */
	public function parseJapaneseName(
        \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseJapaneseName/{japaneseName}', \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameBatchResponse
     */
	public function parseJapaneseNameBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseJapaneseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseJapaneseNameBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}