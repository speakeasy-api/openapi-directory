<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Imports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an import
     * 
     * Deletes an import, by ID only. The associated people can be deleted as part of the deletion process.
     * 
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonResponse
     */
	public function deleteV2ImportsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/imports/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteV2ImportsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List imports
     * 
     * Fetches multiple imports.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonResponse
     */
	public function getV2ImportsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/imports.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch an import
     * 
     * Fetches an import, by ID only.
     * 
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonResponse
     */
	public function getV2ImportsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/imports/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2ImportsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create an import
     * 
     * Creates an import.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2ImportsJsonRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2ImportsJsonResponse
     */
	public function postV2ImportsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV2ImportsJsonRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2ImportsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/imports.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2ImportsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an import
     * 
     * Updates an import, by ID only.
     * 
     * Admin users can access imports for the entire team, but non-admin users can only access their own imports.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonResponse
     */
	public function putV2ImportsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/imports/{id}.json', \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2ImportsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}