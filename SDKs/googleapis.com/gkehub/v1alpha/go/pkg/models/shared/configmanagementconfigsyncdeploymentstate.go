// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum - Deployment state of admission-webhook
type ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum string

const (
	ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnumInstalled                  ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnumError                      ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateGitSyncEnum - Deployment state of the git-sync pod
type ConfigManagementConfigSyncDeploymentStateGitSyncEnum string

const (
	ConfigManagementConfigSyncDeploymentStateGitSyncEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateGitSyncEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateGitSyncEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateGitSyncEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateGitSyncEnumInstalled                  ConfigManagementConfigSyncDeploymentStateGitSyncEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateGitSyncEnumError                      ConfigManagementConfigSyncDeploymentStateGitSyncEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateGitSyncEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateGitSyncEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateGitSyncEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateGitSyncEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateGitSyncEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateImporterEnum - Deployment state of the importer pod
type ConfigManagementConfigSyncDeploymentStateImporterEnum string

const (
	ConfigManagementConfigSyncDeploymentStateImporterEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateImporterEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateImporterEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateImporterEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateImporterEnumInstalled                  ConfigManagementConfigSyncDeploymentStateImporterEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateImporterEnumError                      ConfigManagementConfigSyncDeploymentStateImporterEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateImporterEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateImporterEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateImporterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateImporterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateImporterEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateMonitorEnum - Deployment state of the monitor pod
type ConfigManagementConfigSyncDeploymentStateMonitorEnum string

const (
	ConfigManagementConfigSyncDeploymentStateMonitorEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateMonitorEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateMonitorEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateMonitorEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateMonitorEnumInstalled                  ConfigManagementConfigSyncDeploymentStateMonitorEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateMonitorEnumError                      ConfigManagementConfigSyncDeploymentStateMonitorEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateMonitorEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateMonitorEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateMonitorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateMonitorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateMonitorEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum - Deployment state of reconciler-manager pod
type ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum string

const (
	ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnumInstalled                  ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnumError                      ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum - Deployment state of root-reconciler
type ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum string

const (
	ConfigManagementConfigSyncDeploymentStateRootReconcilerEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateRootReconcilerEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateRootReconcilerEnumInstalled                  ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateRootReconcilerEnumError                      ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentStateSyncerEnum - Deployment state of the syncer pod
type ConfigManagementConfigSyncDeploymentStateSyncerEnum string

const (
	ConfigManagementConfigSyncDeploymentStateSyncerEnumDeploymentStateUnspecified ConfigManagementConfigSyncDeploymentStateSyncerEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementConfigSyncDeploymentStateSyncerEnumNotInstalled               ConfigManagementConfigSyncDeploymentStateSyncerEnum = "NOT_INSTALLED"
	ConfigManagementConfigSyncDeploymentStateSyncerEnumInstalled                  ConfigManagementConfigSyncDeploymentStateSyncerEnum = "INSTALLED"
	ConfigManagementConfigSyncDeploymentStateSyncerEnumError                      ConfigManagementConfigSyncDeploymentStateSyncerEnum = "ERROR"
)

func (e ConfigManagementConfigSyncDeploymentStateSyncerEnum) ToPointer() *ConfigManagementConfigSyncDeploymentStateSyncerEnum {
	return &e
}

func (e *ConfigManagementConfigSyncDeploymentStateSyncerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementConfigSyncDeploymentStateSyncerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementConfigSyncDeploymentStateSyncerEnum: %v", v)
	}
}

// ConfigManagementConfigSyncDeploymentState - The state of ConfigSync's deployment on a cluster
type ConfigManagementConfigSyncDeploymentState struct {
	// Deployment state of admission-webhook
	AdmissionWebhook *ConfigManagementConfigSyncDeploymentStateAdmissionWebhookEnum `json:"admissionWebhook,omitempty"`
	// Deployment state of the git-sync pod
	GitSync *ConfigManagementConfigSyncDeploymentStateGitSyncEnum `json:"gitSync,omitempty"`
	// Deployment state of the importer pod
	Importer *ConfigManagementConfigSyncDeploymentStateImporterEnum `json:"importer,omitempty"`
	// Deployment state of the monitor pod
	Monitor *ConfigManagementConfigSyncDeploymentStateMonitorEnum `json:"monitor,omitempty"`
	// Deployment state of reconciler-manager pod
	ReconcilerManager *ConfigManagementConfigSyncDeploymentStateReconcilerManagerEnum `json:"reconcilerManager,omitempty"`
	// Deployment state of root-reconciler
	RootReconciler *ConfigManagementConfigSyncDeploymentStateRootReconcilerEnum `json:"rootReconciler,omitempty"`
	// Deployment state of the syncer pod
	Syncer *ConfigManagementConfigSyncDeploymentStateSyncerEnum `json:"syncer,omitempty"`
}
