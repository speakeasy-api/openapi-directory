/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
 */
public class Metric {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Metric(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create patient health metrics
     * Create one or more patient health metrics.
     * 
     * Example for creating a patient health result with a patient specified using `meta.query` instead of `id`:
     * 
     * ```JSON
     *   {
     *     "data": {
     *       "type": "patient_health_metric",
     *        "attributes": {
     *          "code": {
     *            "system": "LOINC",
     *            "value": "13457-7"
     *          },
     *          "type": "ldl_cholesterol",
     *          "occurred_at": "2017-03-14T11:00:57.000Z",
     *          "value": 121,
     *          "unit": "mg/dl"
     *       },
     *       "relationships": {
     *         "patient": {
     *           "data": {
     *             "type": "patient",
     *             "meta": {
     *               "query": {
     *                 "identifier": {
     *                   "system": "medical-record-number",
     *                   "value": "121212"
     *                 },
     *                 "organization": "58c4554710123c5c40dbab81"
     *               }
     *             }
     *           }
     *         }
     *       }
     *     }
     *   }
     * ```
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreatePatientHealthMetricResponse createPatientHealthMetric(org.openapis.openapi.models.shared.CreatePatientHealthMetricRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/patient_health_metric");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePatientHealthMetricResponse res = new org.openapis.openapi.models.operations.CreatePatientHealthMetricResponse(contentType, httpRes.statusCode()) {{
            createPatientHealthMetricResponse = null;
            createOrUpdateErrorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreatePatientHealthMetricResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreatePatientHealthMetricResponse.class);
                res.createPatientHealthMetricResponse = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateOrUpdateErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateOrUpdateErrorResponse.class);
                res.createOrUpdateErrorResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a patient health metric
     * Get the plan summary for a patient.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPatientHealthMetricResponse fetchPatientHealthMetric(org.openapis.openapi.models.operations.FetchPatientHealthMetricRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPatientHealthMetricRequest.class, baseUrl, "/patient_health_metric/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPatientHealthMetricResponse res = new org.openapis.openapi.models.operations.FetchPatientHealthMetricResponse(contentType, httpRes.statusCode()) {{
            fetchPatientHealthMetricResponse = null;
            fetchErrorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchPatientHealthMetricResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchPatientHealthMetricResponse.class);
                res.fetchPatientHealthMetricResponse = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchErrorResponse.class);
                res.fetchErrorResponse = out;
            }
        }

        return res;
    }

    /**
     * List patient health metrics
     * Get a list of patient health metrics.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPatientHealthMetricsResponse fetchPatientHealthMetrics(org.openapis.openapi.models.operations.FetchPatientHealthMetricsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/patient_health_metric");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchPatientHealthMetricsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPatientHealthMetricsResponse res = new org.openapis.openapi.models.operations.FetchPatientHealthMetricsResponse(contentType, httpRes.statusCode()) {{
            fetchPatientHealthMetricResponse = null;
            fetchErrorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchPatientHealthMetricResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchPatientHealthMetricResponse.class);
                res.fetchPatientHealthMetricResponse = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.api+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchErrorResponse.class);
                res.fetchErrorResponse = out;
            }
        }

        return res;
    }
}