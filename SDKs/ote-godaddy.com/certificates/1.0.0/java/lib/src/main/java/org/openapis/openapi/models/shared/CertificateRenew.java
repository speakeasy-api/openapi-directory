/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateRenew - The renew request info
 */
public class CertificateRenew {
    /**
     * Required if client would like to receive stateful actions via callback during certificate lifecyle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    public String callbackUrl;
    public CertificateRenew withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The common name of certificate to be secured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonName")
    public String commonName;
    public CertificateRenew withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * Certificate Signing Request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("csr")
    public String csr;
    public CertificateRenew withCsr(String csr) {
        this.csr = csr;
        return this;
    }
    
    /**
     * Number of years for certificate validity period, if different from previous certificate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    public Long period;
    public CertificateRenew withPeriod(Long period) {
        this.period = period;
        return this;
    }
    
    /**
     * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootType")
    public CertificateRenewRootTypeEnum rootType;
    public CertificateRenew withRootType(CertificateRenewRootTypeEnum rootType) {
        this.rootType = rootType;
        return this;
    }
    
    /**
     * Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectAlternativeNames")
    public String[] subjectAlternativeNames;
    public CertificateRenew withSubjectAlternativeNames(String[] subjectAlternativeNames) {
        this.subjectAlternativeNames = subjectAlternativeNames;
        return this;
    }
    
}
