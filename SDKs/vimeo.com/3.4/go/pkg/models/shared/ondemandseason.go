// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OnDemandSeasonMetadataConnectionsVideos - The Videos connection.
type OnDemandSeasonMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection âˆ‚data.
	URI string `json:"uri"`
}

type OnDemandSeasonMetadataConnections struct {
	// The Videos connection.
	Videos OnDemandSeasonMetadataConnectionsVideos `json:"videos"`
}

type OnDemandSeasonMetadata struct {
	Connections OnDemandSeasonMetadataConnections `json:"connections"`
}

// OnDemandSeasonUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type OnDemandSeasonUserAccountEnum string

const (
	OnDemandSeasonUserAccountEnumBasic        OnDemandSeasonUserAccountEnum = "basic"
	OnDemandSeasonUserAccountEnumBusiness     OnDemandSeasonUserAccountEnum = "business"
	OnDemandSeasonUserAccountEnumLiveBusiness OnDemandSeasonUserAccountEnum = "live_business"
	OnDemandSeasonUserAccountEnumLivePremium  OnDemandSeasonUserAccountEnum = "live_premium"
	OnDemandSeasonUserAccountEnumLivePro      OnDemandSeasonUserAccountEnum = "live_pro"
	OnDemandSeasonUserAccountEnumPlus         OnDemandSeasonUserAccountEnum = "plus"
	OnDemandSeasonUserAccountEnumPro          OnDemandSeasonUserAccountEnum = "pro"
	OnDemandSeasonUserAccountEnumProUnlimited OnDemandSeasonUserAccountEnum = "pro_unlimited"
	OnDemandSeasonUserAccountEnumProducer     OnDemandSeasonUserAccountEnum = "producer"
)

func (e *OnDemandSeasonUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = OnDemandSeasonUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserAccountEnum: %s", s)
	}
}

// OnDemandSeasonUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type OnDemandSeasonUserContentFilterEnum string

const (
	OnDemandSeasonUserContentFilterEnumDrugs    OnDemandSeasonUserContentFilterEnum = "drugs"
	OnDemandSeasonUserContentFilterEnumLanguage OnDemandSeasonUserContentFilterEnum = "language"
	OnDemandSeasonUserContentFilterEnumNudity   OnDemandSeasonUserContentFilterEnum = "nudity"
	OnDemandSeasonUserContentFilterEnumSafe     OnDemandSeasonUserContentFilterEnum = "safe"
	OnDemandSeasonUserContentFilterEnumUnrated  OnDemandSeasonUserContentFilterEnum = "unrated"
	OnDemandSeasonUserContentFilterEnumViolence OnDemandSeasonUserContentFilterEnum = "violence"
)

func (e *OnDemandSeasonUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = OnDemandSeasonUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserContentFilterEnum: %s", s)
	}
}

// OnDemandSeasonUserMetadataConnectionsAlbums - Information about the albums created by this user.
type OnDemandSeasonUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type OnDemandSeasonUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type OnDemandSeasonUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsCategories - Information about this user's followed categories.
type OnDemandSeasonUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type OnDemandSeasonUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsFeed - Information about this user's feed.
type OnDemandSeasonUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsFolders - Information about this user's folders.
type OnDemandSeasonUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsFollowers - Information about the user's followers.
type OnDemandSeasonUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type OnDemandSeasonUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsGroups - Information about the groups created by this user.
type OnDemandSeasonUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type OnDemandSeasonUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type OnDemandSeasonUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsPictures - Information about this user's portraits.
type OnDemandSeasonUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type OnDemandSeasonUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandSeasonUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandSeasonUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type OnDemandSeasonUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type OnDemandSeasonUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type OnDemandSeasonUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type OnDemandSeasonUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataConnections - The list of resource URIs related to the user.
type OnDemandSeasonUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums OnDemandSeasonUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances OnDemandSeasonUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block OnDemandSeasonUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories OnDemandSeasonUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels OnDemandSeasonUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed OnDemandSeasonUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders OnDemandSeasonUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers OnDemandSeasonUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following OnDemandSeasonUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups OnDemandSeasonUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes OnDemandSeasonUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels OnDemandSeasonUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures OnDemandSeasonUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios OnDemandSeasonUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels OnDemandSeasonUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers OnDemandSeasonUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared OnDemandSeasonUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos OnDemandSeasonUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos OnDemandSeasonUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater OnDemandSeasonUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type OnDemandSeasonUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// OnDemandSeasonUserMetadataInteractionsBlock - Information related to the block status of this user.
type OnDemandSeasonUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataInteractionsFollow - Information related to the followed status of this user.
type OnDemandSeasonUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// OnDemandSeasonUserMetadataInteractionsReport - Information regarding where and how to report a user.
type OnDemandSeasonUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type OnDemandSeasonUserMetadataInteractions struct {
	AddPrivacyUser *OnDemandSeasonUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block OnDemandSeasonUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow OnDemandSeasonUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report OnDemandSeasonUserMetadataInteractionsReport `json:"report"`
}

// OnDemandSeasonUserMetadata - The user's metadata.
type OnDemandSeasonUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  OnDemandSeasonUserMetadataConnections  `json:"connections"`
	Interactions OnDemandSeasonUserMetadataInteractions `json:"interactions"`
}

// OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum string

const (
	OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnumAnybody  OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnumContacts OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnumNobody   OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum string

const (
	OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnumPrivate   OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum = "private"
	OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnumPublic    OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum = "public"
	OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnumWhitelist OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// OnDemandSeasonUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type OnDemandSeasonUserPreferencesVideosPrivacyViewEnum string

const (
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumAnybody  OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "anybody"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumContacts OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "contacts"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumDisable  OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "disable"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumNobody   OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "nobody"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumPassword OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "password"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumUnlisted OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "unlisted"
	OnDemandSeasonUserPreferencesVideosPrivacyViewEnumUsers    OnDemandSeasonUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *OnDemandSeasonUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = OnDemandSeasonUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type OnDemandSeasonUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *OnDemandSeasonUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *OnDemandSeasonUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *OnDemandSeasonUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type OnDemandSeasonUserPreferencesVideos struct {
	Privacy *OnDemandSeasonUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type OnDemandSeasonUserPreferences struct {
	Videos *OnDemandSeasonUserPreferencesVideos `json:"videos,omitempty"`
}

// OnDemandSeasonUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type OnDemandSeasonUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// OnDemandSeasonUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type OnDemandSeasonUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// OnDemandSeasonUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type OnDemandSeasonUserUploadQuotaSpaceShowingEnum string

const (
	OnDemandSeasonUserUploadQuotaSpaceShowingEnumLifetime OnDemandSeasonUserUploadQuotaSpaceShowingEnum = "lifetime"
	OnDemandSeasonUserUploadQuotaSpaceShowingEnumPeriodic OnDemandSeasonUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *OnDemandSeasonUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = OnDemandSeasonUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandSeasonUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// OnDemandSeasonUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type OnDemandSeasonUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing OnDemandSeasonUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// OnDemandSeasonUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type OnDemandSeasonUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime OnDemandSeasonUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic OnDemandSeasonUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space OnDemandSeasonUserUploadQuotaSpace `json:"space"`
}

type OnDemandSeasonUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// OnDemandSeasonUser - The creator of this On Demand page.
type OnDemandSeasonUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account OnDemandSeasonUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *OnDemandSeasonUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata OnDemandSeasonUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                        `json:"pictures"`
	Preferences *OnDemandSeasonUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota OnDemandSeasonUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []OnDemandSeasonUserWebsites `json:"websites"`
}

// OnDemandSeason - The season was returned.
type OnDemandSeason struct {
	// The description for this season.
	Description string                 `json:"description"`
	Metadata    OnDemandSeasonMetadata `json:"metadata"`
	// The descriptive name of the season.
	Name string `json:"name"`
	// The position of the season relative to other seasons in the series.
	Position float64 `json:"position"`
	// The unique identifier for this On Demand season.
	ResourceKey string `json:"resource_key"`
	// The type of season.
	Type string `json:"type"`
	// The season container's relative URI.
	URI string `json:"uri"`
	// The creator of this On Demand page.
	User OnDemandSeasonUser `json:"user"`
}
