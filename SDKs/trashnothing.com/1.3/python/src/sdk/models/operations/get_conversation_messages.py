"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import conversation as shared_conversation
from ..shared import message as shared_message
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetConversationMessagesRequest:
    
    conversation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'conversation_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the conversation to return messages from."""  
    device_pixel_ratio: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device_pixel_ratio', 'style': 'form', 'explode': True }})
    r"""Client device pixel ratio used to determine thumbnail size (default 1.0)."""  
    include_conversation: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_conversation', 'style': 'form', 'explode': True }})
    r"""If set to 1, the conversation will be returned along with the messages."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page of messages to return."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of messages to return per page (must be >= 1 and <= 30)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetConversationMessages200ApplicationJSON:
    r"""The messages and page data.  The conversation data is optional and is only returned if the include_conversation parameter is set."""
    
    conversation: Optional[shared_conversation.Conversation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversation'), 'exclude': lambda f: f is None }})
    r"""A conversation between the current user and another user."""  
    messages: Optional[list[shared_message.Message]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetConversationMessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_conversation_messages_200_application_json_object: Optional[GetConversationMessages200ApplicationJSON] = dataclasses.field(default=None)
    r"""The messages and page data.  The conversation data is optional and is only returned if the include_conversation parameter is set."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    