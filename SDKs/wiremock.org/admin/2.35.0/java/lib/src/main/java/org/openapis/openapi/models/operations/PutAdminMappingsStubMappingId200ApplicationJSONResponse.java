/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PutAdminMappingsStubMappingId200ApplicationJSONResponse {
    /**
     * Extra request headers to send when proxying to another host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalProxyRequestHeaders")
    public java.util.Map<String, Object> additionalProxyRequestHeaders;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withAdditionalProxyRequestHeaders(java.util.Map<String, Object> additionalProxyRequestHeaders) {
        this.additionalProxyRequestHeaders = additionalProxyRequestHeaders;
        return this;
    }
    
    /**
     * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base64Body")
    public String base64Body;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withBase64Body(String base64Body) {
        this.base64Body = base64Body;
        return this;
    }
    
    /**
     * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodyFileName")
    public String bodyFileName;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withBodyFileName(String bodyFileName) {
        this.bodyFileName = bodyFileName;
        return this;
    }
    
    /**
     * The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delayDistribution")
    public Object delayDistribution;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withDelayDistribution(Object delayDistribution) {
        this.delayDistribution = delayDistribution;
        return this;
    }
    
    /**
     * The fault to apply (instead of a full, valid response).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fault")
    public PutAdminMappingsStubMappingId200ApplicationJSONResponseFaultEnum fault;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withFault(PutAdminMappingsStubMappingId200ApplicationJSONResponseFaultEnum fault) {
        this.fault = fault;
        return this;
    }
    
    /**
     * Number of milliseconds to delay be before sending the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixedDelayMilliseconds")
    public Long fixedDelayMilliseconds;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withFixedDelayMilliseconds(Long fixedDelayMilliseconds) {
        this.fixedDelayMilliseconds = fixedDelayMilliseconds;
        return this;
    }
    
    /**
     * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromConfiguredStub")
    public Boolean fromConfiguredStub;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withFromConfiguredStub(Boolean fromConfiguredStub) {
        this.fromConfiguredStub = fromConfiguredStub;
        return this;
    }
    
    /**
     * Map of response headers to send
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public java.util.Map<String, Object> headers;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withHeaders(java.util.Map<String, Object> headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonBody")
    public java.util.Map<String, Object> jsonBody;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withJsonBody(java.util.Map<String, Object> jsonBody) {
        this.jsonBody = jsonBody;
        return this;
    }
    
    /**
     * The base URL of the target to proxy matching requests to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxyBaseUrl")
    public String proxyBaseUrl;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withProxyBaseUrl(String proxyBaseUrl) {
        this.proxyBaseUrl = proxyBaseUrl;
        return this;
    }
    
    /**
     * The HTTP status code to be returned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Long status;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withStatus(Long status) {
        this.status = status;
        return this;
    }
    
    /**
     * The HTTP status message to be returned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * Parameters to apply to response transformers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformerParameters")
    public java.util.Map<String, Object> transformerParameters;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withTransformerParameters(java.util.Map<String, Object> transformerParameters) {
        this.transformerParameters = transformerParameters;
        return this;
    }
    
    /**
     * List of names of transformers to apply to this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformers")
    public String[] transformers;

    public PutAdminMappingsStubMappingId200ApplicationJSONResponse withTransformers(String[] transformers) {
        this.transformers = transformers;
        return this;
    }
    
    public PutAdminMappingsStubMappingId200ApplicationJSONResponse(){}
}
