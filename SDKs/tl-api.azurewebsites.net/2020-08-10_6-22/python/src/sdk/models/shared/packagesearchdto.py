"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PackageSearchDTO:
    r"""The PackageSearchDTO Class.
    Contains relevant fields of PackageSearch DTO by masking actual Package entity's fields in application.
    """
    
    active_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeStatus'), 'exclude': lambda f: f is None }})
    r"""Active Status"""  
    addon_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addonFee'), 'exclude': lambda f: f is None }})
    r"""sum of addon fees.
    incoming values for this filed will ignore.
    """  
    apply_for_all_gyms: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyForAllGyms'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate wheather package is available in all the gyms."""  
    binding_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bindingPeriod'), 'exclude': lambda f: f is None }})
    r"""Range of period a member is bound to the contract if he/she choose this package."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Package created DateTime."""  
    created_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdUser'), 'exclude': lambda f: f is None }})
    r"""Package created user."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Common descriptions about package.If there are more instructions can be stored as comma separated values."""  
    features: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values."""  
    free_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeMonths'), 'exclude': lambda f: f is None }})
    r"""No of months gym member can come without payments."""  
    member_can_remove_add_ons: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberCanRemoveAddOns'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate member can remove already added addons if he choose this package."""  
    modified_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Package last modified DateTime."""  
    modified_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedUser'), 'exclude': lambda f: f is None }})
    r"""Package last modified user."""  
    monthly_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthlyFee'), 'exclude': lambda f: f is None }})
    r"""Monthly installment fee if package is not fixed visit.
    addition of the servicefee and addon fees divided by binding period.
    """  
    number_of_visits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfVisits'), 'exclude': lambda f: f is None }})
    r"""No of visits for fixed package"""  
    package_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageId'), 'exclude': lambda f: f is None }})  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})  
    package_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageNumber'), 'exclude': lambda f: f is None }})  
    package_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageType'), 'exclude': lambda f: f is None }})
    r"""Package type can be either fixed visit or unlimited."""  
    registration_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationFee'), 'exclude': lambda f: f is None }})
    r"""Registartion fee for the package at a gym."""  
    service_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceFee'), 'exclude': lambda f: f is None }})
    r"""total Service charge of the package for entire period."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Comma separated string values in case of need of maintain some labels kind of stuff relevant to the package."""  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""total number of recode for particular search"""  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPrice'), 'exclude': lambda f: f is None }})
    r"""total price for the package including Addon fees, service fee and registration fee.
    incoming values for this field will ignore.
    """  
    