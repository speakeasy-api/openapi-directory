"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import metricupdate as shared_metricupdate
from ..shared import progresstimeseries as shared_progresstimeseries
from ..shared import stragglerinfo as shared_stragglerinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WorkItemDetailsStateEnum(str, Enum):
    r"""State of this work item."""
    EXECUTION_STATE_UNKNOWN = 'EXECUTION_STATE_UNKNOWN'
    EXECUTION_STATE_NOT_STARTED = 'EXECUTION_STATE_NOT_STARTED'
    EXECUTION_STATE_RUNNING = 'EXECUTION_STATE_RUNNING'
    EXECUTION_STATE_SUCCEEDED = 'EXECUTION_STATE_SUCCEEDED'
    EXECUTION_STATE_FAILED = 'EXECUTION_STATE_FAILED'
    EXECUTION_STATE_CANCELLED = 'EXECUTION_STATE_CANCELLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkItemDetails:
    r"""Information about an individual work item execution."""
    
    attempt_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attemptId'), 'exclude': lambda f: f is None }})
    r"""Attempt ID of this work item"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time."""  
    metrics: Optional[list[shared_metricupdate.MetricUpdate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""Metrics for this work item."""  
    progress: Optional[shared_progresstimeseries.ProgressTimeseries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress'), 'exclude': lambda f: f is None }})
    r"""Information about the progress of some component of job execution."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Start time of this work item attempt."""  
    state: Optional[WorkItemDetailsStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of this work item."""  
    straggler_info: Optional[shared_stragglerinfo.StragglerInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stragglerInfo'), 'exclude': lambda f: f is None }})
    r"""Information useful for straggler identification and debugging."""  
    task_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId'), 'exclude': lambda f: f is None }})
    r"""Name of this work item."""  
    