/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ConnectorConfiguration } from "./connectorconfiguration";
import { ConnectorDetail } from "./connectordetail";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeConnectorsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConnectorConfiguration })
  @Expose({ name: "connectorConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ConnectorConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ConnectorConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  connectorConfigurations?: Record<string, ConnectorConfiguration>;

  @SpeakeasyMetadata({ elemType: ConnectorDetail })
  @Expose({ name: "connectors" })
  @Type(() => ConnectorDetail)
  connectors?: ConnectorDetail[];

  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}
