"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import electronic_address as shared_electronic_address
from ..shared import individual_address as shared_individual_address
from ..shared import individual_name as shared_individual_name
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class IndividualGenderEnum(str, Enum):
    r"""The individual's gender."""
    FEMALE = 'Female'
    MALE = 'Male'
    NOT_APPLICABLE = 'Not Applicable'
    NOT_KNOWN = 'Not Known'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IndividualInput:
    r"""The Individual resource."""
    
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfBirth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)."""  
    place_of_birth: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeOfBirth') }})
    r"""The individual's place of birth, for example, `Tamworth`."""  
    addresses: Optional[list[shared_individual_address.IndividualAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    electronic_addresses: Optional[list[shared_electronic_address.ElectronicAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicAddresses'), 'exclude': lambda f: f is None }})  
    gender: Optional[IndividualGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""The individual's gender."""  
    names: Optional[list[shared_individual_name.IndividualNameInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Individual:
    r"""The Individual resource."""
    
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfBirth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)."""  
    place_of_birth: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeOfBirth') }})
    r"""The individual's place of birth, for example, `Tamworth`."""  
    addresses: Optional[list[shared_individual_address.IndividualAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    electronic_addresses: Optional[list[shared_electronic_address.ElectronicAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronicAddresses'), 'exclude': lambda f: f is None }})  
    from_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    gender: Optional[IndividualGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""The individual's gender."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The party's unique identifier."""  
    names: Optional[list[shared_individual_name.IndividualName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})  
    to_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    