"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudvisionv1p1beta1webdetectionwebimage as shared_googlecloudvisionv1p1beta1webdetectionwebimage
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudVisionV1p1beta1WebDetectionWebPage:
    r"""Metadata for web pages."""
    
    full_matching_images: Optional[list[shared_googlecloudvisionv1p1beta1webdetectionwebimage.GoogleCloudVisionV1p1beta1WebDetectionWebImage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullMatchingImages'), 'exclude': lambda f: f is None }})
    r"""Fully matching images on the page. Can include resized copies of the query image."""  
    page_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageTitle'), 'exclude': lambda f: f is None }})
    r"""Title for the web page, may contain HTML markups."""  
    partial_matching_images: Optional[list[shared_googlecloudvisionv1p1beta1webdetectionwebimage.GoogleCloudVisionV1p1beta1WebDetectionWebImage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partialMatchingImages'), 'exclude': lambda f: f is None }})
    r"""Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""(Deprecated) Overall relevancy score for the web page."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The result web page URL."""  
    