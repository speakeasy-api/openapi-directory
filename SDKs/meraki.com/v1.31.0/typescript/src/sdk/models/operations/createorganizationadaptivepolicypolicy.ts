/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateOrganizationAdaptivePolicyPolicyRequestBodyAcls extends SpeakeasyBase {
  /**
   * The ID of the adaptive policy ACL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The name of the adaptive policy ACL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * The destination adaptive policy group (requires one unique attribute)
 *
 * @remarks
 *
 */
export class CreateOrganizationAdaptivePolicyPolicyRequestBodyDestinationGroup extends SpeakeasyBase {
  /**
   * The ID of the destination adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The name of the destination adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The SGT of the destination adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sgt" })
  sgt?: number;
}

/**
 * The rule to apply if there is no matching ACL (default: "default")
 *
 * @remarks
 *
 */
export enum CreateOrganizationAdaptivePolicyPolicyRequestBodyLastEntryRuleEnum {
  Allow = "allow",
  Default = "default",
  Deny = "deny",
}

/**
 * The source adaptive policy group (requires one unique attribute)
 *
 * @remarks
 *
 */
export class CreateOrganizationAdaptivePolicyPolicyRequestBodySourceGroup extends SpeakeasyBase {
  /**
   * The ID of the source adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The name of the source adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The SGT of the source adaptive policy group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sgt" })
  sgt?: number;
}

export class CreateOrganizationAdaptivePolicyPolicyRequestBody extends SpeakeasyBase {
  /**
   * An ordered array of adaptive policy ACLs (each requires one unique attribute) that apply to this policy (default: [])
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    elemType: CreateOrganizationAdaptivePolicyPolicyRequestBodyAcls,
  })
  @Expose({ name: "acls" })
  @Type(() => CreateOrganizationAdaptivePolicyPolicyRequestBodyAcls)
  acls?: CreateOrganizationAdaptivePolicyPolicyRequestBodyAcls[];

  /**
   * The destination adaptive policy group (requires one unique attribute)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationGroup" })
  @Type(() => CreateOrganizationAdaptivePolicyPolicyRequestBodyDestinationGroup)
  destinationGroup: CreateOrganizationAdaptivePolicyPolicyRequestBodyDestinationGroup;

  /**
   * The rule to apply if there is no matching ACL (default: "default")
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastEntryRule" })
  lastEntryRule?: CreateOrganizationAdaptivePolicyPolicyRequestBodyLastEntryRuleEnum;

  /**
   * The source adaptive policy group (requires one unique attribute)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceGroup" })
  @Type(() => CreateOrganizationAdaptivePolicyPolicyRequestBodySourceGroup)
  sourceGroup: CreateOrganizationAdaptivePolicyPolicyRequestBodySourceGroup;
}

export class CreateOrganizationAdaptivePolicyPolicyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateOrganizationAdaptivePolicyPolicyRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

export class CreateOrganizationAdaptivePolicyPolicyResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createOrganizationAdaptivePolicyPolicy201ApplicationJSONObject?: Record<
    string,
    any
  >;
}
