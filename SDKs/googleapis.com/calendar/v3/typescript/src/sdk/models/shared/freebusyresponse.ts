/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FreeBusyCalendar } from "./freebusycalendar";
import { FreeBusyGroup } from "./freebusygroup";
import { Expose, Transform } from "class-transformer";

/**
 * Successful response
 */
export class FreeBusyResponse extends SpeakeasyBase {
  /**
   * List of free/busy information for calendars.
   */
  @SpeakeasyMetadata({ elemType: FreeBusyCalendar })
  @Expose({ name: "calendars" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FreeBusyCalendar> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FreeBusyCalendar);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  calendars?: Record<string, FreeBusyCalendar>;

  /**
   * Expansion of groups.
   */
  @SpeakeasyMetadata({ elemType: FreeBusyGroup })
  @Expose({ name: "groups" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FreeBusyGroup> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FreeBusyGroup);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  groups?: Record<string, FreeBusyGroup>;

  /**
   * Type of the resource ("calendar#freeBusy").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The end of the interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeMax" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timeMax?: Date;

  /**
   * The start of the interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeMin" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timeMin?: Date;
}
