/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://supersim.twilio.com",
	};
    /**
	 * CREATE_ESIM_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ESIM_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FLEET_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_IP_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_IP_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_NETWORK_ACCESS_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NETWORK_ACCESS_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIM_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * CREATE_SMS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SMS_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_ESIM_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ESIM_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FLEET_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_IP_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_IP_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_NETWORK_ACCESS_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_NETWORK_ACCESS_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIM_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * FETCH_SMS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SMS_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_BILLING_PERIOD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BILLING_PERIOD_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_ESIM_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ESIM_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FLEET_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_IP_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_IP_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_NETWORK_ACCESS_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_NETWORK_ACCESS_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_SETTINGS_UPDATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SETTINGS_UPDATE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIM_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_SIM_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIM_IP_ADDRESS_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_SMS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SMS_COMMAND_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * UPDATE_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FLEET_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * UPDATE_NETWORK_ACCESS_PROFILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_NETWORK_ACCESS_PROFILE_SERVERS = {
        "https://supersim.twilio.com",
    };
	
    /**
	 * UPDATE_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIM_SERVERS = {
        "https://supersim.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Order an eSIM Profile.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEsimProfileResponse createEsimProfile(org.openapis.openapi.models.operations.CreateEsimProfileRequest request) throws Exception {
        String baseUrl = CREATE_ESIM_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ESimProfiles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEsimProfileResponse res = new org.openapis.openapi.models.operations.CreateEsimProfileResponse() {{
            supersimV1EsimProfile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1EsimProfile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1EsimProfile.class);
                res.supersimV1EsimProfile = out;
            }
        }

        return res;
    }

    /**
     * Create a Fleet
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFleetResponse createFleet(org.openapis.openapi.models.operations.CreateFleetRequest request) throws Exception {
        String baseUrl = CREATE_FLEET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Fleets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFleetResponse res = new org.openapis.openapi.models.operations.CreateFleetResponse() {{
            supersimV1Fleet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Fleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Fleet.class);
                res.supersimV1Fleet = out;
            }
        }

        return res;
    }

    /**
     * Send an IP Command to a Super SIM.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateIpCommandResponse createIpCommand(org.openapis.openapi.models.operations.CreateIpCommandRequest request) throws Exception {
        String baseUrl = CREATE_IP_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/IpCommands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIpCommandResponse res = new org.openapis.openapi.models.operations.CreateIpCommandResponse() {{
            supersimV1IpCommand = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1IpCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1IpCommand.class);
                res.supersimV1IpCommand = out;
            }
        }

        return res;
    }

    /**
     * Create a new Network Access Profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkAccessProfileResponse createNetworkAccessProfile(org.openapis.openapi.models.operations.CreateNetworkAccessProfileRequest request) throws Exception {
        String baseUrl = CREATE_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/NetworkAccessProfiles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkAccessProfileResponse res = new org.openapis.openapi.models.operations.CreateNetworkAccessProfileResponse() {{
            supersimV1NetworkAccessProfile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile.class);
                res.supersimV1NetworkAccessProfile = out;
            }
        }

        return res;
    }

    /**
     * Add a Network resource to the Network Access Profile resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkAccessProfileNetworkResponse createNetworkAccessProfileNetwork(org.openapis.openapi.models.operations.CreateNetworkAccessProfileNetworkRequest request) throws Exception {
        String baseUrl = CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkAccessProfileNetworkPathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkAccessProfileNetworkResponse res = new org.openapis.openapi.models.operations.CreateNetworkAccessProfileNetworkResponse() {{
            supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork.class);
                res.supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = out;
            }
        }

        return res;
    }

    /**
     * Register a Super SIM to your Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSimResponse createSim(org.openapis.openapi.models.operations.CreateSimRequest request) throws Exception {
        String baseUrl = CREATE_SIM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Sims");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSimResponse res = new org.openapis.openapi.models.operations.CreateSimResponse() {{
            supersimV1Sim = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Sim out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Sim.class);
                res.supersimV1Sim = out;
            }
        }

        return res;
    }

    /**
     * Send SMS Command to a Sim.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSmsCommandResponse createSmsCommand(org.openapis.openapi.models.operations.CreateSmsCommandRequest request) throws Exception {
        String baseUrl = CREATE_SMS_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/SmsCommands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSmsCommandResponse res = new org.openapis.openapi.models.operations.CreateSmsCommandResponse() {{
            supersimV1SmsCommand = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1SmsCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1SmsCommand.class);
                res.supersimV1SmsCommand = out;
            }
        }

        return res;
    }

    /**
     * Remove a Network resource from the Network Access Profile resource's.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkAccessProfileNetworkResponse deleteNetworkAccessProfileNetwork(org.openapis.openapi.models.operations.DeleteNetworkAccessProfileNetworkRequest request) throws Exception {
        String baseUrl = DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkAccessProfileNetworkPathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkAccessProfileNetworkResponse res = new org.openapis.openapi.models.operations.DeleteNetworkAccessProfileNetworkResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch an eSIM Profile.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEsimProfileResponse fetchEsimProfile(org.openapis.openapi.models.operations.FetchEsimProfileRequest request) throws Exception {
        String baseUrl = FETCH_ESIM_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEsimProfilePathParams.class, baseUrl, "/v1/ESimProfiles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEsimProfileResponse res = new org.openapis.openapi.models.operations.FetchEsimProfileResponse() {{
            supersimV1EsimProfile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1EsimProfile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1EsimProfile.class);
                res.supersimV1EsimProfile = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Fleet instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFleetResponse fetchFleet(org.openapis.openapi.models.operations.FetchFleetRequest request) throws Exception {
        String baseUrl = FETCH_FLEET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFleetPathParams.class, baseUrl, "/v1/Fleets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFleetResponse res = new org.openapis.openapi.models.operations.FetchFleetResponse() {{
            supersimV1Fleet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Fleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Fleet.class);
                res.supersimV1Fleet = out;
            }
        }

        return res;
    }

    /**
     * Fetch IP Command instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchIpCommandResponse fetchIpCommand(org.openapis.openapi.models.operations.FetchIpCommandRequest request) throws Exception {
        String baseUrl = FETCH_IP_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIpCommandPathParams.class, baseUrl, "/v1/IpCommands/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIpCommandResponse res = new org.openapis.openapi.models.operations.FetchIpCommandResponse() {{
            supersimV1IpCommand = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1IpCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1IpCommand.class);
                res.supersimV1IpCommand = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Network resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchNetworkResponse fetchNetwork(org.openapis.openapi.models.operations.FetchNetworkRequest request) throws Exception {
        String baseUrl = FETCH_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchNetworkPathParams.class, baseUrl, "/v1/Networks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchNetworkResponse res = new org.openapis.openapi.models.operations.FetchNetworkResponse() {{
            supersimV1Network = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Network out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Network.class);
                res.supersimV1Network = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Network Access Profile instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchNetworkAccessProfileResponse fetchNetworkAccessProfile(org.openapis.openapi.models.operations.FetchNetworkAccessProfileRequest request) throws Exception {
        String baseUrl = FETCH_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchNetworkAccessProfilePathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchNetworkAccessProfileResponse res = new org.openapis.openapi.models.operations.FetchNetworkAccessProfileResponse() {{
            supersimV1NetworkAccessProfile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile.class);
                res.supersimV1NetworkAccessProfile = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Network Access Profile resource's Network resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchNetworkAccessProfileNetworkResponse fetchNetworkAccessProfileNetwork(org.openapis.openapi.models.operations.FetchNetworkAccessProfileNetworkRequest request) throws Exception {
        String baseUrl = FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchNetworkAccessProfileNetworkPathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchNetworkAccessProfileNetworkResponse res = new org.openapis.openapi.models.operations.FetchNetworkAccessProfileNetworkResponse() {{
            supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork.class);
                res.supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Super SIM instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSimResponse fetchSim(org.openapis.openapi.models.operations.FetchSimRequest request) throws Exception {
        String baseUrl = FETCH_SIM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSimPathParams.class, baseUrl, "/v1/Sims/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSimResponse res = new org.openapis.openapi.models.operations.FetchSimResponse() {{
            supersimV1Sim = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Sim out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Sim.class);
                res.supersimV1Sim = out;
            }
        }

        return res;
    }

    /**
     * Fetch SMS Command instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSmsCommandResponse fetchSmsCommand(org.openapis.openapi.models.operations.FetchSmsCommandRequest request) throws Exception {
        String baseUrl = FETCH_SMS_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSmsCommandPathParams.class, baseUrl, "/v1/SmsCommands/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSmsCommandResponse res = new org.openapis.openapi.models.operations.FetchSmsCommandResponse() {{
            supersimV1SmsCommand = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1SmsCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1SmsCommand.class);
                res.supersimV1SmsCommand = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Billing Periods for a Super SIM.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBillingPeriodResponse listBillingPeriod(org.openapis.openapi.models.operations.ListBillingPeriodRequest request) throws Exception {
        String baseUrl = LIST_BILLING_PERIOD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBillingPeriodPathParams.class, baseUrl, "/v1/Sims/{SimSid}/BillingPeriods", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBillingPeriodQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBillingPeriodResponse res = new org.openapis.openapi.models.operations.ListBillingPeriodResponse() {{
            listBillingPeriodResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBillingPeriodListBillingPeriodResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBillingPeriodListBillingPeriodResponse.class);
                res.listBillingPeriodResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of eSIM Profiles.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEsimProfileResponse listEsimProfile(org.openapis.openapi.models.operations.ListEsimProfileRequest request) throws Exception {
        String baseUrl = LIST_ESIM_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ESimProfiles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEsimProfileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEsimProfileResponse res = new org.openapis.openapi.models.operations.ListEsimProfileResponse() {{
            listEsimProfileResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEsimProfileListEsimProfileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEsimProfileListEsimProfileResponse.class);
                res.listEsimProfileResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Fleets from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFleetResponse listFleet(org.openapis.openapi.models.operations.ListFleetRequest request) throws Exception {
        String baseUrl = LIST_FLEET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Fleets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFleetQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFleetResponse res = new org.openapis.openapi.models.operations.ListFleetResponse() {{
            listFleetResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFleetListFleetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFleetListFleetResponse.class);
                res.listFleetResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of IP Commands from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListIpCommandResponse listIpCommand(org.openapis.openapi.models.operations.ListIpCommandRequest request) throws Exception {
        String baseUrl = LIST_IP_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/IpCommands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIpCommandQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIpCommandResponse res = new org.openapis.openapi.models.operations.ListIpCommandResponse() {{
            listIpCommandResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIpCommandListIpCommandResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIpCommandListIpCommandResponse.class);
                res.listIpCommandResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Network resources.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListNetworkResponse listNetwork(org.openapis.openapi.models.operations.ListNetworkRequest request) throws Exception {
        String baseUrl = LIST_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Networks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListNetworkQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListNetworkResponse res = new org.openapis.openapi.models.operations.ListNetworkResponse() {{
            listNetworkResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListNetworkListNetworkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListNetworkListNetworkResponse.class);
                res.listNetworkResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Network Access Profiles from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListNetworkAccessProfileResponse listNetworkAccessProfile(org.openapis.openapi.models.operations.ListNetworkAccessProfileRequest request) throws Exception {
        String baseUrl = LIST_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/NetworkAccessProfiles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListNetworkAccessProfileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListNetworkAccessProfileResponse res = new org.openapis.openapi.models.operations.ListNetworkAccessProfileResponse() {{
            listNetworkAccessProfileResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListNetworkAccessProfileListNetworkAccessProfileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListNetworkAccessProfileListNetworkAccessProfileResponse.class);
                res.listNetworkAccessProfileResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Network Access Profile resource's Network resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkResponse listNetworkAccessProfileNetwork(org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkRequest request) throws Exception {
        String baseUrl = LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkPathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkResponse res = new org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkResponse() {{
            listNetworkAccessProfileNetworkResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkListNetworkAccessProfileNetworkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListNetworkAccessProfileNetworkListNetworkAccessProfileNetworkResponse.class);
                res.listNetworkAccessProfileNetworkResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Settings Updates.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSettingsUpdateResponse listSettingsUpdate(org.openapis.openapi.models.operations.ListSettingsUpdateRequest request) throws Exception {
        String baseUrl = LIST_SETTINGS_UPDATE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/SettingsUpdates");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSettingsUpdateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSettingsUpdateResponse res = new org.openapis.openapi.models.operations.ListSettingsUpdateResponse() {{
            listSettingsUpdateResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSettingsUpdateListSettingsUpdateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSettingsUpdateListSettingsUpdateResponse.class);
                res.listSettingsUpdateResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Super SIMs from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSimResponse listSim(org.openapis.openapi.models.operations.ListSimRequest request) throws Exception {
        String baseUrl = LIST_SIM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Sims");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSimQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSimResponse res = new org.openapis.openapi.models.operations.ListSimResponse() {{
            listSimResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSimListSimResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSimListSimResponse.class);
                res.listSimResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of IP Addresses for the given Super SIM.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSimIpAddressResponse listSimIpAddress(org.openapis.openapi.models.operations.ListSimIpAddressRequest request) throws Exception {
        String baseUrl = LIST_SIM_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSimIpAddressPathParams.class, baseUrl, "/v1/Sims/{SimSid}/IpAddresses", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSimIpAddressQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSimIpAddressResponse res = new org.openapis.openapi.models.operations.ListSimIpAddressResponse() {{
            listSimIpAddressResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSimIpAddressListSimIpAddressResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSimIpAddressListSimIpAddressResponse.class);
                res.listSimIpAddressResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of SMS Commands from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSmsCommandResponse listSmsCommand(org.openapis.openapi.models.operations.ListSmsCommandRequest request) throws Exception {
        String baseUrl = LIST_SMS_COMMAND_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/SmsCommands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSmsCommandQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSmsCommandResponse res = new org.openapis.openapi.models.operations.ListSmsCommandResponse() {{
            listSmsCommandResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSmsCommandListSmsCommandResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSmsCommandListSmsCommandResponse.class);
                res.listSmsCommandResponse = out;
            }
        }

        return res;
    }

    /**
     * List UsageRecords
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUsageRecordResponse listUsageRecord(org.openapis.openapi.models.operations.ListUsageRecordRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/UsageRecords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordResponse res = new org.openapis.openapi.models.operations.ListUsageRecordResponse() {{
            listUsageRecordResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordListUsageRecordResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordListUsageRecordResponse.class);
                res.listUsageRecordResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFleetResponse updateFleet(org.openapis.openapi.models.operations.UpdateFleetRequest request) throws Exception {
        String baseUrl = UPDATE_FLEET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFleetPathParams.class, baseUrl, "/v1/Fleets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFleetResponse res = new org.openapis.openapi.models.operations.UpdateFleetResponse() {{
            supersimV1Fleet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Fleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Fleet.class);
                res.supersimV1Fleet = out;
            }
        }

        return res;
    }

    /**
     * Updates the given properties of a Network Access Profile in your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkAccessProfileResponse updateNetworkAccessProfile(org.openapis.openapi.models.operations.UpdateNetworkAccessProfileRequest request) throws Exception {
        String baseUrl = UPDATE_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkAccessProfilePathParams.class, baseUrl, "/v1/NetworkAccessProfiles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkAccessProfileResponse res = new org.openapis.openapi.models.operations.UpdateNetworkAccessProfileResponse() {{
            supersimV1NetworkAccessProfile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1NetworkAccessProfile.class);
                res.supersimV1NetworkAccessProfile = out;
            }
        }

        return res;
    }

    /**
     * Updates the given properties of a Super SIM instance from your account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSimResponse updateSim(org.openapis.openapi.models.operations.UpdateSimRequest request) throws Exception {
        String baseUrl = UPDATE_SIM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSimPathParams.class, baseUrl, "/v1/Sims/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSimResponse res = new org.openapis.openapi.models.operations.UpdateSimResponse() {{
            supersimV1Sim = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SupersimV1Sim out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SupersimV1Sim.class);
                res.supersimV1Sim = out;
            }
        }

        return res;
    }
}