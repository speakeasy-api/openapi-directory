// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ExecuteSellTrasactionSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

type ExecuteSellTrasactionHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// ExecuteSellTrasactionSellTransactionRequestInstructionBuySell - Definition of an single instruction(buy|sell)
type ExecuteSellTrasactionSellTransactionRequestInstructionBuySell struct {
	// (Optional) Order identifier assigned by the wealth manager
	ClientOrderID       *string `json:"client_order_id,omitempty"`
	InvestmentProductID string  `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

// ExecuteSellTrasactionSellTransactionRequest - Definition of an sell transaction request
type ExecuteSellTrasactionSellTransactionRequest struct {
	PotID string `json:"pot_id"`
	// Unique request id to ensure idempotency. (ex: UUID)
	RequestID        string                                                          `json:"request_id"`
	SellInstructions []ExecuteSellTrasactionSellTransactionRequestInstructionBuySell `json:"sell_instructions"`
}

type ExecuteSellTrasactionRequest struct {
	Headers  ExecuteSellTrasactionHeaders
	Request  *ExecuteSellTrasactionSellTransactionRequest `request:"mediaType=application/json"`
	Security ExecuteSellTrasactionSecurity
}

// ExecuteSellTrasaction500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type ExecuteSellTrasaction500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type ExecuteSellTrasaction429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction409ApplicationJSONStatusEnum - Current status of the original request
type ExecuteSellTrasaction409ApplicationJSONStatusEnum string

const (
	ExecuteSellTrasaction409ApplicationJSONStatusEnumProcessing ExecuteSellTrasaction409ApplicationJSONStatusEnum = "PROCESSING"
	ExecuteSellTrasaction409ApplicationJSONStatusEnumComplete   ExecuteSellTrasaction409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e *ExecuteSellTrasaction409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = ExecuteSellTrasaction409ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction409ApplicationJSONStatusEnum: %s", s)
	}
}

// ExecuteSellTrasaction409ApplicationJSON - Duplicate request
type ExecuteSellTrasaction409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status ExecuteSellTrasaction409ApplicationJSONStatusEnum `json:"status"`
}

// ExecuteSellTrasaction404ApplicationJSON - The specified resource was not found
type ExecuteSellTrasaction404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type ExecuteSellTrasaction403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction401ApplicationJSON - You do not have permissions to access this resource.
type ExecuteSellTrasaction401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type ExecuteSellTrasaction400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSellTrasaction200ApplicationJSONStatusEnum - status of the transaction request
// . `submitted`: All requested transactions submitted
// . `partially_submitted`: Some (but not all) requested transactions submitted
type ExecuteSellTrasaction200ApplicationJSONStatusEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONStatusEnumSubmitted          ExecuteSellTrasaction200ApplicationJSONStatusEnum = "submitted"
	ExecuteSellTrasaction200ApplicationJSONStatusEnumPartiallySubmitted ExecuteSellTrasaction200ApplicationJSONStatusEnum = "partially_submitted"
)

func (e *ExecuteSellTrasaction200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "submitted":
		fallthrough
	case "partially_submitted":
		*e = ExecuteSellTrasaction200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONStatusEnum: %s", s)
	}
}

// ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum - in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
type ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnumIn  ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum = "in"
	ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnumOut ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum = "out"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum: %s", s)
	}
}

// ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum - Origin of the transaction
type ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnumAPI        ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum = "api"
	ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnumAdminUI    ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum = "admin_ui"
	ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnumFileUpload ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum = "file_upload"
	ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnumSystem     ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum = "system"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api":
		fallthrough
	case "admin_ui":
		fallthrough
	case "file_upload":
		fallthrough
	case "system":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum: %s", s)
	}
}

type ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumFees             ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Fees"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumBuy              ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Buy"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumSell             ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Sell"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTransfers        ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Transfers"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumIncome           ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Income"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTax              ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Tax"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumContribution     ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Contribution"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumWithdrawal       ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Withdrawal"
	ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumCorporateActions ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Corporate actions"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Fees":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Transfers":
		fallthrough
	case "Income":
		fallthrough
	case "Tax":
		fallthrough
	case "Contribution":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Corporate actions":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum: %s", s)
	}
}

type ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnumSubmitted ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum = "submitted"
	ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnumFailed    ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum = "failed"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "submitted":
		fallthrough
	case "failed":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum: %s", s)
	}
}

// ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum - Sub transaction type
type ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDividendReinvestment                     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividend Reinvestment"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInterestReinvestment                     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest Reinvestment"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumReinvestment                             ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reinvestment"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumBuy                                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSellCancel                               ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell Cancel"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchBuy                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Buy"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSell                                     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumBuyCancel                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy Cancel"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchSell                               ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Sell"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumLumpSum                                  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Lump sum"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumEmployerContribution                     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employer contribution"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumEmployeeContribution                     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employee contribution"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRegularContribution                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Regular contribution"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPaymentInForFees                         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Payment in for fees"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashIn                   ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash In"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockIn                  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock In"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashOut                  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash Out"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockOut                 ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock Out"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferIn                          ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer In"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferIn                           ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer In"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferOut                         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer Out"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferOut                          ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer Out"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCommission                               ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumAncillaryFee                             ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Ancillary fee"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumManagementFee                            ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Management fee"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeCredit                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee credit"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeRebate                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee rebate"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumAdvisorOngoingFee                        ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Advisor ongoing fee"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumOneOffAdvisorFee                         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "One-off advisor fee"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCommissionRebate                         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission rebate"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCustodyFees                              ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Custody fees"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDividends                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividends"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDistributions                            ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Distributions"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInterest                                 ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumOtherIncome                              ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Other income"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesCreate     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Create"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesExtinguish ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Extinguish"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExpiry                             ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Expiry"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExercise                           ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Exercise"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantExercise                          ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Exercise"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityReceiveCapital        ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Receive Capital"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityExtinguishBondUnits   ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Extinguish Bond Units"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerCreateNewFundUnits             ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Create New Fund Units"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerExtinguishOldFundUnits         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Extinguish Old Fund Units"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsIssue                              ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Issue"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockDividend                            ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Dividend"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSpinOff                                  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Spin-Off"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantIssue                             ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Issue"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockSplit                               ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Split"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeTax                                   ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee Tax"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTaxRelief                                ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Tax Relief"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumGst                                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "GST"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumHst                                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "HST"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPst                                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "PST"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumQst                                      ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "QST"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWithholdingTax                           ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withholding Tax"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumNonResidentTax                           ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Non-resident Tax"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPenalty                                  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Penalty"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumContributionRefund                       ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Contribution Refund"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumIncomeWithdrawal                         ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Income Withdrawal"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumReversal                                 ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reversal"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWithdrawal                               ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withdrawal"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumMiscellaneousCorporateActionExercise     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Miscellaneous Corporate Action Exercise"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Dividend Reinvestment":
		fallthrough
	case "Interest Reinvestment":
		fallthrough
	case "Reinvestment":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell Cancel":
		fallthrough
	case "Switch Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Buy Cancel":
		fallthrough
	case "Switch Sell":
		fallthrough
	case "Lump sum":
		fallthrough
	case "Employer contribution":
		fallthrough
	case "Employee contribution":
		fallthrough
	case "Regular contribution":
		fallthrough
	case "Payment in for fees":
		fallthrough
	case "Internal Transfer - Cash In":
		fallthrough
	case "Internal Transfer - Stock In":
		fallthrough
	case "Internal Transfer - Cash Out":
		fallthrough
	case "Internal Transfer - Stock Out":
		fallthrough
	case "Stock Transfer In":
		fallthrough
	case "Cash Transfer In":
		fallthrough
	case "Stock Transfer Out":
		fallthrough
	case "Cash Transfer Out":
		fallthrough
	case "Commission":
		fallthrough
	case "Ancillary fee":
		fallthrough
	case "Management fee":
		fallthrough
	case "Fee credit":
		fallthrough
	case "Fee rebate":
		fallthrough
	case "Advisor ongoing fee":
		fallthrough
	case "One-off advisor fee":
		fallthrough
	case "Commission rebate":
		fallthrough
	case "Custody fees":
		fallthrough
	case "Dividends":
		fallthrough
	case "Distributions":
		fallthrough
	case "Interest":
		fallthrough
	case "Other income":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Create":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Extinguish":
		fallthrough
	case "Rights Expiry":
		fallthrough
	case "Rights Exercise":
		fallthrough
	case "Warrant Exercise":
		fallthrough
	case "Fixed Income Maturity - Receive Capital":
		fallthrough
	case "Fixed Income Maturity - Extinguish Bond Units":
		fallthrough
	case "Fund Merger - Create New Fund Units":
		fallthrough
	case "Fund Merger - Extinguish Old Fund Units":
		fallthrough
	case "Rights Issue":
		fallthrough
	case "Stock Dividend":
		fallthrough
	case "Spin-Off":
		fallthrough
	case "Warrant Issue":
		fallthrough
	case "Stock Split":
		fallthrough
	case "Fee Tax":
		fallthrough
	case "Tax Relief":
		fallthrough
	case "GST":
		fallthrough
	case "HST":
		fallthrough
	case "PST":
		fallthrough
	case "QST":
		fallthrough
	case "Withholding Tax":
		fallthrough
	case "Non-resident Tax":
		fallthrough
	case "Penalty":
		fallthrough
	case "Contribution Refund":
		fallthrough
	case "Income Withdrawal":
		fallthrough
	case "Reversal":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Miscellaneous Corporate Action Exercise":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum: %s", s)
	}
}

// ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum - Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
type ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumInstructed ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "instructed"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumConfirmed  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "confirmed"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumPriced     ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "priced"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumRejected   ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "rejected"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumSettled    ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "settled"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumCancelled  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "cancelled"
	ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnumScheduled  ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = "scheduled"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instructed":
		fallthrough
	case "confirmed":
		fallthrough
	case "priced":
		fallthrough
	case "rejected":
		fallthrough
	case "settled":
		fallthrough
	case "cancelled":
		fallthrough
	case "scheduled":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum: %s", s)
	}
}

// ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum - State of the transaction
type ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum string

const (
	ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnumPending  ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum = "pending"
	ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnumArchived ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum = "archived"
)

func (e *ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "archived":
		*e = ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum: %s", s)
	}
}

type ExecuteSellTrasaction200ApplicationJSONTransactions struct {
	// Additional external details of the transaction, This may be populated in reconciliation process
	AdditionalExternalDetails map[string]interface{} `json:"additional_external_details,omitempty"`
	// (optional) Order identifier assigned by the wealth manager
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Will indicate the date where this record was created
	CreatedAt string `json:"created_at"`
	// Currency of the transaction
	Currency string `json:"currency"`
	// in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
	Direction ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum `json:"direction"`
	// Executed price of the buy, sell transaction
	ExecutionPrice *string `json:"execution_price,omitempty"`
	// External Transaction Reference
	ExternalTransactionReference *string `json:"external_transaction_reference,omitempty"`
	// Investment product id of the transaction. Will be 'cash' for cash transaction
	InvestmentProductID string `json:"investment_product_id"`
	// Origin of the transaction
	Origin ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum `json:"origin"`
	// parent_transaction_id
	ParentTransactionID    *string                                                                       `json:"parent_transaction_id,omitempty"`
	PrimaryTransactionType ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum `json:"primary_transaction_type"`
	// Intended settlement date of the pending transaction or actual the settled day of the transaction
	SettlementDate *string                                                       `json:"settlement_date,omitempty"`
	Status         ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum `json:"status"`
	// Sub transaction type
	SubTransactionType ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum `json:"sub_transaction_type"`
	// Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
	SubType ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum `json:"sub_type"`
	// Date the transaction was effected
	TradeDate *string `json:"trade_date,omitempty"`
	// transaction_id of successful transaction
	TransactionID string `json:"transaction_id"`
	// (optional) quantity of the investment product, required for unit based orders
	TransactionQuantity *string `json:"transaction_quantity,omitempty"`
	// (optional) value of the investment product, required for value based orders
	TransactionValue *string `json:"transaction_value,omitempty"`
	// State of the transaction
	Type ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum `json:"type"`
	// Will indicate the date where this record was last changed
	UpdatedAt string `json:"updated_at"`
}

// ExecuteSellTrasaction200ApplicationJSON - success
type ExecuteSellTrasaction200ApplicationJSON struct {
	// error message if status is `failed`
	Message *string `json:"message,omitempty"`
	PotID   string  `json:"pot_id"`
	// status of the transaction request
	// . `submitted`: All requested transactions submitted
	// . `partially_submitted`: Some (but not all) requested transactions submitted
	//
	Status       ExecuteSellTrasaction200ApplicationJSONStatusEnum     `json:"status"`
	Transactions []ExecuteSellTrasaction200ApplicationJSONTransactions `json:"transactions,omitempty"`
}

type ExecuteSellTrasactionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	ExecuteSellTrasaction200ApplicationJSONObject *ExecuteSellTrasaction200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	ExecuteSellTrasaction400ApplicationJSONObject *ExecuteSellTrasaction400ApplicationJSON
	// You do not have permissions to access this resource.
	ExecuteSellTrasaction401ApplicationJSONObject *ExecuteSellTrasaction401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	ExecuteSellTrasaction403ApplicationJSONObject *ExecuteSellTrasaction403ApplicationJSON
	// The specified resource was not found
	ExecuteSellTrasaction404ApplicationJSONObject *ExecuteSellTrasaction404ApplicationJSON
	// Duplicate request
	ExecuteSellTrasaction409ApplicationJSONObject *ExecuteSellTrasaction409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	ExecuteSellTrasaction429ApplicationJSONObject *ExecuteSellTrasaction429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	ExecuteSellTrasaction500ApplicationJSONObject *ExecuteSellTrasaction500ApplicationJSON
}
