"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Spots:
    r"""The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.
    It is possible to configure Smartspots through this resource.
    
    Smartspots also have their own locally stored sets, referred to as \"spotsets\".
    Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.
    Created or updated spotsets are automatically synced between Smartspot and server.
    https://intellifi.zendesk.com/hc/en-us/categories/360000685434
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_spot_set(self, request: operations.AddSpotSetRequest) -> operations.AddSpotSetResponse:
        r"""Create spotset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddSpotSetRequest, base_url, '/spots/{id}/sets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddSpotSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_spot_by_id(self, request: operations.GetSpotByIDRequest) -> operations.GetSpotByIDResponse:
        r"""Get spot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotByIDRequest, base_url, '/spots/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.spot_get = out

        return res

    def get_spot_set_by_id(self, request: operations.GetSpotSetByIDRequest) -> operations.GetSpotSetByIDResponse:
        r"""Get spotset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotSetByIDRequest, base_url, '/spots/{id}/sets/{setId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotSetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.spot_set = out

        return res

    def get_spot_sets_by_id(self, request: operations.GetSpotSetsByIDRequest) -> operations.GetSpotSetsByIDResponse:
        r"""Get spotsets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotSetsByIDRequest, base_url, '/spots/{id}/sets', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotSetsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.spot_set = out

        return res

    def get_spots(self, request: operations.GetSpotsRequest) -> operations.GetSpotsResponse:
        r"""Get all spots"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spots'
        
        query_params = utils.get_query_params(operations.GetSpotsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpots200ApplicationJSON])
                res.get_spots_200_application_json_object = out

        return res

    def update_spot(self, request: operations.UpdateSpotRequest) -> operations.UpdateSpotResponse:
        r"""Update existing spot"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSpotRequest, base_url, '/spots/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spot_update_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSpotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def update_spot_set(self, request: operations.UpdateSpotSetRequest) -> operations.UpdateSpotSetResponse:
        r"""Update existing spotset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSpotSetRequest, base_url, '/spots/{id}/sets/{setId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spot_set_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSpotSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    