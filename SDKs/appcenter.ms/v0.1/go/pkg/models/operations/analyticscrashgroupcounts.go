// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type AnalyticsCrashGroupCountsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AnalyticsCrashGroupCountsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the crash group.
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsCrashGroupCountsQueryParams struct {
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Start date time in data in ISO 8601 date time format.
	Start   time.Time `queryParam:"style=form,explode=true,name=start"`
	Version string    `queryParam:"style=form,explode=true,name=version"`
}

type AnalyticsCrashGroupCountsRequest struct {
	PathParams  AnalyticsCrashGroupCountsPathParams
	QueryParams AnalyticsCrashGroupCountsQueryParams
	Security    AnalyticsCrashGroupCountsSecurity
}

// AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum = "400"
	AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum = "403"
	AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum = "500"
)

func (e *AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "403":
		fallthrough
	case "500":
		*e = AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsCrashGroupCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashGroupCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashGroupCountsDefaultApplicationJSON - Error
type AnalyticsCrashGroupCountsDefaultApplicationJSON struct {
	Error *AnalyticsCrashGroupCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashGroupCounts200ApplicationJSONCrashes struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsCrashGroupCounts200ApplicationJSON - Count of crashes by day in the time range and total crashes over the time range.
type AnalyticsCrashGroupCounts200ApplicationJSON struct {
	// Total crash count.
	Count *int64 `json:"count,omitempty"`
	// The total crash count for day.
	Crashes []AnalyticsCrashGroupCounts200ApplicationJSONCrashes `json:"crashes,omitempty"`
}

type AnalyticsCrashGroupCountsResponse struct {
	// Count of crashes by day in the time range and total crashes over the time range.
	AnalyticsCrashGroupCounts200ApplicationJSONObject *AnalyticsCrashGroupCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashGroupCountsDefaultApplicationJSONObject *AnalyticsCrashGroupCountsDefaultApplicationJSON
	ContentType                                           string
	StatusCode                                            int
	RawResponse                                           *http.Response
}
