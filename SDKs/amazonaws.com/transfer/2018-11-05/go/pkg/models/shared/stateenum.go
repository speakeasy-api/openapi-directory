// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StateEnum - <p>Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: <code>OFFLINE</code>, <code>ONLINE</code>, <code>STARTING</code>, <code>STOPPING</code>, <code>START_FAILED</code>, and <code>STOP_FAILED</code>.</p> <p> <code>OFFLINE</code> indicates that the server exists, but that it is not available for file operations. <code>ONLINE</code> indicates that the server is available to perform file operations. <code>STARTING</code> indicates that the server's was instantiated, but the server is not yet available to perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both <code>START_FAILED</code> and <code>STOP_FAILED</code> are error conditions.</p>
type StateEnum string

const (
	StateEnumOffline     StateEnum = "OFFLINE"
	StateEnumOnline      StateEnum = "ONLINE"
	StateEnumStarting    StateEnum = "STARTING"
	StateEnumStopping    StateEnum = "STOPPING"
	StateEnumStartFailed StateEnum = "START_FAILED"
	StateEnumStopFailed  StateEnum = "STOP_FAILED"
)

func (e *StateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OFFLINE":
		fallthrough
	case "ONLINE":
		fallthrough
	case "STARTING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "START_FAILED":
		fallthrough
	case "STOP_FAILED":
		*e = StateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StateEnum: %s", s)
	}
}
