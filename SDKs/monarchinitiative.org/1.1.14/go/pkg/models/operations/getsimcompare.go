// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSimCompareMetricEnum - Metric for computing similarity
type GetSimCompareMetricEnum string

const (
	GetSimCompareMetricEnumPhenodigm       GetSimCompareMetricEnum = "phenodigm"
	GetSimCompareMetricEnumJaccard         GetSimCompareMetricEnum = "jaccard"
	GetSimCompareMetricEnumSimGic          GetSimCompareMetricEnum = "simGIC"
	GetSimCompareMetricEnumResnik          GetSimCompareMetricEnum = "resnik"
	GetSimCompareMetricEnumSymmetricResnik GetSimCompareMetricEnum = "symmetric_resnik"
)

func (e *GetSimCompareMetricEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phenodigm":
		fallthrough
	case "jaccard":
		fallthrough
	case "simGIC":
		fallthrough
	case "resnik":
		fallthrough
	case "symmetric_resnik":
		*e = GetSimCompareMetricEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSimCompareMetricEnum: %s", s)
	}
}

type GetSimCompareRequest struct {
	// set to true if *all* input ids are phenotypic features, else set to false
	IsFeatureSet *bool `queryParam:"style=form,explode=true,name=is_feature_set"`
	// Metric for computing similarity
	Metric *GetSimCompareMetricEnum `queryParam:"style=form,explode=true,name=metric"`
	// A phenotype or identifier that is composed of phenotypes (eg disease, gene)
	QueryID []string `queryParam:"style=form,explode=true,name=query_id"`
	// A phenotype or identifier that is composed of phenotypes (eg disease, gene)
	RefID []string `queryParam:"style=form,explode=true,name=ref_id"`
}

type GetSimCompareResponse struct {
	ContentType string
	// Success
	SimResult   *shared.SimResult
	StatusCode  int
	RawResponse *http.Response
}
