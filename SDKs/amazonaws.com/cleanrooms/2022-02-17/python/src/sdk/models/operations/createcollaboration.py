"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createcollaborationoutput as shared_createcollaborationoutput
from ..shared import memberability_enum as shared_memberability_enum
from ..shared import memberspecification as shared_memberspecification
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollaborationRequestBodyDataEncryptionMetadata:
    r"""The settings for client-side encryption for cryptographic computing."""
    
    allow_cleartext: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowCleartext'), 'exclude': lambda f: f is None }})  
    allow_duplicates: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowDuplicates'), 'exclude': lambda f: f is None }})  
    allow_joins_on_columns_with_different_names: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowJoinsOnColumnsWithDifferentNames'), 'exclude': lambda f: f is None }})  
    preserve_nulls: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preserveNulls'), 'exclude': lambda f: f is None }})  
    
class CreateCollaborationRequestBodyQueryLogStatusEnum(str, Enum):
    r"""An indicator as to whether query logging has been enabled or disabled for the collaboration."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollaborationRequestBody:
    
    creator_display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorDisplayName') }})
    r"""The display name of the collaboration creator."""  
    creator_member_abilities: list[shared_memberability_enum.MemberAbilityEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorMemberAbilities') }})
    r"""The abilities granted to the collaboration creator."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the collaboration provided by the collaboration owner."""  
    members: list[shared_memberspecification.MemberSpecification] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members') }})
    r"""A list of initial members, not including the creator. This list is immutable."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The display name for a collaboration."""  
    query_log_status: CreateCollaborationRequestBodyQueryLogStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryLogStatus') }})
    r"""An indicator as to whether query logging has been enabled or disabled for the collaboration."""  
    data_encryption_metadata: Optional[CreateCollaborationRequestBodyDataEncryptionMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataEncryptionMetadata'), 'exclude': lambda f: f is None }})
    r"""The settings for client-side encryption for cryptographic computing."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Map of tags assigned to a resource"""  
    

@dataclasses.dataclass
class CreateCollaborationRequest:
    
    request_body: CreateCollaborationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateCollaborationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    create_collaboration_output: Optional[shared_createcollaborationoutput.CreateCollaborationOutput] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    