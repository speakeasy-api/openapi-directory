"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelSettings:
    r"""Branding properties for the channel view."""
    
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""The country of the channel."""  
    default_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLanguage'), 'exclude': lambda f: f is None }})  
    default_tab: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTab'), 'exclude': lambda f: f is None }})
    r"""Which content tab users should see when viewing the channel."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Specifies the channel description."""  
    featured_channels_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featuredChannelsTitle'), 'exclude': lambda f: f is None }})
    r"""Title for the featured channels tab."""  
    featured_channels_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featuredChannelsUrls'), 'exclude': lambda f: f is None }})
    r"""The list of featured channels."""  
    keywords: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywords'), 'exclude': lambda f: f is None }})
    r"""Lists keywords associated with the channel, comma-separated."""  
    moderate_comments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderateComments'), 'exclude': lambda f: f is None }})
    r"""Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible."""  
    profile_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileColor'), 'exclude': lambda f: f is None }})
    r"""A prominent color that can be rendered on this channel page."""  
    show_browse_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showBrowseView'), 'exclude': lambda f: f is None }})
    r"""Whether the tab to browse the videos should be displayed."""  
    show_related_channels: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showRelatedChannels'), 'exclude': lambda f: f is None }})
    r"""Whether related channels should be proposed."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Specifies the channel title."""  
    tracking_analytics_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingAnalyticsAccountId'), 'exclude': lambda f: f is None }})
    r"""The ID for a Google Analytics account to track and measure traffic to the channels."""  
    unsubscribed_trailer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unsubscribedTrailer'), 'exclude': lambda f: f is None }})
    r"""The trailer of the channel, for users that are not subscribers."""  
    