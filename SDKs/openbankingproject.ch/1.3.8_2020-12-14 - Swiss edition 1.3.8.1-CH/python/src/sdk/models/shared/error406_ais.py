"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hreftype as shared_hreftype
from ..shared import messagecode406_ais_enum as shared_messagecode406_ais_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Error406AISAdditionalErrors:
    r"""This is a data element to support the declaration of additional errors in the context of [RFC7807]."""
    
    code: shared_messagecode406_ais_enum.MessageCode406AISEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Message codes defined for AIS for HTTP Error code 406 (NOT ACCEPTABLE)."""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Detailed human readable text specific to this instance of the error.
    XPath might be used to point to the issue generating the error in addition.
    Remark for Future: In future, a dedicated field might be introduced for the XPath.
    """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short human readable description of error type.
    Could be in local language.
    To be provided by ASPSPs.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Error406AIS:
    r"""Standardised definition of reporting error information according to [RFC7807]
    in case of a HTTP error code 406 for AIS.
    """
    
    code: shared_messagecode406_ais_enum.MessageCode406AISEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Message codes defined for AIS for HTTP Error code 406 (NOT ACCEPTABLE)."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A URI reference [RFC3986] that identifies the problem type.
    Remark For Future: These URI will be provided by NextGen in future.
    """  
    links: Optional[dict[str, shared_hreftype.HrefType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})
    r"""A _link object with all availabel link types."""  
    additional_errors: Optional[list[Error406AISAdditionalErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalErrors'), 'exclude': lambda f: f is None }})
    r"""Array of Error Information Blocks.
    
    Might be used if more than one error is to be communicated
    """  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Detailed human readable text specific to this instance of the error.
    XPath might be used to point to the issue generating the error in addition.
    Remark for Future: In future, a dedicated field might be introduced for the XPath.
    """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short human readable description of error type.
    Could be in local language.
    To be provided by ASPSPs.
    """  
    