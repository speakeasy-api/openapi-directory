/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetVolumesSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Name = "name",
  NameAsc = "name:asc",
  NameDesc = "name:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

/**
 * Can be used multiple times. The response will only contain Volumes matching the status.
 */
export enum GetVolumesStatusEnum {
  Available = "available",
  Creating = "creating",
}

export class GetVolumesRequest extends SpeakeasyBase {
  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetVolumesSortEnum;

  /**
   * Can be used multiple times. The response will only contain Volumes matching the status.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: GetVolumesStatusEnum;
}

export class GetVolumes200ApplicationJSONMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetVolumes200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetVolumes200ApplicationJSONMetaPagination)
  pagination: GetVolumes200ApplicationJSONMetaPagination;
}

/**
 * Location of the Volume. Volume can only be attached to Servers in the same Location.
 */
export class GetVolumes200ApplicationJSONVolumesLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class GetVolumes200ApplicationJSONVolumesProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Current status of the Volume
 */
export enum GetVolumes200ApplicationJSONVolumesStatusEnum {
  Creating = "creating",
  Available = "available",
}

export class GetVolumes200ApplicationJSONVolumes extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Filesystem of the Volume if formatted on creation, null if not formatted on creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Device path on the file system for the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linux_device" })
  linuxDevice: string;

  /**
   * Location of the Volume. Volume can only be attached to Servers in the same Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GetVolumes200ApplicationJSONVolumesLocation)
  location: GetVolumes200ApplicationJSONVolumesLocation;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetVolumes200ApplicationJSONVolumesProtection)
  protection: GetVolumes200ApplicationJSONVolumesProtection;

  /**
   * ID of the Server the Volume is attached to, null if it is not attached at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Size in GB of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  /**
   * Current status of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetVolumes200ApplicationJSONVolumesStatusEnum;
}

/**
 * The `volumes` key contains a list of volumes
 */
export class GetVolumes200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetVolumes200ApplicationJSONMeta)
  meta?: GetVolumes200ApplicationJSONMeta;

  @SpeakeasyMetadata({ elemType: GetVolumes200ApplicationJSONVolumes })
  @Expose({ name: "volumes" })
  @Type(() => GetVolumes200ApplicationJSONVolumes)
  volumes: GetVolumes200ApplicationJSONVolumes[];
}

export class GetVolumesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `volumes` key contains a list of volumes
   */
  @SpeakeasyMetadata()
  getVolumes200ApplicationJSONObject?: GetVolumes200ApplicationJSON;
}
