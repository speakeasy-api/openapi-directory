"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v1money as shared_v1money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V1Tender:
    r"""A tender represents a discrete monetary exchange. Square represents this
    exchange as a money object with a specific currency and amount, where the
    amount is given in the smallest denomination of the given currency.
    
    Square POS can accept more than one form of tender for a single payment (such
    as by splitting a bill between a credit card and a gift card). The `tender`
    field of the Payment object lists all forms of tender used for the payment.
    
    Split tender payments behave slightly differently from single tender payments:
    
    The receipt_url for a split tender corresponds only to the first tender listed
    in the tender field. To get the receipt URLs for the remaining tenders, use
    the receipt_url fields of the corresponding Tender objects.
    
    *A note on gift cards**: when a customer purchases a Square gift card from a
    merchant, the merchant receives the full amount of the gift card in the
    associated payment.
    
    When that gift card is used as a tender, the balance of the gift card is
    reduced and the merchant receives no funds. A `Tender` object with a type of
    `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
    associated payment.
    """
    
    card_brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_brand'), 'exclude': lambda f: f is None }})
    r"""The brand of credit card provided."""  
    change_back_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change_back_money'), 'exclude': lambda f: f is None }})  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employee_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the employee that processed the tender."""  
    entry_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry_method'), 'exclude': lambda f: f is None }})
    r"""The tender's unique ID."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The tender's unique ID."""  
    is_exchange: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_exchange'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A human-readable description of the tender."""  
    pan_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pan_suffix'), 'exclude': lambda f: f is None }})
    r"""The last four digits of the provided credit card's account number."""  
    payment_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_note'), 'exclude': lambda f: f is None }})
    r"""Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER."""  
    receipt_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the receipt for the tender."""  
    refunded_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_money'), 'exclude': lambda f: f is None }})  
    settled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settled_at'), 'exclude': lambda f: f is None }})
    r"""The time when the tender was settled, in ISO 8601 format."""  
    tendered_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tendered_at'), 'exclude': lambda f: f is None }})
    r"""The time when the tender was created, in ISO 8601 format."""  
    tendered_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tendered_money'), 'exclude': lambda f: f is None }})  
    total_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_money'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of tender."""  
    