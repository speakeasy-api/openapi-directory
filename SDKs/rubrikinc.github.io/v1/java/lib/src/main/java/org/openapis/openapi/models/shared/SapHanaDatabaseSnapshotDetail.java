/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SapHanaDatabaseSnapshotDetail - Returns details about a snapshot.
 */
public class SapHanaDatabaseSnapshotDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archivalLocationIds")
    public String[] archivalLocationIds;

    public SapHanaDatabaseSnapshotDetail withArchivalLocationIds(String[] archivalLocationIds) {
        this.archivalLocationIds = archivalLocationIds;
        return this;
    }
    
    /**
     * ID of the SAP HANA backup. This ID uniquely identifies a backup to SAP HANA. All backup files from a single backup share the same backup ID.
     */
    @JsonProperty("backupId")
    public Long backupId;

    public SapHanaDatabaseSnapshotDetail withBackupId(Long backupId) {
        this.backupId = backupId;
        return this;
    }
    
    /**
     * The backup prefix that was used while taking the backup.
     */
    @JsonProperty("backupPrefix")
    public String backupPrefix;

    public SapHanaDatabaseSnapshotDetail withBackupPrefix(String backupPrefix) {
        this.backupPrefix = backupPrefix;
        return this;
    }
    
    /**
     * Type of the SAP HANA backup.
     */
    @JsonProperty("backupType")
    public SapHanaDatabaseSnapshotDetailBackupTypeEnum backupType;

    public SapHanaDatabaseSnapshotDetail withBackupType(SapHanaDatabaseSnapshotDetailBackupTypeEnum backupType) {
        this.backupType = backupType;
        return this;
    }
    
    /**
     * The backup ID of the full data backup or the delta backup on which the current delta backup is based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseBackupId")
    public Long baseBackupId;

    public SapHanaDatabaseSnapshotDetail withBaseBackupId(Long baseBackupId) {
        this.baseBackupId = baseBackupId;
        return this;
    }
    
    /**
     * Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudState")
    public Long cloudState;

    public SapHanaDatabaseSnapshotDetail withCloudState(Long cloudState) {
        this.cloudState = cloudState;
        return this;
    }
    
    /**
     * The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudStorageTier")
    public SnapshotCloudStorageTierEnum cloudStorageTier;

    public SapHanaDatabaseSnapshotDetail withCloudStorageTier(SnapshotCloudStorageTierEnum cloudStorageTier) {
        this.cloudStorageTier = cloudStorageTier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public String config;

    public SapHanaDatabaseSnapshotDetail withConfig(String config) {
        this.config = config;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consistencyLevel")
    public String consistencyLevel;

    public SapHanaDatabaseSnapshotDetail withConsistencyLevel(String consistencyLevel) {
        this.consistencyLevel = consistencyLevel;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;

    public SapHanaDatabaseSnapshotDetail withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationDate")
    public OffsetDateTime expirationDate;

    public SapHanaDatabaseSnapshotDetail withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public SapHanaDatabaseSnapshotDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexState")
    public Long indexState;

    public SapHanaDatabaseSnapshotDetail withIndexState(Long indexState) {
        this.indexState = indexState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCorrupt")
    public Boolean isCorrupt;

    public SapHanaDatabaseSnapshotDetail withIsCorrupt(Boolean isCorrupt) {
        this.isCorrupt = isCorrupt;
        return this;
    }
    
    /**
     * A Boolean that indicates whether or not custom retention is applied to the snapshot.
     * 
     */
    @JsonProperty("isCustomRetentionApplied")
    public Boolean isCustomRetentionApplied;

    public SapHanaDatabaseSnapshotDetail withIsCustomRetentionApplied(Boolean isCustomRetentionApplied) {
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        return this;
    }
    
    /**
     * This specifies whether the backup was triggered by HANA studio, SAP HANA cockpit, or using HDBSQL commands.
     */
    @JsonProperty("isExternalBackup")
    public Boolean isExternalBackup;

    public SapHanaDatabaseSnapshotDetail withIsExternalBackup(Boolean isExternalBackup) {
        this.isExternalBackup = isExternalBackup;
        return this;
    }
    
    @JsonProperty("isOnDemandSnapshot")
    public Boolean isOnDemandSnapshot;

    public SapHanaDatabaseSnapshotDetail withIsOnDemandSnapshot(Boolean isOnDemandSnapshot) {
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPlacedOnLegalHold")
    public Boolean isPlacedOnLegalHold;

    public SapHanaDatabaseSnapshotDetail withIsPlacedOnLegalHold(Boolean isPlacedOnLegalHold) {
        this.isPlacedOnLegalHold = isPlacedOnLegalHold;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRetainedByRetentionLockSla")
    public Boolean isRetainedByRetentionLockSla;

    public SapHanaDatabaseSnapshotDetail withIsRetainedByRetentionLockSla(Boolean isRetainedByRetentionLockSla) {
        this.isRetainedByRetentionLockSla = isRetainedByRetentionLockSla;
        return this;
    }
    
    /**
     * This specifies whether the backup was triggered by Rubrik and and whether the backup is an on-demand snapshot.
     */
    @JsonProperty("isRubrikTriggeredOnDemandBackup")
    public Boolean isRubrikTriggeredOnDemandBackup;

    public SapHanaDatabaseSnapshotDetail withIsRubrikTriggeredOnDemandBackup(Boolean isRubrikTriggeredOnDemandBackup) {
        this.isRubrikTriggeredOnDemandBackup = isRubrikTriggeredOnDemandBackup;
        return this;
    }
    
    /**
     * ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentSnapshotId")
    public String parentSnapshotId;

    public SapHanaDatabaseSnapshotDetail withParentSnapshotId(String parentSnapshotId) {
        this.parentSnapshotId = parentSnapshotId;
        return this;
    }
    
    @JsonProperty("replicationLocationIds")
    public String[] replicationLocationIds;

    public SapHanaDatabaseSnapshotDetail withReplicationLocationIds(String[] replicationLocationIds) {
        this.replicationLocationIds = replicationLocationIds;
        return this;
    }
    
    /**
     * The end time, in UTC, of the backup with respect to the Rubrik cluster.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rubrikSnapshotEndTime")
    public OffsetDateTime rubrikSnapshotEndTime;

    public SapHanaDatabaseSnapshotDetail withRubrikSnapshotEndTime(OffsetDateTime rubrikSnapshotEndTime) {
        this.rubrikSnapshotEndTime = rubrikSnapshotEndTime;
        return this;
    }
    
    /**
     * The start time, in UTC, of the backup with respect to the Rubrik cluster.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rubrikSnapshotStartTime")
    public OffsetDateTime rubrikSnapshotStartTime;

    public SapHanaDatabaseSnapshotDetail withRubrikSnapshotStartTime(OffsetDateTime rubrikSnapshotStartTime) {
        this.rubrikSnapshotStartTime = rubrikSnapshotStartTime;
        return this;
    }
    
    /**
     * The end time, in UTC, of the backup with respect to the SAP HANA system.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sapHanaEndTime")
    public OffsetDateTime sapHanaEndTime;

    public SapHanaDatabaseSnapshotDetail withSapHanaEndTime(OffsetDateTime sapHanaEndTime) {
        this.sapHanaEndTime = sapHanaEndTime;
        return this;
    }
    
    /**
     * The start time, in UTC, of the backup with respect to the SAP HANA system.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sapHanaStartTime")
    public OffsetDateTime sapHanaStartTime;

    public SapHanaDatabaseSnapshotDetail withSapHanaStartTime(OffsetDateTime sapHanaStartTime) {
        this.sapHanaStartTime = sapHanaStartTime;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaId")
    public String slaId;

    public SapHanaDatabaseSnapshotDetail withSlaId(String slaId) {
        this.slaId = slaId;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaName")
    public String slaName;

    public SapHanaDatabaseSnapshotDetail withSlaName(String slaName) {
        this.slaName = slaName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotRetentionInfo")
    public SnapshotRetentionInfo snapshotRetentionInfo;

    public SapHanaDatabaseSnapshotDetail withSnapshotRetentionInfo(SnapshotRetentionInfo snapshotRetentionInfo) {
        this.snapshotRetentionInfo = snapshotRetentionInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceObjectType")
    public String sourceObjectType;

    public SapHanaDatabaseSnapshotDetail withSourceObjectType(String sourceObjectType) {
        this.sourceObjectType = sourceObjectType;
        return this;
    }
    
    public SapHanaDatabaseSnapshotDetail(@JsonProperty("backupId") Long backupId, @JsonProperty("backupPrefix") String backupPrefix, @JsonProperty("backupType") SapHanaDatabaseSnapshotDetailBackupTypeEnum backupType, @JsonProperty("date") OffsetDateTime date, @JsonProperty("id") String id, @JsonProperty("isCustomRetentionApplied") Boolean isCustomRetentionApplied, @JsonProperty("isExternalBackup") Boolean isExternalBackup, @JsonProperty("isOnDemandSnapshot") Boolean isOnDemandSnapshot, @JsonProperty("isRubrikTriggeredOnDemandBackup") Boolean isRubrikTriggeredOnDemandBackup, @JsonProperty("replicationLocationIds") String[] replicationLocationIds, @JsonProperty("rubrikSnapshotEndTime") OffsetDateTime rubrikSnapshotEndTime, @JsonProperty("rubrikSnapshotStartTime") OffsetDateTime rubrikSnapshotStartTime, @JsonProperty("sapHanaEndTime") OffsetDateTime sapHanaEndTime, @JsonProperty("sapHanaStartTime") OffsetDateTime sapHanaStartTime, @JsonProperty("slaId") String slaId, @JsonProperty("slaName") String slaName) {
        this.backupId = backupId;
        this.backupPrefix = backupPrefix;
        this.backupType = backupType;
        this.date = date;
        this.id = id;
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        this.isExternalBackup = isExternalBackup;
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        this.isRubrikTriggeredOnDemandBackup = isRubrikTriggeredOnDemandBackup;
        this.replicationLocationIds = replicationLocationIds;
        this.rubrikSnapshotEndTime = rubrikSnapshotEndTime;
        this.rubrikSnapshotStartTime = rubrikSnapshotStartTime;
        this.sapHanaEndTime = sapHanaEndTime;
        this.sapHanaStartTime = sapHanaStartTime;
        this.slaId = slaId;
        this.slaName = slaName;
  }
}
