// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateVideoVersionPathParams struct {
	// The ID of the video.
	VideoID float64 `pathParam:"style=simple,explode=false,name=video_id"`
}

// CreateVideoVersionRequestBodyUploadApproachEnum - Upload approach
type CreateVideoVersionRequestBodyUploadApproachEnum string

const (
	CreateVideoVersionRequestBodyUploadApproachEnumPost      CreateVideoVersionRequestBodyUploadApproachEnum = "post"
	CreateVideoVersionRequestBodyUploadApproachEnumPull      CreateVideoVersionRequestBodyUploadApproachEnum = "pull"
	CreateVideoVersionRequestBodyUploadApproachEnumStreaming CreateVideoVersionRequestBodyUploadApproachEnum = "streaming"
	CreateVideoVersionRequestBodyUploadApproachEnumTus       CreateVideoVersionRequestBodyUploadApproachEnum = "tus"
)

func (e *CreateVideoVersionRequestBodyUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = CreateVideoVersionRequestBodyUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVideoVersionRequestBodyUploadApproachEnum: %s", s)
	}
}

type CreateVideoVersionRequestBodyUpload struct {
	// Upload approach
	Approach CreateVideoVersionRequestBodyUploadApproachEnum `json:"approach"`
	// If your upload approach is pull, Vimeo will download the video hosted at this public URL. This URL must be valid for at least 24 hours.
	Link *string `json:"link,omitempty"`
	// The app's redirect URL. Use this parameter when `approach` is `post`.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// Upload size
	Size *string `json:"size,omitempty"`
}

type CreateVideoVersionRequestBody struct {
	// The name of the version
	FileName string                              `json:"file_name"`
	Upload   CreateVideoVersionRequestBodyUpload `json:"upload"`
}

type CreateVideoVersionRequest struct {
	PathParams CreateVideoVersionPathParams
	Request    CreateVideoVersionRequestBody `request:"mediaType=application/vnd.vimeo.video.version+json"`
}

type CreateVideoVersionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// * Error code 2204: If the request input contains invalid upload data.
	// * Error code 2204: If the request input contains invalid versions data.
	Error *shared.Error
	// Standard request.
	VideoVersions *shared.VideoVersions
}
