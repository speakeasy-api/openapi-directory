/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The mode how this station is connected to the cloud
 */
export enum PicoChargingDataConnectionModeEnum {
  NetworkToCloudConnectionModeNoConnection = "NetworkToCloudConnectionMode_NoConnection",
  NetworkToCloudConnectionModeDirectWiFiConnection = "NetworkToCloudConnectionMode_DirectWiFiConnection",
  NetworkToCloudConnectionModeGPRSConnection = "NetworkToCloudConnectionMode_GPRSConnection",
  NetworkToCloudConnectionModeNBIotConnection = "NetworkToCloudConnectionMode_NBIotConnection",
  NetworkToCloudConnectionModeLteCatM1Connection = "NetworkToCloudConnectionMode_LteCatM1Connection",
  NetworkToCloudConnectionModeMeshWiFiConnection = "NetworkToCloudConnectionMode_MeshWiFiConnection",
  NetworkToCloudConnectionModeMeshMobileConnection = "NetworkToCloudConnectionMode_MeshMobileConnection",
}

/**
 * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
 */
export enum PicoChargingDataLastWarningOrErrorEnum {
  MeterDataloggerEvent = "MeterDataloggerEvent",
  MeterRestart = "MeterRestart",
  PowerDown = "PowerDown",
  MissingPhaseL1 = "MissingPhaseL1",
  MissingPhaseL2 = "MissingPhaseL2",
  MissingPhaseL3 = "MissingPhaseL3",
  TamperDetectionCover = "TamperDetectionCover",
  MagneticFieldDetection = "MagneticFieldDetection",
  ClockAdjusted = "ClockAdjusted",
  Overvoltage = "Overvoltage",
  Undervoltage = "Undervoltage",
  OvervoltageL1 = "OvervoltageL1",
  OvervoltageL2 = "OvervoltageL2",
  OvervoltageL3 = "OvervoltageL3",
  ChargingTransaction = "ChargingTransaction",
  PicoErrorControllerPanic = "PicoErrorControllerPanic",
  PicoErrorMidServicePanic = "PicoErrorMidServicePanic",
  PicoWarningRcdTriggered = "PicoWarningRcdTriggered",
  PicoWarningCableLockError = "PicoWarningCableLockError",
  PicoWarningDiodeFailure = "PicoWarningDiodeFailure",
  PicoWarningOverload = "PicoWarningOverload",
  PicoWarningHighTemperature = "PicoWarningHighTemperature",
}

/**
 * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
 */
export enum PicoChargingDataLoadSheddingStateEnum {
  MaxCurrent = "MaxCurrent",
  HalfCurrent = "HalfCurrent",
  MinCurrent = "MinCurrent",
  NoCurrent = "NoCurrent",
}

/**
 * The state of the charging station
 */
export enum PicoChargingDataStateEnum {
  Booting = "Booting",
  ReadyNoCarConnected = "ReadyNoCarConnected",
  ReadyCarConnected = "ReadyCarConnected",
  StartedWaitForCar = "StartedWaitForCar",
  Charging = "Charging",
  Installation = "Installation",
  Authorize = "Authorize",
  Offline = "Offline",
}

/**
 * Container class for the pico charging station API
 */
export class PicoChargingData extends SpeakeasyBase {
  /**
   * The energy used by this active charging (in kWh)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActiveChargingEnergy" })
  activeChargingEnergy?: number;

  /**
   * The power of the active charging (in kW)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ActiveChargingPower" })
  activeChargingPower?: number;

  /**
   * The mode how this station is connected to the cloud
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConnectionMode" })
  connectionMode?: PicoChargingDataConnectionModeEnum;

  /**
   * The duration of this charging in seconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Duration" })
  duration?: number;

  /**
   * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastWarningOrError" })
  lastWarningOrError?: PicoChargingDataLastWarningOrErrorEnum;

  /**
   * The message of the last warning or error of the station.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastWarningOrErrorMessage" })
  lastWarningOrErrorMessage?: string;

  /**
   * The time when the LastWarningOrError happend
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastWarningOrErrorTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastWarningOrErrorTime?: Date;

  /**
   * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoadSheddingState" })
  loadSheddingState?: PicoChargingDataLoadSheddingStateEnum;

  /**
   * The name of the loadmanagement group. Or string.empty if the station is not in a group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoadmanagementGroupName" })
  loadmanagementGroupName?: string;

  /**
   * Max allowed charging current in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxAllowedChargingCurrent" })
  maxAllowedChargingCurrent?: number;

  /**
   * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxDynamicCurrent" })
  maxDynamicCurrent?: number;

  /**
   * Max. current of the loadmanagement group of this station (if there is any) in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxLoadmanagementGroupCurrent" })
  maxLoadmanagementGroupCurrent?: number;

  /**
   * Max. current of the station in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxStationCurrent" })
  maxStationCurrent?: number;

  /**
   * Min. current of the station in A
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinStationCurrent" })
  minStationCurrent?: number;

  /**
   * The state of the charging station
   */
  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: PicoChargingDataStateEnum;

  /**
   * The date of this values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ValueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  valueDate?: Date;
}
