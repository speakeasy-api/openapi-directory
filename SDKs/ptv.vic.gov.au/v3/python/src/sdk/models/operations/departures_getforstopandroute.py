"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import v3_departuresresponse as shared_v3_departuresresponse
from ..shared import v3_errorresponse as shared_v3_errorresponse
from datetime import datetime
from enum import Enum
from typing import Optional

class DeparturesGetForStopAndRouteExpandEnum(str, Enum):
    ALL = 'All'
    STOP = 'Stop'
    ROUTE = 'Route'
    RUN = 'Run'
    DIRECTION = 'Direction'
    DISRUPTION = 'Disruption'
    VEHICLE_DESCRIPTOR = 'VehicleDescriptor'
    VEHICLE_POSITION = 'VehiclePosition'
    NONE = 'None'

class DeparturesGetForStopAndRouteRouteTypeEnum(str, Enum):
    r"""Number identifying transport mode; values returned via RouteTypes API"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclasses.dataclass
class DeparturesGetForStopAndRouteRequest:
    
    route_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'route_id', 'style': 'simple', 'explode': False }})
    r"""Identifier of route; values returned by Routes API - v3/routes"""  
    route_type: DeparturesGetForStopAndRouteRouteTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'route_type', 'style': 'simple', 'explode': False }})
    r"""Number identifying transport mode; values returned via RouteTypes API"""  
    stop_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'stop_id', 'style': 'simple', 'explode': False }})
    r"""Identifier of stop; values returned by Stops API"""  
    date_utc: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_utc', 'style': 'form', 'explode': True }})
    r"""Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)"""  
    devid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'devid', 'style': 'form', 'explode': True }})
    r"""Your developer id"""  
    direction_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction_id', 'style': 'form', 'explode': True }})
    r"""Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}"""  
    expand: Optional[list[DeparturesGetForStopAndRouteExpandEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})
    r"""List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
                Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
    """  
    gtfs: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gtfs', 'style': 'form', 'explode': True }})
    r"""Indicates that stop_id parameter will accept \\"GTFS stop_id\\" data"""  
    include_cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_cancelled', 'style': 'form', 'explode': True }})
    r"""Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only"""  
    include_geopath: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_geopath', 'style': 'form', 'explode': True }})
    r"""Indicates if the route geopath should be returned"""  
    look_backwards: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'look_backwards', 'style': 'form', 'explode': True }})
    r"""Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_results', 'style': 'form', 'explode': True }})
    r"""Maximum number of results returned"""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'signature', 'style': 'form', 'explode': True }})
    r"""Authentication signature for request"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Please ignore"""  
    

@dataclasses.dataclass
class DeparturesGetForStopAndRouteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    v3_departures_response: Optional[shared_v3_departuresresponse.V3DeparturesResponse] = dataclasses.field(default=None)
    r"""Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable)."""  
    v3_error_response: Optional[shared_v3_errorresponse.V3ErrorResponse] = dataclasses.field(default=None)
    r"""Invalid Request"""  
    