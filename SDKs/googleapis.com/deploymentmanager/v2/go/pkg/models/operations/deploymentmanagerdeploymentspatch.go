// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DeploymentmanagerDeploymentsPatchSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DeploymentmanagerDeploymentsPatchSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DeploymentmanagerDeploymentsPatchSecurity struct {
	Option1 *DeploymentmanagerDeploymentsPatchSecurityOption1 `security:"option"`
	Option2 *DeploymentmanagerDeploymentsPatchSecurityOption2 `security:"option"`
}

// DeploymentmanagerDeploymentsPatchCreatePolicyEnum - Sets the policy to use for creating new resources.
type DeploymentmanagerDeploymentsPatchCreatePolicyEnum string

const (
	DeploymentmanagerDeploymentsPatchCreatePolicyEnumCreateOrAcquire DeploymentmanagerDeploymentsPatchCreatePolicyEnum = "CREATE_OR_ACQUIRE"
	DeploymentmanagerDeploymentsPatchCreatePolicyEnumAcquire         DeploymentmanagerDeploymentsPatchCreatePolicyEnum = "ACQUIRE"
)

func (e DeploymentmanagerDeploymentsPatchCreatePolicyEnum) ToPointer() *DeploymentmanagerDeploymentsPatchCreatePolicyEnum {
	return &e
}

func (e *DeploymentmanagerDeploymentsPatchCreatePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATE_OR_ACQUIRE":
		fallthrough
	case "ACQUIRE":
		*e = DeploymentmanagerDeploymentsPatchCreatePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentmanagerDeploymentsPatchCreatePolicyEnum: %v", v)
	}
}

// DeploymentmanagerDeploymentsPatchDeletePolicyEnum - Sets the policy to use for deleting resources.
type DeploymentmanagerDeploymentsPatchDeletePolicyEnum string

const (
	DeploymentmanagerDeploymentsPatchDeletePolicyEnumDelete  DeploymentmanagerDeploymentsPatchDeletePolicyEnum = "DELETE"
	DeploymentmanagerDeploymentsPatchDeletePolicyEnumAbandon DeploymentmanagerDeploymentsPatchDeletePolicyEnum = "ABANDON"
)

func (e DeploymentmanagerDeploymentsPatchDeletePolicyEnum) ToPointer() *DeploymentmanagerDeploymentsPatchDeletePolicyEnum {
	return &e
}

func (e *DeploymentmanagerDeploymentsPatchDeletePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DELETE":
		fallthrough
	case "ABANDON":
		*e = DeploymentmanagerDeploymentsPatchDeletePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentmanagerDeploymentsPatchDeletePolicyEnum: %v", v)
	}
}

type DeploymentmanagerDeploymentsPatchRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum  `queryParam:"style=form,explode=true,name=$.xgafv"`
	Deployment1 *shared.Deployment `request:"mediaType=application/json"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Sets the policy to use for creating new resources.
	CreatePolicy *DeploymentmanagerDeploymentsPatchCreatePolicyEnum `queryParam:"style=form,explode=true,name=createPolicy"`
	// Sets the policy to use for deleting resources.
	DeletePolicy *DeploymentmanagerDeploymentsPatchDeletePolicyEnum `queryParam:"style=form,explode=true,name=deletePolicy"`
	// The name of the deployment for this request.
	DeploymentPathParameter string `pathParam:"style=simple,explode=false,name=deployment"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// If set to true, updates the deployment and creates and updates the "shell" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a `target.config` with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the `update()` or you can `cancelPreview()` to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.
	Preview *bool `queryParam:"style=form,explode=true,name=preview"`
	// The project ID for this request.
	Project string `pathParam:"style=simple,explode=false,name=project"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type DeploymentmanagerDeploymentsPatchResponse struct {
	ContentType string
	// Successful response
	Operation   *shared.Operation
	StatusCode  int
	RawResponse *http.Response
}
