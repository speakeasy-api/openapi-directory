/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AutoMLCandidateStep } from "./automlcandidatestep";
import { AutoMLContainerDefinition } from "./automlcontainerdefinition";
import { CandidateProperties } from "./candidateproperties";
import { CandidateStatusEnum } from "./candidatestatusenum";
import { FinalAutoMLJobObjectiveMetric } from "./finalautomljobobjectivemetric";
import { ObjectiveStatusEnum } from "./objectivestatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.
 */
export class AutoMLCandidate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CandidateName" })
  candidateName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CandidateProperties" })
  @Type(() => CandidateProperties)
  candidateProperties?: CandidateProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "CandidateStatus" })
  candidateStatus: CandidateStatusEnum;

  @SpeakeasyMetadata({ elemType: AutoMLCandidateStep })
  @Expose({ name: "CandidateSteps" })
  @Type(() => AutoMLCandidateStep)
  candidateSteps: AutoMLCandidateStep[];

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "FailureReason" })
  failureReason?: string;

  /**
   * The best candidate result from an AutoML training job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FinalAutoMLJobObjectiveMetric" })
  @Type(() => FinalAutoMLJobObjectiveMetric)
  finalAutoMLJobObjectiveMetric?: FinalAutoMLJobObjectiveMetric;

  @SpeakeasyMetadata({ elemType: AutoMLContainerDefinition, elemDepth: 2 })
  @Expose({ name: "InferenceContainerDefinitions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AutoMLContainerDefinition[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AutoMLContainerDefinition);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  inferenceContainerDefinitions?: Record<string, AutoMLContainerDefinition[]>;

  @SpeakeasyMetadata({ elemType: AutoMLContainerDefinition })
  @Expose({ name: "InferenceContainers" })
  @Type(() => AutoMLContainerDefinition)
  inferenceContainers?: AutoMLContainerDefinition[];

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ObjectiveStatus" })
  objectiveStatus: ObjectiveStatusEnum;
}
