"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class LookupTypeTypeEnum(str, Enum):
    GROUP = 'GROUP'
    MENU = 'MENU'
    ROLE = 'ROLE'
    CODE_STANDARD = 'CODE_STANDARD'
    CODE_TYPE = 'CODE_TYPE'
    FEATURE_TYPE = 'FEATURE_TYPE'
    RELATIONSHIP_TYPE = 'RELATIONSHIP_TYPE'
    IDENTIFIER = 'IDENTIFIER'
    CONTACT_POINT_TYPE = 'CONTACT_POINT_TYPE'
    STATISTIC_TYPE = 'STATISTIC_TYPE'
    NEWS_TYPE = 'NEWS_TYPE'
    GENDER = 'GENDER'
    IBD_CROHNSLOCATION = 'IBD_CROHNSLOCATION'
    IBD_CROHNSPROXIMALTERMINALILEUM = 'IBD_CROHNSPROXIMALTERMINALILEUM'
    IBD_CROHNSPERIANAL = 'IBD_CROHNSPERIANAL'
    IBD_CROHNSBEHAVIOUR = 'IBD_CROHNSBEHAVIOUR'
    IBD_UCEXTENT = 'IBD_UCEXTENT'
    IBD_EGIMCOMPLICATION = 'IBD_EGIMCOMPLICATION'
    IBD_SURGERYMAINPROCEDURE = 'IBD_SURGERYMAINPROCEDURE'
    IBD_SMOKINGSTATUS = 'IBD_SMOKINGSTATUS'
    IBD_FAMILYHISTORY = 'IBD_FAMILYHISTORY'
    LINK_TYPE = 'LINK_TYPE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LookupType:
    
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_update: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    type: Optional[LookupTypeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    