/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListConferenceServerList = [
  "https://insights.twilio.com",
] as const;

export class ListConferenceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListConferenceRequest extends SpeakeasyBase {
  /**
   * The SID of the conference.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ConferenceSid",
  })
  conferenceSid?: string;

  /**
   * Conferences created after the provided timestamp specified in ISO 8601 format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=CreatedAfter",
  })
  createdAfter?: string;

  /**
   * Conferences created before the provided timestamp specified in ISO 8601 format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=CreatedBefore",
  })
  createdBefore?: string;

  /**
   * Potential configuration, behavior, or performance issues detected during the conference.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DetectedIssues",
  })
  detectedIssues?: string;

  /**
   * Conference end reason; e.g. last participant left, modified by API, etc.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EndReason",
  })
  endReason?: string;

  /**
   * Custom label for the conference resource, up to 64 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FriendlyName",
  })
  friendlyName?: string;

  /**
   * Twilio region where the conference media was mixed.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MixerRegion",
  })
  mixerRegion?: string;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * Conference status.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Status",
  })
  status?: string;

  /**
   * Account SID for the subaccount whose resources you wish to retrieve.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Subaccount",
  })
  subaccount?: string;

  /**
   * Tags applied by Twilio for common potential configuration, quality, or performance issues.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Tags" })
  tags?: string;
}

export class ListConferenceListConferenceResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListConferenceListConferenceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.InsightsV1Conference })
  @Expose({ name: "conferences" })
  @Type(() => shared.InsightsV1Conference)
  conferences?: shared.InsightsV1Conference[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListConferenceListConferenceResponseMeta)
  meta?: ListConferenceListConferenceResponseMeta;
}

export class ListConferenceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listConferenceResponse?: ListConferenceListConferenceResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
