<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Segments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the segment with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdResponse
     */
	public function deleteApiV2SegmentsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/segments/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2SegmentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the segments matching the query parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsResponse
     */
	public function getApiV2Segments(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/segments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Segment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the segment matching the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdResponse
     */
	public function getApiV2SegmentsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/segments/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Segment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UNDER DEVELOPMENT - Returns the audio content segment matching the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentResponse
     */
	public function getApiV2SegmentsIdContent(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/segments/{id}/content', \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2SegmentsIdContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getApiV2SegmentsIdContent200ApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Creates a new segment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsResponse
     */
	public function postApiV2Segments(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/segments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV2SegmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Segment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}