// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ErrorModelErrorModelErrorCategoryEnum - The error models' error category
type ErrorModelErrorModelErrorCategoryEnum string

const (
	ErrorModelErrorModelErrorCategoryEnumGeneral           ErrorModelErrorModelErrorCategoryEnum = "General"
	ErrorModelErrorModelErrorCategoryEnumNotFound          ErrorModelErrorModelErrorCategoryEnum = "NotFound"
	ErrorModelErrorModelErrorCategoryEnumNotAuthorised     ErrorModelErrorModelErrorCategoryEnum = "NotAuthorised"
	ErrorModelErrorModelErrorCategoryEnumValidationFailure ErrorModelErrorModelErrorCategoryEnum = "ValidationFailure"
)

func (e ErrorModelErrorModelErrorCategoryEnum) ToPointer() *ErrorModelErrorModelErrorCategoryEnum {
	return &e
}

func (e *ErrorModelErrorModelErrorCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "General":
		fallthrough
	case "NotFound":
		fallthrough
	case "NotAuthorised":
		fallthrough
	case "ValidationFailure":
		*e = ErrorModelErrorModelErrorCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorModelErrorModelErrorCategoryEnum: %v", v)
	}
}

// ErrorModelErrorModelErrors - The error models' errors
type ErrorModelErrorModelErrors struct {
	Error []string `json:"Error,omitempty"`
}

type ErrorModelErrorModel struct {
	// The error models' description
	Description *string `json:"Description,omitempty"`
	// The error models' error category
	ErrorCategory *ErrorModelErrorModelErrorCategoryEnum `json:"ErrorCategory,omitempty"`
	// The error models' errors
	Errors *ErrorModelErrorModelErrors `json:"Errors,omitempty"`
}

// ErrorModel - Bad Request
type ErrorModel struct {
	ErrorModel *ErrorModelErrorModel `json:"ErrorModel,omitempty"`
}
