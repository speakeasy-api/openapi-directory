// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type JourneyJourneyResultsPathParams struct {
	// Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
	From string `pathParam:"style=simple,explode=false,name=from"`
	// Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
	To string `pathParam:"style=simple,explode=false,name=to"`
}

type JourneyJourneyResultsAccessibilityPreferenceEnum string

const (
	JourneyJourneyResultsAccessibilityPreferenceEnumNoRequirements     JourneyJourneyResultsAccessibilityPreferenceEnum = "NoRequirements"
	JourneyJourneyResultsAccessibilityPreferenceEnumNoSolidStairs      JourneyJourneyResultsAccessibilityPreferenceEnum = "NoSolidStairs"
	JourneyJourneyResultsAccessibilityPreferenceEnumNoEscalators       JourneyJourneyResultsAccessibilityPreferenceEnum = "NoEscalators"
	JourneyJourneyResultsAccessibilityPreferenceEnumNoElevators        JourneyJourneyResultsAccessibilityPreferenceEnum = "NoElevators"
	JourneyJourneyResultsAccessibilityPreferenceEnumStepFreeToVehicle  JourneyJourneyResultsAccessibilityPreferenceEnum = "StepFreeToVehicle"
	JourneyJourneyResultsAccessibilityPreferenceEnumStepFreeToPlatform JourneyJourneyResultsAccessibilityPreferenceEnum = "StepFreeToPlatform"
)

func (e *JourneyJourneyResultsAccessibilityPreferenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoRequirements":
		fallthrough
	case "NoSolidStairs":
		fallthrough
	case "NoEscalators":
		fallthrough
	case "NoElevators":
		fallthrough
	case "StepFreeToVehicle":
		fallthrough
	case "StepFreeToPlatform":
		*e = JourneyJourneyResultsAccessibilityPreferenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsAccessibilityPreferenceEnum: %s", s)
	}
}

type JourneyJourneyResultsBikeProficiencyEnum string

const (
	JourneyJourneyResultsBikeProficiencyEnumEasy     JourneyJourneyResultsBikeProficiencyEnum = "Easy"
	JourneyJourneyResultsBikeProficiencyEnumModerate JourneyJourneyResultsBikeProficiencyEnum = "Moderate"
	JourneyJourneyResultsBikeProficiencyEnumFast     JourneyJourneyResultsBikeProficiencyEnum = "Fast"
)

func (e *JourneyJourneyResultsBikeProficiencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Easy":
		fallthrough
	case "Moderate":
		fallthrough
	case "Fast":
		*e = JourneyJourneyResultsBikeProficiencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsBikeProficiencyEnum: %s", s)
	}
}

// JourneyJourneyResultsCyclePreferenceEnum - The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"
type JourneyJourneyResultsCyclePreferenceEnum string

const (
	JourneyJourneyResultsCyclePreferenceEnumNone            JourneyJourneyResultsCyclePreferenceEnum = "None"
	JourneyJourneyResultsCyclePreferenceEnumLeaveAtStation  JourneyJourneyResultsCyclePreferenceEnum = "LeaveAtStation"
	JourneyJourneyResultsCyclePreferenceEnumTakeOnTransport JourneyJourneyResultsCyclePreferenceEnum = "TakeOnTransport"
	JourneyJourneyResultsCyclePreferenceEnumAllTheWay       JourneyJourneyResultsCyclePreferenceEnum = "AllTheWay"
	JourneyJourneyResultsCyclePreferenceEnumCycleHire       JourneyJourneyResultsCyclePreferenceEnum = "CycleHire"
)

func (e *JourneyJourneyResultsCyclePreferenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "LeaveAtStation":
		fallthrough
	case "TakeOnTransport":
		fallthrough
	case "AllTheWay":
		fallthrough
	case "CycleHire":
		*e = JourneyJourneyResultsCyclePreferenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsCyclePreferenceEnum: %s", s)
	}
}

// JourneyJourneyResultsJourneyPreferenceEnum - The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"
type JourneyJourneyResultsJourneyPreferenceEnum string

const (
	JourneyJourneyResultsJourneyPreferenceEnumLeastInterchange JourneyJourneyResultsJourneyPreferenceEnum = "LeastInterchange"
	JourneyJourneyResultsJourneyPreferenceEnumLeastTime        JourneyJourneyResultsJourneyPreferenceEnum = "LeastTime"
	JourneyJourneyResultsJourneyPreferenceEnumLeastWalking     JourneyJourneyResultsJourneyPreferenceEnum = "LeastWalking"
)

func (e *JourneyJourneyResultsJourneyPreferenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LeastInterchange":
		fallthrough
	case "LeastTime":
		fallthrough
	case "LeastWalking":
		*e = JourneyJourneyResultsJourneyPreferenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsJourneyPreferenceEnum: %s", s)
	}
}

// JourneyJourneyResultsTimeIsEnum - Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"
type JourneyJourneyResultsTimeIsEnum string

const (
	JourneyJourneyResultsTimeIsEnumArriving  JourneyJourneyResultsTimeIsEnum = "Arriving"
	JourneyJourneyResultsTimeIsEnumDeparting JourneyJourneyResultsTimeIsEnum = "Departing"
)

func (e *JourneyJourneyResultsTimeIsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Arriving":
		fallthrough
	case "Departing":
		*e = JourneyJourneyResultsTimeIsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsTimeIsEnum: %s", s)
	}
}

// JourneyJourneyResultsWalkingSpeedEnum - The walking speed. eg possible options: "slow" | "average" | "fast".
type JourneyJourneyResultsWalkingSpeedEnum string

const (
	JourneyJourneyResultsWalkingSpeedEnumSlow    JourneyJourneyResultsWalkingSpeedEnum = "Slow"
	JourneyJourneyResultsWalkingSpeedEnumAverage JourneyJourneyResultsWalkingSpeedEnum = "Average"
	JourneyJourneyResultsWalkingSpeedEnumFast    JourneyJourneyResultsWalkingSpeedEnum = "Fast"
)

func (e *JourneyJourneyResultsWalkingSpeedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Slow":
		fallthrough
	case "Average":
		fallthrough
	case "Fast":
		*e = JourneyJourneyResultsWalkingSpeedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JourneyJourneyResultsWalkingSpeedEnum: %s", s)
	}
}

type JourneyJourneyResultsQueryParams struct {
	// The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"
	AccessibilityPreference []JourneyJourneyResultsAccessibilityPreferenceEnum `queryParam:"style=form,explode=true,name=accessibilityPreference"`
	// Time adjustment command. eg possible options: "TripFirst" | "TripLast"
	Adjustment *string `queryParam:"style=form,explode=true,name=adjustment"`
	// Option to determine whether to return alternative cycling journey
	AlternativeCycle *bool `queryParam:"style=form,explode=true,name=alternativeCycle"`
	// Option to determine whether to return alternative walking journey
	AlternativeWalking *bool `queryParam:"style=form,explode=true,name=alternativeWalking"`
	// Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.
	ApplyHTMLMarkup *bool `queryParam:"style=form,explode=true,name=applyHtmlMarkup"`
	// A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"
	BikeProficiency []JourneyJourneyResultsBikeProficiencyEnum `queryParam:"style=form,explode=true,name=bikeProficiency"`
	// The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"
	CyclePreference *JourneyJourneyResultsCyclePreferenceEnum `queryParam:"style=form,explode=true,name=cyclePreference"`
	// The date must be in yyyyMMdd format
	Date *string `queryParam:"style=form,explode=true,name=date"`
	// An optional name to associate with the origin of the journey in the results.
	FromName *string `queryParam:"style=form,explode=true,name=fromName"`
	// The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"
	JourneyPreference *JourneyJourneyResultsJourneyPreferenceEnum `queryParam:"style=form,explode=true,name=journeyPreference"`
	// The max walking time in minutes for transfer eg. "120"
	MaxTransferMinutes *string `queryParam:"style=form,explode=true,name=maxTransferMinutes"`
	// The max walking time in minutes for journeys eg. "120"
	MaxWalkingMinutes *string `queryParam:"style=form,explode=true,name=maxWalkingMinutes"`
	// The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"
	Mode []string `queryParam:"style=form,explode=true,name=mode"`
	// Does the journey cover stops outside London? eg. "nationalSearch=true"
	NationalSearch *bool `queryParam:"style=form,explode=true,name=nationalSearch"`
	// A boolean to indicate whether public transport routes should include directions between platforms and station entrances.
	RouteBetweenEntrances *bool `queryParam:"style=form,explode=true,name=routeBetweenEntrances"`
	// A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".
	TaxiOnlyTrip *bool `queryParam:"style=form,explode=true,name=taxiOnlyTrip"`
	// The time must be in HHmm format
	Time *string `queryParam:"style=form,explode=true,name=time"`
	// Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"
	TimeIs *JourneyJourneyResultsTimeIsEnum `queryParam:"style=form,explode=true,name=timeIs"`
	// An optional name to associate with the destination of the journey in the results.
	ToName *string `queryParam:"style=form,explode=true,name=toName"`
	// A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey
	UseMultiModalCall *bool `queryParam:"style=form,explode=true,name=useMultiModalCall"`
	// A boolean to indicate if we want to receive real time live arrivals data where available.
	UseRealTimeLiveArrivals *bool `queryParam:"style=form,explode=true,name=useRealTimeLiveArrivals"`
	// Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
	Via *string `queryParam:"style=form,explode=true,name=via"`
	// An optional name to associate with the via point of the journey in the results.
	ViaName *string `queryParam:"style=form,explode=true,name=viaName"`
	// A boolean to indicate whether to optimize journeys using walking
	WalkingOptimization *bool `queryParam:"style=form,explode=true,name=walkingOptimization"`
	// The walking speed. eg possible options: "slow" | "average" | "fast".
	WalkingSpeed *JourneyJourneyResultsWalkingSpeedEnum `queryParam:"style=form,explode=true,name=walkingSpeed"`
}

type JourneyJourneyResultsRequest struct {
	PathParams  JourneyJourneyResultsPathParams
	QueryParams JourneyJourneyResultsQueryParams
}

type JourneyJourneyResultsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesJourneyPlannerItineraryResult *shared.TflAPIPresentationEntitiesJourneyPlannerItineraryResult
}
