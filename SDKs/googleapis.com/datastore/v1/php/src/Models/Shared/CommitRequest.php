<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CommitRequest - The request for Datastore.Commit.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CommitRequest
{
    /**
     * The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
     * 
     * @var ?string $databaseId
     */
	#[\JMS\Serializer\Annotation\SerializedName('databaseId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $databaseId = null;
    
    /**
     * The type of commit to perform. Defaults to `TRANSACTIONAL`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CommitRequestModeEnum $mode
     */
	#[\JMS\Serializer\Annotation\SerializedName('mode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CommitRequestModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CommitRequestModeEnum $mode = null;
    
    /**
     * The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Mutation> $mutations
     */
	#[\JMS\Serializer\Annotation\SerializedName('mutations')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Mutation>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $mutations = null;
    
    /**
     * Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionOptions $singleUseTransaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('singleUseTransaction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionOptions $singleUseTransaction = null;
    
    /**
     * The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
     * 
     * @var ?string $transaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transaction = null;
    
	public function __construct()
	{
		$this->databaseId = null;
		$this->mode = null;
		$this->mutations = null;
		$this->singleUseTransaction = null;
		$this->transaction = null;
	}
}
