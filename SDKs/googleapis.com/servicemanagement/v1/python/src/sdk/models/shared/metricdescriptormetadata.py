"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MetricDescriptorMetadataLaunchStageEnum(str, Enum):
    r"""Deprecated. Must use the MetricDescriptor.launch_stage instead."""
    LAUNCH_STAGE_UNSPECIFIED = 'LAUNCH_STAGE_UNSPECIFIED'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    PRELAUNCH = 'PRELAUNCH'
    EARLY_ACCESS = 'EARLY_ACCESS'
    ALPHA = 'ALPHA'
    BETA = 'BETA'
    GA = 'GA'
    DEPRECATED = 'DEPRECATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MetricDescriptorMetadata:
    r"""Additional annotations that can be used to guide the usage of a metric."""
    
    ingest_delay: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingestDelay'), 'exclude': lambda f: f is None }})
    r"""The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors."""  
    launch_stage: Optional[MetricDescriptorMetadataLaunchStageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchStage'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Must use the MetricDescriptor.launch_stage instead."""  
    sample_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samplePeriod'), 'exclude': lambda f: f is None }})
    r"""The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period."""  
    