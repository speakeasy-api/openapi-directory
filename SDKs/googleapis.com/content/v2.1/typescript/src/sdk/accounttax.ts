/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounttax {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves and updates tax settings of multiple accounts in a single request.
   */
  contentAccounttaxCustombatch(
    req: operations.ContentAccounttaxCustombatchRequest,
    security: operations.ContentAccounttaxCustombatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccounttaxCustombatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccounttaxCustombatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounttax/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accounttaxCustomBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccounttaxCustombatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccounttaxCustombatchResponse =
        new operations.ContentAccounttaxCustombatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accounttaxCustomBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccounttaxCustomBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the tax settings of the account.
   */
  contentAccounttaxGet(
    req: operations.ContentAccounttaxGetRequest,
    security: operations.ContentAccounttaxGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccounttaxGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccounttaxGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounttax/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccounttaxGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccounttaxGetResponse =
        new operations.ContentAccounttaxGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountTax = utils.objectToClass(
              httpRes?.data,
              shared.AccountTax
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the tax settings of the sub-accounts in your Merchant Center account.
   */
  contentAccounttaxList(
    req: operations.ContentAccounttaxListRequest,
    security: operations.ContentAccounttaxListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccounttaxListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccounttaxListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounttax",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccounttaxListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccounttaxListResponse =
        new operations.ContentAccounttaxListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accounttaxListResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccounttaxListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the tax settings of the account. Any fields that are not provided are deleted from the resource.
   */
  contentAccounttaxUpdate(
    req: operations.ContentAccounttaxUpdateRequest,
    security: operations.ContentAccounttaxUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccounttaxUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccounttaxUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounttax/{accountId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountTax",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccounttaxUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccounttaxUpdateResponse =
        new operations.ContentAccounttaxUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountTax = utils.objectToClass(
              httpRes?.data,
              shared.AccountTax
            );
          }
          break;
      }

      return res;
    });
  }
}
