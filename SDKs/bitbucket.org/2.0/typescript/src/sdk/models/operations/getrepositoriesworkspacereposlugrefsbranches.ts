/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRepositoriesWorkspaceRepoSlugRefsBranchesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class GetRepositoriesWorkspaceRepoSlugRefsBranchesRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * Query string to narrow down the response as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   * This can either be the repository slug or the UUID of the repository,
   *
   * @remarks
   * surrounded by curly-braces, for example: `{repository UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo_slug",
  })
  repoSlug: string;

  /**
   *
   * @remarks
   * Field by which the results should be sorted as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The `name`
   * field is handled specially for branches in that, if specified as the sort field, it
   * uses a natural sort order instead of the default lexicographical sort order. For example,
   * it will return ['branch1', 'branch2', 'branch10'] instead of ['branch1', 'branch10', 'branch2'].
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the repository is private and the authenticated user does not have
   *
   * @remarks
   * access to it.
   *
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;

  /**
   * A paginated list of branches matching any filter criteria that were provided.
   */
  @SpeakeasyMetadata()
  paginatedBranches?: shared.PaginatedBranches;
}
