// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RegisterRealtimeAPIDataRegistrationTypeEnum - The Type of this registration (per meter, per user, ...)
type RegisterRealtimeAPIDataRegistrationTypeEnum string

const (
	RegisterRealtimeAPIDataRegistrationTypeEnumDisabled                RegisterRealtimeAPIDataRegistrationTypeEnum = "Disabled"
	RegisterRealtimeAPIDataRegistrationTypeEnumSingleMeterRegistration RegisterRealtimeAPIDataRegistrationTypeEnum = "SingleMeterRegistration"
	RegisterRealtimeAPIDataRegistrationTypeEnumUserRegistration        RegisterRealtimeAPIDataRegistrationTypeEnum = "UserRegistration"
)

func (e *RegisterRealtimeAPIDataRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Disabled":
		fallthrough
	case "SingleMeterRegistration":
		fallthrough
	case "UserRegistration":
		*e = RegisterRealtimeAPIDataRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterRealtimeAPIDataRegistrationTypeEnum: %s", s)
	}
}

// RegisterRealtimeAPIData - Container class for the register realtime API API
type RegisterRealtimeAPIData struct {
	// The URL of your endpoint. To this endpoint all the values are send to.
	APIURL *string `json:"ApiUrl,omitempty" form:"name=ApiUrl"`
	// The Password (basic auth) of your endpoint. Leave empty of none.
	BasicAuthPassword *string `json:"BasicAuthPassword,omitempty" form:"name=BasicAuthPassword"`
	// The Username (basic auth) of your endpoint. Leave empty of none.
	BasicAuthUsername *string `json:"BasicAuthUsername,omitempty" form:"name=BasicAuthUsername"`
	// The ID of the registration
	ID *string `json:"Id,omitempty" form:"name=Id"`
	// The ID of the Meter. Just used if the RegistrationType is "SingleMeterRegistration".
	MeterID *string `json:"MeterId,omitempty" form:"name=MeterId"`
	// The Type of this registration (per meter, per user, ...)
	RegistrationType *RegisterRealtimeAPIDataRegistrationTypeEnum `json:"RegistrationType,omitempty" form:"name=RegistrationType"`
	// The serial number of the Meter. Just used if the RegistrationType is "SingleMeterRegistration" and the MeterId is null.
	//             Example: 1 SME 01 63000000 or 6300000
	SerialNumber *string `json:"SerialNumber,omitempty" form:"name=SerialNumber"`
}
