// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RmcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RmcerRequestBodyCertificateParameters struct {
	// Application No
	Appno string `json:"APPNO"`
	// Certificate No
	Certno string `json:"CERTNO"`
}

// RmcerRequestBodyFormatEnum - The format of the certificate in response.
type RmcerRequestBodyFormatEnum string

const (
	RmcerRequestBodyFormatEnumPdf RmcerRequestBodyFormatEnum = "pdf"
)

func (e *RmcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = RmcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RmcerRequestBodyFormatEnum: %s", s)
	}
}

// RmcerRequestBody - Request format
type RmcerRequestBody struct {
	CertificateParameters *RmcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RmcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rmcer504ApplicationJSONErrorEnum string

const (
	Rmcer504ApplicationJSONErrorEnumGatewayTimeout Rmcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Rmcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Rmcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rmcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Rmcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Rmcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer504ApplicationJSON - Gateway timeout
type Rmcer504ApplicationJSON struct {
	Error            *Rmcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer503ApplicationJSONErrorEnum string

const (
	Rmcer503ApplicationJSONErrorEnumServiceUnavailable Rmcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Rmcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Rmcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rmcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Rmcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Rmcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer503ApplicationJSON - Service unavailable
type Rmcer503ApplicationJSON struct {
	Error            *Rmcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer502ApplicationJSONErrorEnum string

const (
	Rmcer502ApplicationJSONErrorEnumBadGatewy Rmcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Rmcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Rmcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rmcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Rmcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Rmcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer502ApplicationJSON - Bad gateway
type Rmcer502ApplicationJSON struct {
	Error            *Rmcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer500ApplicationJSONErrorEnum string

const (
	Rmcer500ApplicationJSONErrorEnumInternalServerError Rmcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Rmcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Rmcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rmcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Rmcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Rmcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer500ApplicationJSON - Internal server error
type Rmcer500ApplicationJSON struct {
	Error            *Rmcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer404ApplicationJSONErrorEnum string

const (
	Rmcer404ApplicationJSONErrorEnumRecordNotFound Rmcer404ApplicationJSONErrorEnum = "record_not_found"
	Rmcer404ApplicationJSONErrorEnumURLNotFound    Rmcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Rmcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rmcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rmcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rmcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rmcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Rmcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rmcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer404ApplicationJSON - No record found
type Rmcer404ApplicationJSON struct {
	Error            *Rmcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer401ApplicationJSONErrorEnum string

const (
	Rmcer401ApplicationJSONErrorEnumInvalidAuthentication Rmcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rmcer401ApplicationJSONErrorEnumInvalidAuthorization  Rmcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Rmcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rmcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rmcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rmcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rmcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Rmcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rmcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer401ApplicationJSON - Unauthorized access
type Rmcer401ApplicationJSON struct {
	Error            *Rmcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rmcer400ApplicationJSONErrorEnum string

const (
	Rmcer400ApplicationJSONErrorEnumMissingParameter Rmcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rmcer400ApplicationJSONErrorEnumInvalidParameter Rmcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rmcer400ApplicationJSONErrorEnumInvalidFormat    Rmcer400ApplicationJSONErrorEnum = "invalid_format"
	Rmcer400ApplicationJSONErrorEnumInvalidTxnid     Rmcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rmcer400ApplicationJSONErrorEnumInvalidConsentid Rmcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Rmcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rmcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Rmcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rmcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rmcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rmcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rmcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rmcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rmcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rmcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rmcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rmcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rmcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Rmcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rmcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rmcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rmcer400ApplicationJSON - Bad request
type Rmcer400ApplicationJSON struct {
	Error            *Rmcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rmcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RmcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rmcer400ApplicationJSONObject *Rmcer400ApplicationJSON
	// Unauthorized access
	Rmcer401ApplicationJSONObject *Rmcer401ApplicationJSON
	// No record found
	Rmcer404ApplicationJSONObject *Rmcer404ApplicationJSON
	// Internal server error
	Rmcer500ApplicationJSONObject *Rmcer500ApplicationJSON
	// Bad gateway
	Rmcer502ApplicationJSONObject *Rmcer502ApplicationJSON
	// Service unavailable
	Rmcer503ApplicationJSONObject *Rmcer503ApplicationJSON
	// Gateway timeout
	Rmcer504ApplicationJSONObject *Rmcer504ApplicationJSON
}
