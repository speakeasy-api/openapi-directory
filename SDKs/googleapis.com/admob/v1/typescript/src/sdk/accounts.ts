/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List the ad units under the specified AdMob account.
   */
  admobAccountsAdUnitsList(
    req: operations.AdmobAccountsAdUnitsListRequest,
    security: operations.AdmobAccountsAdUnitsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsAdUnitsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsAdUnitsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/adUnits", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsAdUnitsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsAdUnitsListResponse =
        new operations.AdmobAccountsAdUnitsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAdUnitsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAdUnitsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the apps under the specified AdMob account.
   */
  admobAccountsAppsList(
    req: operations.AdmobAccountsAppsListRequest,
    security: operations.AdmobAccountsAppsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsAppsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsAppsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/apps", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsAppsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsAppsListResponse =
        new operations.AdmobAccountsAppsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAppsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAppsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about the specified AdMob publisher account.
   */
  admobAccountsGet(
    req: operations.AdmobAccountsGetRequest,
    security: operations.AdmobAccountsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsGetResponse =
        new operations.AdmobAccountsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publisherAccount = utils.objectToClass(
              httpRes?.data,
              shared.PublisherAccount
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672.
   */
  admobAccountsList(
    req: operations.AdmobAccountsListRequest,
    security: operations.AdmobAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsListResponse =
        new operations.AdmobAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPublisherAccountsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPublisherAccountsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
   */
  admobAccountsMediationReportGenerate(
    req: operations.AdmobAccountsMediationReportGenerateRequest,
    security: operations.AdmobAccountsMediationReportGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsMediationReportGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsMediationReportGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/mediationReport:generate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateMediationReportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsMediationReportGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsMediationReportGenerateResponse =
        new operations.AdmobAccountsMediationReportGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateMediationReportResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateMediationReportResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
   */
  admobAccountsNetworkReportGenerate(
    req: operations.AdmobAccountsNetworkReportGenerateRequest,
    security: operations.AdmobAccountsNetworkReportGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdmobAccountsNetworkReportGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdmobAccountsNetworkReportGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/networkReport:generate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateNetworkReportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdmobAccountsNetworkReportGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdmobAccountsNetworkReportGenerateResponse =
        new operations.AdmobAccountsNetworkReportGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateNetworkReportResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateNetworkReportResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
