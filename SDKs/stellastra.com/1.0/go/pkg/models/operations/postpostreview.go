// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPostReviewRequestBody - The user_email must use a professional domain, free domains are not supported.
type PostPostReviewRequestBody struct {
	Rating    int64   `json:"rating"`
	UserEmail string  `json:"user_email"`
	UserName  *string `json:"user_name,omitempty"`
}

// PostPostReviewRatingEnum - The user's star rating, must be a single integer from [1, 2, 3, 4, 5]
type PostPostReviewRatingEnum int64

const (
	PostPostReviewRatingEnumOne   PostPostReviewRatingEnum = 1
	PostPostReviewRatingEnumTwo   PostPostReviewRatingEnum = 2
	PostPostReviewRatingEnumThree PostPostReviewRatingEnum = 3
	PostPostReviewRatingEnumFour  PostPostReviewRatingEnum = 4
	PostPostReviewRatingEnumFive  PostPostReviewRatingEnum = 5
)

func (e PostPostReviewRatingEnum) ToPointer() *PostPostReviewRatingEnum {
	return &e
}

func (e *PostPostReviewRatingEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		*e = PostPostReviewRatingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPostReviewRatingEnum: %v", v)
	}
}

type PostPostReviewRequest struct {
	// The request body requires the user_email and rating. The parameter use_name is optional.
	RequestBody PostPostReviewRequestBody `request:"mediaType=application/json"`
	// The user's star rating, must be a single integer from [1, 2, 3, 4, 5]
	Rating PostPostReviewRatingEnum `queryParam:"style=form,explode=true,name=rating"`
	// User's email to which the review verification will be sent.
	UserEmail string `queryParam:"style=form,explode=true,name=user_email"`
	// The user's name, defaults to empty string "".  Thus, if this is omitted, the email to the user will not use the user's name.
	UserName *string `queryParam:"style=form,explode=true,name=user_name"`
}

// PostPostReview403ApplicationJSON - The 403 response can have many detailed response messages related to the user's email address validation
type PostPostReview403ApplicationJSON struct {
	Data *string `json:"data,omitempty"`
}

// PostPostReview401ApplicationJSON - This can appear because the authorization header is missing or malformed, or becuse the auth email and key pair is not authorized.
type PostPostReview401ApplicationJSON struct {
	Data *string `json:"data,omitempty"`
}

// PostPostReview400ApplicationJSON - A status code of 400 is returned when a required parameter is mising, such as 'rating' or 'user_email'.
type PostPostReview400ApplicationJSON struct {
	Data *string `json:"data,omitempty"`
}

// PostPostReview200ApplicationJSON - A response code of 200 means the request was succesful, and the user has been sent an email confirming their review.
type PostPostReview200ApplicationJSON struct {
	Data *string `json:"data,omitempty"`
}

type PostPostReviewResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A response code of 200 means the request was succesful, and the user has been sent an email confirming their review.
	PostPostReview200ApplicationJSONObject *PostPostReview200ApplicationJSON
	// A status code of 400 is returned when a required parameter is mising, such as 'rating' or 'user_email'.
	PostPostReview400ApplicationJSONObject *PostPostReview400ApplicationJSON
	// This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized.
	PostPostReview401ApplicationJSONObject *PostPostReview401ApplicationJSON
	// The 403 response can have many detailed response messages related to the user's email address validation
	PostPostReview403ApplicationJSONObject *PostPostReview403ApplicationJSON
}
