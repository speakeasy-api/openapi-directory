"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OauthV1OpenidDiscovery:
    r"""OK"""
    
    authorization_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorization_endpoint'), 'exclude': lambda f: f is None }})
    r"""The endpoint that validates all authorization requests."""  
    claims_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claims_supported'), 'exclude': lambda f: f is None }})
    r"""A collection of claims supported by authorization server for identity token"""  
    device_authorization_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_authorization_endpoint'), 'exclude': lambda f: f is None }})
    r"""The endpoint that validates all device code related authorization requests."""  
    id_token_signing_alg_values_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_token_signing_alg_values_supported'), 'exclude': lambda f: f is None }})
    r"""A collection of JWS signing algorithms supported by authorization server to sign identity token."""  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    r"""The URL of the party that will create the token and sign it with its private key."""  
    jwk_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwk_uri'), 'exclude': lambda f: f is None }})
    r"""The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure."""  
    response_type_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_type_supported'), 'exclude': lambda f: f is None }})
    r"""A collection of response type supported by authorization server."""  
    revocation_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revocation_endpoint'), 'exclude': lambda f: f is None }})
    r"""The endpoint used to revoke access or refresh tokens issued by the authorization server."""  
    scopes_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes_supported'), 'exclude': lambda f: f is None }})
    r"""A collection of scopes supported by authorization server for identity token"""  
    subject_type_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_type_supported'), 'exclude': lambda f: f is None }})
    r"""A collection of subject by authorization server."""  
    token_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_endpoint'), 'exclude': lambda f: f is None }})
    r"""The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    userinfo_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userinfo_endpoint'), 'exclude': lambda f: f is None }})
    r"""The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested."""  
    