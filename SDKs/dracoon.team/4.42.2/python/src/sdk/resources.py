"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Resources:
    r"""Client resources"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def request_subscription_scopes(self) -> operations.RequestSubscriptionScopesResponse:
        r"""Request list of subscription scopes
        <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
        
        ### Description:
        Retrieve a list of subscription scopes.
        
        ### Precondition:
        Authenticated user.
        
        ### Postcondition:
        List of scopes is returned.
        
        ### Further Information:
        None.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/resources/user/notifications/scopes'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestSubscriptionScopesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotificationScopeList])
                res.notification_scope_list = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def request_user_avatar(self, request: operations.RequestUserAvatarRequest) -> operations.RequestUserAvatarResponse:
        r"""Request user avatar
        ### Description:
        Get user avatar.
        
        ### Precondition:
        Valid user ID and avatar UUID
        
        ### Postcondition:
        Avatar is returned.
        
        ### Further Information:
        None.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RequestUserAvatarRequest, base_url, '/v4/resources/users/{user_id}/avatar/{uuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestUserAvatarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Avatar])
                res.avatar = out
        elif http_res.status_code in [400, 404, 406]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    