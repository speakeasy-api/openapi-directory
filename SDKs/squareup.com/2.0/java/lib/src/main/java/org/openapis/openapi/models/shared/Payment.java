/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Payment - Represents a payment processed by the Square API.
 */
public class Payment {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_money")
    public Money amountMoney;

    public Payment withAmountMoney(Money amountMoney) {
        this.amountMoney = amountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_fee_money")
    public Money appFeeMoney;

    public Payment withAppFeeMoney(Money appFeeMoney) {
        this.appFeeMoney = appFeeMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_money")
    public Money approvedMoney;

    public Payment withApprovedMoney(Money approvedMoney) {
        this.approvedMoney = approvedMoney;
        return this;
    }
    
    /**
     * Additional details about BANK_ACCOUNT type payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account_details")
    public BankAccountPaymentDetails bankAccountDetails;

    public Payment withBankAccountDetails(BankAccountPaymentDetails bankAccountDetails) {
        this.bankAccountDetails = bankAccountDetails;
        return this;
    }
    
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Address billingAddress;

    public Payment withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * The buyer's email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_email_address")
    public String buyerEmailAddress;

    public Payment withBuyerEmailAddress(String buyerEmailAddress) {
        this.buyerEmailAddress = buyerEmailAddress;
        return this;
    }
    
    /**
     * Actions that can be performed on this payment:
     * - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
     * - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
     * - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
     * - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    public String[] capabilities;

    public Payment withCapabilities(String[] capabilities) {
        this.capabilities = capabilities;
        return this;
    }
    
    /**
     * Reflects the current status of a card payment. Contains only non-confidential information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_details")
    public CardPaymentDetails cardDetails;

    public Payment withCardDetails(CardPaymentDetails cardDetails) {
        this.cardDetails = cardDetails;
        return this;
    }
    
    /**
     * Stores details about a cash payment. Contains only non-confidential information. For more information, see 
     * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_details")
    public CashPaymentDetails cashDetails;

    public Payment withCashDetails(CashPaymentDetails cashDetails) {
        this.cashDetails = cashDetails;
        return this;
    }
    
    /**
     * The timestamp of when the payment was created, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Payment withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public Payment withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The action to be applied to the payment when the `delay_duration` has elapsed. This field
     * is read-only.
     * 
     * Current values include `CANCEL`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delay_action")
    public String delayAction;

    public Payment withDelayAction(String delayAction) {
        this.delayAction = delayAction;
        return this;
    }
    
    /**
     * The duration of time after the payment's creation when Square automatically applies the
     * `delay_action` to the payment. This automatic `delay_action` applies only to payments that
     * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
     * time period.
     * 
     * This field is specified as a time duration, in RFC 3339 format.
     * 
     * Notes:
     * This feature is only supported for card payments.
     * 
     * Default:
     * 
     * - Card-present payments: "PT36H" (36 hours) from the creation time.
     * - Card-not-present payments: "P7D" (7 days) from the creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delay_duration")
    public String delayDuration;

    public Payment withDelayDuration(String delayDuration) {
        this.delayDuration = delayDuration;
        return this;
    }
    
    /**
     * The read-only timestamp of when the `delay_action` is automatically applied,
     * in RFC 3339 format.
     * 
     * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
     * fields. The `created_at` field is generated by Square and might not exactly match the
     * time on your local machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delayed_until")
    public String delayedUntil;

    public Payment withDelayedUntil(String delayedUntil) {
        this.delayedUntil = delayedUntil;
        return this;
    }
    
    /**
     * An optional ID of the employee associated with taking the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    public String employeeId;

    public Payment withEmployeeId(String employeeId) {
        this.employeeId = employeeId;
        return this;
    }
    
    /**
     * Stores details about an external payment. Contains only non-confidential information.
     * For more information, see 
     * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_details")
    public ExternalPaymentDetails externalDetails;

    public Payment withExternalDetails(ExternalPaymentDetails externalDetails) {
        this.externalDetails = externalDetails;
        return this;
    }
    
    /**
     * A unique ID for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Payment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the location associated with the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;

    public Payment withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * An optional note to include when creating a payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public Payment withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The ID of the order associated with the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_id")
    public String orderId;

    public Payment withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }
    
    /**
     * The processing fees and fee adjustments assessed by Square for this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_fee")
    public ProcessingFee[] processingFee;

    public Payment withProcessingFee(ProcessingFee[] processingFee) {
        this.processingFee = processingFee;
        return this;
    }
    
    /**
     * The payment's receipt number.
     * The field is missing if a payment is canceled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receipt_number")
    public String receiptNumber;

    public Payment withReceiptNumber(String receiptNumber) {
        this.receiptNumber = receiptNumber;
        return this;
    }
    
    /**
     * The URL for the payment's receipt.
     * The field is only populated for COMPLETED payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receipt_url")
    public String receiptUrl;

    public Payment withReceiptUrl(String receiptUrl) {
        this.receiptUrl = receiptUrl;
        return this;
    }
    
    /**
     * An optional ID that associates the payment with an entity in
     * another system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public String referenceId;

    public Payment withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * A list of `refund_id`s identifying refunds for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_ids")
    public String[] refundIds;

    public Payment withRefundIds(String[] refundIds) {
        this.refundIds = refundIds;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_money")
    public Money refundedMoney;

    public Payment withRefundedMoney(Money refundedMoney) {
        this.refundedMoney = refundedMoney;
        return this;
    }
    
    /**
     * Represents fraud risk information for the associated payment.
     * 
     * When you take a payment through Square's Payments API (using the `CreatePayment`
     * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
     * can use this information to determine the course of action (for example,
     * provide the goods/services or refund the payment).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("risk_evaluation")
    public RiskEvaluation riskEvaluation;

    public Payment withRiskEvaluation(RiskEvaluation riskEvaluation) {
        this.riskEvaluation = riskEvaluation;
        return this;
    }
    
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public Address shippingAddress;

    public Payment withShippingAddress(Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    /**
     * The source type for this payment.
     * 
     * Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_type")
    public String sourceType;

    public Payment withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     * Additional payment information that gets added to the customer's card statement
     * as part of the statement description.
     * 
     * Note that the `statement_description_identifier` might get truncated on the statement description
     * to fit the required information including the Square identifier (SQ *) and the name of the
     * seller taking the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_description_identifier")
    public String statementDescriptionIdentifier;

    public Payment withStatementDescriptionIdentifier(String statementDescriptionIdentifier) {
        this.statementDescriptionIdentifier = statementDescriptionIdentifier;
        return this;
    }
    
    /**
     * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Payment withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tip_money")
    public Money tipMoney;

    public Payment withTipMoney(Money tipMoney) {
        this.tipMoney = tipMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public Money totalMoney;

    public Payment withTotalMoney(Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * The timestamp of when the payment was last updated, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public Payment withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Used for optimistic concurrency. This opaque token identifies a specific version of the
     * `Payment` object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_token")
    public String versionToken;

    public Payment withVersionToken(String versionToken) {
        this.versionToken = versionToken;
        return this;
    }
    
    /**
     * Additional details about `WALLET` type payments. Contains only non-confidential information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wallet_details")
    public DigitalWalletDetails walletDetails;

    public Payment withWalletDetails(DigitalWalletDetails walletDetails) {
        this.walletDetails = walletDetails;
        return this;
    }
    
    public Payment(){}
}
