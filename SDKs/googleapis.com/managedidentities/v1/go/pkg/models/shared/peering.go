// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PeeringInput - Represents a Managed Service for Microsoft Active Directory Peering.
type PeeringInput struct {
	// Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork *string `json:"authorizedNetwork,omitempty"`
	// Required. Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
	DomainResource *string `json:"domainResource,omitempty"`
	// Optional. Resource labels to represent user-provided metadata.
	Labels map[string]string `json:"labels,omitempty"`
}

// PeeringStateEnum - Output only. The current state of this Peering.
type PeeringStateEnum string

const (
	PeeringStateEnumStateUnspecified PeeringStateEnum = "STATE_UNSPECIFIED"
	PeeringStateEnumCreating         PeeringStateEnum = "CREATING"
	PeeringStateEnumConnected        PeeringStateEnum = "CONNECTED"
	PeeringStateEnumDisconnected     PeeringStateEnum = "DISCONNECTED"
	PeeringStateEnumDeleting         PeeringStateEnum = "DELETING"
)

func (e PeeringStateEnum) ToPointer() *PeeringStateEnum {
	return &e
}

func (e *PeeringStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "CONNECTED":
		fallthrough
	case "DISCONNECTED":
		fallthrough
	case "DELETING":
		*e = PeeringStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeeringStateEnum: %v", v)
	}
}

// Peering - Represents a Managed Service for Microsoft Active Directory Peering.
type Peering struct {
	// Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork *string `json:"authorizedNetwork,omitempty"`
	// Output only. The time the instance was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Required. Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
	DomainResource *string `json:"domainResource,omitempty"`
	// Optional. Resource labels to represent user-provided metadata.
	Labels map[string]string `json:"labels,omitempty"`
	// Output only. Unique name of the peering in this scope including projects and location using the form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
	Name *string `json:"name,omitempty"`
	// Output only. The current state of this Peering.
	State *PeeringStateEnum `json:"state,omitempty"`
	// Output only. Additional information about the current status of this peering, if available.
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Output only. Last update time.
	UpdateTime *string `json:"updateTime,omitempty"`
}
