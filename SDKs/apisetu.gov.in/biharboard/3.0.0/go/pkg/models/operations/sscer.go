// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SscerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Roll No.
	Rroll string `json:"RROLL"`
	// Roll Code
	RrollCode string `json:"RROLL_CODE"`
	// Year
	Year string `json:"year"`
}

// SscerRequestBodyFormatEnum - The format of the certificate in response.
type SscerRequestBodyFormatEnum string

const (
	SscerRequestBodyFormatEnumPdf SscerRequestBodyFormatEnum = "pdf"
)

func (e *SscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SscerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SscerRequestBodyFormatEnum: %s", s)
	}
}

// SscerRequestBody - Request format
type SscerRequestBody struct {
	CertificateParameters *SscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Sscer504ApplicationJSONErrorEnum string

const (
	Sscer504ApplicationJSONErrorEnumGatewayTimeout Sscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Sscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Sscer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer504ApplicationJSONErrorDescriptionEnum string

const (
	Sscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Sscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Sscer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer504ApplicationJSON - Gateway timeout
type Sscer504ApplicationJSON struct {
	Error            *Sscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer503ApplicationJSONErrorEnum string

const (
	Sscer503ApplicationJSONErrorEnumServiceUnavailable Sscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Sscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Sscer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer503ApplicationJSONErrorDescriptionEnum string

const (
	Sscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Sscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Sscer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer503ApplicationJSON - Service unavailable
type Sscer503ApplicationJSON struct {
	Error            *Sscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer502ApplicationJSONErrorEnum string

const (
	Sscer502ApplicationJSONErrorEnumBadGatewy Sscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Sscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Sscer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer502ApplicationJSONErrorDescriptionEnum string

const (
	Sscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Sscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Sscer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer502ApplicationJSON - Bad gateway
type Sscer502ApplicationJSON struct {
	Error            *Sscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer500ApplicationJSONErrorEnum string

const (
	Sscer500ApplicationJSONErrorEnumInternalServerError Sscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Sscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Sscer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer500ApplicationJSONErrorDescriptionEnum string

const (
	Sscer500ApplicationJSONErrorDescriptionEnumInternalServerError Sscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Sscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Sscer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer500ApplicationJSON - Internal server error
type Sscer500ApplicationJSON struct {
	Error            *Sscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer404ApplicationJSONErrorEnum string

const (
	Sscer404ApplicationJSONErrorEnumRecordNotFound Sscer404ApplicationJSONErrorEnum = "record_not_found"
	Sscer404ApplicationJSONErrorEnumURLNotFound    Sscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Sscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sscer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer404ApplicationJSONErrorDescriptionEnum string

const (
	Sscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Sscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sscer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer404ApplicationJSON - No record found
type Sscer404ApplicationJSON struct {
	Error            *Sscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer401ApplicationJSONErrorEnum string

const (
	Sscer401ApplicationJSONErrorEnumInvalidAuthentication Sscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Sscer401ApplicationJSONErrorEnumInvalidAuthorization  Sscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Sscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sscer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer401ApplicationJSONErrorDescriptionEnum string

const (
	Sscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Sscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sscer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer401ApplicationJSON - Unauthorized access
type Sscer401ApplicationJSON struct {
	Error            *Sscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sscer400ApplicationJSONErrorEnum string

const (
	Sscer400ApplicationJSONErrorEnumMissingParameter Sscer400ApplicationJSONErrorEnum = "missing_parameter"
	Sscer400ApplicationJSONErrorEnumInvalidParameter Sscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Sscer400ApplicationJSONErrorEnumInvalidFormat    Sscer400ApplicationJSONErrorEnum = "invalid_format"
	Sscer400ApplicationJSONErrorEnumInvalidTxnid     Sscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Sscer400ApplicationJSONErrorEnumInvalidConsentid Sscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Sscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sscer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Sscer400ApplicationJSONErrorDescriptionEnum string

const (
	Sscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Sscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Sscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sscer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sscer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sscer400ApplicationJSON - Bad request
type Sscer400ApplicationJSON struct {
	Error            *Sscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sscer400ApplicationJSONObject *Sscer400ApplicationJSON
	// Unauthorized access
	Sscer401ApplicationJSONObject *Sscer401ApplicationJSON
	// No record found
	Sscer404ApplicationJSONObject *Sscer404ApplicationJSON
	// Internal server error
	Sscer500ApplicationJSONObject *Sscer500ApplicationJSON
	// Bad gateway
	Sscer502ApplicationJSONObject *Sscer502ApplicationJSON
	// Service unavailable
	Sscer503ApplicationJSONObject *Sscer503ApplicationJSON
	// Gateway timeout
	Sscer504ApplicationJSONObject *Sscer504ApplicationJSON
}
