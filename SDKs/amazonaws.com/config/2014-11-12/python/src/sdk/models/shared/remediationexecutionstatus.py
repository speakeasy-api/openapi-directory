"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import remediationexecutionstate_enum as shared_remediationexecutionstate_enum
from ..shared import remediationexecutionstep as shared_remediationexecutionstep
from ..shared import resourcekey as shared_resourcekey
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemediationExecutionStatus:
    r"""Provides details of the current status of the invoked remediation action for that resource."""
    
    invocation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvocationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdatedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    resource_key: Optional[shared_resourcekey.ResourceKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceKey'), 'exclude': lambda f: f is None }})
    r"""The details that identify a resource within Config, including the resource type and resource ID."""  
    state: Optional[shared_remediationexecutionstate_enum.RemediationExecutionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    step_details: Optional[list[shared_remediationexecutionstep.RemediationExecutionStep]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StepDetails'), 'exclude': lambda f: f is None }})  
    