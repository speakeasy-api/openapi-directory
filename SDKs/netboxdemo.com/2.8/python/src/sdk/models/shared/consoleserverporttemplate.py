"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nesteddevicetype as shared_nesteddevicetype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConsoleServerPortTemplateTypeLabelEnum(str, Enum):
    DE_9 = 'DE-9'
    DB_25 = 'DB-25'
    RJ_11 = 'RJ-11'
    RJ_12 = 'RJ-12'
    RJ_45 = 'RJ-45'
    USB_TYPE_A = 'USB Type A'
    USB_TYPE_B = 'USB Type B'
    USB_TYPE_C = 'USB Type C'
    USB_MINI_A = 'USB Mini A'
    USB_MINI_B = 'USB Mini B'
    USB_MICRO_A = 'USB Micro A'
    USB_MICRO_B = 'USB Micro B'
    OTHER = 'Other'

class ConsoleServerPortTemplateTypeValueEnum(str, Enum):
    DE_9 = 'de-9'
    DB_25 = 'db-25'
    RJ_11 = 'rj-11'
    RJ_12 = 'rj-12'
    RJ_45 = 'rj-45'
    USB_A = 'usb-a'
    USB_B = 'usb-b'
    USB_C = 'usb-c'
    USB_MINI_A = 'usb-mini-a'
    USB_MINI_B = 'usb-mini-b'
    USB_MICRO_A = 'usb-micro-a'
    USB_MICRO_B = 'usb-micro-b'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsoleServerPortTemplateType:
    
    label: ConsoleServerPortTemplateTypeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: ConsoleServerPortTemplateTypeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsoleServerPortTemplate:
    
    device_type: shared_nesteddevicetype.NestedDeviceType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[ConsoleServerPortTemplateType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    