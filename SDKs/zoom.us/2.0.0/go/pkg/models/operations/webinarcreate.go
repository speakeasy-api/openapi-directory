// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type WebinarCreateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarCreatePathParams struct {
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum string

const (
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnumMinus1 WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "-1"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnumOne    WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "1"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnumTwo    WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "2"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnumThree  WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "3"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnumFour   WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "4"
)

func (e *WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum string

const (
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumOne   WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "1"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumTwo   WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "2"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumThree WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "3"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFour  WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "4"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFive  WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "5"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSix   WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "6"
	WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSeven WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "7"
)

func (e *WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum - Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum string

const (
	WebinarCreateApplicationJSONRecurrenceWebinarTypeEnumOne   WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum = "1"
	WebinarCreateApplicationJSONRecurrenceWebinarTypeEnumTwo   WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum = "2"
	WebinarCreateApplicationJSONRecurrenceWebinarTypeEnumThree WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum = "3"
)

func (e *WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONRecurrenceWebinar - Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
type WebinarCreateApplicationJSONRecurrenceWebinar struct {
	// Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the webinar will recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *WebinarCreateApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type WebinarCreateApplicationJSONRecurrenceWebinarTypeEnum `json:"type"`
	// Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat. <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `"1"` as the value of this field.  <br><br> **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	// <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	//
	//
	WeeklyDays *string `json:"weekly_days,omitempty"`
}

// WebinarCreateApplicationJSONSettingsApprovalTypeEnum - The default value is `2`. To enable registration required, set the approval type to `0` or `1`.  Values include:<br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type WebinarCreateApplicationJSONSettingsApprovalTypeEnum string

const (
	WebinarCreateApplicationJSONSettingsApprovalTypeEnumZero WebinarCreateApplicationJSONSettingsApprovalTypeEnum = "0"
	WebinarCreateApplicationJSONSettingsApprovalTypeEnumOne  WebinarCreateApplicationJSONSettingsApprovalTypeEnum = "1"
	WebinarCreateApplicationJSONSettingsApprovalTypeEnumTwo  WebinarCreateApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *WebinarCreateApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = WebinarCreateApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreateApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.
type WebinarCreateApplicationJSONSettingsAudioEnum string

const (
	WebinarCreateApplicationJSONSettingsAudioEnumBoth      WebinarCreateApplicationJSONSettingsAudioEnum = "both"
	WebinarCreateApplicationJSONSettingsAudioEnumTelephony WebinarCreateApplicationJSONSettingsAudioEnum = "telephony"
	WebinarCreateApplicationJSONSettingsAudioEnumVoip      WebinarCreateApplicationJSONSettingsAudioEnum = "voip"
)

func (e *WebinarCreateApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = WebinarCreateApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsAudioEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type WebinarCreateApplicationJSONSettingsAutoRecordingEnum string

const (
	WebinarCreateApplicationJSONSettingsAutoRecordingEnumLocal WebinarCreateApplicationJSONSettingsAutoRecordingEnum = "local"
	WebinarCreateApplicationJSONSettingsAutoRecordingEnumCloud WebinarCreateApplicationJSONSettingsAutoRecordingEnum = "cloud"
	WebinarCreateApplicationJSONSettingsAutoRecordingEnumNone  WebinarCreateApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *WebinarCreateApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = WebinarCreateApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumThree WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumOnly WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumAll  WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type WebinarCreateApplicationJSONSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool `json:"allow_anonymous_questions,omitempty"`
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *WebinarCreateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum `json:"answer_questions,omitempty"`
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool `json:"attendees_can_comment,omitempty"`
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool `json:"attendees_can_upvote,omitempty"`
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool `json:"enable,omitempty"`
}

// WebinarCreateApplicationJSONSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type WebinarCreateApplicationJSONSettingsRegistrationTypeEnum string

const (
	WebinarCreateApplicationJSONSettingsRegistrationTypeEnumOne   WebinarCreateApplicationJSONSettingsRegistrationTypeEnum = "1"
	WebinarCreateApplicationJSONSettingsRegistrationTypeEnumTwo   WebinarCreateApplicationJSONSettingsRegistrationTypeEnum = "2"
	WebinarCreateApplicationJSONSettingsRegistrationTypeEnumThree WebinarCreateApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *WebinarCreateApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreateApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSONSettings - Create Webinar settings.
type WebinarCreateApplicationJSONSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// The default value is `2`. To enable registration required, set the approval type to `0` or `1`.  Values include:<br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *WebinarCreateApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *WebinarCreateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification `json:"attendees_and_panelists_reminder_email_notification,omitempty"`
	// Determine how participants can join the audio portion of the meeting.
	Audio *WebinarCreateApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// Meeting authentication domains. This option, allows you to specify the rule so that Zoom users, whose email address contains a certain domain, can join the Webinar. You can either provide multiple domains, using a comma in between and/or use a wildcard for listing domains.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Specify the authentication type for users to join a Webinar with`meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings).
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *WebinarCreateApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Close registration after event date.
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string `json:"email_language,omitempty"`
	// Only signed-in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in future.** <br><br> Instead of this field, use the "meeting_authentication", "authentication_option" and/or "authentication_domains" fields to establish the authentication mechanism for this Webinar.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed-in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in future.** <br><br> Instead of this field, use the "authentication_domains" field for this Webinar.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *WebinarCreateApplicationJSONSettingsFollowUpAbsenteesEmailNotification `json:"follow_up_absentees_email_notification,omitempty"`
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *WebinarCreateApplicationJSONSettingsFollowUpAttendeesEmailNotification `json:"follow_up_attendees_email_notification,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Default to HD video.
	HdVideo *bool `json:"hd_video,omitempty"`
	// Start video when host joins webinar.
	HostVideo *bool `json:"host_video,omitempty"`
	// Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Make the webinar on-demand
	OnDemand *bool `json:"on_demand,omitempty"`
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool `json:"panelists_invitation_email_notification,omitempty"`
	// Start video when panelists join webinar.
	PanelistsVideo *bool `json:"panelists_video,omitempty"`
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool `json:"post_webinar_survey,omitempty"`
	// Enable practice session.
	PracticeSession *bool `json:"practice_session,omitempty"`
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *WebinarCreateApplicationJSONSettingsQuestionAndAnswer `json:"question_and_answer,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64 `json:"registrants_restrict_number,omitempty"`
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *WebinarCreateApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the registration page.
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Survey url for post webinar survey
	SurveyURL *string `json:"survey_url,omitempty"`
}

type WebinarCreateApplicationJSONTrackingFields struct {
	// Tracking fields type
	Field string `json:"field"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// WebinarCreateApplicationJSONTypeEnum - Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type WebinarCreateApplicationJSONTypeEnum string

const (
	WebinarCreateApplicationJSONTypeEnumFive WebinarCreateApplicationJSONTypeEnum = "5"
	WebinarCreateApplicationJSONTypeEnumSix  WebinarCreateApplicationJSONTypeEnum = "6"
	WebinarCreateApplicationJSONTypeEnumNine WebinarCreateApplicationJSONTypeEnum = "9"
)

func (e *WebinarCreateApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = WebinarCreateApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreateApplicationJSONTypeEnum: %s", s)
	}
}

// WebinarCreateApplicationJSON - Base webinar object for sessions.
type WebinarCreateApplicationJSON struct {
	// Webinar description.
	Agenda *string `json:"agenda,omitempty"`
	// Webinar duration (minutes). Used for scheduled webinars only.
	Duration *int64 `json:"duration,omitempty"`
	// Webinar passcode. Passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !]. Max of 10 characters.
	//
	// If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	//
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	//
	//
	//
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
	Recurrence *WebinarCreateApplicationJSONRecurrenceWebinar `json:"recurrence,omitempty"`
	// Create Webinar settings.
	Settings *WebinarCreateApplicationJSONSettings `json:"settings,omitempty"`
	// Webinar start time. We support two formats for `start_time` - local time and GMT.<br>
	//
	// To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`.
	//
	// To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.
	//
	// The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.
	Timezone *string `json:"timezone,omitempty"`
	// Webinar topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []WebinarCreateApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *WebinarCreateApplicationJSONTypeEnum `json:"type,omitempty"`
}

type WebinarCreateRequest struct {
	PathParams WebinarCreatePathParams
	Request    WebinarCreateApplicationJSON `request:"mediaType=application/json"`
	Security   WebinarCreateSecurity
}

// WebinarCreate201ApplicationXMLOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type WebinarCreate201ApplicationXMLOccurrences struct {
	// Duration.
	Duration *int64
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string
	// Start time.
	StartTime *time.Time
	// Occurrence status.
	Status *string
}

// WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum string

const (
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnumMinus1 WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "-1"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnumOne    WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "1"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnumTwo    WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "2"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnumThree  WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "3"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnumFour   WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "4"
)

func (e *WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum string

const (
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumOne   WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "1"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumTwo   WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "2"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumThree WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "3"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumFour  WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "4"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumFive  WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "5"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumSix   WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "6"
	WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumSeven WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "7"
)

func (e *WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum - Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum string

const (
	WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnumOne   WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum = "1"
	WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnumTwo   WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum = "2"
	WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnumThree WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum = "3"
)

func (e *WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLRecurrenceWebinar - Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
type WebinarCreate201ApplicationXMLRecurrenceWebinar struct {
	// Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time
	// Select how many times the webinar will recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekEnum
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *WebinarCreate201ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum
	// Define the interval at which the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
	RepeatInterval *int64
	// Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type WebinarCreate201ApplicationXMLRecurrenceWebinarTypeEnum
	// Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat. <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `"1"` as the value of this field.  <br><br> **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	// <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	//
	//
	WeeklyDays *string
}

// WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum - `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum string

const (
	WebinarCreate201ApplicationXMLSettingsApprovalTypeEnumZero WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum = "0"
	WebinarCreate201ApplicationXMLSettingsApprovalTypeEnumOne  WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum = "1"
	WebinarCreate201ApplicationXMLSettingsApprovalTypeEnumTwo  WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum = "2"
)

func (e *WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum
}

// WebinarCreate201ApplicationXMLSettingsAudioEnum - Determine how participants can join the audio portion of the webinar.
type WebinarCreate201ApplicationXMLSettingsAudioEnum string

const (
	WebinarCreate201ApplicationXMLSettingsAudioEnumBoth      WebinarCreate201ApplicationXMLSettingsAudioEnum = "both"
	WebinarCreate201ApplicationXMLSettingsAudioEnumTelephony WebinarCreate201ApplicationXMLSettingsAudioEnum = "telephony"
	WebinarCreate201ApplicationXMLSettingsAudioEnumVoip      WebinarCreate201ApplicationXMLSettingsAudioEnum = "voip"
)

func (e *WebinarCreate201ApplicationXMLSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = WebinarCreate201ApplicationXMLSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsAudioEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum string

const (
	WebinarCreate201ApplicationXMLSettingsAutoRecordingEnumLocal WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum = "local"
	WebinarCreate201ApplicationXMLSettingsAutoRecordingEnumCloud WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum = "cloud"
	WebinarCreate201ApplicationXMLSettingsAutoRecordingEnumNone  WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum = "none"
)

func (e *WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum
}

// WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumThree WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum
}

// WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnumOnly WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnumAll  WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type WebinarCreate201ApplicationXMLSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *WebinarCreate201ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool
}

// WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum string

const (
	WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnumOne   WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum = "1"
	WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnumTwo   WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum = "2"
	WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnumThree WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum = "3"
)

func (e *WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXMLSettings - Webinar settings.
type WebinarCreate201ApplicationXMLSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *WebinarCreate201ApplicationXMLSettingsApprovalTypeEnum
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *WebinarCreate201ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification
	// Determine how participants can join the audio portion of the webinar.
	Audio *WebinarCreate201ApplicationXMLSettingsAudioEnum
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string
	// Webinar authentication option id.
	AuthenticationOption *string
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *WebinarCreate201ApplicationXMLSettingsAutoRecordingEnum
	// Close registration after event date.
	CloseRegistration *bool
	// Contact email for registration
	ContactEmail *string
	// Contact name for registration
	ContactName *string
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLogin *bool
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLoginDomains *string
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *WebinarCreate201ApplicationXMLSettingsFollowUpAbsenteesEmailNotification
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *WebinarCreate201ApplicationXMLSettingsFollowUpAttendeesEmailNotification
	// List of global dial-in countries
	GlobalDialInCountries []string
	// Default to HD video.
	HdVideo *bool
	// Start video when host joins webinar.
	HostVideo *bool
	// `true`- Only authenticated users can join Webinar.
	MeetingAuthentication *bool
	// Send notification email to registrants when the host updates a webinar.
	NotifyRegistrants *bool
	// Make the webinar on-demand
	OnDemand *bool
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool
	// Start video when panelists join webinar.
	PanelistsVideo *bool
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool
	// Enable practice session.
	PracticeSession *bool
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *WebinarCreate201ApplicationXMLSettingsQuestionAndAnswer
	// Send confirmation email to registrants
	RegistrantsConfirmationEmail *bool
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *WebinarCreate201ApplicationXMLSettingsRegistrationTypeEnum
	// Show social share buttons on the registration page.
	ShowShareButton *bool
	// Survey url for post webinar survey
	SurveyURL *string
}

type WebinarCreate201ApplicationXMLTrackingFields struct {
	// Tracking fields type
	Field *string
	// Tracking fields value
	Value *string
}

// WebinarCreate201ApplicationXMLTypeEnum - Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type WebinarCreate201ApplicationXMLTypeEnum string

const (
	WebinarCreate201ApplicationXMLTypeEnumFive WebinarCreate201ApplicationXMLTypeEnum = "5"
	WebinarCreate201ApplicationXMLTypeEnumSix  WebinarCreate201ApplicationXMLTypeEnum = "6"
	WebinarCreate201ApplicationXMLTypeEnumNine WebinarCreate201ApplicationXMLTypeEnum = "9"
)

func (e *WebinarCreate201ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = WebinarCreate201ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationXMLTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationXML - Webinar object.
type WebinarCreate201ApplicationXML struct {
	// Webinar agenda.
	Agenda *string
	// Create time.
	CreatedAt *time.Time
	// Webinar duration.
	Duration *int64
	// Email address of the meeting host.
	HostEmail *string
	// ID of the user set as host of the webinar.
	HostID *string
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64
	// URL to join the Webinar. This URL should only be shared with the users who should be invited to the Webinar.
	JoinURL *string
	// Array of occurrence objects.
	Occurrences []WebinarCreate201ApplicationXMLOccurrences
	// Webinar passcode.
	//
	// If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	//
	//
	//
	//
	//
	Password *string
	// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
	Recurrence *WebinarCreate201ApplicationXMLRecurrenceWebinar
	// Specify whether or not registrants of this Webinar should receieve confirmation emails.
	RegistrantsConfirmationEmail *bool
	// Webinar settings.
	Settings *WebinarCreate201ApplicationXMLSettings
	// Webinar start time in GMT/UTC.
	StartTime *time.Time
	// <br><aside>The <code>start_url</code> of a Webinar is a URL using which a host or an alternative host can start the Webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the latest value for the <code>start_url</code> field programmatically (after expiry), you must call the [Retrieve a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinar) and refer to the value of the <code>start_url</code> field in the response.</aside><br><br><br>
	StartURL *string
	// Unique identifier of the Webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [List Webinar Templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/listwebinartemplates) API.
	// You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.
	TemplateID *string
	// Time zone to format start_time.
	Timezone *string
	// Webinar topic.
	Topic *string
	// Tracking fields
	TrackingFields []WebinarCreate201ApplicationXMLTrackingFields
	// Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *WebinarCreate201ApplicationXMLTypeEnum
	// Unique identifier of a Webinar. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of uuid for the same webinar will be different from when it was scheduled.
	UUID *string
}

// WebinarCreate201ApplicationJSONOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type WebinarCreate201ApplicationJSONOccurrences struct {
	// Duration.
	Duration *int64 `json:"duration,omitempty"`
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string `json:"occurrence_id,omitempty"`
	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Occurrence status.
	Status *string `json:"status,omitempty"`
}

// WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum string

const (
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnumMinus1 WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "-1"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnumOne    WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "1"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnumTwo    WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "2"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnumThree  WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "3"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnumFour   WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "4"
)

func (e *WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum string

const (
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumOne   WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "1"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumTwo   WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "2"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumThree WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "3"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFour  WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "4"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFive  WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "5"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSix   WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "6"
	WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSeven WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "7"
)

func (e *WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum - Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum string

const (
	WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnumOne   WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum = "1"
	WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnumTwo   WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum = "2"
	WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnumThree WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum = "3"
)

func (e *WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONRecurrenceWebinar - Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
type WebinarCreate201ApplicationJSONRecurrenceWebinar struct {
	// Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the webinar will recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *WebinarCreate201ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type WebinarCreate201ApplicationJSONRecurrenceWebinarTypeEnum `json:"type"`
	// Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat. <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `"1"` as the value of this field.  <br><br> **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	// <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	//
	//
	WeeklyDays *string `json:"weekly_days,omitempty"`
}

// WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum - `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum string

const (
	WebinarCreate201ApplicationJSONSettingsApprovalTypeEnumZero WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum = "0"
	WebinarCreate201ApplicationJSONSettingsApprovalTypeEnumOne  WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum = "1"
	WebinarCreate201ApplicationJSONSettingsApprovalTypeEnumTwo  WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreate201ApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the webinar.
type WebinarCreate201ApplicationJSONSettingsAudioEnum string

const (
	WebinarCreate201ApplicationJSONSettingsAudioEnumBoth      WebinarCreate201ApplicationJSONSettingsAudioEnum = "both"
	WebinarCreate201ApplicationJSONSettingsAudioEnumTelephony WebinarCreate201ApplicationJSONSettingsAudioEnum = "telephony"
	WebinarCreate201ApplicationJSONSettingsAudioEnumVoip      WebinarCreate201ApplicationJSONSettingsAudioEnum = "voip"
)

func (e *WebinarCreate201ApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = WebinarCreate201ApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsAudioEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum string

const (
	WebinarCreate201ApplicationJSONSettingsAutoRecordingEnumLocal WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum = "local"
	WebinarCreate201ApplicationJSONSettingsAutoRecordingEnumCloud WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum = "cloud"
	WebinarCreate201ApplicationJSONSettingsAutoRecordingEnumNone  WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumThree WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumOnly WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumAll  WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type WebinarCreate201ApplicationJSONSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool `json:"allow_anonymous_questions,omitempty"`
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *WebinarCreate201ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum `json:"answer_questions,omitempty"`
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool `json:"attendees_can_comment,omitempty"`
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool `json:"attendees_can_upvote,omitempty"`
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool `json:"enable,omitempty"`
}

// WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum string

const (
	WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnumOne   WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum = "1"
	WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnumTwo   WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum = "2"
	WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnumThree WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSONSettings - Webinar settings.
type WebinarCreate201ApplicationJSONSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *WebinarCreate201ApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *WebinarCreate201ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification `json:"attendees_and_panelists_reminder_email_notification,omitempty"`
	// Determine how participants can join the audio portion of the webinar.
	Audio *WebinarCreate201ApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Webinar authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *WebinarCreate201ApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Close registration after event date.
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string `json:"email_language,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *WebinarCreate201ApplicationJSONSettingsFollowUpAbsenteesEmailNotification `json:"follow_up_absentees_email_notification,omitempty"`
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *WebinarCreate201ApplicationJSONSettingsFollowUpAttendeesEmailNotification `json:"follow_up_attendees_email_notification,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Default to HD video.
	HdVideo *bool `json:"hd_video,omitempty"`
	// Start video when host joins webinar.
	HostVideo *bool `json:"host_video,omitempty"`
	// `true`- Only authenticated users can join Webinar.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Send notification email to registrants when the host updates a webinar.
	NotifyRegistrants *bool `json:"notify_registrants,omitempty"`
	// Make the webinar on-demand
	OnDemand *bool `json:"on_demand,omitempty"`
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool `json:"panelists_invitation_email_notification,omitempty"`
	// Start video when panelists join webinar.
	PanelistsVideo *bool `json:"panelists_video,omitempty"`
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool `json:"post_webinar_survey,omitempty"`
	// Enable practice session.
	PracticeSession *bool `json:"practice_session,omitempty"`
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *WebinarCreate201ApplicationJSONSettingsQuestionAndAnswer `json:"question_and_answer,omitempty"`
	// Send confirmation email to registrants
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64 `json:"registrants_restrict_number,omitempty"`
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *WebinarCreate201ApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the registration page.
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Survey url for post webinar survey
	SurveyURL *string `json:"survey_url,omitempty"`
}

type WebinarCreate201ApplicationJSONTrackingFields struct {
	// Tracking fields type
	Field *string `json:"field,omitempty"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// WebinarCreate201ApplicationJSONTypeEnum - Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type WebinarCreate201ApplicationJSONTypeEnum string

const (
	WebinarCreate201ApplicationJSONTypeEnumFive WebinarCreate201ApplicationJSONTypeEnum = "5"
	WebinarCreate201ApplicationJSONTypeEnumSix  WebinarCreate201ApplicationJSONTypeEnum = "6"
	WebinarCreate201ApplicationJSONTypeEnumNine WebinarCreate201ApplicationJSONTypeEnum = "9"
)

func (e *WebinarCreate201ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = WebinarCreate201ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarCreate201ApplicationJSONTypeEnum: %s", s)
	}
}

// WebinarCreate201ApplicationJSON - Webinar object.
type WebinarCreate201ApplicationJSON struct {
	// Webinar agenda.
	Agenda *string `json:"agenda,omitempty"`
	// Create time.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Webinar duration.
	Duration *int64 `json:"duration,omitempty"`
	// Email address of the meeting host.
	HostEmail *string `json:"host_email,omitempty"`
	// ID of the user set as host of the webinar.
	HostID *string `json:"host_id,omitempty"`
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64 `json:"id,omitempty"`
	// URL to join the Webinar. This URL should only be shared with the users who should be invited to the Webinar.
	JoinURL *string `json:"join_url,omitempty"`
	// Array of occurrence objects.
	Occurrences []WebinarCreate201ApplicationJSONOccurrences `json:"occurrences,omitempty"`
	// Webinar passcode.
	//
	// If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	//
	//
	//
	//
	//
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
	Recurrence *WebinarCreate201ApplicationJSONRecurrenceWebinar `json:"recurrence,omitempty"`
	// Specify whether or not registrants of this Webinar should receieve confirmation emails.
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Webinar settings.
	Settings *WebinarCreate201ApplicationJSONSettings `json:"settings,omitempty"`
	// Webinar start time in GMT/UTC.
	StartTime *time.Time `json:"start_time,omitempty"`
	// <br><aside>The <code>start_url</code> of a Webinar is a URL using which a host or an alternative host can start the Webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the latest value for the <code>start_url</code> field programmatically (after expiry), you must call the [Retrieve a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinar) and refer to the value of the <code>start_url</code> field in the response.</aside><br><br><br>
	StartURL *string `json:"start_url,omitempty"`
	// Unique identifier of the Webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [List Webinar Templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/listwebinartemplates) API.
	// You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.
	TemplateID *string `json:"template_id,omitempty"`
	// Time zone to format start_time.
	Timezone *string `json:"timezone,omitempty"`
	// Webinar topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []WebinarCreate201ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *WebinarCreate201ApplicationJSONTypeEnum `json:"type,omitempty"`
	// Unique identifier of a Webinar. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of uuid for the same webinar will be different from when it was scheduled.
	UUID *string `json:"uuid,omitempty"`
}

type WebinarCreateResponse struct {
	Body        []byte
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201`<br>
	// Webinar created.
	WebinarCreate201ApplicationJSONObject *WebinarCreate201ApplicationJSON
}
