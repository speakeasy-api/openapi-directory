/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListDatasetContentsRequest {
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;
    public ListDatasetContentsRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;
    public ListDatasetContentsRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;
    public ListDatasetContentsRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;
    public ListDatasetContentsRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;
    public ListDatasetContentsRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;
    public ListDatasetContentsRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;
    public ListDatasetContentsRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    /**
     * The name of the dataset whose contents information you want to list.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=datasetName")
    public String datasetName;
    public ListDatasetContentsRequest withDatasetName(String datasetName) {
        this.datasetName = datasetName;
        return this;
    }
    
    /**
     * The maximum number of results to return in this request.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;
    public ListDatasetContentsRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * The token for the next set of results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nextToken")
    public String nextToken;
    public ListDatasetContentsRequest withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field &lt;code&gt;triggers.schedule&lt;/code&gt; in the &lt;code&gt;CreateDataset&lt;/code&gt; request. (timestamp)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scheduledBefore")
    public OffsetDateTime scheduledBefore;
    public ListDatasetContentsRequest withScheduledBefore(OffsetDateTime scheduledBefore) {
        this.scheduledBefore = scheduledBefore;
        return this;
    }
    
    /**
     * A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field &lt;code&gt;triggers.schedule&lt;/code&gt; in the &lt;code&gt;CreateDataset&lt;/code&gt; request. (timestamp)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scheduledOnOrAfter")
    public OffsetDateTime scheduledOnOrAfter;
    public ListDatasetContentsRequest withScheduledOnOrAfter(OffsetDateTime scheduledOnOrAfter) {
        this.scheduledOnOrAfter = scheduledOnOrAfter;
        return this;
    }
    
}
