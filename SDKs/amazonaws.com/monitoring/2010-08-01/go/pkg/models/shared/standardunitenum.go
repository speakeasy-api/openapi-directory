// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type StandardUnitEnum string

const (
	StandardUnitEnumSeconds         StandardUnitEnum = "Seconds"
	StandardUnitEnumMicroseconds    StandardUnitEnum = "Microseconds"
	StandardUnitEnumMilliseconds    StandardUnitEnum = "Milliseconds"
	StandardUnitEnumBytes           StandardUnitEnum = "Bytes"
	StandardUnitEnumKilobytes       StandardUnitEnum = "Kilobytes"
	StandardUnitEnumMegabytes       StandardUnitEnum = "Megabytes"
	StandardUnitEnumGigabytes       StandardUnitEnum = "Gigabytes"
	StandardUnitEnumTerabytes       StandardUnitEnum = "Terabytes"
	StandardUnitEnumBits            StandardUnitEnum = "Bits"
	StandardUnitEnumKilobits        StandardUnitEnum = "Kilobits"
	StandardUnitEnumMegabits        StandardUnitEnum = "Megabits"
	StandardUnitEnumGigabits        StandardUnitEnum = "Gigabits"
	StandardUnitEnumTerabits        StandardUnitEnum = "Terabits"
	StandardUnitEnumPercent         StandardUnitEnum = "Percent"
	StandardUnitEnumCount           StandardUnitEnum = "Count"
	StandardUnitEnumBytesSecond     StandardUnitEnum = "Bytes/Second"
	StandardUnitEnumKilobytesSecond StandardUnitEnum = "Kilobytes/Second"
	StandardUnitEnumMegabytesSecond StandardUnitEnum = "Megabytes/Second"
	StandardUnitEnumGigabytesSecond StandardUnitEnum = "Gigabytes/Second"
	StandardUnitEnumTerabytesSecond StandardUnitEnum = "Terabytes/Second"
	StandardUnitEnumBitsSecond      StandardUnitEnum = "Bits/Second"
	StandardUnitEnumKilobitsSecond  StandardUnitEnum = "Kilobits/Second"
	StandardUnitEnumMegabitsSecond  StandardUnitEnum = "Megabits/Second"
	StandardUnitEnumGigabitsSecond  StandardUnitEnum = "Gigabits/Second"
	StandardUnitEnumTerabitsSecond  StandardUnitEnum = "Terabits/Second"
	StandardUnitEnumCountSecond     StandardUnitEnum = "Count/Second"
	StandardUnitEnumNone            StandardUnitEnum = "None"
)

func (e StandardUnitEnum) ToPointer() *StandardUnitEnum {
	return &e
}

func (e *StandardUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Count":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		fallthrough
	case "None":
		*e = StandardUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StandardUnitEnum: %v", v)
	}
}
