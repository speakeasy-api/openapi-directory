"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListDigitalSignageContentRequest:
    
    folder_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'folder_id', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the folder where the content is located. Provide this field if you would like to filter the response by contents that are only available in a specific folder."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Specify the type of digital signane resource. The value can be one of the following:
    * `content`: Returns information about content files.
    * `folder`: Returns information about the folder where the content files are located.
    """  
    

@dataclasses.dataclass
class ListDigitalSignageContent200ApplicationXMLContents:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the content or the folder."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the content file or the folder."""  
    

@dataclasses.dataclass
class ListDigitalSignageContent200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK**<br>
    List returned.
    """
    
    contents: Optional[list[ListDigitalSignageContent200ApplicationXMLContents]] = dataclasses.field(default=None)  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListDigitalSignageContent200ApplicationJSONContents:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the content or the folder."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the content file or the folder."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListDigitalSignageContent200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK**<br>
    List returned.
    """
    
    contents: Optional[list[ListDigitalSignageContent200ApplicationJSONContents]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class ListDigitalSignageContentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_digital_signage_content_200_application_json_object: Optional[ListDigitalSignageContent200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**<br>
    List returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    