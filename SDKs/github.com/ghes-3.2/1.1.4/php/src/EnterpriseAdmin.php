<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EnterpriseAdmin 
{
	
	public const ENTERPRISE_ADMIN_ADD_AUTHORIZED_SSH_KEY_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_CREATE_ENTERPRISE_SERVER_LICENSE_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_ENABLE_OR_DISABLE_MAINTENANCE_MODE_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_GET_ALL_AUTHORIZED_SSH_KEYS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_GET_CONFIGURATION_STATUS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_GET_MAINTENANCE_STATUS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_GET_SETTINGS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_REMOVE_AUTHORIZED_SSH_KEY_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_SET_SETTINGS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_START_CONFIGURATION_PROCESS_SERVERS = [
		'https://{protocol}://{hostname}',
	];
	
	public const ENTERPRISE_ADMIN_UPGRADE_LICENSE_SERVERS = [
		'https://{protocol}://{hostname}',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add an authorized SSH key
     * 
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#add-an-authorized-ssh-key - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddAuthorizedSshKeyRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddAuthorizedSshKeyResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#add-an-authorized-ssh-key
     */
	public function enterpriseAdminAddAuthorizedSshKey(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddAuthorizedSshKeyRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddAuthorizedSshKeyResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_ADD_AUTHORIZED_SSH_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/settings/authorized-keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddAuthorizedSshKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SshKey>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add organization access to a self-hosted runner group in an enterprise
     * 
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
     */
	public function enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a self-hosted runner to a group for an enterprise
     * 
     * Adds a self-hosted runner to a runner group configured in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise`
     * scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise
     */
	public function enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a GitHub license
     * 
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
     * 
     * Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
     * 
     * When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
     * 
     * 1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
     * 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
     * 
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-github-enterprise-server-license - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateEnterpriseServerLicenseRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateEnterpriseServerLicenseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-github-enterprise-server-license
     */
	public function enterpriseAdminCreateEnterpriseServerLicense(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateEnterpriseServerLicenseRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateEnterpriseServerLicenseResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_CREATE_ENTERPRISE_SERVER_LICENSE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/start');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateEnterpriseServerLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
	
    /**
     * Create a global webhook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-global-webhook
     */
	public function enterpriseAdminCreateGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an impersonation OAuth token
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-an-impersonation-oauth-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-an-impersonation-oauth-token
     */
	public function enterpriseAdminCreateImpersonationOAuthToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}/authorizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateImpersonationOAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Authorization', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-an-organization
     */
	public function enterpriseAdminCreateOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/organizations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrganizationSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a pre-receive environment
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-pre-receive-environment
     */
	public function enterpriseAdminCreatePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a pre-receive hook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-pre-receive-hook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveHookRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveHookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-pre-receive-hook
     */
	public function enterpriseAdminCreatePreReceiveHook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveHookRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-hooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreatePreReceiveHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a registration token for an enterprise
     * 
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * 
     * #### Example using registration token
     * 
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     * 
     * ```
     * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-a-registration-token-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-a-registration-token-for-an-enterprise
     */
	public function enterpriseAdminCreateRegistrationTokenForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/registration-token', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticationToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a remove token for an enterprise
     * 
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * 
     * #### Example using remove token
     * 
     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
     * endpoint.
     * 
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-a-remove-token-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-a-remove-token-for-an-enterprise
     */
	public function enterpriseAdminCreateRemoveTokenForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/remove-token', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateRemoveTokenForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticationToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a self-hosted runner group for an enterprise
     * 
     * Creates a new self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a user
     * 
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
     * 
     * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
     * 
     * If the login name or email address is already associated with an account, the server will return a `422` response.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateUserRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#create-a-user
     */
	public function enterpriseAdminCreateUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateUserRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminCreateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SimpleUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a global webhook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-global-webhook
     */
	public function enterpriseAdminDeleteGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an impersonation OAuth token
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token
     */
	public function enterpriseAdminDeleteImpersonationOAuthToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}/authorizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteImpersonationOAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a personal access token
     * 
     * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-personal-access-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-personal-access-token
     */
	public function enterpriseAdminDeletePersonalAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/tokens/{token_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePersonalAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a pre-receive environment
     * 
     * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
     * 
     * The possible error messages are:
     * 
     * *   _Cannot modify or delete the default environment_
     * *   _Cannot delete environment that has hooks_
     * *   _Cannot delete environment when download is in progress_
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-pre-receive-environment
     */
	public function enterpriseAdminDeletePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminDeletePreReceiveEnvironment422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a pre-receive hook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-pre-receive-hook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-pre-receive-hook
     */
	public function enterpriseAdminDeletePreReceiveHook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePreReceiveHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a public key
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-public-key - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-public-key
     */
	public function enterpriseAdminDeletePublicKey(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/keys/{key_ids}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeletePublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a self-hosted runner from an enterprise
     * 
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise
     */
	public function enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a self-hosted runner group from an enterprise
     * 
     * Deletes a self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise
     */
	public function enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user
     * 
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
     * 
     * You can delete any user account except your own.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#delete-a-user
     */
	public function enterpriseAdminDeleteUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Demote a site administrator
     * 
     * You can demote any user account except your own.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#demote-a-site-administrator - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#demote-a-site-administrator
     */
	public function enterpriseAdminDemoteSiteAdministrator(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/site_admin', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDemoteSiteAdministratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Disable a selected organization for GitHub Actions in an enterprise
     * 
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Enable or disable maintenance mode
     * 
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableOrDisableMaintenanceModeRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableOrDisableMaintenanceModeResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode
     */
	public function enterpriseAdminEnableOrDisableMaintenanceMode(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableOrDisableMaintenanceModeRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableOrDisableMaintenanceModeResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_ENABLE_OR_DISABLE_MAINTENANCE_MODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/maintenance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableOrDisableMaintenanceModeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->maintenanceStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MaintenanceStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable a selected organization for GitHub Actions in an enterprise
     * 
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all authorized SSH keys
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-all-authorized-ssh-keys - API method documentation
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllAuthorizedSshKeysResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-all-authorized-ssh-keys
     */
	public function enterpriseAdminGetAllAuthorizedSshKeys(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllAuthorizedSshKeysResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_GET_ALL_AUTHORIZED_SSH_KEYS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/settings/authorized-keys');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllAuthorizedSshKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SshKey>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-statistics
     */
	public function enterpriseAdminGetAllStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/all');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get allowed actions for an enterprise
     * 
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-allowed-actions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-allowed-actions-for-an-enterprise
     */
	public function enterpriseAdminGetAllowedActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/selected-actions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAllowedActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->selectedActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SelectedActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the global announcement banner
     * 
     * Gets the current message and expiration date of the global announcement banner in your enterprise.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse
     */
	public function enterpriseAdminGetAnnouncement(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->announcement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Announcement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get comment statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-comment-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-comment-statistics
     */
	public function enterpriseAdminGetCommentStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/comments');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetCommentStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseCommentOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseCommentOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the configuration status
     * 
     * This endpoint allows you to check the status of the most recent configuration process:
     * 
     * Note that you may need to wait several seconds after you start a process before you can check its status.
     * 
     * The different statuses are:
     * 
     * | Status        | Description                       |
     * | ------------- | --------------------------------- |
     * | `PENDING`     | The job has not started yet       |
     * | `CONFIGURING` | The job is running                |
     * | `DONE`        | The job has finished correctly    |
     * | `FAILED`      | The job has finished unexpectedly |
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-configuration-status - API method documentation
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetConfigurationStatusResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-configuration-status
     */
	public function enterpriseAdminGetConfigurationStatus(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetConfigurationStatusResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_GET_CONFIGURATION_STATUS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/configcheck');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetConfigurationStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configurationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigurationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the download status for a pre-receive environment
     * 
     * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment
     */
	public function enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironmentDownloadStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironmentDownloadStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get gist statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-gist-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-gist-statistics
     */
	public function enterpriseAdminGetGistStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/gists');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGistStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseGistOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseGistOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Actions permissions for an enterprise
     * 
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-github-actions-permissions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-github-actions-permissions-for-an-enterprise
     */
	public function enterpriseAdminGetGithubActionsPermissionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsEnterprisePermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActionsEnterprisePermissions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a global webhook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-global-webhook
     */
	public function enterpriseAdminGetGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get hooks statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-hooks-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-hooks-statistics
     */
	public function enterpriseAdminGetHooksStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/hooks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetHooksStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseHookOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseHookOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get issue statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-issues-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-issues-statistics
     */
	public function enterpriseAdminGetIssueStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/issues');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetIssueStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseIssueOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseIssueOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get license information
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-license-information - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-license-information
     */
	public function enterpriseAdminGetLicenseInformation(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/settings/license');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetLicenseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the maintenance status
     * 
     * Check your installation's maintenance status:
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-maintenance-status - API method documentation
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMaintenanceStatusResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-the-maintenance-status
     */
	public function enterpriseAdminGetMaintenanceStatus(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMaintenanceStatusResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_GET_MAINTENANCE_STATUS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/maintenance');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMaintenanceStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->maintenanceStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MaintenanceStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get milestone statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-milestone-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-milestone-statistics
     */
	public function enterpriseAdminGetMilestoneStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/milestones');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetMilestoneStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseMilestoneOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseMilestoneOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get organization statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-organization-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-organization-statistics
     */
	public function enterpriseAdminGetOrgStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/orgs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetOrgStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseOrganizationOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseOrganizationOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get pages statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-pages-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-pages-statistics
     */
	public function enterpriseAdminGetPagesStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/pages');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPagesStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterprisePageOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterprisePageOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pre-receive environment
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-environment
     */
	public function enterpriseAdminGetPreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pre-receive hook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook
     */
	public function enterpriseAdminGetPreReceiveHook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pre-receive hook for an organization
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization
     */
	public function enterpriseAdminGetPreReceiveHookForOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrgPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a pre-receive hook for a repository
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository
     */
	public function enterpriseAdminGetPreReceiveHookForRepo(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPreReceiveHookForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepositoryPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get pull request statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-pull-requests-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-pull-requests-statistics
     */
	public function enterpriseAdminGetPullRequestStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/pulls');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetPullRequestStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterprisePullRequestOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterprisePullRequestOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get repository statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-repository-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-repository-statistics
     */
	public function enterpriseAdminGetRepoStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/repos');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetRepoStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseRepositoryOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseRepositoryOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a self-hosted runner for an enterprise
     * 
     * Gets a specific self-hosted runner configured in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise
     */
	public function enterpriseAdminGetSelfHostedRunnerForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runner = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Runner', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a self-hosted runner group for an enterprise
     * 
     * Gets a specific self-hosted runner group for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get settings
     * 
     * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#set-settings).
     * 
     * **Note:** You cannot retrieve the management console password with the Enterprise administration API.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-settings - API method documentation
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSettingsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-settings
     */
	public function enterpriseAdminGetSettings(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSettingsResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_GET_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/settings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get users statistics
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-users-statistics - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-users-statistics
     */
	public function enterpriseAdminGetUserStats(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/stats/users');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminGetUserStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseUserOverview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnterpriseUserOverview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List global webhooks
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-global-webhooks - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-global-webhooks
     */
	public function enterpriseAdminListGlobalWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListGlobalWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHooks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GlobalHook>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List organization access to a self-hosted runner group in an enterprise
     * 
     * Lists the organizations with access to a self-hosted runner group.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise
     */
	public function enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List personal access tokens
     * 
     * Lists personal access tokens for all users, including admin users.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-personal-access-tokens - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-personal-access-tokens
     */
	public function enterpriseAdminListPersonalAccessTokens(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/tokens');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPersonalAccessTokensResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorizations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Authorization>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List pre-receive environments
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-environments - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-environments
     */
	public function enterpriseAdminListPreReceiveEnvironments(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveEnvironmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List pre-receive hooks
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks
     */
	public function enterpriseAdminListPreReceiveHooks(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-hooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveHooks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PreReceiveHook>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List pre-receive hooks for an organization
     * 
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization
     */
	public function enterpriseAdminListPreReceiveHooksForOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/pre-receive-hooks', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgPreReceiveHooks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrgPreReceiveHook>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List pre-receive hooks for a repository
     * 
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository
     */
	public function enterpriseAdminListPreReceiveHooksForRepo(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pre-receive-hooks', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPreReceiveHooksForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryPreReceiveHooks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RepositoryPreReceiveHook>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public keys
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-public-keys - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#list-public-keys
     */
	public function enterpriseAdminListPublicKeys(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListPublicKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicKeyFulls = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PublicKeyFull>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List runner applications for an enterprise
     * 
     * Lists binaries for the runner application that you can download and run.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-runner-applications-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-runner-applications-for-an-enterprise
     */
	public function enterpriseAdminListRunnerApplicationsForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners/downloads', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListRunnerApplicationsForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RunnerApplication>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List selected organizations enabled for GitHub Actions in an enterprise
     * 
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runner groups for an enterprise
     * 
     * Lists all self-hosted runner groups for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runners for an enterprise
     * 
     * Lists all self-hosted runners configured for an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runners-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runners-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnersForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List self-hosted runners in a group for an enterprise
     * 
     * Lists the self-hosted runners that are in a specific enterprise group.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise
     */
	public function enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ping a global webhook
     * 
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.2/webhooks/#ping-event) to be sent to the webhook.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#ping-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#ping-a-global-webhook
     */
	public function enterpriseAdminPingGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}/pings', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPingGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Promote a user to be a site administrator
     * 
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator
     */
	public function enterpriseAdminPromoteUserToBeSiteAdministrator(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/site_admin', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminPromoteUserToBeSiteAdministratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove the global announcement banner
     * 
     * Removes the global announcement banner in your enterprise.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse
     */
	public function enterpriseAdminRemoveAnnouncement(
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an authorized SSH key
     * 
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-an-authorized-ssh-key - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAuthorizedSshKeyRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAuthorizedSshKeyResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-an-authorized-ssh-key
     */
	public function enterpriseAdminRemoveAuthorizedSshKey(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAuthorizedSshKeyRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAuthorizedSshKeyResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_REMOVE_AUTHORIZED_SSH_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/settings/authorized-keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveAuthorizedSshKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SshKey>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove organization access to a self-hosted runner group in an enterprise
     * 
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
     */
	public function enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove pre-receive hook enforcement for an organization
     * 
     * Removes any overrides for this hook at the org level for this org.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization
     */
	public function enterpriseAdminRemovePreReceiveHookEnforcementForOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrgPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove pre-receive hook enforcement for a repository
     * 
     * Deletes any overridden enforcement on this repository for the specified hook.
     * 
     * Responds with effective values inherited from owner and/or global level.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository
     */
	public function enterpriseAdminRemovePreReceiveHookEnforcementForRepo(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepositoryPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a self-hosted runner from a group for an enterprise
     * 
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise
     */
	public function enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set allowed actions for an enterprise
     * 
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-allowed-actions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-allowed-actions-for-an-enterprise
     */
	public function enterpriseAdminSetAllowedActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/selected-actions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "selectedActions", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAllowedActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set the global announcement banner
     * 
     * Sets the message and expiration time for the global announcement banner in your enterprise.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Announcement $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse
     */
	public function enterpriseAdminSetAnnouncement(
        \OpenAPI\OpenAPI\Models\Shared\Announcement $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprise/announcement');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->announcement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Announcement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set GitHub Actions permissions for an enterprise
     * 
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-github-actions-permissions-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-github-actions-permissions-for-an-enterprise
     */
	public function enterpriseAdminSetGithubActionsPermissionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set organization access for a self-hosted runner group in an enterprise
     * 
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
     */
	public function enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set selected organizations enabled for GitHub Actions in an enterprise
     * 
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise
     */
	public function enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/permissions/organizations', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set self-hosted runners in a group for an enterprise
     * 
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise
     */
	public function enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Set settings
     * 
     * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#get-settings).
     * 
     * **Notes:**
     * 
     * - The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * - You cannot set the management console password with the Enterprise administration API. Use the `ghe-set-password` utility to change the management console password. For more information, see "[Command-line utilities](https://docs.github.com/enterprise-server@3.2/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password)."
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#set-settings - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSettingsRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSettingsResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#set-settings
     */
	public function enterpriseAdminSetSettings(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSettingsRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSettingsResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_SET_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Start a configuration process
     * 
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#start-a-configuration-process - API method documentation
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartConfigurationProcessResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#start-a-configuration-process
     */
	public function enterpriseAdminStartConfigurationProcess(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartConfigurationProcessResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_START_CONFIGURATION_PROCESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/configure');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartConfigurationProcessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
	
    /**
     * Start a pre-receive environment download
     * 
     * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
     * 
     * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
     * 
     * The possible error messages are:
     * 
     * * _Cannot modify or delete the default environment_
     * * _Can not start a new download when a download is in progress_
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#start-a-pre-receive-environment-download - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#start-a-pre-receive-environment-download
     */
	public function enterpriseAdminStartPreReceiveEnvironmentDownload(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironmentDownloadStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironmentDownloadStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suspend a user
     * 
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.2/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
     * 
     * You can suspend any user account except your own.
     * 
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#suspend-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#suspend-a-user
     */
	public function enterpriseAdminSuspendUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/suspended', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Sync LDAP mapping for a team
     * 
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team
     */
	public function enterpriseAdminSyncLdapMappingForTeam(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/ldap/teams/{team_id}/sync', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminSyncLdapMappingForTeam201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForTeam201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sync LDAP mapping for a user
     * 
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user
     */
	public function enterpriseAdminSyncLdapMappingForUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/ldap/users/{username}/sync', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminSyncLdapMappingForUser201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminSyncLdapMappingForUser201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unsuspend a user
     * 
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.2/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#unsuspend-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#unsuspend-a-user
     */
	public function enterpriseAdminUnsuspendUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/suspended', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUnsuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a global webhook
     * 
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-global-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-global-webhook
     */
	public function enterpriseAdminUpdateGlobalWebhook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateGlobalWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalHook2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalHook2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update LDAP mapping for a team
     * 
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.2/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.2/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
     * 
     * If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team
     */
	public function enterpriseAdminUpdateLdapMappingForTeam(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/ldap/teams/{team_id}/mapping', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ldapMappingTeam = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LdapMappingTeam', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update LDAP mapping for a user
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user
     */
	public function enterpriseAdminUpdateLdapMappingForUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/ldap/users/{username}/mapping', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateLdapMappingForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ldapMappingUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LdapMappingUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization name
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-an-organization-name - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-an-organization-name
     */
	public function enterpriseAdminUpdateOrgName(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/organizations/{org}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminUpdateOrgName202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateOrgName202ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a pre-receive environment
     * 
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-pre-receive-environment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-pre-receive-environment
     */
	public function enterpriseAdminUpdatePreReceiveEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-environments/{pre_receive_environment_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveEnvironment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a pre-receive hook
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-pre-receive-hook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-a-pre-receive-hook
     */
	public function enterpriseAdminUpdatePreReceiveHook(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update pre-receive hook enforcement for an organization
     * 
     * For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization
     */
	public function enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrgPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update pre-receive hook enforcement for a repository
     * 
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository
     */
	public function enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryPreReceiveHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepositoryPreReceiveHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a self-hosted runner group for an enterprise
     * 
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
     * 
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.2/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise
     */
	public function enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runnerGroupsEnterprise = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunnerGroupsEnterprise', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the username for a user
     * 
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-the-username-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#update-the-username-for-a-user
     */
	public function enterpriseAdminUpdateUsernameForUser(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{username}', \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enterpriseAdminUpdateUsernameForUser202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpdateUsernameForUser202ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrade a license
     * 
     * This API upgrades your license and also triggers the configuration process.
     * 
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#upgrade-a-license - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpgradeLicenseRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpgradeLicenseResponse
     * @see https://docs.github.com/enterprise-server@3.2/rest/reference/enterprise-admin#upgrade-a-license
     */
	public function enterpriseAdminUpgradeLicense(
        \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpgradeLicenseRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpgradeLicenseResponse
    {
        $baseUrl = EnterpriseAdmin::ENTERPRISE_ADMIN_UPGRADE_LICENSE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/api/upgrade');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnterpriseAdminUpgradeLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
}