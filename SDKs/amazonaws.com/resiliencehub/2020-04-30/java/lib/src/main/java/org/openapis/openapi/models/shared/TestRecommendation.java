/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestRecommendation - Defines a test recommendation.
 */
public class TestRecommendation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appComponentName")
    public String appComponentName;
    public TestRecommendation withAppComponentName(String appComponentName) {
        this.appComponentName = appComponentName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependsOnAlarms")
    public String[] dependsOnAlarms;
    public TestRecommendation withDependsOnAlarms(String[] dependsOnAlarms) {
        this.dependsOnAlarms = dependsOnAlarms;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public TestRecommendation withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intent")
    public String intent;
    public TestRecommendation withIntent(String intent) {
        this.intent = intent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public RecommendationItem[] items;
    public TestRecommendation withItems(RecommendationItem[] items) {
        this.items = items;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TestRecommendation withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prerequisite")
    public String prerequisite;
    public TestRecommendation withPrerequisite(String prerequisite) {
        this.prerequisite = prerequisite;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendationId")
    public String recommendationId;
    public TestRecommendation withRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
        return this;
    }
    
    @JsonProperty("referenceId")
    public String referenceId;
    public TestRecommendation withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("risk")
    public TestRiskEnum risk;
    public TestRecommendation withRisk(TestRiskEnum risk) {
        this.risk = risk;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TestTypeEnum type;
    public TestRecommendation withType(TestTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
