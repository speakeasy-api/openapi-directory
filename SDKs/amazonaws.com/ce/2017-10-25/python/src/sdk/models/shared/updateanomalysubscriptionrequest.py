"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import anomalysubscriptionfrequency_enum as shared_anomalysubscriptionfrequency_enum
from ..shared import expression as shared_expression
from ..shared import subscriber as shared_subscriber
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAnomalySubscriptionRequest:
    
    subscription_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionArn') }})  
    frequency: Optional[shared_anomalysubscriptionfrequency_enum.AnomalySubscriptionFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Frequency'), 'exclude': lambda f: f is None }})  
    monitor_arn_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitorArnList'), 'exclude': lambda f: f is None }})  
    subscribers: Optional[list[shared_subscriber.Subscriber]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subscribers'), 'exclude': lambda f: f is None }})  
    subscription_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionName'), 'exclude': lambda f: f is None }})  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Threshold'), 'exclude': lambda f: f is None }})  
    threshold_expression: Optional[shared_expression.Expression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThresholdExpression'), 'exclude': lambda f: f is None }})  
    