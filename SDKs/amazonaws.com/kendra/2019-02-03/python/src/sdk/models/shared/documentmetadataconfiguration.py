"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import documentattributevaluetype_enum as shared_documentattributevaluetype_enum
from ..shared import relevance as shared_relevance
from ..shared import search as shared_search
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentMetadataConfiguration:
    r"""Specifies the properties, such as relevance tuning and searchability, of an index field."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    type: shared_documentattributevaluetype_enum.DocumentAttributeValueTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    relevance: Optional[shared_relevance.Relevance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Relevance'), 'exclude': lambda f: f is None }})  
    search: Optional[shared_search.Search] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Search'), 'exclude': lambda f: f is None }})  
    