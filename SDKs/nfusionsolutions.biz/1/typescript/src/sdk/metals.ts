/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Metals {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get historical benchmark prices for requested metals
   *
   * @remarks
   * Historical OHLC data for the specified period and interval size
   *
   * The combination of the interval parameter and start and end dates can result in results
   * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
   *
   * The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
   */
  metalsBenchmarkHistoryGET(
    req: operations.MetalsBenchmarkHistoryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsBenchmarkHistoryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsBenchmarkHistoryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/benchmark/history";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsBenchmarkHistoryGETResponse =
        new operations.MetalsBenchmarkHistoryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get latest Benchmark prices for requested metals
   *
   * @remarks
   * Benchmark price information
   */
  metalsBenchmarkSummaryGET(
    req: operations.MetalsBenchmarkSummaryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsBenchmarkSummaryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsBenchmarkSummaryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/benchmark/summary";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsBenchmarkSummaryGETResponse =
        new operations.MetalsBenchmarkSummaryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.summaryResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.summaryResponses = utils.objectToClass(
              httpRes?.data,
              shared.SummaryResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of symbols supported by the benchmark endpoints
   */
  metalsBenchmarkSupportedMetalsGET(
    req: operations.MetalsBenchmarkSupportedMetalsGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsBenchmarkSupportedMetalsGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsBenchmarkSupportedMetalsGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/benchmark/supported";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsBenchmarkSupportedMetalsGETResponse =
        new operations.MetalsBenchmarkSupportedMetalsGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.metalsBenchmarkSupportedMetalsGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Historical Annual Performance for requested metals
   *
   * @remarks
   * Annual Historical Performance information
   */
  metalsSpotAnnualHistoricalPerformanceGET(
    req: operations.MetalsSpotAnnualHistoricalPerformanceGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotAnnualHistoricalPerformanceGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotAnnualHistoricalPerformanceGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/performance/annual";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotAnnualHistoricalPerformanceGETResponse =
        new operations.MetalsSpotAnnualHistoricalPerformanceGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Historical Performance for requested metals
   *
   * @remarks
   * Historical Performance information
   */
  metalsSpotHistoricalPerformanceGET(
    req: operations.MetalsSpotHistoricalPerformanceGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotHistoricalPerformanceGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotHistoricalPerformanceGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/performance";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotHistoricalPerformanceGETResponse =
        new operations.MetalsSpotHistoricalPerformanceGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get historical Spot prices for requested metals
   *
   * @remarks
   * Historical OHLC data for the specified period and interval size
   *
   * The combination of the interval parameter and start and end dates can result in results
   * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
   *
   * The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
   */
  metalsSpotHistoryGET(
    req: operations.MetalsSpotHistoryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotHistoryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotHistoryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/history";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotHistoryGETResponse =
        new operations.MetalsSpotHistoryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get historical Spot Ratio prices for requested metals
   *
   * @remarks
   * Historical data for the specified period and interval size
   *
   * The combination of the interval parameter and start and end dates can result in results
   * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
   */
  metalsSpotRatioHistoryGET(
    req: operations.MetalsSpotRatioHistoryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotRatioHistoryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotRatioHistoryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/ratio/history";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotRatioHistoryGETResponse =
        new operations.MetalsSpotRatioHistoryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get latest Spot Summary for requested metal ratios
   *
   * @remarks
   * Ratios between prices of two metals
   */
  metalsSpotRatioSummaryGET(
    req: operations.MetalsSpotRatioSummaryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotRatioSummaryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotRatioSummaryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/ratio/summary";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotRatioSummaryGETResponse =
        new operations.MetalsSpotRatioSummaryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.summaryResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.summaryResponses = utils.objectToClass(
              httpRes?.data,
              shared.SummaryResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get latest Spot Summary for requested metals
   *
   * @remarks
   * Current and daily summary information combined into a single quote
   */
  metalsSpotSummaryGET(
    req: operations.MetalsSpotSummaryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotSummaryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotSummaryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/summary";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotSummaryGETResponse =
        new operations.MetalsSpotSummaryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.summaryResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.summaryResponses = utils.objectToClass(
              httpRes?.data,
              shared.SummaryResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of symbols supported by the spot endpoints
   */
  metalsSpotSupportedMetalsGET(
    req: operations.MetalsSpotSupportedMetalsGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSpotSupportedMetalsGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSpotSupportedMetalsGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/spot/supported";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSpotSupportedMetalsGETResponse =
        new operations.MetalsSpotSupportedMetalsGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.metalsSpotSupportedMetalsGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of currencies supported by metals endpoints for currency conversion
   */
  metalsSupportedCurrenciesMetalsGET(
    req: operations.MetalsSupportedCurrenciesMetalsGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MetalsSupportedCurrenciesMetalsGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MetalsSupportedCurrenciesMetalsGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Metals/supported/currency";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MetalsSupportedCurrenciesMetalsGETResponse =
        new operations.MetalsSupportedCurrenciesMetalsGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.metalsSupportedCurrenciesMetalsGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
