// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PlaceOrderFromExistingOrderFormPathParams struct {
	// ID of the `orderForm` corresponding to the cart from which to place the order.
	OrderFormID string `pathParam:"style=simple,explode=false,name=orderFormId"`
}

type PlaceOrderFromExistingOrderFormHeaders struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type PlaceOrderFromExistingOrderFormRequestBody struct {
	// Interest rate to be used in case it applies.
	InterestValue int64 `json:"interestValue"`
	// True if the shopper opted to receive the newsletter.
	OptinNewsLetter *bool `json:"optinNewsLetter,omitempty"`
	// ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter.
	ReferenceID string `json:"referenceId"`
	// Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`.
	ReferenceValue int64 `json:"referenceValue"`
	// `true` if the shopper's data provided during checkout should be saved for future reference.
	SavePersonalData *bool `json:"savePersonalData,omitempty"`
	// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
	Value int64 `json:"value"`
}

type PlaceOrderFromExistingOrderFormRequest struct {
	PathParams PlaceOrderFromExistingOrderFormPathParams
	Headers    PlaceOrderFromExistingOrderFormHeaders
	Request    *PlaceOrderFromExistingOrderFormRequestBody `request:"mediaType=application/json"`
}

type PlaceOrderFromExistingOrderFormResponse struct {
	ContentType                                             string
	PlaceOrderFromExistingOrderForm200ApplicationJSONObject map[string]interface{}
	StatusCode                                              int
	RawResponse                                             *http.Response
}
