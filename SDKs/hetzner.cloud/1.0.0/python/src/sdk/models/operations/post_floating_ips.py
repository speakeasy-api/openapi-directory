"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PostFloatingIpsCreateFloatingIPRequestTypeEnum(str, Enum):
    r"""Floating IP type"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIpsCreateFloatingIPRequest:
    r"""The `type` argument is required while `home_location` and `server` are mutually exclusive."""
    
    type: PostFloatingIpsCreateFloatingIPRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Floating IP type"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    home_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_location'), 'exclude': lambda f: f is None }})
    r"""Home Location (routing is optimized for that Location). Only optional if Server argument is passed."""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    server: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})
    r"""Server to assign the Floating IP to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostFloatingIps201ApplicationJSONActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostFloatingIps201ApplicationJSONActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostFloatingIps201ApplicationJSONActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostFloatingIps201ApplicationJSONActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONFloatingIPDNSPtr:
    
    dns_ptr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""DNS pointer for the specific IP address"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""Single IPv4 or IPv6 address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONFloatingIPHomeLocation:
    r"""Location the Floating IP was created in. Routing is optimized for this Location."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONFloatingIPProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class PostFloatingIps201ApplicationJSONFloatingIPTypeEnum(str, Enum):
    r"""Type of the Floating IP"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSONFloatingIP:
    
    blocked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked') }})
    r"""Whether the IP is blocked"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Resource"""  
    dns_ptr: list[PostFloatingIps201ApplicationJSONFloatingIPDNSPtr] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""Array of reverse DNS entries"""  
    home_location: PostFloatingIps201ApplicationJSONFloatingIPHomeLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_location') }})
    r"""Location the Floating IP was created in. Routing is optimized for this Location."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""IP address"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: PostFloatingIps201ApplicationJSONFloatingIPProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    server: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server') }})
    r"""ID of the Server the Floating IP is assigned to, null if it is not assigned at all"""  
    type: PostFloatingIps201ApplicationJSONFloatingIPTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Floating IP"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFloatingIps201ApplicationJSON:
    r"""The `floating_ip` key in the reply contains the object that was just created"""
    
    floating_ip: PostFloatingIps201ApplicationJSONFloatingIP = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ip') }})  
    action: Optional[PostFloatingIps201ApplicationJSONAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostFloatingIpsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_floating_ips_201_application_json_object: Optional[PostFloatingIps201ApplicationJSON] = dataclasses.field(default=None)
    r"""The `floating_ip` key in the reply contains the object that was just created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    