"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://accounts.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_credential_aws(self, request: operations.CreateCredentialAwsCreateCredentialAwsRequest, security: operations.CreateCredentialAwsSecurity, server_url: Optional[str] = None) -> operations.CreateCredentialAwsResponse:
        r"""Create a new AWS Credential"""
        base_url = operations.CREATE_CREDENTIAL_AWS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Credentials/AWS'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCredentialAwsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialAws])
                res.accounts_v1_credential_credential_aws = out

        return res

    def create_credential_public_key(self, request: operations.CreateCredentialPublicKeyCreateCredentialPublicKeyRequest, security: operations.CreateCredentialPublicKeySecurity, server_url: Optional[str] = None) -> operations.CreateCredentialPublicKeyResponse:
        r"""Create a new Public Key Credential"""
        base_url = operations.CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Credentials/PublicKeys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCredentialPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialPublicKey])
                res.accounts_v1_credential_credential_public_key = out

        return res

    def create_secondary_auth_token(self, server_url: Optional[str] = None) -> operations.CreateSecondaryAuthTokenResponse:
        r"""Create a new secondary Auth Token"""
        base_url = operations.CREATE_SECONDARY_AUTH_TOKEN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/AuthTokens/Secondary'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSecondaryAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1SecondaryAuthToken])
                res.accounts_v1_secondary_auth_token = out

        return res

    def delete_credential_aws(self, request: operations.DeleteCredentialAwsRequest, security: operations.DeleteCredentialAwsSecurity, server_url: Optional[str] = None) -> operations.DeleteCredentialAwsResponse:
        r"""Delete a Credential from your account"""
        base_url = operations.DELETE_CREDENTIAL_AWS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCredentialAwsRequest, base_url, '/v1/Credentials/AWS/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCredentialAwsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_credential_public_key(self, request: operations.DeleteCredentialPublicKeyRequest, security: operations.DeleteCredentialPublicKeySecurity, server_url: Optional[str] = None) -> operations.DeleteCredentialPublicKeyResponse:
        r"""Delete a Credential from your account"""
        base_url = operations.DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCredentialPublicKeyRequest, base_url, '/v1/Credentials/PublicKeys/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCredentialPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_secondary_auth_token(self, server_url: Optional[str] = None) -> operations.DeleteSecondaryAuthTokenResponse:
        r"""Delete the secondary Auth Token from your account"""
        base_url = operations.DELETE_SECONDARY_AUTH_TOKEN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/AuthTokens/Secondary'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSecondaryAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_credential_aws(self, request: operations.FetchCredentialAwsRequest, security: operations.FetchCredentialAwsSecurity, server_url: Optional[str] = None) -> operations.FetchCredentialAwsResponse:
        r"""Fetch the AWS credentials specified by the provided Credential Sid"""
        base_url = operations.FETCH_CREDENTIAL_AWS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCredentialAwsRequest, base_url, '/v1/Credentials/AWS/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCredentialAwsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialAws])
                res.accounts_v1_credential_credential_aws = out

        return res

    def fetch_credential_public_key(self, request: operations.FetchCredentialPublicKeyRequest, security: operations.FetchCredentialPublicKeySecurity, server_url: Optional[str] = None) -> operations.FetchCredentialPublicKeyResponse:
        r"""Fetch the public key specified by the provided Credential Sid"""
        base_url = operations.FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCredentialPublicKeyRequest, base_url, '/v1/Credentials/PublicKeys/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCredentialPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialPublicKey])
                res.accounts_v1_credential_credential_public_key = out

        return res

    def list_credential_aws(self, request: operations.ListCredentialAwsRequest, security: operations.ListCredentialAwsSecurity, server_url: Optional[str] = None) -> operations.ListCredentialAwsResponse:
        r"""Retrieves a collection of AWS Credentials belonging to the account used to make the request"""
        base_url = operations.LIST_CREDENTIAL_AWS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Credentials/AWS'
        
        query_params = utils.get_query_params(operations.ListCredentialAwsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCredentialAwsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCredentialAwsListCredentialAwsResponse])
                res.list_credential_aws_response = out

        return res

    def list_credential_public_key(self, request: operations.ListCredentialPublicKeyRequest, security: operations.ListCredentialPublicKeySecurity, server_url: Optional[str] = None) -> operations.ListCredentialPublicKeyResponse:
        r"""Retrieves a collection of Public Key Credentials belonging to the account used to make the request"""
        base_url = operations.LIST_CREDENTIAL_PUBLIC_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Credentials/PublicKeys'
        
        query_params = utils.get_query_params(operations.ListCredentialPublicKeyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCredentialPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCredentialPublicKeyListCredentialPublicKeyResponse])
                res.list_credential_public_key_response = out

        return res

    def update_auth_token_promotion(self, server_url: Optional[str] = None) -> operations.UpdateAuthTokenPromotionResponse:
        r"""Promote the secondary Auth Token to primary. After promoting the new token, all requests to Twilio using your old primary Auth Token will result in an error."""
        base_url = operations.UPDATE_AUTH_TOKEN_PROMOTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/AuthTokens/Promote'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAuthTokenPromotionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1AuthTokenPromotion])
                res.accounts_v1_auth_token_promotion = out

        return res

    def update_credential_aws(self, request: operations.UpdateCredentialAwsRequest, security: operations.UpdateCredentialAwsSecurity, server_url: Optional[str] = None) -> operations.UpdateCredentialAwsResponse:
        r"""Modify the properties of a given Account"""
        base_url = operations.UPDATE_CREDENTIAL_AWS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateCredentialAwsRequest, base_url, '/v1/Credentials/AWS/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCredentialAwsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialAws])
                res.accounts_v1_credential_credential_aws = out

        return res

    def update_credential_public_key(self, request: operations.UpdateCredentialPublicKeyRequest, security: operations.UpdateCredentialPublicKeySecurity, server_url: Optional[str] = None) -> operations.UpdateCredentialPublicKeyResponse:
        r"""Modify the properties of a given Account"""
        base_url = operations.UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateCredentialPublicKeyRequest, base_url, '/v1/Credentials/PublicKeys/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCredentialPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsV1CredentialCredentialPublicKey])
                res.accounts_v1_credential_credential_public_key = out

        return res

    