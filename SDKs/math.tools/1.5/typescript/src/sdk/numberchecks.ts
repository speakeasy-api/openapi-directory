/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Check Property of a given number.
 */
export class NumberChecks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Checks whether a given number is a cube number or not.
   */
  getNumbersIsCube(
    req: operations.GetNumbersIsCubeRequest,
    security: operations.GetNumbersIsCubeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersIsCubeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersIsCubeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/numbers/is-cube";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersIsCubeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersIsCubeResponse =
        new operations.GetNumbersIsCubeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a palindrome number or not.
   */
  getNumbersIsPalindrome(
    req: operations.GetNumbersIsPalindromeRequest,
    security: operations.GetNumbersIsPalindromeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersIsPalindromeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersIsPalindromeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/numbers/is-palindrome";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersIsPalindromeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersIsPalindromeResponse =
        new operations.GetNumbersIsPalindromeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a square number or not.
   */
  getNumbersIsSquare(
    req: operations.GetNumbersIsSquareRequest,
    security: operations.GetNumbersIsSquareSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersIsSquareResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersIsSquareRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/numbers/is-square";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersIsSquareSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersIsSquareResponse =
        new operations.GetNumbersIsSquareResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a triangle number or not.
   */
  getNumbersIsTriangle(
    req: operations.GetNumbersIsTriangleRequest,
    security: operations.GetNumbersIsTriangleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersIsTriangleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersIsTriangleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/numbers/is-triangle";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersIsTriangleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersIsTriangleResponse =
        new operations.GetNumbersIsTriangleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known fermat prime number or not.
   */
  getNumbersPrimeIsFermatPrime(
    req: operations.GetNumbersPrimeIsFermatPrimeRequest,
    security: operations.GetNumbersPrimeIsFermatPrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsFermatPrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsFermatPrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-fermat-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsFermatPrimeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsFermatPrimeResponse =
        new operations.GetNumbersPrimeIsFermatPrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known fibonacci prime number or not.
   */
  getNumbersPrimeIsFibonacciPrime(
    req: operations.GetNumbersPrimeIsFibonacciPrimeRequest,
    security: operations.GetNumbersPrimeIsFibonacciPrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsFibonacciPrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsFibonacciPrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-fibonacci-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsFibonacciPrimeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsFibonacciPrimeResponse =
        new operations.GetNumbersPrimeIsFibonacciPrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known mersenne prime number or not.
   */
  getNumbersPrimeIsMersennePrime(
    req: operations.GetNumbersPrimeIsMersennePrimeRequest,
    security: operations.GetNumbersPrimeIsMersennePrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsMersennePrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsMersennePrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-mersenne-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsMersennePrimeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsMersennePrimeResponse =
        new operations.GetNumbersPrimeIsMersennePrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known partition prime number or not.
   */
  getNumbersPrimeIsPartitionPrime(
    req: operations.GetNumbersPrimeIsPartitionPrimeRequest,
    security: operations.GetNumbersPrimeIsPartitionPrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsPartitionPrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsPartitionPrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-partition-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsPartitionPrimeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsPartitionPrimeResponse =
        new operations.GetNumbersPrimeIsPartitionPrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known pell prime number or not.
   */
  getNumbersPrimeIsPellPrime(
    req: operations.GetNumbersPrimeIsPellPrimeRequest,
    security: operations.GetNumbersPrimeIsPellPrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsPellPrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsPellPrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-pell-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsPellPrimeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsPellPrimeResponse =
        new operations.GetNumbersPrimeIsPellPrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a perfect number or not.
   */
  getNumbersPrimeIsPerfect(
    req: operations.GetNumbersPrimeIsPerfectRequest,
    security: operations.GetNumbersPrimeIsPerfectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsPerfectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsPerfectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/numbers/prime/is-perfect";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsPerfectSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsPerfectResponse =
        new operations.GetNumbersPrimeIsPerfectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a given number is a known prime number or not.
   */
  getNumbersPrimeIsPrime(
    req: operations.GetNumbersPrimeIsPrimeRequest,
    security: operations.GetNumbersPrimeIsPrimeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNumbersPrimeIsPrimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNumbersPrimeIsPrimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/numbers/prime/is-prime";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetNumbersPrimeIsPrimeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNumbersPrimeIsPrimeResponse =
        new operations.GetNumbersPrimeIsPrimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
