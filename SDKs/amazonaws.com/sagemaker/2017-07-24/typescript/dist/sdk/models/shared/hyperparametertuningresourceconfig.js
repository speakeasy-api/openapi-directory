"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperParameterTuningResourceConfig = void 0;
var utils_1 = require("../../../internal/utils");
var hyperparametertuningallocationstrategyenum_1 = require("./hyperparametertuningallocationstrategyenum");
var hyperparametertuninginstanceconfig_1 = require("./hyperparametertuninginstanceconfig");
var traininginstancetypeenum_1 = require("./traininginstancetypeenum");
var class_transformer_1 = require("class-transformer");
/**
 * <p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note>
 */
var HyperParameterTuningResourceConfig = /** @class */ (function (_super) {
    __extends(HyperParameterTuningResourceConfig, _super);
    function HyperParameterTuningResourceConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AllocationStrategy" }),
        __metadata("design:type", String)
    ], HyperParameterTuningResourceConfig.prototype, "allocationStrategy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: hyperparametertuninginstanceconfig_1.HyperParameterTuningInstanceConfig }),
        (0, class_transformer_1.Expose)({ name: "InstanceConfigs" }),
        (0, class_transformer_1.Type)(function () { return hyperparametertuninginstanceconfig_1.HyperParameterTuningInstanceConfig; }),
        __metadata("design:type", Array)
    ], HyperParameterTuningResourceConfig.prototype, "instanceConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InstanceCount" }),
        __metadata("design:type", Number)
    ], HyperParameterTuningResourceConfig.prototype, "instanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InstanceType" }),
        __metadata("design:type", String)
    ], HyperParameterTuningResourceConfig.prototype, "instanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VolumeKmsKeyId" }),
        __metadata("design:type", String)
    ], HyperParameterTuningResourceConfig.prototype, "volumeKmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VolumeSizeInGB" }),
        __metadata("design:type", Number)
    ], HyperParameterTuningResourceConfig.prototype, "volumeSizeInGB", void 0);
    return HyperParameterTuningResourceConfig;
}(utils_1.SpeakeasyBase));
exports.HyperParameterTuningResourceConfig = HyperParameterTuningResourceConfig;
