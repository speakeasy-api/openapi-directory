// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CustomOrPostActivityType string

const (
	CustomOrPostActivityTypeActivity     CustomOrPostActivityType = "activity"
	CustomOrPostActivityTypePostActivity CustomOrPostActivityType = "post_activity"
)

type CustomOrPostActivity struct {
	Activity     *Activity
	PostActivity *PostActivity

	Type CustomOrPostActivityType
}

func CreateCustomOrPostActivityActivity(activity Activity) CustomOrPostActivity {
	typ := CustomOrPostActivityTypeActivity

	return CustomOrPostActivity{
		Activity: &activity,
		Type:     typ,
	}
}

func CreateCustomOrPostActivityPostActivity(postActivity PostActivity) CustomOrPostActivity {
	typ := CustomOrPostActivityTypePostActivity

	return CustomOrPostActivity{
		PostActivity: &postActivity,
		Type:         typ,
	}
}

func (u *CustomOrPostActivity) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	activity := new(Activity)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&activity); err == nil {
		u.Activity = activity
		u.Type = CustomOrPostActivityTypeActivity
		return nil
	}

	postActivity := new(PostActivity)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postActivity); err == nil {
		u.PostActivity = postActivity
		u.Type = CustomOrPostActivityTypePostActivity
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CustomOrPostActivity) MarshalJSON() ([]byte, error) {
	if u.Activity != nil {
		return json.Marshal(u.Activity)
	}

	if u.PostActivity != nil {
		return json.Marshal(u.PostActivity)
	}

	return nil, nil
}
