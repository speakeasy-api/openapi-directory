"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardDispute = exports.CardDisputeTypeEnum = exports.CardDisputeStatusEnum = exports.CardDisputeCardDisputeRejection = exports.CardDisputeCardDisputeAcceptance = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.
 */
var CardDisputeCardDisputeAcceptance = /** @class */ (function (_super) {
    __extends(CardDisputeCardDisputeAcceptance, _super);
    function CardDisputeCardDisputeAcceptance() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accepted_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], CardDisputeCardDisputeAcceptance.prototype, "acceptedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "card_dispute_id" }),
        __metadata("design:type", String)
    ], CardDisputeCardDisputeAcceptance.prototype, "cardDisputeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transaction_id" }),
        __metadata("design:type", String)
    ], CardDisputeCardDisputeAcceptance.prototype, "transactionId", void 0);
    return CardDisputeCardDisputeAcceptance;
}(utils_1.SpeakeasyBase));
exports.CardDisputeCardDisputeAcceptance = CardDisputeCardDisputeAcceptance;
/**
 * If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.
 */
var CardDisputeCardDisputeRejection = /** @class */ (function (_super) {
    __extends(CardDisputeCardDisputeRejection, _super);
    function CardDisputeCardDisputeRejection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "card_dispute_id" }),
        __metadata("design:type", String)
    ], CardDisputeCardDisputeRejection.prototype, "cardDisputeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "explanation" }),
        __metadata("design:type", String)
    ], CardDisputeCardDisputeRejection.prototype, "explanation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rejected_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], CardDisputeCardDisputeRejection.prototype, "rejectedAt", void 0);
    return CardDisputeCardDisputeRejection;
}(utils_1.SpeakeasyBase));
exports.CardDisputeCardDisputeRejection = CardDisputeCardDisputeRejection;
/**
 * The results of the Dispute investigation.
 */
var CardDisputeStatusEnum;
(function (CardDisputeStatusEnum) {
    CardDisputeStatusEnum["PendingReviewing"] = "pending_reviewing";
    CardDisputeStatusEnum["Accepted"] = "accepted";
    CardDisputeStatusEnum["Rejected"] = "rejected";
})(CardDisputeStatusEnum = exports.CardDisputeStatusEnum || (exports.CardDisputeStatusEnum = {}));
/**
 * A constant representing the object's type. For this resource it will always be `card_dispute`.
 */
var CardDisputeTypeEnum;
(function (CardDisputeTypeEnum) {
    CardDisputeTypeEnum["CardDispute"] = "card_dispute";
})(CardDisputeTypeEnum = exports.CardDisputeTypeEnum || (exports.CardDisputeTypeEnum = {}));
/**
 * If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate.
 */
var CardDispute = /** @class */ (function (_super) {
    __extends(CardDispute, _super);
    function CardDispute() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acceptance" }),
        (0, class_transformer_1.Type)(function () { return CardDisputeCardDisputeAcceptance; }),
        __metadata("design:type", CardDisputeCardDisputeAcceptance)
    ], CardDispute.prototype, "acceptance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], CardDispute.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "disputed_transaction_id" }),
        __metadata("design:type", String)
    ], CardDispute.prototype, "disputedTransactionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "explanation" }),
        __metadata("design:type", String)
    ], CardDispute.prototype, "explanation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], CardDispute.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rejection" }),
        (0, class_transformer_1.Type)(function () { return CardDisputeCardDisputeRejection; }),
        __metadata("design:type", CardDisputeCardDisputeRejection)
    ], CardDispute.prototype, "rejection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], CardDispute.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], CardDispute.prototype, "type", void 0);
    return CardDispute;
}(utils_1.SpeakeasyBase));
exports.CardDispute = CardDispute;
