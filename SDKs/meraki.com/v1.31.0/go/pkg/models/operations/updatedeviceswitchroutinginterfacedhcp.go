// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum - The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum string

const (
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneDay        UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 day"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneHour       UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 hour"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneWeek       UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 week"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumTwelveHours   UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "12 hours"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumThirtyMinutes UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "30 minutes"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumFourHours     UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "4 hours"
)

func (e *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum: %s", s)
	}
}

// UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum - The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum string

const (
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpDisabled UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpDisabled"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpRelay    UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpRelay"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpServer   UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpServer"
)

func (e *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dhcpDisabled":
		fallthrough
	case "dhcpRelay":
		fallthrough
	case "dhcpServer":
		*e = UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum: %s", s)
	}
}

// UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum - The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum string

const (
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumHex     UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "hex"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumInteger UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "integer"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumIP      UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "ip"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumText    UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "text"
)

func (e *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum: %s", s)
	}
}

type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptions struct {
	// The code for DHCP option which should be from 2 to 254
	Code string `json:"code"`
	// The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
	Type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum `json:"type"`
	// The value of the DHCP option
	Value string `json:"value"`
}

// UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum - The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum string

const (
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumCustom          UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "custom"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumGooglePublicDNS UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "googlePublicDns"
	UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumOpenDNS         UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "openDns"
)

func (e *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "googlePublicDns":
		fallthrough
	case "openDns":
		*e = UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum: %s", s)
	}
}

type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyFixedIPAssignments struct {
	// The IP address of the client which has fixed IP address assigned to it
	IP string `json:"ip"`
	// The MAC address of the client which has fixed IP address
	Mac string `json:"mac"`
	// The name of the client which has fixed IP address
	Name string `json:"name"`
}

type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyReservedIPRanges struct {
	// The comment for the reserved IP range
	Comment *string `json:"comment,omitempty"`
	// The ending IP address of the reserved IP range
	End string `json:"end"`
	// The starting IP address of the reserved IP range
	Start string `json:"start"`
}

type UpdateDeviceSwitchRoutingInterfaceDhcpRequestBody struct {
	// The PXE boot server filename for the DHCP server running on the switch interface
	BootFileName *string `json:"bootFileName,omitempty"`
	// The PXE boot server IP for the DHCP server running on the switch interface
	BootNextServer *string `json:"bootNextServer,omitempty"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
	BootOptionsEnabled *bool `json:"bootOptionsEnabled,omitempty"`
	// The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpModeEnum `json:"dhcpMode,omitempty"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
	DhcpOptions []UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDhcpOptions `json:"dhcpOptions,omitempty"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DNSCustomNameservers []string `json:"dnsCustomNameservers,omitempty"`
	// The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
	DNSNameserversOption *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum `json:"dnsNameserversOption,omitempty"`
	// Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
	FixedIPAssignments []UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyFixedIPAssignments `json:"fixedIpAssignments,omitempty"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
	ReservedIPRanges []UpdateDeviceSwitchRoutingInterfaceDhcpRequestBodyReservedIPRanges `json:"reservedIpRanges,omitempty"`
}

type UpdateDeviceSwitchRoutingInterfaceDhcpRequest struct {
	RequestBody *UpdateDeviceSwitchRoutingInterfaceDhcpRequestBody `request:"mediaType=application/json"`
	InterfaceID string                                             `pathParam:"style=simple,explode=false,name=interfaceId"`
	Serial      string                                             `pathParam:"style=simple,explode=false,name=serial"`
}

type UpdateDeviceSwitchRoutingInterfaceDhcpResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateDeviceSwitchRoutingInterfaceDhcp200ApplicationJSONObject map[string]interface{}
}
