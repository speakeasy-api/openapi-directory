"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getsettingsresponse as shared_getsettingsresponse
from enum import Enum
from typing import Any, Optional

class GetSettingsAttributeEnum(str, Enum):
    r"""The list of setting attribute enum values."""
    ALL = 'ALL'
    IS_AWS_ORG_ENABLED = 'IS_AWS_ORG_ENABLED'
    SNS_TOPIC = 'SNS_TOPIC'
    DEFAULT_ASSESSMENT_REPORTS_DESTINATION = 'DEFAULT_ASSESSMENT_REPORTS_DESTINATION'
    DEFAULT_PROCESS_OWNERS = 'DEFAULT_PROCESS_OWNERS'
    EVIDENCE_FINDER_ENABLEMENT = 'EVIDENCE_FINDER_ENABLEMENT'
    DEREGISTRATION_POLICY = 'DEREGISTRATION_POLICY'


@dataclasses.dataclass
class GetSettingsRequest:
    
    attribute: GetSettingsAttributeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'attribute', 'style': 'simple', 'explode': False }})
    r"""The list of setting attribute enum values."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    get_settings_response: Optional[shared_getsettingsresponse.GetSettingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    