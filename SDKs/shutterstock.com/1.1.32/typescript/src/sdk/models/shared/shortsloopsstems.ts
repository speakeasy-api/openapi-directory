/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class ShortsLoopsStemsLoops extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class ShortsLoopsStemsShorts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class ShortsLoopsStemsStems extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Links for Shorts, Loops and Stems previews
 */
export class ShortsLoopsStems extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ShortsLoopsStemsLoops })
  @Expose({ name: "loops" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ShortsLoopsStemsLoops> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ShortsLoopsStemsLoops);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  loops?: Record<string, ShortsLoopsStemsLoops>;

  @SpeakeasyMetadata({ elemType: ShortsLoopsStemsShorts })
  @Expose({ name: "shorts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ShortsLoopsStemsShorts> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ShortsLoopsStemsShorts);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  shorts?: Record<string, ShortsLoopsStemsShorts>;

  @SpeakeasyMetadata({ elemType: ShortsLoopsStemsStems })
  @Expose({ name: "stems" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ShortsLoopsStemsStems> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ShortsLoopsStemsStems);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  stems?: Record<string, ShortsLoopsStemsStems>;
}
