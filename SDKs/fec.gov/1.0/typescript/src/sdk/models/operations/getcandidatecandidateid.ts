/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GetCandidateCandidateIdCandidateStatusEnum {
  Unknown = "",
  C = "C",
  F = "F",
  N = "N",
  P = "P",
}

export enum GetCandidateCandidateIdIncumbentChallengeEnum {
  Unknown = "",
  I = "I",
  C = "C",
  O = "O",
}

export enum GetCandidateCandidateIdOfficeEnum {
  Unknown = "",
  H = "H",
  S = "S",
  P = "P",
}

export class GetCandidateCandidateIdRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * A unique identifier assigned to each candidate registered with the FEC.
   * If a person runs for several offices, that person will have separate candidate IDs for each office.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=candidate_id",
  })
  candidateId: string;

  /**
   * One-letter code explaining if the candidate is:
   *
   * @remarks
   *         - C present candidate
   *         - F future candidate
   *         - N not yet a candidate
   *         - P prior candidate
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=candidate_status",
  })
  candidateStatus?: GetCandidateCandidateIdCandidateStatusEnum[];

  /**
   *
   * @remarks
   * Two-year election cycle in which a candidate runs for office.
   * Calculated from Form 2. The cycle begins with
   * an odd year and is named for its ending, even year. This cycle follows
   * the traditional house election cycle and subdivides the presidential
   * and Senate elections into comparable two-year blocks. To retrieve data for
   * the entire four years of a presidential term or six years of a senatorial term,
   * you will need the `election_full` flag.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cycle" })
  cycle?: number[];

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=district",
  })
  district?: string[];

  /**
   * Year of election
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_year",
  })
  electionYear?: number[];

  /**
   * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=federal_funds_flag",
  })
  federalFundsFlag?: boolean;

  /**
   * A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=has_raised_funds",
  })
  hasRaisedFunds?: boolean;

  /**
   * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=incumbent_challenge",
  })
  incumbentChallenge?: GetCandidateCandidateIdIncumbentChallengeEnum[];

  /**
   * Name (candidate or committee) to search for. Alias for 'q'.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string[];

  /**
   * Federal office candidate runs for: H, S or P
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=office",
  })
  office?: GetCandidateCandidateIdOfficeEnum[];

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=party" })
  party?: string[];

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;

  /**
   * US state or territory where a candidate runs for office
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string[];

  /**
   * Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=year" })
  year?: string;
}

export class GetCandidateCandidateIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  candidateDetailPage?: shared.CandidateDetailPage;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
