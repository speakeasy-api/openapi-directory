"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import hitreviewstatus_enum as shared_hitreviewstatus_enum
from ..shared import hitstatus_enum as shared_hitstatus_enum
from ..shared import qualificationrequirement as shared_qualificationrequirement
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Hit:
    r"""The HIT data structure represents a single HIT, including all the information necessary for a Worker to accept and complete the HIT."""
    
    assignment_duration_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssignmentDurationInSeconds'), 'exclude': lambda f: f is None }})  
    auto_approval_delay_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoApprovalDelayInSeconds'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    expiration: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Expiration'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    hit_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITGroupId'), 'exclude': lambda f: f is None }})  
    hit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITId'), 'exclude': lambda f: f is None }})  
    hit_layout_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITLayoutId'), 'exclude': lambda f: f is None }})  
    hit_review_status: Optional[shared_hitreviewstatus_enum.HITReviewStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITReviewStatus'), 'exclude': lambda f: f is None }})  
    hit_status: Optional[shared_hitstatus_enum.HITStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITStatus'), 'exclude': lambda f: f is None }})  
    hit_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITTypeId'), 'exclude': lambda f: f is None }})  
    keywords: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    max_assignments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxAssignments'), 'exclude': lambda f: f is None }})  
    number_of_assignments_available: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfAssignmentsAvailable'), 'exclude': lambda f: f is None }})  
    number_of_assignments_completed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfAssignmentsCompleted'), 'exclude': lambda f: f is None }})  
    number_of_assignments_pending: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfAssignmentsPending'), 'exclude': lambda f: f is None }})  
    qualification_requirements: Optional[list[shared_qualificationrequirement.QualificationRequirement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QualificationRequirements'), 'exclude': lambda f: f is None }})  
    question: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Question'), 'exclude': lambda f: f is None }})  
    requester_annotation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequesterAnnotation'), 'exclude': lambda f: f is None }})  
    reward: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reward'), 'exclude': lambda f: f is None }})
    r"""A string representing a currency amount."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})  
    