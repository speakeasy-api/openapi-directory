/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Precinct {
    /**
     * ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administrationRegionId")
    public String administrationRegionId;

    public Precinct withAdministrationRegionId(String administrationRegionId) {
        this.administrationRegionId = administrationRegionId;
        return this;
    }
    
    /**
     * ID(s) of the Contest message(s) for this precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contestId")
    public String[] contestId;

    public Precinct withContestId(String[] contestId) {
        this.contestId = contestId;
        return this;
    }
    
    /**
     * Required. Dataset ID. What datasets our Precincts come from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasetId")
    public String datasetId;

    public Precinct withDatasetId(String datasetId) {
        this.datasetId = datasetId;
        return this;
    }
    
    /**
     * ID(s) of the PollingLocation message(s) for this precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earlyVoteSiteId")
    public String[] earlyVoteSiteId;

    public Precinct withEarlyVoteSiteId(String[] earlyVoteSiteId) {
        this.earlyVoteSiteId = earlyVoteSiteId;
        return this;
    }
    
    /**
     * ID(s) of the ElectoralDistrict message(s) for this precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("electoralDistrictId")
    public String[] electoralDistrictId;

    public Precinct withElectoralDistrictId(String[] electoralDistrictId) {
        this.electoralDistrictId = electoralDistrictId;
        return this;
    }
    
    /**
     * Required. A unique identifier for this precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Precinct withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies if the precinct runs mail-only elections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mailOnly")
    public Boolean mailOnly;

    public Precinct withMailOnly(Boolean mailOnly) {
        this.mailOnly = mailOnly;
        return this;
    }
    
    /**
     * Required. The name of the precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Precinct withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of the precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;

    public Precinct withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Encouraged. The OCD ID of the precinct
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ocdId")
    public String[] ocdId;

    public Precinct withOcdId(String[] ocdId) {
        this.ocdId = ocdId;
        return this;
    }
    
    /**
     * ID(s) of the PollingLocation message(s) for this precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pollingLocationId")
    public String[] pollingLocationId;

    public Precinct withPollingLocationId(String[] pollingLocationId) {
        this.pollingLocationId = pollingLocationId;
        return this;
    }
    
    /**
     * ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spatialBoundaryId")
    public String[] spatialBoundaryId;

    public Precinct withSpatialBoundaryId(String[] spatialBoundaryId) {
        this.spatialBoundaryId = spatialBoundaryId;
        return this;
    }
    
    /**
     * If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splitName")
    public String splitName;

    public Precinct withSplitName(String splitName) {
        this.splitName = splitName;
        return this;
    }
    
    /**
     * Specifies the ward the precinct is contained within.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ward")
    public String ward;

    public Precinct withWard(String ward) {
        this.ward = ward;
        return this;
    }
    
    public Precinct(){}
}
