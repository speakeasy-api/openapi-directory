// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FailureReasonEnum string

const (
	FailureReasonEnumInternalError      FailureReasonEnum = "INTERNAL_ERROR"
	FailureReasonEnumUserError          FailureReasonEnum = "USER_ERROR"
	FailureReasonEnumValidationError    FailureReasonEnum = "VALIDATION_ERROR"
	FailureReasonEnumClusterUnavailable FailureReasonEnum = "CLUSTER_UNAVAILABLE"
)

func (e FailureReasonEnum) ToPointer() *FailureReasonEnum {
	return &e
}

func (e *FailureReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERNAL_ERROR":
		fallthrough
	case "USER_ERROR":
		fallthrough
	case "VALIDATION_ERROR":
		fallthrough
	case "CLUSTER_UNAVAILABLE":
		*e = FailureReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FailureReasonEnum: %v", v)
	}
}
