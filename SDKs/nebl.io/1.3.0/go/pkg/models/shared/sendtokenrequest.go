// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SendTokenRequestFlags - Object representing flags that potentialy modify this transaction
type SendTokenRequestFlags struct {
	// If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)
	SplitChange *bool `json:"splitChange,omitempty"`
}

type SendTokenRequestMetadataEncryptions struct {
	// key format (pem or der)
	Format *string `json:"format,omitempty"`
	// userData key to encrypt
	Key *string `json:"key,omitempty"`
	// RSA public key used for encryption
	Pubkey *string `json:"pubkey,omitempty"`
	// pkcs1 or pkcs8
	Type *string `json:"type,omitempty"`
}

// SendTokenRequestMetadataRulesExpiration - Object describing expiration rules of the token
type SendTokenRequestMetadataRulesExpiration struct {
	// Whether this rule can be modified in future transactions
	Locked *bool `json:"locked,omitempty"`
	// Blockheight at wh
	ValidUntil *float64 `json:"validUntil,omitempty"`
}

type SendTokenRequestMetadataRulesFeesItems struct {
	// Address fee is auto sent to
	Address *string `json:"address,omitempty"`
	// How fee should be paid, either with a tokenId, or with NEBL if null
	TokenID *string `json:"tokenId,omitempty"`
	// Amount of NTP1 token, or NEBL (in satoshi) to pay as fee
	Value *string `json:"value,omitempty"`
}

type SendTokenRequestMetadataRulesFees struct {
	// Array of objects describing fee rules
	Items []SendTokenRequestMetadataRulesFeesItems `json:"items,omitempty"`
	// Whether this rule can be modified in future transactions
	Locked *bool `json:"locked,omitempty"`
}

type SendTokenRequestMetadataRulesHolders struct {
	// Address that can hold the token
	Address *string `json:"address,omitempty"`
	// Whether this rule can be modified in future transactions
	Locked *bool `json:"locked,omitempty"`
}

// SendTokenRequestMetadataRules - Object describing token rules
type SendTokenRequestMetadataRules struct {
	// Object describing expiration rules of the token
	Expiration *SendTokenRequestMetadataRulesExpiration `json:"expiration,omitempty"`
	Fees       *SendTokenRequestMetadataRulesFees       `json:"fees,omitempty"`
	// Array of objects describing what addresses can hold the token
	Holders []SendTokenRequestMetadataRulesHolders `json:"holders,omitempty"`
}

type SendTokenRequestMetadataUrls struct {
	// Hash of data at the URL, used for verification
	DataHash *string `json:"dataHash,omitempty"`
	// mimeType of URL content
	MimeType *string `json:"mimeType,omitempty"`
	// Name of the URL
	Name *string `json:"name,omitempty"`
	// Actual URL
	URL *string `json:"url,omitempty"`
}

type SendTokenRequestMetadataUserDataMeta struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// SendTokenRequestMetadataUserData - Metadata set by user on token
type SendTokenRequestMetadataUserData struct {
	Meta []SendTokenRequestMetadataUserDataMeta `json:"meta,omitempty"`
}

// SendTokenRequestMetadata - Object representing all metadata at token issuance
type SendTokenRequestMetadata struct {
	// Long name or description of token (ex. Nibble)
	Description *string `json:"description,omitempty"`
	// Array of encryption instruction objects for encrypting userData
	Encryptions []SendTokenRequestMetadataEncryptions `json:"encryptions,omitempty"`
	// Name of token issuer
	Issuer *string `json:"issuer,omitempty"`
	// Object describing token rules
	Rules *SendTokenRequestMetadataRules `json:"rules,omitempty"`
	// Token Symbol it will be identified by (ex. NIBBL)
	TokenName *string                        `json:"tokenName,omitempty"`
	Urls      []SendTokenRequestMetadataUrls `json:"urls,omitempty"`
	// Metadata set by user on token
	UserData *SendTokenRequestMetadataUserData `json:"userData,omitempty"`
}

type SendTokenRequestTo struct {
	// Address to transfer tokens to
	Address *string `json:"address,omitempty"`
	// Number of tokens to send
	Amount *float64 `json:"amount,omitempty"`
	// ID of token we are sending
	TokenID *string `json:"tokenId,omitempty"`
}

// SendTokenRequest - Object representing the token to be sent
type SendTokenRequest struct {
	// Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
	Fee float64 `json:"fee"`
	// Object representing flags that potentialy modify this transaction
	Flags *SendTokenRequestFlags `json:"flags,omitempty"`
	// Array of addresses to send the token from
	From []string `json:"from,omitempty"`
	// Object representing all metadata at token issuance
	Metadata *SendTokenRequestMetadata `json:"metadata,omitempty"`
	// Array of UTXOs to send the token from
	Sendutxo []string             `json:"sendutxo,omitempty"`
	To       []SendTokenRequestTo `json:"to"`
}
