"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import evaluationmetrics as shared_evaluationmetrics
from ..shared import trainingoptions as shared_trainingoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class HparamTuningTrialStatusEnum(str, Enum):
    r"""The status of the trial."""
    TRIAL_STATUS_UNSPECIFIED = 'TRIAL_STATUS_UNSPECIFIED'
    NOT_STARTED = 'NOT_STARTED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    INFEASIBLE = 'INFEASIBLE'
    STOPPED_EARLY = 'STOPPED_EARLY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HparamTuningTrial:
    r"""Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models."""
    
    end_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTimeMs'), 'exclude': lambda f: f is None }})
    r"""Ending time of the trial."""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""Error message for FAILED and INFEASIBLE trial."""  
    eval_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evalLoss'), 'exclude': lambda f: f is None }})
    r"""Loss computed on the eval data at the end of trial."""  
    evaluation_metrics: Optional[shared_evaluationmetrics.EvaluationMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluationMetrics'), 'exclude': lambda f: f is None }})
    r"""Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models."""  
    hparams: Optional[shared_trainingoptions.TrainingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hparams'), 'exclude': lambda f: f is None }})
    r"""Options used in model training."""  
    hparam_tuning_evaluation_metrics: Optional[shared_evaluationmetrics.EvaluationMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hparamTuningEvaluationMetrics'), 'exclude': lambda f: f is None }})
    r"""Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models."""  
    start_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTimeMs'), 'exclude': lambda f: f is None }})
    r"""Starting time of the trial."""  
    status: Optional[HparamTuningTrialStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the trial."""  
    training_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainingLoss'), 'exclude': lambda f: f is None }})
    r"""Loss computed on the training data at the end of trial."""  
    trial_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialId'), 'exclude': lambda f: f is None }})
    r"""1-based index of the trial."""  
    