"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerservicepowername_enum as shared_containerservicepowername_enum
from ..shared import privateregistryaccessrequest as shared_privateregistryaccessrequest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateContainerServiceRequest:
    
    service_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceName') }})  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisabled'), 'exclude': lambda f: f is None }})  
    power: Optional[shared_containerservicepowername_enum.ContainerServicePowerNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power'), 'exclude': lambda f: f is None }})  
    private_registry_access: Optional[shared_privateregistryaccessrequest.PrivateRegistryAccessRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateRegistryAccess'), 'exclude': lambda f: f is None }})  
    public_domain_names: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicDomainNames'), 'exclude': lambda f: f is None }})  
    scale: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scale'), 'exclude': lambda f: f is None }})  
    