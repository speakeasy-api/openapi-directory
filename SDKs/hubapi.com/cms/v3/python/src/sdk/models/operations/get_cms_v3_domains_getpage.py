"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import collectionresponsewithtotaldomainforwardpaging as shared_collectionresponsewithtotaldomainforwardpaging
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetCmsV3DomainsGetPageSecurity:
    
    hapikey: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'hapikey' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_legacy: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_legacy1: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth3: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    private_apps: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'private-app' }})  
    private_apps_legacy: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'private-app-legacy' }})  
    private_apps_legacy1: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'private-app-legacy' }})  
    private_apps1: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'private-app' }})  
    

@dataclasses.dataclass
class GetCmsV3DomainsGetPageRequest:
    
    after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    r"""The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results."""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'archived', 'style': 'form', 'explode': True }})
    r"""Whether to return only results that have been archived."""  
    created_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdAfter', 'style': 'form', 'explode': True }})
    r"""Only return domains created after this date."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdAt', 'style': 'form', 'explode': True }})
    r"""Only return domains created at this date."""  
    created_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBefore', 'style': 'form', 'explode': True }})
    r"""Only return domains created before this date."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results per page."""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})  
    updated_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedAfter', 'style': 'form', 'explode': True }})
    r"""Only return domains updated after this date."""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedAt', 'style': 'form', 'explode': True }})
    r"""Only return domains updated at this date."""  
    updated_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedBefore', 'style': 'form', 'explode': True }})
    r"""Only return domains updated before this date."""  
    

@dataclasses.dataclass
class GetCmsV3DomainsGetPageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    collection_response_with_total_domain_forward_paging: Optional[shared_collectionresponsewithtotaldomainforwardpaging.CollectionResponseWithTotalDomainForwardPaging] = dataclasses.field(default=None)
    r"""successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    