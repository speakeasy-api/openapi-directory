"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum(str, Enum):
    r"""'tcp' or 'udp'"""
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRules:
    
    allowed_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIps'), 'exclude': lambda f: f is None }})
    r"""Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or 'any'"""  
    local_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localIp'), 'exclude': lambda f: f is None }})
    r"""Local IP address to which traffic will be forwarded"""  
    local_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localPort'), 'exclude': lambda f: f is None }})
    r"""Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A description of the rule"""  
    protocol: Optional[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""'tcp' or 'udp'"""  
    public_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicPort'), 'exclude': lambda f: f is None }})
    r"""Destination port of the traffic that is arriving on the WAN"""  
    
class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum(str, Enum):
    r"""The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')"""
    INTERNET1 = 'internet1'
    INTERNET2 = 'internet2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRules:
    
    port_rules: list[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesPortRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portRules') }})
    r"""An array of associated forwarding rules"""  
    public_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp') }})
    r"""The IP address that will be used to access the internal resource from the WAN"""  
    uplink: UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRulesUplinkEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uplink') }})
    r"""The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBody:
    
    rules: list[UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBodyRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})
    r"""An array of 1:Many nat rules"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceFirewallOneToManyNatRulesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateNetworkApplianceFirewallOneToManyNatRulesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkApplianceFirewallOneToManyNatRulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_firewall_one_to_many_nat_rules_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    