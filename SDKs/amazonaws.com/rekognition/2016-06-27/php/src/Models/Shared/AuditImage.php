<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AuditImage - An image that is picked from the Face Liveness video and returned for audit trail purposes, returned as Base64-encoded bytes.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AuditImage
{
    /**
     * <p>Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BoundingBox $boundingBox
     */
	#[\JMS\Serializer\Annotation\SerializedName('BoundingBox')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BoundingBox')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BoundingBox $boundingBox = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Bytes')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bytes = null;
    
    /**
     * <p>Provides the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\S3Object $s3Object
     */
	#[\JMS\Serializer\Annotation\SerializedName('S3Object')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\S3Object')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?S3Object $s3Object = null;
    
	public function __construct()
	{
		$this->boundingBox = null;
		$this->bytes = null;
		$this->s3Object = null;
	}
}
