"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authenticationtype_enum as shared_authenticationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthenticationObject:
    r"""Authentication object."""
    
    authentication_method_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationMethodId') }})
    r"""An identification provided by the ASPSP for the later identification of the authentication method selection."""  
    authentication_type: shared_authenticationtype_enum.AuthenticationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationType') }})
    r"""Type of the authentication method.
    
    More authentication types might be added during implementation projects and documented in the ASPSP documentation.
    
      - 'SMS_OTP': An SCA method, where an OTP linked to the transaction to be authorised is sent to the PSU through a SMS channel.
      - 'CHIP_OTP': An SCA method, where an OTP is generated by a chip card, e.g. a TOP derived from an EMV cryptogram. 
        To contact the card, the PSU normally needs a (handheld) device. 
        With this device, the PSU either reads the challenging data through a visual interface like flickering or 
        the PSU types in the challenge through the device key pad. 
        The device then derives an OTP from the challenge data and displays the OTP to the PSU.
      - 'PHOTO_OTP': An SCA method, where the challenge is a QR code or similar encoded visual data
        which can be read in by a consumer device or specific mobile app.
        The device resp. the specific app than derives an OTP from the visual challenge data and displays
        the OTP to the PSU.
      - 'PUSH_OTP': An OTP is pushed to a dedicated authentication APP and displayed to the PSU.
      - 'SMTP_OTP': An OTP is sent via email to the PSU.
    """  
    authentication_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationVersion'), 'exclude': lambda f: f is None }})
    r"""Depending on the \\"authenticationType\\".
    This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type.
    This version can be referred to in the ASPSP?s documentation.
    """  
    explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explanation'), 'exclude': lambda f: f is None }})
    r"""Detailed information about the SCA method for the PSU."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP.
    Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\".
    This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.
    """  
    