<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DataSourceTable - A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DataSourceTable
{
    /**
     * The type to select columns for the data source table. Defaults to SELECTED.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataSourceTableColumnSelectionTypeEnum $columnSelectionType
     */
	#[\JMS\Serializer\Annotation\SerializedName('columnSelectionType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DataSourceTableColumnSelectionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataSourceTableColumnSelectionTypeEnum $columnSelectionType = null;
    
    /**
     * Columns selected for the data source table. The column_selection_type must be SELECTED.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DataSourceColumnReference> $columns
     */
	#[\JMS\Serializer\Annotation\SerializedName('columns')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\DataSourceColumnReference>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $columns = null;
    
    /**
     * The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataExecutionStatus $dataExecutionStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataExecutionStatus')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DataExecutionStatus')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataExecutionStatus $dataExecutionStatus = null;
    
    /**
     * The ID of the data source the data source table is associated with.
     * 
     * @var ?string $dataSourceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataSourceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dataSourceId = null;
    
    /**
     * Filter specifications in the data source table.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\FilterSpec> $filterSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\FilterSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterSpecs = null;
    
    /**
     * The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
     * 
     * @var ?int $rowLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('rowLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $rowLimit = null;
    
    /**
     * Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SortSpec> $sortSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('sortSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SortSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sortSpecs = null;
    
	public function __construct()
	{
		$this->columnSelectionType = null;
		$this->columns = null;
		$this->dataExecutionStatus = null;
		$this->dataSourceId = null;
		$this->filterSpecs = null;
		$this->rowLimit = null;
		$this->sortSpecs = null;
	}
}
