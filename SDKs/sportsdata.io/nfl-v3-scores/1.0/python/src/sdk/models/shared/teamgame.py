"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamGame:
    
    assisted_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistedTackles'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnYards'), 'exclude': lambda f: f is None }})  
    blocked_kicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKicks'), 'exclude': lambda f: f is None }})  
    completion_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionPercentage'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTime'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    day_of_week: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayOfWeek'), 'exclude': lambda f: f is None }})  
    extra_point_kicking_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointKickingAttempts'), 'exclude': lambda f: f is None }})  
    extra_point_kicking_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointKickingConversions'), 'exclude': lambda f: f is None }})  
    extra_point_passing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointPassingAttempts'), 'exclude': lambda f: f is None }})  
    extra_point_passing_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointPassingConversions'), 'exclude': lambda f: f is None }})  
    extra_point_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointPercentage'), 'exclude': lambda f: f is None }})  
    extra_point_rushing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointRushingAttempts'), 'exclude': lambda f: f is None }})  
    extra_point_rushing_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointRushingConversions'), 'exclude': lambda f: f is None }})  
    extra_points_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsHadBlocked'), 'exclude': lambda f: f is None }})  
    field_goal_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalAttempts'), 'exclude': lambda f: f is None }})  
    field_goal_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalPercentage'), 'exclude': lambda f: f is None }})  
    field_goal_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    field_goal_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnYards'), 'exclude': lambda f: f is None }})  
    field_goals_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsHadBlocked'), 'exclude': lambda f: f is None }})  
    field_goals_made: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade'), 'exclude': lambda f: f is None }})  
    first_downs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstDowns'), 'exclude': lambda f: f is None }})  
    first_downs_by_passing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstDownsByPassing'), 'exclude': lambda f: f is None }})  
    first_downs_by_penalty: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstDownsByPenalty'), 'exclude': lambda f: f is None }})  
    first_downs_by_rushing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstDownsByRushing'), 'exclude': lambda f: f is None }})  
    fourth_down_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthDownAttempts'), 'exclude': lambda f: f is None }})  
    fourth_down_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthDownConversions'), 'exclude': lambda f: f is None }})  
    fourth_down_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthDownPercentage'), 'exclude': lambda f: f is None }})  
    fumble_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    fumble_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnYards'), 'exclude': lambda f: f is None }})  
    fumbles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fumbles'), 'exclude': lambda f: f is None }})  
    fumbles_forced: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesForced'), 'exclude': lambda f: f is None }})  
    fumbles_lost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesLost'), 'exclude': lambda f: f is None }})  
    fumbles_recovered: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesRecovered'), 'exclude': lambda f: f is None }})  
    game_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameKey'), 'exclude': lambda f: f is None }})  
    giveaways: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Giveaways'), 'exclude': lambda f: f is None }})  
    global_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalGameID'), 'exclude': lambda f: f is None }})  
    global_opponent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalOpponentID'), 'exclude': lambda f: f is None }})  
    global_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalTeamID'), 'exclude': lambda f: f is None }})  
    goal_to_go_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoalToGoAttempts'), 'exclude': lambda f: f is None }})  
    goal_to_go_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoalToGoConversions'), 'exclude': lambda f: f is None }})  
    goal_to_go_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoalToGoPercentage'), 'exclude': lambda f: f is None }})  
    home_or_away: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeOrAway'), 'exclude': lambda f: f is None }})  
    humidity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Humidity'), 'exclude': lambda f: f is None }})  
    interception_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturns'), 'exclude': lambda f: f is None }})  
    interception_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    interception_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnYards'), 'exclude': lambda f: f is None }})  
    is_game_over: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsGameOver'), 'exclude': lambda f: f is None }})  
    kickoffs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Kickoffs'), 'exclude': lambda f: f is None }})  
    kickoffs_in_end_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickoffsInEndZone'), 'exclude': lambda f: f is None }})  
    kickoff_touchbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickoffTouchbacks'), 'exclude': lambda f: f is None }})  
    kick_return_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnAverage'), 'exclude': lambda f: f is None }})  
    kick_return_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnLong'), 'exclude': lambda f: f is None }})  
    kick_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturns'), 'exclude': lambda f: f is None }})  
    kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    kick_return_yard_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYardDifferential'), 'exclude': lambda f: f is None }})  
    kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYards'), 'exclude': lambda f: f is None }})  
    offensive_plays: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensivePlays'), 'exclude': lambda f: f is None }})  
    offensive_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveYards'), 'exclude': lambda f: f is None }})  
    offensive_yards_per_play: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveYardsPerPlay'), 'exclude': lambda f: f is None }})  
    opponent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Opponent'), 'exclude': lambda f: f is None }})  
    opponent_assisted_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentAssistedTackles'), 'exclude': lambda f: f is None }})  
    opponent_blocked_kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentBlockedKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_blocked_kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentBlockedKickReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_blocked_kicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentBlockedKicks'), 'exclude': lambda f: f is None }})  
    opponent_completion_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentCompletionPercentage'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_kicking_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointKickingAttempts'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_kicking_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointKickingConversions'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_passing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointPassingAttempts'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_passing_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointPassingConversions'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointPercentage'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_rushing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointRushingAttempts'), 'exclude': lambda f: f is None }})  
    opponent_extra_point_rushing_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointRushingConversions'), 'exclude': lambda f: f is None }})  
    opponent_extra_points_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentExtraPointsHadBlocked'), 'exclude': lambda f: f is None }})  
    opponent_field_goal_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalAttempts'), 'exclude': lambda f: f is None }})  
    opponent_field_goal_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalPercentage'), 'exclude': lambda f: f is None }})  
    opponent_field_goal_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_field_goal_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_field_goals_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalsHadBlocked'), 'exclude': lambda f: f is None }})  
    opponent_field_goals_made: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFieldGoalsMade'), 'exclude': lambda f: f is None }})  
    opponent_first_downs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFirstDowns'), 'exclude': lambda f: f is None }})  
    opponent_first_downs_by_passing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFirstDownsByPassing'), 'exclude': lambda f: f is None }})  
    opponent_first_downs_by_penalty: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFirstDownsByPenalty'), 'exclude': lambda f: f is None }})  
    opponent_first_downs_by_rushing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFirstDownsByRushing'), 'exclude': lambda f: f is None }})  
    opponent_fourth_down_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFourthDownAttempts'), 'exclude': lambda f: f is None }})  
    opponent_fourth_down_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFourthDownConversions'), 'exclude': lambda f: f is None }})  
    opponent_fourth_down_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFourthDownPercentage'), 'exclude': lambda f: f is None }})  
    opponent_fumble_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumbleReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_fumble_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumbleReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_fumbles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumbles'), 'exclude': lambda f: f is None }})  
    opponent_fumbles_forced: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumblesForced'), 'exclude': lambda f: f is None }})  
    opponent_fumbles_lost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumblesLost'), 'exclude': lambda f: f is None }})  
    opponent_fumbles_recovered: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentFumblesRecovered'), 'exclude': lambda f: f is None }})  
    opponent_giveaways: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentGiveaways'), 'exclude': lambda f: f is None }})  
    opponent_goal_to_go_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentGoalToGoAttempts'), 'exclude': lambda f: f is None }})  
    opponent_goal_to_go_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentGoalToGoConversions'), 'exclude': lambda f: f is None }})  
    opponent_goal_to_go_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentGoalToGoPercentage'), 'exclude': lambda f: f is None }})  
    opponent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentID'), 'exclude': lambda f: f is None }})  
    opponent_interception_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentInterceptionReturns'), 'exclude': lambda f: f is None }})  
    opponent_interception_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentInterceptionReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_interception_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentInterceptionReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_kickoffs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickoffs'), 'exclude': lambda f: f is None }})  
    opponent_kickoffs_in_end_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickoffsInEndZone'), 'exclude': lambda f: f is None }})  
    opponent_kickoff_touchbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickoffTouchbacks'), 'exclude': lambda f: f is None }})  
    opponent_kick_return_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickReturnAverage'), 'exclude': lambda f: f is None }})  
    opponent_kick_return_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickReturnLong'), 'exclude': lambda f: f is None }})  
    opponent_kick_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickReturns'), 'exclude': lambda f: f is None }})  
    opponent_kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentKickReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_offensive_plays: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentOffensivePlays'), 'exclude': lambda f: f is None }})  
    opponent_offensive_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentOffensiveYards'), 'exclude': lambda f: f is None }})  
    opponent_offensive_yards_per_play: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentOffensiveYardsPerPlay'), 'exclude': lambda f: f is None }})  
    opponent_passer_rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPasserRating'), 'exclude': lambda f: f is None }})  
    opponent_passes_defended: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassesDefended'), 'exclude': lambda f: f is None }})  
    opponent_passing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingAttempts'), 'exclude': lambda f: f is None }})  
    opponent_passing_completions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingCompletions'), 'exclude': lambda f: f is None }})  
    opponent_passing_dropbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingDropbacks'), 'exclude': lambda f: f is None }})  
    opponent_passing_interception_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingInterceptionPercentage'), 'exclude': lambda f: f is None }})  
    opponent_passing_interceptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingInterceptions'), 'exclude': lambda f: f is None }})  
    opponent_passing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_passing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingYards'), 'exclude': lambda f: f is None }})  
    opponent_passing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    opponent_passing_yards_per_completion: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPassingYardsPerCompletion'), 'exclude': lambda f: f is None }})  
    opponent_penalties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPenalties'), 'exclude': lambda f: f is None }})  
    opponent_penalty_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPenaltyYards'), 'exclude': lambda f: f is None }})  
    opponent_punt_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntAverage'), 'exclude': lambda f: f is None }})  
    opponent_punt_net_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntNetAverage'), 'exclude': lambda f: f is None }})  
    opponent_punt_net_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntNetYards'), 'exclude': lambda f: f is None }})  
    opponent_punt_return_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntReturnAverage'), 'exclude': lambda f: f is None }})  
    opponent_punt_return_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntReturnLong'), 'exclude': lambda f: f is None }})  
    opponent_punt_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntReturns'), 'exclude': lambda f: f is None }})  
    opponent_punt_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_punt_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_punts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPunts'), 'exclude': lambda f: f is None }})  
    opponent_punts_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntsHadBlocked'), 'exclude': lambda f: f is None }})  
    opponent_punt_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentPuntYards'), 'exclude': lambda f: f is None }})  
    opponent_quarterback_hits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentQuarterbackHits'), 'exclude': lambda f: f is None }})  
    opponent_quarterback_hits_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentQuarterbackHitsDifferential'), 'exclude': lambda f: f is None }})  
    opponent_quarterback_hits_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentQuarterbackHitsPercentage'), 'exclude': lambda f: f is None }})  
    opponent_quarterback_sacks_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentQuarterbackSacksDifferential'), 'exclude': lambda f: f is None }})  
    opponent_red_zone_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRedZoneAttempts'), 'exclude': lambda f: f is None }})  
    opponent_red_zone_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRedZoneConversions'), 'exclude': lambda f: f is None }})  
    opponent_red_zone_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRedZonePercentage'), 'exclude': lambda f: f is None }})  
    opponent_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentReturnYards'), 'exclude': lambda f: f is None }})  
    opponent_rushing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRushingAttempts'), 'exclude': lambda f: f is None }})  
    opponent_rushing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRushingTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_rushing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRushingYards'), 'exclude': lambda f: f is None }})  
    opponent_rushing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentRushingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    opponent_sacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentSacks'), 'exclude': lambda f: f is None }})  
    opponent_sack_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentSackYards'), 'exclude': lambda f: f is None }})  
    opponent_safeties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentSafeties'), 'exclude': lambda f: f is None }})  
    opponent_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScore'), 'exclude': lambda f: f is None }})  
    opponent_score_overtime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScoreOvertime'), 'exclude': lambda f: f is None }})  
    opponent_score_quarter1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScoreQuarter1'), 'exclude': lambda f: f is None }})  
    opponent_score_quarter2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScoreQuarter2'), 'exclude': lambda f: f is None }})  
    opponent_score_quarter3: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScoreQuarter3'), 'exclude': lambda f: f is None }})  
    opponent_score_quarter4: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentScoreQuarter4'), 'exclude': lambda f: f is None }})  
    opponent_solo_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentSoloTackles'), 'exclude': lambda f: f is None }})  
    opponent_tackles_for_loss: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTacklesForLoss'), 'exclude': lambda f: f is None }})  
    opponent_tackles_for_loss_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTacklesForLossDifferential'), 'exclude': lambda f: f is None }})  
    opponent_tackles_for_loss_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTacklesForLossPercentage'), 'exclude': lambda f: f is None }})  
    opponent_takeaways: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTakeaways'), 'exclude': lambda f: f is None }})  
    opponent_third_down_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentThirdDownAttempts'), 'exclude': lambda f: f is None }})  
    opponent_third_down_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentThirdDownConversions'), 'exclude': lambda f: f is None }})  
    opponent_third_down_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentThirdDownPercentage'), 'exclude': lambda f: f is None }})  
    opponent_time_of_possession: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimeOfPossession'), 'exclude': lambda f: f is None }})  
    opponent_time_of_possession_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimeOfPossessionMinutes'), 'exclude': lambda f: f is None }})  
    opponent_time_of_possession_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimeOfPossessionSeconds'), 'exclude': lambda f: f is None }})  
    opponent_times_sacked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimesSacked'), 'exclude': lambda f: f is None }})  
    opponent_times_sacked_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimesSackedPercentage'), 'exclude': lambda f: f is None }})  
    opponent_times_sacked_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTimesSackedYards'), 'exclude': lambda f: f is None }})  
    opponent_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTouchdowns'), 'exclude': lambda f: f is None }})  
    opponent_turnover_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTurnoverDifferential'), 'exclude': lambda f: f is None }})  
    opponent_two_point_conversion_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentTwoPointConversionReturns'), 'exclude': lambda f: f is None }})  
    over_under: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverUnder'), 'exclude': lambda f: f is None }})  
    passer_rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PasserRating'), 'exclude': lambda f: f is None }})  
    passes_defended: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassesDefended'), 'exclude': lambda f: f is None }})  
    passing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingAttempts'), 'exclude': lambda f: f is None }})  
    passing_completions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingCompletions'), 'exclude': lambda f: f is None }})  
    passing_dropbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingDropbacks'), 'exclude': lambda f: f is None }})  
    passing_interception_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingInterceptionPercentage'), 'exclude': lambda f: f is None }})  
    passing_interceptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingInterceptions'), 'exclude': lambda f: f is None }})  
    passing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingTouchdowns'), 'exclude': lambda f: f is None }})  
    passing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYards'), 'exclude': lambda f: f is None }})  
    passing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    passing_yards_per_completion: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYardsPerCompletion'), 'exclude': lambda f: f is None }})  
    penalties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Penalties'), 'exclude': lambda f: f is None }})  
    penalty_yard_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PenaltyYardDifferential'), 'exclude': lambda f: f is None }})  
    penalty_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PenaltyYards'), 'exclude': lambda f: f is None }})  
    playing_surface: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayingSurface'), 'exclude': lambda f: f is None }})  
    point_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointDifferential'), 'exclude': lambda f: f is None }})  
    point_spread: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpread'), 'exclude': lambda f: f is None }})  
    punt_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntAverage'), 'exclude': lambda f: f is None }})  
    punt_net_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntNetAverage'), 'exclude': lambda f: f is None }})  
    punt_net_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntNetYards'), 'exclude': lambda f: f is None }})  
    punt_return_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnAverage'), 'exclude': lambda f: f is None }})  
    punt_return_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnLong'), 'exclude': lambda f: f is None }})  
    punt_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturns'), 'exclude': lambda f: f is None }})  
    punt_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    punt_return_yard_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYardDifferential'), 'exclude': lambda f: f is None }})  
    punt_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYards'), 'exclude': lambda f: f is None }})  
    punts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Punts'), 'exclude': lambda f: f is None }})  
    punts_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntsHadBlocked'), 'exclude': lambda f: f is None }})  
    punt_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntYards'), 'exclude': lambda f: f is None }})  
    quarterback_hits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackHits'), 'exclude': lambda f: f is None }})  
    quarterback_hits_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackHitsDifferential'), 'exclude': lambda f: f is None }})  
    quarterback_hits_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackHitsPercentage'), 'exclude': lambda f: f is None }})  
    quarterback_sacks_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackSacksDifferential'), 'exclude': lambda f: f is None }})  
    red_zone_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedZoneAttempts'), 'exclude': lambda f: f is None }})  
    red_zone_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedZoneConversions'), 'exclude': lambda f: f is None }})  
    red_zone_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedZonePercentage'), 'exclude': lambda f: f is None }})  
    return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReturnYards'), 'exclude': lambda f: f is None }})  
    rushing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingAttempts'), 'exclude': lambda f: f is None }})  
    rushing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingTouchdowns'), 'exclude': lambda f: f is None }})  
    rushing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingYards'), 'exclude': lambda f: f is None }})  
    rushing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    sacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sacks'), 'exclude': lambda f: f is None }})  
    sack_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SackYards'), 'exclude': lambda f: f is None }})  
    safeties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Safeties'), 'exclude': lambda f: f is None }})  
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Score'), 'exclude': lambda f: f is None }})  
    score_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreID'), 'exclude': lambda f: f is None }})  
    score_overtime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreOvertime'), 'exclude': lambda f: f is None }})  
    score_quarter1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreQuarter1'), 'exclude': lambda f: f is None }})  
    score_quarter2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreQuarter2'), 'exclude': lambda f: f is None }})  
    score_quarter3: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreQuarter3'), 'exclude': lambda f: f is None }})  
    score_quarter4: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreQuarter4'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    solo_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoloTackles'), 'exclude': lambda f: f is None }})  
    stadium: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stadium'), 'exclude': lambda f: f is None }})  
    tackles_for_loss: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLoss'), 'exclude': lambda f: f is None }})  
    tackles_for_loss_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLossDifferential'), 'exclude': lambda f: f is None }})  
    tackles_for_loss_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLossPercentage'), 'exclude': lambda f: f is None }})  
    takeaways: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Takeaways'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    team_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamGameID'), 'exclude': lambda f: f is None }})  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamID'), 'exclude': lambda f: f is None }})  
    team_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamName'), 'exclude': lambda f: f is None }})  
    temperature: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }})  
    third_down_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdDownAttempts'), 'exclude': lambda f: f is None }})  
    third_down_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdDownConversions'), 'exclude': lambda f: f is None }})  
    third_down_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdDownPercentage'), 'exclude': lambda f: f is None }})  
    time_of_possession: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeOfPossession'), 'exclude': lambda f: f is None }})  
    time_of_possession_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeOfPossessionMinutes'), 'exclude': lambda f: f is None }})  
    time_of_possession_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeOfPossessionSeconds'), 'exclude': lambda f: f is None }})  
    times_sacked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimesSacked'), 'exclude': lambda f: f is None }})  
    times_sacked_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimesSackedPercentage'), 'exclude': lambda f: f is None }})  
    times_sacked_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimesSackedYards'), 'exclude': lambda f: f is None }})  
    total_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalScore'), 'exclude': lambda f: f is None }})  
    touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Touchdowns'), 'exclude': lambda f: f is None }})  
    turnover_differential: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TurnoverDifferential'), 'exclude': lambda f: f is None }})  
    two_point_conversion_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReturns'), 'exclude': lambda f: f is None }})  
    week: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Week'), 'exclude': lambda f: f is None }})  
    wind_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindSpeed'), 'exclude': lambda f: f is None }})  
    