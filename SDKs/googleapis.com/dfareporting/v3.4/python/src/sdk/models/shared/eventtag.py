"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionvalue as shared_dimensionvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EventTagSiteFilterTypeEnum(str, Enum):
    r"""Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites."""
    WHITELIST = 'WHITELIST'
    BLACKLIST = 'BLACKLIST'

class EventTagStatusEnum(str, Enum):
    r"""Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'

class EventTagTypeEnum(str, Enum):
    r"""Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field."""
    IMPRESSION_IMAGE_EVENT_TAG = 'IMPRESSION_IMAGE_EVENT_TAG'
    IMPRESSION_JAVASCRIPT_EVENT_TAG = 'IMPRESSION_JAVASCRIPT_EVENT_TAG'
    CLICK_THROUGH_EVENT_TAG = 'CLICK_THROUGH_EVENT_TAG'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventTag:
    r"""Contains properties of an event tag."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this event tag. This is a read-only field that can be left blank."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of this event tag. This field or the campaignId field is required on insertion."""  
    advertiser_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Campaign ID of this event tag. This field or the advertiserId field is required on insertion."""  
    campaign_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    enabled_by_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledByDefault'), 'exclude': lambda f: f is None }})
    r"""Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads."""  
    exclude_from_adx_requests: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeFromAdxRequests'), 'exclude': lambda f: f is None }})
    r"""Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this event tag. This is a read-only, auto-generated field."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#eventTag\\"."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this event tag. This is a required field and must be less than 256 characters long."""  
    site_filter_type: Optional[EventTagSiteFilterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteFilterType'), 'exclude': lambda f: f is None }})
    r"""Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites."""  
    site_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteIds'), 'exclude': lambda f: f is None }})
    r"""Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter."""  
    ssl_compliant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslCompliant'), 'exclude': lambda f: f is None }})
    r"""Whether this tag is SSL-compliant or not. This is a read-only field."""  
    status: Optional[EventTagStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field."""  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this event tag. This is a read-only field that can be left blank."""  
    type: Optional[EventTagTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion."""  
    url_escape_levels: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlEscapeLevels'), 'exclude': lambda f: f is None }})
    r"""Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type."""  
    