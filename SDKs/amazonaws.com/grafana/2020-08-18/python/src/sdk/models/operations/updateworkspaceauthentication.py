"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import assertionattributes as shared_assertionattributes
from ..shared import authenticationprovidertypes_enum as shared_authenticationprovidertypes_enum
from ..shared import idpmetadata as shared_idpmetadata
from ..shared import rolevalues as shared_rolevalues
from ..shared import updateworkspaceauthenticationresponse as shared_updateworkspaceauthenticationresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkspaceAuthenticationRequestBodySamlConfiguration:
    r"""A structure containing information about how this workspace works with SAML."""
    
    allowed_organizations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedOrganizations'), 'exclude': lambda f: f is None }})  
    assertion_attributes: Optional[shared_assertionattributes.AssertionAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assertionAttributes'), 'exclude': lambda f: f is None }})  
    idp_metadata: Optional[shared_idpmetadata.IdpMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idpMetadata'), 'exclude': lambda f: f is None }})  
    login_validity_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginValidityDuration'), 'exclude': lambda f: f is None }})  
    role_values: Optional[shared_rolevalues.RoleValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleValues'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkspaceAuthenticationRequestBody:
    
    authentication_providers: list[shared_authenticationprovidertypes_enum.AuthenticationProviderTypesEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationProviders') }})
    r"""Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href=\\"https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\\">User authentication in Amazon Managed Grafana</a>."""  
    saml_configuration: Optional[UpdateWorkspaceAuthenticationRequestBodySamlConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samlConfiguration'), 'exclude': lambda f: f is None }})
    r"""A structure containing information about how this workspace works with SAML."""  
    

@dataclasses.dataclass
class UpdateWorkspaceAuthenticationRequest:
    
    request_body: UpdateWorkspaceAuthenticationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    workspace_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspaceId', 'style': 'simple', 'explode': False }})
    r"""The ID of the workspace to update the authentication for."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateWorkspaceAuthenticationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_workspace_authentication_response: Optional[shared_updateworkspaceauthenticationresponse.UpdateWorkspaceAuthenticationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    