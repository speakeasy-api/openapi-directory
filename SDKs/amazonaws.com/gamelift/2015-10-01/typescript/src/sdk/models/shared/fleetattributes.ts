/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AnywhereConfiguration } from "./anywhereconfiguration";
import { CertificateConfiguration } from "./certificateconfiguration";
import { ComputeTypeEnum } from "./computetypeenum";
import { Ec2InstanceTypeEnum } from "./ec2instancetypeenum";
import { FleetActionEnum } from "./fleetactionenum";
import { FleetStatusEnum } from "./fleetstatusenum";
import { FleetTypeEnum } from "./fleettypeenum";
import { OperatingSystemEnum } from "./operatingsystemenum";
import { ProtectionPolicyEnum } from "./protectionpolicyenum";
import { ResourceCreationLimitPolicy } from "./resourcecreationlimitpolicy";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Describes a GameLift fleet of game hosting resources.</p> <p> <b>Related actions</b> </p>
 */
export class FleetAttributes extends SpeakeasyBase {
  /**
   * GameLift Anywhere configuration options for your Anywhere fleets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnywhereConfiguration" })
  @Type(() => AnywhereConfiguration)
  anywhereConfiguration?: AnywhereConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "BuildArn" })
  buildArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BuildId" })
  buildId?: string;

  /**
   * Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html">GameLift Server SDK</a> operation <code>GetInstanceCertificate</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CertificateConfiguration" })
  @Type(() => CertificateConfiguration)
  certificateConfiguration?: CertificateConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ComputeType" })
  computeType?: ComputeTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FleetArn" })
  fleetArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FleetId" })
  fleetId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FleetType" })
  fleetType?: FleetTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceRoleArn" })
  instanceRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceType" })
  instanceType?: Ec2InstanceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LogPaths" })
  logPaths?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "MetricGroups" })
  metricGroups?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NewGameSessionProtectionPolicy" })
  newGameSessionProtectionPolicy?: ProtectionPolicyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "OperatingSystem" })
  operatingSystem?: OperatingSystemEnum;

  /**
   * <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p> <p>The policy is evaluated when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, GameLift checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ResourceCreationLimitPolicy" })
  @Type(() => ResourceCreationLimitPolicy)
  resourceCreationLimitPolicy?: ResourceCreationLimitPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "ScriptArn" })
  scriptArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ScriptId" })
  scriptId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServerLaunchParameters" })
  serverLaunchParameters?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServerLaunchPath" })
  serverLaunchPath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: FleetStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StoppedActions" })
  stoppedActions?: FleetActionEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "TerminationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  terminationTime?: Date;
}
