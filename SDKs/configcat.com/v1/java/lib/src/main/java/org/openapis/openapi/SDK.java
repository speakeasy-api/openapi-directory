/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * **Base API URL**: https://api.configcat.com
 * 
 * If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).
 * 
 * The purpose of this API is to access the ConfigCat platform programmatically. 
 * You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat. 
 * 
 * The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON 
 * and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).
 * 
 * 
 * # OpenAPI Specification
 * 
 * The complete specification is publicly available here: [swagger.json](v1/swagger.json). 
 * You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or
 * [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.
 * 
 * # Authentication
 * This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication). 
 * 
 * &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 * 
 * # Throttling and rate limits
 * All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:
 * 
 * | Header | Description |
 * | :- | :- |
 * | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |
 * | X-Rate-Limit-Reset     | The time	when the current rate limit period resets.						  |
 * 
 * When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.configcat.com",
	};
  	
    /**
     * Access audit log entries.
     */
    public AuditLogs auditLogs;
    /**
     * With this endpoint you can upload Feature Flag and Setting usage references that will be shown on the ConfigCat Dashboard.
     * 
     * &lt;a href="https://configcat.com/docs/advanced/code-references/overview/" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the concept of Code References.
     */
    public CodeReferences codeReferences;
    /**
     * With these endpoints you can manage your Configs.
     * This also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their 
     * [served values](#tag/Feature-Flag-and-Setting-values) through this API.
     * 
     * &lt;a href="https://configcat.com/docs/main-concepts/#config" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the concept of Configs.
     */
    public Configs configs;
    /**
     * With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products). 
     * 
     * &lt;a href="https://configcat.com/docs/main-concepts/#environment" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the concept of Environments.
     */
    public Environments environments;
    /**
     * With these endpoints you can control how your existing Feature Flags and Settings should serve their values. 
     * You can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.
     * 
     * To determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be
     * obtained from the [Feature Flag &amp; Setting](#tag/Feature-Flags-and-Settings) endpoints.
     * 
     * You also have to specify in which Environment you want to change the served value configuration by its
     * `environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint.
     */
    public FeatureFlagAndSettingValues featureFlagAndSettingValues;
    /**
     * With these endpoints you can control how your existing Feature Flags and Settings should serve their values. 
     * You can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.
     * 
     * These endpoints are determining the Environment and Config by the &lt;a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey"&gt;SDK key&lt;/a&gt; passed in
     * the `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change, 
     * you can use either its `settingId` or `key` attribute. You can get those attributes 
     * from the [Feature Flag &amp; Setting](#tag/Feature-Flags-and-Settings) endpoints.
     */
    public FeatureFlagAndSettingValuesUsingSDKKey featureFlagAndSettingValuesUsingSDKKey;
    /**
     * With these endpoints you can manage your Feature Flags or Settings within a Config. 
     * However you can't use them for manipulating the values of your Feature Flags and Settings,
     * to do that please visit the [Feature Flag &amp; Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)
     * and [Feature Flag &amp; Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.
     * 
     * For using these endpoints, first you have to select which Config you want to work with by its `configId` 
     * which can be obtained from the [List Configs](#operation/get-configs) endpoint. 
     * Then you can use it to create new Feature Flags or to get information about existing ones.
     * 
     * Then you can obtain the `settingId` or `key` of your desired Feature Flag or Setting 
     * to use them for further operations in this API. 
     * 
     * &lt;a href="https://configcat.com/docs/main-concepts/#setting" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the concept of Settings.
     */
    public FeatureFlagsAndSettings featureFlagsAndSettings;
    public IntegrationLinks integrationLinks;
    /**
     * Information about the current user.
     */
    public Me me;
    /**
     * With these endpoints you can manage your Members.
     * 
     * &lt;a href="https://configcat.com/docs/advanced/team-collaboration" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about Team Collaboration.
     */
    public Members members;
    /**
     * With these endpoints you can get useful information about your Organizations.
     * This also can be used to manage your [Products](#tag/Products).
     * 
     * &lt;a href="https://configcat.com/docs/organization/" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the Organizations.
     */
    public Organizations organizations;
    /**
     * With these endpoints you can manage your Permission Groups.
     * 
     * &lt;a href="https://configcat.com/docs/advanced/team-collaboration#permissions--groups" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about Permissions.
     */
    public PermissionGroups permissionGroups;
    /**
     * With these endpoints you can manage your Products.
     * This also can be used to manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags) and [Permission Groups](#tag/Permission-Groups) through this API.
     * 
     * &lt;a href="https://configcat.com/docs/main-concepts/#product" target="_blank" rel="noopener noreferrer"&gt;Here&lt;/a&gt; you can read more about the concept of Products.
     */
    public Products products;
    /**
     * With these endpoints you can manage your SDK Keys.
     */
    public SDKKeys sdkKeys;
    /**
     * With these endpoints you can manage your Segments.
     * Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
     */
    public Segments segments;
    /**
     * With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint.
     */
    public Tags tags;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.auditLogs = new AuditLogs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.codeReferences = new CodeReferences(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.configs = new Configs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.environments = new Environments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.featureFlagAndSettingValues = new FeatureFlagAndSettingValues(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.featureFlagAndSettingValuesUsingSDKKey = new FeatureFlagAndSettingValuesUsingSDKKey(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.featureFlagsAndSettings = new FeatureFlagsAndSettings(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.integrationLinks = new IntegrationLinks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.me = new Me(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.members = new Members(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.organizations = new Organizations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.permissionGroups = new PermissionGroups(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.products = new Products(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sdkKeys = new SDKKeys(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.segments = new Segments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tags = new Tags(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}