/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
   */
  datacatalogProjectsLocationsEntryGroupsCreate(
    req: operations.DatacatalogProjectsLocationsEntryGroupsCreateRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsEntryGroupsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/entryGroups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1EntryGroupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsCreateResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1EntryGroup = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1EntryGroup
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesCreate(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/entries", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1EntryInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1Entry = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1Entry
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesImport(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/entries:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ImportEntriesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesList(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesListRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/entries", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesListResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ListEntriesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ListEntriesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContacts(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:modifyEntryContacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ModifyEntryContactsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1Contacts = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1Contacts
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverview(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:modifyEntryOverview",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ModifyEntryOverviewRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1EntryOverview = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1EntryOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks an Entry as starred by the current user. Starring information is private to each user.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesStar(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:star", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1StarEntryResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * `ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesTagsReconcile(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/tags:reconcile",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ReconcileTagsRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks an Entry as NOT starred by the current user. Starring information is private to each user.
   */
  datacatalogProjectsLocationsEntryGroupsEntriesUnstar(
    req: operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:unstar", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1UnstarEntryResponse =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists entry groups.
   */
  datacatalogProjectsLocationsEntryGroupsList(
    req: operations.DatacatalogProjectsLocationsEntryGroupsListRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsEntryGroupsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/entryGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsListResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ListEntryGroupsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ListEntryGroupsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.
   */
  datacatalogProjectsLocationsEntryGroupsTagsCreate(
    req: operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/tags", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1TagInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1Tag = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1Tag
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists tags assigned to an Entry. The columns in the response are lowercased.
   */
  datacatalogProjectsLocationsEntryGroupsTagsList(
    req: operations.DatacatalogProjectsLocationsEntryGroupsTagsListRequest,
    security: operations.DatacatalogProjectsLocationsEntryGroupsTagsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsEntryGroupsTagsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/tags", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsEntryGroupsTagsListResponse =
        new operations.DatacatalogProjectsLocationsEntryGroupsTagsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ListTagsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1ListTagsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  datacatalogProjectsLocationsOperationsCancel(
    req: operations.DatacatalogProjectsLocationsOperationsCancelRequest,
    security: operations.DatacatalogProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsOperationsCancelResponse =
        new operations.DatacatalogProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  datacatalogProjectsLocationsOperationsList(
    req: operations.DatacatalogProjectsLocationsOperationsListRequest,
    security: operations.DatacatalogProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsOperationsListResponse =
        new operations.DatacatalogProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
   */
  datacatalogProjectsLocationsTagTemplatesCreate(
    req: operations.DatacatalogProjectsLocationsTagTemplatesCreateRequest,
    security: operations.DatacatalogProjectsLocationsTagTemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTagTemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTagTemplatesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/tagTemplates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1TagTemplateInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTagTemplatesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTagTemplatesCreateResponse =
        new operations.DatacatalogProjectsLocationsTagTemplatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1TagTemplate = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1TagTemplate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
   */
  datacatalogProjectsLocationsTagTemplatesFieldsCreate(
    req: operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest,
    security: operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/fields", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1TagTemplateFieldInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1TagTemplateField = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1TagTemplateField
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Renames an enum value in a tag template. Within a single enum field, enum values must be unique.
   */
  datacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRename(
    req: operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest,
    security: operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:rename", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse =
        new operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1TagTemplateField = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1TagTemplateField
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.
   */
  datacatalogProjectsLocationsTaxonomiesCreate(
    req: operations.DatacatalogProjectsLocationsTaxonomiesCreateRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsTaxonomiesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/taxonomies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1TaxonomyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesCreateResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1Taxonomy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1Taxonomy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls.
   */
  datacatalogProjectsLocationsTaxonomiesExport(
    req: operations.DatacatalogProjectsLocationsTaxonomiesExportRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsTaxonomiesExportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/taxonomies:export",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesExportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesExportResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ExportTaxonomiesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ExportTaxonomiesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.
   */
  datacatalogProjectsLocationsTaxonomiesImport(
    req: operations.DatacatalogProjectsLocationsTaxonomiesImportRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsTaxonomiesImportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/taxonomies:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ImportTaxonomiesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesImportResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesImportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ImportTaxonomiesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ImportTaxonomiesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all taxonomies in a project in a particular location that you have a permission to view.
   */
  datacatalogProjectsLocationsTaxonomiesList(
    req: operations.DatacatalogProjectsLocationsTaxonomiesListRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsTaxonomiesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/taxonomies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesListResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ListTaxonomiesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ListTaxonomiesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a policy tag in a taxonomy.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsCreate(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/policyTags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1PolicyTagInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1PolicyTag = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1PolicyTag
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsDelete(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a policy tag.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsGet(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1PolicyTag = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1PolicyTag
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the IAM policy for a policy tag or a taxonomy.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:getIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all policy tags in a taxonomy.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsList(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/policyTags",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1ListPolicyTagsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogV1ListPolicyTagsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a policy tag, including its display name, description, and parent policy tag.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsPatch(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1PolicyTagInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1PolicyTag = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1PolicyTag
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the IAM policy for a policy tag or a taxonomy.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns your permissions on a specified policy tag or taxonomy.
   */
  datacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions(
    req: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.
   */
  datacatalogProjectsLocationsTaxonomiesReplace(
    req: operations.DatacatalogProjectsLocationsTaxonomiesReplaceRequest,
    security: operations.DatacatalogProjectsLocationsTaxonomiesReplaceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatacatalogProjectsLocationsTaxonomiesReplaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatacatalogProjectsLocationsTaxonomiesReplaceRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:replace", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogV1ReplaceTaxonomyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatacatalogProjectsLocationsTaxonomiesReplaceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatacatalogProjectsLocationsTaxonomiesReplaceResponse =
        new operations.DatacatalogProjectsLocationsTaxonomiesReplaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogV1Taxonomy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogV1Taxonomy
            );
          }
          break;
      }

      return res;
    });
  }
}
