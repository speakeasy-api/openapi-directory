// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsErrorAttachmentTextSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsErrorAttachmentTextRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Error attachment id.
	AttachmentID string `pathParam:"style=simple,explode=false,name=attachmentId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorAttachmentTextDefaultApplicationJSONError struct {
	Code    ErrorsErrorAttachmentTextDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                       `json:"message"`
}

// ErrorsErrorAttachmentTextDefaultApplicationJSON - Error code with reason
type ErrorsErrorAttachmentTextDefaultApplicationJSON struct {
	Error ErrorsErrorAttachmentTextDefaultApplicationJSONError `json:"error"`
}

// ErrorsErrorAttachmentText200ApplicationJSON - Error attachment text.
type ErrorsErrorAttachmentText200ApplicationJSON struct {
	Content *string `json:"content,omitempty"`
}

type ErrorsErrorAttachmentTextResponse struct {
	ContentType string
	// Error attachment text.
	ErrorsErrorAttachmentText200ApplicationJSONObject *ErrorsErrorAttachmentText200ApplicationJSON
	// Error code with reason
	ErrorsErrorAttachmentTextDefaultApplicationJSONObject *ErrorsErrorAttachmentTextDefaultApplicationJSON
	StatusCode                                            int
	RawResponse                                           *http.Response
}
