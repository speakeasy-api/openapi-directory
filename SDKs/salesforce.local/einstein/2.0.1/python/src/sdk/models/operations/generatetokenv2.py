"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import generateaccesstokenresponse as shared_generateaccesstokenresponse
from enum import Enum
from typing import Optional

class GenerateTokenV2RequestBodyGrantTypeEnum(str, Enum):
    r"""specify the authentication method desired"""
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
    REFRESH_TOKEN = 'refresh_token'


@dataclasses.dataclass
class GenerateTokenV2RequestBody:
    
    assertion: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'assertion' }})
    r"""encrypted payload to identify yourself"""  
    grant_type: Optional[GenerateTokenV2RequestBodyGrantTypeEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'grant_type' }})
    r"""specify the authentication method desired"""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'refresh_token' }})
    r"""The refresh token you created previously."""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'scope' }})
    r"""set to `offline` to generate a refresh token"""  
    valid_for: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'valid_for' }})
    r"""Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days"""  
    

@dataclasses.dataclass
class GenerateTokenV2Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    generate_access_token_response: Optional[shared_generateaccesstokenresponse.GenerateAccessTokenResponse] = dataclasses.field(default=None)
    r"""access token result"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    