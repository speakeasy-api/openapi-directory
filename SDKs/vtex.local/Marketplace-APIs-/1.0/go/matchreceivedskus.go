// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

// matchReceivedSKUs - Match SKU suggestions received in the marketplace
type matchReceivedSKUs struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newMatchReceivedSKUs(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *matchReceivedSKUs {
	return &matchReceivedSKUs{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// Match - Match Received SKUs individually
// All SKUs sent from a seller to a marketplace must be reviewed and matched. Actions in the matching process are added in the request body through the [matchType] object. Match type actions include:
//
// 1. `newproduct`: match the SKU as a new product.
//
// 2. `itemMatch`: associate the received SKU to an existing SKU.
//
// 3. `productMatch`: associate the received SKU to an existing product.
//
// 4. `deny`: deny the received SKU.
//
// 5. `pending`: the received SKU requires attention.
//
// 6. `incomplete`: the received SKU is lacking information to be matched.
//
// 7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.
//
// Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
func (s *matchReceivedSKUs) Match(ctx context.Context, request operations.MatchRequest) (*operations.MatchResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/suggestions/{sellerId}/{sellerskuid}/versions/{version}/matches/{matchid}", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request.Headers)

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.MatchResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// MatchMultiple - Match Multiple Received SKUs
// This endpoint allows the user to bulk approve, deny, or associate received SKUs. In a single request, you can match up to 25 received SKUs from your sellers.
//
// Through the `actionName` attribute you can select the operation you want to apply to the received SKU.
//
// Actions include:
//
// 1. `newproduct`: match the SKU as a new product.
//
// 2. `skuassociation`: associate the received SKU to an existing SKU.
//
// 3. `productassociation`: associate the received SKU to an existing product.
//
// 4. `deny`: deny the received SKU.
func (s *matchReceivedSKUs) MatchMultiple(ctx context.Context, request operations.MatchMultipleRequest) (*operations.MatchMultipleResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/suggestions/matches/action/{actionName}", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request.Headers)

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.MatchMultipleResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
