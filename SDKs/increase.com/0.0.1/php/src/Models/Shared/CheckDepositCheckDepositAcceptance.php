<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CheckDepositCheckDepositAcceptance - If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CheckDepositCheckDepositAcceptance
{
    /**
     * The account number printed on the check.
     * 
     * @var string $accountNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountNumber;
    
    /**
     * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * An additional line of metadata printed on the check. This typically includes the check number for business checks.
     * 
     * @var string $auxiliaryOnUs
     */
	#[\JMS\Serializer\Annotation\SerializedName('auxiliary_on_us')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $auxiliaryOnUs;
    
    /**
     * The ID of the Check Deposit that was accepted.
     * 
     * @var string $checkDepositId
     */
	#[\JMS\Serializer\Annotation\SerializedName('check_deposit_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $checkDepositId;
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckDepositCheckDepositAcceptanceCurrencyEnum $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CheckDepositCheckDepositAcceptanceCurrencyEnum>')]
    public CheckDepositCheckDepositAcceptanceCurrencyEnum $currency;
    
    /**
     * The routing number printed on the check.
     * 
     * @var string $routingNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('routing_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $routingNumber;
    
    /**
     * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
     * 
     * @var string $serialNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('serial_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $serialNumber;
    
	public function __construct()
	{
		$this->accountNumber = "";
		$this->amount = 0;
		$this->auxiliaryOnUs = "";
		$this->checkDepositId = "";
		$this->currency = \OpenAPI\OpenAPI\Models\Shared\CheckDepositCheckDepositAcceptanceCurrencyEnum::CAD;
		$this->routingNumber = "";
		$this->serialNumber = "";
	}
}
