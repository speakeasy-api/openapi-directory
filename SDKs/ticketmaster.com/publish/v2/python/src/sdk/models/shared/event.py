"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attraction as shared_attraction
from ..shared import classification as shared_classification
from ..shared import eventdates as shared_eventdates
from ..shared import eventsalesdates as shared_eventsalesdates
from ..shared import image as shared_image
from ..shared import location as shared_location
from ..shared import place as shared_place
from ..shared import pricerange as shared_pricerange
from ..shared import promoter as shared_promoter
from ..shared import publicvisibility as shared_publicvisibility
from ..shared import source as shared_source
from ..shared import venue as shared_venue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class EventTypeEnum(str, Enum):
    r"""Type of the entity"""
    EVENT = 'event'
    VENUE = 'venue'
    ATTRACTION = 'attraction'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Event:
    r"""Event"""
    
    type: EventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the entity"""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Indicate if the entity is active, inactive entity won't appear in Discovery API"""  
    additional_infos: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfos'), 'exclude': lambda f: f is None }})
    r"""Additional informations of the entity - multi-lingual fields"""  
    attractions: Optional[list[shared_attraction.Attraction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractions'), 'exclude': lambda f: f is None }})
    r"""Ordered Attraction related to the event"""  
    classifications: Optional[list[shared_classification.Classification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classifications'), 'exclude': lambda f: f is None }})
    r"""Event's classifications"""  
    dates: Optional[shared_eventdates.EventDates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})
    r"""Event's Dates"""  
    descriptions: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptions'), 'exclude': lambda f: f is None }})
    r"""Descriptions of the entity - multi-lingual fields"""  
    discoverable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discoverable'), 'exclude': lambda f: f is None }})
    r"""True if the entity is dicoverable in discovery API"""  
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})  
    images: Optional[list[shared_image.Image]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})
    r"""Images of the entity"""  
    infos: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infos'), 'exclude': lambda f: f is None }})
    r"""Any information related to the event - multi-lingual fields"""  
    location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location"""  
    names: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})
    r"""Names of the entity - multi-lingual fields"""  
    place: Optional[shared_place.Place] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})
    r"""Place"""  
    please_notes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pleaseNotes'), 'exclude': lambda f: f is None }})
    r"""Any notes related to the event - multi-lingual fields"""  
    price_ranges: Optional[list[shared_pricerange.PriceRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceRanges'), 'exclude': lambda f: f is None }})
    r"""Price ranges of this event"""  
    promoter: Optional[shared_promoter.Promoter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promoter'), 'exclude': lambda f: f is None }})
    r"""Promoter"""  
    public_visibility: Optional[shared_publicvisibility.PublicVisibility] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicVisibility'), 'exclude': lambda f: f is None }})
    r"""The class defines the public visibility period on the Discovery/Publish API."""  
    references: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('references'), 'exclude': lambda f: f is None }})
    r"""References of this entity in an other system. Reference is the exact same entity"""  
    relationships: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""Relationships on the entity, like if the entity is a duplicate of another one"""  
    sales: Optional[shared_eventsalesdates.EventSalesDates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sales'), 'exclude': lambda f: f is None }})
    r"""Event's Sales Dates"""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source"""  
    test: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test'), 'exclude': lambda f: f is None }})
    r"""Indicate if this is a test entity, by default test entities won't appear in discovery API"""  
    units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of a web site detail page of the entity"""  
    venue: Optional[shared_venue.Venue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('venue'), 'exclude': lambda f: f is None }})
    r"""Venue"""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the entity. Version is to avoid updated an entity with an older version"""  
    