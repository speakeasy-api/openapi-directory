/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Picture } from "./picture";
import { Expose, Type } from "class-transformer";

/**
 * Information about this comment's replies.
 */
export class CommentMetadataConnectionsReplies extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of replies on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class CommentMetadataConnections extends SpeakeasyBase {
  /**
   * Information about this comment's replies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replies" })
  @Type(() => CommentMetadataConnectionsReplies)
  replies: CommentMetadataConnectionsReplies;
}

export class CommentMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => CommentMetadataConnections)
  connections: CommentMetadataConnections;
}

/**
 * The Vimeo content to which the comment relates:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `video` - The comment is about a video.
 *
 */
export enum CommentTypeEnum {
  Video = "video",
}

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum CommentUserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum CommentUserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class CommentUserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class CommentUserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class CommentUserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class CommentUserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class CommentUserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class CommentUserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class CommentUserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class CommentUserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class CommentUserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class CommentUserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class CommentUserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class CommentUserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class CommentUserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class CommentUserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class CommentUserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class CommentUserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class CommentUserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class CommentUserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class CommentUserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class CommentUserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class CommentUserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => CommentUserMetadataConnectionsAlbums)
  albums: CommentUserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => CommentUserMetadataConnectionsAppearances)
  appearances: CommentUserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => CommentUserMetadataConnectionsBlock)
  block: CommentUserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => CommentUserMetadataConnectionsCategories)
  categories: CommentUserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => CommentUserMetadataConnectionsChannels)
  channels: CommentUserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => CommentUserMetadataConnectionsFeed)
  feed: CommentUserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => CommentUserMetadataConnectionsFolders)
  folders: CommentUserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => CommentUserMetadataConnectionsFollowers)
  followers: CommentUserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => CommentUserMetadataConnectionsFollowing)
  following: CommentUserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => CommentUserMetadataConnectionsGroups)
  groups: CommentUserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => CommentUserMetadataConnectionsLikes)
  likes: CommentUserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => CommentUserMetadataConnectionsModeratedChannels)
  moderatedChannels: CommentUserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => CommentUserMetadataConnectionsPictures)
  pictures: CommentUserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => CommentUserMetadataConnectionsPortfolios)
  portfolios: CommentUserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => CommentUserMetadataConnectionsRecommendedChannels)
  recommendedChannels: CommentUserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => CommentUserMetadataConnectionsRecommendedUsers)
  recommendedUsers: CommentUserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => CommentUserMetadataConnectionsShared)
  shared: CommentUserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => CommentUserMetadataConnectionsVideos)
  videos: CommentUserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => CommentUserMetadataConnectionsWatchedVideos)
  watchedVideos: CommentUserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => CommentUserMetadataConnectionsWatchlater)
  watchlater: CommentUserMetadataConnectionsWatchlater;
}

export class CommentUserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class CommentUserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class CommentUserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class CommentUserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class CommentUserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => CommentUserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: CommentUserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => CommentUserMetadataInteractionsBlock)
  block: CommentUserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => CommentUserMetadataInteractionsFollow)
  follow: CommentUserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => CommentUserMetadataInteractionsReport)
  report: CommentUserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class CommentUserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => CommentUserMetadataConnections)
  connections: CommentUserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => CommentUserMetadataInteractions)
  interactions: CommentUserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum CommentUserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum CommentUserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum CommentUserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class CommentUserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: CommentUserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: CommentUserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: CommentUserPreferencesVideosPrivacyViewEnum;
}

export class CommentUserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => CommentUserPreferencesVideosPrivacy)
  privacy?: CommentUserPreferencesVideosPrivacy;
}

export class CommentUserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => CommentUserPreferencesVideos)
  videos?: CommentUserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class CommentUserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class CommentUserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum CommentUserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class CommentUserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: CommentUserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class CommentUserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => CommentUserUploadQuotaLifetime)
  lifetime: CommentUserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => CommentUserUploadQuotaPeriodic)
  periodic: CommentUserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => CommentUserUploadQuotaSpace)
  space: CommentUserUploadQuotaSpace;
}

export class CommentUserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The user who posted the comment.
 */
export class CommentUser extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: CommentUserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: CommentUserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => CommentUserMetadata)
  metadata: CommentUserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => CommentUserPreferences)
  preferences?: CommentUserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => CommentUserUploadQuota)
  uploadQuota: CommentUserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: CommentUserWebsites })
  @Expose({ name: "websites" })
  @Type(() => CommentUserWebsites)
  websites: CommentUserWebsites[];
}

/**
 * The comment was added.
 */
export class Comment extends SpeakeasyBase {
  /**
   * The time in ISO 8601 format when the comment was posted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_on" })
  createdOn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => CommentMetadata)
  metadata: CommentMetadata;

  /**
   * The resource key string for the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The content of the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * The Vimeo content to which the comment relates:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `video` - The comment is about a video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CommentTypeEnum;

  /**
   * The unique identifier to access the comment resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user who posted the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => CommentUser)
  user: CommentUser;
}
