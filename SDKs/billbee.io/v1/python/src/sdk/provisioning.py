"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Provisioning:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def automatic_provisioning_create_account_form(self, request: shared.RechnungsdruckWebAppControllersAPIAutomaticProvisioningControllerCreateAccountContainer) -> operations.AutomaticProvisioningCreateAccountFormResponse:
        r"""Creates a new Billbee user account with the data passed"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/automaticprovision/createaccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutomaticProvisioningCreateAccountFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_form_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_form_200_text_json_object = out

        return res

    def automatic_provisioning_create_account_json(self, request: shared.RechnungsdruckWebAppControllersAPIAutomaticProvisioningControllerCreateAccountContainer) -> operations.AutomaticProvisioningCreateAccountJSONResponse:
        r"""Creates a new Billbee user account with the data passed"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/automaticprovision/createaccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutomaticProvisioningCreateAccountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_json_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_json_200_text_json_object = out

        return res

    def automatic_provisioning_create_account_raw(self, request: bytes) -> operations.AutomaticProvisioningCreateAccountRawResponse:
        r"""Creates a new Billbee user account with the data passed"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/automaticprovision/createaccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutomaticProvisioningCreateAccountRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_raw_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_create_account_raw_200_text_json_object = out

        return res

    def automatic_provisioning_terms_info(self) -> operations.AutomaticProvisioningTermsInfoResponse:
        r"""Returns infos about Billbee terms and conditions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/automaticprovision/termsinfo'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutomaticProvisioningTermsInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_terms_info_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.automatic_provisioning_terms_info_200_text_json_object = out

        return res

    