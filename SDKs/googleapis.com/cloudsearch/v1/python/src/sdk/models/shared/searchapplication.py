"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcerestriction as shared_datasourcerestriction
from ..shared import facetoptions as shared_facetoptions
from ..shared import queryinterpretationconfig as shared_queryinterpretationconfig
from ..shared import scoringconfig as shared_scoringconfig
from ..shared import sortoptions as shared_sortoptions
from ..shared import sourceconfig as shared_sourceconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchApplicationInput:
    r"""SearchApplication"""
    
    data_source_restrictions: Optional[list[shared_datasourcerestriction.DataSourceRestriction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceRestrictions'), 'exclude': lambda f: f is None }})
    r"""Retrictions applied to the configurations. The maximum number of elements is 10."""  
    default_facet_options: Optional[list[shared_facetoptions.FacetOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultFacetOptions'), 'exclude': lambda f: f is None }})
    r"""The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above."""  
    default_sort_options: Optional[shared_sortoptions.SortOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSortOptions'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the Search Application. The maximum length is 300 characters."""  
    enable_audit_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAuditLog'), 'exclude': lambda f: f is None }})
    r"""Indicates whether audit logging is on/off for requests made for the search application in query APIs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the Search Application. Format: searchapplications/{application_id}."""  
    query_interpretation_config: Optional[shared_queryinterpretationconfig.QueryInterpretationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryInterpretationConfig'), 'exclude': lambda f: f is None }})
    r"""Default options to interpret user query."""  
    return_result_thumbnail_urls: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnResultThumbnailUrls'), 'exclude': lambda f: f is None }})
    r"""With each result we should return the URI for its thumbnail (when applicable)"""  
    scoring_config: Optional[shared_scoringconfig.ScoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoringConfig'), 'exclude': lambda f: f is None }})
    r"""Scoring configurations for a source while processing a Search or Suggest request."""  
    source_config: Optional[list[shared_sourceconfig.SourceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for a sources specified in data_source_restrictions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchApplication:
    r"""SearchApplication"""
    
    data_source_restrictions: Optional[list[shared_datasourcerestriction.DataSourceRestriction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceRestrictions'), 'exclude': lambda f: f is None }})
    r"""Retrictions applied to the configurations. The maximum number of elements is 10."""  
    default_facet_options: Optional[list[shared_facetoptions.FacetOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultFacetOptions'), 'exclude': lambda f: f is None }})
    r"""The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above."""  
    default_sort_options: Optional[shared_sortoptions.SortOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSortOptions'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the Search Application. The maximum length is 300 characters."""  
    enable_audit_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAuditLog'), 'exclude': lambda f: f is None }})
    r"""Indicates whether audit logging is on/off for requests made for the search application in query APIs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the Search Application. Format: searchapplications/{application_id}."""  
    operation_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationIds'), 'exclude': lambda f: f is None }})
    r"""Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field."""  
    query_interpretation_config: Optional[shared_queryinterpretationconfig.QueryInterpretationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryInterpretationConfig'), 'exclude': lambda f: f is None }})
    r"""Default options to interpret user query."""  
    return_result_thumbnail_urls: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnResultThumbnailUrls'), 'exclude': lambda f: f is None }})
    r"""With each result we should return the URI for its thumbnail (when applicable)"""  
    scoring_config: Optional[shared_scoringconfig.ScoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoringConfig'), 'exclude': lambda f: f is None }})
    r"""Scoring configurations for a source while processing a Search or Suggest request."""  
    source_config: Optional[list[shared_sourceconfig.SourceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for a sources specified in data_source_restrictions."""  
    