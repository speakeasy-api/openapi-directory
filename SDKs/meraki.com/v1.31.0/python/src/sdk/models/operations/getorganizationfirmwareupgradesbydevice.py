"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDeviceRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    firmware_upgrade_batch_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'firmwareUpgradeBatchIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter by firmware upgrade batch ids."""  
    firmware_upgrade_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'firmwareUpgradeIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter by firmware upgrade ids."""  
    macs: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'macs', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter by network"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 50. Default is 50."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeFromVersion:
    r"""The initial version of the device"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the initial firmware version"""  
    release_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeStagedGroup:
    r"""The staged upgrade group"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the staged upgrade group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeStaged:
    r"""Staged upgrade"""
    
    group: Optional[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeStagedGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The staged upgrade group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeToVersion:
    r"""Version the device is upgrading to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the initial firmware version"""  
    release_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgrade:
    r"""The devices upgrade details and status"""
    
    from_version: Optional[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""The initial version of the device"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the upgrade"""  
    staged: Optional[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeStaged] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staged'), 'exclude': lambda f: f is None }})
    r"""Staged upgrade"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the upgrade"""  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Start time of the upgrade"""  
    to_version: Optional[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Version the device is upgrading to"""  
    upgrade_batch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeBatchId'), 'exclude': lambda f: f is None }})
    r"""ID of the upgrade batch"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDevice200ApplicationJSON:
    
    device_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceStatus'), 'exclude': lambda f: f is None }})
    r"""Status of the device upgrade"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name assigned to the device"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Serial of the device"""  
    upgrade: Optional[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSONUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgrade'), 'exclude': lambda f: f is None }})
    r"""The devices upgrade details and status"""  
    

@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesByDeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_firmware_upgrades_by_device_200_application_json_objects: Optional[list[GetOrganizationFirmwareUpgradesByDevice200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    