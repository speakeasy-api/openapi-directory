/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Article {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add measure unit
   */
  articleAddMeasureUnit(
    req: shared.MeasureUnitDTO[],
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleAddMeasureUnitResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article/MeasureUnit";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleAddMeasureUnitResponse =
        new operations.ArticleAddMeasureUnitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete article from the system
   *
   */
  articleDelete(
    req: operations.ArticleDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleDeleteResponse =
        new operations.ArticleDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfInteger = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfInteger
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  articleGetAddons(
    req: operations.ArticleGetAddonsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleGetAddonsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleGetAddonsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article/GetAddons";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleGetAddonsResponse =
        new operations.ArticleGetAddonsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfListOfArticleSearchDTO =
              utils.objectToClass(
                httpRes?.data,
                shared.DefaultResponseDTOOfListOfArticleSearchDTO
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mesure units
   */
  articleGetMeasureUnits(
    req: operations.ArticleGetMeasureUnitsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleGetMeasureUnitsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleGetMeasureUnitsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/Article/MeasureUnits";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleGetMeasureUnitsResponse =
        new operations.ArticleGetMeasureUnitsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Revenue Accounts
   */
  articleGetRevenueAccounts(
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleGetRevenueAccountsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/Article/RevenueAccounts";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleGetRevenueAccountsResponse =
        new operations.ArticleGetRevenueAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Gym specific properties for article
   *
   */
  articleGymArticleDetails(
    req: operations.ArticleGymArticleDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleGymArticleDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleGymArticleDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/Article/GymArticle/{articleId}/{gymId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleGymArticleDetailsResponse =
        new operations.ArticleGymArticleDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gymArticleDetailsDTO = utils.objectToClass(
              httpRes?.data,
              shared.GymArticleDetailsDTO
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfListOfArticleSearchDTO =
              utils.objectToClass(
                httpRes?.data,
                shared.DefaultResponseDTOOfListOfArticleSearchDTO
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add new article
   *
   */
  articlePost(
    req: shared.ArticleDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticlePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ArticleDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticlePostResponse =
        new operations.ArticlePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * update existing article
   *
   */
  articlePut(
    req: shared.ArticleDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticlePutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ArticleDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticlePutResponse =
        new operations.ArticlePutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search articles
   * It will only return basic information of article
   *
   */
  articleSearch(
    req: operations.ArticleSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Article/Search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleSearchResponse =
        new operations.ArticleSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfListOfArticleSearchDTO =
              utils.objectToClass(
                httpRes?.data,
                shared.DefaultResponseDTOOfListOfArticleSearchDTO
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add article details that associate with a Gym
   *
   */
  articleUpdateArticleGymDetails(
    req: shared.GymArticleDetailsDTO[],
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleUpdateArticleGymDetailsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/Article/ArticleGymDetails";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleUpdateArticleGymDetailsResponse =
        new operations.ArticleUpdateArticleGymDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate existing article
   */
  articleUpdateStatus(
    req: operations.ArticleUpdateStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleUpdateStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleUpdateStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/Article/UpdateStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleUpdateStatusResponse =
        new operations.ArticleUpdateStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfInteger = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfInteger
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get article details
   * This will return all properties related to article entity
   *
   */
  articleGet(
    req: operations.ArticleGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArticleGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArticleGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/Article/{articleID}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArticleGetResponse =
        new operations.ArticleGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfArticleDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfArticleDTO
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
