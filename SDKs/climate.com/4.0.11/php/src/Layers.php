<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Layers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve a list of application activities
     * 
     * Retrieve a list of application activities. The id in the response is used for  GET /v4/layers/asApplied/{activityId}/contents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedResponse
     */
	public function getV4LayersAsApplied(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asApplied');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationActivities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationActivities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the raw application activity
     * 
     * Retrieve an individual application activity by id.  Ids are retrieved via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsResponse
     */
	public function getV4LayersAsAppliedActivityIdContents(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asApplied/{activityId}/contents', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsAppliedActivityIdContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 416 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of harvest activities
     * 
     * Retrieve a list of harvest activities. The id in the response is used for  GET /v4/layers/asHarvested/{activityId}/contents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedResponse
     */
	public function getV4LayersAsHarvested(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asHarvested');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->harvestActivities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HarvestActivities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the raw harvest activity
     * 
     * Retrieve an individual harvest activity by id.  Ids are retrieved via the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsResponse
     */
	public function getV4LayersAsHarvestedActivityIdContents(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asHarvested/{activityId}/contents', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsHarvestedActivityIdContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 416 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of planting activities
     * 
     * Retrieve a list of planting activities. The id in the response is used for  GET /v4/layers/asPlanted/{activityId}/contents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedResponse
     */
	public function getV4LayersAsPlanted(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asPlanted');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->plantingActivities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlantingActivities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the raw planting activity
     * 
     * Retrieve an individual planting activity by id.  Ids are retrieved via the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).  The data is compressed using .zip format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsResponse
     */
	public function getV4LayersAsPlantedActivityIdContents(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/asPlanted/{activityId}/contents', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersAsPlantedActivityIdContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 416 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of scouting observations
     * 
     * Retrieve a list of scouting observations created or updated by the user identified by the Authorization header.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsResponse
     */
	public function getV4LayersScoutingObservations(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/scoutingObservations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoutingObservations = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoutingObservations', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve individual scouting observation
     * 
     * Retrieve an individual scouting observation by id.  Ids are retrieved via the /layers/scoutingObservations route.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdResponse
     */
	public function getV4LayersScoutingObservationsScoutingObservationId(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/scoutingObservations/{scoutingObservationId}', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoutingObservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoutingObservation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve attachments associated with a given scouting observation.
     * 
     * Retrieve attachments associated with a given scouting observation. Photos added to scouting notes in the FieldView app are capped to 20MB, and we won’t store photos larger than that in a scouting note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsResponse
     */
	public function getV4LayersScoutingObservationsScoutingObservationIdAttachments(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoutingObservationAttachments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoutingObservationAttachments', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoutingObservationAttachments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoutingObservationAttachments', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the binary contents of a scouting observation’s attachment.
     * 
     * Photos added to scouting notes in the FieldView app are capped to `20MiB` (`20971520 bytes`), and we won’t store photos larger than that in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsResponse
     */
	public function getV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContents(
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents', \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV4LayersScoutingObservationsScoutingObservationIdAttachmentsAttachmentIdContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'image/jpeg')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 206) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'image/jpeg')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 416 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}