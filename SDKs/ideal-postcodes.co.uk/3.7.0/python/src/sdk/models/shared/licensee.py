"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LicenseeDaily:
    
    count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The number lookups performed by the licensee on the day represented b `licesees.daily.updatedAt`"""  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt') }})
    r"""The timestamp when the limit was last used."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Licensee:
    r"""Licensee object which can be defined by user"""
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""Licensee's first, second and third line address as well as post town concatenated by commas"""  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    r"""Timestamp for when the licensee was created"""  
    daily: LicenseeDaily = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""An immutable ID provided for every licensee. Primarily used for paginated list requests."""  
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""Uniquely identifies a licensee for a key.
    
    Required to perform paid lookups for a specific licensee. Typically begins `sk_`.
    """  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Licensee individual or organisation name"""  
    postcode: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode') }})
    r"""Licensee's postcode"""  
    whitelist: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelist') }})
    r"""A list of allowed URLs. An empty list means that whitelisting is disabled"""  
    