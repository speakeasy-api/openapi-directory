"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PayeeInvitation:
    r"""Payee invitation is a process of inviting individual payees to the Velo platform. In this sction you will find APIs for working with Payee Invitations."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_payee_v3_json(self, request: shared.CreatePayeesRequestV3Input) -> operations.CreatePayeeV3JSONResponse:
        r"""Initiate Payee Creation
        <p>Use v4 instead</p>
        Initiate the process of creating 1 to 2000 payees in a batch Use the response location header to query
        for status (201 - Created, 400 - invalid request body. In addition to standard semantic validations, a
        400 will also result if there is a duplicate remote id within the batch / if there is a duplicate email
        within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
        that provided for another payee within the same batch). The validation at this stage is intra-batch only.
        Validation against payees who have already been invited occurs subsequently during processing of the batch.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/payees'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayeeV3JSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePayeesCSVResponseV3])
                res.create_payees_csv_response_v3 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def create_payee_v3_multipart(self, request: operations.CreatePayeeV3MultipartFormData) -> operations.CreatePayeeV3MultipartResponse:
        r"""Initiate Payee Creation
        <p>Use v4 instead</p>
        Initiate the process of creating 1 to 2000 payees in a batch Use the response location header to query
        for status (201 - Created, 400 - invalid request body. In addition to standard semantic validations, a
        400 will also result if there is a duplicate remote id within the batch / if there is a duplicate email
        within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
        that provided for another payee within the same batch). The validation at this stage is intra-batch only.
        Validation against payees who have already been invited occurs subsequently during processing of the batch.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/payees'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayeeV3MultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePayeesCSVResponseV3])
                res.create_payees_csv_response_v3 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def get_payees_invitation_status_v3(self, request: operations.GetPayeesInvitationStatusV3Request) -> operations.GetPayeesInvitationStatusV3Response:
        r"""Get Payee Invitation Status
        <p>Use v4 instead</p>
        <p>Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayeesInvitationStatusV3Request, base_url, '/v3/payees/payors/{payorId}/invitationStatus', request)
        
        query_params = utils.get_query_params(operations.GetPayeesInvitationStatusV3Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayeesInvitationStatusV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedPayeeInvitationStatusResponseV3])
                res.paged_payee_invitation_status_response_v3 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def get_payees_invitation_status_v4(self, request: operations.GetPayeesInvitationStatusV4Request) -> operations.GetPayeesInvitationStatusV4Response:
        r"""Get Payee Invitation Status
        Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayeesInvitationStatusV4Request, base_url, '/v4/payees/payors/{payorId}/invitationStatus', request)
        
        query_params = utils.get_query_params(operations.GetPayeesInvitationStatusV4Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayeesInvitationStatusV4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedPayeeInvitationStatusResponseV4])
                res.paged_payee_invitation_status_response_v4 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def query_batch_status_v3(self, request: operations.QueryBatchStatusV3Request) -> operations.QueryBatchStatusV3Response:
        r"""Query Batch Status
        <p>Use v4 instead</p>
        Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QueryBatchStatusV3Request, base_url, '/v3/payees/batch/{batchId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QueryBatchStatusV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QueryBatchResponseV3])
                res.query_batch_response_v3 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def query_batch_status_v4(self, request: operations.QueryBatchStatusV4Request) -> operations.QueryBatchStatusV4Response:
        r"""Query Batch Status
        Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QueryBatchStatusV4Request, base_url, '/v4/payees/batch/{batchId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QueryBatchStatusV4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QueryBatchResponseV4])
                res.query_batch_response_v4 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def resend_payee_invite_v3(self, request: operations.ResendPayeeInviteV3Request) -> operations.ResendPayeeInviteV3Response:
        r"""Resend Payee Invite
        <p>Use v4 instead</p>
        <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
        <p>Any previous invites to the payee by this Payor will be invalidated</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResendPayeeInviteV3Request, base_url, '/v3/payees/{payeeId}/invite', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "invite_payee_request_v3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResendPayeeInviteV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def resend_payee_invite_v4(self, request: operations.ResendPayeeInviteV4Request) -> operations.ResendPayeeInviteV4Response:
        r"""Resend Payee Invite
        <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
        <p>Any previous invites to the payee by this Payor will be invalidated</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResendPayeeInviteV4Request, base_url, '/v4/payees/{payeeId}/invite', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "invite_payee_request_v4", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResendPayeeInviteV4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def v4_create_payee_json(self, request: shared.CreatePayeesRequestV4) -> operations.V4CreatePayeeJSONResponse:
        r"""Initiate Payee Creation
        <p>Initiate the process of creating 1 to 2000 payees in a batch</p>
        <p>Use the batchId in the response to query for status.</p>
        <p>In addition to standard semantic validations, a 400 will also result if: </p>
        <ul>
        <li>there is a duplicate remote id within the batch</li>
        <li>there is a duplicate email within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
        that provided for another payee within the same batch).</li>
        </ul>
        <p>The validation at this stage is intra-batch only.</p>
        <p>Validation against payees who have already been invited occurs subsequently during processing of the batch.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/payees'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.V4CreatePayeeJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePayeesCSVResponseV4])
                res.create_payees_csv_response_v4 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def v4_create_payee_multipart(self, request: operations.V4CreatePayeeMultipartFormData) -> operations.V4CreatePayeeMultipartResponse:
        r"""Initiate Payee Creation
        <p>Initiate the process of creating 1 to 2000 payees in a batch</p>
        <p>Use the batchId in the response to query for status.</p>
        <p>In addition to standard semantic validations, a 400 will also result if: </p>
        <ul>
        <li>there is a duplicate remote id within the batch</li>
        <li>there is a duplicate email within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
        that provided for another payee within the same batch).</li>
        </ul>
        <p>The validation at this stage is intra-batch only.</p>
        <p>Validation against payees who have already been invited occurs subsequently during processing of the batch.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/payees'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.V4CreatePayeeMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePayeesCSVResponseV4])
                res.create_payees_csv_response_v4 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    