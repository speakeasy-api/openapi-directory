/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpgradeAppliedSchemaRequestBody extends SpeakeasyBase {
  /**
   * The ARN for the directory to which the upgraded schema will be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DirectoryArn" })
  directoryArn: string;

  /**
   * Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DryRun" })
  dryRun?: boolean;

  /**
   * The revision of the published schema to upgrade the directory to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PublishedSchemaArn" })
  publishedSchemaArn: string;
}

export class UpgradeAppliedSchemaRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpgradeAppliedSchemaRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpgradeAppliedSchemaResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * IncompatibleSchemaException
   */
  @SpeakeasyMetadata()
  incompatibleSchemaException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: any;

  /**
   * InvalidAttachmentException
   */
  @SpeakeasyMetadata()
  invalidAttachmentException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SchemaAlreadyExistsException
   */
  @SpeakeasyMetadata()
  schemaAlreadyExistsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  upgradeAppliedSchemaResponse?: shared.UpgradeAppliedSchemaResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
