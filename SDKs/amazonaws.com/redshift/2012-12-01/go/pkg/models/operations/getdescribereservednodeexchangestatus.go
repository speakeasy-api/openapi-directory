// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeReservedNodeExchangeStatusActionEnum
type GETDescribeReservedNodeExchangeStatusActionEnum string

const (
	GETDescribeReservedNodeExchangeStatusActionEnumDescribeReservedNodeExchangeStatus GETDescribeReservedNodeExchangeStatusActionEnum = "DescribeReservedNodeExchangeStatus"
)

func (e *GETDescribeReservedNodeExchangeStatusActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeReservedNodeExchangeStatus":
		*e = GETDescribeReservedNodeExchangeStatusActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeReservedNodeExchangeStatusActionEnum: %s", s)
	}
}

// GETDescribeReservedNodeExchangeStatusVersionEnum
type GETDescribeReservedNodeExchangeStatusVersionEnum string

const (
	GETDescribeReservedNodeExchangeStatusVersionEnumTwoThousandAndTwelve1201 GETDescribeReservedNodeExchangeStatusVersionEnum = "2012-12-01"
)

func (e *GETDescribeReservedNodeExchangeStatusVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETDescribeReservedNodeExchangeStatusVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeReservedNodeExchangeStatusVersionEnum: %s", s)
	}
}

type GETDescribeReservedNodeExchangeStatusRequest struct {
	Action GETDescribeReservedNodeExchangeStatusActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// The identifier of the reserved-node exchange request.
	ReservedNodeExchangeRequestID *string `queryParam:"style=form,explode=true,name=ReservedNodeExchangeRequestId"`
	// The identifier of the source reserved node in a reserved-node exchange request.
	ReservedNodeID    *string                                          `queryParam:"style=form,explode=true,name=ReservedNodeId"`
	Version           GETDescribeReservedNodeExchangeStatusVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeReservedNodeExchangeStatusResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
