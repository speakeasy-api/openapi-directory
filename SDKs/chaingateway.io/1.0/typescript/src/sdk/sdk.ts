/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AddressRequests } from "./addressrequests";
import { InfoRequests } from "./inforequests";
import { SubscriptionIPNRequests } from "./subscriptionipnrequests";
import { TransactionRequests } from "./transactionrequests";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://eu.eth.chaingateway.io/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # Chaingateway.io
 *
 * @remarks
 *
 * REST API to build the bridge between Ethereum and the real world
 *
 * Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.
 *
 * To use our API, you need an API Key (Described as Authorization header in the examples below).
 * To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).
 *
 * For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).
 *
 * If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 */
export class SDK {
  /**
   * Requests to create, list and delete addresses
   */
  public addressRequests: AddressRequests;
  /**
   * Requests that return information on balances, transactions, gas price, exchange rates, ...
   */
  public infoRequests: InfoRequests;
  /**
   * Requests for creating, deleting and listing existing subscriptions
   */
  public subscriptionIPNRequests: SubscriptionIPNRequests;
  /**
   * Requests to send Tokens, Ethereum and clear addresses
   */
  public transactionRequests: TransactionRequests;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.addressRequests = new AddressRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.infoRequests = new InfoRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.subscriptionIPNRequests = new SubscriptionIPNRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.transactionRequests = new TransactionRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
