/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Source {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Incremental Refresh an existing Source
   *
   * @remarks
   * Incremental Refresh a source object
   */
  incrementalRefreshSource(
    req: operations.IncrementalRefreshSourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IncrementalRefreshSourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IncrementalRefreshSourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/incremental_refresh",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IncrementalRefreshSourceResponse =
        new operations.IncrementalRefreshSourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceInstances for Source
   *
   * @remarks
   * Returns an array of ServiceInstance objects
   */
  listSourceServiceInstances(
    req: operations.ListSourceServiceInstancesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceServiceInstancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceServiceInstancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/service_instances",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceServiceInstancesResponse =
        new operations.ListSourceServiceInstancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInstancesCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceInstancesCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceInventories for Source
   *
   * @remarks
   * Returns an array of ServiceInventory objects
   */
  listSourceServiceInventories(
    req: operations.ListSourceServiceInventoriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceServiceInventoriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceServiceInventoriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/service_inventories",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceServiceInventoriesResponse =
        new operations.ListSourceServiceInventoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInventoriesCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceInventoriesCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceOfferingNodes for Source
   *
   * @remarks
   * Returns an array of ServiceOfferingNode objects
   */
  listSourceServiceOfferingNodes(
    req: operations.ListSourceServiceOfferingNodesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceServiceOfferingNodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceServiceOfferingNodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/service_offering_nodes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceServiceOfferingNodesResponse =
        new operations.ListSourceServiceOfferingNodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceOfferingNodesCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceOfferingNodesCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceOfferings for Source
   *
   * @remarks
   * Returns an array of ServiceOffering objects
   */
  listSourceServiceOfferings(
    req: operations.ListSourceServiceOfferingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceServiceOfferingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceServiceOfferingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/service_offerings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceServiceOfferingsResponse =
        new operations.ListSourceServiceOfferingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceOfferingsCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceOfferingsCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServicePlans for Source
   *
   * @remarks
   * Returns an array of ServicePlan objects
   */
  listSourceServicePlans(
    req: operations.ListSourceServicePlansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceServicePlansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceServicePlansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/service_plans",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceServicePlansResponse =
        new operations.ListSourceServicePlansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.servicePlansCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServicePlansCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Tasks for Source
   *
   * @remarks
   * Returns an array of Task objects
   */
  listSourceTasks(
    req: operations.ListSourceTasksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourceTasksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourceTasksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/sources/{id}/tasks", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourceTasksResponse =
        new operations.ListSourceTasksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tasksCollection = utils.objectToClass(
              httpRes?.data,
              shared.TasksCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Sources
   *
   * @remarks
   * Returns an array of Source objects
   */
  listSources(
    req: operations.ListSourcesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSourcesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sources";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSourcesResponse =
        new operations.ListSourcesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sourcesCollection = utils.objectToClass(
              httpRes?.data,
              shared.SourcesCollection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Refresh an existing Source
   *
   * @remarks
   * Refresh a source object
   */
  refreshSource(
    req: operations.RefreshSourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RefreshSourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RefreshSourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sources/{id}/refresh",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RefreshSourceResponse =
        new operations.RefreshSourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Show an existing Source
   *
   * @remarks
   * Returns a Source object
   */
  showSource(
    req: operations.ShowSourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ShowSourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ShowSourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/sources/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ShowSourceResponse =
        new operations.ShowSourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.source = utils.objectToClass(httpRes?.data, shared.Source);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }
}
