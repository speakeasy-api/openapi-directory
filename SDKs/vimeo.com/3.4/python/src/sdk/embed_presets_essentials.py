"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EmbedPresetsEssentials:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def edit_embed_preset(self, request: operations.EditEmbedPresetRequest) -> operations.EditEmbedPresetResponse:
        r"""Edit an embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditEmbedPresetRequest, base_url, '/users/{user_id}/presets/{preset_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditEmbedPresetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Presets])
                res.presets = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_embed_preset_alt1(self, request: operations.EditEmbedPresetAlt1Request) -> operations.EditEmbedPresetAlt1Response:
        r"""Edit an embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditEmbedPresetAlt1Request, base_url, '/me/presets/{preset_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditEmbedPresetAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Presets])
                res.presets = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_embed_preset(self, request: operations.GetEmbedPresetRequest) -> operations.GetEmbedPresetResponse:
        r"""Get a specific embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmbedPresetRequest, base_url, '/users/{user_id}/presets/{preset_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Presets])
                res.presets = out

        return res

    def get_embed_preset_alt1(self, request: operations.GetEmbedPresetAlt1Request) -> operations.GetEmbedPresetAlt1Response:
        r"""Get a specific embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmbedPresetAlt1Request, base_url, '/me/presets/{preset_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Presets])
                res.presets = out

        return res

    def get_embed_presets(self, request: operations.GetEmbedPresetsRequest) -> operations.GetEmbedPresetsResponse:
        r"""Get all the embed presets that a user has created"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmbedPresetsRequest, base_url, '/users/{user_id}/presets', request)
        
        query_params = utils.get_query_params(operations.GetEmbedPresetsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Presets]])
                res.presets = out

        return res

    def get_embed_presets_alt1(self, request: operations.GetEmbedPresetsAlt1Request) -> operations.GetEmbedPresetsAlt1Response:
        r"""Get all the embed presets that a user has created"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/presets'
        
        query_params = utils.get_query_params(operations.GetEmbedPresetsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.preset+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Presets]])
                res.presets = out

        return res

    