"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import extendedkeyusagename_enum as shared_extendedkeyusagename_enum
from ..shared import keyalgorithm_enum as shared_keyalgorithm_enum
from ..shared import keyusagename_enum as shared_keyusagename_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filters:
    r"""This structure can be used in the <a>ListCertificates</a> action to filter the output of the certificate list."""
    
    extended_key_usage: Optional[list[shared_extendedkeyusagename_enum.ExtendedKeyUsageNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extendedKeyUsage'), 'exclude': lambda f: f is None }})  
    key_types: Optional[list[shared_keyalgorithm_enum.KeyAlgorithmEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyTypes'), 'exclude': lambda f: f is None }})  
    key_usage: Optional[list[shared_keyusagename_enum.KeyUsageNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyUsage'), 'exclude': lambda f: f is None }})  
    