// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LanguageTranslationsListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type LanguageTranslationsListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type LanguageTranslationsListSecurity struct {
	Option1 *LanguageTranslationsListSecurityOption1 `security:"option"`
	Option2 *LanguageTranslationsListSecurityOption2 `security:"option"`
}

// LanguageTranslationsListFormatEnum - The format of the source text, in either HTML (default) or plain-text. A
// value of "html" indicates HTML and a value of "text" indicates plain-text.
type LanguageTranslationsListFormatEnum string

const (
	LanguageTranslationsListFormatEnumHTML LanguageTranslationsListFormatEnum = "html"
	LanguageTranslationsListFormatEnumText LanguageTranslationsListFormatEnum = "text"
)

func (e LanguageTranslationsListFormatEnum) ToPointer() *LanguageTranslationsListFormatEnum {
	return &e
}

func (e *LanguageTranslationsListFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "html":
		fallthrough
	case "text":
		*e = LanguageTranslationsListFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguageTranslationsListFormatEnum: %v", v)
	}
}

type LanguageTranslationsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// OAuth bearer token.
	BearerToken *string `queryParam:"style=form,explode=true,name=bearer_token"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// The customization id for translate
	Cid []string `queryParam:"style=form,explode=true,name=cid"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// The format of the source text, in either HTML (default) or plain-text. A
	// value of "html" indicates HTML and a value of "text" indicates plain-text.
	Format *LanguageTranslationsListFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The `model` type requested for this translation. Valid values are
	// listed in public documentation.
	Model *string `queryParam:"style=form,explode=true,name=model"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Pretty-print response.
	Pp *bool `queryParam:"style=form,explode=true,name=pp"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// The input text to translate. Repeat this parameter to perform translation
	// operations on multiple text inputs.
	Q []string `queryParam:"style=form,explode=true,name=q"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The language of the source text, set to one of the language codes listed in
	// Language Support. If the source language is not specified, the API will
	// attempt to identify the source language automatically and return it within
	// the response.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// The language to use for translation of the input text, set to one of the
	// language codes listed in Language Support.
	Target string `queryParam:"style=form,explode=true,name=target"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type LanguageTranslationsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response
	TranslationsListResponse *shared.TranslationsListResponse
}
