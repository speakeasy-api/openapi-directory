"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetTopicRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONActionsSummary:
    
    can_act: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_act') }})  
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    hidden: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONDetailsCreatedBy:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONDetailsLastPoster:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONDetailsParticipants:
    
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_name') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    primary_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_name') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONDetails:
    
    can_archive_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_archive_topic') }})  
    can_close_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_close_topic') }})  
    can_convert_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_convert_topic') }})  
    can_create_post: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_post') }})  
    can_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    can_edit_staff_notes: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_staff_notes') }})  
    can_moderate_category: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_moderate_category') }})  
    can_move_posts: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_move_posts') }})  
    can_pin_unpin_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_pin_unpin_topic') }})  
    can_remove_allowed_users: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_remove_allowed_users') }})  
    can_remove_self_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_remove_self_id') }})  
    can_reply_as_new_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_reply_as_new_topic') }})  
    can_review_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_review_topic') }})  
    can_split_merge_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_split_merge_topic') }})  
    can_toggle_topic_visibility: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_toggle_topic_visibility') }})  
    created_by: GetTopic200ApplicationJSONDetailsCreatedBy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by') }})  
    last_poster: GetTopic200ApplicationJSONDetailsLastPoster = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_poster') }})  
    notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level') }})  
    can_flag_topic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_flag_topic'), 'exclude': lambda f: f is None }})  
    can_invite_to: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_invite_to'), 'exclude': lambda f: f is None }})  
    can_invite_via_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_invite_via_email'), 'exclude': lambda f: f is None }})  
    participants: Optional[list[GetTopic200ApplicationJSONDetailsParticipants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONPostStreamPostsActionsSummary:
    
    can_act: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_act') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONPostStreamPostsLinkCounts:
    
    clicks: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clicks') }})  
    internal: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internal') }})  
    reflection: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reflection') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONPostStreamPosts:
    
    actions_summary: list[GetTopic200ApplicationJSONPostStreamPostsActionsSummary] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions_summary') }})  
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    bookmarked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked') }})  
    can_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    can_recover: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_recover') }})  
    can_view_edit_history: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_view_edit_history') }})  
    can_wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_wiki') }})  
    cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cooked') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    deleted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_at') }})  
    display_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_username') }})  
    edit_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edit_reason') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_name') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    hidden: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    incoming_link_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_link_count') }})  
    link_counts: list[GetTopic200ApplicationJSONPostStreamPostsLinkCounts] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_counts') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_number') }})  
    post_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_type') }})  
    primary_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_name') }})  
    quote_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quote_count') }})  
    read: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read') }})  
    readers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readers_count') }})  
    reads: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reads') }})  
    reply_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_count') }})  
    reply_to_post_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_to_post_number') }})  
    reviewable_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_id') }})  
    reviewable_score_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_score_count') }})  
    reviewable_score_pending_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_score_pending_count') }})  
    score: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score') }})  
    staff: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staff') }})  
    topic_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_id') }})  
    topic_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_slug') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})  
    user_deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_deleted') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    user_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_title') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wiki') }})  
    yours: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yours') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONPostStream:
    
    posts: list[GetTopic200ApplicationJSONPostStreamPosts] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts') }})  
    stream: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONSuggestedTopicsPostersUser:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONSuggestedTopicsPosters:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    extras: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extras') }})  
    user: GetTopic200ApplicationJSONSuggestedTopicsPostersUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSONSuggestedTopics:
    
    archetype: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archetype') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    bookmarked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked') }})  
    bumped: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bumped') }})  
    bumped_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bumped_at') }})  
    category_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id') }})  
    closed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excerpt') }})  
    fancy_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fancy_title') }})  
    featured_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured_link') }})  
    highest_post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highest_post_number') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url') }})  
    last_posted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_posted_at') }})  
    like_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_count') }})  
    liked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liked') }})  
    pinned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned') }})  
    posters: list[GetTopic200ApplicationJSONSuggestedTopicsPosters] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posters') }})  
    posts_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_count') }})  
    reply_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_count') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})  
    tags_descriptions: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_descriptions') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    unpinned: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unpinned') }})  
    unseen: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unseen') }})  
    views: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('views') }})  
    visible: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTopic200ApplicationJSON:
    r"""specific posts"""
    
    actions_summary: list[GetTopic200ApplicationJSONActionsSummary] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions_summary') }})  
    archetype: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archetype') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    bookmarked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked') }})  
    bookmarks: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarks') }})  
    category_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id') }})  
    chunk_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chunk_size') }})  
    closed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    deleted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_at') }})  
    deleted_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_by') }})  
    details: GetTopic200ApplicationJSONDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details') }})  
    draft: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft') }})  
    draft_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft_key') }})  
    draft_sequence: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft_sequence') }})  
    fancy_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fancy_title') }})  
    featured_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured_link') }})  
    has_deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_deleted') }})  
    has_summary: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_summary') }})  
    highest_post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highest_post_number') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url') }})  
    last_posted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_posted_at') }})  
    like_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_count') }})  
    message_bus_last_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_bus_last_id') }})  
    participant_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_count') }})  
    pinned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned') }})  
    pinned_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned_at') }})  
    pinned_globally: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned_globally') }})  
    pinned_until: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned_until') }})  
    post_stream: GetTopic200ApplicationJSONPostStream = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_stream') }})  
    posts_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_count') }})  
    reply_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_count') }})  
    show_read_indicator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_read_indicator') }})  
    slow_mode_enabled_until: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slow_mode_enabled_until') }})  
    slow_mode_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slow_mode_seconds') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    suggested_topics: list[GetTopic200ApplicationJSONSuggestedTopics] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggested_topics') }})  
    tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})  
    tags_descriptions: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_descriptions') }})  
    thumbnails: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnails') }})  
    timeline_lookup: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline_lookup') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    topic_timer: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_timer') }})  
    unpinned: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unpinned') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    views: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('views') }})  
    visible: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible') }})  
    word_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('word_count') }})  
    current_post_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_post_number'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetTopicResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_topic_200_application_json_object: Optional[GetTopic200ApplicationJSON] = dataclasses.field(default=None)
    r"""specific posts"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    