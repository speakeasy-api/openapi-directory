"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import consentmanagerpatientid as shared_consentmanagerpatientid
from ..shared import consentstatus_enum as shared_consentstatus_enum
from ..shared import error as shared_error
from ..shared import hitypeenum_enum as shared_hitypeenum_enum
from ..shared import permission as shared_permission
from ..shared import requester as shared_requester
from ..shared import requestreference as shared_requestreference
from ..shared import usepurpose as shared_usepurpose
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsentConsentDetailCareContexts:
    
    care_context_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careContextReference') }})  
    patient_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patientReference') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsentConsentDetailConsentManager:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsentConsentDetailHip:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsentConsentDetailHiu:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsentConsentDetail:
    
    care_contexts: list[ConsentArtefactResponseConsentConsentDetailCareContexts] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careContexts') }})  
    consent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentId') }})  
    consent_manager: ConsentArtefactResponseConsentConsentDetailConsentManager = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentManager') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    hip: ConsentArtefactResponseConsentConsentDetailHip = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hip') }})  
    hi_types: list[shared_hitypeenum_enum.HITypeEnumEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiTypes') }})  
    hiu: ConsentArtefactResponseConsentConsentDetailHiu = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiu') }})  
    patient: shared_consentmanagerpatientid.ConsentManagerPatientID = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    permission: shared_permission.Permission = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})  
    purpose: shared_usepurpose.UsePurpose = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    requester: Optional[shared_requester.Requester] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requester'), 'exclude': lambda f: f is None }})  
    schema_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaVersion'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponseConsent:
    
    consent_detail: ConsentArtefactResponseConsentConsentDetail = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentDetail') }})  
    signature: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature') }})  
    status: shared_consentstatus_enum.ConsentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentArtefactResponse:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})
    r"""a nonce, unique for each HTTP request"""  
    resp: shared_requestreference.RequestReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resp') }})  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ"""  
    consent: Optional[ConsentArtefactResponseConsent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consent'), 'exclude': lambda f: f is None }})  
    error: Optional[shared_error.Error] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    