/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LegalHoldSummary - Summary of the hold which has just been created.
 */
public class LegalHoldSummary {
    /**
     * Date at which the snapshot will expire if the legal hold is dissolved.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expectedExpirationDateWithoutLegalHold")
    public OffsetDateTime expectedExpirationDateWithoutLegalHold;

    public LegalHoldSummary withExpectedExpirationDateWithoutLegalHold(OffsetDateTime expectedExpirationDateWithoutLegalHold) {
        this.expectedExpirationDateWithoutLegalHold = expectedExpirationDateWithoutLegalHold;
        return this;
    }
    
    /**
     * A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot.
     * 
     */
    @JsonProperty("isCustomRetentionApplied")
    public Boolean isCustomRetentionApplied;

    public LegalHoldSummary withIsCustomRetentionApplied(Boolean isCustomRetentionApplied) {
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        return this;
    }
    
    /**
     * A Boolean that specifies whether a snapshot is an On Demand snapshot. When this value is 'true,' the snapshot is an On Demand snapshot.
     */
    @JsonProperty("isOnDemandSnapshot")
    public Boolean isOnDemandSnapshot;

    public LegalHoldSummary withIsOnDemandSnapshot(Boolean isOnDemandSnapshot) {
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        return this;
    }
    
    /**
     * Current locations of the snapshot.
     */
    @JsonProperty("locationsPresent")
    public String[] locationsPresent;

    public LegalHoldSummary withLocationsPresent(String[] locationsPresent) {
        this.locationsPresent = locationsPresent;
        return this;
    }
    
    @JsonProperty("objectId")
    public String objectId;

    public LegalHoldSummary withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }
    
    @JsonProperty("objectName")
    public String objectName;

    public LegalHoldSummary withObjectName(String objectName) {
        this.objectName = objectName;
        return this;
    }
    
    @JsonProperty("objectType")
    public String objectType;

    public LegalHoldSummary withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * Time at which the snapshot was put on hold.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("placeOnHoldTime")
    public OffsetDateTime placeOnHoldTime;

    public LegalHoldSummary withPlaceOnHoldTime(OffsetDateTime placeOnHoldTime) {
        this.placeOnHoldTime = placeOnHoldTime;
        return this;
    }
    
    @JsonProperty("snapshotId")
    public String snapshotId;

    public LegalHoldSummary withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }
    
    /**
     * Time at which the snapshot was taken.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("snapshotTime")
    public OffsetDateTime snapshotTime;

    public LegalHoldSummary withSnapshotTime(OffsetDateTime snapshotTime) {
        this.snapshotTime = snapshotTime;
        return this;
    }
    
    public LegalHoldSummary(@JsonProperty("isCustomRetentionApplied") Boolean isCustomRetentionApplied, @JsonProperty("isOnDemandSnapshot") Boolean isOnDemandSnapshot, @JsonProperty("locationsPresent") String[] locationsPresent, @JsonProperty("objectId") String objectId, @JsonProperty("objectName") String objectName, @JsonProperty("objectType") String objectType, @JsonProperty("placeOnHoldTime") OffsetDateTime placeOnHoldTime, @JsonProperty("snapshotId") String snapshotId, @JsonProperty("snapshotTime") OffsetDateTime snapshotTime) {
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        this.locationsPresent = locationsPresent;
        this.objectId = objectId;
        this.objectName = objectName;
        this.objectType = objectType;
        this.placeOnHoldTime = placeOnHoldTime;
        this.snapshotId = snapshotId;
        this.snapshotTime = snapshotTime;
  }
}
