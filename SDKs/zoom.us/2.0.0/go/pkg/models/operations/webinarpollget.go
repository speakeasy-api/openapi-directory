// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type WebinarPollGetSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type WebinarPollGetRequest struct {
	// The poll ID
	PollID string `pathParam:"style=simple,explode=false,name=pollId"`
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

// WebinarPollGetPollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type WebinarPollGetPollQuestionsTypeEnum string

const (
	WebinarPollGetPollQuestionsTypeEnumSingle   WebinarPollGetPollQuestionsTypeEnum = "single"
	WebinarPollGetPollQuestionsTypeEnumMultiple WebinarPollGetPollQuestionsTypeEnum = "multiple"
)

func (e *WebinarPollGetPollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = WebinarPollGetPollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollGetPollQuestionsTypeEnum: %s", s)
	}
}

type WebinarPollGetPollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *WebinarPollGetPollQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarPollGetPollStatusEnum - Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type WebinarPollGetPollStatusEnum string

const (
	WebinarPollGetPollStatusEnumNotstart WebinarPollGetPollStatusEnum = "notstart"
	WebinarPollGetPollStatusEnumStarted  WebinarPollGetPollStatusEnum = "started"
	WebinarPollGetPollStatusEnumEnded    WebinarPollGetPollStatusEnum = "ended"
	WebinarPollGetPollStatusEnumSharing  WebinarPollGetPollStatusEnum = "sharing"
)

func (e *WebinarPollGetPollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = WebinarPollGetPollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollGetPollStatusEnum: %s", s)
	}
}

// WebinarPollGetPoll - Poll
type WebinarPollGetPoll struct {
	// Webinar Poll ID
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []WebinarPollGetPollQuestions `json:"questions,omitempty"`
	// Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *WebinarPollGetPollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

type WebinarPollGetResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// Webinar Poll object returned
	Poll        *WebinarPollGetPoll
	StatusCode  int
	RawResponse *http.Response
}
