"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import author_association_enum as shared_author_association_enum
from ..shared import issue_event_dismissed_review as shared_issue_event_dismissed_review
from ..shared import issue_event_label as shared_issue_event_label
from ..shared import issue_event_milestone as shared_issue_event_milestone
from ..shared import issue_event_project_card as shared_issue_event_project_card
from ..shared import issue_event_rename as shared_issue_event_rename
from ..shared import nullable_integration as shared_nullable_integration
from ..shared import nullable_issue as shared_nullable_issue
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import team as shared_team
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IssueEvent:
    r"""Issue Event"""
    
    actor: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actor') }})
    r"""A GitHub user."""  
    commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_id') }})  
    commit_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    event: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    assignee: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    assigner: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigner'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    author_association: Optional[shared_author_association_enum.AuthorAssociationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_association'), 'exclude': lambda f: f is None }})
    r"""How the author is associated with the repository."""  
    dismissed_review: Optional[shared_issue_event_dismissed_review.IssueEventDismissedReview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_review'), 'exclude': lambda f: f is None }})  
    issue: Optional[shared_nullable_issue.NullableIssue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""Issues are a great way to keep track of tasks, enhancements, and bugs for your projects."""  
    label: Optional[shared_issue_event_label.IssueEventLabel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Issue Event Label"""  
    lock_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lock_reason'), 'exclude': lambda f: f is None }})  
    milestone: Optional[shared_issue_event_milestone.IssueEventMilestone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestone'), 'exclude': lambda f: f is None }})
    r"""Issue Event Milestone"""  
    performed_via_github_app: Optional[shared_nullable_integration.NullableIntegration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performed_via_github_app'), 'exclude': lambda f: f is None }})
    r"""GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub."""  
    project_card: Optional[shared_issue_event_project_card.IssueEventProjectCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_card'), 'exclude': lambda f: f is None }})
    r"""Issue Event Project Card"""  
    rename: Optional[shared_issue_event_rename.IssueEventRename] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rename'), 'exclude': lambda f: f is None }})
    r"""Issue Event Rename"""  
    requested_reviewer: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_reviewer'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    requested_team: Optional[shared_team.Team] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_team'), 'exclude': lambda f: f is None }})
    r"""Groups of organization members that gives permissions on specified repositories."""  
    review_requester: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_requester'), 'exclude': lambda f: f is None }})
    r"""A GitHub user."""  
    