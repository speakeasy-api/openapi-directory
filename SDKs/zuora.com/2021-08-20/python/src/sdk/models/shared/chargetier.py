"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChargeTierPriceFormatEnum(str, Enum):
    r"""Specifies whether the tier has a fixed price or a per-unit price."""
    FLAT_FEE = 'FlatFee'
    PER_UNIT = 'PerUnit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeTier:
    
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""Price or per-unit price of the tier, depending on the value of the `priceFormat` field."""  
    price_format: ChargeTierPriceFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormat') }})
    r"""Specifies whether the tier has a fixed price or a per-unit price."""  
    starting_unit: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startingUnit') }})
    r"""Number of units at which the tier becomes effective."""  
    tier: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier') }})
    r"""Index of the tier in the charge."""  
    ending_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endingUnit'), 'exclude': lambda f: f is None }})
    r"""Limit on the number of units for which the tier is effective."""  
    