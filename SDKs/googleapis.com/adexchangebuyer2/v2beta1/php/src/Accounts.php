<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new client buyer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateResponse
     */
	public function adexchangebuyer2AccountsClientsCreate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "client", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a client buyer with a given client account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetResponse
     */
	public function adexchangebuyer2AccountsClientsGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates and sends out an email invitation to access an Ad Exchange client buyer account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateResponse
     */
	public function adexchangebuyer2AccountsClientsInvitationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientUserInvitation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientUserInvitation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientUserInvitation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an existing client user invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetResponse
     */
	public function adexchangebuyer2AccountsClientsInvitationsGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientUserInvitation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientUserInvitation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the client users invitations for a client with a given account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListResponse
     */
	public function adexchangebuyer2AccountsClientsInvitationsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsInvitationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientUserInvitationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClientUserInvitationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the clients for the current sponsor buyer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListResponse
     */
	public function adexchangebuyer2AccountsClientsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClientsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing client buyer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateResponse
     */
	public function adexchangebuyer2AccountsClientsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "client", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an existing client user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetResponse
     */
	public function adexchangebuyer2AccountsClientsUsersGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the known client users for a specified sponsor buyer account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListResponse
     */
	public function adexchangebuyer2AccountsClientsUsersList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClientUsersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing client user. Only the user status can be changed on update.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateResponse
     */
	public function adexchangebuyer2AccountsClientsUsersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientUser", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsClientsUsersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateResponse
     */
	public function adexchangebuyer2AccountsCreativesCreate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creative", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Associate an existing deal with a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddResponse
     */
	public function adexchangebuyer2AccountsCreativesDealAssociationsAdd(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addDealAssociationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all creative-deal associations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListResponse
     */
	public function adexchangebuyer2AccountsCreativesDealAssociationsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDealAssociationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDealAssociationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the association between a deal and a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveResponse
     */
	public function adexchangebuyer2AccountsCreativesDealAssociationsRemove(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeDealAssociationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesDealAssociationsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetResponse
     */
	public function adexchangebuyer2AccountsCreativesGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists creatives.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListResponse
     */
	public function adexchangebuyer2AccountsCreativesList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCreativesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCreativesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingResponse
     */
	public function adexchangebuyer2AccountsCreativesStopWatching(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesStopWatchingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateResponse
     */
	public function adexchangebuyer2AccountsCreativesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creative", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchResponse
     */
	public function adexchangebuyer2AccountsCreativesWatch(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "watchCreativeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsCreativesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListResponse
     */
	public function adexchangebuyer2AccountsFinalizedProposalsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/finalizedProposals', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProposalsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProposalsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update given deals to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseResponse
     */
	public function adexchangebuyer2AccountsFinalizedProposalsPause(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pauseProposalDealsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsPauseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update given deals to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeResponse
     */
	public function adexchangebuyer2AccountsFinalizedProposalsResume(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resumeProposalDealsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsFinalizedProposalsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the requested product by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetResponse
     */
	public function adexchangebuyer2AccountsProductsGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/products/{productId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all products visible to the buyer (optionally filtered by the specified PQL query).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListResponse
     */
	public function adexchangebuyer2AccountsProductsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/products', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProductsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProductsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProductsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptResponse
     */
	public function adexchangebuyer2AccountsProposalsAccept(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "acceptProposalRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteResponse
     */
	public function adexchangebuyer2AccountsProposalsAddNote(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addNoteRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsAddNoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->note = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Note', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationResponse
     */
	public function adexchangebuyer2AccountsProposalsCancelNegotiation(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCancelNegotiationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * You can opt-in to manually update proposals to indicate that setup is complete. By default, proposal setup is automatically completed after their deals are finalized. Contact your Technical Account Manager to opt in. Buyers can call this method when the proposal has been finalized, and all the required creatives have been uploaded using the Creatives API. This call updates the `is_setup_completed` field on the deals in the proposal, and notifies the seller. The server then advances the revision number of the most recent proposal. To mark an individual deal as ready to serve, call `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupResponse
     */
	public function adexchangebuyer2AccountsProposalsCompleteSetup(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCompleteSetupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateResponse
     */
	public function adexchangebuyer2AccountsProposalsCreate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proposalInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a proposal given its ID. The proposal is returned at its head revision.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetResponse
     */
	public function adexchangebuyer2AccountsProposalsGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the ChildSeat's accountId in the request path.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListResponse
     */
	public function adexchangebuyer2AccountsProposalsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProposalsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProposalsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseResponse
     */
	public function adexchangebuyer2AccountsProposalsPause(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pauseProposalRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsPauseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeResponse
     */
	public function adexchangebuyer2AccountsProposalsResume(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateResponse
     */
	public function adexchangebuyer2AccountsProposalsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/proposals/{proposalId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proposalInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsProposalsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the requested publisher profile by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetResponse
     */
	public function adexchangebuyer2AccountsPublisherProfilesGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publisherProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublisherProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all publisher profiles visible to the buyer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListResponse
     */
	public function adexchangebuyer2AccountsPublisherProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/accounts/{accountId}/publisherProfiles', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2AccountsPublisherProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPublisherProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPublisherProfilesResponse', 'json');
            }
        }

        return $response;
    }
}