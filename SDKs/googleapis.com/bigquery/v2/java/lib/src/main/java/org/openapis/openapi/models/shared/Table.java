/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Table - Successful response
 */
public class Table {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloneDefinition")
    public CloneDefinition cloneDefinition;
    public Table withCloneDefinition(CloneDefinition cloneDefinition) {
        this.cloneDefinition = cloneDefinition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clustering")
    public Clustering clustering;
    public Table withClustering(Clustering clustering) {
        this.clustering = clustering;
        return this;
    }
    
    /**
     * [Output-only] The time when this table was created, in milliseconds since the epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;
    public Table withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * [Output-only] The default collation of the table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCollation")
    public String defaultCollation;
    public Table withDefaultCollation(String defaultCollation) {
        this.defaultCollation = defaultCollation;
        return this;
    }
    
    /**
     * [Output-only] The default rounding mode of the table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultRoundingMode")
    public String defaultRoundingMode;
    public Table withDefaultRoundingMode(String defaultRoundingMode) {
        this.defaultRoundingMode = defaultRoundingMode;
        return this;
    }
    
    /**
     * [Optional] A user-friendly description of this table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Table withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionConfiguration")
    public EncryptionConfiguration encryptionConfiguration;
    public Table withEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
        this.encryptionConfiguration = encryptionConfiguration;
        return this;
    }
    
    /**
     * [Output-only] A hash of the table metadata. Used to ensure there were no concurrent modifications to the resource when attempting an update. Not guaranteed to change when the table contents or the fields numRows, numBytes, numLongTermBytes or lastModifiedTime change.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Table withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * [Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationTime")
    public String expirationTime;
    public Table withExpirationTime(String expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalDataConfiguration")
    public ExternalDataConfiguration externalDataConfiguration;
    public Table withExternalDataConfiguration(ExternalDataConfiguration externalDataConfiguration) {
        this.externalDataConfiguration = externalDataConfiguration;
        return this;
    }
    
    /**
     * [Optional] A descriptive name for this table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendlyName")
    public String friendlyName;
    public Table withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * [Output-only] An opaque ID uniquely identifying the table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Table withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output-only] The type of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Table withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Table withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * [Output-only] The time when this table was last modified, in milliseconds since the epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifiedTime")
    public String lastModifiedTime;
    public Table withLastModifiedTime(String lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }
    
    /**
     * [Output-only] The geographic location where the table resides. This value is inherited from the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Table withLocation(String location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("materializedView")
    public MaterializedViewDefinition materializedView;
    public Table withMaterializedView(MaterializedViewDefinition materializedView) {
        this.materializedView = materializedView;
        return this;
    }
    
    /**
     * [Optional] Max staleness of data that could be returned when table or materialized view is queried (formatted as Google SQL Interval type).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxStaleness")
    public String maxStaleness;
    public Table withMaxStaleness(String maxStaleness) {
        this.maxStaleness = maxStaleness;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public ModelDefinition model;
    public Table withModel(ModelDefinition model) {
        this.model = model;
        return this;
    }
    
    /**
     * [Output-only] The size of this table in bytes, excluding any data in the streaming buffer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numBytes")
    public String numBytes;
    public Table withNumBytes(String numBytes) {
        this.numBytes = numBytes;
        return this;
    }
    
    /**
     * [Output-only] The number of bytes in the table that are considered "long-term storage".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numLongTermBytes")
    public String numLongTermBytes;
    public Table withNumLongTermBytes(String numLongTermBytes) {
        this.numLongTermBytes = numLongTermBytes;
        return this;
    }
    
    /**
     * [Output-only] [TrustedTester] The physical size of this table in bytes, excluding any data in the streaming buffer. This includes compression and storage used for time travel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numPhysicalBytes")
    public String numPhysicalBytes;
    public Table withNumPhysicalBytes(String numPhysicalBytes) {
        this.numPhysicalBytes = numPhysicalBytes;
        return this;
    }
    
    /**
     * [Output-only] The number of rows of data in this table, excluding any data in the streaming buffer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numRows")
    public String numRows;
    public Table withNumRows(String numRows) {
        this.numRows = numRows;
        return this;
    }
    
    /**
     * [Output-only] Number of logical bytes that are less than 90 days old.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_active_logical_bytes")
    public String numActiveLogicalBytes;
    public Table withNumActiveLogicalBytes(String numActiveLogicalBytes) {
        this.numActiveLogicalBytes = numActiveLogicalBytes;
        return this;
    }
    
    /**
     * [Output-only] Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_active_physical_bytes")
    public String numActivePhysicalBytes;
    public Table withNumActivePhysicalBytes(String numActivePhysicalBytes) {
        this.numActivePhysicalBytes = numActivePhysicalBytes;
        return this;
    }
    
    /**
     * [Output-only] Number of logical bytes that are more than 90 days old.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_long_term_logical_bytes")
    public String numLongTermLogicalBytes;
    public Table withNumLongTermLogicalBytes(String numLongTermLogicalBytes) {
        this.numLongTermLogicalBytes = numLongTermLogicalBytes;
        return this;
    }
    
    /**
     * [Output-only] Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_long_term_physical_bytes")
    public String numLongTermPhysicalBytes;
    public Table withNumLongTermPhysicalBytes(String numLongTermPhysicalBytes) {
        this.numLongTermPhysicalBytes = numLongTermPhysicalBytes;
        return this;
    }
    
    /**
     * [Output-only] The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_partitions")
    public String numPartitions;
    public Table withNumPartitions(String numPartitions) {
        this.numPartitions = numPartitions;
        return this;
    }
    
    /**
     * [Output-only] Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_time_travel_physical_bytes")
    public String numTimeTravelPhysicalBytes;
    public Table withNumTimeTravelPhysicalBytes(String numTimeTravelPhysicalBytes) {
        this.numTimeTravelPhysicalBytes = numTimeTravelPhysicalBytes;
        return this;
    }
    
    /**
     * [Output-only] Total number of logical bytes in the table or materialized view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_total_logical_bytes")
    public String numTotalLogicalBytes;
    public Table withNumTotalLogicalBytes(String numTotalLogicalBytes) {
        this.numTotalLogicalBytes = numTotalLogicalBytes;
        return this;
    }
    
    /**
     * [Output-only] The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_total_physical_bytes")
    public String numTotalPhysicalBytes;
    public Table withNumTotalPhysicalBytes(String numTotalPhysicalBytes) {
        this.numTotalPhysicalBytes = numTotalPhysicalBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rangePartitioning")
    public RangePartitioning rangePartitioning;
    public Table withRangePartitioning(RangePartitioning rangePartitioning) {
        this.rangePartitioning = rangePartitioning;
        return this;
    }
    
    /**
     * [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requirePartitionFilter")
    public Boolean requirePartitionFilter;
    public Table withRequirePartitionFilter(Boolean requirePartitionFilter) {
        this.requirePartitionFilter = requirePartitionFilter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public TableSchema schema;
    public Table withSchema(TableSchema schema) {
        this.schema = schema;
        return this;
    }
    
    /**
     * [Output-only] A URL that can be used to access this resource again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Table withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotDefinition")
    public SnapshotDefinition snapshotDefinition;
    public Table withSnapshotDefinition(SnapshotDefinition snapshotDefinition) {
        this.snapshotDefinition = snapshotDefinition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingBuffer")
    public Streamingbuffer streamingBuffer;
    public Table withStreamingBuffer(Streamingbuffer streamingBuffer) {
        this.streamingBuffer = streamingBuffer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tableReference")
    public TableReference tableReference;
    public Table withTableReference(TableReference tableReference) {
        this.tableReference = tableReference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timePartitioning")
    public TimePartitioning timePartitioning;
    public Table withTimePartitioning(TimePartitioning timePartitioning) {
        this.timePartitioning = timePartitioning;
        return this;
    }
    
    /**
     * [Output-only] Describes the table type. The following values are supported: TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL query. SNAPSHOT: An immutable, read-only table that is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is persisted. EXTERNAL: A table that references data stored in an external storage system, such as Google Cloud Storage. The default value is TABLE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Table withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public ViewDefinition view;
    public Table withView(ViewDefinition view) {
        this.view = view;
        return this;
    }
    
}
