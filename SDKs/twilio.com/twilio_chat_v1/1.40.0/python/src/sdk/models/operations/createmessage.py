"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import chat_v1_service_channel_message as shared_chat_v1_service_channel_message
from typing import Optional

CREATE_MESSAGE_SERVERS = [
	"https://chat.twilio.com",
]


@dataclasses.dataclass
class CreateMessageSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateMessageCreateMessageRequest:
    
    body: str = dataclasses.field(metadata={'form': { 'field_name': 'Body' }})
    r"""The message to send to the channel. Can also be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string."""  
    attributes: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Attributes' }})
    r"""A valid JSON string that contains application-specific data."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'From' }})
    r"""The [identity](https://www.twilio.com/docs/api/chat/guides/identity) of the new message's author. The default value is `system`."""  
    

@dataclasses.dataclass
class CreateMessageRequest:
    
    channel_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ChannelSid', 'style': 'simple', 'explode': False }})
    r"""The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the new resource belongs to. Can be the Channel resource's `sid` or `unique_name`."""  
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under."""  
    request_body: Optional[CreateMessageCreateMessageRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateMessageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    chat_v1_service_channel_message: Optional[shared_chat_v1_service_channel_message.ChatV1ServiceChannelMessage] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    