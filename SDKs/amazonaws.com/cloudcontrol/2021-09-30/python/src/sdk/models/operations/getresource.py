"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getresourceinput as shared_getresourceinput
from ..shared import getresourceoutput as shared_getresourceoutput
from enum import Enum
from typing import Any, Optional

class GetResourceXAmzTargetEnum(str, Enum):
    CLOUD_API_SERVICE_GET_RESOURCE = 'CloudApiService.GetResource'


@dataclasses.dataclass
class GetResourceRequest:
    
    get_resource_input: shared_getresourceinput.GetResourceInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetResourceXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AlreadyExistsException"""  
    general_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GeneralServiceException"""  
    get_resource_output: Optional[shared_getresourceoutput.GetResourceOutput] = dataclasses.field(default=None)
    r"""Success"""  
    handler_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""HandlerFailureException"""  
    handler_internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""HandlerInternalFailureException"""  
    invalid_credentials_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCredentialsException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    network_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NetworkFailureException"""  
    not_stabilized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotStabilizedException"""  
    not_updatable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotUpdatableException"""  
    private_type_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PrivateTypeException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceConflictException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_internal_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceInternalErrorException"""  
    service_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceLimitExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    type_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TypeNotFoundException"""  
    unsupported_action_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedActionException"""  
    