"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional

ECOMMERCE_DELIVERY_SERVERS = [
	"http://api.climatekuul.com:8000/footprint",
]


@dataclasses.dataclass
class EcommerceDeliveryRequestBody:
    
    api_key_l1: str = dataclasses.field(metadata={'form': { 'field_name': 'apiKey_l1' }})
    r"""Client Api Key"""  
    api_key_l2: str = dataclasses.field(metadata={'form': { 'field_name': 'apiKey_l2' }})
    r"""Integration Partner Api Key"""  
    destination_latitude: float = dataclasses.field(metadata={'form': { 'field_name': 'destination_latitude' }})
    r"""valid latitude of destination"""  
    destination_longitude: float = dataclasses.field(metadata={'form': { 'field_name': 'destination_longitude' }})
    r"""valid longitude of destination"""  
    origin_latitude: float = dataclasses.field(metadata={'form': { 'field_name': 'origin_latitude' }})
    r"""valid latitude of origin"""  
    origin_longitude: float = dataclasses.field(metadata={'form': { 'field_name': 'origin_longitude' }})
    r"""valid longitude of origin"""  
    volumetric_weight: float = dataclasses.field(metadata={'form': { 'field_name': 'volumetric_weight' }})
    r"""Volumetric weight' (like:2.70)"""  
    waybill_type: str = dataclasses.field(metadata={'form': { 'field_name': 'waybill_type' }})
    r"""this can be 'air only', 'road only' or 'air and road'"""  
    destination_airport_code: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'destination_airport_code' }})
    r"""valid airport code of destination"""  
    origin_airport_code: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'origin_airport_code' }})
    r"""valid airport code of origin"""  
    

@dataclasses.dataclass
class EcommerceDeliveryRequest:
    
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})  
    request_body: Optional[EcommerceDeliveryRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class EcommerceDeliveryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    