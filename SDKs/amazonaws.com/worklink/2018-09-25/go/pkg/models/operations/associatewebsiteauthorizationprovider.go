// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum - The authorization provider type.
type AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum string

const (
	AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnumSaml AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum = "SAML"
)

func (e *AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SAML":
		*e = AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum: %s", s)
	}
}

type AssociateWebsiteAuthorizationProviderRequestBody struct {
	// The authorization provider type.
	AuthorizationProviderType AssociateWebsiteAuthorizationProviderRequestBodyAuthorizationProviderTypeEnum `json:"AuthorizationProviderType"`
	// The domain name of the authorization provider. This applies only to SAML-based authorization providers.
	DomainName *string `json:"DomainName,omitempty"`
	// The ARN of the fleet.
	FleetArn string `json:"FleetArn"`
}

type AssociateWebsiteAuthorizationProviderRequest struct {
	RequestBody       AssociateWebsiteAuthorizationProviderRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type AssociateWebsiteAuthorizationProviderResponse struct {
	// Success
	AssociateWebsiteAuthorizationProviderResponse *shared.AssociateWebsiteAuthorizationProviderResponse
	ContentType                                   string
	// InternalServerErrorException
	InternalServerErrorException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
