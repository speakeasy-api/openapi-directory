<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class AuthorizeRequest
{
    /**
     * Client ID (Consumer Key) of your application
     * 
     * @var string $clientId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=client_id')]
    public string $clientId;
    
    /**
     * User type to be authorized (usually 'customer')
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\AuthorizeRealmEnum $realm
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=realm')]
    public ?AuthorizeRealmEnum $realm = null;
    
    /**
     * The callback URI to send the request to after authorization; must use a host name that is registered with your application
     * 
     * @var string $redirectUri
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=redirect_uri')]
    public string $redirectUri;
    
    /**
     * Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\AuthorizeResponseTypeEnum $responseType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=response_type')]
    public AuthorizeResponseTypeEnum $responseType;
    
    /**
     * Space-separated list of scopes to be authorized
     * 
     * @var ?string $scope
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=scope')]
    public ?string $scope = null;
    
    /**
     * Unique value used by the calling app to verify the request
     * 
     * @var string $state
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=state')]
    public string $state;
    
	public function __construct()
	{
		$this->clientId = "";
		$this->realm = null;
		$this->redirectUri = "";
		$this->responseType = \OpenAPI\OpenAPI\Models\Operations\AuthorizeResponseTypeEnum::CODE;
		$this->scope = null;
		$this->state = "";
	}
}
