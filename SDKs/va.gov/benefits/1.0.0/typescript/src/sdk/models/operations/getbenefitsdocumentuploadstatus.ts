/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetBenefitsDocumentUploadStatusSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=apikey",
  })
  apikey: string;
}

export class GetBenefitsDocumentUploadStatusRequest extends SpeakeasyBase {
  /**
   * ID as returned by a previous create upload request
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

/**
 * Internal server error
 */
export class GetBenefitsDocumentUploadStatus500ApplicationJSON extends SpeakeasyBase {
  /**
   * Unambiguous status code. Only present if status = "error"
   *
   * @remarks
   *
   * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
   * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
   * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
   * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
   * * `DOC105` - Invalid or unknown id
   * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
   * * `DOC107` - Empty payload.
   * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
   * * `DOC201` - Upload server error.
   * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Human readable error detail. Only present if status = "error"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Unambiguous status code. Only present if status = "error"
   *
   * @remarks
   *
   * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
   * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
   * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
   * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
   * * `DOC105` - Invalid or unknown id
   * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
   * * `DOC107` - Empty payload.
   * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
   * * `DOC201` - Upload server error.
   * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * Human readable title description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Too many requests
 */
export class GetBenefitsDocumentUploadStatus429ApplicationJSON extends SpeakeasyBase {
  /**
   * message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;
}

/**
 * Not found
 */
export class GetBenefitsDocumentUploadStatus404ApplicationJSON extends SpeakeasyBase {
  /**
   * Unambiguous status code. Only present if status = "error"
   *
   * @remarks
   *
   * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
   * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
   * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
   * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
   * * `DOC105` - Invalid or unknown id
   * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
   * * `DOC107` - Empty payload.
   * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
   * * `DOC201` - Upload server error.
   * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Human readable error detail. Only present if status = "error"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Unambiguous status code. Only present if status = "error"
   *
   * @remarks
   *
   * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
   * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
   * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
   * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
   * * `DOC105` - Invalid or unknown id
   * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
   * * `DOC107` - Empty payload.
   * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
   * * `DOC201` - Upload server error.
   * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * Human readable title description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Forbidden
 */
export class GetBenefitsDocumentUploadStatus403ApplicationJSON extends SpeakeasyBase {
  /**
   * Error detail
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;
}

/**
 * Unauthorized request
 */
export class GetBenefitsDocumentUploadStatus401ApplicationJSON extends SpeakeasyBase {
  /**
   * Error detail
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;
}

/**
 * Upload status retrieved successfully
 */
export class GetBenefitsDocumentUploadStatus200ApplicationJSON extends SpeakeasyBase {
  /**
   * Status record for a previously initiated document submission.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => shared.DocumentUploadStatus)
  data: shared.DocumentUploadStatus;
}

export class GetBenefitsDocumentUploadStatusResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Upload status retrieved successfully
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus200ApplicationJSONObject?: GetBenefitsDocumentUploadStatus200ApplicationJSON;

  /**
   * Unauthorized request
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus401ApplicationJSONObject?: GetBenefitsDocumentUploadStatus401ApplicationJSON;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus403ApplicationJSONObject?: GetBenefitsDocumentUploadStatus403ApplicationJSON;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus404ApplicationJSONObject?: GetBenefitsDocumentUploadStatus404ApplicationJSON;

  /**
   * Too many requests
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus429ApplicationJSONObject?: GetBenefitsDocumentUploadStatus429ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  getBenefitsDocumentUploadStatus500ApplicationJSONObject?: GetBenefitsDocumentUploadStatus500ApplicationJSON;
}
