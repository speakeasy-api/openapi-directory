/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Calls that return team or team-specific information.
 */
export class Team {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of team district rankings for the given district.
   */
  getDistrictRankings(
    req: operations.GetDistrictRankingsRequest,
    security: operations.GetDistrictRankingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictRankingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictRankingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/rankings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictRankingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictRankingsResponse =
        new operations.GetDistrictRankingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtRankings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtRankings = utils.objectToClass(
              httpRes?.data,
              shared.DistrictRanking,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeams(
    req: operations.GetDistrictTeamsRequest,
    security: operations.GetDistrictTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsResponse =
        new operations.GetDistrictTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsKeys(
    req: operations.GetDistrictTeamsKeysRequest,
    security: operations.GetDistrictTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsKeysResponse =
        new operations.GetDistrictTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsSimple(
    req: operations.GetDistrictTeamsSimpleRequest,
    security: operations.GetDistrictTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsSimpleResponse =
        new operations.GetDistrictTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in the given event.
   */
  getEventTeams(
    req: operations.GetEventTeamsRequest,
    security: operations.GetEventTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsResponse =
        new operations.GetEventTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` keys that competed in the given event.
   */
  getEventTeamsKeys(
    req: operations.GetEventTeamsKeysRequest,
    security: operations.GetEventTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsKeysResponse =
        new operations.GetEventTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in the given event.
   */
  getEventTeamsSimple(
    req: operations.GetEventTeamsSimpleRequest,
    security: operations.GetEventTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsSimpleResponse =
        new operations.GetEventTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for teams competing at the given event.
   */
  getEventTeamsStatuses(
    req: operations.GetEventTeamsStatusesRequest,
    security: operations.GetEventTeamsStatusesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsStatusesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsStatusesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsStatusesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsStatusesResponse =
        new operations.GetEventTeamsStatusesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsStatuses200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getEventTeamsStatuses200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Team` object for the team referenced by the given key.
   */
  getTeam(
    req: operations.GetTeamRequest,
    security: operations.GetTeamSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/team/{team_key}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamResponse = new operations.GetTeamResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.team = utils.objectToClass(httpRes?.data, shared.Team);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of awards the given team has won.
   */
  getTeamAwards(
    req: operations.GetTeamAwardsRequest,
    security: operations.GetTeamAwardsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamAwardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamAwardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/awards",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamAwardsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamAwardsResponse =
        new operations.GetTeamAwardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.awards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.awards = utils.objectToClass(
              httpRes?.data,
              shared.Award,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of awards the given team has won in a given year.
   */
  getTeamAwardsByYear(
    req: operations.GetTeamAwardsByYearRequest,
    security: operations.GetTeamAwardsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamAwardsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamAwardsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/awards/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamAwardsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamAwardsByYearResponse =
        new operations.GetTeamAwardsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.awards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.awards = utils.objectToClass(
              httpRes?.data,
              shared.Award,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
   */
  getTeamDistricts(
    req: operations.GetTeamDistrictsRequest,
    security: operations.GetTeamDistrictsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamDistrictsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamDistrictsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/districts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamDistrictsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamDistrictsResponse =
        new operations.GetTeamDistrictsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtLists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtLists = utils.objectToClass(
              httpRes?.data,
              shared.DistrictList,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of awards the given team won at the given event.
   */
  getTeamEventAwards(
    req: operations.GetTeamEventAwardsRequest,
    security: operations.GetTeamEventAwardsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventAwardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventAwardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/awards",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventAwardsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventAwardsResponse =
        new operations.GetTeamEventAwardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.awards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.awards = utils.objectToClass(
              httpRes?.data,
              shared.Award,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given team and event.
   */
  getTeamEventMatches(
    req: operations.GetTeamEventMatchesRequest,
    security: operations.GetTeamEventMatchesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesResponse =
        new operations.GetTeamEventMatchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for matches for the given team and event.
   */
  getTeamEventMatchesKeys(
    req: operations.GetTeamEventMatchesKeysRequest,
    security: operations.GetTeamEventMatchesKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesKeysResponse =
        new operations.GetTeamEventMatchesKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventMatchesKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given team and event.
   */
  getTeamEventMatchesSimple(
    req: operations.GetTeamEventMatchesSimpleRequest,
    security: operations.GetTeamEventMatchesSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesSimpleResponse =
        new operations.GetTeamEventMatchesSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets the competition rank and status of the team at the given event.
   */
  getTeamEventStatus(
    req: operations.GetTeamEventStatusRequest,
    security: operations.GetTeamEventStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/status",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventStatusResponse =
        new operations.GetTeamEventStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamEventStatus = utils.objectToClass(
              httpRes?.data,
              shared.TeamEventStatus
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of all events this team has competed at.
   */
  getTeamEvents(
    req: operations.GetTeamEventsRequest,
    security: operations.GetTeamEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsResponse =
        new operations.GetTeamEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of events this team has competed at in the given year.
   */
  getTeamEventsByYear(
    req: operations.GetTeamEventsByYearRequest,
    security: operations.GetTeamEventsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearResponse =
        new operations.GetTeamEventsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of the event keys for events this team has competed at in the given year.
   */
  getTeamEventsByYearKeys(
    req: operations.GetTeamEventsByYearKeysRequest,
    security: operations.GetTeamEventsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearKeysResponse =
        new operations.GetTeamEventsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events this team has competed at in the given year.
   */
  getTeamEventsByYearSimple(
    req: operations.GetTeamEventsByYearSimpleRequest,
    security: operations.GetTeamEventsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearSimpleResponse =
        new operations.GetTeamEventsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of the event keys for all events this team has competed at.
   */
  getTeamEventsKeys(
    req: operations.GetTeamEventsKeysRequest,
    security: operations.GetTeamEventsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsKeysResponse =
        new operations.GetTeamEventsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of all events this team has competed at.
   */
  getTeamEventsSimple(
    req: operations.GetTeamEventsSimpleRequest,
    security: operations.GetTeamEventsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsSimpleResponse =
        new operations.GetTeamEventsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for events this team has competed at in the given year.
   */
  getTeamEventsStatusesByYear(
    req: operations.GetTeamEventsStatusesByYearRequest,
    security: operations.GetTeamEventsStatusesByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsStatusesByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsStatusesByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsStatusesByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsStatusesByYearResponse =
        new operations.GetTeamEventsStatusesByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsStatusesByYear200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTeamEventsStatusesByYear200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given team and year.
   */
  getTeamMatchesByYear(
    req: operations.GetTeamMatchesByYearRequest,
    security: operations.GetTeamMatchesByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearResponse =
        new operations.GetTeamMatchesByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for matches for the given team and year.
   */
  getTeamMatchesByYearKeys(
    req: operations.GetTeamMatchesByYearKeysRequest,
    security: operations.GetTeamMatchesByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearKeysResponse =
        new operations.GetTeamMatchesByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamMatchesByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given team and year.
   */
  getTeamMatchesByYearSimple(
    req: operations.GetTeamMatchesByYearSimpleRequest,
    security: operations.GetTeamMatchesByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearSimpleResponse =
        new operations.GetTeamMatchesByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matchSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matchSimples = utils.objectToClass(
              httpRes?.data,
              shared.MatchSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Media (videos / pictures) for the given team and tag.
   */
  getTeamMediaByTag(
    req: operations.GetTeamMediaByTagRequest,
    security: operations.GetTeamMediaByTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMediaByTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMediaByTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/media/tag/{media_tag}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMediaByTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMediaByTagResponse =
        new operations.GetTeamMediaByTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.media = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.media = utils.objectToClass(
              httpRes?.data,
              shared.Media,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Media (videos / pictures) for the given team, tag and year.
   */
  getTeamMediaByTagYear(
    req: operations.GetTeamMediaByTagYearRequest,
    security: operations.GetTeamMediaByTagYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMediaByTagYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMediaByTagYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/media/tag/{media_tag}/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMediaByTagYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMediaByTagYearResponse =
        new operations.GetTeamMediaByTagYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.media = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.media = utils.objectToClass(
              httpRes?.data,
              shared.Media,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Media (videos / pictures) for the given team and year.
   */
  getTeamMediaByYear(
    req: operations.GetTeamMediaByYearRequest,
    security: operations.GetTeamMediaByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMediaByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMediaByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/media/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMediaByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMediaByYearResponse =
        new operations.GetTeamMediaByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.media = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.media = utils.objectToClass(
              httpRes?.data,
              shared.Media,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
   */
  getTeamRobots(
    req: operations.GetTeamRobotsRequest,
    security: operations.GetTeamRobotsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamRobotsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamRobotsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/robots",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamRobotsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamRobotsResponse =
        new operations.GetTeamRobotsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamRobots = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamRobots = utils.objectToClass(
              httpRes?.data,
              shared.TeamRobot,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Team_Simple` object for the team referenced by the given key.
   */
  getTeamSimple(
    req: operations.GetTeamSimpleRequest,
    security: operations.GetTeamSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamSimpleResponse =
        new operations.GetTeamSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimple = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Media (social media) for the given team.
   */
  getTeamSocialMedia(
    req: operations.GetTeamSocialMediaRequest,
    security: operations.GetTeamSocialMediaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamSocialMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamSocialMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/social_media",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamSocialMediaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamSocialMediaResponse =
        new operations.GetTeamSocialMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.media = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.media = utils.objectToClass(
              httpRes?.data,
              shared.Media,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of years in which the team participated in at least one competition.
   */
  getTeamYearsParticipated(
    req: operations.GetTeamYearsParticipatedRequest,
    security: operations.GetTeamYearsParticipatedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamYearsParticipatedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamYearsParticipatedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/years_participated",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamYearsParticipatedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamYearsParticipatedResponse =
        new operations.GetTeamYearsParticipatedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamYearsParticipated200ApplicationJSONIntegers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects, paginated in groups of 500.
   */
  getTeams(
    req: operations.GetTeamsRequest,
    security: operations.GetTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/teams/{page_num}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsResponse = new operations.GetTeamsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYear(
    req: operations.GetTeamsByYearRequest,
    security: operations.GetTeamsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearResponse =
        new operations.GetTeamsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYearKeys(
    req: operations.GetTeamsByYearKeysRequest,
    security: operations.GetTeamsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearKeysResponse =
        new operations.GetTeamsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYearSimple(
    req: operations.GetTeamsByYearSimpleRequest,
    security: operations.GetTeamsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearSimpleResponse =
        new operations.GetTeamsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
   */
  getTeamsKeys(
    req: operations.GetTeamsKeysRequest,
    security: operations.GetTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{page_num}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsKeysResponse =
        new operations.GetTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamsKeys200ApplicationJSONStrings = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
   */
  getTeamsSimple(
    req: operations.GetTeamsSimpleRequest,
    security: operations.GetTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{page_num}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsSimpleResponse =
        new operations.GetTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
