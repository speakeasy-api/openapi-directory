<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK
 * 
 * http://wiremock.org/docs/ - WireMock user documentation
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see http://wiremock.org/docs/
 */
class SDK
{
	public const SERVERS = [
		'/',
	];
  	
    /**
     * Near misses allow querying of received requests or request patterns according to similarity
     * 
     * @var NearMisses $$nearMisses
     */
	public NearMisses $nearMisses;
	
    /**
     * Stub mapping record and snapshot functions
     * 
     * @var Recordings $$recordings
     */
	public Recordings $recordings;
	
    /**
     * Logged requests and responses received by the mock service
     * 
     * @var Requests $$requests
     */
	public Requests $requests;
	
    /**
     * Scenarios support modelling of stateful behaviour
     * 
     * @var Scenarios $$scenarios
     */
	public Scenarios $scenarios;
	
    /**
     * Operations on stub mappings
     * 
     * @var StubMappings $$stubMappings
     */
	public StubMappings $stubMappings;
	
    /**
     * Global operations
     * 
     * @var System $$system
     */
	public System $system;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->nearMisses = new NearMisses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->recordings = new Recordings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->requests = new Requests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->scenarios = new Scenarios(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->stubMappings = new StubMappings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->system = new System(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}