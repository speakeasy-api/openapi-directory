"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import datalocationconstraint_enum as shared_datalocationconstraint_enum
from ..shared import estimatedcosttier_enum as shared_estimatedcosttier_enum
from ..shared import failurepolicy as shared_failurepolicy
from ..shared import resiliencypolicytier_enum as shared_resiliencypolicytier_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResiliencyPolicy:
    r"""Defines a resiliency policy."""
    
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    data_location_constraint: Optional[shared_datalocationconstraint_enum.DataLocationConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataLocationConstraint'), 'exclude': lambda f: f is None }})  
    estimated_cost_tier: Optional[shared_estimatedcosttier_enum.EstimatedCostTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedCostTier'), 'exclude': lambda f: f is None }})  
    policy: Optional[dict[str, shared_failurepolicy.FailurePolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})  
    policy_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyArn'), 'exclude': lambda f: f is None }})  
    policy_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDescription'), 'exclude': lambda f: f is None }})  
    policy_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyName'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tier: Optional[shared_resiliencypolicytier_enum.ResiliencyPolicyTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})  
    