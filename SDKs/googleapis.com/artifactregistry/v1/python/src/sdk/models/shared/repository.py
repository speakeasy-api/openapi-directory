"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dockerrepositoryconfig as shared_dockerrepositoryconfig
from ..shared import mavenrepositoryconfig as shared_mavenrepositoryconfig
from ..shared import remoterepositoryconfig as shared_remoterepositoryconfig
from ..shared import virtualrepositoryconfig as shared_virtualrepositoryconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RepositoryFormatEnum(str, Enum):
    r"""The format of packages that are stored in the repository."""
    FORMAT_UNSPECIFIED = 'FORMAT_UNSPECIFIED'
    DOCKER = 'DOCKER'
    MAVEN = 'MAVEN'
    NPM = 'NPM'
    APT = 'APT'
    YUM = 'YUM'
    PYTHON = 'PYTHON'
    KFP = 'KFP'

class RepositoryModeEnum(str, Enum):
    r"""The mode of the repository."""
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    STANDARD_REPOSITORY = 'STANDARD_REPOSITORY'
    VIRTUAL_REPOSITORY = 'VIRTUAL_REPOSITORY'
    REMOTE_REPOSITORY = 'REMOTE_REPOSITORY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Repository:
    r"""A Repository for storing artifacts with a specific format."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the repository was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The user-provided description of the repository."""  
    docker_config: Optional[shared_dockerrepositoryconfig.DockerRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerConfig'), 'exclude': lambda f: f is None }})
    r"""DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type."""  
    format: Optional[RepositoryFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""The format of packages that are stored in the repository."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes."""  
    maven_config: Optional[shared_mavenrepositoryconfig.MavenRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mavenConfig'), 'exclude': lambda f: f is None }})
    r"""MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type."""  
    mode: Optional[RepositoryModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The mode of the repository."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the repository, for example: \\"projects/p1/locations/us-central1/repositories/repo1\\"."""  
    remote_repository_config: Optional[shared_remoterepositoryconfig.RemoteRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteRepositoryConfig'), 'exclude': lambda f: f is None }})
    r"""Remote repository configuration."""  
    satisfies_pzs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('satisfiesPzs'), 'exclude': lambda f: f is None }})
    r"""Output only. If set, the repository satisfies physical zone separation."""  
    size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the repository was last updated."""  
    virtual_repository_config: Optional[shared_virtualrepositoryconfig.VirtualRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualRepositoryConfig'), 'exclude': lambda f: f is None }})
    r"""Virtual repository configuration."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoryInput:
    r"""A Repository for storing artifacts with a specific format."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The user-provided description of the repository."""  
    docker_config: Optional[shared_dockerrepositoryconfig.DockerRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerConfig'), 'exclude': lambda f: f is None }})
    r"""DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type."""  
    format: Optional[RepositoryFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""The format of packages that are stored in the repository."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes."""  
    maven_config: Optional[shared_mavenrepositoryconfig.MavenRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mavenConfig'), 'exclude': lambda f: f is None }})
    r"""MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type."""  
    mode: Optional[RepositoryModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The mode of the repository."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the repository, for example: \\"projects/p1/locations/us-central1/repositories/repo1\\"."""  
    remote_repository_config: Optional[shared_remoterepositoryconfig.RemoteRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteRepositoryConfig'), 'exclude': lambda f: f is None }})
    r"""Remote repository configuration."""  
    virtual_repository_config: Optional[shared_virtualrepositoryconfig.VirtualRepositoryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualRepositoryConfig'), 'exclude': lambda f: f is None }})
    r"""Virtual repository configuration."""  
    