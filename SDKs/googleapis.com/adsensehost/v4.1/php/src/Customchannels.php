<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customchannels 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a specific custom channel from the host AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteResponse
     */
	public function adsensehostCustomchannelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels/{customChannelId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific custom channel from the host AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetResponse
     */
	public function adsensehostCustomchannelsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels/{customChannelId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new custom channel to the host AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertResponse
     */
	public function adsensehostCustomchannelsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customChannel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all host custom channels in this AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListResponse
     */
	public function adsensehostCustomchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannels = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannels', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a custom channel in the host AdSense account. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchResponse
     */
	public function adsensehostCustomchannelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customChannel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a custom channel in the host AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateResponse
     */
	public function adsensehostCustomchannelsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/adclients/{adClientId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customChannel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostCustomchannelsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
}