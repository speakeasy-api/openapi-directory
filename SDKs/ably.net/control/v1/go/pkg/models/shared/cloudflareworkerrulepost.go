// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CloudflareWorkerRulePostRuleTypeEnum string

const (
	CloudflareWorkerRulePostRuleTypeEnumHTTPCloudflareWorker CloudflareWorkerRulePostRuleTypeEnum = "http/cloudflare-worker"
)

func (e CloudflareWorkerRulePostRuleTypeEnum) ToPointer() *CloudflareWorkerRulePostRuleTypeEnum {
	return &e
}

func (e *CloudflareWorkerRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/cloudflare-worker":
		*e = CloudflareWorkerRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudflareWorkerRulePostRuleTypeEnum: %v", v)
	}
}

type CloudflareWorkerRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type CloudflareWorkerRulePostTarget struct {
	Headers      []CloudflareWorkerRulePostTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                                 `json:"signingKeyId,omitempty"`
	URL          string                                  `json:"url"`
}

type CloudflareWorkerRulePost struct {
	RequestMode string                               `json:"requestMode"`
	RuleType    CloudflareWorkerRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                           `json:"source"`
	Status      *string                              `json:"status,omitempty"`
	Target      CloudflareWorkerRulePostTarget       `json:"target"`
}
