"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsrdsdbdomainmembership as shared_awsrdsdbdomainmembership
from ..shared import awsrdsdbinstanceassociatedrole as shared_awsrdsdbinstanceassociatedrole
from ..shared import awsrdsdbinstanceendpoint as shared_awsrdsdbinstanceendpoint
from ..shared import awsrdsdbinstancevpcsecuritygroup as shared_awsrdsdbinstancevpcsecuritygroup
from ..shared import awsrdsdboptiongroupmembership as shared_awsrdsdboptiongroupmembership
from ..shared import awsrdsdbparametergroup as shared_awsrdsdbparametergroup
from ..shared import awsrdsdbpendingmodifiedvalues as shared_awsrdsdbpendingmodifiedvalues
from ..shared import awsrdsdbprocessorfeature as shared_awsrdsdbprocessorfeature
from ..shared import awsrdsdbstatusinfo as shared_awsrdsdbstatusinfo
from ..shared import awsrdsdbsubnetgroup as shared_awsrdsdbsubnetgroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsRdsDbInstanceDetails:
    r"""Contains the details of an Amazon RDS DB instance."""
    
    allocated_storage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocatedStorage'), 'exclude': lambda f: f is None }})  
    associated_roles: Optional[list[shared_awsrdsdbinstanceassociatedrole.AwsRdsDbInstanceAssociatedRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociatedRoles'), 'exclude': lambda f: f is None }})  
    auto_minor_version_upgrade: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMinorVersionUpgrade'), 'exclude': lambda f: f is None }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZone'), 'exclude': lambda f: f is None }})  
    backup_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupRetentionPeriod'), 'exclude': lambda f: f is None }})  
    ca_certificate_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CACertificateIdentifier'), 'exclude': lambda f: f is None }})  
    character_set_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CharacterSetName'), 'exclude': lambda f: f is None }})  
    copy_tags_to_snapshot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToSnapshot'), 'exclude': lambda f: f is None }})  
    db_cluster_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DBClusterIdentifier'), 'exclude': lambda f: f is None }})  
    db_instance_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DBInstanceClass'), 'exclude': lambda f: f is None }})  
    db_instance_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DBInstanceIdentifier'), 'exclude': lambda f: f is None }})  
    db_instance_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbInstancePort'), 'exclude': lambda f: f is None }})  
    db_instance_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbInstanceStatus'), 'exclude': lambda f: f is None }})  
    dbi_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbiResourceId'), 'exclude': lambda f: f is None }})  
    db_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DBName'), 'exclude': lambda f: f is None }})  
    db_parameter_groups: Optional[list[shared_awsrdsdbparametergroup.AwsRdsDbParameterGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbParameterGroups'), 'exclude': lambda f: f is None }})  
    db_security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSecurityGroups'), 'exclude': lambda f: f is None }})  
    db_subnet_group: Optional[shared_awsrdsdbsubnetgroup.AwsRdsDbSubnetGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSubnetGroup'), 'exclude': lambda f: f is None }})  
    deletion_protection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionProtection'), 'exclude': lambda f: f is None }})  
    domain_memberships: Optional[list[shared_awsrdsdbdomainmembership.AwsRdsDbDomainMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainMemberships'), 'exclude': lambda f: f is None }})  
    enabled_cloud_watch_logs_exports: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnabledCloudWatchLogsExports'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[shared_awsrdsdbinstanceendpoint.AwsRdsDbInstanceEndpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})  
    engine: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Engine'), 'exclude': lambda f: f is None }})  
    engine_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineVersion'), 'exclude': lambda f: f is None }})  
    enhanced_monitoring_resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnhancedMonitoringResourceArn'), 'exclude': lambda f: f is None }})  
    iam_database_authentication_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IAMDatabaseAuthenticationEnabled'), 'exclude': lambda f: f is None }})  
    instance_create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCreateTime'), 'exclude': lambda f: f is None }})  
    iops: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Iops'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    latest_restorable_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LatestRestorableTime'), 'exclude': lambda f: f is None }})  
    license_model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseModel'), 'exclude': lambda f: f is None }})  
    listener_endpoint: Optional[shared_awsrdsdbinstanceendpoint.AwsRdsDbInstanceEndpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListenerEndpoint'), 'exclude': lambda f: f is None }})
    r"""Specifies the connection endpoint."""  
    master_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterUsername'), 'exclude': lambda f: f is None }})  
    max_allocated_storage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxAllocatedStorage'), 'exclude': lambda f: f is None }})  
    monitoring_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringInterval'), 'exclude': lambda f: f is None }})  
    monitoring_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringRoleArn'), 'exclude': lambda f: f is None }})  
    multi_az: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiAz'), 'exclude': lambda f: f is None }})  
    option_group_memberships: Optional[list[shared_awsrdsdboptiongroupmembership.AwsRdsDbOptionGroupMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptionGroupMemberships'), 'exclude': lambda f: f is None }})  
    pending_modified_values: Optional[shared_awsrdsdbpendingmodifiedvalues.AwsRdsDbPendingModifiedValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingModifiedValues'), 'exclude': lambda f: f is None }})  
    performance_insights_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformanceInsightsEnabled'), 'exclude': lambda f: f is None }})  
    performance_insights_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformanceInsightsKmsKeyId'), 'exclude': lambda f: f is None }})  
    performance_insights_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformanceInsightsRetentionPeriod'), 'exclude': lambda f: f is None }})  
    preferred_backup_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredBackupWindow'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    processor_features: Optional[list[shared_awsrdsdbprocessorfeature.AwsRdsDbProcessorFeature]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessorFeatures'), 'exclude': lambda f: f is None }})  
    promotion_tier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PromotionTier'), 'exclude': lambda f: f is None }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PubliclyAccessible'), 'exclude': lambda f: f is None }})  
    read_replica_db_cluster_identifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadReplicaDBClusterIdentifiers'), 'exclude': lambda f: f is None }})  
    read_replica_db_instance_identifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadReplicaDBInstanceIdentifiers'), 'exclude': lambda f: f is None }})  
    read_replica_source_db_instance_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadReplicaSourceDBInstanceIdentifier'), 'exclude': lambda f: f is None }})  
    secondary_availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryAvailabilityZone'), 'exclude': lambda f: f is None }})  
    status_infos: Optional[list[shared_awsrdsdbstatusinfo.AwsRdsDbStatusInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusInfos'), 'exclude': lambda f: f is None }})  
    storage_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageEncrypted'), 'exclude': lambda f: f is None }})  
    storage_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageType'), 'exclude': lambda f: f is None }})  
    tde_credential_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TdeCredentialArn'), 'exclude': lambda f: f is None }})  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timezone'), 'exclude': lambda f: f is None }})  
    vpc_security_groups: Optional[list[shared_awsrdsdbinstancevpcsecuritygroup.AwsRdsDbInstanceVpcSecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcSecurityGroups'), 'exclude': lambda f: f is None }})  
    