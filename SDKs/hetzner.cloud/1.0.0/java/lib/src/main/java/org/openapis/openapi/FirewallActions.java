/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class FirewallActions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public FirewallActions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get all Actions for a Firewall
     * Returns all Action objects for a Firewall. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFirewallsIdActionsResponse getFirewallsIdActions(org.openapis.openapi.models.operations.GetFirewallsIdActionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFirewallsIdActionsRequest.class, baseUrl, "/firewalls/{id}/actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFirewallsIdActionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFirewallsIdActionsResponse res = new org.openapis.openapi.models.operations.GetFirewallsIdActionsResponse(contentType, httpRes.statusCode()) {{
            actionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetFirewallsIdActionsActionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetFirewallsIdActionsActionsResponse.class);
                res.actionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Get an Action for a Firewall
     * Returns a specific Action for a Firewall.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdResponse getFirewallsIdActionsActionId(org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdRequest.class, baseUrl, "/firewalls/{id}/actions/{action_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdResponse res = new org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetFirewallsIdActionsActionIdActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }

    /**
     * Apply to Resources
     * Applies one Firewall to multiple resources.
     * 
     * Currently servers (public network interface) and label selectors are supported.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |-------------------------------|---------------------------------------------------------------|
     * | `firewall_already_applied`    | Firewall was already applied on resource                      |
     * | `incompatible_network_type`   | The Network type is incompatible for the given resource       |
     * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesResponse postFirewallsIdActionsApplyToResources(org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesRequest.class, baseUrl, "/firewalls/{id}/actions/apply_to_resources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesResponse res = new org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesResponse(contentType, httpRes.statusCode()) {{
            actionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesActionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFirewallsIdActionsApplyToResourcesActionsResponse.class);
                res.actionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove from Resources
     * Removes one Firewall from multiple resources.
     * 
     * Currently only Servers (and their public network interfaces) are supported.
     * 
     * #### Call specific error codes
     * 
     * | Code                                  | Description                                                            |
     * |---------------------------------------|------------------------------------------------------------------------|
     * | `firewall_already_removed`            | Firewall was already removed from the resource                         |
     * | `firewall_resource_not_found`         | The resource the Firewall should be attached to was not found          |
     * | `firewall_managed_by_label_selector`  | Firewall was applied via label selector and cannot be removed manually |
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesResponse postFirewallsIdActionsRemoveFromResources(org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesRequest.class, baseUrl, "/firewalls/{id}/actions/remove_from_resources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesResponse res = new org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesResponse(contentType, httpRes.statusCode()) {{
            actionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesActionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFirewallsIdActionsRemoveFromResourcesActionsResponse.class);
                res.actionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Set Rules
     * Sets the rules of a Firewall.
     * 
     * All existing rules will be overwritten. Pass an empty `rules` array to remove all rules.
     * The maximum amount of rules that can be defined is 50.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |-------------------------------|---------------------------------------------------------------|
     * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesResponse postFirewallsIdActionsSetRules(org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesRequest.class, baseUrl, "/firewalls/{id}/actions/set_rules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesResponse res = new org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesResponse(contentType, httpRes.statusCode()) {{
            actionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesActionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFirewallsIdActionsSetRulesActionsResponse.class);
                res.actionsResponse = out;
            }
        }

        return res;
    }
}