// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum = 429
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnumRateLimitedError LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON13 struct {
	Detail     string                                                         `json:"detail"`
	RetryAfter *int64                                                         `json:"retry_after,omitempty"`
	Status     LookUpTheBalanceForAnAccountDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                                         `json:"title"`
	Type       LookUpTheBalanceForAnAccountDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnumFourHundredAndThree LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum = 403
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnumPrivateFeatureError LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON12 struct {
	Detail string                                                         `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                                         `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnumFourHundredAndFour LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum = 404
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnumObjectNotFoundError LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON11 struct {
	Detail string                                                         `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                                         `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnumFourHundred LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum = 400
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnumMalformedRequestError LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON10 struct {
	Detail string                                                         `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                                         `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnumFourHundred LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum = 400
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnumInvalidParametersError LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                                      `json:"errors"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnumFourHundredAndNine LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum = 409
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnumInvalidOperationError LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON8 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnumFourHundredAndOne LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum = 401
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnumInvalidAPIKeyError LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON7 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnumFiveHundred LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum = 500
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnumInternalServerError LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON6 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnumFourHundredAndThree LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum = 403
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnumInsufficientPermissionsError LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON5 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum = 422
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON4 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnumFourHundredAndNine LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum = 409
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnumIdempotencyConflictError LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON3 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnumFourHundredAndThree LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum = 403
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnumEnvironmentMismatchError LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON2 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum int64

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnumFourHundredAndFour LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum = 404
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum string

const (
	LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum) ToPointer() *LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type LookUpTheBalanceForAnAccountDefaultApplicationJSON1 struct {
	Detail string                                                        `json:"detail"`
	Status LookUpTheBalanceForAnAccountDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   LookUpTheBalanceForAnAccountDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type LookUpTheBalanceForAnAccountResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Balance Lookup
	BalanceLookup *shared.BalanceLookup
	// Error
	Error interface{}
}
