/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateChannelWebhookServerList = [
  "https://chat.twilio.com",
] as const;

export class CreateChannelWebhookSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateChannelWebhookCreateChannelWebhookRequest extends SpeakeasyBase {
  /**
   * The events that cause us to call the Channel Webhook. Used when `type` is `webhook`. This parameter takes only one event. To specify more than one event, repeat this parameter for each event. For the list of possible events, see [Webhook Event Triggers](https://www.twilio.com/docs/chat/webhook-events#webhook-event-trigger).
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration.Filters" })
  configurationFilters?: string[];

  /**
   * The SID of the Studio [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to call when an event in `configuration.filters` occurs. Used only when `type` is `studio`.
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration.FlowSid" })
  configurationFlowSid?: string;

  @SpeakeasyMetadata({ data: "form, name=Configuration.Method" })
  configurationMethod?: shared.ChannelWebhookEnumMethodEnum;

  /**
   * The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3, inclusive, and the default is 0.
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration.RetryCount" })
  configurationRetryCount?: number;

  /**
   * A string that will cause us to call the webhook when it is present in a message body. This parameter takes only one trigger string. To specify more than one, repeat this parameter for each trigger string up to a total of 5 trigger strings. Used only when `type` = `trigger`.
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration.Triggers" })
  configurationTriggers?: string[];

  /**
   * The URL of the webhook to call using the `configuration.method`.
   */
  @SpeakeasyMetadata({ data: "form, name=Configuration.Url" })
  configurationUrl?: string;

  @SpeakeasyMetadata({ data: "form, name=Type" })
  type: shared.ChannelWebhookEnumTypeEnum;
}

export class CreateChannelWebhookRequest extends SpeakeasyBase {
  /**
   * The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Channel Webhook resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ChannelSid",
  })
  channelSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateChannelWebhookCreateChannelWebhookRequest;

  /**
   * The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to create the Webhook resource under.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;
}

export class CreateChannelWebhookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  chatV2ServiceChannelChannelWebhook?: shared.ChatV2ServiceChannelChannelWebhook;
}
