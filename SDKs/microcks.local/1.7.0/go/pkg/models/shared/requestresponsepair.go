// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RequestResponsePairTypeEnum - Discriminant type for identifying kind of exchange
type RequestResponsePairTypeEnum string

const (
	RequestResponsePairTypeEnumReqRespPair RequestResponsePairTypeEnum = "reqRespPair"
	RequestResponsePairTypeEnumUnidirEvent RequestResponsePairTypeEnum = "unidirEvent"
)

func (e RequestResponsePairTypeEnum) ToPointer() *RequestResponsePairTypeEnum {
	return &e
}

func (e *RequestResponsePairTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reqRespPair":
		fallthrough
	case "unidirEvent":
		*e = RequestResponsePairTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestResponsePairTypeEnum: %v", v)
	}
}

// RequestResponsePair - Abstract bean representing a Service or API Exchange.
type RequestResponsePair struct {
	// A mock invocation or test request
	Request Request `json:"request"`
	// A mock invocation or test response
	Response Response `json:"response"`
	// Discriminant type for identifying kind of exchange
	Type RequestResponsePairTypeEnum `json:"type"`
}
