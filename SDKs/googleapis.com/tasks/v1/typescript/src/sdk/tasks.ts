/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Tasks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.
   */
  tasksTasksClear(
    req: operations.TasksTasksClearRequest,
    security: operations.TasksTasksClearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksClearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksClearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/clear",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksClearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksClearResponse =
        new operations.TasksTasksClearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified task from the task list.
   */
  tasksTasksDelete(
    req: operations.TasksTasksDeleteRequest,
    security: operations.TasksTasksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks/{task}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksDeleteResponse =
        new operations.TasksTasksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified task.
   */
  tasksTasksGet(
    req: operations.TasksTasksGetRequest,
    security: operations.TasksTasksGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks/{task}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksGetResponse =
        new operations.TasksTasksGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.task = utils.objectToClass(httpRes?.data, shared.Task);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new task on the specified task list.
   */
  tasksTasksInsert(
    req: operations.TasksTasksInsertRequest,
    security: operations.TasksTasksInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "task",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksInsertResponse =
        new operations.TasksTasksInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.task = utils.objectToClass(httpRes?.data, shared.Task);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all tasks in the specified task list.
   */
  tasksTasksList(
    req: operations.TasksTasksListRequest,
    security: operations.TasksTasksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksListResponse =
        new operations.TasksTasksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tasks = utils.objectToClass(httpRes?.data, shared.Tasks);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.
   */
  tasksTasksMove(
    req: operations.TasksTasksMoveRequest,
    security: operations.TasksTasksMoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksMoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksMoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks/{task}/move",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksMoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksMoveResponse =
        new operations.TasksTasksMoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.task = utils.objectToClass(httpRes?.data, shared.Task);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified task. This method supports patch semantics.
   */
  tasksTasksPatch(
    req: operations.TasksTasksPatchRequest,
    security: operations.TasksTasksPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks/{task}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "task1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksPatchResponse =
        new operations.TasksTasksPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.task = utils.objectToClass(httpRes?.data, shared.Task);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified task.
   */
  tasksTasksUpdate(
    req: operations.TasksTasksUpdateRequest,
    security: operations.TasksTasksUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasksUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasksUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/lists/{tasklist}/tasks/{task}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "task1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasksUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasksUpdateResponse =
        new operations.TasksTasksUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.task = utils.objectToClass(httpRes?.data, shared.Task);
          }
          break;
      }

      return res;
    });
  }
}
