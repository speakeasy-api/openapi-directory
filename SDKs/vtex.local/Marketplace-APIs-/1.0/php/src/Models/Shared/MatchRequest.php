<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class MatchRequest
{
    /**
     * Define the action you want to apply to each SKU. Values include: 
     * 
     * 
     * 1. `newproduct`: match the SKU as a new product. 
     * 
     * 2. `itemMatch`: associate the received SKU to an existing SKU. 
     * 
     * 3. `productMatch`: associate the received SKU to an existing product. 
     * 
     * 4. `deny`: deny the received SKU. 
     * 
     * 5. `pending`: the received SKU requires attention. 
     * 
     * 6. `incomplete`: the received SKU is lacking information to be matched. 
     * 
     * 7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched. 
     * 
     * Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * 
     * @var string $matchType
     */
	#[\JMS\Serializer\Annotation\SerializedName('matchType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $matchType;
    
    /**
     * Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.
     * 
     * @var string $matcherId
     */
	#[\JMS\Serializer\Annotation\SerializedName('matcherId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $matcherId;
    
	#[\JMS\Serializer\Annotation\SerializedName('product')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Product')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Product $product = null;
    
    /**
     * In `productMatch` actions, fill in this field on your request to match the item to an existing product in the marketplace.
     * 
     * @var ?string $productRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('productRef')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $productRef = null;
    
    /**
     * Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been: 
     * 
     * 
     * `Approved`: score equal to or greater than 80 points. 
     * 
     * `Pending`: from 31 to 79 points.
     * 
     * `Denied`: from 0 to 30 points. 
     * 
     * Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * 
     * @var string $score
     */
	#[\JMS\Serializer\Annotation\SerializedName('score')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $score;
    
	#[\JMS\Serializer\Annotation\SerializedName('sku')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Sku')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Sku $sku = null;
    
    /**
     * In `itemMatch` actions, fill in this field on your request to match the item to an existing SKU in the marketplace.
     * 
     * @var ?string $skuRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('skuRef')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $skuRef = null;
    
	public function __construct()
	{
		$this->matchType = "";
		$this->matcherId = "";
		$this->product = null;
		$this->productRef = null;
		$this->score = "";
		$this->sku = null;
		$this->skuRef = null;
	}
}
