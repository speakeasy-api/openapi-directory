/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventReference } from "./eventreference";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A significant event that happened during the incident.
 */
export class TimelineEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "eventData" })
  eventData: string;

  @SpeakeasyMetadata()
  @Expose({ name: "eventId" })
  eventId: string;

  @SpeakeasyMetadata({ elemType: EventReference })
  @Expose({ name: "eventReferences" })
  @Type(() => EventReference)
  eventReferences?: EventReference[];

  @SpeakeasyMetadata()
  @Expose({ name: "eventTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  eventTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "eventType" })
  eventType: string;

  @SpeakeasyMetadata()
  @Expose({ name: "eventUpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  eventUpdatedTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "incidentRecordArn" })
  incidentRecordArn: string;
}
