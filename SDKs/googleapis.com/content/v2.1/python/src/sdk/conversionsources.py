"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conversionsources:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_conversionsources_create(self, request: operations.ContentConversionsourcesCreateRequest, security: operations.ContentConversionsourcesCreateSecurity) -> operations.ContentConversionsourcesCreateResponse:
        r"""Creates a new conversion source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesCreateRequest, base_url, '/{merchantId}/conversionsources', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversion_source_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentConversionsourcesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionSource])
                res.conversion_source = out

        return res

    def content_conversionsources_delete(self, request: operations.ContentConversionsourcesDeleteRequest, security: operations.ContentConversionsourcesDeleteSecurity) -> operations.ContentConversionsourcesDeleteResponse:
        r"""Archives an existing conversion source. It will be recoverable for 30 days. This archiving behavior is not typical in the Content API and unique to this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesDeleteRequest, base_url, '/{merchantId}/conversionsources/{conversionSourceId}', request)
        
        query_params = utils.get_query_params(operations.ContentConversionsourcesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_conversionsources_get(self, request: operations.ContentConversionsourcesGetRequest, security: operations.ContentConversionsourcesGetSecurity) -> operations.ContentConversionsourcesGetResponse:
        r"""Fetches a conversion source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesGetRequest, base_url, '/{merchantId}/conversionsources/{conversionSourceId}', request)
        
        query_params = utils.get_query_params(operations.ContentConversionsourcesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionSource])
                res.conversion_source = out

        return res

    def content_conversionsources_list(self, request: operations.ContentConversionsourcesListRequest, security: operations.ContentConversionsourcesListSecurity) -> operations.ContentConversionsourcesListResponse:
        r"""Retrieves the list of conversion sources the caller has access to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesListRequest, base_url, '/{merchantId}/conversionsources', request)
        
        query_params = utils.get_query_params(operations.ContentConversionsourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConversionSourcesResponse])
                res.list_conversion_sources_response = out

        return res

    def content_conversionsources_patch(self, request: operations.ContentConversionsourcesPatchRequest, security: operations.ContentConversionsourcesPatchSecurity) -> operations.ContentConversionsourcesPatchResponse:
        r"""Updates information of an existing conversion source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesPatchRequest, base_url, '/{merchantId}/conversionsources/{conversionSourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversion_source_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentConversionsourcesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionSource])
                res.conversion_source = out

        return res

    def content_conversionsources_undelete(self, request: operations.ContentConversionsourcesUndeleteRequest, security: operations.ContentConversionsourcesUndeleteSecurity) -> operations.ContentConversionsourcesUndeleteResponse:
        r"""Re-enables an archived conversion source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentConversionsourcesUndeleteRequest, base_url, '/{merchantId}/conversionsources/{conversionSourceId}:undelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentConversionsourcesUndeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentConversionsourcesUndeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    