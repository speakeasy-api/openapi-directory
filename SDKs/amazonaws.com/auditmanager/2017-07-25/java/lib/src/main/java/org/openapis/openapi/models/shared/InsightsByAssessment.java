/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * InsightsByAssessment - &lt;p&gt;A summary of the latest analytics data for a specific active assessment.&lt;/p&gt; &lt;p&gt;This summary is a snapshot of the data that was collected on the &lt;code&gt;lastUpdated&lt;/code&gt; date. It\u2019s important to understand that the totals in &lt;code&gt;InsightsByAssessment&lt;/code&gt; are daily counts based on this date \u2014 they aren\u2019t a total sum to date. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;InsightsByAssessment&lt;/code&gt; data is eventually consistent. This means that when you read data from &lt;code&gt;InsightsByAssessment&lt;/code&gt;, the response might not instantly reflect the results of a recently completed write or update operation. If you repeat your read request after a few hours, the response returns the latest data.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you delete an assessment or change its status to inactive, &lt;code&gt;InsightsByAssessment&lt;/code&gt; includes data for that assessment as follows.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Inactive assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you changed it inactive, that evidence is included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Deleted assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you deleted it, that evidence isn't included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
 */
public class InsightsByAssessment {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assessmentControlsCountByNoncompliantEvidence")
    public Long assessmentControlsCountByNoncompliantEvidence;

    public InsightsByAssessment withAssessmentControlsCountByNoncompliantEvidence(Long assessmentControlsCountByNoncompliantEvidence) {
        this.assessmentControlsCountByNoncompliantEvidence = assessmentControlsCountByNoncompliantEvidence;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compliantEvidenceCount")
    public Long compliantEvidenceCount;

    public InsightsByAssessment withCompliantEvidenceCount(Long compliantEvidenceCount) {
        this.compliantEvidenceCount = compliantEvidenceCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inconclusiveEvidenceCount")
    public Long inconclusiveEvidenceCount;

    public InsightsByAssessment withInconclusiveEvidenceCount(Long inconclusiveEvidenceCount) {
        this.inconclusiveEvidenceCount = inconclusiveEvidenceCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdated")
    public OffsetDateTime lastUpdated;

    public InsightsByAssessment withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noncompliantEvidenceCount")
    public Long noncompliantEvidenceCount;

    public InsightsByAssessment withNoncompliantEvidenceCount(Long noncompliantEvidenceCount) {
        this.noncompliantEvidenceCount = noncompliantEvidenceCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAssessmentControlsCount")
    public Long totalAssessmentControlsCount;

    public InsightsByAssessment withTotalAssessmentControlsCount(Long totalAssessmentControlsCount) {
        this.totalAssessmentControlsCount = totalAssessmentControlsCount;
        return this;
    }
    
    public InsightsByAssessment(){}
}
