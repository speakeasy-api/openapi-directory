// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UserKnownLanguageContractProficiencyEnum string

const (
	UserKnownLanguageContractProficiencyEnumNothing      UserKnownLanguageContractProficiencyEnum = "Nothing"
	UserKnownLanguageContractProficiencyEnumBasics       UserKnownLanguageContractProficiencyEnum = "Basics"
	UserKnownLanguageContractProficiencyEnumIntermediate UserKnownLanguageContractProficiencyEnum = "Intermediate"
	UserKnownLanguageContractProficiencyEnumAdvanced     UserKnownLanguageContractProficiencyEnum = "Advanced"
	UserKnownLanguageContractProficiencyEnumNative       UserKnownLanguageContractProficiencyEnum = "Native"
)

func (e *UserKnownLanguageContractProficiencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Basics":
		fallthrough
	case "Intermediate":
		fallthrough
	case "Advanced":
		fallthrough
	case "Native":
		*e = UserKnownLanguageContractProficiencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserKnownLanguageContractProficiencyEnum: %s", s)
	}
}

type UserKnownLanguageContract struct {
	CultureCode *string                                   `json:"cultureCode,omitempty"`
	Proficiency *UserKnownLanguageContractProficiencyEnum `json:"proficiency,omitempty"`
}
