// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResponsePolicyRuleBehaviorEnum - Answer this query with a behavior rather than DNS data.
type ResponsePolicyRuleBehaviorEnum string

const (
	ResponsePolicyRuleBehaviorEnumBehaviorUnspecified  ResponsePolicyRuleBehaviorEnum = "behaviorUnspecified"
	ResponsePolicyRuleBehaviorEnumBypassResponsePolicy ResponsePolicyRuleBehaviorEnum = "bypassResponsePolicy"
)

func (e ResponsePolicyRuleBehaviorEnum) ToPointer() *ResponsePolicyRuleBehaviorEnum {
	return &e
}

func (e *ResponsePolicyRuleBehaviorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "behaviorUnspecified":
		fallthrough
	case "bypassResponsePolicy":
		*e = ResponsePolicyRuleBehaviorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponsePolicyRuleBehaviorEnum: %v", v)
	}
}

// ResponsePolicyRule - A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
type ResponsePolicyRule struct {
	// Answer this query with a behavior rather than DNS data.
	Behavior *ResponsePolicyRuleBehaviorEnum `json:"behavior,omitempty"`
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DNSName   *string                      `json:"dnsName,omitempty"`
	Kind      *string                      `json:"kind,omitempty"`
	LocalData *ResponsePolicyRuleLocalData `json:"localData,omitempty"`
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName *string `json:"ruleName,omitempty"`
}
