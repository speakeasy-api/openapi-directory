/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateServiceServerList = ["https://chat.twilio.com"] as const;

export class UpdateServiceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 */
export enum UpdateServiceUpdateServiceRequestWebhookMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_add.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelAddMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The URL of the webhook to call in response to the `on_channel_added` event`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelAddedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_destroy.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_update.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdateMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdatedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_member_add.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMemberAddMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMemberAddedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_member_remove.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMemberRemoveMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_member_removed.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMemberRemovedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_message_remove.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageRemoveMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_message_removed.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageRemovedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_message_send.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageSendMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The URL of the webhook to call in response to the `on_message_sent` event`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageSentMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_message_update.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdateMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method to use when calling the `webhooks.on_message_updated.url`.
 */
export enum UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdatedMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class UpdateServiceUpdateServiceRequest extends SpeakeasyBase {
  /**
   * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
   */
  @SpeakeasyMetadata({ data: "form, name=ConsumptionReportInterval" })
  consumptionReportInterval?: number;

  /**
   * The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultChannelCreatorRoleSid" })
  defaultChannelCreatorRoleSid?: string;

  /**
   * The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultChannelRoleSid" })
  defaultChannelRoleSid?: string;

  /**
   * The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultServiceRoleSid" })
  defaultServiceRoleSid?: string;

  /**
   * A descriptive string that you create to describe the resource. It can be up to 64 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName?: string;

  /**
   * The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
   */
  @SpeakeasyMetadata({ data: "form, name=Limits.ChannelMembers" })
  limitsChannelMembers?: number;

  /**
   * The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
   */
  @SpeakeasyMetadata({ data: "form, name=Limits.UserChannels" })
  limitsUserChannels?: number;

  /**
   * Whether to send a notification when a member is added to a channel. Can be: `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.AddedToChannel.Enabled",
  })
  notificationsAddedToChannelEnabled?: boolean;

  /**
   * The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.AddedToChannel.Template",
  })
  notificationsAddedToChannelTemplate?: string;

  /**
   * Whether to send a notification when a user is invited to a channel. Can be: `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.InvitedToChannel.Enabled",
  })
  notificationsInvitedToChannelEnabled?: boolean;

  /**
   * The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.InvitedToChannel.Template",
  })
  notificationsInvitedToChannelTemplate?: string;

  /**
   * Whether to send a notification when a new message is added to a channel. Can be: `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.NewMessage.Enabled" })
  notificationsNewMessageEnabled?: boolean;

  /**
   * The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.NewMessage.Template" })
  notificationsNewMessageTemplate?: string;

  /**
   * Whether to send a notification to a user when they are removed from a channel. Can be: `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.RemovedFromChannel.Enabled",
  })
  notificationsRemovedFromChannelEnabled?: boolean;

  /**
   * The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.RemovedFromChannel.Template",
  })
  notificationsRemovedFromChannelTemplate?: string;

  /**
   * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=PostWebhookUrl" })
  postWebhookUrl?: string;

  /**
   * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=PreWebhookUrl" })
  preWebhookUrl?: string;

  /**
   * Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReachabilityEnabled" })
  reachabilityEnabled?: boolean;

  /**
   * Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReadStatusEnabled" })
  readStatusEnabled?: boolean;

  /**
   * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
   */
  @SpeakeasyMetadata({ data: "form, name=TypingIndicatorTimeout" })
  typingIndicatorTimeout?: number;

  /**
   * The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhookFilters" })
  webhookFilters?: string[];

  /**
   * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhookMethod" })
  webhookMethod?: UpdateServiceUpdateServiceRequestWebhookMethodEnum;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_add.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelAdd.Method" })
  webhooksOnChannelAddMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelAddMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_add` event using the `webhooks.on_channel_add.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelAdd.Url" })
  webhooksOnChannelAddUrl?: string;

  /**
   * The URL of the webhook to call in response to the `on_channel_added` event`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelAdded.Method" })
  webhooksOnChannelAddedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelAddedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_added.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelAdded.Url" })
  webhooksOnChannelAddedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_destroy.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelDestroy.Method" })
  webhooksOnChannelDestroyMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_destroy` event using the `webhooks.on_channel_destroy.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelDestroy.Url" })
  webhooksOnChannelDestroyUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelDestroyed.Method" })
  webhooksOnChannelDestroyedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_destroyed.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelDestroyed.Url" })
  webhooksOnChannelDestroyedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_update.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelUpdate.Method" })
  webhooksOnChannelUpdateMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdateMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_update` event using the `webhooks.on_channel_update.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelUpdate.Url" })
  webhooksOnChannelUpdateUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelUpdated.Method" })
  webhooksOnChannelUpdatedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdatedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnChannelUpdated.Url" })
  webhooksOnChannelUpdatedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_member_add.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberAdd.Method" })
  webhooksOnMemberAddMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMemberAddMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_member_add` event using the `webhooks.on_member_add.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberAdd.Url" })
  webhooksOnMemberAddUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberAdded.Method" })
  webhooksOnMemberAddedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMemberAddedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberAdded.Url" })
  webhooksOnMemberAddedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_member_remove.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberRemove.Method" })
  webhooksOnMemberRemoveMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMemberRemoveMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_member_remove` event using the `webhooks.on_member_remove.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberRemove.Url" })
  webhooksOnMemberRemoveUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_member_removed.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberRemoved.Method" })
  webhooksOnMemberRemovedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMemberRemovedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_member_removed` event using the `webhooks.on_member_removed.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMemberRemoved.Url" })
  webhooksOnMemberRemovedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_message_remove.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageRemove.Method" })
  webhooksOnMessageRemoveMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageRemoveMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_remove` event using the `webhooks.on_message_remove.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageRemove.Url" })
  webhooksOnMessageRemoveUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_message_removed.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageRemoved.Method" })
  webhooksOnMessageRemovedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageRemovedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_removed` event using the `webhooks.on_message_removed.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageRemoved.Url" })
  webhooksOnMessageRemovedUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_message_send.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageSend.Method" })
  webhooksOnMessageSendMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageSendMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_send` event using the `webhooks.on_message_send.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageSend.Url" })
  webhooksOnMessageSendUrl?: string;

  /**
   * The URL of the webhook to call in response to the `on_message_sent` event`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageSent.Method" })
  webhooksOnMessageSentMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageSentMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_sent` event using the `webhooks.on_message_sent.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageSent.Url" })
  webhooksOnMessageSentUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_message_update.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageUpdate.Method" })
  webhooksOnMessageUpdateMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdateMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_update` event using the `webhooks.on_message_update.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageUpdate.Url" })
  webhooksOnMessageUpdateUrl?: string;

  /**
   * The HTTP method to use when calling the `webhooks.on_message_updated.url`.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageUpdated.Method" })
  webhooksOnMessageUpdatedMethod?: UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdatedMethodEnum;

  /**
   * The URL of the webhook to call in response to the `on_message_updated` event using the `webhooks.on_message_updated.method` HTTP method.
   */
  @SpeakeasyMetadata({ data: "form, name=Webhooks.OnMessageUpdated.Url" })
  webhooksOnMessageUpdatedUrl?: string;
}

export class UpdateServiceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateServiceUpdateServiceRequest;

  /**
   * The Twilio-provided string that uniquely identifies the Service resource to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;
}

export class UpdateServiceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  chatV1Service?: shared.ChatV1Service;
}
