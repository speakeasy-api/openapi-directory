/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The type of known component.
 */
export enum UpdateApplicationComponentConfigRequestBodyAppTypeEnum {
  DotNetFramework = "DotNetFramework",
  Java = "Java",
  SQLServer = "SQLServer",
  Iis = "IIS",
  Oracle = "Oracle",
  Other = "Other",
  Tomcat = "Tomcat",
  JBoss = "JBoss",
  Spring = "Spring",
  MongoDB = "Mongo DB",
  Db2 = "DB2",
  MariaDB = "Maria DB",
  MySQL = "MySQL",
  Sybase = "Sybase",
  PostgreSQLServer = "PostgreSQLServer",
  Cassandra = "Cassandra",
  IBMWebSphere = "IBM WebSphere",
  OracleWebLogic = "Oracle WebLogic",
  VisualBasic = "Visual Basic",
  Unknown = "Unknown",
  DotnetCore = "DotnetCore",
  Dotnet = "Dotnet",
}

/**
 *  Indicates whether the application component has been included for server recommendation or not.
 */
export enum UpdateApplicationComponentConfigRequestBodyInclusionStatusEnum {
  ExcludeFromAssessment = "excludeFromAssessment",
  IncludeInAssessment = "includeInAssessment",
}

/**
 *  Information about all the available strategy options for migrating and modernizing an application component.
 */
export class UpdateApplicationComponentConfigRequestBodyStrategyOption extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "isPreferred" })
  isPreferred?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "strategy" })
  strategy?: shared.StrategyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "targetDestination" })
  targetDestination?: shared.TargetDestinationEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "toolName" })
  toolName?: shared.TransformationToolNameEnum;
}

export class UpdateApplicationComponentConfigRequestBody extends SpeakeasyBase {
  /**
   * The type of known component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appType" })
  appType?: UpdateApplicationComponentConfigRequestBodyAppTypeEnum;

  /**
   *  The ID of the application component. The ID is unique within an AWS account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applicationComponentId" })
  applicationComponentId: string;

  /**
   * Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configureOnly" })
  configureOnly?: boolean;

  /**
   *  Indicates whether the application component has been included for server recommendation or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inclusionStatus" })
  inclusionStatus?: UpdateApplicationComponentConfigRequestBodyInclusionStatusEnum;

  /**
   *  Database credentials.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secretsManagerKey" })
  secretsManagerKey?: string;

  /**
   *  The list of source code configurations to update for the application component.
   */
  @SpeakeasyMetadata({ elemType: shared.SourceCode })
  @Expose({ name: "sourceCodeList" })
  @Type(() => shared.SourceCode)
  sourceCodeList?: shared.SourceCode[];

  /**
   *  Information about all the available strategy options for migrating and modernizing an application component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "strategyOption" })
  @Type(() => UpdateApplicationComponentConfigRequestBodyStrategyOption)
  strategyOption?: UpdateApplicationComponentConfigRequestBodyStrategyOption;
}

export class UpdateApplicationComponentConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateApplicationComponentConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateApplicationComponentConfigResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateApplicationComponentConfigResponse?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
