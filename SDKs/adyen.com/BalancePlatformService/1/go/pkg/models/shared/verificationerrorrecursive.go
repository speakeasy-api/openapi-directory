// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VerificationErrorRecursiveTypeEnum - The type of error.
//
//	Possible values: **invalidInput**, **dataMissing**.
type VerificationErrorRecursiveTypeEnum string

const (
	VerificationErrorRecursiveTypeEnumDataMissing   VerificationErrorRecursiveTypeEnum = "dataMissing"
	VerificationErrorRecursiveTypeEnumInvalidInput  VerificationErrorRecursiveTypeEnum = "invalidInput"
	VerificationErrorRecursiveTypeEnumPendingStatus VerificationErrorRecursiveTypeEnum = "pendingStatus"
)

func (e *VerificationErrorRecursiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dataMissing":
		fallthrough
	case "invalidInput":
		fallthrough
	case "pendingStatus":
		*e = VerificationErrorRecursiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VerificationErrorRecursiveTypeEnum: %s", s)
	}
}

type VerificationErrorRecursive struct {
	// The verification error code.
	Code *string `json:"code,omitempty"`
	// A description of the error.
	Message *string `json:"message,omitempty"`
	// Contains the actions that you can take to resolve the verification error.
	RemediatingActions []RemediatingAction `json:"remediatingActions,omitempty"`
	// The type of error.
	//
	//  Possible values: **invalidInput**, **dataMissing**.
	Type *VerificationErrorRecursiveTypeEnum `json:"type,omitempty"`
}
