/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ConnectionsRevokeRequest {
    /**
     * Application ID of the resource to return
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=application_id")
    public String applicationId;

    public ConnectionsRevokeRequest withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }
    
    /**
     * URL to redirect back to after authorization. When left empty the default configured redirect uri will be used.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=redirect_uri")
    public String redirectUri;

    public ConnectionsRevokeRequest withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }
    
    /**
     * Service ID of the resource to return
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=service_id")
    public String serviceId;

    public ConnectionsRevokeRequest withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }
    
    /**
     * An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String state;

    public ConnectionsRevokeRequest withState(String state) {
        this.state = state;
        return this;
    }
    
    public ConnectionsRevokeRequest(@JsonProperty("application_id") String applicationId, @JsonProperty("redirect_uri") String redirectUri, @JsonProperty("service_id") String serviceId, @JsonProperty("state") String state) {
        this.applicationId = applicationId;
        this.redirectUri = redirectUri;
        this.serviceId = serviceId;
        this.state = state;
  }
}
