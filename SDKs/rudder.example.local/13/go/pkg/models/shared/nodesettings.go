// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodeSettingsPolicyModeEnum - In which mode the node will apply its configuration policy. Use `default` to use the global mode.
type NodeSettingsPolicyModeEnum string

const (
	NodeSettingsPolicyModeEnumAudit   NodeSettingsPolicyModeEnum = "audit"
	NodeSettingsPolicyModeEnumEnforce NodeSettingsPolicyModeEnum = "enforce"
	NodeSettingsPolicyModeEnumDefault NodeSettingsPolicyModeEnum = "default"
)

func (e *NodeSettingsPolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "audit":
		fallthrough
	case "enforce":
		fallthrough
	case "default":
		*e = NodeSettingsPolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeSettingsPolicyModeEnum: %s", s)
	}
}

type NodeSettingsProperties struct {
	// Property name
	Name string `json:"name"`
	// Property value (can be a string or JSON object)
	Value interface{} `json:"value"`
}

// NodeSettingsStateEnum - The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.
type NodeSettingsStateEnum string

const (
	NodeSettingsStateEnumEnabled       NodeSettingsStateEnum = "enabled"
	NodeSettingsStateEnumIgnored       NodeSettingsStateEnum = "ignored"
	NodeSettingsStateEnumEmptyPolicies NodeSettingsStateEnum = "empty-policies"
	NodeSettingsStateEnumInitializing  NodeSettingsStateEnum = "initializing"
	NodeSettingsStateEnumPreparingEol  NodeSettingsStateEnum = "preparing-eol"
)

func (e *NodeSettingsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "ignored":
		fallthrough
	case "empty-policies":
		fallthrough
	case "initializing":
		fallthrough
	case "preparing-eol":
		*e = NodeSettingsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeSettingsStateEnum: %s", s)
	}
}

type NodeSettings struct {
	// Information about agent key or certificate
	AgentKey *AgentKey `json:"agentKey,omitempty"`
	// In which mode the node will apply its configuration policy. Use `default` to use the global mode.
	PolicyMode *NodeSettingsPolicyModeEnum `json:"policyMode,omitempty"`
	Properties []NodeSettingsProperties    `json:"properties,omitempty"`
	// The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.
	State *NodeSettingsStateEnum `json:"state,omitempty"`
}
