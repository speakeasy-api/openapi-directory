// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateHostXAmzTargetEnum
type CreateHostXAmzTargetEnum string

const (
	CreateHostXAmzTargetEnumComAmazonawsCodestarConnectionsCodeStarConnections20191201CreateHost CreateHostXAmzTargetEnum = "com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateHost"
)

func (e *CreateHostXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateHost":
		*e = CreateHostXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHostXAmzTargetEnum: %s", s)
	}
}

type CreateHostHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateHostXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateHostRequest struct {
	Headers CreateHostHeaders
	Request shared.CreateHostInput `request:"mediaType=application/json"`
}

type CreateHostResponse struct {
	ContentType string
	// Success
	CreateHostOutput *shared.CreateHostOutput
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
