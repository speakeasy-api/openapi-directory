"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum(str, Enum):
    r"""Common areas offer sanitizing items exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PersonalProtectionFaceMaskRequiredExceptionEnum(str, Enum):
    r"""Face mask required exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum(str, Enum):
    r"""Guest room hygiene kits available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PersonalProtectionProtectiveEquipmentAvailableExceptionEnum(str, Enum):
    r"""Protective equipment available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PersonalProtection:
    r"""Personal protection measures implemented by the hotel during COVID-19."""
    
    common_areas_offer_sanitizing_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonAreasOfferSanitizingItems'), 'exclude': lambda f: f is None }})
    r"""Hand-sanitizer and/or sanitizing wipes are offered in common areas."""  
    common_areas_offer_sanitizing_items_exception: Optional[PersonalProtectionCommonAreasOfferSanitizingItemsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonAreasOfferSanitizingItemsException'), 'exclude': lambda f: f is None }})
    r"""Common areas offer sanitizing items exception."""  
    face_mask_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('faceMaskRequired'), 'exclude': lambda f: f is None }})
    r"""Masks required on the property."""  
    face_mask_required_exception: Optional[PersonalProtectionFaceMaskRequiredExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('faceMaskRequiredException'), 'exclude': lambda f: f is None }})
    r"""Face mask required exception."""  
    guest_room_hygiene_kits_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestRoomHygieneKitsAvailable'), 'exclude': lambda f: f is None }})
    r"""In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes."""  
    guest_room_hygiene_kits_available_exception: Optional[PersonalProtectionGuestRoomHygieneKitsAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestRoomHygieneKitsAvailableException'), 'exclude': lambda f: f is None }})
    r"""Guest room hygiene kits available exception."""  
    protective_equipment_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protectiveEquipmentAvailable'), 'exclude': lambda f: f is None }})
    r"""Masks and/or gloves available for guests."""  
    protective_equipment_available_exception: Optional[PersonalProtectionProtectiveEquipmentAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protectiveEquipmentAvailableException'), 'exclude': lambda f: f is None }})
    r"""Protective equipment available exception."""  
    