"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accountaggregation as shared_accountaggregation
from ..shared import amiaggregation as shared_amiaggregation
from ..shared import awsecrcontaineraggregation as shared_awsecrcontaineraggregation
from ..shared import ec2instanceaggregation as shared_ec2instanceaggregation
from ..shared import findingtypeaggregation as shared_findingtypeaggregation
from ..shared import imagelayeraggregation as shared_imagelayeraggregation
from ..shared import lambdafunctionaggregation as shared_lambdafunctionaggregation
from ..shared import lambdalayeraggregation as shared_lambdalayeraggregation
from ..shared import listfindingaggregationsresponse as shared_listfindingaggregationsresponse
from ..shared import packageaggregation as shared_packageaggregation
from ..shared import repositoryaggregation as shared_repositoryaggregation
from ..shared import stringfilter as shared_stringfilter
from ..shared import titleaggregation as shared_titleaggregation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListFindingAggregationsRequestBodyAggregationRequest:
    r"""Contains details about an aggregation request."""
    
    account_aggregation: Optional[shared_accountaggregation.AccountAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountAggregation'), 'exclude': lambda f: f is None }})  
    ami_aggregation: Optional[shared_amiaggregation.AmiAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amiAggregation'), 'exclude': lambda f: f is None }})  
    aws_ecr_container_aggregation: Optional[shared_awsecrcontaineraggregation.AwsEcrContainerAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsEcrContainerAggregation'), 'exclude': lambda f: f is None }})  
    ec2_instance_aggregation: Optional[shared_ec2instanceaggregation.Ec2InstanceAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceAggregation'), 'exclude': lambda f: f is None }})  
    finding_type_aggregation: Optional[shared_findingtypeaggregation.FindingTypeAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingTypeAggregation'), 'exclude': lambda f: f is None }})  
    image_layer_aggregation: Optional[shared_imagelayeraggregation.ImageLayerAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageLayerAggregation'), 'exclude': lambda f: f is None }})  
    lambda_function_aggregation: Optional[shared_lambdafunctionaggregation.LambdaFunctionAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionAggregation'), 'exclude': lambda f: f is None }})  
    lambda_layer_aggregation: Optional[shared_lambdalayeraggregation.LambdaLayerAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaLayerAggregation'), 'exclude': lambda f: f is None }})  
    package_aggregation: Optional[shared_packageaggregation.PackageAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageAggregation'), 'exclude': lambda f: f is None }})  
    repository_aggregation: Optional[shared_repositoryaggregation.RepositoryAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryAggregation'), 'exclude': lambda f: f is None }})  
    title_aggregation: Optional[shared_titleaggregation.TitleAggregation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('titleAggregation'), 'exclude': lambda f: f is None }})  
    
class ListFindingAggregationsRequestBodyAggregationTypeEnum(str, Enum):
    r"""The type of the aggregation request."""
    FINDING_TYPE = 'FINDING_TYPE'
    PACKAGE = 'PACKAGE'
    TITLE = 'TITLE'
    REPOSITORY = 'REPOSITORY'
    AMI = 'AMI'
    AWS_EC2_INSTANCE = 'AWS_EC2_INSTANCE'
    AWS_ECR_CONTAINER = 'AWS_ECR_CONTAINER'
    IMAGE_LAYER = 'IMAGE_LAYER'
    ACCOUNT = 'ACCOUNT'
    AWS_LAMBDA_FUNCTION = 'AWS_LAMBDA_FUNCTION'
    LAMBDA_LAYER = 'LAMBDA_LAYER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListFindingAggregationsRequestBody:
    
    aggregation_type: ListFindingAggregationsRequestBodyAggregationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationType') }})
    r"""The type of the aggregation request."""  
    account_ids: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountIds'), 'exclude': lambda f: f is None }})
    r"""The Amazon Web Services account IDs to retrieve finding aggregation data for."""  
    aggregation_request: Optional[ListFindingAggregationsRequestBodyAggregationRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationRequest'), 'exclude': lambda f: f is None }})
    r"""Contains details about an aggregation request."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return in the response."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page."""  
    

@dataclasses.dataclass
class ListFindingAggregationsRequest:
    
    request_body: ListFindingAggregationsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListFindingAggregationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_finding_aggregations_response: Optional[shared_listfindingaggregationsresponse.ListFindingAggregationsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    