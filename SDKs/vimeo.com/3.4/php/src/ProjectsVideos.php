<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProjectsVideos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a specific video to a project
     * 
     * This method adds a single video to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectResponse
     */
	public function addVideoToProject(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/projects/{project_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a specific video to a project
     * 
     * This method adds a single video to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Response
     */
	public function addVideoToProjectAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/projects/{project_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToProjectAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a list of videos to a project
     * 
     * This method adds multiple videos to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectResponse
     */
	public function addVideosToProject(
        \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a list of videos to a project
     * 
     * This method adds multiple videos to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Response
     */
	public function addVideosToProjectAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideosToProjectAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in a project
     * 
     * This method gets all the videos that belong to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosResponse
     */
	public function getProjectVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProjectVideosRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in a project
     * 
     * This method gets all the videos that belong to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Response
     */
	public function getProjectVideosAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectVideosAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a specific video from a project
     * 
     * This method removes a single video from the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectResponse
     */
	public function removeVideoFromProject(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/projects/{project_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a specific video from a project
     * 
     * This method removes a single video from the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Response
     */
	public function removeVideoFromProjectAlt1(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/projects/{project_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromProjectAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a list of videos from a project
     * 
     * This method removed multiple videos from the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectResponse
     */
	public function removeVideosFromProject(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a list of videos from a project
     * 
     * This method removed multiple videos from the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Response
     */
	public function removeVideosFromProjectAlt1(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/projects/{project_id}/videos', \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideosFromProjectAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}