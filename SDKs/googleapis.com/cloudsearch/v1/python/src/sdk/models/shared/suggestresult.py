"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import peoplesuggestion as shared_peoplesuggestion
from ..shared import source as shared_source
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuggestResult:
    r"""One suggestion result."""
    
    people_suggestion: Optional[shared_peoplesuggestion.PeopleSuggestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peopleSuggestion'), 'exclude': lambda f: f is None }})
    r"""This field contains information about the person being suggested."""  
    query_suggestion: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('querySuggestion'), 'exclude': lambda f: f is None }})
    r"""This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion."""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Defines sources for the suggest/search APIs."""  
    suggested_query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedQuery'), 'exclude': lambda f: f is None }})
    r"""The suggested query that will be used for search, when the user clicks on the suggestion"""  
    