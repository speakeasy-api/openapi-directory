/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Pricing {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve outbound pricing for a specific dialing prefix.
   *
   * @remarks
   * Retrieves the pricing information based on the dialing prefix.
   *
   */
  retrievePrefixPricing(
    req: operations.RetrievePrefixPricingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrievePrefixPricingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrievePrefixPricingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/get-prefix-pricing/outbound/{type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrievePrefixPricingResponse =
        new operations.RetrievePrefixPricingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pricingCountriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.PricingCountriesResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePrefixPricing400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePrefixPricing400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePrefixPricing401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePrefixPricing401ApplicationJSON
              );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve outbound pricing for all countries.
   *
   * @remarks
   * Retrieves the pricing information for all countries.
   *
   */
  retrievePricingAllCountries(
    req: operations.RetrievePricingAllCountriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrievePricingAllCountriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrievePricingAllCountriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/get-full-pricing/outbound/{type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrievePricingAllCountriesResponse =
        new operations.RetrievePricingAllCountriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pricingCountriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.PricingCountriesResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePricingAllCountries400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePricingAllCountries400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePricingAllCountries401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePricingAllCountries401ApplicationJSON
              );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve outbound pricing for a specific country.
   *
   * @remarks
   * Retrieves the pricing information based on the specified country.
   *
   */
  retrievePricingCountry(
    req: operations.RetrievePricingCountryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrievePricingCountryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrievePricingCountryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/get-pricing/outbound/{type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrievePricingCountryResponse =
        new operations.RetrievePricingCountryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pricingCountryResponse = utils.objectToClass(
              httpRes?.data,
              shared.PricingCountryResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePricingCountry400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePricingCountry400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrievePricingCountry401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrievePricingCountry401ApplicationJSON
              );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
