/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The category for the health profile definition
 */
export enum HealthQuestionDefinitionResourceAttributesCategoryEnum {
  LifestyleBehaviors = "lifestyle_behaviors",
  MentalWellbeing = "mental_wellbeing",
  PreventativeCare = "preventative_care",
}

/**
 * The label, value and icon for the answer choices for the question
 */
export class HealthQuestionDefinitionResourceAttributesFormatData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "icon" })
  icon?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * The list of formats for the health profile definition
 */
export class HealthQuestionDefinitionResourceAttributesFormat extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: HealthQuestionDefinitionResourceAttributesFormatData,
  })
  @Expose({ name: "data" })
  @Type(() => HealthQuestionDefinitionResourceAttributesFormatData)
  data?: HealthQuestionDefinitionResourceAttributesFormatData[];

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * The age and gender requirement for the question to be included
 */
export class HealthQuestionDefinitionResourceAttributesRequirements extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "property" })
  property?: string;

  /**
   * Specifies if the value in property should be equal to the one in value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shouldBeEqual" })
  shouldBeEqual?: boolean;

  /**
   * Specifies if the value in property should be greater than the one in value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shouldBeGreaterThan" })
  shouldBeGreaterThan?: number;

  /**
   * Specifies if the value in property should be less than the one in value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shouldBeLessThan" })
  shouldBeLessThan?: number;

  /**
   * The value to be compared with the one in property, based on shouldBeEqual, shouldBeGreaterThan, or shouldBeLessThan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class HealthQuestionDefinitionResourceAttributes extends SpeakeasyBase {
  /**
   * The category for the health profile definition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: HealthQuestionDefinitionResourceAttributesCategoryEnum;

  /**
   * The list of formats for the health profile definition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  @Type(() => HealthQuestionDefinitionResourceAttributesFormat)
  format?: HealthQuestionDefinitionResourceAttributesFormat;

  /**
   * The lsit of age and gender requirements for the question to be included
   */
  @SpeakeasyMetadata({
    elemType: HealthQuestionDefinitionResourceAttributesRequirements,
  })
  @Expose({ name: "requirements" })
  @Type(() => HealthQuestionDefinitionResourceAttributesRequirements)
  requirements?: HealthQuestionDefinitionResourceAttributesRequirements[];

  /**
   * The question text which corresponds to the answer choices
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;
}

export class HealthQuestionDefinitionResourceLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class HealthQuestionDefinitionResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => HealthQuestionDefinitionResourceAttributes)
  attributes?: HealthQuestionDefinitionResourceAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthQuestionDefinitionResourceLinks)
  links?: HealthQuestionDefinitionResourceLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  relationships?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
