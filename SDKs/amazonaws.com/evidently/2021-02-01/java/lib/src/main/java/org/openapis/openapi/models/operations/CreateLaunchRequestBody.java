/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateLaunchRequestBody {
    /**
     * An optional description for the launch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CreateLaunchRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * An array of structures that contains the feature and variations that are to be used for the launch.
     */
    @JsonProperty("groups")
    public org.openapis.openapi.models.shared.LaunchGroupConfig[] groups;
    public CreateLaunchRequestBody withGroups(org.openapis.openapi.models.shared.LaunchGroupConfig[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * An array of structures that define the metrics that will be used to monitor the launch performance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricMonitors")
    public org.openapis.openapi.models.shared.MetricMonitorConfig[] metricMonitors;
    public CreateLaunchRequestBody withMetricMonitors(org.openapis.openapi.models.shared.MetricMonitorConfig[] metricMonitors) {
        this.metricMonitors = metricMonitors;
        return this;
    }
    
    /**
     * The name for the new launch.
     */
    @JsonProperty("name")
    public String name;
    public CreateLaunchRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and &lt;code&gt;randomizationSalt&lt;/code&gt;. If you omit &lt;code&gt;randomizationSalt&lt;/code&gt;, Evidently uses the launch name as the &lt;code&gt;randomizationSalt&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("randomizationSalt")
    public String randomizationSalt;
    public CreateLaunchRequestBody withRandomizationSalt(String randomizationSalt) {
        this.randomizationSalt = randomizationSalt;
        return this;
    }
    
    /**
     * An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduledSplitsConfig")
    public CreateLaunchRequestBodyScheduledSplitsConfig scheduledSplitsConfig;
    public CreateLaunchRequestBody withScheduledSplitsConfig(CreateLaunchRequestBodyScheduledSplitsConfig scheduledSplitsConfig) {
        this.scheduledSplitsConfig = scheduledSplitsConfig;
        return this;
    }
    
    /**
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the launch.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a launch.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"&gt;Tagging Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;
    public CreateLaunchRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
}
