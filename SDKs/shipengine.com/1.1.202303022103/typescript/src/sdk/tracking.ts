/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * [Track packages](https://www.shipengine.com/docs/tracking/) across any of our 20+ supported carrier accounts and create tracking events to keep your customers up-to-date. Easily integrate real-time tracking information for shipments into your app, email, or SMS.
 *
 * @remarks
 *
 *
 * @see {@link https://www.shipengine.com/docs/tracking/} - Learn how to use ShipEngine to track any package with a carrier and a tracking number
 */
export class Tracking {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Tracking Information
   *
   * @remarks
   * Retrieve package tracking information
   */
  getTrackingLog(
    req: operations.GetTrackingLogRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackingLogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackingLogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/tracking";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackingLogResponse =
        new operations.GetTrackingLogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTrackingLogResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.GetTrackingLogResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start Tracking a Package
   *
   * @remarks
   * Allows you to subscribe to tracking updates for a package. You specify the carrier_code and tracking_number of the package,
   * and receive notifications via webhooks whenever the shipping status changes.
   *
   */
  startTracking(
    req: operations.StartTrackingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StartTrackingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StartTrackingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/tracking/start";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StartTrackingResponse =
        new operations.StartTrackingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.emptyResponseBody = JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.emptyResponseBody = JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stop Tracking a Package
   *
   * @remarks
   * Unsubscribe from tracking updates for a package.
   */
  stopTracking(
    req: operations.StopTrackingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopTrackingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopTrackingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/tracking/stop";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopTrackingResponse =
        new operations.StopTrackingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.emptyResponseBody = JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.emptyResponseBody = JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }
}
