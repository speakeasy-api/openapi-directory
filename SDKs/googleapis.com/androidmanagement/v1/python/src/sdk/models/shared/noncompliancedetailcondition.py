"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NonComplianceDetailConditionNonComplianceReasonEnum(str, Enum):
    r"""The reason the device is not in compliance with the setting. If not set, then this condition matches any reason."""
    NON_COMPLIANCE_REASON_UNSPECIFIED = 'NON_COMPLIANCE_REASON_UNSPECIFIED'
    API_LEVEL = 'API_LEVEL'
    MANAGEMENT_MODE = 'MANAGEMENT_MODE'
    USER_ACTION = 'USER_ACTION'
    INVALID_VALUE = 'INVALID_VALUE'
    APP_NOT_INSTALLED = 'APP_NOT_INSTALLED'
    UNSUPPORTED = 'UNSUPPORTED'
    APP_INSTALLED = 'APP_INSTALLED'
    PENDING = 'PENDING'
    APP_INCOMPATIBLE = 'APP_INCOMPATIBLE'
    APP_NOT_UPDATED = 'APP_NOT_UPDATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NonComplianceDetailCondition:
    r"""A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields."""
    
    non_compliance_reason: Optional[NonComplianceDetailConditionNonComplianceReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonComplianceReason'), 'exclude': lambda f: f is None }})
    r"""The reason the device is not in compliance with the setting. If not set, then this condition matches any reason."""  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})
    r"""The package name of the app that's out of compliance. If not set, then this condition matches any package name."""  
    setting_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settingName'), 'exclude': lambda f: f is None }})
    r"""The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name."""  
    