<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Drives 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteResponse
     */
	public function driveDrivesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives/{driveId}', \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a shared drive's metadata by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetResponse
     */
	public function driveDrivesGet(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives/{driveId}', \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->drive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Drive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Hides a shared drive from the default view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideResponse
     */
	public function driveDrivesHide(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives/{driveId}/hide', \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesHideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->drive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Drive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new shared drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertResponse
     */
	public function driveDrivesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "drive", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->drive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Drive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the user's shared drives.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListResponse
     */
	public function driveDrivesList(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->driveList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DriveList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores a shared drive to the default view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideResponse
     */
	public function driveDrivesUnhide(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives/{driveId}/unhide', \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUnhideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->drive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Drive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the metadata for a shared drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateResponse
     */
	public function driveDrivesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/drives/{driveId}', \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "drive", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveDrivesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->drive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Drive', 'json');
            }
        }

        return $response;
    }
}