"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listoutgoingtypedlinksresponse as shared_listoutgoingtypedlinksresponse
from ..shared import typedlinkattributerange as shared_typedlinkattributerange
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListOutgoingTypedLinksRequestBodyConsistencyLevelEnum(str, Enum):
    r"""The consistency level to execute the request at."""
    SERIALIZABLE = 'SERIALIZABLE'
    EVENTUAL = 'EVENTUAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListOutgoingTypedLinksRequestBodyFilterTypedLink:
    r"""Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link."""
    
    schema_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaArn'), 'exclude': lambda f: f is None }})  
    typed_link_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypedLinkName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListOutgoingTypedLinksRequestBodyObjectReference:
    r"""The reference that identifies an object."""
    
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Selector'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListOutgoingTypedLinksRequestBody:
    
    object_reference: ListOutgoingTypedLinksRequestBodyObjectReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectReference') }})
    r"""The reference that identifies an object."""  
    consistency_level: Optional[ListOutgoingTypedLinksRequestBodyConsistencyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsistencyLevel'), 'exclude': lambda f: f is None }})
    r"""The consistency level to execute the request at."""  
    filter_attribute_ranges: Optional[list[shared_typedlinkattributerange.TypedLinkAttributeRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilterAttributeRanges'), 'exclude': lambda f: f is None }})
    r"""Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range."""  
    filter_typed_link: Optional[ListOutgoingTypedLinksRequestBodyFilterTypedLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilterTypedLink'), 'exclude': lambda f: f is None }})
    r"""Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to retrieve."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""The pagination token."""  
    

@dataclasses.dataclass
class ListOutgoingTypedLinksRequest:
    
    request_body: ListOutgoingTypedLinksRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_data_partition: str = dataclasses.field(metadata={'header': { 'field_name': 'x-amz-data-partition', 'style': 'simple', 'explode': False }})
    r"""The Amazon Resource Name (ARN) of the directory where you want to list the typed links."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListOutgoingTypedLinksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    directory_not_enabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DirectoryNotEnabledException"""  
    facet_validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FacetValidationException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArnException"""  
    invalid_next_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidNextTokenException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    list_outgoing_typed_links_response: Optional[shared_listoutgoingtypedlinksresponse.ListOutgoingTypedLinksResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    retryable_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RetryableConflictException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    