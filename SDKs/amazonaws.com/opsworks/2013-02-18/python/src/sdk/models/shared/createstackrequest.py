"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chefconfiguration as shared_chefconfiguration
from ..shared import rootdevicetype_enum as shared_rootdevicetype_enum
from ..shared import source as shared_source
from ..shared import stackconfigurationmanager as shared_stackconfigurationmanager
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateStackRequest:
    
    default_instance_profile_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultInstanceProfileArn') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region') }})  
    service_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRoleArn') }})  
    agent_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgentVersion'), 'exclude': lambda f: f is None }})  
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    chef_configuration: Optional[shared_chefconfiguration.ChefConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChefConfiguration'), 'exclude': lambda f: f is None }})  
    configuration_manager: Optional[shared_stackconfigurationmanager.StackConfigurationManager] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationManager'), 'exclude': lambda f: f is None }})  
    custom_cookbooks_source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomCookbooksSource'), 'exclude': lambda f: f is None }})  
    custom_json: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomJson'), 'exclude': lambda f: f is None }})  
    default_availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultAvailabilityZone'), 'exclude': lambda f: f is None }})  
    default_os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultOs'), 'exclude': lambda f: f is None }})  
    default_root_device_type: Optional[shared_rootdevicetype_enum.RootDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultRootDeviceType'), 'exclude': lambda f: f is None }})  
    default_ssh_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultSshKeyName'), 'exclude': lambda f: f is None }})  
    default_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultSubnetId'), 'exclude': lambda f: f is None }})  
    hostname_theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostnameTheme'), 'exclude': lambda f: f is None }})  
    use_custom_cookbooks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseCustomCookbooks'), 'exclude': lambda f: f is None }})  
    use_opsworks_security_groups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseOpsworksSecurityGroups'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    