/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MySqlReplicaConfiguration - Read-replica configuration specific to MySQL databases.
 */
public class MySqlReplicaConfiguration {
    /**
     * PEM representation of the trusted CA's x509 certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caCertificate")
    public String caCertificate;

    public MySqlReplicaConfiguration withCaCertificate(String caCertificate) {
        this.caCertificate = caCertificate;
        return this;
    }
    
    /**
     * PEM representation of the replica's x509 certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificate")
    public String clientCertificate;

    public MySqlReplicaConfiguration withClientCertificate(String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }
    
    /**
     * PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientKey")
    public String clientKey;

    public MySqlReplicaConfiguration withClientKey(String clientKey) {
        this.clientKey = clientKey;
        return this;
    }
    
    /**
     * Seconds to wait between connect retries. MySQL's default is 60 seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectRetryInterval")
    public Integer connectRetryInterval;

    public MySqlReplicaConfiguration withConnectRetryInterval(Integer connectRetryInterval) {
        this.connectRetryInterval = connectRetryInterval;
        return this;
    }
    
    /**
     * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dumpFilePath")
    public String dumpFilePath;

    public MySqlReplicaConfiguration withDumpFilePath(String dumpFilePath) {
        this.dumpFilePath = dumpFilePath;
        return this;
    }
    
    /**
     * This is always `sql#mysqlReplicaConfiguration`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public MySqlReplicaConfiguration withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Interval in milliseconds between replication heartbeats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masterHeartbeatPeriod")
    public String masterHeartbeatPeriod;

    public MySqlReplicaConfiguration withMasterHeartbeatPeriod(String masterHeartbeatPeriod) {
        this.masterHeartbeatPeriod = masterHeartbeatPeriod;
        return this;
    }
    
    /**
     * The password for the replication connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public MySqlReplicaConfiguration withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * A list of permissible ciphers to use for SSL encryption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslCipher")
    public String sslCipher;

    public MySqlReplicaConfiguration withSslCipher(String sslCipher) {
        this.sslCipher = sslCipher;
        return this;
    }
    
    /**
     * The username for the replication connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public MySqlReplicaConfiguration withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifyServerCertificate")
    public Boolean verifyServerCertificate;

    public MySqlReplicaConfiguration withVerifyServerCertificate(Boolean verifyServerCertificate) {
        this.verifyServerCertificate = verifyServerCertificate;
        return this;
    }
    
    public MySqlReplicaConfiguration(){}
}
