/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Services {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Services(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete Allocation
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1ServicesAllocationsIdResponse deleteSetupV1ServicesAllocationsId(org.openapis.openapi.models.operations.DeleteSetupV1ServicesAllocationsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1ServicesAllocationsIdPathParams.class, baseUrl, "/setup/v1/services/allocations/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1ServicesAllocationsIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1ServicesAllocationsIdResponse() {{
            serviceAllocationViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationViewModel.class);
                res.serviceAllocationViewModel = out;
            }
        }

        return res;
    }

    /**
     * Delete Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1ServicesBlockIdResponse deleteSetupV1ServicesBlockId(org.openapis.openapi.models.operations.DeleteSetupV1ServicesBlockIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1ServicesBlockIdPathParams.class, baseUrl, "/setup/v1/services/block/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1ServicesBlockIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1ServicesBlockIdResponse() {{
            resourceBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ResourceBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ResourceBlockViewModel.class);
                res.resourceBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Delete Service Links
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; service links from the calendar specified. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1ServicesCalendarIdResponse deleteSetupV1ServicesCalendarId(org.openapis.openapi.models.operations.DeleteSetupV1ServicesCalendarIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1ServicesCalendarIdPathParams.class, baseUrl, "/setup/v1/services/calendar/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1ServicesCalendarIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1ServicesCalendarIdResponse() {{
            serviceCalendarViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceCalendarViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceCalendarViewModel.class);
                res.serviceCalendarViewModel = out;
            }
        }

        return res;
    }

    /**
     * Delete Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required. The service is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup\u200b/v1\u200b/services\u200b/{id}\u200b/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdResponse deleteSetupV1ServicesId(org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdPathParams.class, baseUrl, "/setup/v1/services/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * Delete Service Image
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded service image. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdDeleteimageResponse deleteSetupV1ServicesIdDeleteimage(org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdDeleteimageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdDeleteimagePathParams.class, baseUrl, "/setup/v1/services/{id}/deleteimage", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdDeleteimageResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1ServicesIdDeleteimageResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesResponse getSetupV1Services(org.openapis.openapi.models.operations.GetSetupV1ServicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setup/v1/services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1ServicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesResponse() {{
            serviceListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceListViewModel.class);
                res.serviceListViewModel = out;
            }
        }

        return res;
    }

    /**
     * Get Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Allocation&lt;/b&gt;. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesAllocationsIdResponse getSetupV1ServicesAllocationsId(org.openapis.openapi.models.operations.GetSetupV1ServicesAllocationsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesAllocationsIdPathParams.class, baseUrl, "/setup/v1/services/allocations/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesAllocationsIdResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesAllocationsIdResponse() {{
            serviceAllocationViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationViewModel.class);
                res.serviceAllocationViewModel = out;
            }
        }

        return res;
    }

    /**
     * Get Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Block&lt;/b&gt;. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesBlocksIdResponse getSetupV1ServicesBlocksId(org.openapis.openapi.models.operations.GetSetupV1ServicesBlocksIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesBlocksIdPathParams.class, baseUrl, "/setup/v1/services/blocks/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesBlocksIdResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesBlocksIdResponse() {{
            resourceBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ResourceBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ResourceBlockViewModel.class);
                res.resourceBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Get Service
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id's by using the &lt;i&gt;GET /setup/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdResponse getSetupV1ServicesId(org.openapis.openapi.models.operations.GetSetupV1ServicesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdPathParams.class, baseUrl, "/setup/v1/services/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Service Allocations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; for a specified service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt; where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.&lt;/p&gt;
     * &lt;p&gt;The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsResponse getSetupV1ServicesIdAllocations(org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsPathParams.class, baseUrl, "/setup/v1/services/{id}/allocations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdAllocationsResponse() {{
            serviceAllocationListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationListViewModel.class);
                res.serviceAllocationListViewModel = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get Weekly Availability
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Weekly Service Availability&lt;/b&gt; for an appointment service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Weekly availability is returned for services where the Type = 1. For event type services, where service Type = 2, refer to the &lt;i&gt;GET \u200b/setup\u200b/v1\u200b/services\u200b/{id}\u200b/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdAvailabilityResponse getSetupV1ServicesIdAvailability(org.openapis.openapi.models.operations.GetSetupV1ServicesIdAvailabilityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdAvailabilityPathParams.class, baseUrl, "/setup/v1/services/{id}/availability", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdAvailabilityResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdAvailabilityResponse() {{
            serviceAvailabilityViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAvailabilityViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAvailabilityViewModel.class);
                res.serviceAvailabilityViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Service Blocks
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Service Blocks&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksResponse getSetupV1ServicesIdBlocks(org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksPathParams.class, baseUrl, "/setup/v1/services/{id}/blocks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdBlocksResponse() {{
            serviceBlockListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceBlockListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceBlockListViewModel.class);
                res.serviceBlockListViewModel = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get Linked Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get the Linked Calendar&lt;/b&gt; for the service requested. A valid &lt;b&gt;service id&lt;/b&gt; is required. A service can only be linked to one calendar in a location.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarResponse getSetupV1ServicesIdCalendar(org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarPathParams.class, baseUrl, "/setup/v1/services/{id}/calendar", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdCalendarResponse() {{
            serviceCalendarViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceCalendarViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceCalendarViewModel.class);
                res.serviceCalendarViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Resources for Service
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources&lt;/b&gt; that provide the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesResponse getSetupV1ServicesIdResources(org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesPathParams.class, baseUrl, "/setup/v1/services/{id}/resources", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesResponse res = new org.openapis.openapi.models.operations.GetSetupV1ServicesIdResourcesResponse() {{
            resourceListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ResourceListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ResourceListViewModel.class);
                res.resourceListViewModel = out;
            }
        }

        return res;
    }

    /**
     * Create Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.&lt;/p&gt;
     * &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Duration&lt;/b&gt;&lt;/p&gt;
     * &lt;p&gt;The service &lt;b&gt;Type&lt;/b&gt; is either, &lt;b&gt;1 = Appointment&lt;/b&gt; or &lt;b&gt;2 = Event&lt;/b&gt;. Default is 1 if not specified.&lt;/p&gt;
     * &lt;p&gt;For type = 1, Appointments - Create an availability entry for each weekday to provide the service for. &lt;b&gt;All days of the week must be provided when adding service availability.&lt;/b&gt; Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.&lt;/p&gt;
     * &lt;p&gt;We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: &lt;i&gt;POST \u200b/setup\u200b/v1\u200b/services\u200b/{id}\u200b/block&lt;/i&gt;.&lt;/p&gt;
     * &lt;p&gt;For type = 2, Events - Create service allocations for their availability. Refer to the: &lt;i&gt;POST /setup\u200b/v1\u200b/services\u200b/{id}\u200b/allocations&lt;/i&gt; to set up service allocations for the event.&lt;/p&gt;
     * &lt;p&gt;Options are available for customer selected durations, for details: &lt;a href="https://docs.onsched.com/docs/services-overview#variable-duration"&gt;Variable Duration Overview&lt;/a&gt;&lt;/p&gt;
     * &lt;p&gt;Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: &lt;a href="https://docs.onsched.com/docs/service-max-capacity"&gt;Service Limits Overview&lt;/a&gt;&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesResponse postSetupV1Services(org.openapis.openapi.models.operations.PostSetupV1ServicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setup/v1/services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * Link Service to Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link a Service&lt;/b&gt; to a calendar. &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesCalendarResponse postSetupV1ServicesCalendar(org.openapis.openapi.models.operations.PostSetupV1ServicesCalendarRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setup/v1/services/calendar");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesCalendarResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesCalendarResponse() {{
            serviceCalendarViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceCalendarViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceCalendarViewModel.class);
                res.serviceCalendarViewModel = out;
            }
        }

        return res;
    }

    /**
     * Create Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a service allocation for a service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt;. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.&lt;/p&gt;
     * &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Service allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeat object: (repeats = true)&lt;/b&gt;
     * &lt;/p&gt;
     * &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;
     * &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of \u201c1\u201d repeats every day, and an interval value of \u201c3\u201d is every 3rd day.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;\u201cW\u201d&lt;/b&gt;. You must specify the &lt;b&gt;\u201cweekdays\u201d&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of \u201c1\u201d, and an entry of weekdays = \u201c24\u201d, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;\u201cM\u201d&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay=\u201915\u2019 this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses \u201cday of the week and week of the month\u201d scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=\u201dM\u201d and monthDay=\u201d43\u201d.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;
     * &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsResponse postSetupV1ServicesIdAllocations(org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsPathParams.class, baseUrl, "/setup/v1/services/{id}/allocations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsResponse() {{
            serviceAllocationViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationViewModel.class);
                res.serviceAllocationViewModel = out;
            }
        }

        return res;
    }

    /**
     * Create Allocations Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; bulk service allocations. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: &lt;a href="POST \u200b/setup\u200b/v1\u200b/services\u200b/{id}\u200b/allocations"&gt;Post Service Allocation&lt;/a&gt;&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsBulkResponse postSetupV1ServicesIdAllocationsBulk(org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsBulkRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsBulkPathParams.class, baseUrl, "/setup/v1/services/{id}/allocations/bulk", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsBulkResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesIdAllocationsBulkResponse() {{
            serviceAllocationViewModels = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationViewModel[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationViewModel[].class);
                res.serviceAllocationViewModels = out;
            }
        }

        return res;
    }

    /**
     * Create Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Service Block. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;
     * &lt;p&gt;Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.&lt;/p&gt;
     * &lt;p&gt;Service blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeat object: (repeats = true)&lt;/b&gt;
     * &lt;/p&gt;
     * &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;
     * &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of \u201c1\u201d repeats every day, and an interval value of \u201c3\u201d is every 3rd day.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;\u201cW\u201d&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of \u201c1\u201d, and an entry of weekdays = \u201c24\u201d, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;\u201cM\u201d&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay=\u201915\u2019 this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses \u201cday of the week and week of the month\u201d scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=\u201dM\u201d and monthDay=\u201d43\u201d.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;
     * &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesIdBlockResponse postSetupV1ServicesIdBlock(org.openapis.openapi.models.operations.PostSetupV1ServicesIdBlockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSetupV1ServicesIdBlockPathParams.class, baseUrl, "/setup/v1/services/{id}/block", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesIdBlockResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesIdBlockResponse() {{
            serviceBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceBlockViewModel.class);
                res.serviceBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Upload Service Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to the service. A valid &lt;b&gt;service id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1ServicesIdUploadimageResponse postSetupV1ServicesIdUploadimage(org.openapis.openapi.models.operations.PostSetupV1ServicesIdUploadimageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSetupV1ServicesIdUploadimagePathParams.class, baseUrl, "/setup/v1/services/{id}/uploadimage", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1ServicesIdUploadimageResponse res = new org.openapis.openapi.models.operations.PostSetupV1ServicesIdUploadimageResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/services/{id}/allocations&lt;/i&gt; endpoint for fields names and details.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1ServicesAllocationsIdResponse putSetupV1ServicesAllocationsId(org.openapis.openapi.models.operations.PutSetupV1ServicesAllocationsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1ServicesAllocationsIdPathParams.class, baseUrl, "/setup/v1/services/allocations/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1ServicesAllocationsIdResponse res = new org.openapis.openapi.models.operations.PutSetupV1ServicesAllocationsIdResponse() {{
            serviceAllocationViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAllocationViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAllocationViewModel.class);
                res.serviceAllocationViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1ServicesBlockIdResponse putSetupV1ServicesBlockId(org.openapis.openapi.models.operations.PutSetupV1ServicesBlockIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1ServicesBlockIdPathParams.class, baseUrl, "/setup/v1/services/block/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1ServicesBlockIdResponse res = new org.openapis.openapi.models.operations.PutSetupV1ServicesBlockIdResponse() {{
            serviceBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceBlockViewModel.class);
                res.serviceBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1ServicesIdResponse putSetupV1ServicesId(org.openapis.openapi.models.operations.PutSetupV1ServicesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1ServicesIdPathParams.class, baseUrl, "/setup/v1/services/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1ServicesIdResponse res = new org.openapis.openapi.models.operations.PutSetupV1ServicesIdResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Weekly Availability
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; service weekly availability. A valid &lt;b&gt;service id&lt;/b&gt; is required. The availability day entries are created when a service object is created.&lt;/p&gt;
     * &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;
     * &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1ServicesIdAvailabilityResponse putSetupV1ServicesIdAvailability(org.openapis.openapi.models.operations.PutSetupV1ServicesIdAvailabilityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1ServicesIdAvailabilityPathParams.class, baseUrl, "/setup/v1/services/{id}/availability", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1ServicesIdAvailabilityResponse res = new org.openapis.openapi.models.operations.PutSetupV1ServicesIdAvailabilityResponse() {{
            serviceAvailabilityViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceAvailabilityViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceAvailabilityViewModel.class);
                res.serviceAvailabilityViewModel = out;
            }
        }

        return res;
    }

    /**
     * Recover Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1ServicesIdRecoverResponse putSetupV1ServicesIdRecover(org.openapis.openapi.models.operations.PutSetupV1ServicesIdRecoverRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1ServicesIdRecoverPathParams.class, baseUrl, "/setup/v1/services/{id}/recover", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1ServicesIdRecoverResponse res = new org.openapis.openapi.models.operations.PutSetupV1ServicesIdRecoverResponse() {{
            serviceViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceViewModel.class);
                res.serviceViewModel = out;
            }
        }

        return res;
    }
}