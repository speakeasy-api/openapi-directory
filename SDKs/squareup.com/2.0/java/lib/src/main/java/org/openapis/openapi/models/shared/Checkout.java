/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Checkout - Square Checkout lets merchants accept online payments for supported
 * payment types using a checkout workflow hosted on squareup.com.
 */
public class Checkout {
    /**
     * Additional recipients (other than the merchant) receiving a portion of this checkout.
     * For example, fees assessed on the purchase by a third party integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_recipients")
    public AdditionalRecipient[] additionalRecipients;
    public Checkout withAdditionalRecipients(AdditionalRecipient[] additionalRecipients) {
        this.additionalRecipients = additionalRecipients;
        return this;
    }
    
    /**
     * If `true`, Square Checkout will collect shipping information on your
     * behalf and store that information with the transaction information in your
     * Square Dashboard.
     * 
     * Default: `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ask_for_shipping_address")
    public Boolean askForShippingAddress;
    public Checkout withAskForShippingAddress(Boolean askForShippingAddress) {
        this.askForShippingAddress = askForShippingAddress;
        return this;
    }
    
    /**
     * The URL that the buyer's browser should be redirected to after the
     * checkout is completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout_page_url")
    public String checkoutPageUrl;
    public Checkout withCheckoutPageUrl(String checkoutPageUrl) {
        this.checkoutPageUrl = checkoutPageUrl;
        return this;
    }
    
    /**
     * The time when the checkout was created, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Checkout withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * ID generated by Square Checkout when a new checkout is requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Checkout withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The email address to display on the Square Checkout confirmation page
     * and confirmation email that the buyer can use to contact the merchant.
     * 
     * If this value is not set, the confirmation page and email will display the
     * primary email address associated with the merchant's Square account.
     * 
     * Default: none; only exists if explicitly set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_support_email")
    public String merchantSupportEmail;
    public Checkout withMerchantSupportEmail(String merchantSupportEmail) {
        this.merchantSupportEmail = merchantSupportEmail;
        return this;
    }
    
    /**
     * Contains all information related to a single order to process with Square,
     * including line items that specify the products to purchase. `Order` objects also
     * include information about any associated tenders, refunds, and returns.
     * 
     * All Connect V2 Transactions have all been converted to Orders including all associated
     * itemization data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    public Order order;
    public Checkout withOrder(Order order) {
        this.order = order;
        return this;
    }
    
    /**
     * If provided, the buyer's email is pre-populated on the checkout page
     * as an editable text field.
     * 
     * Default: none; only exists if explicitly set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pre_populate_buyer_email")
    public String prePopulateBuyerEmail;
    public Checkout withPrePopulateBuyerEmail(String prePopulateBuyerEmail) {
        this.prePopulateBuyerEmail = prePopulateBuyerEmail;
        return this;
    }
    
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pre_populate_shipping_address")
    public Address prePopulateShippingAddress;
    public Checkout withPrePopulateShippingAddress(Address prePopulateShippingAddress) {
        this.prePopulateShippingAddress = prePopulateShippingAddress;
        return this;
    }
    
    /**
     * The URL to redirect to after checkout is completed with `checkoutId`,
     * Square's `orderId`, `transactionId`, and `referenceId` appended as URL
     * parameters. For example, if the provided redirect_url is
     * `http://www.example.com/order-complete`, a successful transaction redirects
     * the customer to:
     * 
     * &lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId=xxxxxx&amp;amp;orderId=xxxxxx&amp;amp;referenceId=xxxxxx&amp;amp;transactionId=xxxxxx&lt;/code&gt;&lt;/pre&gt;
     * 
     * If you do not provide a redirect URL, Square Checkout will display an order
     * confirmation page on your behalf; however Square strongly recommends that
     * you provide a redirect URL so you can verify the transaction results and
     * finalize the order through your existing/normal confirmation workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    public String redirectUrl;
    public Checkout withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
}
