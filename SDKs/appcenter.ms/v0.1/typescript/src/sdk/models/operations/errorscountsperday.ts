/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ErrorsCountsPerDaySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Type of error (handled vs unhandled), excluding All
 */
export enum ErrorsCountsPerDayErrorTypeEnum {
  UnhandledError = "unhandledError",
  HandledError = "handledError",
}

export class ErrorsCountsPerDayRequest extends SpeakeasyBase {
  /**
   * app build
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=app_build",
  })
  appBuild?: string;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * Last date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=end;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  end?: Date;

  /**
   * Type of error (handled vs unhandled), excluding All
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=errorType",
  })
  errorType?: ErrorsCountsPerDayErrorTypeEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * Start date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=start;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  start: Date;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=version",
  })
  version?: string;
}

export enum ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ErrorsCountsPerDayDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ErrorsCountsPerDayDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason
 */
export class ErrorsCountsPerDayDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorsCountsPerDayDefaultApplicationJSONError)
  error: ErrorsCountsPerDayDefaultApplicationJSONError;
}

export class ErrorsCountsPerDay200ApplicationJSONErrors extends SpeakeasyBase {
  /**
   * count of the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * the ISO 8601 datetime
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datetime" })
  datetime?: string;
}

/**
 * Count of crashes or errors by day in the time range, and total over the entire time range.
 */
export class ErrorsCountsPerDay200ApplicationJSON extends SpeakeasyBase {
  /**
   * total error count
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * the total error count for day
   */
  @SpeakeasyMetadata({ elemType: ErrorsCountsPerDay200ApplicationJSONErrors })
  @Expose({ name: "errors" })
  @Type(() => ErrorsCountsPerDay200ApplicationJSONErrors)
  errors?: ErrorsCountsPerDay200ApplicationJSONErrors[];
}

export class ErrorsCountsPerDayResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Count of crashes or errors by day in the time range, and total over the entire time range.
   */
  @SpeakeasyMetadata()
  errorsCountsPerDay200ApplicationJSONObject?: ErrorsCountsPerDay200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  errorsCountsPerDayDefaultApplicationJSONObject?: ErrorsCountsPerDayDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
