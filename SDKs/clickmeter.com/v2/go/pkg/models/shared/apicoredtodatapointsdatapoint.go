// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APICoreDtoDatapointsDatapointStatusEnum string

const (
	APICoreDtoDatapointsDatapointStatusEnumActive  APICoreDtoDatapointsDatapointStatusEnum = "Active"
	APICoreDtoDatapointsDatapointStatusEnumPaused  APICoreDtoDatapointsDatapointStatusEnum = "Paused"
	APICoreDtoDatapointsDatapointStatusEnumAbuse   APICoreDtoDatapointsDatapointStatusEnum = "Abuse"
	APICoreDtoDatapointsDatapointStatusEnumDeleted APICoreDtoDatapointsDatapointStatusEnum = "Deleted"
)

func (e APICoreDtoDatapointsDatapointStatusEnum) ToPointer() *APICoreDtoDatapointsDatapointStatusEnum {
	return &e
}

func (e *APICoreDtoDatapointsDatapointStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Paused":
		fallthrough
	case "Abuse":
		fallthrough
	case "Deleted":
		*e = APICoreDtoDatapointsDatapointStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoDatapointsDatapointStatusEnum: %v", v)
	}
}

type APICoreDtoDatapointsDatapointTypeEnum string

const (
	APICoreDtoDatapointsDatapointTypeEnumTrackingLink  APICoreDtoDatapointsDatapointTypeEnum = "TrackingLink"
	APICoreDtoDatapointsDatapointTypeEnumTrackingPixel APICoreDtoDatapointsDatapointTypeEnum = "TrackingPixel"
)

func (e APICoreDtoDatapointsDatapointTypeEnum) ToPointer() *APICoreDtoDatapointsDatapointTypeEnum {
	return &e
}

func (e *APICoreDtoDatapointsDatapointTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TrackingLink":
		fallthrough
	case "TrackingPixel":
		*e = APICoreDtoDatapointsDatapointTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoDatapointsDatapointTypeEnum: %v", v)
	}
}

// APICoreDtoDatapointsDatapoint - The body of the datapoint
type APICoreDtoDatapointsDatapoint struct {
	//  (A date in "YmdHis" format)
	CreationDate         *string                                     `json:"creationDate,omitempty" form:"name=creationDate"`
	EncodeIP             *bool                                       `json:"encodeIp,omitempty" form:"name=encodeIp"`
	FifthConversionID    *int64                                      `json:"fifthConversionId,omitempty" form:"name=fifthConversionId"`
	FifthConversionName  *string                                     `json:"fifthConversionName,omitempty" form:"name=fifthConversionName"`
	FirstConversionID    *int64                                      `json:"firstConversionId,omitempty" form:"name=firstConversionId"`
	FirstConversionName  *string                                     `json:"firstConversionName,omitempty" form:"name=firstConversionName"`
	FourthConversionID   *int64                                      `json:"fourthConversionId,omitempty" form:"name=fourthConversionId"`
	FourthConversionName *string                                     `json:"fourthConversionName,omitempty" form:"name=fourthConversionName"`
	GroupID              *int64                                      `json:"groupId,omitempty" form:"name=groupId"`
	GroupName            *string                                     `json:"groupName,omitempty" form:"name=groupName"`
	ID                   *int64                                      `json:"id,omitempty" form:"name=id"`
	IsPublic             *bool                                       `json:"isPublic,omitempty" form:"name=isPublic"`
	IsSecured            *bool                                       `json:"isSecured,omitempty" form:"name=isSecured"`
	LightTracking        *bool                                       `json:"lightTracking,omitempty" form:"name=lightTracking"`
	Name                 *string                                     `json:"name,omitempty" form:"name=name"`
	Notes                *string                                     `json:"notes,omitempty" form:"name=notes"`
	Preferred            *bool                                       `json:"preferred,omitempty" form:"name=preferred"`
	RedirectOnly         *bool                                       `json:"redirectOnly,omitempty" form:"name=redirectOnly"`
	SecondConversionID   *int64                                      `json:"secondConversionId,omitempty" form:"name=secondConversionId"`
	SecondConversionName *string                                     `json:"secondConversionName,omitempty" form:"name=secondConversionName"`
	Status               *APICoreDtoDatapointsDatapointStatusEnum    `json:"status,omitempty" form:"name=status"`
	Tags                 []APICoreDtoTagsTag                         `json:"tags,omitempty" form:"name=tags,json"`
	ThirdConversionID    *int64                                      `json:"thirdConversionId,omitempty" form:"name=thirdConversionId"`
	ThirdConversionName  *string                                     `json:"thirdConversionName,omitempty" form:"name=thirdConversionName"`
	Title                *string                                     `json:"title,omitempty" form:"name=title"`
	TrackingCode         *string                                     `json:"trackingCode,omitempty" form:"name=trackingCode"`
	Type                 *APICoreDtoDatapointsDatapointTypeEnum      `json:"type,omitempty" form:"name=type"`
	TypeTL               *APICoreDtoDatapointsTrackingLinkSpecifics  `json:"typeTL,omitempty" form:"name=typeTL,json"`
	TypeTP               *APICoreDtoDatapointsTrackingPixelSpecifics `json:"typeTP,omitempty" form:"name=typeTP,json"`
	WritePermited        *bool                                       `json:"writePermited,omitempty" form:"name=writePermited"`
}
