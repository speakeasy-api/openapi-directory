/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CommitDetail } from "./commitdetail";
import { PreviousBuild } from "./previousbuild";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

/**
 * previous build
 */
export class BuildDetail extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CommitDetail })
  @Expose({ name: "all_commit_details" })
  @Type(() => CommitDetail)
  allCommitDetails?: CommitDetail[];

  @SpeakeasyMetadata()
  @Expose({ name: "compare" })
  compare?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "job_name" })
  jobName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node" })
  node?: any;

  /**
   * previous build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_successful_build" })
  @Type(() => PreviousBuild)
  previousSuccessfulBuild?: PreviousBuild;

  @SpeakeasyMetadata()
  @Expose({ name: "retries" })
  retries?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_enabled" })
  sshEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "timedout" })
  timedout?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "usage_queued_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  usageQueuedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user?: User;
}
