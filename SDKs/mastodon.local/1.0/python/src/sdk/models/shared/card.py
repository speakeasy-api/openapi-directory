"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CardTypeEnum(str, Enum):
    r"""The type of the preview card. String (Enumerable, oneOf)."""
    LINK = 'link'
    PHOTO = 'photo'
    VIDEO = 'video'
    RICH = 'rich'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Card:
    r"""Represents a rich preview card that is generated using OpenGraph tags from a URL.
    https://docs.joinmastodon.org/entities/card/
    """
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of preview."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Title of linked resource."""  
    type: CardTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the preview card. String (Enumerable, oneOf)."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Location of linked resource."""  
    author_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_name'), 'exclude': lambda f: f is None }})
    r"""The author of the original resource."""  
    author_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_url'), 'exclude': lambda f: f is None }})
    r"""A link to the author of the original resource."""  
    blurhash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blurhash'), 'exclude': lambda f: f is None }})
    r"""A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet."""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Height of preview, in pixels."""  
    html: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html'), 'exclude': lambda f: f is None }})
    r"""HTML to be used for generating the preview card."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Preview thumbnail (URL)."""  
    provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_name'), 'exclude': lambda f: f is None }})
    r"""The provider of the original resource."""  
    provider_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_url'), 'exclude': lambda f: f is None }})
    r"""A link to the provider of the original resource."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Width of preview, in pixels."""  
    