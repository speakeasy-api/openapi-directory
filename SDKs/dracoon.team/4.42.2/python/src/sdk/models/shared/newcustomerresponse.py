"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import customerattributes as shared_customerattributes
from ..shared import firstadminuser as shared_firstadminuser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class NewCustomerResponseCustomerContractTypeEnum(str, Enum):
    r"""Customer type"""
    DEMO = 'demo'
    FREE = 'free'
    PAY = 'pay'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NewCustomerResponse:
    r"""Customer information"""
    
    company_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName') }})
    r"""Company name"""  
    customer_contract_type: NewCustomerResponseCustomerContractTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerContractType') }})
    r"""Customer type"""  
    customer_uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerUuid') }})
    r"""&#128640; Since v4.21.0
    
    Customer UUID
    """  
    first_admin_user: shared_firstadminuser.FirstAdminUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstAdminUser') }})
    r"""First administrator user"""  
    lock_status: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus') }})
    r"""&#128679; Deprecated since v4.7.0
    
    Customer lock status:
    
    * `false` - unlocked
    
    * `true` - locked
    
    
    
    Please use `isLocked` instead.
    
    All users of this customer will be blocked and can not login anymore.
    """  
    quota_max: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaMax') }})
    r"""Maximal disc space which can be allocated by customer in bytes. -1 for unlimited"""  
    user_max: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userMax') }})
    r"""Maximal number of users"""  
    activation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activationCode'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.8.0
    
    Customer activation code string:
    
    * valid only for types `free` and `demo`
    
    * for `pay` customers it is empty
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Creation date"""  
    customer_attributes: Optional[shared_customerattributes.CustomerAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerAttributes'), 'exclude': lambda f: f is None }})
    r"""List of customer attributes"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the customer"""  
    is_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked'), 'exclude': lambda f: f is None }})
    r"""Customer is locked:
    
    * `false` - unlocked
    
    * `true` - locked
    
    
    
    All users of this customer will be blocked and can not login anymore.
    """  
    provider_customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerCustomerId'), 'exclude': lambda f: f is None }})
    r"""Provider customer ID"""  
    trial_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialDays'), 'exclude': lambda f: f is None }})
    r"""Number of days left for trial period (relevant only for type `demo`)
    
    (not used)
    """  
    webhooks_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhooksMax'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.19.0
    
    Maximal number of webhooks
    """  
    