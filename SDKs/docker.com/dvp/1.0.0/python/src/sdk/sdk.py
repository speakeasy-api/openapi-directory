"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .authentication import Authentication
from .discovery import Discovery
from .namespaces import Namespaces
from sdk.models import shared

SERVERS = [
    "https://hub.docker.com/api/publisher/analytics/v1",
    "https://docker.com/{version}",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.
      
    #### Summary data
    
    In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). 
    
    There are two levels of summary data:
    
    - Repository-level, a summary of every namespace and repository
    - Tag- or digest-level, a summary of every namespace, repository, and reference
      (tag or digest)
    
     The summary data formats contain the following data points:
    
    - Unique IP address count
    - Pulls by tag count
    - Pulls by digest count
    - Version check count
    
    #### Raw data
    
    In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.
    
    - Type (industry)
    - Host (cloud provider)
    - Country (geolocation)
    - Timestamp
    - Namespace
    - Repository
    - Reference (digest is always included, tag is provided when available)
    - HTTP request method
    - Action, one of the following:
      - Pull by tag
      - Pull by digest
      - Version check
    - User-Agent
    """
    authentication: Authentication
    discovery: Discovery
    namespaces: Namespaces

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.authentication = Authentication(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.discovery = Discovery(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.namespaces = Namespaces(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    