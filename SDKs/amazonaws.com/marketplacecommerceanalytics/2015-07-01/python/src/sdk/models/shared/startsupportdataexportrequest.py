"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import supportdatasettype_enum as shared_supportdatasettype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartSupportDataExportRequest:
    r"""Container for the parameters to the StartSupportDataExport operation."""
    
    data_set_type: shared_supportdatasettype_enum.SupportDataSetTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSetType') }})  
    destination_s3_bucket_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationS3BucketName') }})  
    from_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    role_name_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleNameArn') }})  
    sns_topic_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snsTopicArn') }})  
    customer_defined_values: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerDefinedValues'), 'exclude': lambda f: f is None }})  
    destination_s3_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationS3Prefix'), 'exclude': lambda f: f is None }})  
    