// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum - The piece of software on the Greengrass core that will be updated.
type CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum string

const (
	CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnumCore     CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum = "core"
	CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnumOtaAgent CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum = "ota_agent"
)

func (e *CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "core":
		fallthrough
	case "ota_agent":
		*e = CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum: %s", s)
	}
}

// CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum - The minimum level of log statements that should be logged by the OTA Agent during an update.
type CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum string

const (
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumNone    CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "NONE"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumTrace   CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "TRACE"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumDebug   CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "DEBUG"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumVerbose CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "VERBOSE"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumInfo    CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "INFO"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumWarn    CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "WARN"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumError   CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "ERROR"
	CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnumFatal   CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum = "FATAL"
)

func (e *CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "TRACE":
		fallthrough
	case "DEBUG":
		fallthrough
	case "VERBOSE":
		fallthrough
	case "INFO":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		fallthrough
	case "FATAL":
		*e = CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum: %s", s)
	}
}

// CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum - The architecture of the cores which are the targets of an update.
type CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum string

const (
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnumArmv6l  CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum = "armv6l"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnumArmv7l  CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum = "armv7l"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnumX8664   CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum = "x86_64"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnumAarch64 CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum = "aarch64"
)

func (e *CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "armv6l":
		fallthrough
	case "armv7l":
		fallthrough
	case "x86_64":
		fallthrough
	case "aarch64":
		*e = CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum: %s", s)
	}
}

// CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum - The operating system of the cores which are the targets of an update.
type CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum string

const (
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnumUbuntu      CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum = "ubuntu"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnumRaspbian    CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum = "raspbian"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnumAmazonLinux CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum = "amazon_linux"
	CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnumOpenwrt     CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum = "openwrt"
)

func (e *CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ubuntu":
		fallthrough
	case "raspbian":
		fallthrough
	case "amazon_linux":
		fallthrough
	case "openwrt":
		*e = CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum: %s", s)
	}
}

type CreateSoftwareUpdateJobRequestBody struct {
	// The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.
	S3URLSignerRole string `json:"S3UrlSignerRole"`
	// The piece of software on the Greengrass core that will be updated.
	SoftwareToUpdate CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum `json:"SoftwareToUpdate"`
	// The minimum level of log statements that should be logged by the OTA Agent during an update.
	UpdateAgentLogLevel *CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum `json:"UpdateAgentLogLevel,omitempty"`
	// The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.
	UpdateTargets []string `json:"UpdateTargets"`
	// The architecture of the cores which are the targets of an update.
	UpdateTargetsArchitecture CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum `json:"UpdateTargetsArchitecture"`
	// The operating system of the cores which are the targets of an update.
	UpdateTargetsOperatingSystem CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum `json:"UpdateTargetsOperatingSystem"`
}

type CreateSoftwareUpdateJobRequest struct {
	RequestBody       CreateSoftwareUpdateJobRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// A client token used to correlate requests and responses.
	XAmznClientToken *string `header:"style=simple,explode=false,name=X-Amzn-Client-Token"`
}

type CreateSoftwareUpdateJobResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// Success
	CreateSoftwareUpdateJobResponse *shared.CreateSoftwareUpdateJobResponse
	// InternalServerErrorException
	InternalServerErrorException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
