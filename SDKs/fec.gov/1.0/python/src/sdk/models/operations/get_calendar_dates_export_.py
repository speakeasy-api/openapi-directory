"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import calendardatepage as shared_calendardatepage
from datetime import date
from enum import Enum
from typing import Optional

class GetCalendarDatesExportRendererEnum(str, Enum):
    ICS = 'ics'
    CSV = 'csv'


@dataclasses.dataclass
class GetCalendarDatesExportRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    calendar_category_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'calendar_category_id', 'style': 'form', 'explode': True }})
    r"""Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
    Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
    Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
    Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
    """  
    description: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})
    r"""Brief description of event"""  
    event_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'event_id', 'style': 'form', 'explode': True }})
    r"""An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID."""  
    max_end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_end_date', 'style': 'form', 'explode': True }})
    r"""The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)"""  
    max_start_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_start_date', 'style': 'form', 'explode': True }})
    r"""The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_end_date', 'style': 'form', 'explode': True }})
    r"""The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_start_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_start_date', 'style': 'form', 'explode': True }})
    r"""The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    renderer: Optional[GetCalendarDatesExportRendererEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'renderer', 'style': 'form', 'explode': True }})  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    summary: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'summary', 'style': 'form', 'explode': True }})
    r"""Longer description of event"""  
    

@dataclasses.dataclass
class GetCalendarDatesExportResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    calendar_date_page: Optional[shared_calendardatepage.CalendarDatePage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    