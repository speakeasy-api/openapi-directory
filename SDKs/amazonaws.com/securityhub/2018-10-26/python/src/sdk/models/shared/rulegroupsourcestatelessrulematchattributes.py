"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rulegroupsourcestatelessrulematchattributesdestinationports as shared_rulegroupsourcestatelessrulematchattributesdestinationports
from ..shared import rulegroupsourcestatelessrulematchattributesdestinations as shared_rulegroupsourcestatelessrulematchattributesdestinations
from ..shared import rulegroupsourcestatelessrulematchattributessourceports as shared_rulegroupsourcestatelessrulematchattributessourceports
from ..shared import rulegroupsourcestatelessrulematchattributessources as shared_rulegroupsourcestatelessrulematchattributessources
from ..shared import rulegroupsourcestatelessrulematchattributestcpflags as shared_rulegroupsourcestatelessrulematchattributestcpflags
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuleGroupSourceStatelessRuleMatchAttributes:
    r"""Criteria for the stateless rule."""
    
    destination_ports: Optional[list[shared_rulegroupsourcestatelessrulematchattributesdestinationports.RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationPorts'), 'exclude': lambda f: f is None }})  
    destinations: Optional[list[shared_rulegroupsourcestatelessrulematchattributesdestinations.RuleGroupSourceStatelessRuleMatchAttributesDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Destinations'), 'exclude': lambda f: f is None }})  
    protocols: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Protocols'), 'exclude': lambda f: f is None }})  
    source_ports: Optional[list[shared_rulegroupsourcestatelessrulematchattributessourceports.RuleGroupSourceStatelessRuleMatchAttributesSourcePorts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourcePorts'), 'exclude': lambda f: f is None }})  
    sources: Optional[list[shared_rulegroupsourcestatelessrulematchattributessources.RuleGroupSourceStatelessRuleMatchAttributesSources]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sources'), 'exclude': lambda f: f is None }})  
    tcp_flags: Optional[list[shared_rulegroupsourcestatelessrulematchattributestcpflags.RuleGroupSourceStatelessRuleMatchAttributesTCPFlags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TcpFlags'), 'exclude': lambda f: f is None }})  
    