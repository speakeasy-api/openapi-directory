// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ApptuSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ApptuRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token ID
	TokenNo string `json:"TokenNo"`
}

// ApptuRequestBodyFormatEnum - The format of the certificate in response.
type ApptuRequestBodyFormatEnum string

const (
	ApptuRequestBodyFormatEnumPdf ApptuRequestBodyFormatEnum = "pdf"
)

func (e ApptuRequestBodyFormatEnum) ToPointer() *ApptuRequestBodyFormatEnum {
	return &e
}

func (e *ApptuRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = ApptuRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApptuRequestBodyFormatEnum: %v", v)
	}
}

// ApptuRequestBody - Request format
type ApptuRequestBody struct {
	CertificateParameters *ApptuRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ApptuRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Apptu504ApplicationJSONErrorEnum string

const (
	Apptu504ApplicationJSONErrorEnumGatewayTimeout Apptu504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Apptu504ApplicationJSONErrorEnum) ToPointer() *Apptu504ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Apptu504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu504ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu504ApplicationJSONErrorDescriptionEnum string

const (
	Apptu504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Apptu504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Apptu504ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Apptu504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu504ApplicationJSON - Gateway timeout
type Apptu504ApplicationJSON struct {
	Error            *Apptu504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu503ApplicationJSONErrorEnum string

const (
	Apptu503ApplicationJSONErrorEnumServiceUnavailable Apptu503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Apptu503ApplicationJSONErrorEnum) ToPointer() *Apptu503ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Apptu503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu503ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu503ApplicationJSONErrorDescriptionEnum string

const (
	Apptu503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Apptu503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Apptu503ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Apptu503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu503ApplicationJSON - Service unavailable
type Apptu503ApplicationJSON struct {
	Error            *Apptu503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu502ApplicationJSONErrorEnum string

const (
	Apptu502ApplicationJSONErrorEnumBadGatewy Apptu502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Apptu502ApplicationJSONErrorEnum) ToPointer() *Apptu502ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Apptu502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu502ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu502ApplicationJSONErrorDescriptionEnum string

const (
	Apptu502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Apptu502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Apptu502ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Apptu502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu502ApplicationJSON - Bad gateway
type Apptu502ApplicationJSON struct {
	Error            *Apptu502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu500ApplicationJSONErrorEnum string

const (
	Apptu500ApplicationJSONErrorEnumInternalServerError Apptu500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Apptu500ApplicationJSONErrorEnum) ToPointer() *Apptu500ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Apptu500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu500ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu500ApplicationJSONErrorDescriptionEnum string

const (
	Apptu500ApplicationJSONErrorDescriptionEnumInternalServerError Apptu500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Apptu500ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Apptu500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu500ApplicationJSON - Internal server error
type Apptu500ApplicationJSON struct {
	Error            *Apptu500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu404ApplicationJSONErrorEnum string

const (
	Apptu404ApplicationJSONErrorEnumRecordNotFound Apptu404ApplicationJSONErrorEnum = "record_not_found"
	Apptu404ApplicationJSONErrorEnumURLNotFound    Apptu404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Apptu404ApplicationJSONErrorEnum) ToPointer() *Apptu404ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Apptu404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu404ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu404ApplicationJSONErrorDescriptionEnum string

const (
	Apptu404ApplicationJSONErrorDescriptionEnumNoRecordFound               Apptu404ApplicationJSONErrorDescriptionEnum = "No record found"
	Apptu404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Apptu404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Apptu404ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Apptu404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu404ApplicationJSON - No record found
type Apptu404ApplicationJSON struct {
	Error            *Apptu404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu401ApplicationJSONErrorEnum string

const (
	Apptu401ApplicationJSONErrorEnumInvalidAuthentication Apptu401ApplicationJSONErrorEnum = "invalid_authentication"
	Apptu401ApplicationJSONErrorEnumInvalidAuthorization  Apptu401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Apptu401ApplicationJSONErrorEnum) ToPointer() *Apptu401ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Apptu401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu401ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu401ApplicationJSONErrorDescriptionEnum string

const (
	Apptu401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Apptu401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Apptu401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Apptu401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Apptu401ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Apptu401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu401ApplicationJSON - Unauthorized access
type Apptu401ApplicationJSON struct {
	Error            *Apptu401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apptu400ApplicationJSONErrorEnum string

const (
	Apptu400ApplicationJSONErrorEnumMissingParameter Apptu400ApplicationJSONErrorEnum = "missing_parameter"
	Apptu400ApplicationJSONErrorEnumInvalidParameter Apptu400ApplicationJSONErrorEnum = "invalid_parameter"
	Apptu400ApplicationJSONErrorEnumInvalidFormat    Apptu400ApplicationJSONErrorEnum = "invalid_format"
	Apptu400ApplicationJSONErrorEnumInvalidTxnid     Apptu400ApplicationJSONErrorEnum = "invalid_txnid"
	Apptu400ApplicationJSONErrorEnumInvalidConsentid Apptu400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Apptu400ApplicationJSONErrorEnum) ToPointer() *Apptu400ApplicationJSONErrorEnum {
	return &e
}

func (e *Apptu400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Apptu400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu400ApplicationJSONErrorEnum: %v", v)
	}
}

type Apptu400ApplicationJSONErrorDescriptionEnum string

const (
	Apptu400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Apptu400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Apptu400ApplicationJSONErrorDescriptionEnumBadRequest                              Apptu400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Apptu400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Apptu400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Apptu400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Apptu400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Apptu400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Apptu400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Apptu400ApplicationJSONErrorDescriptionEnum) ToPointer() *Apptu400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Apptu400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Apptu400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Apptu400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Apptu400ApplicationJSON - Bad request
type Apptu400ApplicationJSON struct {
	Error            *Apptu400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apptu400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ApptuResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Apptu400ApplicationJSONObject *Apptu400ApplicationJSON
	// Unauthorized access
	Apptu401ApplicationJSONObject *Apptu401ApplicationJSON
	// No record found
	Apptu404ApplicationJSONObject *Apptu404ApplicationJSON
	// Internal server error
	Apptu500ApplicationJSONObject *Apptu500ApplicationJSON
	// Bad gateway
	Apptu502ApplicationJSONObject *Apptu502ApplicationJSON
	// Service unavailable
	Apptu503ApplicationJSONObject *Apptu503ApplicationJSON
	// Gateway timeout
	Apptu504ApplicationJSONObject *Apptu504ApplicationJSON
}
