<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Betslippart
{
    /**
     * Indicates whether each way is available
     * 
     * @var ?bool $eachWayAvailable
     */
	#[\JMS\Serializer\Annotation\SerializedName('eachWayAvailable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $eachWayAvailable = null;
    
    /**
     * Indicates if the bet can be used in a multiple bet
     * 
     * @var bool $includeInMultiple
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeInMultiple')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $includeInMultiple;
    
    /**
     * To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc
     * 
     * @var ?int $legGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('legGroup')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $legGroup = null;
    
    /**
     * Indicates if there has been a change in the price
     * 
     * @var ?bool $priceChanged
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceChanged')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $priceChanged = null;
    
    /**
     * Price denominator - will be ignored for types other than L (Fixed Price)
     * 
     * @var int $priceDen
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceDen')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $priceDen;
    
    /**
     * Price numerator - will be ignored for types other than L (Fixed Price)
     * 
     * @var int $priceNum
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceNum')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $priceNum;
    
    /**
     * The type of price selected. For example - ‘L’ (Fixed)
     * 
     * @var int $priceType
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceType')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $priceType;
    
    /**
     * The selection identifier
     * 
     * @var int $selectionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('selectionId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $selectionId;
    
    /**
     * Indicates whether the bet can be used in a single bet
     * 
     * @var ?bool $singleAvailable
     */
	#[\JMS\Serializer\Annotation\SerializedName('singleAvailable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $singleAvailable = null;
    
    /**
     * Indicates whether starting prices are available
     * 
     * @var ?bool $startingPriceAvailable
     */
	#[\JMS\Serializer\Annotation\SerializedName('startingPriceAvailable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $startingPriceAvailable = null;
    
    /**
     * Indicates the current status of the bet
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * Indicates whether the status of the bet has changed
     * 
     * @var ?bool $statusChanged
     */
	#[\JMS\Serializer\Annotation\SerializedName('statusChanged')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $statusChanged = null;
    
	public function __construct()
	{
		$this->eachWayAvailable = null;
		$this->includeInMultiple = false;
		$this->legGroup = null;
		$this->priceChanged = null;
		$this->priceDen = 0;
		$this->priceNum = 0;
		$this->priceType = 0;
		$this->selectionId = 0;
		$this->singleAvailable = null;
		$this->startingPriceAvailable = null;
		$this->status = null;
		$this->statusChanged = null;
	}
}
