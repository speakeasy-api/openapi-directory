"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class RegistrationsLogsListRequest:
    
    registration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'registration_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the registration."""  
    

@dataclasses.dataclass
class RegistrationsLogsListLogAttributesLogParams:
    r"""The type of action performed on the OSF. See description for full list of possible actions."""
    
    addon: Optional[str] = dataclasses.field(default=None)
    r"""The addon associated with the connected node."""  
    anonymous_link: Optional[bool] = dataclasses.field(default=None)
    r"""The view only link added to the node was anonymous."""  
    bucket: Optional[str] = dataclasses.field(default=None)
    r"""The Amazon s3 bucket connected to the connected node."""  
    citation_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of citation associated with the connected node."""  
    contributors: Optional[str] = dataclasses.field(default=None)
    r"""List of contributors on the connected node involved in the action represented by this node log."""  
    data_set: Optional[str] = dataclasses.field(default=None)
    r"""The dataset associated with the connected node."""  
    destination: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."""  
    figshare_title: Optional[str] = dataclasses.field(default=None)
    r"""Title of the fighshare project associated with this node log"""  
    file: Optional[str] = dataclasses.field(default=None)
    r"""Dictionary with information about the file involved with the log."""  
    filename: Optional[str] = dataclasses.field(default=None)
    r"""Filename for the file associated with the log."""  
    folder: Optional[str] = dataclasses.field(default=None)
    r"""Folder associated with the log."""  
    folder_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the folder associated with the log."""  
    forward_url: Optional[str] = dataclasses.field(default=None)
    r"""URL that the connected node forwards to."""  
    github_repo: Optional[str] = dataclasses.field(default=None)
    r"""The github repository involved with the action represented by this node log."""  
    github_user: Optional[str] = dataclasses.field(default=None)
    r"""The github user involved with the action represented by this node log."""  
    identifiers: Optional[str] = dataclasses.field(default=None)
    r"""Dictionary containing the DOI and ARK ID for a preprint associated with the log."""  
    institution: Optional[str] = dataclasses.field(default=None)
    r"""Dictionary containing the ID and Name of the institution associated with the log."""  
    kind: Optional[str] = dataclasses.field(default=None)
    r"""Kind of the object associated with the log."""  
    license: Optional[str] = dataclasses.field(default=None)
    r"""License for the associated node."""  
    old_page: Optional[str] = dataclasses.field(default=None)
    r"""Old name of wiki page for a wiki rename log action."""  
    page: Optional[str] = dataclasses.field(default=None)
    r"""Current name of wiki page for rename log action."""  
    page_id: Optional[str] = dataclasses.field(default=None)
    r"""Primary key of the wiki page associated with the log."""  
    params_node: Optional[str] = dataclasses.field(default=None)
    r"""Node that is refered to in the params of the log."""  
    params_project: Optional[str] = dataclasses.field(default=None)
    r"""Project that is refered to in the params of the log."""  
    path: Optional[str] = dataclasses.field(default=None)
    r"""Path for a file associated with the log."""  
    pointer: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary with information about the node that is linked to the associated node."""  
    preprint: Optional[str] = dataclasses.field(default=None)
    r"""Preprint related to the associated node."""  
    preprint_provider: Optional[str] = dataclasses.field(default=None)
    r"""Preprint provider for the associated node."""  
    previous_institution: Optional[str] = dataclasses.field(default=None)
    r"""If a primary institution for the associated node is changed, this will show the previous institution."""  
    source: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."""  
    study: Optional[str] = dataclasses.field(default=None)
    r"""Dataverse study linked to the associated node."""  
    tag: Optional[str] = dataclasses.field(default=None)
    r"""Tag associated with the associated node."""  
    tags: Optional[str] = dataclasses.field(default=None)
    r"""Tags associated with the associated node."""  
    target: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."""  
    template_node: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary containing information about the node that was used as a template for the associated node."""  
    title_new: Optional[str] = dataclasses.field(default=None)
    r"""The new title for the associated node."""  
    title_original: Optional[str] = dataclasses.field(default=None)
    r"""The original title for the associated node"""  
    updated_fields: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary containing all of the fields updated on the associated node."""  
    urls: Optional[str] = dataclasses.field(default=None)
    r"""Links to access information about the file associated with this log."""  
    version: Optional[str] = dataclasses.field(default=None)
    r"""Version of the wiki page associated with this log."""  
    wiki: Optional[str] = dataclasses.field(default=None)
    r"""A dictionary with information about the wiki page associated with the log."""  
    

@dataclasses.dataclass
class RegistrationsLogsListLogAttributes:
    r"""The properties of the log."""
    
    action: str = dataclasses.field()
    r"""The type of action performed on the OSF. See actions section for full list of possible actions."""  
    date_: datetime = dataclasses.field()
    r"""The date and time at which the log was created, as an iso8601 formatted timestamp."""  
    params: Optional[RegistrationsLogsListLogAttributesLogParams] = dataclasses.field(default=None)
    r"""The type of action performed on the OSF. See description for full list of possible actions."""  
    

@dataclasses.dataclass
class RegistrationsLogsListLogLinks:
    r"""URLs to alternative representations of the log entity."""
    
    self_: str = dataclasses.field()
    r"""A link to the detail page for the log."""  
    

@dataclasses.dataclass
class RegistrationsLogsListLogRelationships:
    r"""URLs to other entities or entity collections that have a relationship to the log."""
    
    node: str = dataclasses.field()
    r"""A relationship to the node associated with this log."""  
    linked_node: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the node linked to this log."""  
    original_node: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration."""  
    template_node: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the node used as a template for this log."""  
    user: Optional[str] = dataclasses.field(default=None)
    r"""A relationship to the user who performed the log action."""  
    

@dataclasses.dataclass
class RegistrationsLogsListLog:
    
    attributes: RegistrationsLogsListLogAttributes = dataclasses.field()
    r"""The properties of the log."""  
    id: str = dataclasses.field()
    r"""The identifier of the log."""  
    links: RegistrationsLogsListLogLinks = dataclasses.field()
    r"""URLs to alternative representations of the log entity."""  
    relationships: RegistrationsLogsListLogRelationships = dataclasses.field()
    r"""URLs to other entities or entity collections that have a relationship to the log."""  
    type: str = dataclasses.field()
    r"""The type identifier of the log (`logs`)"""  
    

@dataclasses.dataclass
class RegistrationsLogsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    