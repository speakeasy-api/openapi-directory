/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/v3/nba/pbp",
  "https://azure-api.sportsdata.io/v3/nba/pbp",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * NBA play-by-play API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Play By Play
   */
  playByPlay(
    req: operations.PlayByPlayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayByPlayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayByPlayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayByPlay/{gameid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayByPlayResponse =
        new operations.PlayByPlayResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playByPlay = utils.objectToClass(
              httpRes?.data,
              shared.PlayByPlay
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Play By Play Delta
   */
  playByPlayDelta(
    req: operations.PlayByPlayDeltaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayByPlayDeltaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayByPlayDeltaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayByPlayDelta/{date}/{minutes}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayByPlayDeltaResponse =
        new operations.PlayByPlayDeltaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playByPlays = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playByPlays = utils.objectToClass(
              httpRes?.data,
              shared.PlayByPlay,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
