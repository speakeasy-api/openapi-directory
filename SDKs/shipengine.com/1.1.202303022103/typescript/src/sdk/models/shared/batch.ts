/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OptionalLink } from "./optionallink";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A link to a related resource, or an empty object if there is no resource to link to
 */
export class BatchOptionalLink extends SpeakeasyBase {
  /**
   * The URL of the linked resource, if any
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * The type of resource, or the type of relationship to the parent resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Reference to the various downloadable file formats for the generated label
 *
 * @remarks
 *
 */
export class BatchLabelDownload extends SpeakeasyBase {
  /**
   * The URL of the linked resource, if any
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * The URL for the pdf generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pdf" })
  pdf?: string;

  /**
   * The URL for the png generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "png" })
  png?: string;

  /**
   * The URL for the zpl generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zpl" })
  zpl?: string;
}

/**
 * The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
 *
 * @remarks
 *
 * |Label Format  | Supported Carriers
 * |--------------|-----------------------------------
 * |`pdf`         | All carriers
 * |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
 * |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
 *
 */
export enum BatchLabelFormatEnum {
  Pdf = "pdf",
  Png = "png",
  Zpl = "zpl",
}

/**
 * The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
 *
 * @remarks
 *
 */
export enum BatchLabelLayoutEnum {
  Fourx6 = "4x6",
  Letter = "letter",
}

/**
 * The possible batch status values
 */
export enum BatchBatchStatusEnum {
  Open = "open",
  Queued = "queued",
  Processing = "processing",
  Completed = "completed",
  CompletedWithErrors = "completed_with_errors",
  Archived = "archived",
  Notifying = "notifying",
  Invalid = "invalid",
}

/**
 * Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
 *
 * @remarks
 * thousands of labels at a time.
 *
 */
export class Batch extends SpeakeasyBase {
  /**
   * Link to batch errors endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_errors_url" })
  @Type(() => BatchOptionalLink)
  batchErrorsUrl: BatchOptionalLink;

  /**
   * A string that uniquely identifies the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_id" })
  batchId: string;

  /**
   * Link to batch labels query
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_labels_url" })
  @Type(() => OptionalLink)
  batchLabelsUrl: OptionalLink;

  /**
   * Custom notes you can add for each created batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_notes" })
  batchNotes: string;

  /**
   * The batch number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_number" })
  batchNumber: string;

  /**
   * The batch shipments endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch_shipments_url" })
  @Type(() => OptionalLink)
  batchShipmentsUrl: OptionalLink;

  /**
   * The number of labels generated in the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed" })
  completed: number;

  /**
   * The total of errors, warnings, and completed properties
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count: number;

  /**
   * The date and time the batch was created in ShipEngine
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The number of errors that occurred while generating the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errors" })
  errors: number;

  /**
   * A string that uniquely identifies the external batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_batch_id" })
  externalBatchId: string;

  /**
   * The form download for any customs that are needed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_download" })
  @Type(() => BatchOptionalLink)
  formDownload: BatchOptionalLink;

  /**
   * The number of forms for customs that are available for download
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forms" })
  forms: number;

  /**
   * The label download for the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_download" })
  @Type(() => BatchLabelDownload)
  labelDownload: BatchLabelDownload;

  @SpeakeasyMetadata()
  @Expose({ name: "label_format" })
  labelFormat: BatchLabelFormatEnum;

  /**
   * label layout
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_layout" })
  labelLayout: BatchLabelLayoutEnum;

  /**
   * The date and time the batch was processed in ShipEngine
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  processedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: BatchBatchStatusEnum;

  /**
   * The number of warnings that occurred while generating the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warnings" })
  warnings: number;
}
