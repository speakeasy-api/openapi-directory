<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesResponse
     */
	public function cloudtraceProjectsPatchTraces(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/traces', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "traces", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsPatchTracesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single trace by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetResponse
     */
	public function cloudtraceProjectsTracesGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/traces/{traceId}', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of traces that match the specified filter conditions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListResponse
     */
	public function cloudtraceProjectsTracesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/traces', \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudtraceProjectsTracesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTracesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTracesResponse', 'json');
            }
        }

        return $response;
    }
}