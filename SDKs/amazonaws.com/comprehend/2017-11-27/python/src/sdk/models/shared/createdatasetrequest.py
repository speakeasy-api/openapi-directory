"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasetinputdataconfig as shared_datasetinputdataconfig
from ..shared import datasettype_enum as shared_datasettype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDatasetRequest:
    
    dataset_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetName') }})  
    flywheel_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlywheelArn') }})  
    input_data_config: shared_datasetinputdataconfig.DatasetInputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig') }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestToken'), 'exclude': lambda f: f is None }})  
    dataset_type: Optional[shared_datasettype_enum.DatasetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetType'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    