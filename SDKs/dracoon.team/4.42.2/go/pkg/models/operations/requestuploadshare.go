// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestUploadShareXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestUploadShareXSdsDateFormatEnum string

const (
	RequestUploadShareXSdsDateFormatEnumUtc    RequestUploadShareXSdsDateFormatEnum = "UTC"
	RequestUploadShareXSdsDateFormatEnumLocal  RequestUploadShareXSdsDateFormatEnum = "LOCAL"
	RequestUploadShareXSdsDateFormatEnumOffset RequestUploadShareXSdsDateFormatEnum = "OFFSET"
	RequestUploadShareXSdsDateFormatEnumEpoch  RequestUploadShareXSdsDateFormatEnum = "EPOCH"
	RequestUploadShareXSdsDateFormatEnumLeet   RequestUploadShareXSdsDateFormatEnum = "LEET"
)

func (e *RequestUploadShareXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestUploadShareXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestUploadShareXSdsDateFormatEnum: %s", s)
	}
}

type RequestUploadShareRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestUploadShareXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Share ID
	ShareID int64 `pathParam:"style=simple,explode=false,name=share_id"`
}

type RequestUploadShareResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	UploadShare *shared.UploadShare
}
