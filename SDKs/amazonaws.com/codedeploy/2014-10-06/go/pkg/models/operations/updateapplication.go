// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateApplicationXAmzTargetEnum
type UpdateApplicationXAmzTargetEnum string

const (
	UpdateApplicationXAmzTargetEnumCodeDeploy20141006UpdateApplication UpdateApplicationXAmzTargetEnum = "CodeDeploy_20141006.UpdateApplication"
)

func (e UpdateApplicationXAmzTargetEnum) ToPointer() *UpdateApplicationXAmzTargetEnum {
	return &e
}

func (e *UpdateApplicationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.UpdateApplication":
		*e = UpdateApplicationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateApplicationXAmzTargetEnum: %v", v)
	}
}

type UpdateApplicationRequest struct {
	UpdateApplicationInput shared.UpdateApplicationInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             UpdateApplicationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateApplicationResponse struct {
	// ApplicationAlreadyExistsException
	ApplicationAlreadyExistsException interface{}
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
