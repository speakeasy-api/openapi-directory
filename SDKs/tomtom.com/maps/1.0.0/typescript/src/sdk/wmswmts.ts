/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class WmsWmts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * GetCapabilities
   *
   * @remarks
   * The GetCapabilities call is part of TomTom's implementation of version 1.1.1
   * the Web Map Service (WMS). It provides descriptions of the other calls
   * that are available in the implementation.
   */
  getCapabilities(
    req: operations.GetCapabilitiesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCapabilitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCapabilitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/wms//",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCapabilitiesResponse =
        new operations.GetCapabilitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 202, 401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * GetMap
   *
   * @remarks
   * The GetMap call implements the Web Map Service 1.1.1 standard
   * to access TomTom raster map tiles. This service is described
   * in the response to the GetCapabilities API call.
   */
  getMap(
    req: operations.GetMapRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMapRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/wms/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapResponse = new operations.GetMapResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case [200, 202, 401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * WMTS
   *
   * @remarks
   * The WMTS GetCapabilities call implements version 1.0.0 of
   * the <a href="http://www.opengeospatial.org/standards/wmts">Web Map Tile Service</a>
   * (WMTS) standard. It returns metadata that allows compatible calling systems to construct
   * calls to TomTom's raster map tile service. See the
   * <a href="/maps-api/maps-api-documentation-raster/wmts">documentation</a>
   * for more information on WMTS.
   */
  getMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXml(
    req: operations.GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/wmts/{key}/{wmtsVersion}/WMTSCapabilities.xml",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse =
        new operations.GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [200, 400, 401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
