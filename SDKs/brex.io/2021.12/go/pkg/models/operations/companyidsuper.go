// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CompanyIDSuperSecurity struct {
	UserKey string `security:"scheme,type=apiKey,subtype=header,name=user_key"`
}

// CompanyIDSuperLangEnum - Optional data translation (only available in limited jurisdictions)
type CompanyIDSuperLangEnum string

const (
	CompanyIDSuperLangEnumUnknown CompanyIDSuperLangEnum = ""
	CompanyIDSuperLangEnumOg      CompanyIDSuperLangEnum = "OG"
	CompanyIDSuperLangEnumEn      CompanyIDSuperLangEnum = "EN"
)

func (e *CompanyIDSuperLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "OG":
		fallthrough
	case "EN":
		*e = CompanyIDSuperLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompanyIDSuperLangEnum: %s", s)
	}
}

type CompanyIDSuperRequest struct {
	// ISO_3166-1_alpha-2 representation of a country name - 2 chars
	Country string `pathParam:"style=simple,explode=false,name=country"`
	// company superdata by id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Optional data translation (only available in limited jurisdictions)
	Lang *CompanyIDSuperLangEnum `queryParam:"style=form,explode=true,name=lang"`
}

// CompanyIDSuperDefaultApplicationJSON - Detailed information about the error
type CompanyIDSuperDefaultApplicationJSON struct {
	Code    int     `json:"code"`
	Fault   *string `json:"fault,omitempty"`
	Message string  `json:"message"`
	Tag     string  `json:"tag"`
}

type CompanyIDSuper200ApplicationJSON struct {
	Address             []string               `json:"address,omitempty"`
	Country             *string                `json:"country,omitempty"`
	DateOfIncorporation *string                `json:"dateOfIncorporation,omitempty"`
	ExtraData           map[string]interface{} `json:"extraData,omitempty"`
	FormattedAddress    []string               `json:"formattedAddress,omitempty"`
	ID                  *string                `json:"id,omitempty"`
	LegalForm           *string                `json:"legalForm,omitempty"`
	ManagingDirectors   []string               `json:"managingDirectors,omitempty"`
	Name                *string                `json:"name,omitempty"`
	RegistrationNumber  *string                `json:"registrationNumber,omitempty"`
	RequestTime         *int64                 `json:"requestTime,omitempty"`
	Secretaries         []string               `json:"secretaries,omitempty"`
	SicNaceCodes        []string               `json:"sicNaceCodes,omitempty"`
	Status              *string                `json:"status,omitempty"`
}

type CompanyIDSuperResponse struct {
	// List of companies
	CompanyIDSuper200ApplicationJSONObjects []CompanyIDSuper200ApplicationJSON
	// Detailed information about the error
	CompanyIDSuperDefaultApplicationJSONObject *CompanyIDSuperDefaultApplicationJSON
	ContentType                                string
	StatusCode                                 int
	RawResponse                                *http.Response
}
