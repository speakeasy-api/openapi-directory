// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RealTimePaymentsTransferTransferApproval - If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
type RealTimePaymentsTransferTransferApproval struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
	ApprovedAt time.Time `json:"approved_at"`
	// If the Transfer was approved by a user in the dashboard, the email address of that user.
	ApprovedBy string `json:"approved_by"`
}

// RealTimePaymentsTransferTransferCancellation - If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
type RealTimePaymentsTransferTransferCancellation struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
	CanceledAt time.Time `json:"canceled_at"`
	// If the Transfer was canceled by a user in the dashboard, the email address of that user.
	CanceledBy string `json:"canceled_by"`
}

// RealTimePaymentsTransferCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
type RealTimePaymentsTransferCurrencyEnum string

const (
	RealTimePaymentsTransferCurrencyEnumCad RealTimePaymentsTransferCurrencyEnum = "CAD"
	RealTimePaymentsTransferCurrencyEnumChf RealTimePaymentsTransferCurrencyEnum = "CHF"
	RealTimePaymentsTransferCurrencyEnumEur RealTimePaymentsTransferCurrencyEnum = "EUR"
	RealTimePaymentsTransferCurrencyEnumGbp RealTimePaymentsTransferCurrencyEnum = "GBP"
	RealTimePaymentsTransferCurrencyEnumJpy RealTimePaymentsTransferCurrencyEnum = "JPY"
	RealTimePaymentsTransferCurrencyEnumUsd RealTimePaymentsTransferCurrencyEnum = "USD"
)

func (e RealTimePaymentsTransferCurrencyEnum) ToPointer() *RealTimePaymentsTransferCurrencyEnum {
	return &e
}

func (e *RealTimePaymentsTransferCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = RealTimePaymentsTransferCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimePaymentsTransferCurrencyEnum: %v", v)
	}
}

// RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum - The reason the transfer was rejected as provided by the recipient bank or the Real Time Payments network.
type RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum string

const (
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumAccountClosed                                 RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "account_closed"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumAccountBlocked                                RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "account_blocked"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInvalidCreditorAccountType                    RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "invalid_creditor_account_type"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInvalidCreditorAccountNumber                  RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "invalid_creditor_account_number"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInvalidCreditorFinancialInstitutionIdentifier RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "invalid_creditor_financial_institution_identifier"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumEndCustomerDeceased                           RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "end_customer_deceased"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumNarrative                                     RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "narrative"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumTransactionForbidden                          RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "transaction_forbidden"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumTransactionTypeNotSupported                   RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "transaction_type_not_supported"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumUnexpectedAmount                              RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "unexpected_amount"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumAmountExceedsBankLimits                       RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "amount_exceeds_bank_limits"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInvalidCreditorAddress                        RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "invalid_creditor_address"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumUnknownEndCustomer                            RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "unknown_end_customer"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInvalidDebtorAddress                          RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "invalid_debtor_address"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumTimeout                                       RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "timeout"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumUnsupportedMessageForRecipient                RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "unsupported_message_for_recipient"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumRecipientConnectionNotAvailable               RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "recipient_connection_not_available"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumRealTimePaymentsSuspended                     RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "real_time_payments_suspended"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumInstructedAgentSignedOff                      RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "instructed_agent_signed_off"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumProcessingError                               RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "processing_error"
	RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnumOther                                         RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum = "other"
)

func (e RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum) ToPointer() *RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum {
	return &e
}

func (e *RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_closed":
		fallthrough
	case "account_blocked":
		fallthrough
	case "invalid_creditor_account_type":
		fallthrough
	case "invalid_creditor_account_number":
		fallthrough
	case "invalid_creditor_financial_institution_identifier":
		fallthrough
	case "end_customer_deceased":
		fallthrough
	case "narrative":
		fallthrough
	case "transaction_forbidden":
		fallthrough
	case "transaction_type_not_supported":
		fallthrough
	case "unexpected_amount":
		fallthrough
	case "amount_exceeds_bank_limits":
		fallthrough
	case "invalid_creditor_address":
		fallthrough
	case "unknown_end_customer":
		fallthrough
	case "invalid_debtor_address":
		fallthrough
	case "timeout":
		fallthrough
	case "unsupported_message_for_recipient":
		fallthrough
	case "recipient_connection_not_available":
		fallthrough
	case "real_time_payments_suspended":
		fallthrough
	case "instructed_agent_signed_off":
		fallthrough
	case "processing_error":
		fallthrough
	case "other":
		*e = RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum: %v", v)
	}
}

// RealTimePaymentsTransferRealTimePaymentsTransferRejection - If the transfer is rejected by Real Time Payments or the destination financial institution, this will contain supplemental details.
type RealTimePaymentsTransferRealTimePaymentsTransferRejection struct {
	// Additional information about the rejection provided by the recipient bank when the `reject_reason_code` is `NARRATIVE`.
	RejectReasonAdditionalInformation string `json:"reject_reason_additional_information"`
	// The reason the transfer was rejected as provided by the recipient bank or the Real Time Payments network.
	RejectReasonCode RealTimePaymentsTransferRealTimePaymentsTransferRejectionRejectReasonCodeEnum `json:"reject_reason_code"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was rejected.
	RejectedAt time.Time `json:"rejected_at"`
}

// RealTimePaymentsTransferStatusEnum - The lifecycle status of the transfer.
type RealTimePaymentsTransferStatusEnum string

const (
	RealTimePaymentsTransferStatusEnumPendingApproval   RealTimePaymentsTransferStatusEnum = "pending_approval"
	RealTimePaymentsTransferStatusEnumCanceled          RealTimePaymentsTransferStatusEnum = "canceled"
	RealTimePaymentsTransferStatusEnumPendingSubmission RealTimePaymentsTransferStatusEnum = "pending_submission"
	RealTimePaymentsTransferStatusEnumSubmitted         RealTimePaymentsTransferStatusEnum = "submitted"
	RealTimePaymentsTransferStatusEnumComplete          RealTimePaymentsTransferStatusEnum = "complete"
	RealTimePaymentsTransferStatusEnumRejected          RealTimePaymentsTransferStatusEnum = "rejected"
	RealTimePaymentsTransferStatusEnumRequiresAttention RealTimePaymentsTransferStatusEnum = "requires_attention"
)

func (e RealTimePaymentsTransferStatusEnum) ToPointer() *RealTimePaymentsTransferStatusEnum {
	return &e
}

func (e *RealTimePaymentsTransferStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_approval":
		fallthrough
	case "canceled":
		fallthrough
	case "pending_submission":
		fallthrough
	case "submitted":
		fallthrough
	case "complete":
		fallthrough
	case "rejected":
		fallthrough
	case "requires_attention":
		*e = RealTimePaymentsTransferStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimePaymentsTransferStatusEnum: %v", v)
	}
}

// RealTimePaymentsTransferRealTimePaymentsTransferSubmission - After the transfer is submitted to Real Time Payments, this will contain supplemental details.
type RealTimePaymentsTransferRealTimePaymentsTransferSubmission struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was submitted to The Clearing House.
	SubmittedAt time.Time `json:"submitted_at"`
	// The Real Time Payments network identification of the transfer.
	TransactionIdentification string `json:"transaction_identification"`
}

// RealTimePaymentsTransferTypeEnum - A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
type RealTimePaymentsTransferTypeEnum string

const (
	RealTimePaymentsTransferTypeEnumRealTimePaymentsTransfer RealTimePaymentsTransferTypeEnum = "real_time_payments_transfer"
)

func (e RealTimePaymentsTransferTypeEnum) ToPointer() *RealTimePaymentsTransferTypeEnum {
	return &e
}

func (e *RealTimePaymentsTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "real_time_payments_transfer":
		*e = RealTimePaymentsTransferTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimePaymentsTransferTypeEnum: %v", v)
	}
}

// RealTimePaymentsTransfer - Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network.
type RealTimePaymentsTransfer struct {
	// The Account from which the transfer was sent.
	AccountID string `json:"account_id"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
	Approval RealTimePaymentsTransferTransferApproval `json:"approval"`
	// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
	Cancellation RealTimePaymentsTransferTransferCancellation `json:"cancellation"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The name of the transfer's recipient as provided by the sender.
	CreditorName string `json:"creditor_name"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
	Currency RealTimePaymentsTransferCurrencyEnum `json:"currency"`
	// The destination account number.
	DestinationAccountNumber string `json:"destination_account_number"`
	// The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
	DestinationRoutingNumber string `json:"destination_routing_number"`
	// The identifier of the External Account the transfer was made to, if any.
	ExternalAccountID string `json:"external_account_id"`
	// The Real Time Payments Transfer's identifier.
	ID string `json:"id"`
	// If the transfer is rejected by Real Time Payments or the destination financial institution, this will contain supplemental details.
	Rejection RealTimePaymentsTransferRealTimePaymentsTransferRejection `json:"rejection"`
	// Unstructured information that will show on the recipient's bank statement.
	RemittanceInformation string `json:"remittance_information"`
	// The Account Number the recipient will see as having sent the transfer.
	SourceAccountNumberID string `json:"source_account_number_id"`
	// The lifecycle status of the transfer.
	Status RealTimePaymentsTransferStatusEnum `json:"status"`
	// After the transfer is submitted to Real Time Payments, this will contain supplemental details.
	Submission RealTimePaymentsTransferRealTimePaymentsTransferSubmission `json:"submission"`
	// The Transaction funding the transfer once it is complete.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
	Type RealTimePaymentsTransferTypeEnum `json:"type"`
}
