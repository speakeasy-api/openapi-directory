/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RendererFormattedStrings - Message holding the formatted strings used in the renderer.
 */
public class RendererFormattedStrings {
    /**
     * The tooltip text on an expandable chevron icon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auditGroupExpandTooltip")
    public String auditGroupExpandTooltip;

    public RendererFormattedStrings withAuditGroupExpandTooltip(String auditGroupExpandTooltip) {
        this.auditGroupExpandTooltip = auditGroupExpandTooltip;
        return this;
    }
    
    /**
     * Text link pointing to the Lighthouse scoring calculator. This link immediately follows a sentence stating the performance score is calculated from the perf metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculatorLink")
    public String calculatorLink;

    public RendererFormattedStrings withCalculatorLink(String calculatorLink) {
        this.calculatorLink = calculatorLink;
        return this;
    }
    
    /**
     * The label for the initial request in a critical request chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crcInitialNavigation")
    public String crcInitialNavigation;

    public RendererFormattedStrings withCrcInitialNavigation(String crcInitialNavigation) {
        this.crcInitialNavigation = crcInitialNavigation;
        return this;
    }
    
    /**
     * The label for values shown in the summary of critical request chains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crcLongestDurationLabel")
    public String crcLongestDurationLabel;

    public RendererFormattedStrings withCrcLongestDurationLabel(String crcLongestDurationLabel) {
        this.crcLongestDurationLabel = crcLongestDurationLabel;
        return this;
    }
    
    /**
     * Option in a dropdown menu that copies the Lighthouse JSON object to the system clipboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownCopyJSON")
    public String dropdownCopyJSON;

    public RendererFormattedStrings withDropdownCopyJSON(String dropdownCopyJSON) {
        this.dropdownCopyJSON = dropdownCopyJSON;
        return this;
    }
    
    /**
     * Option in a dropdown menu that toggles the themeing of the report between Light(default) and Dark themes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownDarkTheme")
    public String dropdownDarkTheme;

    public RendererFormattedStrings withDropdownDarkTheme(String dropdownDarkTheme) {
        this.dropdownDarkTheme = dropdownDarkTheme;
        return this;
    }
    
    /**
     * Option in a dropdown menu that opens a full Lighthouse report in a print dialog.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownPrintExpanded")
    public String dropdownPrintExpanded;

    public RendererFormattedStrings withDropdownPrintExpanded(String dropdownPrintExpanded) {
        this.dropdownPrintExpanded = dropdownPrintExpanded;
        return this;
    }
    
    /**
     * Option in a dropdown menu that opens a small, summary report in a print dialog.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownPrintSummary")
    public String dropdownPrintSummary;

    public RendererFormattedStrings withDropdownPrintSummary(String dropdownPrintSummary) {
        this.dropdownPrintSummary = dropdownPrintSummary;
        return this;
    }
    
    /**
     * Option in a dropdown menu that saves the current report as a new GitHub Gist.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownSaveGist")
    public String dropdownSaveGist;

    public RendererFormattedStrings withDropdownSaveGist(String dropdownSaveGist) {
        this.dropdownSaveGist = dropdownSaveGist;
        return this;
    }
    
    /**
     * Option in a dropdown menu that saves the Lighthouse report HTML locally to the system as a '.html' file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownSaveHTML")
    public String dropdownSaveHTML;

    public RendererFormattedStrings withDropdownSaveHTML(String dropdownSaveHTML) {
        this.dropdownSaveHTML = dropdownSaveHTML;
        return this;
    }
    
    /**
     * Option in a dropdown menu that saves the Lighthouse JSON object to the local system as a '.json' file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownSaveJSON")
    public String dropdownSaveJSON;

    public RendererFormattedStrings withDropdownSaveJSON(String dropdownSaveJSON) {
        this.dropdownSaveJSON = dropdownSaveJSON;
        return this;
    }
    
    /**
     * Option in a dropdown menu that opens the current report in the Lighthouse Viewer Application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropdownViewer")
    public String dropdownViewer;

    public RendererFormattedStrings withDropdownViewer(String dropdownViewer) {
        this.dropdownViewer = dropdownViewer;
        return this;
    }
    
    /**
     * The label shown next to an audit or metric that has had an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorLabel")
    public String errorLabel;

    public RendererFormattedStrings withErrorLabel(String errorLabel) {
        this.errorLabel = errorLabel;
        return this;
    }
    
    /**
     * The error string shown next to an erroring audit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMissingAuditInfo")
    public String errorMissingAuditInfo;

    public RendererFormattedStrings withErrorMissingAuditInfo(String errorMissingAuditInfo) {
        this.errorMissingAuditInfo = errorMissingAuditInfo;
        return this;
    }
    
    /**
     * Label for button to create an issue against the Lighthouse GitHub project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footerIssue")
    public String footerIssue;

    public RendererFormattedStrings withFooterIssue(String footerIssue) {
        this.footerIssue = footerIssue;
        return this;
    }
    
    /**
     * The title of the lab data performance category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labDataTitle")
    public String labDataTitle;

    public RendererFormattedStrings withLabDataTitle(String labDataTitle) {
        this.labDataTitle = labDataTitle;
        return this;
    }
    
    /**
     * The disclaimer shown under performance explaining that the network can vary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lsPerformanceCategoryDescription")
    public String lsPerformanceCategoryDescription;

    public RendererFormattedStrings withLsPerformanceCategoryDescription(String lsPerformanceCategoryDescription) {
        this.lsPerformanceCategoryDescription = lsPerformanceCategoryDescription;
        return this;
    }
    
    /**
     * The heading shown above a list of audits that were not computerd in the run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manualAuditsGroupTitle")
    public String manualAuditsGroupTitle;

    public RendererFormattedStrings withManualAuditsGroupTitle(String manualAuditsGroupTitle) {
        this.manualAuditsGroupTitle = manualAuditsGroupTitle;
        return this;
    }
    
    /**
     * The heading shown above a list of audits that do not apply to a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notApplicableAuditsGroupTitle")
    public String notApplicableAuditsGroupTitle;

    public RendererFormattedStrings withNotApplicableAuditsGroupTitle(String notApplicableAuditsGroupTitle) {
        this.notApplicableAuditsGroupTitle = notApplicableAuditsGroupTitle;
        return this;
    }
    
    /**
     * The heading for the estimated page load savings opportunity of an audit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunityResourceColumnLabel")
    public String opportunityResourceColumnLabel;

    public RendererFormattedStrings withOpportunityResourceColumnLabel(String opportunityResourceColumnLabel) {
        this.opportunityResourceColumnLabel = opportunityResourceColumnLabel;
        return this;
    }
    
    /**
     * The heading for the estimated page load savings of opportunity audits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunitySavingsColumnLabel")
    public String opportunitySavingsColumnLabel;

    public RendererFormattedStrings withOpportunitySavingsColumnLabel(String opportunitySavingsColumnLabel) {
        this.opportunitySavingsColumnLabel = opportunitySavingsColumnLabel;
        return this;
    }
    
    /**
     * The heading that is shown above a list of audits that are passing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passedAuditsGroupTitle")
    public String passedAuditsGroupTitle;

    public RendererFormattedStrings withPassedAuditsGroupTitle(String passedAuditsGroupTitle) {
        this.passedAuditsGroupTitle = passedAuditsGroupTitle;
        return this;
    }
    
    /**
     * Descriptive explanation for emulation setting when emulating a generic desktop form factor, as opposed to a mobile-device like form factor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeDesktopEmulation")
    public String runtimeDesktopEmulation;

    public RendererFormattedStrings withRuntimeDesktopEmulation(String runtimeDesktopEmulation) {
        this.runtimeDesktopEmulation = runtimeDesktopEmulation;
        return this;
    }
    
    /**
     * Descriptive explanation for emulation setting when emulating a Nexus 5X mobile device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeMobileEmulation")
    public String runtimeMobileEmulation;

    public RendererFormattedStrings withRuntimeMobileEmulation(String runtimeMobileEmulation) {
        this.runtimeMobileEmulation = runtimeMobileEmulation;
        return this;
    }
    
    /**
     * Descriptive explanation for emulation setting when no device emulation is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeNoEmulation")
    public String runtimeNoEmulation;

    public RendererFormattedStrings withRuntimeNoEmulation(String runtimeNoEmulation) {
        this.runtimeNoEmulation = runtimeNoEmulation;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the version of the Axe library used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsAxeVersion")
    public String runtimeSettingsAxeVersion;

    public RendererFormattedStrings withRuntimeSettingsAxeVersion(String runtimeSettingsAxeVersion) {
        this.runtimeSettingsAxeVersion = runtimeSettingsAxeVersion;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the estimated CPU power of the machine running Lighthouse. Example row values: 532, 1492, 783.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsBenchmark")
    public String runtimeSettingsBenchmark;

    public RendererFormattedStrings withRuntimeSettingsBenchmark(String runtimeSettingsBenchmark) {
        this.runtimeSettingsBenchmark = runtimeSettingsBenchmark;
        return this;
    }
    
    /**
     * Label for a row in a table that describes the CPU throttling conditions that were used during a Lighthouse run, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsCPUThrottling")
    public String runtimeSettingsCPUThrottling;

    public RendererFormattedStrings withRuntimeSettingsCPUThrottling(String runtimeSettingsCPUThrottling) {
        this.runtimeSettingsCPUThrottling = runtimeSettingsCPUThrottling;
        return this;
    }
    
    /**
     * Label for a row in a table that shows in what tool Lighthouse is being run (e.g. The lighthouse CLI, Chrome DevTools, Lightrider, WebPageTest, etc).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsChannel")
    public String runtimeSettingsChannel;

    public RendererFormattedStrings withRuntimeSettingsChannel(String runtimeSettingsChannel) {
        this.runtimeSettingsChannel = runtimeSettingsChannel;
        return this;
    }
    
    /**
     * Label for a row in a table that describes the kind of device that was emulated for the Lighthouse run. Example values for row elements: 'No Emulation', 'Emulated Desktop', etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsDevice")
    public String runtimeSettingsDevice;

    public RendererFormattedStrings withRuntimeSettingsDevice(String runtimeSettingsDevice) {
        this.runtimeSettingsDevice = runtimeSettingsDevice;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the time at which a Lighthouse run was conducted; formatted as a timestamp, e.g. Jan 1, 1970 12:00 AM UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsFetchTime")
    public String runtimeSettingsFetchTime;

    public RendererFormattedStrings withRuntimeSettingsFetchTime(String runtimeSettingsFetchTime) {
        this.runtimeSettingsFetchTime = runtimeSettingsFetchTime;
        return this;
    }
    
    /**
     * Label for a row in a table that describes the network throttling conditions that were used during a Lighthouse run, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsNetworkThrottling")
    public String runtimeSettingsNetworkThrottling;

    public RendererFormattedStrings withRuntimeSettingsNetworkThrottling(String runtimeSettingsNetworkThrottling) {
        this.runtimeSettingsNetworkThrottling = runtimeSettingsNetworkThrottling;
        return this;
    }
    
    /**
     * Title of the Runtime settings table in a Lighthouse report. Runtime settings are the environment configurations that a specific report used at auditing time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsTitle")
    public String runtimeSettingsTitle;

    public RendererFormattedStrings withRuntimeSettingsTitle(String runtimeSettingsTitle) {
        this.runtimeSettingsTitle = runtimeSettingsTitle;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the User Agent that was detected on the Host machine that ran Lighthouse.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsUA")
    public String runtimeSettingsUA;

    public RendererFormattedStrings withRuntimeSettingsUA(String runtimeSettingsUA) {
        this.runtimeSettingsUA = runtimeSettingsUA;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the User Agent that was used to send out all network requests during the Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsUANetwork")
    public String runtimeSettingsUANetwork;

    public RendererFormattedStrings withRuntimeSettingsUANetwork(String runtimeSettingsUANetwork) {
        this.runtimeSettingsUANetwork = runtimeSettingsUANetwork;
        return this;
    }
    
    /**
     * Label for a row in a table that shows the URL that was audited during a Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeSettingsUrl")
    public String runtimeSettingsUrl;

    public RendererFormattedStrings withRuntimeSettingsUrl(String runtimeSettingsUrl) {
        this.runtimeSettingsUrl = runtimeSettingsUrl;
        return this;
    }
    
    /**
     * Descriptive explanation for a runtime setting that is set to an unknown value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeUnknown")
    public String runtimeUnknown;

    public RendererFormattedStrings withRuntimeUnknown(String runtimeUnknown) {
        this.runtimeUnknown = runtimeUnknown;
        return this;
    }
    
    /**
     * The label that explains the score gauges scale (0-49, 50-89, 90-100).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scorescaleLabel")
    public String scorescaleLabel;

    public RendererFormattedStrings withScorescaleLabel(String scorescaleLabel) {
        this.scorescaleLabel = scorescaleLabel;
        return this;
    }
    
    /**
     * Label preceding a radio control for filtering the list of audits. The radio choices are various performance metrics (FCP, LCP, TBT), and if chosen, the audits in the report are hidden if they are not relevant to the selected metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showRelevantAudits")
    public String showRelevantAudits;

    public RendererFormattedStrings withShowRelevantAudits(String showRelevantAudits) {
        this.showRelevantAudits = showRelevantAudits;
        return this;
    }
    
    /**
     * The label for the button to show only a few lines of a snippet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippetCollapseButtonLabel")
    public String snippetCollapseButtonLabel;

    public RendererFormattedStrings withSnippetCollapseButtonLabel(String snippetCollapseButtonLabel) {
        this.snippetCollapseButtonLabel = snippetCollapseButtonLabel;
        return this;
    }
    
    /**
     * The label for the button to show all lines of a snippet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippetExpandButtonLabel")
    public String snippetExpandButtonLabel;

    public RendererFormattedStrings withSnippetExpandButtonLabel(String snippetExpandButtonLabel) {
        this.snippetExpandButtonLabel = snippetExpandButtonLabel;
        return this;
    }
    
    /**
     * This label is for a filter checkbox above a table of items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thirdPartyResourcesLabel")
    public String thirdPartyResourcesLabel;

    public RendererFormattedStrings withThirdPartyResourcesLabel(String thirdPartyResourcesLabel) {
        this.thirdPartyResourcesLabel = thirdPartyResourcesLabel;
        return this;
    }
    
    /**
     * Descriptive explanation for environment throttling that was provided by the runtime environment instead of provided by Lighthouse throttling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("throttlingProvided")
    public String throttlingProvided;

    public RendererFormattedStrings withThrottlingProvided(String throttlingProvided) {
        this.throttlingProvided = throttlingProvided;
        return this;
    }
    
    /**
     * The label shown preceding important warnings that may have invalidated an entire report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toplevelWarningsMessage")
    public String toplevelWarningsMessage;

    public RendererFormattedStrings withToplevelWarningsMessage(String toplevelWarningsMessage) {
        this.toplevelWarningsMessage = toplevelWarningsMessage;
        return this;
    }
    
    /**
     * The disclaimer shown below a performance metric value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("varianceDisclaimer")
    public String varianceDisclaimer;

    public RendererFormattedStrings withVarianceDisclaimer(String varianceDisclaimer) {
        this.varianceDisclaimer = varianceDisclaimer;
        return this;
    }
    
    /**
     * Label for a button that opens the Treemap App
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewTreemapLabel")
    public String viewTreemapLabel;

    public RendererFormattedStrings withViewTreemapLabel(String viewTreemapLabel) {
        this.viewTreemapLabel = viewTreemapLabel;
        return this;
    }
    
    /**
     * The heading that is shown above a list of audits that have warnings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warningAuditsGroupTitle")
    public String warningAuditsGroupTitle;

    public RendererFormattedStrings withWarningAuditsGroupTitle(String warningAuditsGroupTitle) {
        this.warningAuditsGroupTitle = warningAuditsGroupTitle;
        return this;
    }
    
    /**
     * The label shown above a bulleted list of warnings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warningHeader")
    public String warningHeader;

    public RendererFormattedStrings withWarningHeader(String warningHeader) {
        this.warningHeader = warningHeader;
        return this;
    }
    
    public RendererFormattedStrings(){}
}
