// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteBranchXAmzTargetEnum
type DeleteBranchXAmzTargetEnum string

const (
	DeleteBranchXAmzTargetEnumCodeCommit20150413DeleteBranch DeleteBranchXAmzTargetEnum = "CodeCommit_20150413.DeleteBranch"
)

func (e *DeleteBranchXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.DeleteBranch":
		*e = DeleteBranchXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteBranchXAmzTargetEnum: %s", s)
	}
}

type DeleteBranchHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteBranchXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteBranchRequest struct {
	Headers DeleteBranchHeaders
	Request shared.DeleteBranchInput `request:"mediaType=application/json"`
}

type DeleteBranchResponse struct {
	// BranchNameRequiredException
	BranchNameRequiredException interface{}
	ContentType                 string
	// DefaultBranchCannotBeDeletedException
	DefaultBranchCannotBeDeletedException interface{}
	// Success
	DeleteBranchOutput *shared.DeleteBranchOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidBranchNameException
	InvalidBranchNameException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
