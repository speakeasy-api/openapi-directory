"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DomainPermissionEnum(str, Enum):
    r"""User’s permission for this domain. Assigned by the server."""
    PERMISSION_UNSPECIFIED = 'PERMISSION_UNSPECIFIED'
    OWNER = 'OWNER'
    READER = 'READER'
    NONE = 'NONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Domain:
    r"""A registered domain resource in the Postmaster API."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the user registered this domain. Assigned by the server."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name of the Domain. Domain names have the form `domains/{domain_name}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com)."""  
    permission: Optional[DomainPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""User’s permission for this domain. Assigned by the server."""  
    