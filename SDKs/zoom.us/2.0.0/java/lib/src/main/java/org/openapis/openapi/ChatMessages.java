/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Chat Messages operations
 */
public class ChatMessages {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ChatMessages(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete a message
     * Delete a chat message that you previously sent to a contact or a channel. In the query parameter, you must provide either of the following:&lt;br&gt;
     * * `to_contact`: The email address of the contact to whom you sent the message. Use this parameter to delete a message sent to an individual contact in Zoom.
     * * `to_channel`: The channel ID of the channel where you sent the message. Use this parameter to delete a message sent to a channel in Zoom.
     * 
     * &lt;p style="background-color:#e1f5fe; color:#01579b; padding:8px"&gt; &lt;b&gt;Note: &lt;/b&gt; For an&lt;b&gt; account-level&lt;/b&gt; &lt;a href="https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app"&gt;OAuth app&lt;/a&gt;, this API can only be used on behalf of a user who is assigned with a &lt;b&gt;&lt;a href="https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit."&gt; role&lt;/a&gt; that has Edit permission for Chat Messages&lt;/b&gt;.&lt;/p&gt;
     * 
     * **Scope:** `chat_message:write`, `chat_message:write:admin`&lt;br&gt;
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteChatMessageResponse deleteChatMessage(org.openapis.openapi.models.operations.DeleteChatMessageRequest request, org.openapis.openapi.models.operations.DeleteChatMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteChatMessageRequest.class, baseUrl, "/chat/users/{userId}/messages/{messageId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteChatMessageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteChatMessageResponse res = new org.openapis.openapi.models.operations.DeleteChatMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update a message
     * Each chat message has a unique identifier. Use this API to edit a chat message that you previously sent to either a contact or a channel in Zoom by providing the ID of the message as the value of the `messageId` parameter. The ID can be retrieved from List User's Chat Messages API. Additionally, as a query parameter, you must provide either the **email address** of the contact or the **Channel ID** of the channel where the message was sent. 
     * 
     * **Scope:** `chat_message:write`,`chat_message:write:admin`	&lt;br&gt;
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` 
     * 
     * &lt;/b&gt; For an&lt;b&gt; account-level&lt;/b&gt; &lt;a href="https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app"&gt;OAuth app&lt;/a&gt;, this API can only be used on behalf of a user who is assigned with a &lt;b&gt;&lt;a href="https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit."&gt; role&lt;/a&gt; that has Edit permission for Chat Messages&lt;/b&gt;.&lt;/p&gt;
     * **Scope:** `chat_message:write`, `chat_message:write:admin`&lt;br&gt;
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.EditMessageResponse editMessage(org.openapis.openapi.models.operations.EditMessageRequest request, org.openapis.openapi.models.operations.EditMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.EditMessageRequest.class, baseUrl, "/chat/users/{userId}/messages/{messageId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.EditMessageResponse res = new org.openapis.openapi.models.operations.EditMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List user's chat messages
     * A Zoom user can have conversations with other Zoom users via chat. Use this API to list the current user's chat messages between the user and an individual contact or a chat channel.&lt;br&gt; In the query parameter, you must provide either of the following:&lt;br&gt;
     * * `to_contact`: The email address of the contact with whom the user conversed by sending/receiving messages.
     * * `to_channel`: The channel ID of the channel to/from which the user has sent and/or received messages.
     * 
     * &lt;br&gt; **Specify a date** in the `date` query parameter to view messages from that date. If a date is not provided, the default value for the query will be the **current date**.&lt;br&gt;
     * &lt;p style="background-color:#e1f5fe; color:#01579b; padding:8px"&gt; &lt;b&gt;Note: &lt;/b&gt; For an&lt;b&gt; account-level&lt;/b&gt; &lt;a href="https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app"&gt;OAuth app&lt;/a&gt;, this API can only be used on behalf of a user who is assigned with a &lt;a href="https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit."&gt;role&lt;/a&gt; that has &lt;b&gt;View or Edit&lt;/b&gt; permission for Chat Messages.&lt;/p&gt;&lt;br&gt;
     * 
     * &lt;br&gt;**Scopes:** `chat_message:read`, `chat_message:read:admin`&lt;br&gt;
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetChatMessagesResponse getChatMessages(org.openapis.openapi.models.operations.GetChatMessagesRequest request, org.openapis.openapi.models.operations.GetChatMessagesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetChatMessagesRequest.class, baseUrl, "/chat/users/{userId}/messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetChatMessagesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetChatMessagesResponse res = new org.openapis.openapi.models.operations.GetChatMessagesResponse() {{
            getChatMessages200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetChatMessages200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetChatMessages200ApplicationJSON.class);
                res.getChatMessages200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Send a chat message
     * Send chat messages on Zoom to either an individual user who is in your contact list or to a [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) of which you are a member. To send a message to a contact, provide the contact's email address in the `to_contact` field. Similary, to send a message to a channel, provide the Channel Id of the Channel in `to_channel` field.&lt;br&gt;
     * &lt;br&gt;**Scopes:** `chat_message:write`, `chat_message:write:admin`&lt;br&gt;
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt; &lt;p style="background-color:#e1f5fe; color:#01579b; padding:8px"&gt; &lt;b&gt;Note: &lt;/b&gt; For an&lt;b&gt; account-level&lt;/b&gt; &lt;a href="https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app"&gt;OAuth app&lt;/a&gt;, this API can only be used on behalf of a user who is assigned with a &lt;b&gt;&lt;a href="https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit."&gt; role&lt;/a&gt; that has Edit permission for Chat Messages&lt;/b&gt;.&lt;/p&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SendaChatMessageResponse sendaChatMessage(org.openapis.openapi.models.operations.SendaChatMessageRequest request, org.openapis.openapi.models.operations.SendaChatMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SendaChatMessageRequest.class, baseUrl, "/chat/users/{userId}/messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SendaChatMessageResponse res = new org.openapis.openapi.models.operations.SendaChatMessageResponse() {{
            sendaChatMessage201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SendaChatMessage201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SendaChatMessage201ApplicationJSON.class);
                res.sendaChatMessage201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }
}