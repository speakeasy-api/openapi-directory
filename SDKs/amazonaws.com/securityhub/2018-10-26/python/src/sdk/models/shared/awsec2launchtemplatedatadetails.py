"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2launchtemplatedatablockdevicemappingsetdetails as shared_awsec2launchtemplatedatablockdevicemappingsetdetails
from ..shared import awsec2launchtemplatedatacapacityreservationspecificationdetails as shared_awsec2launchtemplatedatacapacityreservationspecificationdetails
from ..shared import awsec2launchtemplatedatacpuoptionsdetails as shared_awsec2launchtemplatedatacpuoptionsdetails
from ..shared import awsec2launchtemplatedatacreditspecificationdetails as shared_awsec2launchtemplatedatacreditspecificationdetails
from ..shared import awsec2launchtemplatedataelasticgpuspecificationsetdetails as shared_awsec2launchtemplatedataelasticgpuspecificationsetdetails
from ..shared import awsec2launchtemplatedataelasticinferenceacceleratorsetdetails as shared_awsec2launchtemplatedataelasticinferenceacceleratorsetdetails
from ..shared import awsec2launchtemplatedataenclaveoptionsdetails as shared_awsec2launchtemplatedataenclaveoptionsdetails
from ..shared import awsec2launchtemplatedatahibernationoptionsdetails as shared_awsec2launchtemplatedatahibernationoptionsdetails
from ..shared import awsec2launchtemplatedataiaminstanceprofiledetails as shared_awsec2launchtemplatedataiaminstanceprofiledetails
from ..shared import awsec2launchtemplatedatainstancemarketoptionsdetails as shared_awsec2launchtemplatedatainstancemarketoptionsdetails
from ..shared import awsec2launchtemplatedatainstancerequirementsdetails as shared_awsec2launchtemplatedatainstancerequirementsdetails
from ..shared import awsec2launchtemplatedatalicensesetdetails as shared_awsec2launchtemplatedatalicensesetdetails
from ..shared import awsec2launchtemplatedatamaintenanceoptionsdetails as shared_awsec2launchtemplatedatamaintenanceoptionsdetails
from ..shared import awsec2launchtemplatedatametadataoptionsdetails as shared_awsec2launchtemplatedatametadataoptionsdetails
from ..shared import awsec2launchtemplatedatamonitoringdetails as shared_awsec2launchtemplatedatamonitoringdetails
from ..shared import awsec2launchtemplatedatanetworkinterfacesetdetails as shared_awsec2launchtemplatedatanetworkinterfacesetdetails
from ..shared import awsec2launchtemplatedataplacementdetails as shared_awsec2launchtemplatedataplacementdetails
from ..shared import awsec2launchtemplatedataprivatednsnameoptionsdetails as shared_awsec2launchtemplatedataprivatednsnameoptionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2LaunchTemplateDataDetails:
    r"""The information to include in an Amazon Elastic Compute Cloud (Amazon EC2) launch template."""
    
    block_device_mapping_set: Optional[list[shared_awsec2launchtemplatedatablockdevicemappingsetdetails.AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockDeviceMappingSet'), 'exclude': lambda f: f is None }})  
    capacity_reservation_specification: Optional[shared_awsec2launchtemplatedatacapacityreservationspecificationdetails.AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CapacityReservationSpecification'), 'exclude': lambda f: f is None }})  
    cpu_options: Optional[shared_awsec2launchtemplatedatacpuoptionsdetails.AwsEc2LaunchTemplateDataCPUOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CpuOptions'), 'exclude': lambda f: f is None }})  
    credit_specification: Optional[shared_awsec2launchtemplatedatacreditspecificationdetails.AwsEc2LaunchTemplateDataCreditSpecificationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditSpecification'), 'exclude': lambda f: f is None }})  
    disable_api_stop: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisableApiStop'), 'exclude': lambda f: f is None }})  
    disable_api_termination: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisableApiTermination'), 'exclude': lambda f: f is None }})  
    ebs_optimized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsOptimized'), 'exclude': lambda f: f is None }})  
    elastic_gpu_specification_set: Optional[list[shared_awsec2launchtemplatedataelasticgpuspecificationsetdetails.AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticGpuSpecificationSet'), 'exclude': lambda f: f is None }})  
    elastic_inference_accelerator_set: Optional[list[shared_awsec2launchtemplatedataelasticinferenceacceleratorsetdetails.AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticInferenceAcceleratorSet'), 'exclude': lambda f: f is None }})  
    enclave_options: Optional[shared_awsec2launchtemplatedataenclaveoptionsdetails.AwsEc2LaunchTemplateDataEnclaveOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnclaveOptions'), 'exclude': lambda f: f is None }})  
    hibernation_options: Optional[shared_awsec2launchtemplatedatahibernationoptionsdetails.AwsEc2LaunchTemplateDataHibernationOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HibernationOptions'), 'exclude': lambda f: f is None }})  
    iam_instance_profile: Optional[shared_awsec2launchtemplatedataiaminstanceprofiledetails.AwsEc2LaunchTemplateDataIamInstanceProfileDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamInstanceProfile'), 'exclude': lambda f: f is None }})  
    image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageId'), 'exclude': lambda f: f is None }})  
    instance_initiated_shutdown_behavior: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceInitiatedShutdownBehavior'), 'exclude': lambda f: f is None }})  
    instance_market_options: Optional[shared_awsec2launchtemplatedatainstancemarketoptionsdetails.AwsEc2LaunchTemplateDataInstanceMarketOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceMarketOptions'), 'exclude': lambda f: f is None }})  
    instance_requirements: Optional[shared_awsec2launchtemplatedatainstancerequirementsdetails.AwsEc2LaunchTemplateDataInstanceRequirementsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRequirements'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    kernel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KernelId'), 'exclude': lambda f: f is None }})  
    key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyName'), 'exclude': lambda f: f is None }})  
    license_set: Optional[list[shared_awsec2launchtemplatedatalicensesetdetails.AwsEc2LaunchTemplateDataLicenseSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseSet'), 'exclude': lambda f: f is None }})  
    maintenance_options: Optional[shared_awsec2launchtemplatedatamaintenanceoptionsdetails.AwsEc2LaunchTemplateDataMaintenanceOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintenanceOptions'), 'exclude': lambda f: f is None }})  
    metadata_options: Optional[shared_awsec2launchtemplatedatametadataoptionsdetails.AwsEc2LaunchTemplateDataMetadataOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataOptions'), 'exclude': lambda f: f is None }})  
    monitoring: Optional[shared_awsec2launchtemplatedatamonitoringdetails.AwsEc2LaunchTemplateDataMonitoringDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Monitoring'), 'exclude': lambda f: f is None }})  
    network_interface_set: Optional[list[shared_awsec2launchtemplatedatanetworkinterfacesetdetails.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaceSet'), 'exclude': lambda f: f is None }})  
    placement: Optional[shared_awsec2launchtemplatedataplacementdetails.AwsEc2LaunchTemplateDataPlacementDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Placement'), 'exclude': lambda f: f is None }})  
    private_dns_name_options: Optional[shared_awsec2launchtemplatedataprivatednsnameoptionsdetails.AwsEc2LaunchTemplateDataPrivateDNSNameOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivateDnsNameOptions'), 'exclude': lambda f: f is None }})  
    ram_disk_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RamDiskId'), 'exclude': lambda f: f is None }})  
    security_group_id_set: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIdSet'), 'exclude': lambda f: f is None }})  
    security_group_set: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupSet'), 'exclude': lambda f: f is None }})  
    user_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserData'), 'exclude': lambda f: f is None }})  
    