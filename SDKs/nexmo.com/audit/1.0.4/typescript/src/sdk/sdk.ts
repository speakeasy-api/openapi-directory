/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.nexmo.com/beta/audit"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>.
 *
 * @remarks
 * _Please note that the Audit API is currently in Beta_
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Retrieve individual audit event
   *
   * @remarks
   * Get the specified audit event.
   *
   */
  getEvent(
    req: operations.GetEventRequest,
    security: operations.GetEventSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/events/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventResponse = new operations.GetEventResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.auditEvent = utils.objectToClass(
              httpRes?.data,
              shared.AuditEvent
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorUnauthorized = utils.objectToClass(
              httpRes?.data,
              shared.ErrorUnauthorized
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve audit events
   *
   * @remarks
   * Get a series of audit events describing changes made to your Vonage API account over time.
   *
   */
  getEvents(
    req: operations.GetEventsRequest,
    security: operations.GetEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/events";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsResponse =
        new operations.GetEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.auditResp = utils.objectToClass(
              httpRes?.data,
              shared.AuditResp
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorUnauthorized = utils.objectToClass(
              httpRes?.data,
              shared.ErrorUnauthorized
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorForbidden = utils.objectToClass(
              httpRes?.data,
              shared.ErrorForbidden
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve audit event types
   *
   * @remarks
   * Get audit event types.
   *
   */
  getEventsOptions(
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsOptionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/events";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "options",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsOptionsResponse =
        new operations.GetEventsOptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.auditEventTypesResp = utils.objectToClass(
              httpRes?.data,
              shared.AuditEventTypesResp
            );
          }
          break;
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.noContent = utils.objectToClass(
              httpRes?.data,
              shared.NoContent
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorUnauthorized = utils.objectToClass(
              httpRes?.data,
              shared.ErrorUnauthorized
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorForbidden = utils.objectToClass(
              httpRes?.data,
              shared.ErrorForbidden
            );
          }
          break;
      }

      return res;
    });
  }
}
