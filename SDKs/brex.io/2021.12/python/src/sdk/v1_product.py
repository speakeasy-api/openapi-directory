"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class V1Product:
    r"""Product Search, Order and Retrieve methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def product_availability(self, request: operations.ProductAvailabilityRequest, security: operations.ProductAvailabilitySecurity) -> operations.ProductAvailabilityResponse:
        r"""Retrieves a document availability result
        Check availability and valid options for a particular product for a particular company identfied by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductAvailabilityRequest, base_url, '/api/v1/product/availability/{sku}/{subjectId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductAvailabilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductAvailability200ApplicationJSON])
                res.product_availability_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductAvailabilityDefaultApplicationJSON])
                res.product_availability_default_application_json_object = out

        return res

    def product_catalog(self, request: operations.ProductCatalogRequest, security: operations.ProductCatalogSecurity) -> operations.ProductCatalogResponse:
        r"""Returns a catalog of products
        Returns a catalog of purchasable products available with some metadata for a particular country
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductCatalogRequest, base_url, '/api/v1/product/catalog/{country}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductCatalog200ApplicationJSON])
                res.product_catalog_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductCatalogDefaultApplicationJSON])
                res.product_catalog_default_application_json_object = out

        return res

    def product_notifier(self, request: operations.ProductNotifierRequest, security: operations.ProductNotifierSecurity) -> operations.ProductNotifierResponse:
        r"""Returns metadata for a notifier
        Queries and returns all metadata associated with a notifier identified by its notifer id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductNotifierRequest, base_url, '/api/v1/product/notifier/{notifierId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductNotifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductNotifier200ApplicationJSON])
                res.product_notifier_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductNotifierDefaultApplicationJSON])
                res.product_notifier_default_application_json_object = out

        return res

    def product_notifier_create(self, request: operations.ProductNotifierCreateRequest, security: operations.ProductNotifierCreateSecurity) -> operations.ProductNotifierCreateResponse:
        r"""Creates a notifier for an order
        Create a notifier for a particular order. Parameters can be supplied in the path
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductNotifierCreateRequest, base_url, '/api/v1/product/notifier/{orderId}/{type}/{uri}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductNotifierCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductNotifierCreate200ApplicationJSON])
                res.product_notifier_create_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductNotifierCreateDefaultApplicationJSON])
                res.product_notifier_create_default_application_json_object = out

        return res

    def product_order(self, request: operations.ProductOrderRequest, security: operations.ProductOrderSecurity) -> operations.ProductOrderResponse:
        r"""Places a product order
        Place an order for a particular product identified by its SKU for a particular company identified by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductOrderRequest, base_url, '/api/v1/product/order/{sku}/{subjectId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrder200ApplicationJSON])
                res.product_order_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderDefaultApplicationJSON])
                res.product_order_default_application_json_object = out

        return res

    def product_order_concierge(self, request: operations.ProductOrderConciergeRequestBody, security: operations.ProductOrderConciergeSecurity) -> operations.ProductOrderConciergeResponse:
        r"""Places a concierge order
        Place an order for a concierge product
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/product/order/concierge'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductOrderConciergeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderConcierge200ApplicationJSON])
                res.product_order_concierge_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderConciergeDefaultApplicationJSON])
                res.product_order_concierge_default_application_json_object = out

        return res

    def product_order_ubo(self, request: operations.ProductOrderUboRequestBody, security: operations.ProductOrderUboSecurity) -> operations.ProductOrderUboResponse:
        r"""Places a UBO order
        Place an order for a UBO (ultimate beneficial owner) discovery report
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/product/order/ubo'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductOrderUboResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderUbo200ApplicationJSON])
                res.product_order_ubo_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderUboDefaultApplicationJSON])
                res.product_order_ubo_default_application_json_object = out

        return res

    def product_order_with_option(self, request: operations.ProductOrderWithOptionRequest, security: operations.ProductOrderWithOptionSecurity) -> operations.ProductOrderWithOptionResponse:
        r"""Places a product order
        Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductOrderWithOptionRequest, base_url, '/api/v1/product/order/{sku}/{option}/{subjectId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductOrderWithOptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderWithOption200ApplicationJSON])
                res.product_order_with_option_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductOrderWithOptionDefaultApplicationJSON])
                res.product_order_with_option_default_application_json_object = out

        return res

    def product_retrieve(self, request: operations.ProductRetrieveRequest, security: operations.ProductRetrieveSecurity) -> operations.ProductRetrieveResponse:
        r"""Retrieves the result of an order
        Retrieves the document or structured data associated with a completed order identified with its order id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductRetrieveRequest, base_url, '/api/v1/product/{orderId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductRetrieveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.product_retrieve_200_application_json_one_of = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductRetrieveDefaultApplicationJSON])
                res.product_retrieve_default_application_json_object = out

        return res

    def product_search(self, request: operations.ProductSearchRequest, security: operations.ProductSearchSecurity) -> operations.ProductSearchResponse:
        r"""Returns a list of products
        Search for possible products for a particular company identified by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductSearchRequest, base_url, '/api/v1/product/search/{subjectId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.ProductSearch200ApplicationJSON]])
                res.product_search_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductSearchDefaultApplicationJSON])
                res.product_search_default_application_json_object = out

        return res

    def product_status(self, request: operations.ProductStatusRequest, security: operations.ProductStatusSecurity) -> operations.ProductStatusResponse:
        r"""Returns metadata for a order
        Retrieve the current status of an order identified by its order id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductStatusRequest, base_url, '/api/v1/product/status/{orderId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductStatus200ApplicationJSON])
                res.product_status_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductStatusDefaultApplicationJSON])
                res.product_status_default_application_json_object = out

        return res

    def product_update_action(self, request: operations.ProductUpdateActionRequest, security: operations.ProductUpdateActionSecurity) -> operations.ProductUpdateActionResponse:
        r"""Updates metadata of an order
        Update an existing order identified by its order id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductUpdateActionRequest, base_url, '/api/v1/product/update/{action}/{orderId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductUpdateActionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductUpdateAction200ApplicationJSON])
                res.product_update_action_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProductUpdateActionDefaultApplicationJSON])
                res.product_update_action_default_application_json_object = out

        return res

    