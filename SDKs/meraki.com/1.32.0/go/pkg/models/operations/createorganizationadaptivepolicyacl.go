// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum - IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'
type CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum string

const (
	CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumAny  CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "any"
	CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumIpv4 CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "ipv4"
	CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnumIpv6 CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = "ipv6"
)

func (e CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum) ToPointer() *CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum {
	return &e
}

func (e *CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum: %v", v)
	}
}

// CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule.
type CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum string

const (
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnumAllow CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum = "allow"
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnumDeny  CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum = "deny"
)

func (e CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum) ToPointer() *CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum {
	return &e
}

func (e *CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum: %v", v)
	}
}

// CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').
type CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum string

const (
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumAny  CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "any"
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumIcmp CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "icmp"
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumTCP  CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "tcp"
	CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnumUDP  CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = "udp"
)

func (e CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum) ToPointer() *CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum {
	return &e
}

func (e *CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "icmp":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum: %v", v)
	}
}

type CreateOrganizationAdaptivePolicyACLRequestBodyRules struct {
	// Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	DstPort *string `json:"dstPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule.
	Policy CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').
	Protocol CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum `json:"protocol"`
	// Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	SrcPort *string `json:"srcPort,omitempty"`
}

type CreateOrganizationAdaptivePolicyACLRequestBody struct {
	// Description of the adaptive policy ACL
	Description *string `json:"description,omitempty"`
	// IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'
	IPVersion CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum `json:"ipVersion"`
	// Name of the adaptive policy ACL
	Name string `json:"name"`
	// An ordered array of the adaptive policy ACL rules.
	Rules []CreateOrganizationAdaptivePolicyACLRequestBodyRules `json:"rules"`
}

type CreateOrganizationAdaptivePolicyACLRequest struct {
	RequestBody    CreateOrganizationAdaptivePolicyACLRequestBody `request:"mediaType=application/json"`
	OrganizationID string                                         `pathParam:"style=simple,explode=false,name=organizationId"`
}

type CreateOrganizationAdaptivePolicyACLResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateOrganizationAdaptivePolicyACL200ApplicationJSONObject map[string]interface{}
}
