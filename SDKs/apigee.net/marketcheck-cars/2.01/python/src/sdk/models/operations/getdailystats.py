"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dailystats as shared_dailystats
from ..shared import error as shared_error
from enum import Enum
from typing import Optional

class GetDailyStatsCarTypeEnum(str, Enum):
    r"""Inventory type for which stats are to be searched, default is used"""
    NEW = 'new'
    USED = 'used'

class GetDailyStatsCountryEnum(str, Enum):
    r"""Country for which the stats are to be searched"""
    US = 'us'
    CA = 'ca'


@dataclasses.dataclass
class GetDailyStatsRequest:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""The API Authentication Key. Mandatory with all API calls."""  
    car_type: Optional[GetDailyStatsCarTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'car_type', 'style': 'form', 'explode': True }})
    r"""Inventory type for which stats are to be searched, default is used"""  
    city_state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city_state', 'style': 'form', 'explode': True }})
    r"""City level stats, pipe seperated like city_state=jacksonville|FL"""  
    country: Optional[GetDailyStatsCountryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Country for which the stats are to be searched"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""State level stats"""  
    taxonomy_vin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'taxonomy_vin', 'style': 'form', 'explode': True }})
    r"""Taxonomy vin for referance to find stats of similar cars"""  
    vin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vin', 'style': 'form', 'explode': True }})
    r"""VIN that will be transformed to taxonomy_vin"""  
    ymm: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ymm', 'style': 'form', 'explode': True }})
    r"""Year, Make, Model of the car, Separated by pipe e.g. ymm=2015|ford|f-150"""  
    ymmt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ymmt', 'style': 'form', 'explode': True }})
    r"""Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt=2015|ford|f-150|platinum"""  
    

@dataclasses.dataclass
class GetDailyStatsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    daily_stats: Optional[shared_dailystats.DailyStats] = dataclasses.field(default=None)
    r"""Data with Market averages and stats"""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    