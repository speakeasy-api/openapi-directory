/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VerifyAssertionResponse - Response of verifying the IDP assertion.
 */
public class VerifyAssertionResponse {
    /**
     * The action code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public String action;
    public VerifyAssertionResponse withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * URL for OTA app installation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appInstallationUrl")
    public String appInstallationUrl;
    public VerifyAssertionResponse withAppInstallationUrl(String appInstallationUrl) {
        this.appInstallationUrl = appInstallationUrl;
        return this;
    }
    
    /**
     * The custom scheme used by mobile app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appScheme")
    public String appScheme;
    public VerifyAssertionResponse withAppScheme(String appScheme) {
        this.appScheme = appScheme;
        return this;
    }
    
    /**
     * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public String context;
    public VerifyAssertionResponse withContext(String context) {
        this.context = context;
        return this;
    }
    
    /**
     * The birth date of the IdP account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateOfBirth")
    public String dateOfBirth;
    public VerifyAssertionResponse withDateOfBirth(String dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
        return this;
    }
    
    /**
     * The display name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public VerifyAssertionResponse withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The email returned by the IdP. NOTE: The federated login user may not own the email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public VerifyAssertionResponse withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * It's true if the email is recycled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailRecycled")
    public Boolean emailRecycled;
    public VerifyAssertionResponse withEmailRecycled(Boolean emailRecycled) {
        this.emailRecycled = emailRecycled;
        return this;
    }
    
    /**
     * The value is true if the IDP is also the email provider. It means the user owns the email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailVerified")
    public Boolean emailVerified;
    public VerifyAssertionResponse withEmailVerified(Boolean emailVerified) {
        this.emailVerified = emailVerified;
        return this;
    }
    
    /**
     * Client error code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public String errorMessage;
    public VerifyAssertionResponse withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresIn")
    public String expiresIn;
    public VerifyAssertionResponse withExpiresIn(String expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * The unique ID identifies the IdP account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("federatedId")
    public String federatedId;
    public VerifyAssertionResponse withFederatedId(String federatedId) {
        this.federatedId = federatedId;
        return this;
    }
    
    /**
     * The first name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    public String firstName;
    public VerifyAssertionResponse withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The full name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullName")
    public String fullName;
    public VerifyAssertionResponse withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    /**
     * The ID token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    public String idToken;
    public VerifyAssertionResponse withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputEmail")
    public String inputEmail;
    public VerifyAssertionResponse withInputEmail(String inputEmail) {
        this.inputEmail = inputEmail;
        return this;
    }
    
    /**
     * True if it's a new user sign-in, false if it's a returning user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isNewUser")
    public Boolean isNewUser;
    public VerifyAssertionResponse withIsNewUser(Boolean isNewUser) {
        this.isNewUser = isNewUser;
        return this;
    }
    
    /**
     * The fixed string "identitytoolkit#VerifyAssertionResponse".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public VerifyAssertionResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The language preference of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public VerifyAssertionResponse withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The last name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    public String lastName;
    public VerifyAssertionResponse withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localId")
    public String localId;
    public VerifyAssertionResponse withLocalId(String localId) {
        this.localId = localId;
        return this;
    }
    
    /**
     * Whether the assertion is from a non-trusted IDP and need account linking confirmation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("needConfirmation")
    public Boolean needConfirmation;
    public VerifyAssertionResponse withNeedConfirmation(Boolean needConfirmation) {
        this.needConfirmation = needConfirmation;
        return this;
    }
    
    /**
     * Whether need client to supply email to complete the federated login flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("needEmail")
    public Boolean needEmail;
    public VerifyAssertionResponse withNeedEmail(Boolean needEmail) {
        this.needEmail = needEmail;
        return this;
    }
    
    /**
     * The nick name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickName")
    public String nickName;
    public VerifyAssertionResponse withNickName(String nickName) {
        this.nickName = nickName;
        return this;
    }
    
    /**
     * The OAuth2 access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthAccessToken")
    public String oauthAccessToken;
    public VerifyAssertionResponse withOauthAccessToken(String oauthAccessToken) {
        this.oauthAccessToken = oauthAccessToken;
        return this;
    }
    
    /**
     * The OAuth2 authorization code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthAuthorizationCode")
    public String oauthAuthorizationCode;
    public VerifyAssertionResponse withOauthAuthorizationCode(String oauthAuthorizationCode) {
        this.oauthAuthorizationCode = oauthAuthorizationCode;
        return this;
    }
    
    /**
     * The lifetime in seconds of the OAuth2 access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthExpireIn")
    public Integer oauthExpireIn;
    public VerifyAssertionResponse withOauthExpireIn(Integer oauthExpireIn) {
        this.oauthExpireIn = oauthExpireIn;
        return this;
    }
    
    /**
     * The OIDC id token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthIdToken")
    public String oauthIdToken;
    public VerifyAssertionResponse withOauthIdToken(String oauthIdToken) {
        this.oauthIdToken = oauthIdToken;
        return this;
    }
    
    /**
     * The user approved request token for the OpenID OAuth extension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthRequestToken")
    public String oauthRequestToken;
    public VerifyAssertionResponse withOauthRequestToken(String oauthRequestToken) {
        this.oauthRequestToken = oauthRequestToken;
        return this;
    }
    
    /**
     * The scope for the OpenID OAuth extension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthScope")
    public String oauthScope;
    public VerifyAssertionResponse withOauthScope(String oauthScope) {
        this.oauthScope = oauthScope;
        return this;
    }
    
    /**
     * The OAuth1 access token secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthTokenSecret")
    public String oauthTokenSecret;
    public VerifyAssertionResponse withOauthTokenSecret(String oauthTokenSecret) {
        this.oauthTokenSecret = oauthTokenSecret;
        return this;
    }
    
    /**
     * The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalEmail")
    public String originalEmail;
    public VerifyAssertionResponse withOriginalEmail(String originalEmail) {
        this.originalEmail = originalEmail;
        return this;
    }
    
    /**
     * The URI of the public accessible profiel picture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    public String photoUrl;
    public VerifyAssertionResponse withPhotoUrl(String photoUrl) {
        this.photoUrl = photoUrl;
        return this;
    }
    
    /**
     * The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the "providerId" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the "identifier" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("providerId")
    public String providerId;
    public VerifyAssertionResponse withProviderId(String providerId) {
        this.providerId = providerId;
        return this;
    }
    
    /**
     * Raw IDP-returned user info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawUserInfo")
    public String rawUserInfo;
    public VerifyAssertionResponse withRawUserInfo(String rawUserInfo) {
        this.rawUserInfo = rawUserInfo;
        return this;
    }
    
    /**
     * If idToken is STS id token, then this field will be refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    public String refreshToken;
    public VerifyAssertionResponse withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
    /**
     * The screen_name of a Twitter user or the login name at Github.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenName")
    public String screenName;
    public VerifyAssertionResponse withScreenName(String screenName) {
        this.screenName = screenName;
        return this;
    }
    
    /**
     * The timezone of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;
    public VerifyAssertionResponse withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * When action is 'map', contains the idps which can be used for confirmation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifiedProvider")
    public String[] verifiedProvider;
    public VerifyAssertionResponse withVerifiedProvider(String[] verifiedProvider) {
        this.verifiedProvider = verifiedProvider;
        return this;
    }
    
}
