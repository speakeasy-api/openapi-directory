"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PlaceSearch:
    r"""Global places search to identify geographical names and places"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def find_place(self, request: operations.FindPlaceRequest) -> operations.FindPlaceResponse:
        r"""Find Place
        Query for geographical places across countries. Each query will return a list of place suggestions, which consists of a place name, descriptive name and id.
        
        This API returns geographical information such as countries, capitals, administrative areas and more. It is ideal for correctly identifying a place along with any other details like geolocation.
        
        ## Implementing Place Autocomplete
        
        Extracting the full information of a place is a 2 step process:
        
        1. Retrieve place suggestions via /places
        2. Retrieve the entire place with the ID provided in the suggestion
        
        ## Suggestion Format
        
        Each place suggestion contains a descriptive name which you can provide to users to uniquely idenfity a place.
        
        ## Rate Limiting
        
        You can make up to 3000 requests to the autocomplete API within a 5 minute span. The HTTP Header contains information on your current rate limit.
        
        | Header                  | Description                                                                            |
        | ----------------------- | -------------------------------------------------------------------------------------- |
        | `X-RateLimit-Limit`     | The maximum number of requests that can be made in 5 minutes                           |
        | `X-RateLimit-Remaining` | The remaining requests within the current rate limit window                            |
        | `X-RateLimit-Reset`     | The time when the rate limit window resets in Unix Time (seconds) or UTC Epoch seconds |
        
        ## Pricing
        
        This API currently does not affect your balance. However, resolving a suggestion into a full place requires a paid request.
        
        Please note, this API is not intended as a standalone free resource. Integrations that consistently make autocomplete requests without a paid request to resolve an place may be disrupted via tightened rate limits.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/places'
        
        query_params = utils.get_query_params(operations.FindPlaceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindPlaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlaceResponse])
                res.place_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def resolve_place(self, request: operations.ResolvePlaceRequest) -> operations.ResolvePlaceResponse:
        r"""Resolve Place
        Resolves a place autocompletion by its place ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResolvePlaceRequest, base_url, '/places/${place}', request)
        
        query_params = utils.get_query_params(operations.ResolvePlaceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResolvePlaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResolvePlaceResponse])
                res.resolve_place_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    