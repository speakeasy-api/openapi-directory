"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PageviewsCountsTimeRangeEnum(str, Enum):
    r"""Time range the given count applies to."""
    ALL_TIME = 'ALL_TIME'
    THIRTY_DAYS = 'THIRTY_DAYS'
    SEVEN_DAYS = 'SEVEN_DAYS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PageviewsCounts:
    
    count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Count of page views for the given time range."""  
    time_range: Optional[PageviewsCountsTimeRangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeRange'), 'exclude': lambda f: f is None }})
    r"""Time range the given count applies to."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Pageviews:
    r"""Successful response"""
    
    blog_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blogId'), 'exclude': lambda f: f is None }})
    r"""Blog Id."""  
    counts: Optional[list[PageviewsCounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""The container of posts in this blog."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of this entry. Always blogger#page_views."""  
    