"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionfilter as shared_dimensionfilter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DimensionFilterClauseOperatorEnum(str, Enum):
    r"""The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    OR = 'OR'
    AND = 'AND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DimensionFilterClause:
    r"""A group of dimension filters. Set the operator value to specify how the filters are logically combined."""
    
    filters: Optional[list[shared_dimensionfilter.DimensionFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""The repeated set of filters. They are logically combined based on the operator specified."""  
    operator: Optional[DimensionFilterClauseOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`."""  
    