/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Event - Represents the changes associated with an action taken by a user.
 */
public class Event {
    /**
     * Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalEventTypes")
    public EventAdditionalEventTypesEnum[] additionalEventTypes;

    public Event withAdditionalEventTypes(EventAdditionalEventTypesEnum[] additionalEventTypes) {
        this.additionalEventTypes = additionalEventTypes;
        return this;
    }
    
    /**
     * The time at which the event occurred formatted as Unix time in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTimeMillis")
    public String eventTimeMillis;

    public Event withEventTimeMillis(String eventTimeMillis) {
        this.eventTimeMillis = eventTimeMillis;
        return this;
    }
    
    /**
     * Whether this event is caused by a user being deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromUserDeletion")
    public Boolean fromUserDeletion;

    public Event withFromUserDeletion(Boolean fromUserDeletion) {
        this.fromUserDeletion = fromUserDeletion;
        return this;
    }
    
    /**
     * Contains information about changes in an object's parents as a result of a move type event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("move")
    public Move move;

    public Event withMove(Move move) {
        this.move = move;
        return this;
    }
    
    /**
     * Extra information for permissionChange type events, such as the user or group the new permission applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionChanges")
    public PermissionChange[] permissionChanges;

    public Event withPermissionChanges(PermissionChange[] permissionChanges) {
        this.permissionChanges = permissionChanges;
        return this;
    }
    
    /**
     * The main type of event that occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryEventType")
    public EventPrimaryEventTypeEnum primaryEventType;

    public Event withPrimaryEventType(EventPrimaryEventTypeEnum primaryEventType) {
        this.primaryEventType = primaryEventType;
        return this;
    }
    
    /**
     * Contains information about a renametype event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rename")
    public Rename rename;

    public Event withRename(Rename rename) {
        this.rename = rename;
        return this;
    }
    
    /**
     * Information about the object modified by the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    public Target target;

    public Event withTarget(Target target) {
        this.target = target;
        return this;
    }
    
    /**
     * A representation of a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;

    public Event withUser(User user) {
        this.user = user;
        return this;
    }
    
    public Event(){}
}
