<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Wikis 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve the Content of a Wiki
     * 
     * Retrieves the plaintext content of a wiki in markdown format.
     * #### Returns
     * Returns `text/markdown` of the wiki content itself.
     * If the request is unsuccessful, plaintext with the error message will be displayed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WikiContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WikiContentResponse
     */
	public function wikiContent(
        \OpenAPI\OpenAPI\Models\Operations\WikiContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WikiContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wikis/{wiki_id}/content/', \OpenAPI\OpenAPI\Models\Operations\WikiContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WikiContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve a Wiki
     * 
     * Retrieves the details about a specific wiki.
     * A wiki is a collection of markdown text pages that can be used to describe the project or dataset of contained in the attached node.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested wiki, if the request was successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WikiReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WikiReadResponse
     */
	public function wikiRead(
        \OpenAPI\OpenAPI\Models\Operations\WikiReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WikiReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wikis/{wiki_id}/', \OpenAPI\OpenAPI\Models\Operations\WikiReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WikiReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}