"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeEnum(str, Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    GWS = 'GWS'
    GTS = 'GTS'
    ALL = 'ALL'

class EnterpriseCrmLoggingGwsSanitizeOptionsPrivacyEnum(str, Enum):
    PRIVACY_TYPE_UNSPECIFIED = 'PRIVACY_TYPE_UNSPECIFIED'
    NOT_PII = 'NOT_PII'
    PII = 'PII'
    SPII = 'SPII'
    UNSURE = 'UNSURE'

class EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeTypeEnum(str, Enum):
    SANITIZE_TYPE_UNSPECIFIED = 'SANITIZE_TYPE_UNSPECIFIED'
    SCRUB = 'SCRUB'
    ANONYMIZE = 'ANONYMIZE'
    ANONYMIZE_LIMITED_REPEATABLE = 'ANONYMIZE_LIMITED_REPEATABLE'
    OBFUSCATE = 'OBFUSCATE'
    ENCRYPT = 'ENCRYPT'
    DO_NOT_SANITIZE = 'DO_NOT_SANITIZE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmLoggingGwsSanitizeOptions:
    r"""Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5"""
    
    is_already_sanitized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAlreadySanitized'), 'exclude': lambda f: f is None }})
    r"""If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization."""  
    log_type: Optional[list[EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logType'), 'exclude': lambda f: f is None }})
    r"""To which type(s) of logs the sanitize options apply."""  
    privacy: Optional[EnterpriseCrmLoggingGwsSanitizeOptionsPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    sanitize_type: Optional[EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sanitizeType'), 'exclude': lambda f: f is None }})  
    