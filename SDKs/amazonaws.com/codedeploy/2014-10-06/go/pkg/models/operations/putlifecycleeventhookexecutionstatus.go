// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutLifecycleEventHookExecutionStatusXAmzTargetEnum
type PutLifecycleEventHookExecutionStatusXAmzTargetEnum string

const (
	PutLifecycleEventHookExecutionStatusXAmzTargetEnumCodeDeploy20141006PutLifecycleEventHookExecutionStatus PutLifecycleEventHookExecutionStatusXAmzTargetEnum = "CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus"
)

func (e *PutLifecycleEventHookExecutionStatusXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus":
		*e = PutLifecycleEventHookExecutionStatusXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutLifecycleEventHookExecutionStatusXAmzTargetEnum: %s", s)
	}
}

type PutLifecycleEventHookExecutionStatusHeaders struct {
	XAmzAlgorithm     *string                                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutLifecycleEventHookExecutionStatusXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutLifecycleEventHookExecutionStatusRequest struct {
	Headers PutLifecycleEventHookExecutionStatusHeaders
	Request shared.PutLifecycleEventHookExecutionStatusInput `request:"mediaType=application/json"`
}

type PutLifecycleEventHookExecutionStatusResponse struct {
	ContentType string
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidLifecycleEventHookExecutionIdException
	InvalidLifecycleEventHookExecutionIDException interface{}
	// InvalidLifecycleEventHookExecutionStatusException
	InvalidLifecycleEventHookExecutionStatusException interface{}
	// LifecycleEventAlreadyCompletedException
	LifecycleEventAlreadyCompletedException interface{}
	// Success
	PutLifecycleEventHookExecutionStatusOutput *shared.PutLifecycleEventHookExecutionStatusOutput
	StatusCode                                 int
	RawResponse                                *http.Response
	// UnsupportedActionForDeploymentTypeException
	UnsupportedActionForDeploymentTypeException interface{}
}
