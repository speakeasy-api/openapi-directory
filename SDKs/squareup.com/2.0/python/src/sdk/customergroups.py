"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomerGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_customer_group(self, request: shared.CreateCustomerGroupRequest, security: operations.CreateCustomerGroupSecurity) -> operations.CreateCustomerGroupResponse:
        r"""CreateCustomerGroup
        Creates a new customer group for a business.
        
        The request must include the `name` value of the group.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCustomerGroupResponse])
                res.create_customer_group_response = out

        return res

    def delete_customer_group(self, request: operations.DeleteCustomerGroupRequest, security: operations.DeleteCustomerGroupSecurity) -> operations.DeleteCustomerGroupResponse:
        r"""DeleteCustomerGroup
        Deletes a customer group as identified by the `group_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomerGroupRequest, base_url, '/v2/customers/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteCustomerGroupResponse])
                res.delete_customer_group_response = out

        return res

    def list_customer_groups(self, request: operations.ListCustomerGroupsRequest, security: operations.ListCustomerGroupsSecurity) -> operations.ListCustomerGroupsResponse:
        r"""ListCustomerGroups
        Retrieves the list of customer groups of a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers/groups'
        
        query_params = utils.get_query_params(operations.ListCustomerGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomerGroupsResponse])
                res.list_customer_groups_response = out

        return res

    def retrieve_customer_group(self, request: operations.RetrieveCustomerGroupRequest, security: operations.RetrieveCustomerGroupSecurity) -> operations.RetrieveCustomerGroupResponse:
        r"""RetrieveCustomerGroup
        Retrieves a specific customer group as identified by the `group_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveCustomerGroupRequest, base_url, '/v2/customers/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveCustomerGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveCustomerGroupResponse])
                res.retrieve_customer_group_response = out

        return res

    def update_customer_group(self, request: operations.UpdateCustomerGroupRequest, security: operations.UpdateCustomerGroupSecurity) -> operations.UpdateCustomerGroupResponse:
        r"""UpdateCustomerGroup
        Updates a customer group as identified by the `group_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomerGroupRequest, base_url, '/v2/customers/groups/{group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_customer_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomerGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateCustomerGroupResponse])
                res.update_customer_group_response = out

        return res

    