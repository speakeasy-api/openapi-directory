"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import file as shared_file
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Profile:
    
    auth_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authType') }})
    r"""The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**."""  
    bss_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bssType') }})
    r"""Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations."""  
    ssid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssid') }})
    r"""The name of the wireless network."""  
    wsec: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wsec') }})
    r"""The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**"""  
    auto_wifi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoWifi'), 'exclude': lambda f: f is None }})
    r"""Indicates whether to automatically select the best authentication method available. Does not work on older terminal models."""  
    channel: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection."""  
    default_profile: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultProfile'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first."""  
    eap: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eap'), 'exclude': lambda f: f is None }})
    r"""For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**"""  
    eap_ca_cert: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapCaCert'), 'exclude': lambda f: f is None }})  
    eap_client_cert: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapClientCert'), 'exclude': lambda f: f is None }})  
    eap_client_key: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapClientKey'), 'exclude': lambda f: f is None }})  
    eap_client_pwd: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapClientPwd'), 'exclude': lambda f: f is None }})
    r"""For `eap` **tls**. The password of the RSA key file, if that file is password-protected."""  
    eap_identity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapIdentity'), 'exclude': lambda f: f is None }})
    r"""For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server."""  
    eap_intermediate_cert: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapIntermediateCert'), 'exclude': lambda f: f is None }})  
    eap_pwd: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eapPwd'), 'exclude': lambda f: f is None }})
    r"""For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server."""  
    hidden_ssid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiddenSsid'), 'exclude': lambda f: f is None }})
    r"""Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Your name for the Wi-Fi profile."""  
    psk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('psk'), 'exclude': lambda f: f is None }})
    r"""For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network."""  
    