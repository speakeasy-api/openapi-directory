"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import addressresponse as shared_addressresponse
from ..shared import badrequestresponse as shared_badrequestresponse
from ..shared import postcodenotfoundresponse as shared_postcodenotfoundresponse
from typing import Optional


@dataclasses.dataclass
class AddressesRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': False }})  
    bias_country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_country', 'style': 'form', 'explode': False }})  
    bias_lonlat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_lonlat', 'style': 'form', 'explode': False }})  
    bias_post_town: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_post_town', 'style': 'form', 'explode': False }})  
    bias_postcode: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_postcode', 'style': 'form', 'explode': False }})  
    bias_postcode_area: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_postcode_area', 'style': 'form', 'explode': False }})  
    bias_postcode_outward: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_postcode_outward', 'style': 'form', 'explode': False }})  
    bias_postcode_sector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_postcode_sector', 'style': 'form', 'explode': False }})  
    bias_thoroughfare: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bias_thoroughfare', 'style': 'form', 'explode': False }})  
    box: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'box', 'style': 'form', 'explode': False }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': False }})  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': False }})  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': False }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': False }})  
    lon: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lon', 'style': 'form', 'explode': False }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': False }})  
    post_town: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'post_town', 'style': 'form', 'explode': False }})  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postcode', 'style': 'form', 'explode': False }})  
    postcode_area: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postcode_area', 'style': 'form', 'explode': False }})  
    postcode_outward: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postcode_outward', 'style': 'form', 'explode': False }})  
    postcode_sector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postcode_sector', 'style': 'form', 'explode': False }})  
    postcode_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postcode_type', 'style': 'form', 'explode': False }})  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': False }})
    r"""Specifies the address you wish to query. Query can be shortened to `q=`"""  
    su_organisation_indicator: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'su_organisation_indicator', 'style': 'form', 'explode': False }})  
    uprn: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uprn', 'style': 'form', 'explode': False }})  
    

@dataclasses.dataclass
class AddressesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    address_response: Optional[shared_addressresponse.AddressResponse] = dataclasses.field(default=None)
    r"""Success"""  
    bad_request_response: Optional[shared_badrequestresponse.BadRequestResponse] = dataclasses.field(default=None)
    r"""Bad Request"""  
    postcode_not_found_response: Optional[shared_postcodenotfoundresponse.PostcodeNotFoundResponse] = dataclasses.field(default=None)
    r"""Postcode Not Found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    