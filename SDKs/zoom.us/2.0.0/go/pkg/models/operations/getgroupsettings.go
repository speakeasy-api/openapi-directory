// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetGroupSettingsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetGroupSettingsOptionEnum - `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the group.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the group.<br>
// `meeting_security`: Use this query parameter to view meeting security settings applied on the group.<br>
type GetGroupSettingsOptionEnum string

const (
	GetGroupSettingsOptionEnumMeetingAuthentication   GetGroupSettingsOptionEnum = "meeting_authentication"
	GetGroupSettingsOptionEnumRecordingAuthentication GetGroupSettingsOptionEnum = "recording_authentication"
)

func (e *GetGroupSettingsOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "meeting_authentication":
		fallthrough
	case "recording_authentication":
		*e = GetGroupSettingsOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettingsOptionEnum: %s", s)
	}
}

type GetGroupSettingsRequest struct {
	// Provide the name of the field by which you would like to filter the response. For example, if you provide "host_video" as the value of this field, you will get a response similar to the following:<br>
	// {
	//     "schedule_meeting": {
	//         "host_video": false
	//     }
	// }
	// <br>You can provide multiple values by separating them with commas(example: "host_video,participant_video‚Äù).
	CustomQueryFields *string `queryParam:"style=form,explode=true,name=custom_query_fields"`
	GroupID           string  `pathParam:"style=simple,explode=false,name=groupId"`
	// `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the group.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the group.<br>
	// `meeting_security`: Use this query parameter to view meeting security settings applied on the group.<br>
	Option *GetGroupSettingsOptionEnum `queryParam:"style=form,explode=true,name=option"`
}

// GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum string

const (
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumEnhancedEncryption GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumE2ee               GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement - Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum
	// If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool
	// If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool
	// If set to `true`, the passcode must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool
	// If set to `true`, the passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool
	// The minimum length that the meeting/webinar passcode needs to have.
	Length *int64
	// If set to `true`, the passcode must only contain numbers and no other characters.
	OnlyAllowNumeric *bool
	// If set to `true`, users will be informed if the provided passcode is weak.
	WeakEnhanceDetection *bool
}

// GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum -
//
// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum string

const (
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumZero GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "0"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumOne  GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "1"
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumTwo  GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "2"
)

func (e *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings - Specify the settings to be applied if waiting room is enabled.
type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings struct {
	//
	// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
	// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
	ParticipantsToPlaceInWaitingRoom *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum
	// Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
	// `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
	//
	//
	//
	UsersWhoCanAdmitParticipantsFromWaitingRoom *int64
	// If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
	WhitelistedDomainsForWaitingRoom *string
}

type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity struct {
	// `true`: Require that all meetings are secured with at least one security option.
	//
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
	AutoSecurity *bool
	// If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
	//
	EmbedPasswordInJoinLink *bool
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool
	// If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
	MeetingPassword *bool
	// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement
	// Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
	PhonePassword *bool
	// If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
	//
	PmiPassword *bool
	// Require a passcode for meetings which have already been scheduled.
	//
	RequirePasswordForScheduledMeeting *bool
	// Require a passcode for webinars which have already been scheduled.
	//
	RequirePasswordForScheduledWebinar *bool
	// When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
	//
	WaitingRoom *bool
	// Specify the settings to be applied if waiting room is enabled.
	WaitingRoomSettings *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings
	// If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
	//
	WebinarPassword *bool
}

type GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings struct {
	MeetingSecurity *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity
}

// GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum - Authentication type
type GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum string

const (
	GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnumInternally              GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum = "internally"
	GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnumEnforceLogin            GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum = "enforce_login"
	GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnumEnforceLoginWithDomains GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internally":
		fallthrough
	case "enforce_login":
		fallthrough
	case "enforce_login_with_domains":
		*e = GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXML22AuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool
	// Authentication domians
	Domains *string
	// Authentication id
	ID *string
	// Authentication name
	Name *string
	// Authentication type
	Type *GetGroupSettings200ApplicationXML22AuthenticationOptionsTypeEnum
	// Authentication visible
	Visible *bool
}

type GetGroupSettings200ApplicationXML22 struct {
	// Authentication Options
	AuthenticationOptions []GetGroupSettings200ApplicationXML22AuthenticationOptions
	// Only authenticated users can view cloud recordings
	RecordingAuthentication *bool
}

// GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum -  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
//   - `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
//   - `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
//   - `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
type GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum string

const (
	GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnumEnforceLogin                GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum = "enforce_login"
	GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnumEnforceLoginWithSameAccount GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum = "enforce_login_with_same_account"
	GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnumEnforceLoginWithDomains     GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce_login":
		fallthrough
	case "enforce_login_with_same_account":
		fallthrough
	case "enforce_login_with_domains":
		*e = GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXML21AuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool
	// Authentication domains
	Domains *string
	// Authentication id
	ID *string
	// Authentication name
	Name *string
	//  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
	//  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
	//  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
	//  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
	Type *GetGroupSettings200ApplicationXML21AuthenticationOptionsTypeEnum
	// Authentication visible
	Visible *bool
}

type GetGroupSettings200ApplicationXML21 struct {
	// Meeting Authentication Options
	AuthenticationOptions []GetGroupSettings200ApplicationXML21AuthenticationOptions
	// Only authenticated users can join meetings
	MeetingAuthentication *bool
}

type GetGroupSettings200ApplicationXML2Type string

const (
	GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML21 GetGroupSettings200ApplicationXML2Type = "getGroupSettings_200ApplicationXML_2_1"
	GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML22 GetGroupSettings200ApplicationXML2Type = "getGroupSettings_200ApplicationXML_2_2"
)

type GetGroupSettings200ApplicationXML2 struct {
	GetGroupSettings200ApplicationXML21 *GetGroupSettings200ApplicationXML21
	GetGroupSettings200ApplicationXML22 *GetGroupSettings200ApplicationXML22

	Type GetGroupSettings200ApplicationXML2Type
}

func CreateGetGroupSettings200ApplicationXML2GetGroupSettings200ApplicationXML21(getGroupSettings200ApplicationXML21 GetGroupSettings200ApplicationXML21) GetGroupSettings200ApplicationXML2 {
	typ := GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML21

	return GetGroupSettings200ApplicationXML2{
		GetGroupSettings200ApplicationXML21: &getGroupSettings200ApplicationXML21,
		Type:                                typ,
	}
}

func CreateGetGroupSettings200ApplicationXML2GetGroupSettings200ApplicationXML22(getGroupSettings200ApplicationXML22 GetGroupSettings200ApplicationXML22) GetGroupSettings200ApplicationXML2 {
	typ := GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML22

	return GetGroupSettings200ApplicationXML2{
		GetGroupSettings200ApplicationXML22: &getGroupSettings200ApplicationXML22,
		Type:                                typ,
	}
}

func (u *GetGroupSettings200ApplicationXML2) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getGroupSettings200ApplicationXML21 := new(GetGroupSettings200ApplicationXML21)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationXML21); err == nil {
		u.GetGroupSettings200ApplicationXML21 = getGroupSettings200ApplicationXML21
		u.Type = GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML21
		return nil
	}

	getGroupSettings200ApplicationXML22 := new(GetGroupSettings200ApplicationXML22)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationXML22); err == nil {
		u.GetGroupSettings200ApplicationXML22 = getGroupSettings200ApplicationXML22
		u.Type = GetGroupSettings200ApplicationXML2TypeGetGroupSettings200ApplicationXML22
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetGroupSettings200ApplicationXML2) MarshalJSON() ([]byte, error) {
	if u.GetGroupSettings200ApplicationXML21 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationXML21)
	}

	if u.GetGroupSettings200ApplicationXML22 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationXML22)
	}

	return nil, nil
}

type GetGroupSettings200ApplicationXML1EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder *bool
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder *bool
	// Notify host when cloud recording is available.
	CloudRecordingAvailableReminder *bool
	// Notify host when participants join the meeting before them.
	JbhReminder *bool
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForHostReminder *bool
}

// GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum - If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
type GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum string

const (
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumEu GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "EU"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumHk GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "HK"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumAu GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "AU"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumIn GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "IN"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumTy GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "TY"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumCn GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "CN"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumUs GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "US"
	GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnumCa GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum = "CA"
)

func (e *GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EU":
		fallthrough
	case "HK":
		fallthrough
	case "AU":
		fallthrough
	case "IN":
		fallthrough
	case "TY":
		fallthrough
	case "CN":
		fallthrough
	case "US":
		fallthrough
	case "CA":
		*e = GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXML1InMeetingVirtualBackgroundSettingsFiles struct {
	// Unique identifier of the file.
	ID *string
	// Indicates whether or not this file is the default virtual background file.
	IsDefault *bool
	// File name.
	Name *string
	// File size.
	Size *string
	// File type.
	Type *string
}

// GetGroupSettings200ApplicationXML1InMeetingVirtualBackgroundSettings - Settings to manage virtual background.
type GetGroupSettings200ApplicationXML1InMeetingVirtualBackgroundSettings struct {
	// Allow users to upload custom backgrounds.
	AllowUploadCustom *bool
	// Allow use of videos for virtual backgrounds.
	AllowVideos *bool
	// Enable virtual background.
	Enable *bool
	Files  []GetGroupSettings200ApplicationXML1InMeetingVirtualBackgroundSettingsFiles
}

// GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum - Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
// `host`: Only host can share the screen.<br>
// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum string

const (
	GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnumHost GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum = "host"
	GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnumAll  GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum = "all"
)

func (e *GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum - Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
// `host`: Only a host can share the screen when someone else is sharing.<br>
// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum string

const (
	GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumHost GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "host"
	GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumAll  GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "all"
)

func (e *GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXML1InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
	AlertGuestJoin *bool
	// Show Zoom windows during screen share.
	AllowShowZoomWindows *bool
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation *bool
	// Allow host to put attendee on hold.
	//
	// **This field has been deprecated and is no longer supported.**
	AttendeeOnHold *bool
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
	AutoAnswer *bool
	// Automatically save all in-meeting chats.
	AutoSavingChat *bool
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom *bool
	// Allow meeting participants to send chat message visible to all participants.
	Chat *bool
	// Allow host to type closed captions or assign a participant/third party device to add closed captions.
	ClosedCaption *bool
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost *bool
	// If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to be used by this group for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
	CustomDataCenterRegions *bool
	// If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
	//
	DataCenterRegions *GetGroupSettings200ApplicationXML1InMeetingDataCenterRegionsEnum
	// Require that all meetings are encrypted using AES.
	E2eEncryption *bool
	// Play sound when participants join or leave.
	EntryExitChime *string
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl *bool
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback *bool
	// Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
	FileTransfer *bool
	// Enable higher quality video for host and participants. This will require more bandwidth.
	GroupHd *bool
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
	NonVerbalFeedback *bool
	// Show the list of H.323/SIP devices only to the host.
	OnlyHostViewDeviceList *bool
	// Allow users to select original sound during a meeting.
	OriginalAudio *bool
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling *bool
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback *bool
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat *bool
	// When each participant joins by telephone, allow the option to record and play their own voice as entry and exit chimes.
	RecordPlayOwnVoice *bool
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl *bool
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport *bool
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the group or not.
	RequestPermissionToUnmute *bool
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing *bool
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites *bool
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink *bool
	// Show the list of H.323/SIP devices.
	ShowDeviceList *bool
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar *bool
	// Allow users to select stereo audio during a meeting.
	StereoAudio *bool
	// Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
	UseHTMLFormatEmail *bool
	// Enable virtual background.
	VirtualBackground *bool
	// Settings to manage virtual background.
	VirtualBackgroundSettings *GetGroupSettings200ApplicationXML1InMeetingVirtualBackgroundSettings
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom *bool
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard *bool
	// Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
	// `host`: Only host can share the screen.<br>
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreen *GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenEnum
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
	// `host`: Only a host can share the screen when someone else is sharing.<br>
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreenWhenSomeoneIsSharing *GetGroupSettings200ApplicationXML1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum
}

type GetGroupSettings200ApplicationXML1ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
	//
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
	AllowedValues []string
	// Abbreviated country code.
	Value *string
}

type GetGroupSettings200ApplicationXML1Profile struct {
	RecordingStorageLocation *GetGroupSettings200ApplicationXML1ProfileRecordingStorageLocation
}

type GetGroupSettings200ApplicationXML1RecordingArchiveSettings struct {
	// Include in-meeting and/or in-webinar audio in the archive.
	AudioFile *bool
	// Include closed caption or transcript in the archive.
	CcTranscriptFile *bool
	// Include in-meeting chat in the archive.
	ChatFile *bool
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail *bool
	// Include in-meeting and/or in-webinar video in the archive.
	VideoFile *bool
}

// GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum - Archive types:
//
// * `1`: Only meetings are archived.<br>
// * `2`: Only webinars are archived.<br>
// * `3`: Both meetings and webinars are archived.
type GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum string

const (
	GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnumOne   GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum = "1"
	GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnumTwo   GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum = "2"
	GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnumThree GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum = "3"
)

func (e *GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationXML1RecordingArchive - [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
type GetGroupSettings200ApplicationXML1RecordingArchive struct {
	// Enable the archiving feature.
	Enable   *bool
	Settings *GetGroupSettings200ApplicationXML1RecordingArchiveSettings
	// Archive types:
	//
	// * `1`: Only meetings are archived.<br>
	// * `2`: Only webinars are archived.<br>
	// * `3`: Both meetings and webinars are archived.
	Type *GetGroupSettings200ApplicationXML1RecordingArchiveTypeEnum
}

// GetGroupSettings200ApplicationXML1RecordingIPAddressAccessControl - Setting to allow cloud recording access only from specific IP address ranges.
type GetGroupSettings200ApplicationXML1RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
	//
	//
	Enable *bool
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	//
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
	//
	//
	IPAddressesOrRanges *string
}

type GetGroupSettings200ApplicationXML1Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording *bool
	// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
	Archive *GetGroupSettings200ApplicationXML1RecordingArchive
	// Record meetings automatically as they start.
	AutoRecording *string
	// Allow hosts to record and save the meeting / webinar in the cloud.
	CloudRecording *bool
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload *bool
	// Allow only the host with a link to the cloud recording to download.
	CloudRecordingDownloadHost *bool
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
	HostDeleteCloudRecording *bool
	// Setting to allow cloud recording access only from specific IP address ranges.
	//
	IPAddressAccessControl *GetGroupSettings200ApplicationXML1RecordingIPAddressAccessControl
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording *bool
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
	//
	//
	PreventHostAccessRecording *bool
	// Record an audio only file.
	RecordAudioFile *bool
	// When someone is sharing their screen, active speaker will show on the top right corner of the shared screen.
	RecordGalleryView *bool
	// Record active speaker with shared screen.
	RecordSpeakerView *bool
	// Automatically transcribe the audio of a meeting or webinar for cloud recordings.
	RecordingAudioTranscript *bool
	// Save chat messages from the meeting / webinar.
	SaveChatText *bool
	// Add a timestamp to the recording.
	ShowTimestamp *bool
}

// GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum - Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
// `none`: Do not require password for PMI meetings.<br>
// `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
type GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum string

const (
	GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnumAll     GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "all"
	GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnumJbhOnly GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "jbh_only"
	GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnumNone    GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "none"
)

func (e *GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "jbh_only":
		fallthrough
	case "none":
		*e = GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationXML1ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType *string
	// If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
	//
	EmbedPasswordInJoinLink *bool
	// If join before host option is enabled for a personal meeting, then enforce password requirement.
	//
	//
	// **This field will be deprecated in near future.** If you would like to enable this setting, we highly encourage you to use the `require_password_for_pmi_meetings` field.
	//
	//
	ForcePmiJbhPassword *bool
	// Start meetings with host video on.
	HostVideo *bool
	// Allow participants to join the meeting before the host arrives
	JoinBeforeHost *bool
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry *bool
	// Start meetings with participant video on.
	ParticipantVideo *bool
	// Personal Meeting Setting.<br><br>
	// `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
	// `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
	//
	//
	//
	PersonalMeeting *bool
	// Generate and send new passwords for newly scheduled or edited meetings.
	PstnPasswordProtected *bool
	// If enabled, a random password will be generated on the user's end who starts the instant meeting. Other participants will have to enter the password to join the meeting. If you use PMI for your instant meetings, this option will be disabled.
	RequirePasswordForInstantMeetings *bool
	// Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
	// `none`: Do not require password for PMI meetings.<br>
	// `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
	RequirePasswordForPmiMeetings *GetGroupSettings200ApplicationXML1ScheduleMeetingRequirePasswordForPmiMeetingsEnum
	// Require a password for meetings which have already been scheduled
	//
	RequirePasswordForScheduledMeetings *bool
	// This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings *bool
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder *bool
	// Indicates whether PMI is enabled for all instant meetings or not.
	UsePmiForInstantMeetings *bool
	// Indicates whether PMI is enabled for all scheduled meetings or not.
	UsePmiForScheduleMeetings *bool
}

// GetGroupSettings200ApplicationXML1TelephonyTelephonyRegions - Indicates where most of the participants call into or call from duriing a meeting.
type GetGroupSettings200ApplicationXML1TelephonyTelephonyRegions struct {
	// Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
	SelectionValues []string
}

type GetGroupSettings200ApplicationXML1Telephony struct {
	AudioConferenceInfo *string
	// Indicates where most of the participants call into or call from duriing a meeting.
	TelephonyRegions *GetGroupSettings200ApplicationXML1TelephonyTelephonyRegions
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio *bool
}

type GetGroupSettings200ApplicationXML1 struct {
	EmailNotification *GetGroupSettings200ApplicationXML1EmailNotification
	InMeeting         *GetGroupSettings200ApplicationXML1InMeeting
	Profile           *GetGroupSettings200ApplicationXML1Profile
	Recording         *GetGroupSettings200ApplicationXML1Recording
	ScheduleMeeting   *GetGroupSettings200ApplicationXML1ScheduleMeeting
	Telephony         *GetGroupSettings200ApplicationXML1Telephony
}

type GetGroupSettings200ApplicationXMLType string

const (
	GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML1                              GetGroupSettings200ApplicationXMLType = "getGroupSettings_200ApplicationXML_1"
	GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML2                              GetGroupSettings200ApplicationXMLType = "getGroupSettings_200ApplicationXML_2"
	GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings GetGroupSettings200ApplicationXMLType = "getGroupSettings_200ApplicationXML_Meeting/Webinar Security Settings"
)

type GetGroupSettings200ApplicationXML struct {
	GetGroupSettings200ApplicationXML1                              *GetGroupSettings200ApplicationXML1
	GetGroupSettings200ApplicationXML2                              *GetGroupSettings200ApplicationXML2
	GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings *GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings

	Type GetGroupSettings200ApplicationXMLType
}

func CreateGetGroupSettings200ApplicationXMLGetGroupSettings200ApplicationXML1(getGroupSettings200ApplicationXML1 GetGroupSettings200ApplicationXML1) GetGroupSettings200ApplicationXML {
	typ := GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML1

	return GetGroupSettings200ApplicationXML{
		GetGroupSettings200ApplicationXML1: &getGroupSettings200ApplicationXML1,
		Type:                               typ,
	}
}

func CreateGetGroupSettings200ApplicationXMLGetGroupSettings200ApplicationXML2(getGroupSettings200ApplicationXML2 GetGroupSettings200ApplicationXML2) GetGroupSettings200ApplicationXML {
	typ := GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML2

	return GetGroupSettings200ApplicationXML{
		GetGroupSettings200ApplicationXML2: &getGroupSettings200ApplicationXML2,
		Type:                               typ,
	}
}

func CreateGetGroupSettings200ApplicationXMLGetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings(getGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings) GetGroupSettings200ApplicationXML {
	typ := GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings

	return GetGroupSettings200ApplicationXML{
		GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings: &getGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings,
		Type: typ,
	}
}

func (u *GetGroupSettings200ApplicationXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getGroupSettings200ApplicationXML1 := new(GetGroupSettings200ApplicationXML1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationXML1); err == nil {
		u.GetGroupSettings200ApplicationXML1 = getGroupSettings200ApplicationXML1
		u.Type = GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML1
		return nil
	}

	getGroupSettings200ApplicationXML2 := new(GetGroupSettings200ApplicationXML2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationXML2); err == nil {
		u.GetGroupSettings200ApplicationXML2 = getGroupSettings200ApplicationXML2
		u.Type = GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXML2
		return nil
	}

	getGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings := new(GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings); err == nil {
		u.GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings = getGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings
		u.Type = GetGroupSettings200ApplicationXMLTypeGetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetGroupSettings200ApplicationXML) MarshalJSON() ([]byte, error) {
	if u.GetGroupSettings200ApplicationXML1 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationXML1)
	}

	if u.GetGroupSettings200ApplicationXML2 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationXML2)
	}

	if u.GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationXMLMeetingWebinarSecuritySettings)
	}

	return nil, nil
}

// GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum string

const (
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumEnhancedEncryption GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumE2ee               GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement - Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum `json:"consecutive_characters_length,omitempty"`
	// If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool `json:"have_letter,omitempty"`
	// If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool `json:"have_number,omitempty"`
	// If set to `true`, the passcode must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// If set to `true`, the passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool `json:"have_upper_and_lower_characters,omitempty"`
	// The minimum length that the meeting/webinar passcode needs to have.
	Length *int64 `json:"length,omitempty"`
	// If set to `true`, the passcode must only contain numbers and no other characters.
	OnlyAllowNumeric *bool `json:"only_allow_numeric,omitempty"`
	// If set to `true`, users will be informed if the provided passcode is weak.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum -
//
// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum string

const (
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumZero GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "0"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumOne  GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "1"
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumTwo  GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "2"
)

func (e *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings - Specify the settings to be applied if waiting room is enabled.
type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings struct {
	//
	// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
	// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
	ParticipantsToPlaceInWaitingRoom *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum `json:"participants_to_place_in_waiting_room,omitempty"`
	// Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
	// `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
	//
	//
	//
	UsersWhoCanAdmitParticipantsFromWaitingRoom *int64 `json:"users_who_can_admit_participants_from_waiting_room,omitempty"`
	// If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
	WhitelistedDomainsForWaitingRoom *string `json:"whitelisted_domains_for_waiting_room,omitempty"`
}

type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity struct {
	// `true`: Require that all meetings are secured with at least one security option.
	//
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
	AutoSecurity *bool `json:"auto_security,omitempty"`
	// If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
	//
	EmbedPasswordInJoinLink *bool `json:"embed_password_in_join_link,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool `json:"end_to_end_encrypted_meetings,omitempty"`
	// If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
	MeetingPassword *bool `json:"meeting_password,omitempty"`
	// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement,omitempty"`
	// Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
	PhonePassword *bool `json:"phone_password,omitempty"`
	// If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
	//
	PmiPassword *bool `json:"pmi_password,omitempty"`
	// Require a passcode for meetings which have already been scheduled.
	//
	RequirePasswordForScheduledMeeting *bool `json:"require_password_for_scheduled_meeting,omitempty"`
	// Require a passcode for webinars which have already been scheduled.
	//
	RequirePasswordForScheduledWebinar *bool `json:"require_password_for_scheduled_webinar,omitempty"`
	// When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
	//
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Specify the settings to be applied if waiting room is enabled.
	WaitingRoomSettings *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings `json:"waiting_room_settings,omitempty"`
	// If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
	//
	WebinarPassword *bool `json:"webinar_password,omitempty"`
}

type GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings struct {
	MeetingSecurity *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity `json:"meeting_security,omitempty"`
}

// GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum - Authentication type
type GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum string

const (
	GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnumInternally              GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum = "internally"
	GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnumEnforceLogin            GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum = "enforce_login"
	GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnumEnforceLoginWithDomains GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internally":
		fallthrough
	case "enforce_login":
		fallthrough
	case "enforce_login_with_domains":
		*e = GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSON22AuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool `json:"default_option,omitempty"`
	// Authentication domians
	Domains *string `json:"domains,omitempty"`
	// Authentication id
	ID *string `json:"id,omitempty"`
	// Authentication name
	Name *string `json:"name,omitempty"`
	// Authentication type
	Type *GetGroupSettings200ApplicationJSON22AuthenticationOptionsTypeEnum `json:"type,omitempty"`
	// Authentication visible
	Visible *bool `json:"visible,omitempty"`
}

type GetGroupSettings200ApplicationJSON22 struct {
	// Authentication Options
	AuthenticationOptions []GetGroupSettings200ApplicationJSON22AuthenticationOptions `json:"authentication_options,omitempty"`
	// Only authenticated users can view cloud recordings
	RecordingAuthentication *bool `json:"recording_authentication,omitempty"`
}

// GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum -  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
//   - `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
//   - `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
//   - `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
type GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum string

const (
	GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnumEnforceLogin                GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum = "enforce_login"
	GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnumEnforceLoginWithSameAccount GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum = "enforce_login_with_same_account"
	GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnumEnforceLoginWithDomains     GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce_login":
		fallthrough
	case "enforce_login_with_same_account":
		fallthrough
	case "enforce_login_with_domains":
		*e = GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSON21AuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool `json:"default_option,omitempty"`
	// Authentication domains
	Domains *string `json:"domains,omitempty"`
	// Authentication id
	ID *string `json:"id,omitempty"`
	// Authentication name
	Name *string `json:"name,omitempty"`
	//  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
	//  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
	//  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
	//  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
	Type *GetGroupSettings200ApplicationJSON21AuthenticationOptionsTypeEnum `json:"type,omitempty"`
	// Authentication visible
	Visible *bool `json:"visible,omitempty"`
}

type GetGroupSettings200ApplicationJSON21 struct {
	// Meeting Authentication Options
	AuthenticationOptions []GetGroupSettings200ApplicationJSON21AuthenticationOptions `json:"authentication_options,omitempty"`
	// Only authenticated users can join meetings
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
}

type GetGroupSettings200ApplicationJSON2Type string

const (
	GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON21 GetGroupSettings200ApplicationJSON2Type = "getGroupSettings_200ApplicationJSON_2_1"
	GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON22 GetGroupSettings200ApplicationJSON2Type = "getGroupSettings_200ApplicationJSON_2_2"
)

type GetGroupSettings200ApplicationJSON2 struct {
	GetGroupSettings200ApplicationJSON21 *GetGroupSettings200ApplicationJSON21
	GetGroupSettings200ApplicationJSON22 *GetGroupSettings200ApplicationJSON22

	Type GetGroupSettings200ApplicationJSON2Type
}

func CreateGetGroupSettings200ApplicationJSON2GetGroupSettings200ApplicationJSON21(getGroupSettings200ApplicationJSON21 GetGroupSettings200ApplicationJSON21) GetGroupSettings200ApplicationJSON2 {
	typ := GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON21

	return GetGroupSettings200ApplicationJSON2{
		GetGroupSettings200ApplicationJSON21: &getGroupSettings200ApplicationJSON21,
		Type:                                 typ,
	}
}

func CreateGetGroupSettings200ApplicationJSON2GetGroupSettings200ApplicationJSON22(getGroupSettings200ApplicationJSON22 GetGroupSettings200ApplicationJSON22) GetGroupSettings200ApplicationJSON2 {
	typ := GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON22

	return GetGroupSettings200ApplicationJSON2{
		GetGroupSettings200ApplicationJSON22: &getGroupSettings200ApplicationJSON22,
		Type:                                 typ,
	}
}

func (u *GetGroupSettings200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getGroupSettings200ApplicationJSON21 := new(GetGroupSettings200ApplicationJSON21)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationJSON21); err == nil {
		u.GetGroupSettings200ApplicationJSON21 = getGroupSettings200ApplicationJSON21
		u.Type = GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON21
		return nil
	}

	getGroupSettings200ApplicationJSON22 := new(GetGroupSettings200ApplicationJSON22)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationJSON22); err == nil {
		u.GetGroupSettings200ApplicationJSON22 = getGroupSettings200ApplicationJSON22
		u.Type = GetGroupSettings200ApplicationJSON2TypeGetGroupSettings200ApplicationJSON22
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetGroupSettings200ApplicationJSON2) MarshalJSON() ([]byte, error) {
	if u.GetGroupSettings200ApplicationJSON21 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationJSON21)
	}

	if u.GetGroupSettings200ApplicationJSON22 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationJSON22)
	}

	return nil, nil
}

type GetGroupSettings200ApplicationJSON1EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder *bool `json:"alternative_host_reminder,omitempty"`
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder *bool `json:"cancel_meeting_reminder,omitempty"`
	// Notify host when cloud recording is available.
	CloudRecordingAvailableReminder *bool `json:"cloud_recording_available_reminder,omitempty"`
	// Notify host when participants join the meeting before them.
	JbhReminder *bool `json:"jbh_reminder,omitempty"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForHostReminder *bool `json:"schedule_for_host_reminder,omitempty"`
}

// GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum - If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
type GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum string

const (
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumEu GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "EU"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumHk GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "HK"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumAu GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "AU"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumIn GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "IN"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumTy GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "TY"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumCn GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "CN"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumUs GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "US"
	GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnumCa GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum = "CA"
)

func (e *GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EU":
		fallthrough
	case "HK":
		fallthrough
	case "AU":
		fallthrough
	case "IN":
		fallthrough
	case "TY":
		fallthrough
	case "CN":
		fallthrough
	case "US":
		fallthrough
	case "CA":
		*e = GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSON1InMeetingVirtualBackgroundSettingsFiles struct {
	// Unique identifier of the file.
	ID *string `json:"id,omitempty"`
	// Indicates whether or not this file is the default virtual background file.
	IsDefault *bool `json:"is_default,omitempty"`
	// File name.
	Name *string `json:"name,omitempty"`
	// File size.
	Size *string `json:"size,omitempty"`
	// File type.
	Type *string `json:"type,omitempty"`
}

// GetGroupSettings200ApplicationJSON1InMeetingVirtualBackgroundSettings - Settings to manage virtual background.
type GetGroupSettings200ApplicationJSON1InMeetingVirtualBackgroundSettings struct {
	// Allow users to upload custom backgrounds.
	AllowUploadCustom *bool `json:"allow_upload_custom,omitempty"`
	// Allow use of videos for virtual backgrounds.
	AllowVideos *bool `json:"allow_videos,omitempty"`
	// Enable virtual background.
	Enable *bool                                                                        `json:"enable,omitempty"`
	Files  []GetGroupSettings200ApplicationJSON1InMeetingVirtualBackgroundSettingsFiles `json:"files,omitempty"`
}

// GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum - Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
// `host`: Only host can share the screen.<br>
// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum string

const (
	GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnumHost GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum = "host"
	GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnumAll  GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum = "all"
)

func (e *GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum - Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
// `host`: Only a host can share the screen when someone else is sharing.<br>
// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum string

const (
	GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumHost GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "host"
	GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumAll  GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "all"
)

func (e *GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSON1InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
	AlertGuestJoin *bool `json:"alert_guest_join,omitempty"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows *bool `json:"allow_show_zoom_windows,omitempty"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation *bool `json:"annotation,omitempty"`
	// Allow host to put attendee on hold.
	//
	// **This field has been deprecated and is no longer supported.**
	AttendeeOnHold *bool `json:"attendee_on_hold,omitempty"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
	AutoAnswer *bool `json:"auto_answer,omitempty"`
	// Automatically save all in-meeting chats.
	AutoSavingChat *bool `json:"auto_saving_chat,omitempty"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom *bool `json:"breakout_room,omitempty"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat *bool `json:"chat,omitempty"`
	// Allow host to type closed captions or assign a participant/third party device to add closed captions.
	ClosedCaption *bool `json:"closed_caption,omitempty"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost *bool `json:"co_host,omitempty"`
	// If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to be used by this group for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
	CustomDataCenterRegions *bool `json:"custom_data_center_regions,omitempty"`
	// If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
	//
	DataCenterRegions *GetGroupSettings200ApplicationJSON1InMeetingDataCenterRegionsEnum `json:"data_center_regions,omitempty"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption *bool `json:"e2e_encryption,omitempty"`
	// Play sound when participants join or leave.
	EntryExitChime *string `json:"entry_exit_chime,omitempty"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl *bool `json:"far_end_camera_control,omitempty"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback *bool `json:"feedback,omitempty"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
	FileTransfer *bool `json:"file_transfer,omitempty"`
	// Enable higher quality video for host and participants. This will require more bandwidth.
	GroupHd *bool `json:"group_hd,omitempty"`
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
	NonVerbalFeedback *bool `json:"non_verbal_feedback,omitempty"`
	// Show the list of H.323/SIP devices only to the host.
	OnlyHostViewDeviceList *bool `json:"only_host_view_device_list,omitempty"`
	// Allow users to select original sound during a meeting.
	OriginalAudio *bool `json:"original_audio,omitempty"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling *bool `json:"polling,omitempty"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback *bool `json:"post_meeting_feedback,omitempty"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat *bool `json:"private_chat,omitempty"`
	// When each participant joins by telephone, allow the option to record and play their own voice as entry and exit chimes.
	RecordPlayOwnVoice *bool `json:"record_play_own_voice,omitempty"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl *bool `json:"remote_control,omitempty"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport *bool `json:"remote_support,omitempty"`
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the group or not.
	RequestPermissionToUnmute *bool `json:"request_permission_to_unmute,omitempty"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing *bool `json:"screen_sharing,omitempty"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites *bool `json:"sending_default_email_invites,omitempty"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink *bool `json:"show_browser_join_link,omitempty"`
	// Show the list of H.323/SIP devices.
	ShowDeviceList *bool `json:"show_device_list,omitempty"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar *bool `json:"show_meeting_control_toolbar,omitempty"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio *bool `json:"stereo_audio,omitempty"`
	// Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
	UseHTMLFormatEmail *bool `json:"use_html_format_email,omitempty"`
	// Enable virtual background.
	VirtualBackground *bool `json:"virtual_background,omitempty"`
	// Settings to manage virtual background.
	VirtualBackgroundSettings *GetGroupSettings200ApplicationJSON1InMeetingVirtualBackgroundSettings `json:"virtual_background_settings,omitempty"`
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard *bool `json:"whiteboard,omitempty"`
	// Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
	// `host`: Only host can share the screen.<br>
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreen *GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenEnum `json:"who_can_share_screen,omitempty"`
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
	// `host`: Only a host can share the screen when someone else is sharing.<br>
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreenWhenSomeoneIsSharing *GetGroupSettings200ApplicationJSON1InMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum `json:"who_can_share_screen_when_someone_is_sharing,omitempty"`
}

type GetGroupSettings200ApplicationJSON1ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
	//
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
	AllowedValues []string `json:"allowed_values,omitempty"`
	// Abbreviated country code.
	Value *string `json:"value,omitempty"`
}

type GetGroupSettings200ApplicationJSON1Profile struct {
	RecordingStorageLocation *GetGroupSettings200ApplicationJSON1ProfileRecordingStorageLocation `json:"recording_storage_location,omitempty"`
}

type GetGroupSettings200ApplicationJSON1RecordingArchiveSettings struct {
	// Include in-meeting and/or in-webinar audio in the archive.
	AudioFile *bool `json:"audio_file,omitempty"`
	// Include closed caption or transcript in the archive.
	CcTranscriptFile *bool `json:"cc_transcript_file,omitempty"`
	// Include in-meeting chat in the archive.
	ChatFile *bool `json:"chat_file,omitempty"`
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail *bool `json:"chat_with_sender_email,omitempty"`
	// Include in-meeting and/or in-webinar video in the archive.
	VideoFile *bool `json:"video_file,omitempty"`
}

// GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum - Archive types:
//
// * `1`: Only meetings are archived.<br>
// * `2`: Only webinars are archived.<br>
// * `3`: Both meetings and webinars are archived.
type GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum string

const (
	GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnumOne   GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum = "1"
	GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnumTwo   GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum = "2"
	GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnumThree GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum = "3"
)

func (e *GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum: %s", s)
	}
}

// GetGroupSettings200ApplicationJSON1RecordingArchive - [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
type GetGroupSettings200ApplicationJSON1RecordingArchive struct {
	// Enable the archiving feature.
	Enable   *bool                                                        `json:"enable,omitempty"`
	Settings *GetGroupSettings200ApplicationJSON1RecordingArchiveSettings `json:"settings,omitempty"`
	// Archive types:
	//
	// * `1`: Only meetings are archived.<br>
	// * `2`: Only webinars are archived.<br>
	// * `3`: Both meetings and webinars are archived.
	Type *GetGroupSettings200ApplicationJSON1RecordingArchiveTypeEnum `json:"type,omitempty"`
}

// GetGroupSettings200ApplicationJSON1RecordingIPAddressAccessControl - Setting to allow cloud recording access only from specific IP address ranges.
type GetGroupSettings200ApplicationJSON1RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
	//
	//
	Enable *bool `json:"enable,omitempty"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	//
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
	//
	//
	IPAddressesOrRanges *string `json:"ip_addresses_or_ranges,omitempty"`
}

type GetGroupSettings200ApplicationJSON1Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording *bool `json:"account_user_access_recording,omitempty"`
	// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
	Archive *GetGroupSettings200ApplicationJSON1RecordingArchive `json:"archive,omitempty"`
	// Record meetings automatically as they start.
	AutoRecording *string `json:"auto_recording,omitempty"`
	// Allow hosts to record and save the meeting / webinar in the cloud.
	CloudRecording *bool `json:"cloud_recording,omitempty"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload *bool `json:"cloud_recording_download,omitempty"`
	// Allow only the host with a link to the cloud recording to download.
	CloudRecordingDownloadHost *bool `json:"cloud_recording_download_host,omitempty"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
	HostDeleteCloudRecording *bool `json:"host_delete_cloud_recording,omitempty"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	//
	IPAddressAccessControl *GetGroupSettings200ApplicationJSON1RecordingIPAddressAccessControl `json:"ip_address_access_control,omitempty"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording *bool `json:"local_recording,omitempty"`
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
	//
	//
	PreventHostAccessRecording *bool `json:"prevent_host_access_recording,omitempty"`
	// Record an audio only file.
	RecordAudioFile *bool `json:"record_audio_file,omitempty"`
	// When someone is sharing their screen, active speaker will show on the top right corner of the shared screen.
	RecordGalleryView *bool `json:"record_gallery_view,omitempty"`
	// Record active speaker with shared screen.
	RecordSpeakerView *bool `json:"record_speaker_view,omitempty"`
	// Automatically transcribe the audio of a meeting or webinar for cloud recordings.
	RecordingAudioTranscript *bool `json:"recording_audio_transcript,omitempty"`
	// Save chat messages from the meeting / webinar.
	SaveChatText *bool `json:"save_chat_text,omitempty"`
	// Add a timestamp to the recording.
	ShowTimestamp *bool `json:"show_timestamp,omitempty"`
}

// GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum - Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
// `none`: Do not require password for PMI meetings.<br>
// `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
type GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum string

const (
	GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnumAll     GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "all"
	GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnumJbhOnly GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "jbh_only"
	GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnumNone    GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum = "none"
)

func (e *GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "jbh_only":
		fallthrough
	case "none":
		*e = GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum: %s", s)
	}
}

type GetGroupSettings200ApplicationJSON1ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType *string `json:"audio_type,omitempty"`
	// If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
	//
	EmbedPasswordInJoinLink *bool `json:"embed_password_in_join_link,omitempty"`
	// If join before host option is enabled for a personal meeting, then enforce password requirement.
	//
	//
	// **This field will be deprecated in near future.** If you would like to enable this setting, we highly encourage you to use the `require_password_for_pmi_meetings` field.
	//
	//
	ForcePmiJbhPassword *bool `json:"force_pmi_jbh_password,omitempty"`
	// Start meetings with host video on.
	HostVideo *bool `json:"host_video,omitempty"`
	// Allow participants to join the meeting before the host arrives
	JoinBeforeHost *bool `json:"join_before_host,omitempty"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start meetings with participant video on.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Personal Meeting Setting.<br><br>
	// `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
	// `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
	//
	//
	//
	PersonalMeeting *bool `json:"personal_meeting,omitempty"`
	// Generate and send new passwords for newly scheduled or edited meetings.
	PstnPasswordProtected *bool `json:"pstn_password_protected,omitempty"`
	// If enabled, a random password will be generated on the user's end who starts the instant meeting. Other participants will have to enter the password to join the meeting. If you use PMI for your instant meetings, this option will be disabled.
	RequirePasswordForInstantMeetings *bool `json:"require_password_for_instant_meetings,omitempty"`
	// Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
	// `none`: Do not require password for PMI meetings.<br>
	// `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
	RequirePasswordForPmiMeetings *GetGroupSettings200ApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum `json:"require_password_for_pmi_meetings,omitempty"`
	// Require a password for meetings which have already been scheduled
	//
	RequirePasswordForScheduledMeetings *bool `json:"require_password_for_scheduled_meetings,omitempty"`
	// This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings *bool `json:"require_password_for_scheduling_new_meetings,omitempty"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder *bool `json:"upcoming_meeting_reminder,omitempty"`
	// Indicates whether PMI is enabled for all instant meetings or not.
	UsePmiForInstantMeetings *bool `json:"use_pmi_for_instant_meetings,omitempty"`
	// Indicates whether PMI is enabled for all scheduled meetings or not.
	UsePmiForScheduleMeetings *bool `json:"use_pmi_for_schedule_meetings,omitempty"`
}

// GetGroupSettings200ApplicationJSON1TelephonyTelephonyRegions - Indicates where most of the participants call into or call from duriing a meeting.
type GetGroupSettings200ApplicationJSON1TelephonyTelephonyRegions struct {
	// Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
	SelectionValues []string `json:"selection_values,omitempty"`
}

type GetGroupSettings200ApplicationJSON1Telephony struct {
	AudioConferenceInfo *string `json:"audio_conference_info,omitempty"`
	// Indicates where most of the participants call into or call from duriing a meeting.
	TelephonyRegions *GetGroupSettings200ApplicationJSON1TelephonyTelephonyRegions `json:"telephony_regions,omitempty"`
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio *bool `json:"third_party_audio,omitempty"`
}

type GetGroupSettings200ApplicationJSON1 struct {
	EmailNotification *GetGroupSettings200ApplicationJSON1EmailNotification `json:"email_notification,omitempty"`
	InMeeting         *GetGroupSettings200ApplicationJSON1InMeeting         `json:"in_meeting,omitempty"`
	Profile           *GetGroupSettings200ApplicationJSON1Profile           `json:"profile,omitempty"`
	Recording         *GetGroupSettings200ApplicationJSON1Recording         `json:"recording,omitempty"`
	ScheduleMeeting   *GetGroupSettings200ApplicationJSON1ScheduleMeeting   `json:"schedule_meeting,omitempty"`
	Telephony         *GetGroupSettings200ApplicationJSON1Telephony         `json:"telephony,omitempty"`
}

type GetGroupSettings200ApplicationJSONType string

const (
	GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON1                              GetGroupSettings200ApplicationJSONType = "getGroupSettings_200ApplicationJSON_1"
	GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON2                              GetGroupSettings200ApplicationJSONType = "getGroupSettings_200ApplicationJSON_2"
	GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings GetGroupSettings200ApplicationJSONType = "getGroupSettings_200ApplicationJSON_Meeting/Webinar Security Settings"
)

type GetGroupSettings200ApplicationJSON struct {
	GetGroupSettings200ApplicationJSON1                              *GetGroupSettings200ApplicationJSON1
	GetGroupSettings200ApplicationJSON2                              *GetGroupSettings200ApplicationJSON2
	GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings *GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings

	Type GetGroupSettings200ApplicationJSONType
}

func CreateGetGroupSettings200ApplicationJSONGetGroupSettings200ApplicationJSON1(getGroupSettings200ApplicationJSON1 GetGroupSettings200ApplicationJSON1) GetGroupSettings200ApplicationJSON {
	typ := GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON1

	return GetGroupSettings200ApplicationJSON{
		GetGroupSettings200ApplicationJSON1: &getGroupSettings200ApplicationJSON1,
		Type:                                typ,
	}
}

func CreateGetGroupSettings200ApplicationJSONGetGroupSettings200ApplicationJSON2(getGroupSettings200ApplicationJSON2 GetGroupSettings200ApplicationJSON2) GetGroupSettings200ApplicationJSON {
	typ := GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON2

	return GetGroupSettings200ApplicationJSON{
		GetGroupSettings200ApplicationJSON2: &getGroupSettings200ApplicationJSON2,
		Type:                                typ,
	}
}

func CreateGetGroupSettings200ApplicationJSONGetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings(getGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings) GetGroupSettings200ApplicationJSON {
	typ := GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings

	return GetGroupSettings200ApplicationJSON{
		GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings: &getGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings,
		Type: typ,
	}
}

func (u *GetGroupSettings200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getGroupSettings200ApplicationJSON1 := new(GetGroupSettings200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationJSON1); err == nil {
		u.GetGroupSettings200ApplicationJSON1 = getGroupSettings200ApplicationJSON1
		u.Type = GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON1
		return nil
	}

	getGroupSettings200ApplicationJSON2 := new(GetGroupSettings200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationJSON2); err == nil {
		u.GetGroupSettings200ApplicationJSON2 = getGroupSettings200ApplicationJSON2
		u.Type = GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSON2
		return nil
	}

	getGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings := new(GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings); err == nil {
		u.GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings = getGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings
		u.Type = GetGroupSettings200ApplicationJSONTypeGetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetGroupSettings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetGroupSettings200ApplicationJSON1 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationJSON1)
	}

	if u.GetGroupSettings200ApplicationJSON2 != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationJSON2)
	}

	if u.GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings != nil {
		return json.Marshal(u.GetGroupSettings200ApplicationJSONMeetingWebinarSecuritySettings)
	}

	return nil, nil
}

type GetGroupSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Error Code**: `200` <br>
	// Only available for paid account.
	//
	// **HTTP Status Code**: `200` <br>
	// Group Settings Returned.
	//
	GetGroupSettings200ApplicationJSONOneOf *GetGroupSettings200ApplicationJSON
}
