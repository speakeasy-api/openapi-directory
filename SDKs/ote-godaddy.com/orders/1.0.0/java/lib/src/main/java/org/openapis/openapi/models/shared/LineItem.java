/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class LineItem {
    /**
     * A collection of domain names purchased if the current product is domain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    public String[] domains;

    public LineItem withDomains(String[] domains) {
        this.domains = domains;
        return this;
    }
    
    /**
     * Human readable description of the current product
     */
    @JsonProperty("label")
    public String label;

    public LineItem withLabel(String label) {
        this.label = label;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    public Double period;

    public LineItem withPeriod(Double period) {
        this.period = period;
        return this;
    }
    
    /**
     * The unit of time that periodCount is measured in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periodUnit")
    public LineItemPeriodUnitEnum periodUnit;

    public LineItem withPeriodUnit(LineItemPeriodUnitEnum periodUnit) {
        this.periodUnit = periodUnit;
        return this;
    }
    
    /**
     * Unique identifier of the current product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pfid")
    public Long pfid;

    public LineItem withPfid(Long pfid) {
        this.pfid = pfid;
        return this;
    }
    
    @JsonProperty("pricing")
    public LineItemPricing pricing;

    public LineItem withPricing(LineItemPricing pricing) {
        this.pricing = pricing;
        return this;
    }
    
    /**
     * Number of the current product included in the specified order
     */
    @JsonProperty("quantity")
    public Long quantity;

    public LineItem withQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxCollector")
    public LineItemTaxCollector taxCollector;

    public LineItem withTaxCollector(LineItemTaxCollector taxCollector) {
        this.taxCollector = taxCollector;
        return this;
    }
    
    public LineItem(@JsonProperty("label") String label, @JsonProperty("pricing") LineItemPricing pricing, @JsonProperty("quantity") Long quantity) {
        this.label = label;
        this.pricing = pricing;
        this.quantity = quantity;
  }
}
