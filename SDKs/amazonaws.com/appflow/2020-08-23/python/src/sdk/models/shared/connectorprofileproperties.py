"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customconnectorprofileproperties as shared_customconnectorprofileproperties
from ..shared import datadogconnectorprofileproperties as shared_datadogconnectorprofileproperties
from ..shared import dynatraceconnectorprofileproperties as shared_dynatraceconnectorprofileproperties
from ..shared import infornexusconnectorprofileproperties as shared_infornexusconnectorprofileproperties
from ..shared import marketoconnectorprofileproperties as shared_marketoconnectorprofileproperties
from ..shared import pardotconnectorprofileproperties as shared_pardotconnectorprofileproperties
from ..shared import redshiftconnectorprofileproperties as shared_redshiftconnectorprofileproperties
from ..shared import salesforceconnectorprofileproperties as shared_salesforceconnectorprofileproperties
from ..shared import sapodataconnectorprofileproperties as shared_sapodataconnectorprofileproperties
from ..shared import servicenowconnectorprofileproperties as shared_servicenowconnectorprofileproperties
from ..shared import slackconnectorprofileproperties as shared_slackconnectorprofileproperties
from ..shared import snowflakeconnectorprofileproperties as shared_snowflakeconnectorprofileproperties
from ..shared import veevaconnectorprofileproperties as shared_veevaconnectorprofileproperties
from ..shared import zendeskconnectorprofileproperties as shared_zendeskconnectorprofileproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectorProfileProperties:
    r"""The connector-specific profile properties required by each connector."""
    
    amplitude: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amplitude'), 'exclude': lambda f: f is None }})  
    custom_connector: Optional[shared_customconnectorprofileproperties.CustomConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomConnector'), 'exclude': lambda f: f is None }})  
    datadog: Optional[shared_datadogconnectorprofileproperties.DatadogConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Datadog'), 'exclude': lambda f: f is None }})  
    dynatrace: Optional[shared_dynatraceconnectorprofileproperties.DynatraceConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dynatrace'), 'exclude': lambda f: f is None }})  
    google_analytics: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoogleAnalytics'), 'exclude': lambda f: f is None }})  
    honeycode: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Honeycode'), 'exclude': lambda f: f is None }})  
    infor_nexus: Optional[shared_infornexusconnectorprofileproperties.InforNexusConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InforNexus'), 'exclude': lambda f: f is None }})  
    marketo: Optional[shared_marketoconnectorprofileproperties.MarketoConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Marketo'), 'exclude': lambda f: f is None }})  
    pardot: Optional[shared_pardotconnectorprofileproperties.PardotConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pardot'), 'exclude': lambda f: f is None }})  
    redshift: Optional[shared_redshiftconnectorprofileproperties.RedshiftConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Redshift'), 'exclude': lambda f: f is None }})  
    salesforce: Optional[shared_salesforceconnectorprofileproperties.SalesforceConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Salesforce'), 'exclude': lambda f: f is None }})  
    sapo_data: Optional[shared_sapodataconnectorprofileproperties.SAPODataConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SAPOData'), 'exclude': lambda f: f is None }})
    r"""The connector-specific profile properties required when using SAPOData."""  
    service_now: Optional[shared_servicenowconnectorprofileproperties.ServiceNowConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNow'), 'exclude': lambda f: f is None }})  
    singular: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Singular'), 'exclude': lambda f: f is None }})  
    slack: Optional[shared_slackconnectorprofileproperties.SlackConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Slack'), 'exclude': lambda f: f is None }})  
    snowflake: Optional[shared_snowflakeconnectorprofileproperties.SnowflakeConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Snowflake'), 'exclude': lambda f: f is None }})  
    trendmicro: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Trendmicro'), 'exclude': lambda f: f is None }})  
    veeva: Optional[shared_veevaconnectorprofileproperties.VeevaConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Veeva'), 'exclude': lambda f: f is None }})  
    zendesk: Optional[shared_zendeskconnectorprofileproperties.ZendeskConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zendesk'), 'exclude': lambda f: f is None }})  
    