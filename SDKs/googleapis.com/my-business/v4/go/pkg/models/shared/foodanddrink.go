// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FoodAndDrinkBarExceptionEnum - Bar exception.
type FoodAndDrinkBarExceptionEnum string

const (
	FoodAndDrinkBarExceptionEnumExceptionUnspecified FoodAndDrinkBarExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkBarExceptionEnumUnderConstruction    FoodAndDrinkBarExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkBarExceptionEnumDependentOnSeason    FoodAndDrinkBarExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkBarExceptionEnumDependentOnDayOfWeek FoodAndDrinkBarExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkBarExceptionEnum) ToPointer() *FoodAndDrinkBarExceptionEnum {
	return &e
}

func (e *FoodAndDrinkBarExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkBarExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkBarExceptionEnum: %v", v)
	}
}

// FoodAndDrinkBreakfastAvailableExceptionEnum - Breakfast available exception.
type FoodAndDrinkBreakfastAvailableExceptionEnum string

const (
	FoodAndDrinkBreakfastAvailableExceptionEnumExceptionUnspecified FoodAndDrinkBreakfastAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkBreakfastAvailableExceptionEnumUnderConstruction    FoodAndDrinkBreakfastAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkBreakfastAvailableExceptionEnumDependentOnSeason    FoodAndDrinkBreakfastAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkBreakfastAvailableExceptionEnumDependentOnDayOfWeek FoodAndDrinkBreakfastAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkBreakfastAvailableExceptionEnum) ToPointer() *FoodAndDrinkBreakfastAvailableExceptionEnum {
	return &e
}

func (e *FoodAndDrinkBreakfastAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkBreakfastAvailableExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkBreakfastAvailableExceptionEnum: %v", v)
	}
}

// FoodAndDrinkBreakfastBuffetExceptionEnum - Breakfast buffet exception.
type FoodAndDrinkBreakfastBuffetExceptionEnum string

const (
	FoodAndDrinkBreakfastBuffetExceptionEnumExceptionUnspecified FoodAndDrinkBreakfastBuffetExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkBreakfastBuffetExceptionEnumUnderConstruction    FoodAndDrinkBreakfastBuffetExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkBreakfastBuffetExceptionEnumDependentOnSeason    FoodAndDrinkBreakfastBuffetExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkBreakfastBuffetExceptionEnumDependentOnDayOfWeek FoodAndDrinkBreakfastBuffetExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkBreakfastBuffetExceptionEnum) ToPointer() *FoodAndDrinkBreakfastBuffetExceptionEnum {
	return &e
}

func (e *FoodAndDrinkBreakfastBuffetExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkBreakfastBuffetExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkBreakfastBuffetExceptionEnum: %v", v)
	}
}

// FoodAndDrinkBuffetExceptionEnum - Buffet exception.
type FoodAndDrinkBuffetExceptionEnum string

const (
	FoodAndDrinkBuffetExceptionEnumExceptionUnspecified FoodAndDrinkBuffetExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkBuffetExceptionEnumUnderConstruction    FoodAndDrinkBuffetExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkBuffetExceptionEnumDependentOnSeason    FoodAndDrinkBuffetExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkBuffetExceptionEnumDependentOnDayOfWeek FoodAndDrinkBuffetExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkBuffetExceptionEnum) ToPointer() *FoodAndDrinkBuffetExceptionEnum {
	return &e
}

func (e *FoodAndDrinkBuffetExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkBuffetExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkBuffetExceptionEnum: %v", v)
	}
}

// FoodAndDrinkDinnerBuffetExceptionEnum - Dinner buffet exception.
type FoodAndDrinkDinnerBuffetExceptionEnum string

const (
	FoodAndDrinkDinnerBuffetExceptionEnumExceptionUnspecified FoodAndDrinkDinnerBuffetExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkDinnerBuffetExceptionEnumUnderConstruction    FoodAndDrinkDinnerBuffetExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkDinnerBuffetExceptionEnumDependentOnSeason    FoodAndDrinkDinnerBuffetExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkDinnerBuffetExceptionEnumDependentOnDayOfWeek FoodAndDrinkDinnerBuffetExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkDinnerBuffetExceptionEnum) ToPointer() *FoodAndDrinkDinnerBuffetExceptionEnum {
	return &e
}

func (e *FoodAndDrinkDinnerBuffetExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkDinnerBuffetExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkDinnerBuffetExceptionEnum: %v", v)
	}
}

// FoodAndDrinkFreeBreakfastExceptionEnum - Free breakfast exception.
type FoodAndDrinkFreeBreakfastExceptionEnum string

const (
	FoodAndDrinkFreeBreakfastExceptionEnumExceptionUnspecified FoodAndDrinkFreeBreakfastExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkFreeBreakfastExceptionEnumUnderConstruction    FoodAndDrinkFreeBreakfastExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkFreeBreakfastExceptionEnumDependentOnSeason    FoodAndDrinkFreeBreakfastExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkFreeBreakfastExceptionEnumDependentOnDayOfWeek FoodAndDrinkFreeBreakfastExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkFreeBreakfastExceptionEnum) ToPointer() *FoodAndDrinkFreeBreakfastExceptionEnum {
	return &e
}

func (e *FoodAndDrinkFreeBreakfastExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkFreeBreakfastExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkFreeBreakfastExceptionEnum: %v", v)
	}
}

// FoodAndDrinkRestaurantExceptionEnum - Restaurant exception.
type FoodAndDrinkRestaurantExceptionEnum string

const (
	FoodAndDrinkRestaurantExceptionEnumExceptionUnspecified FoodAndDrinkRestaurantExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkRestaurantExceptionEnumUnderConstruction    FoodAndDrinkRestaurantExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkRestaurantExceptionEnumDependentOnSeason    FoodAndDrinkRestaurantExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkRestaurantExceptionEnumDependentOnDayOfWeek FoodAndDrinkRestaurantExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkRestaurantExceptionEnum) ToPointer() *FoodAndDrinkRestaurantExceptionEnum {
	return &e
}

func (e *FoodAndDrinkRestaurantExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkRestaurantExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkRestaurantExceptionEnum: %v", v)
	}
}

// FoodAndDrinkRestaurantsCountExceptionEnum - Restaurants count exception.
type FoodAndDrinkRestaurantsCountExceptionEnum string

const (
	FoodAndDrinkRestaurantsCountExceptionEnumExceptionUnspecified FoodAndDrinkRestaurantsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkRestaurantsCountExceptionEnumUnderConstruction    FoodAndDrinkRestaurantsCountExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkRestaurantsCountExceptionEnumDependentOnSeason    FoodAndDrinkRestaurantsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkRestaurantsCountExceptionEnumDependentOnDayOfWeek FoodAndDrinkRestaurantsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkRestaurantsCountExceptionEnum) ToPointer() *FoodAndDrinkRestaurantsCountExceptionEnum {
	return &e
}

func (e *FoodAndDrinkRestaurantsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkRestaurantsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkRestaurantsCountExceptionEnum: %v", v)
	}
}

// FoodAndDrinkRoomServiceExceptionEnum - Room service exception.
type FoodAndDrinkRoomServiceExceptionEnum string

const (
	FoodAndDrinkRoomServiceExceptionEnumExceptionUnspecified FoodAndDrinkRoomServiceExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkRoomServiceExceptionEnumUnderConstruction    FoodAndDrinkRoomServiceExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkRoomServiceExceptionEnumDependentOnSeason    FoodAndDrinkRoomServiceExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkRoomServiceExceptionEnumDependentOnDayOfWeek FoodAndDrinkRoomServiceExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkRoomServiceExceptionEnum) ToPointer() *FoodAndDrinkRoomServiceExceptionEnum {
	return &e
}

func (e *FoodAndDrinkRoomServiceExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkRoomServiceExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkRoomServiceExceptionEnum: %v", v)
	}
}

// FoodAndDrinkTableServiceExceptionEnum - Table service exception.
type FoodAndDrinkTableServiceExceptionEnum string

const (
	FoodAndDrinkTableServiceExceptionEnumExceptionUnspecified FoodAndDrinkTableServiceExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkTableServiceExceptionEnumUnderConstruction    FoodAndDrinkTableServiceExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkTableServiceExceptionEnumDependentOnSeason    FoodAndDrinkTableServiceExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkTableServiceExceptionEnumDependentOnDayOfWeek FoodAndDrinkTableServiceExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkTableServiceExceptionEnum) ToPointer() *FoodAndDrinkTableServiceExceptionEnum {
	return &e
}

func (e *FoodAndDrinkTableServiceExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkTableServiceExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkTableServiceExceptionEnum: %v", v)
	}
}

// FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum - 24hr room service exception.
type FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum string

const (
	FoodAndDrinkTwentyFourHourRoomServiceExceptionEnumExceptionUnspecified FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkTwentyFourHourRoomServiceExceptionEnumUnderConstruction    FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkTwentyFourHourRoomServiceExceptionEnumDependentOnSeason    FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkTwentyFourHourRoomServiceExceptionEnumDependentOnDayOfWeek FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum) ToPointer() *FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum {
	return &e
}

func (e *FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum: %v", v)
	}
}

// FoodAndDrinkVendingMachineExceptionEnum - Vending machine exception.
type FoodAndDrinkVendingMachineExceptionEnum string

const (
	FoodAndDrinkVendingMachineExceptionEnumExceptionUnspecified FoodAndDrinkVendingMachineExceptionEnum = "EXCEPTION_UNSPECIFIED"
	FoodAndDrinkVendingMachineExceptionEnumUnderConstruction    FoodAndDrinkVendingMachineExceptionEnum = "UNDER_CONSTRUCTION"
	FoodAndDrinkVendingMachineExceptionEnumDependentOnSeason    FoodAndDrinkVendingMachineExceptionEnum = "DEPENDENT_ON_SEASON"
	FoodAndDrinkVendingMachineExceptionEnumDependentOnDayOfWeek FoodAndDrinkVendingMachineExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e FoodAndDrinkVendingMachineExceptionEnum) ToPointer() *FoodAndDrinkVendingMachineExceptionEnum {
	return &e
}

func (e *FoodAndDrinkVendingMachineExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = FoodAndDrinkVendingMachineExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FoodAndDrinkVendingMachineExceptionEnum: %v", v)
	}
}

// FoodAndDrink - Meals, snacks, and beverages available at the property.
type FoodAndDrink struct {
	// Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.
	Bar *bool `json:"bar,omitempty"`
	// Bar exception.
	BarException *FoodAndDrinkBarExceptionEnum `json:"barException,omitempty"`
	// Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.
	BreakfastAvailable *bool `json:"breakfastAvailable,omitempty"`
	// Breakfast available exception.
	BreakfastAvailableException *FoodAndDrinkBreakfastAvailableExceptionEnum `json:"breakfastAvailableException,omitempty"`
	// Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
	BreakfastBuffet *bool `json:"breakfastBuffet,omitempty"`
	// Breakfast buffet exception.
	BreakfastBuffetException *FoodAndDrinkBreakfastBuffetExceptionEnum `json:"breakfastBuffetException,omitempty"`
	// Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.
	Buffet *bool `json:"buffet,omitempty"`
	// Buffet exception.
	BuffetException *FoodAndDrinkBuffetExceptionEnum `json:"buffetException,omitempty"`
	// Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
	DinnerBuffet *bool `json:"dinnerBuffet,omitempty"`
	// Dinner buffet exception.
	DinnerBuffetException *FoodAndDrinkDinnerBuffetExceptionEnum `json:"dinnerBuffetException,omitempty"`
	// Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.
	FreeBreakfast *bool `json:"freeBreakfast,omitempty"`
	// Free breakfast exception.
	FreeBreakfastException *FoodAndDrinkFreeBreakfastExceptionEnum `json:"freeBreakfastException,omitempty"`
	// Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A "breakfast room" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.
	Restaurant *bool `json:"restaurant,omitempty"`
	// Restaurant exception.
	RestaurantException *FoodAndDrinkRestaurantExceptionEnum `json:"restaurantException,omitempty"`
	// Restaurants count. The number of restaurants at the hotel.
	RestaurantsCount *int `json:"restaurantsCount,omitempty"`
	// Restaurants count exception.
	RestaurantsCountException *FoodAndDrinkRestaurantsCountExceptionEnum `json:"restaurantsCountException,omitempty"`
	// Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).
	RoomService *bool `json:"roomService,omitempty"`
	// Room service exception.
	RoomServiceException *FoodAndDrinkRoomServiceExceptionEnum `json:"roomServiceException,omitempty"`
	// Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.
	TableService *bool `json:"tableService,omitempty"`
	// Table service exception.
	TableServiceException *FoodAndDrinkTableServiceExceptionEnum `json:"tableServiceException,omitempty"`
	// 24hr room service. Room service is available 24 hours a day.
	TwentyFourHourRoomService *bool `json:"twentyFourHourRoomService,omitempty"`
	// 24hr room service exception.
	TwentyFourHourRoomServiceException *FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum `json:"twentyFourHourRoomServiceException,omitempty"`
	// Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.
	VendingMachine *bool `json:"vendingMachine,omitempty"`
	// Vending machine exception.
	VendingMachineException *FoodAndDrinkVendingMachineExceptionEnum `json:"vendingMachineException,omitempty"`
}
