// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobStatusStateEnum - Output only. A state message specifying the overall job state.
type JobStatusStateEnum string

const (
	JobStatusStateEnumStateUnspecified JobStatusStateEnum = "STATE_UNSPECIFIED"
	JobStatusStateEnumPending          JobStatusStateEnum = "PENDING"
	JobStatusStateEnumSetupDone        JobStatusStateEnum = "SETUP_DONE"
	JobStatusStateEnumRunning          JobStatusStateEnum = "RUNNING"
	JobStatusStateEnumCancelPending    JobStatusStateEnum = "CANCEL_PENDING"
	JobStatusStateEnumCancelStarted    JobStatusStateEnum = "CANCEL_STARTED"
	JobStatusStateEnumCancelled        JobStatusStateEnum = "CANCELLED"
	JobStatusStateEnumDone             JobStatusStateEnum = "DONE"
	JobStatusStateEnumError            JobStatusStateEnum = "ERROR"
	JobStatusStateEnumAttemptFailure   JobStatusStateEnum = "ATTEMPT_FAILURE"
)

func (e JobStatusStateEnum) ToPointer() *JobStatusStateEnum {
	return &e
}

func (e *JobStatusStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "SETUP_DONE":
		fallthrough
	case "RUNNING":
		fallthrough
	case "CANCEL_PENDING":
		fallthrough
	case "CANCEL_STARTED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "DONE":
		fallthrough
	case "ERROR":
		fallthrough
	case "ATTEMPT_FAILURE":
		*e = JobStatusStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusStateEnum: %v", v)
	}
}

// JobStatusSubstateEnum - Output only. Additional state information, which includes status reported by the agent.
type JobStatusSubstateEnum string

const (
	JobStatusSubstateEnumUnspecified JobStatusSubstateEnum = "UNSPECIFIED"
	JobStatusSubstateEnumSubmitted   JobStatusSubstateEnum = "SUBMITTED"
	JobStatusSubstateEnumQueued      JobStatusSubstateEnum = "QUEUED"
	JobStatusSubstateEnumStaleStatus JobStatusSubstateEnum = "STALE_STATUS"
)

func (e JobStatusSubstateEnum) ToPointer() *JobStatusSubstateEnum {
	return &e
}

func (e *JobStatusSubstateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "SUBMITTED":
		fallthrough
	case "QUEUED":
		fallthrough
	case "STALE_STATUS":
		*e = JobStatusSubstateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusSubstateEnum: %v", v)
	}
}

// JobStatus - Dataproc job status.
type JobStatus struct {
	// Optional. Output only. Job state details, such as an error description if the state is ERROR.
	Details *string `json:"details,omitempty"`
	// Output only. A state message specifying the overall job state.
	State *JobStatusStateEnum `json:"state,omitempty"`
	// Output only. The time when this state was entered.
	StateStartTime *string `json:"stateStartTime,omitempty"`
	// Output only. Additional state information, which includes status reported by the agent.
	Substate *JobStatusSubstateEnum `json:"substate,omitempty"`
}
