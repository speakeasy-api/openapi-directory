// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ErrorCodeEnum string

const (
	ErrorCodeEnumAccessDenied              ErrorCodeEnum = "ACCESS_DENIED"
	ErrorCodeEnumInvalidURLError           ErrorCodeEnum = "INVALID_URL_ERROR"
	ErrorCodeEnumInvalidImportOptionsError ErrorCodeEnum = "INVALID_IMPORT_OPTIONS_ERROR"
	ErrorCodeEnumInvalidTableIDError       ErrorCodeEnum = "INVALID_TABLE_ID_ERROR"
	ErrorCodeEnumInvalidTableColumnIDError ErrorCodeEnum = "INVALID_TABLE_COLUMN_ID_ERROR"
	ErrorCodeEnumTableNotFoundError        ErrorCodeEnum = "TABLE_NOT_FOUND_ERROR"
	ErrorCodeEnumFileEmptyError            ErrorCodeEnum = "FILE_EMPTY_ERROR"
	ErrorCodeEnumInvalidFileTypeError      ErrorCodeEnum = "INVALID_FILE_TYPE_ERROR"
	ErrorCodeEnumFileParsingError          ErrorCodeEnum = "FILE_PARSING_ERROR"
	ErrorCodeEnumFileSizeLimitError        ErrorCodeEnum = "FILE_SIZE_LIMIT_ERROR"
	ErrorCodeEnumFileNotFoundError         ErrorCodeEnum = "FILE_NOT_FOUND_ERROR"
	ErrorCodeEnumUnknownError              ErrorCodeEnum = "UNKNOWN_ERROR"
	ErrorCodeEnumResourceNotFoundError     ErrorCodeEnum = "RESOURCE_NOT_FOUND_ERROR"
	ErrorCodeEnumSystemLimitError          ErrorCodeEnum = "SYSTEM_LIMIT_ERROR"
)

func (e ErrorCodeEnum) ToPointer() *ErrorCodeEnum {
	return &e
}

func (e *ErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_DENIED":
		fallthrough
	case "INVALID_URL_ERROR":
		fallthrough
	case "INVALID_IMPORT_OPTIONS_ERROR":
		fallthrough
	case "INVALID_TABLE_ID_ERROR":
		fallthrough
	case "INVALID_TABLE_COLUMN_ID_ERROR":
		fallthrough
	case "TABLE_NOT_FOUND_ERROR":
		fallthrough
	case "FILE_EMPTY_ERROR":
		fallthrough
	case "INVALID_FILE_TYPE_ERROR":
		fallthrough
	case "FILE_PARSING_ERROR":
		fallthrough
	case "FILE_SIZE_LIMIT_ERROR":
		fallthrough
	case "FILE_NOT_FOUND_ERROR":
		fallthrough
	case "UNKNOWN_ERROR":
		fallthrough
	case "RESOURCE_NOT_FOUND_ERROR":
		fallthrough
	case "SYSTEM_LIMIT_ERROR":
		*e = ErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCodeEnum: %v", v)
	}
}
