"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appvisibility_enum as shared_appvisibility_enum
from ..shared import entitlementattribute as shared_entitlementattribute
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateEntitlementRequest:
    
    app_visibility: shared_appvisibility_enum.AppVisibilityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppVisibility') }})  
    attributes: list[shared_entitlementattribute.EntitlementAttribute] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    stack_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackName') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    