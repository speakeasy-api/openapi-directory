/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Dimensions } from "./dimensions";
import { LabelMessages } from "./labelmessages";
import { Weight } from "./weight";
import { Expose, Type } from "class-transformer";

/**
 * A monetary value, such as the price of a shipping label, the insured value of a package, or an account balance.
 *
 * @remarks
 *
 */
export class PackageMonetaryValue extends SpeakeasyBase {
  /**
   * The monetary amount, in the specified currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;
}

/**
 * A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
 *
 * @remarks
 *
 */
export class PackageInput extends SpeakeasyBase {
  /**
   * A short description of the package content. Required for shipments moving to, from, and through Mexico.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_description" })
  contentDescription?: string;

  /**
   * The package dimensions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensions" })
  @Type(() => Dimensions)
  dimensions?: Dimensions;

  /**
   * An external package id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_package_id" })
  externalPackageId?: string;

  /**
   * The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insured_value" })
  @Type(() => PackageMonetaryValue)
  insuredValue?: PackageMonetaryValue;

  @SpeakeasyMetadata()
  @Expose({ name: "label_messages" })
  @Type(() => LabelMessages)
  labelMessages?: LabelMessages;

  /**
   * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_code" })
  packageCode?: string;

  /**
   * A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_id" })
  packageId?: string;

  /**
   * The package weight
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weight" })
  @Type(() => Weight)
  weight: Weight;
}

/**
 * A link to a related resource, or an empty object if there is no resource to link to
 */
export class PackageOptionalLink extends SpeakeasyBase {
  /**
   * The URL of the linked resource, if any
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * The type of resource, or the type of relationship to the parent resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Reference to the various downloadable file formats for the generated label
 *
 * @remarks
 *
 */
export class PackageLabelDownload extends SpeakeasyBase {
  /**
   * The URL of the linked resource, if any
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * The URL for the pdf generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pdf" })
  pdf?: string;

  /**
   * The URL for the png generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "png" })
  png?: string;

  /**
   * The URL for the zpl generated label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zpl" })
  zpl?: string;
}

/**
 * A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
 *
 * @remarks
 *
 */
export class Package extends SpeakeasyBase {
  /**
   * A short description of the package content. Required for shipments moving to, from, and through Mexico.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_description" })
  contentDescription?: string;

  /**
   * The package dimensions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensions" })
  @Type(() => Dimensions)
  dimensions?: Dimensions;

  /**
   * An external package id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_package_id" })
  externalPackageId?: string;

  /**
   * The form download for any customs that are needed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_download" })
  @Type(() => PackageOptionalLink)
  formDownload?: PackageOptionalLink;

  /**
   * The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insured_value" })
  @Type(() => PackageMonetaryValue)
  insuredValue?: PackageMonetaryValue;

  /**
   * The label download for the package
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_download" })
  @Type(() => PackageLabelDownload)
  labelDownload?: PackageLabelDownload;

  @SpeakeasyMetadata()
  @Expose({ name: "label_messages" })
  @Type(() => LabelMessages)
  labelMessages?: LabelMessages;

  /**
   * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_code" })
  packageCode?: string;

  /**
   * A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_id" })
  packageId?: string;

  /**
   * Package sequence
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sequence" })
  sequence?: number;

  /**
   * The tracking number for the package.  The format depends on the carrier.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tracking_number" })
  trackingNumber?: string;

  /**
   * The package weight
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weight" })
  @Type(() => Weight)
  weight: Weight;
}
