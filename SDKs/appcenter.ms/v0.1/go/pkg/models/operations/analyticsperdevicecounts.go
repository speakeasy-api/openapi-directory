// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsPerDeviceCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsPerDeviceCountsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsPerDeviceCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsPerDeviceCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsPerDeviceCountsDefaultApplicationJSON - Error
type AnalyticsPerDeviceCountsDefaultApplicationJSON struct {
	Error *AnalyticsPerDeviceCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsPerDeviceCounts200ApplicationJSONSessionsPerUser struct {
	// Count.
	Count *float64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsPerDeviceCounts200ApplicationJSON - Count of sessions per device in the time range.
type AnalyticsPerDeviceCounts200ApplicationJSON struct {
	// Average seesion per user.
	AverageSessionsPerUser *float64 `json:"average_sessions_per_user,omitempty"`
	// Previous average session per user.
	PreviousAverageSessionsPerUser *float64 `json:"previous_average_sessions_per_user,omitempty"`
	// Previous total count.
	PreviousTotalCount *int64 `json:"previous_total_count,omitempty"`
	// The session count for each interval per device.
	SessionsPerUser []AnalyticsPerDeviceCounts200ApplicationJSONSessionsPerUser `json:"sessions_per_user,omitempty"`
	// Total session per device count.
	TotalCount *int64 `json:"total_count,omitempty"`
}

type AnalyticsPerDeviceCountsResponse struct {
	// Count of sessions per device in the time range.
	AnalyticsPerDeviceCounts200ApplicationJSONObject *AnalyticsPerDeviceCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsPerDeviceCountsDefaultApplicationJSONObject *AnalyticsPerDeviceCountsDefaultApplicationJSON
	ContentType                                          string
	StatusCode                                           int
	RawResponse                                          *http.Response
}
