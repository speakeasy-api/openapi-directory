// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CommandFilterKeyEnum string

const (
	CommandFilterKeyEnumInvokedAfter   CommandFilterKeyEnum = "InvokedAfter"
	CommandFilterKeyEnumInvokedBefore  CommandFilterKeyEnum = "InvokedBefore"
	CommandFilterKeyEnumStatus         CommandFilterKeyEnum = "Status"
	CommandFilterKeyEnumExecutionStage CommandFilterKeyEnum = "ExecutionStage"
	CommandFilterKeyEnumDocumentName   CommandFilterKeyEnum = "DocumentName"
)

func (e CommandFilterKeyEnum) ToPointer() *CommandFilterKeyEnum {
	return &e
}

func (e *CommandFilterKeyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "InvokedAfter":
		fallthrough
	case "InvokedBefore":
		fallthrough
	case "Status":
		fallthrough
	case "ExecutionStage":
		fallthrough
	case "DocumentName":
		*e = CommandFilterKeyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommandFilterKeyEnum: %v", v)
	}
}
