"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import catalogcategory as shared_catalogcategory
from ..shared import catalogcustomattributedefinition as shared_catalogcustomattributedefinition
from ..shared import catalogcustomattributevalue as shared_catalogcustomattributevalue
from ..shared import catalogdiscount as shared_catalogdiscount
from ..shared import catalogimage as shared_catalogimage
from ..shared import catalogitem as shared_catalogitem
from ..shared import catalogitemoption as shared_catalogitemoption
from ..shared import catalogitemoptionvalue as shared_catalogitemoptionvalue
from ..shared import catalogitemvariation as shared_catalogitemvariation
from ..shared import catalogmeasurementunit as shared_catalogmeasurementunit
from ..shared import catalogmodifier as shared_catalogmodifier
from ..shared import catalogmodifierlist as shared_catalogmodifierlist
from ..shared import catalogpricingrule as shared_catalogpricingrule
from ..shared import catalogproductset as shared_catalogproductset
from ..shared import catalogquickamountssettings as shared_catalogquickamountssettings
from ..shared import catalogsubscriptionplan as shared_catalogsubscriptionplan
from ..shared import catalogtax as shared_catalogtax
from ..shared import catalogtimeperiod as shared_catalogtimeperiod
from ..shared import catalogv1id as shared_catalogv1id
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogObject:
    r"""The wrapper object for the Catalog entries of a given object type.
    
    The type of a particular `CatalogObject` is determined by the value of the
    `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
    For example, the following list shows some instances of `CatalogObject` of a given `type` and
    their corresponding data attribute that can be set:
    - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
    - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
    - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
    - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
    - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
    - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
    - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
    - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
    - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
    - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
    - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
    - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
    - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
    
    
    For a more detailed discussion of the Catalog data model, please see the
    [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
    """
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""An identifier to reference this object in the catalog. When a new `CatalogObject`
    is inserted, the client should set the id to a temporary identifier starting with
    a \"`#`\" character. Other objects being inserted or updated within the same request
    may use this identifier to refer to the new object.
    
    When the server receives the new object, it will supply a unique identifier that
    replaces the temporary identifier for all future references.
    """  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this object. Each object type has expected
    properties expressed in a structured format within its corresponding `*_data` field below.
    """  
    absent_at_location_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absent_at_location_ids'), 'exclude': lambda f: f is None }})
    r"""A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
    This can include locations that are deactivated.
    """  
    catalog_v1_ids: Optional[list[shared_catalogv1id.CatalogV1ID]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_v1_ids'), 'exclude': lambda f: f is None }})
    r"""The Connect v1 IDs for this object at each location where it is present, where they
    differ from the object's Connect V2 ID. The field will only be present for objects that
    have been created or modified by legacy APIs.
    """  
    category_data: Optional[shared_catalogcategory.CatalogCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_data'), 'exclude': lambda f: f is None }})
    r"""A category to which a `CatalogItem` instance belongs."""  
    custom_attribute_definition_data: Optional[shared_catalogcustomattributedefinition.CatalogCustomAttributeDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_definition_data'), 'exclude': lambda f: f is None }})
    r"""Contains information defining a custom attribute. Custom attributes are
    intended to store additional information about a catalog object or to associate a
    catalog object with an entity in another system. Do not use custom attributes
    to store any sensitive information (personally identifiable information, card details, etc.).
    [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
    """  
    custom_attribute_values: Optional[dict[str, shared_catalogcustomattributevalue.CatalogCustomAttributeValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_values'), 'exclude': lambda f: f is None }})
    r"""A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
    is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
    value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
    object defined by the application making the request.
    
    If the `CatalogCustomAttributeDefinition` object is
    defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
    the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
    `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"`
    if the application making the request is different from the application defining the custom attribute definition.
    Otherwise, the key used in the map is simply `\"cocoa_brand\"`.
    
    Application-defined custom attributes that are set at a global (location-independent) level.
    Custom attribute values are intended to store additional information about a catalog object
    or associations with an entity in another system. Do not use custom attributes
    to store any sensitive information (personally identifiable information, card details, etc.).
    """  
    discount_data: Optional[shared_catalogdiscount.CatalogDiscount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount_data'), 'exclude': lambda f: f is None }})
    r"""A discount applicable to items."""  
    image_data: Optional[shared_catalogimage.CatalogImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_data'), 'exclude': lambda f: f is None }})
    r"""An image file to use in Square catalogs. It can be associated with catalog
    items, item variations, and categories.
    """  
    image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_id'), 'exclude': lambda f: f is None }})
    r"""Identifies the `CatalogImage` attached to this `CatalogObject`."""  
    is_deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_deleted'), 'exclude': lambda f: f is None }})
    r"""If `true`, the object has been deleted from the database. Must be `false` for new objects
    being inserted. When deleted, the `updated_at` field will equal the deletion time.
    """  
    item_data: Optional[shared_catalogitem.CatalogItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_data'), 'exclude': lambda f: f is None }})
    r"""A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog."""  
    item_option_data: Optional[shared_catalogitemoption.CatalogItemOption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_option_data'), 'exclude': lambda f: f is None }})
    r"""A group of variations for a `CatalogItem`."""  
    item_option_value_data: Optional[shared_catalogitemoptionvalue.CatalogItemOptionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_option_value_data'), 'exclude': lambda f: f is None }})
    r"""An enumerated value that can link a
    `CatalogItemVariation` to an item option as one of
    its item option values.
    """  
    item_variation_data: Optional[shared_catalogitemvariation.CatalogItemVariation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_variation_data'), 'exclude': lambda f: f is None }})
    r"""An item variation (i.e., product) in the Catalog object model. Each item
    may have a maximum of 250 item variations.
    """  
    measurement_unit_data: Optional[shared_catalogmeasurementunit.CatalogMeasurementUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement_unit_data'), 'exclude': lambda f: f is None }})
    r"""Represents the unit used to measure a `CatalogItemVariation` and
    specifies the precision for decimal quantities.
    """  
    modifier_data: Optional[shared_catalogmodifier.CatalogModifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifier_data'), 'exclude': lambda f: f is None }})
    r"""A modifier applicable to items at the time of sale."""  
    modifier_list_data: Optional[shared_catalogmodifierlist.CatalogModifierList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifier_list_data'), 'exclude': lambda f: f is None }})
    r"""A list of modifiers applicable to items at the time of sale.
    
    For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item
    may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.
    Use the `selection_type` field to specify whether or not multiple selections from
    the modifier list are allowed.
    """  
    present_at_all_locations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present_at_all_locations'), 'exclude': lambda f: f is None }})
    r"""If `true`, this object is present at all locations (including future locations), except where specified in
    the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
    except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
    """  
    present_at_location_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present_at_location_ids'), 'exclude': lambda f: f is None }})
    r"""A list of locations where the object is present, even if `present_at_all_locations` is `false`.
    This can include locations that are deactivated.
    """  
    pricing_rule_data: Optional[shared_catalogpricingrule.CatalogPricingRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_rule_data'), 'exclude': lambda f: f is None }})
    r"""Defines how discounts are automatically applied to a set of items that match the pricing rule
    during the active time period.
    """  
    product_set_data: Optional[shared_catalogproductset.CatalogProductSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_set_data'), 'exclude': lambda f: f is None }})
    r"""Represents a collection of catalog objects for the purpose of applying a
    `PricingRule`. Including a catalog object will include all of its subtypes.
    For example, including a category in a product set will include all of its
    items and associated item variations in the product set. Including an item in
    a product set will also include its item variations.
    """  
    quick_amounts_settings_data: Optional[shared_catalogquickamountssettings.CatalogQuickAmountsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quick_amounts_settings_data'), 'exclude': lambda f: f is None }})
    r"""A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts."""  
    subscription_plan_data: Optional[shared_catalogsubscriptionplan.CatalogSubscriptionPlan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_plan_data'), 'exclude': lambda f: f is None }})
    r"""Describes a subscription plan. For more information, see
    [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
    """  
    tax_data: Optional[shared_catalogtax.CatalogTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_data'), 'exclude': lambda f: f is None }})
    r"""A tax applicable to an item."""  
    time_period_data: Optional[shared_catalogtimeperiod.CatalogTimePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_period_data'), 'exclude': lambda f: f is None }})
    r"""Represents a time period - either a single period or a repeating period."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\\"2016-08-15T23:59:33.123Z\\"`
    would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
    """  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version of the object. When updating an object, the version supplied
    must match the version in the database, otherwise the write will be rejected as conflicting.
    """  
    