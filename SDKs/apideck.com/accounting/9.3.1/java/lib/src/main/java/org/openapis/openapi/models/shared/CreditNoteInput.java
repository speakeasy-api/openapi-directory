/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class CreditNoteInput {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    public LinkedLedgerAccountInput account;

    public CreditNoteInput withAccount(LinkedLedgerAccountInput account) {
        this.account = account;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    public CreditNoteAllocationsInput[] allocations;

    public CreditNoteInput withAllocations(CreditNoteAllocationsInput[] allocations) {
        this.allocations = allocations;
        return this;
    }
    
    /**
     * The balance reflecting any payments made against the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public Double balance;

    public CreditNoteInput withBalance(Double balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyEnum currency;

    public CreditNoteInput withCurrency(CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    public Double currencyRate;

    public CreditNoteInput withCurrencyRate(Double currencyRate) {
        this.currencyRate = currencyRate;
        return this;
    }
    
    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public LinkedCustomerInput customer;

    public CreditNoteInput withCustomer(LinkedCustomerInput customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_issued")
    public OffsetDateTime dateIssued;

    public CreditNoteInput withDateIssued(OffsetDateTime dateIssued) {
        this.dateIssued = dateIssued;
        return this;
    }
    
    /**
     * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_paid")
    public OffsetDateTime datePaid;

    public CreditNoteInput withDatePaid(OffsetDateTime datePaid) {
        this.datePaid = datePaid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    public InvoiceLineItemInput[] lineItems;

    public CreditNoteInput withLineItems(InvoiceLineItemInput[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    /**
     * Optional note to be associated with the credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public CreditNoteInput withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Credit note number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;

    public CreditNoteInput withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Optional reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public CreditNoteInput withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Indicates the total credit amount still available to apply towards the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remaining_credit")
    public Double remainingCredit;

    public CreditNoteInput withRemainingCredit(Double remainingCredit) {
        this.remainingCredit = remainingCredit;
        return this;
    }
    
    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    public String rowVersion;

    public CreditNoteInput withRowVersion(String rowVersion) {
        this.rowVersion = rowVersion;
        return this;
    }
    
    /**
     * Status of credit notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public CreditNoteCreditNoteStatusEnum status;

    public CreditNoteInput withStatus(CreditNoteCreditNoteStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    public Double subTotal;

    public CreditNoteInput withSubTotal(Double subTotal) {
        this.subTotal = subTotal;
        return this;
    }
    
    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    public String taxCode;

    public CreditNoteInput withTaxCode(String taxCode) {
        this.taxCode = taxCode;
        return this;
    }
    
    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    public Boolean taxInclusive;

    public CreditNoteInput withTaxInclusive(Boolean taxInclusive) {
        this.taxInclusive = taxInclusive;
        return this;
    }
    
    /**
     * Optional terms to be associated with the credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    public String terms;

    public CreditNoteInput withTerms(String terms) {
        this.terms = terms;
        return this;
    }
    
    /**
     * Amount of transaction
     */
    @JsonProperty("total_amount")
    public Double totalAmount;

    public CreditNoteInput withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    public Double totalTax;

    public CreditNoteInput withTotalTax(Double totalTax) {
        this.totalTax = totalTax;
        return this;
    }
    
    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CreditNoteCreditNoteTypeEnum type;

    public CreditNoteInput withType(CreditNoteCreditNoteTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public CreditNoteInput(@JsonProperty("total_amount") Double totalAmount) {
        this.totalAmount = totalAmount;
  }
}
