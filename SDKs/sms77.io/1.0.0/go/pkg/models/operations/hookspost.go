// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// HooksPOSTActionEnum - Determines the action to execute.
type HooksPOSTActionEnum string

const (
	HooksPOSTActionEnumSubscribe   HooksPOSTActionEnum = "subscribe"
	HooksPOSTActionEnumUnsubscribe HooksPOSTActionEnum = "unsubscribe"
)

func (e *HooksPOSTActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "subscribe":
		fallthrough
	case "unsubscribe":
		*e = HooksPOSTActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HooksPOSTActionEnum: %s", s)
	}
}

// HooksPOSTEventTypeEnum - Type of event for which you would like to receive a webhook.
type HooksPOSTEventTypeEnum string

const (
	HooksPOSTEventTypeEnumAll         HooksPOSTEventTypeEnum = "all"
	HooksPOSTEventTypeEnumSmsMo       HooksPOSTEventTypeEnum = "sms_mo"
	HooksPOSTEventTypeEnumDlr         HooksPOSTEventTypeEnum = "dlr"
	HooksPOSTEventTypeEnumVoiceStatus HooksPOSTEventTypeEnum = "voice_status"
)

func (e *HooksPOSTEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "sms_mo":
		fallthrough
	case "dlr":
		fallthrough
	case "voice_status":
		*e = HooksPOSTEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HooksPOSTEventTypeEnum: %s", s)
	}
}

// HooksPOSTRequestMethodEnum - Request method in which you want to receive the webhook.
type HooksPOSTRequestMethodEnum string

const (
	HooksPOSTRequestMethodEnumPost HooksPOSTRequestMethodEnum = "POST"
	HooksPOSTRequestMethodEnumJSON HooksPOSTRequestMethodEnum = "JSON"
	HooksPOSTRequestMethodEnumGet  HooksPOSTRequestMethodEnum = "GET"
)

func (e *HooksPOSTRequestMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POST":
		fallthrough
	case "JSON":
		fallthrough
	case "GET":
		*e = HooksPOSTRequestMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HooksPOSTRequestMethodEnum: %s", s)
	}
}

type HooksPOSTRequest struct {
	// Determines the action to execute.
	Action HooksPOSTActionEnum `queryParam:"style=form,explode=true,name=action"`
	// Type of event for which you would like to receive a webhook.
	EventType *HooksPOSTEventTypeEnum `queryParam:"style=form,explode=true,name=event_type"`
	// The Webhook ID you wish to unsubscribe.
	ID *int64 `queryParam:"style=form,explode=true,name=id"`
	// Request method in which you want to receive the webhook.
	RequestMethod *HooksPOSTRequestMethodEnum `queryParam:"style=form,explode=true,name=request_method"`
	// Target URL of your Webhook.
	TargetURL *string `queryParam:"style=form,explode=true,name=target_url"`
}

// HooksPOST200ApplicationJSON - Hook subscribed
type HooksPOST200ApplicationJSON struct {
	ID      *int64 `json:"id,omitempty"`
	Success *bool  `json:"success,omitempty"`
}

type HooksPOSTResponse struct {
	ContentType string
	// Hook subscribed
	HooksPOST200ApplicationJSONObject *HooksPOST200ApplicationJSON
	StatusCode                        int
	RawResponse                       *http.Response
}
