"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import asyncinferenceconfig as shared_asyncinferenceconfig
from ..shared import datacaptureconfig as shared_datacaptureconfig
from ..shared import explainerconfig as shared_explainerconfig
from ..shared import productionvariant as shared_productionvariant
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateEndpointConfigInput:
    
    endpoint_config_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointConfigName') }})  
    production_variants: list[shared_productionvariant.ProductionVariant] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductionVariants') }})  
    async_inference_config: Optional[shared_asyncinferenceconfig.AsyncInferenceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AsyncInferenceConfig'), 'exclude': lambda f: f is None }})  
    data_capture_config: Optional[shared_datacaptureconfig.DataCaptureConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCaptureConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration to control how SageMaker captures inference data."""  
    explainer_config: Optional[shared_explainerconfig.ExplainerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplainerConfig'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    shadow_production_variants: Optional[list[shared_productionvariant.ProductionVariant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShadowProductionVariants'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    