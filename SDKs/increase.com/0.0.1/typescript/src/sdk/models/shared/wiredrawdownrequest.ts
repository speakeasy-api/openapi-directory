/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The lifecycle status of the drawdown request.
 */
export enum WireDrawdownRequestStatusEnum {
  PendingSubmission = "pending_submission",
  PendingResponse = "pending_response",
  Fulfilled = "fulfilled",
  Refused = "refused",
}

/**
 * After the drawdown request is submitted to Fedwire, this will contain supplemental details.
 */
export class WireDrawdownRequestWireDrawdownRequestSubmission extends SpeakeasyBase {
  /**
   * The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_message_accountability_data" })
  inputMessageAccountabilityData: string;
}

/**
 * A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.
 */
export enum WireDrawdownRequestTypeEnum {
  WireDrawdownRequest = "wire_drawdown_request",
}

/**
 * Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.
 */
export class WireDrawdownRequest extends SpeakeasyBase {
  /**
   * The Account Number to which the recipient of this request is being requested to send funds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_number_id" })
  accountNumberId: string;

  /**
   * The amount being requested in cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fulfillment_transaction_id" })
  fulfillmentTransactionId: string;

  /**
   * The Wire drawdown request identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The message the recipient will see as part of the drawdown request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_to_recipient" })
  messageToRecipient: string;

  /**
   * The drawdown request's recipient's account number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_account_number" })
  recipientAccountNumber: string;

  /**
   * Line 1 of the drawdown request's recipient's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_address_line1" })
  recipientAddressLine1: string;

  /**
   * Line 2 of the drawdown request's recipient's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_address_line2" })
  recipientAddressLine2: string;

  /**
   * Line 3 of the drawdown request's recipient's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_address_line3" })
  recipientAddressLine3: string;

  /**
   * The drawdown request's recipient's name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_name" })
  recipientName: string;

  /**
   * The drawdown request's recipient's routing number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_routing_number" })
  recipientRoutingNumber: string;

  /**
   * The lifecycle status of the drawdown request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: WireDrawdownRequestStatusEnum;

  /**
   * After the drawdown request is submitted to Fedwire, this will contain supplemental details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submission" })
  @Type(() => WireDrawdownRequestWireDrawdownRequestSubmission)
  submission: WireDrawdownRequestWireDrawdownRequestSubmission;

  /**
   * A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: WireDrawdownRequestTypeEnum;
}
