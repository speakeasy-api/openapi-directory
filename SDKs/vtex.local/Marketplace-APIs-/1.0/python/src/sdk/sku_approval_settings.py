"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class SKUApprovalSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def getaccountconfig(self, request: operations.GetaccountconfigRequest) -> operations.GetaccountconfigResponse:
        r"""Get Account's Approval Settings
        This endpoint retrieves the current approval settings of a marketplace's Received SKUs module. Its response includes: 
        
        - `Score`: Matcher scores for approving and rejecting SKUs received from sellers. 
        
        - `Matchers`: All Matchers configured on the marketplace, and their respective details. 
        
        - `SpecificationsMapping`: Mapping of product and SKU specifications, per seller. 
        
        - `MatchFlux`: This field determines the type of approval configuration applied to SKUs received from a seller. 
        
        The possible values include: 
        
        -`default`, where the Matcher reviews the SKU, and approves it based on its score. 
        
        -`manual`, for manual approvals through the Received SKU UI, or Match API. 
        
        -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suggestions/configuration'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetaccountconfigRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetaccountconfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getaccountconfig200ApplicationJSON])
                res.getaccountconfig_200_application_json_object = out

        return res

    def getauto_approvevaluefromconfig(self, request: operations.GetautoApprovevaluefromconfigRequest) -> operations.GetautoApprovevaluefromconfigResponse:
        r"""Get autoApprove Status in Account Settings
        This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller. 
        
        If the response is `true`, the autoapprove setting is active. If the response is `false`, it is inactive.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suggestions/configuration/autoapproval/toggle'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetautoApprovevaluefromconfigRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetautoApprovevaluefromconfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetautoApprovevaluefromconfig200ApplicationJSON])
                res.getauto_approvevaluefromconfig_200_application_json_object = out

        return res

    def getselleraccountconfig(self, request: operations.GetselleraccountconfigRequest) -> operations.GetselleraccountconfigResponse:
        r"""Get Seller's Approval Settings
        This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes: 
        
        - `sellerId`: A string that identifies the seller in the marketplace. 
        
        - `accountId`: Marketplace’s account ID. 
        
        - `accountName`: Marketplace’s account name. 
        
        - `mapping`: Mapping of SKU and product Specifications. 
        
        - `matchFlux`: This field determines the type of approval configuration applied to SKUs received  from a seller. 
        
        The possible values include:  
        
        -`default`, where the Matcher reviews the SKU, and approves it based on its score. 
        
        -`manual`, for manual approvals through the Received SKU UI and Match API. 
        
        -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetselleraccountconfigRequest, base_url, '/suggestions/configuration/seller/{sellerId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetselleraccountconfigRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetselleraccountconfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def putselleraccountconfig(self, request: operations.PutselleraccountconfigRequest) -> operations.PutselleraccountconfigResponse:
        r"""Save Seller's Approval Settings
        Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module. 
        
        The request includes all the details necessary to implement the chosen approval settings.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutselleraccountconfigRequest, base_url, '/suggestions/configuration/seller/{sellerId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "putselleraccountconfig_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutselleraccountconfigRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutselleraccountconfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def saveaccountconfig(self, request: operations.SaveaccountconfigRequest) -> operations.SaveaccountconfigResponse:
        r"""Save Account's Approval Settings
        Marketplaces use this endpoint to create or update approval settings on their Received SKUs module. 
        
        The request includes all the details necessary to implement the chosen approval settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suggestions/configuration'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "saveaccountconfig_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SaveaccountconfigRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveaccountconfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Saveaccountconfig200ApplicationJSON])
                res.saveaccountconfig_200_application_json_object = out

        return res

    def saveautoapproveforaccount(self, request: operations.SaveautoapproveforaccountRequest) -> operations.SaveautoapproveforaccountResponse:
        r"""Activate autoApprove in Marketplace's Account
        This endpoint enables the autoapprove rule to a marketplace's whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller. 
        
         For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field `Score` in [Save Account's Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suggestions/configuration/autoapproval/toggle'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "saveautoapproveforaccount_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SaveautoapproveforaccountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveautoapproveforaccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Saveautoapproveforaccount200ApplicationJSON])
                res.saveautoapproveforaccount_200_application_json_object = out

        return res

    def saveautoapproveforaccountseller(self, request: operations.SaveautoapproveforaccountsellerRequest) -> operations.SaveautoapproveforaccountsellerResponse:
        r"""Activate autoApprove Setting for a Seller
        This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SaveautoapproveforaccountsellerRequest, base_url, '/suggestions/configuration/autoapproval/toggle/seller/{sellerId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "saveautoapproveforaccountseller_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SaveautoapproveforaccountsellerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveautoapproveforaccountsellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    