/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChannelCatalogCategoryMappingSettings } from "./channelcatalogcategorymappingsettings";
import { ChannelCatalogColumnMappingWithName } from "./channelcatalogcolumnmappingwithname";
import { ChannelCatalogLinks } from "./channelcataloglinks";
import { ChannelCatalogState } from "./channelcatalogstate";
import { ChannelCategorySettings } from "./channelcategorysettings";
import { ChannelCostSettings } from "./channelcostsettings";
import { CostSettings } from "./costsettings";
import { ExclusionFilter } from "./exclusionfilter";
import { GeneralSettings } from "./generalsettings";
import { Expose, Type } from "class-transformer";

/**
 * The channel catalog
 */
export class ChannelCatalog extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "categoryMappingSettings" })
  @Type(() => ChannelCatalogCategoryMappingSettings)
  categoryMappingSettings?: ChannelCatalogCategoryMappingSettings;

  /**
   * The channel catalog identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCatalogId" })
  channelCatalogId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "channelCategorySettings" })
  @Type(() => ChannelCategorySettings)
  channelCategorySettings: ChannelCategorySettings;

  /**
   * Indicate the default configuration of the cost on this channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCostSettings" })
  @Type(() => ChannelCostSettings)
  channelCostSettings: ChannelCostSettings;

  /**
   * The channel identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelId" })
  channelId: string;

  /**
   * The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelImageUrl" })
  channelImageUrl: string;

  /**
   * The channel name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelName" })
  channelName: string;

  /**
   * The column mapping list between a channel and a catalog
   */
  @SpeakeasyMetadata({ elemType: ChannelCatalogColumnMappingWithName })
  @Expose({ name: "columnMappings" })
  @Type(() => ChannelCatalogColumnMappingWithName)
  columnMappings?: ChannelCatalogColumnMappingWithName[];

  /**
   * If this property is not indicated please force the user to configure the cost settings.
   *
   * @remarks
   * Defines the cost type you have on this channel with the cost value.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "costSettings" })
  @Type(() => CostSettings)
  costSettings?: CostSettings;

  /**
   * Indicates if the channel catalog is enable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * The exclusion filter list
   */
  @SpeakeasyMetadata({ elemType: ExclusionFilter })
  @Expose({ name: "exclusionFilters" })
  @Type(() => ExclusionFilter)
  exclusionFilters?: ExclusionFilter[];

  /**
   * The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exportUrl" })
  exportUrl?: string;

  /**
   * Represents the general settings of your channel catalog
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generalSettings" })
  @Type(() => GeneralSettings)
  generalSettings: GeneralSettings;

  /**
   * Indicates if this channel catalog is related to a marketplace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isMarketplace" })
  isMarketplace: boolean;

  /**
   * Indicates the actions you can do on a channel catalog
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => ChannelCatalogLinks)
  links: ChannelCatalogLinks;

  /**
   * Channel Catalog State
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => ChannelCatalogState)
  state: ChannelCatalogState;

  /**
   * The store identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storeId" })
  storeId: string;

  /**
   * The channel type list related to the channel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "types" })
  types: string[];
}
