/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChangesAttachment } from "./changesattachment";
import { ClientProfileData } from "./clientprofiledata";
import { Item } from "./item";
import { Marketplace } from "./marketplace";
import { PackageAttachment } from "./packageattachment";
import { PaymentData } from "./paymentdata";
import { RatesAndBenefitsData } from "./ratesandbenefitsdata";
import { Seller } from "./seller";
import { ShippingData } from "./shippingdata";
import { StorePreferencesData } from "./storepreferencesdata";
import { Total } from "./total";
import { Expose, Type } from "class-transformer";

/**
 * Information about order cancellation, when it applies.
 */
export class UserorderdetailsCancellationData extends SpeakeasyBase {
  /**
   * The date when the order was cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CancellationDate" })
  cancellationDate: string;

  /**
   * The reason why the order was cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reason" })
  reason: string;

  /**
   * If the order cancellation was requested by the payment gateway (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedByPaymentNotification" })
  requestedByPaymentNotification: boolean;

  /**
   * If the order cancellation was requested by the seller (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedBySellerNotification" })
  requestedBySellerNotification: boolean;

  /**
   * If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedBySystem" })
  requestedBySystem: boolean;

  /**
   * If the order cancellation was requested by the costumer (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedByUser" })
  requestedByUser: boolean;
}

/**
 * Information about customer's preferences.
 */
export class UserorderdetailsClientPreferencesData extends SpeakeasyBase {
  /**
   * Customer's prefered language while accessing the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale: string;

  /**
   * When set as `true`, this field indicates customers opted to receive the newsletters, and when set as `false`, it means they did not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "optinNewsLetter" })
  optinNewsLetter: boolean;
}

export class UserorderdetailsItemMetadataItemsAssemblyOptions extends SpeakeasyBase {
  /**
   * Displays the attachment's composition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Composition" })
  composition: Record<string, any>;

  /**
   * ID of the attachment related to the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id: string;

  /**
   * Displays the attachment's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InputValues" })
  inputValues: Record<string, any>;

  /**
   * Name of the attachment related to the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Required" })
  required: boolean;
}

export class UserorderdetailsItemMetadataItems extends SpeakeasyBase {
  /**
   * Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
   */
  @SpeakeasyMetadata({
    elemType: UserorderdetailsItemMetadataItemsAssemblyOptions,
  })
  @Expose({ name: "AssemblyOptions" })
  @Type(() => UserorderdetailsItemMetadataItemsAssemblyOptions)
  assemblyOptions: UserorderdetailsItemMetadataItemsAssemblyOptions[];

  /**
   * URL slug of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DetailUrl" })
  detailUrl: string;

  /**
   * EAN of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Ean" })
  ean: string;

  /**
   * Item's SKU ID, which is a unique numerical identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id: string;

  /**
   * Item's SKU image URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImageUrl" })
  imageUrl: string;

  /**
   * Name of the item as displayed to customers in the storefront.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * ID of the Product associated with the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductId" })
  productId: string;

  /**
   * Item's reference ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RefId" })
  refId: string;

  /**
   * Seller ID that identifies the seller the item belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Seller" })
  seller: string;

  /**
   * Name of the SKU corresponding to the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SkuName" })
  skuName: string;
}

/**
 * Metadata information about the order's items.
 */
export class UserorderdetailsItemMetadata extends SpeakeasyBase {
  /**
   * Metadata items.
   */
  @SpeakeasyMetadata({ elemType: UserorderdetailsItemMetadataItems })
  @Expose({ name: "Items" })
  @Type(() => UserorderdetailsItemMetadataItems)
  items: UserorderdetailsItemMetadataItems[];
}

/**
 * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
 */
export class UserorderdetailsMarketingData extends SpeakeasyBase {
  /**
   * Coupon's code information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "coupon" })
  coupon: string;

  /**
   * Object ID which expected value is `marketingData`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingTags" })
  marketingTags: string[];

  /**
   * Value of the `utm_campaign` parameter of the URL that led to the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmCampaign" })
  utmCampaign: string;

  /**
   * Value of the `utm_medium` parameter of the URL that led to the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmMedium" })
  utmMedium: string;

  /**
   * UTM Source Parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmPartner" })
  utmPartner: string;

  /**
   * Value of the `utm_source` parameter of the URL that led to the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmSource" })
  utmSource: string;

  /**
   * Internal UTM value `utmi_cp`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmiCampaign" })
  utmiCampaign: string;

  /**
   * Internal UTM value `utmi_pc`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmiPart" })
  utmiPart: string;

  /**
   * Internal UTM value `utmi_p`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmipage" })
  utmipage: string;
}

/**
 * Information about subscriptions' recurrence.
 */
export class UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency extends SpeakeasyBase {
  /**
   * Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval: number;

  /**
   * Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodicity" })
  periodicity: string;
}

/**
 * Information about the period during which the subscription will be valid.
 */
export class UserorderdetailsSubscriptionDataSubscriptionsPlanValidity extends SpeakeasyBase {
  /**
   * Subscriptions' beginning date with the format `yyyy-mm-ddThh:mm:ss`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "begin" })
  begin: string;

  /**
   * Subscriptions' ending date with the format `yyyy-mm-ddThh:mm:ss`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  end: string;
}

/**
 * Information about the subscription's validility and frequency.
 */
export class UserorderdetailsSubscriptionDataSubscriptionsPlan extends SpeakeasyBase {
  /**
   * Information about subscriptions' recurrence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  @Type(() => UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency)
  frequency: UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency;

  /**
   * Type of plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  /**
   * Information about the period during which the subscription will be valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validity" })
  @Type(() => UserorderdetailsSubscriptionDataSubscriptionsPlanValidity)
  validity: UserorderdetailsSubscriptionDataSubscriptionsPlanValidity;
}

export class UserorderdetailsSubscriptionDataSubscriptions extends SpeakeasyBase {
  /**
   * Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionCount" })
  executionCount: number;

  /**
   * Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ItemIndex" })
  itemIndex: number;

  /**
   * Information about the subscription's validility and frequency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Plan" })
  @Type(() => UserorderdetailsSubscriptionDataSubscriptionsPlan)
  plan: UserorderdetailsSubscriptionDataSubscriptionsPlan;

  /**
   * Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PriceAtSubscriptionDate" })
  priceAtSubscriptionDate: number;
}

/**
 * Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 */
export class UserorderdetailsSubscriptionData extends SpeakeasyBase {
  /**
   * ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SubscriptionGroupId" })
  subscriptionGroupId: string;

  /**
   * List with subscriptions and their details.
   */
  @SpeakeasyMetadata({
    elemType: UserorderdetailsSubscriptionDataSubscriptions,
  })
  @Expose({ name: "Subscriptions" })
  @Type(() => UserorderdetailsSubscriptionDataSubscriptions)
  subscriptions: UserorderdetailsSubscriptionDataSubscriptions[];
}

export class UserorderdetailsTaxDataTaxInfoCollectionPriceTags extends SpeakeasyBase {
  /**
   * If the tax is a percentage (`true`) or note (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isPercentual" })
  isPercentual: boolean;

  /**
   * Name that identifies the tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The amount that corresponds to the tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rawValue" })
  rawValue: string;
}

export class UserorderdetailsTaxDataTaxInfoCollection extends SpeakeasyBase {
  /**
   * Item's indexing number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemIndex" })
  itemIndex: number;

  /**
   * Price tag information.
   */
  @SpeakeasyMetadata({
    elemType: UserorderdetailsTaxDataTaxInfoCollectionPriceTags,
  })
  @Expose({ name: "priceTags" })
  @Type(() => UserorderdetailsTaxDataTaxInfoCollectionPriceTags)
  priceTags: UserorderdetailsTaxDataTaxInfoCollectionPriceTags[];

  /**
   * Alphanumeric sequence that identifies an SKU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku: string;
}

/**
 * Order's tax information.
 */
export class UserorderdetailsTaxData extends SpeakeasyBase {
  /**
   * If the taxes were designated by the marketplace (`true`), or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "areTaxesDesignatedByMarketplace" })
  areTaxesDesignatedByMarketplace: boolean;

  /**
   * Array with taxes' details.
   */
  @SpeakeasyMetadata({ elemType: UserorderdetailsTaxDataTaxInfoCollection })
  @Expose({ name: "taxInfoCollection" })
  @Type(() => UserorderdetailsTaxDataTaxInfoCollection)
  taxInfoCollection: UserorderdetailsTaxDataTaxInfoCollection[];
}

/**
 * OK
 */
export class Userorderdetails extends SpeakeasyBase {
  /**
   * Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "affiliateId" })
  affiliateId: string;

  /**
   * When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowCancellation" })
  allowCancellation: boolean;

  /**
   * When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowEdition" })
  allowEdition: boolean;

  /**
   * Authorized order date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedDate" })
  authorizedDate: string;

  /**
   * Call center operator responsible for the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callCenterOperatorData" })
  callCenterOperatorData: string;

  /**
   * Reason for order cancellation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelReason" })
  cancelReason: string;

  /**
   * Information about order cancellation, when it applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancellationData" })
  @Type(() => UserorderdetailsCancellationData)
  cancellationData: UserorderdetailsCancellationData;

  /**
   * Information about changes in the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changesAttachment" })
  @Type(() => ChangesAttachment)
  changesAttachment: ChangesAttachment;

  /**
   * If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkedInPickupPointId" })
  checkedInPickupPointId: string;

  /**
   * Information about customer's preferences.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientPreferencesData" })
  @Type(() => UserorderdetailsClientPreferencesData)
  clientPreferencesData: UserorderdetailsClientPreferencesData;

  /**
   * Object with information on the client's profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientProfileData" })
  @Type(() => ClientProfileData)
  clientProfileData: ClientProfileData;

  /**
   * Information about commercial conditions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commercialConditionData" })
  commercialConditionData: string;

  /**
   * Order's creation date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  creationDate: string;

  /**
   * Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customData" })
  customData: string;

  /**
   * Email of the store's employee responsible for managing the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followUpEmail" })
  followUpEmail: string;

  /**
   * Information about gift list, when it applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "giftRegistryData" })
  giftRegistryData: string;

  /**
   * Account Hostname registered in License Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname: string;

  /**
   * Information pertinent to the order's invoice.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceData" })
  invoiceData: Record<string, any>;

  /**
   * Order's invoice date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoicedDate" })
  invoicedDate: string;

  /**
   * This field is set `true` when the order was made via inStore and `false` when it was not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isCheckedIn" })
  isCheckedIn: boolean;

  /**
   * When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isCompleted" })
  isCompleted: boolean;

  /**
   * Metadata information about the order's items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemMetadata" })
  @Type(() => UserorderdetailsItemMetadata)
  itemMetadata: UserorderdetailsItemMetadata;

  /**
   * Information about order's items.
   */
  @SpeakeasyMetadata({ elemType: Item })
  @Expose({ name: "items" })
  @Type(() => Item)
  items: Item[];

  /**
   * Order's last change date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastChange" })
  lastChange: string;

  /**
   * Last sent transactional message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastMessage" })
  lastMessage: string;

  /**
   * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingData" })
  @Type(() => UserorderdetailsMarketingData)
  marketingData: UserorderdetailsMarketingData;

  /**
   * Details about the marketplace related to the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketplace" })
  @Type(() => Marketplace)
  marketplace: Marketplace;

  /**
   * Marketplace details object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketplaceItems" })
  marketplaceItems: string[];

  /**
   * Marketplace order ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketplaceOrderId" })
  marketplaceOrderId: string;

  /**
   * Marketplace services endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketplaceServicesEndpoint" })
  marketplaceServicesEndpoint: string;

  /**
   * Name of the merchant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantName" })
  merchantName: string;

  /**
   * Optional field with order's additional information. This field must be filled in using the following format: 
   * 
   * @remarks
   * 
```
   * 
{
   *     "fieldExample": "ValueExample"
   *   }
   * 
```
   * 
   */
  @SpeakeasyMetadata()
  @Expose({ name: "openTextField" })
  openTextField: string;

  /**
   * [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderFormId" })
  orderFormId: string;

  /**
   * Order's group ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderGroup" })
  orderGroup: string;

  /**
   * Order ID is a unique code that identifies an order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderId" })
  orderId: string;

  /**
   * Order Origin, if `Marketplace` or `Fulfillment`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin: string;

  /**
   * Package object populated after order invoiced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageAttachment" })
  @Type(() => PackageAttachment)
  packageAttachment: PackageAttachment;

  /**
   * Object with information about the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentData" })
  @Type(() => PaymentData)
  paymentData: PaymentData;

  /**
   * Information on promotions and taxes that apply to the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ratesAndBenefitsData" })
  @Type(() => RatesAndBenefitsData)
  ratesAndBenefitsData: RatesAndBenefitsData;

  /**
   * Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roundingError" })
  roundingError: number;

  /**
   * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "salesChannel" })
  salesChannel: string;

  /**
   * ID of the seller related to the order. It can be a VTEX seller or an external seller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellerOrderId" })
  sellerOrderId: string;

  /**
   * List of all sellers associated with the order.
   */
  @SpeakeasyMetadata({ elemType: Seller })
  @Expose({ name: "sellers" })
  @Type(() => Seller)
  sellers: Seller[];

  /**
   * Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sequence" })
  sequence: string;

  /**
   * Object containing shipping data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shippingData" })
  @Type(() => ShippingData)
  shippingData: ShippingData;

  /**
   * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusDescription" })
  statusDescription: string;

  /**
   * Object with data from the store's configuration - stored in VTEX's License Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storePreferencesData" })
  @Type(() => StorePreferencesData)
  storePreferencesData: StorePreferencesData;

  /**
   * Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionData" })
  @Type(() => UserorderdetailsSubscriptionData)
  subscriptionData: UserorderdetailsSubscriptionData;

  /**
   * Order's tax information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxData" })
  @Type(() => UserorderdetailsTaxData)
  taxData: UserorderdetailsTaxData;

  /**
   * List with details about orders' totals.
   */
  @SpeakeasyMetadata({ elemType: Total })
  @Expose({ name: "totals" })
  @Type(() => Total)
  totals: Total[];

  /**
   * Order's total amount.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: number;
}
