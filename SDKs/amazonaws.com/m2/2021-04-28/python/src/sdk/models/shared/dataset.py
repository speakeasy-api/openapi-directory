"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasetorgattributes as shared_datasetorgattributes
from ..shared import recordlength as shared_recordlength
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSet:
    r"""Defines a data set."""
    
    dataset_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasetName') }})  
    dataset_org: shared_datasetorgattributes.DatasetOrgAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasetOrg') }})  
    record_length: shared_recordlength.RecordLength = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordLength') }})  
    relative_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePath'), 'exclude': lambda f: f is None }})  
    storage_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageType'), 'exclude': lambda f: f is None }})  
    