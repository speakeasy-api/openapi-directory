// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type WebinarRegistrantStatusSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// WebinarRegistrantStatusApplicationJSONActionEnum - Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.
type WebinarRegistrantStatusApplicationJSONActionEnum string

const (
	WebinarRegistrantStatusApplicationJSONActionEnumApprove WebinarRegistrantStatusApplicationJSONActionEnum = "approve"
	WebinarRegistrantStatusApplicationJSONActionEnumCancel  WebinarRegistrantStatusApplicationJSONActionEnum = "cancel"
	WebinarRegistrantStatusApplicationJSONActionEnumDeny    WebinarRegistrantStatusApplicationJSONActionEnum = "deny"
)

func (e *WebinarRegistrantStatusApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "cancel":
		fallthrough
	case "deny":
		*e = WebinarRegistrantStatusApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarRegistrantStatusApplicationJSONActionEnum: %s", s)
	}
}

type WebinarRegistrantStatusApplicationJSONRegistrants struct {
	// Registrant's email address.
	Email *string `json:"email,omitempty"`
	// Registrant ID
	ID *string `json:"id,omitempty"`
}

type WebinarRegistrantStatusApplicationJSON struct {
	// Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.
	Action WebinarRegistrantStatusApplicationJSONActionEnum `json:"action"`
	// List of registrants.
	Registrants []WebinarRegistrantStatusApplicationJSONRegistrants `json:"registrants,omitempty"`
}

type WebinarRegistrantStatusRequest struct {
	RequestBody WebinarRegistrantStatusApplicationJSON `request:"mediaType=application/json"`
	// The meeting occurrence ID.
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

type WebinarRegistrantStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
