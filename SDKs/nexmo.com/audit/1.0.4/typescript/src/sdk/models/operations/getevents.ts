/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetEventsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class GetEventsRequest extends SpeakeasyBase {
  /**
   * Start of time range for audit events. DateTime in ISO-8601 format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_from",
  })
  dateFrom?: string;

  /**
   * End of time range for audit events. DateTime in ISO-8601 format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_to",
  })
  dateTo?: string;

  /**
   * Filter results by this event type.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=event_type",
  })
  eventType?: shared.EventTypesEnum;

  /**
   * Page number starting with page 1.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: string;

  /**
   * Return only audit events where the JSON object contains this search text. Must be legal text for a JSON attribute value, that is quotes and braces must be escaped.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_text",
  })
  searchText?: string;

  /**
   * Number of elements per page.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;
}

export class GetEventsResponse extends SpeakeasyBase {
  /**
   * OK
   */
  @SpeakeasyMetadata()
  auditResp?: shared.AuditResp;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  errorForbidden?: shared.ErrorForbidden;

  /**
   * Not Found
   */
  @SpeakeasyMetadata()
  errorNotFound?: shared.ErrorNotFound;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  errorUnauthorized?: shared.ErrorUnauthorized;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
