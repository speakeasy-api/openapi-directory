"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class IPAddresses:
    r"""Operations about ip_addresses"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_ip_addresses(self, request: operations.GetIPAddressesRequest) -> operations.GetIPAddressesResponse:
        r"""List IP Addresses associated with the current site
        List IP Addresses associated with the current site
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip_addresses'
        
        query_params = utils.get_query_params(operations.GetIPAddressesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.IPAddressEntity]])
                res.ip_address_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_ip_addresses_exavault_reserved(self, request: operations.GetIPAddressesExavaultReservedRequest) -> operations.GetIPAddressesExavaultReservedResponse:
        r"""List all possible public ExaVault IP addresses
        List all possible public ExaVault IP addresses
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip_addresses/exavault-reserved'
        
        query_params = utils.get_query_params(operations.GetIPAddressesExavaultReservedRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPAddressesExavaultReservedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PublicIPAddressEntity]])
                res.public_ip_address_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_ip_addresses_reserved(self, request: operations.GetIPAddressesReservedRequest) -> operations.GetIPAddressesReservedResponse:
        r"""List all possible public IP addresses
        List all possible public IP addresses
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip_addresses/reserved'
        
        query_params = utils.get_query_params(operations.GetIPAddressesReservedRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPAddressesReservedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PublicIPAddressEntity]])
                res.public_ip_address_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    