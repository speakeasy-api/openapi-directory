"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Comments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def blogger_comments_approve(self, request: operations.BloggerCommentsApproveRequest, security: operations.BloggerCommentsApproveSecurity) -> operations.BloggerCommentsApproveResponse:
        r"""Marks a comment as not spam by blog id, post id and comment id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsApproveRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsApproveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def blogger_comments_delete(self, request: operations.BloggerCommentsDeleteRequest, security: operations.BloggerCommentsDeleteSecurity) -> operations.BloggerCommentsDeleteResponse:
        r"""Deletes a comment by blog id, post id and comment id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsDeleteRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def blogger_comments_get(self, request: operations.BloggerCommentsGetRequest, security: operations.BloggerCommentsGetSecurity) -> operations.BloggerCommentsGetResponse:
        r"""Gets a comment by id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsGetRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def blogger_comments_list(self, request: operations.BloggerCommentsListRequest, security: operations.BloggerCommentsListSecurity) -> operations.BloggerCommentsListResponse:
        r"""Lists comments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsListRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentList])
                res.comment_list = out

        return res

    def blogger_comments_list_by_blog(self, request: operations.BloggerCommentsListByBlogRequest, security: operations.BloggerCommentsListByBlogSecurity) -> operations.BloggerCommentsListByBlogResponse:
        r"""Lists comments by blog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsListByBlogRequest, base_url, '/v3/blogs/{blogId}/comments', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsListByBlogRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsListByBlogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentList])
                res.comment_list = out

        return res

    def blogger_comments_mark_as_spam(self, request: operations.BloggerCommentsMarkAsSpamRequest, security: operations.BloggerCommentsMarkAsSpamSecurity) -> operations.BloggerCommentsMarkAsSpamResponse:
        r"""Marks a comment as spam by blog id, post id and comment id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsMarkAsSpamRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsMarkAsSpamRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsMarkAsSpamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def blogger_comments_remove_content(self, request: operations.BloggerCommentsRemoveContentRequest, security: operations.BloggerCommentsRemoveContentSecurity) -> operations.BloggerCommentsRemoveContentResponse:
        r"""Removes the content of a comment by blog id, post id and comment id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerCommentsRemoveContentRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent', request)
        
        query_params = utils.get_query_params(operations.BloggerCommentsRemoveContentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerCommentsRemoveContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    