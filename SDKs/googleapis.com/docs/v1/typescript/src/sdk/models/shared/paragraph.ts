/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Bullet } from "./bullet";
import { ObjectReferences } from "./objectreferences";
import { ParagraphElement, ParagraphElementInput } from "./paragraphelement";
import { ParagraphStyle } from "./paragraphstyle";
import { SuggestedBullet } from "./suggestedbullet";
import { SuggestedParagraphStyle } from "./suggestedparagraphstyle";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
 */
export class Paragraph extends SpeakeasyBase {
  /**
   * Describes the bullet of a paragraph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bullet" })
  @Type(() => Bullet)
  bullet?: Bullet;

  /**
   * The content of the paragraph, broken down into its component parts.
   */
  @SpeakeasyMetadata({ elemType: ParagraphElement })
  @Expose({ name: "elements" })
  @Type(() => ParagraphElement)
  elements?: ParagraphElement[];

  /**
   * Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paragraphStyle" })
  @Type(() => ParagraphStyle)
  paragraphStyle?: ParagraphStyle;

  /**
   * The IDs of the positioned objects tethered to this paragraph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "positionedObjectIds" })
  positionedObjectIds?: string[];

  /**
   * The suggested changes to this paragraph's bullet.
   */
  @SpeakeasyMetadata({ elemType: SuggestedBullet })
  @Expose({ name: "suggestedBulletChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedBullet> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedBullet);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedBulletChanges?: Record<string, SuggestedBullet>;

  /**
   * The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedParagraphStyle })
  @Expose({ name: "suggestedParagraphStyleChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedParagraphStyle> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedParagraphStyle);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedParagraphStyleChanges?: Record<string, SuggestedParagraphStyle>;

  /**
   * The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: ObjectReferences })
  @Expose({ name: "suggestedPositionedObjectIds" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ObjectReferences> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ObjectReferences);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedPositionedObjectIds?: Record<string, ObjectReferences>;
}

/**
 * A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
 */
export class ParagraphInput extends SpeakeasyBase {
  /**
   * Describes the bullet of a paragraph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bullet" })
  @Type(() => Bullet)
  bullet?: Bullet;

  /**
   * The content of the paragraph, broken down into its component parts.
   */
  @SpeakeasyMetadata({ elemType: ParagraphElementInput })
  @Expose({ name: "elements" })
  @Type(() => ParagraphElementInput)
  elements?: ParagraphElementInput[];

  /**
   * Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paragraphStyle" })
  @Type(() => ParagraphStyle)
  paragraphStyle?: ParagraphStyle;

  /**
   * The IDs of the positioned objects tethered to this paragraph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "positionedObjectIds" })
  positionedObjectIds?: string[];

  /**
   * The suggested changes to this paragraph's bullet.
   */
  @SpeakeasyMetadata({ elemType: SuggestedBullet })
  @Expose({ name: "suggestedBulletChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedBullet> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedBullet);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedBulletChanges?: Record<string, SuggestedBullet>;

  /**
   * The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedParagraphStyle })
  @Expose({ name: "suggestedParagraphStyleChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedParagraphStyle> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedParagraphStyle);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedParagraphStyleChanges?: Record<string, SuggestedParagraphStyle>;

  /**
   * The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: ObjectReferences })
  @Expose({ name: "suggestedPositionedObjectIds" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ObjectReferences> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ObjectReferences);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedPositionedObjectIds?: Record<string, ObjectReferences>;
}
