// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// GroupCoverageCreateRequestLineOfCoverageEnum - The line of coverage requested with the carrier application
type GroupCoverageCreateRequestLineOfCoverageEnum string

const (
	GroupCoverageCreateRequestLineOfCoverageEnumAccident          GroupCoverageCreateRequestLineOfCoverageEnum = "accident"
	GroupCoverageCreateRequestLineOfCoverageEnumAdd               GroupCoverageCreateRequestLineOfCoverageEnum = "add"
	GroupCoverageCreateRequestLineOfCoverageEnumCancer            GroupCoverageCreateRequestLineOfCoverageEnum = "cancer"
	GroupCoverageCreateRequestLineOfCoverageEnumCriticalIllness   GroupCoverageCreateRequestLineOfCoverageEnum = "critical_illness"
	GroupCoverageCreateRequestLineOfCoverageEnumDental            GroupCoverageCreateRequestLineOfCoverageEnum = "dental"
	GroupCoverageCreateRequestLineOfCoverageEnumHospitalIndemnity GroupCoverageCreateRequestLineOfCoverageEnum = "hospital_indemnity"
	GroupCoverageCreateRequestLineOfCoverageEnumLife              GroupCoverageCreateRequestLineOfCoverageEnum = "life"
	GroupCoverageCreateRequestLineOfCoverageEnumLtd               GroupCoverageCreateRequestLineOfCoverageEnum = "ltd"
	GroupCoverageCreateRequestLineOfCoverageEnumMedical           GroupCoverageCreateRequestLineOfCoverageEnum = "medical"
	GroupCoverageCreateRequestLineOfCoverageEnumStd               GroupCoverageCreateRequestLineOfCoverageEnum = "std"
	GroupCoverageCreateRequestLineOfCoverageEnumVision            GroupCoverageCreateRequestLineOfCoverageEnum = "vision"
)

func (e *GroupCoverageCreateRequestLineOfCoverageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accident":
		fallthrough
	case "add":
		fallthrough
	case "cancer":
		fallthrough
	case "critical_illness":
		fallthrough
	case "dental":
		fallthrough
	case "hospital_indemnity":
		fallthrough
	case "life":
		fallthrough
	case "ltd":
		fallthrough
	case "medical":
		fallthrough
	case "std":
		fallthrough
	case "vision":
		*e = GroupCoverageCreateRequestLineOfCoverageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupCoverageCreateRequestLineOfCoverageEnum: %s", s)
	}
}

type GroupCoverageCreateRequest struct {
	// True if this line of coverage is currently active with the carrier
	ExistingCoverage *bool `json:"existing_coverage,omitempty"`
	// The line of coverage requested with the carrier application
	LineOfCoverage GroupCoverageCreateRequestLineOfCoverageEnum `json:"line_of_coverage"`
	// General platform notes about the group coverage
	Notes *string `json:"notes,omitempty"`
	// Requested effective date for start of coverage
	RequestedEffectiveDate types.Date `json:"requested_effective_date"`
}
