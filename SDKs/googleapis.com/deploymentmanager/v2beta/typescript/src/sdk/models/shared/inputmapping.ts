/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The location where this mapping applies.
 */
export enum InputMappingLocationEnum {
  Unknown = "UNKNOWN",
  Path = "PATH",
  Query = "QUERY",
  Body = "BODY",
  Header = "HEADER",
}

/**
 * InputMapping creates a 'virtual' property that will be injected into the properties before sending the request to the underlying API.
 */
export class InputMapping extends SpeakeasyBase {
  /**
   * The name of the field that is going to be injected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldName" })
  fieldName?: string;

  /**
   * The location where this mapping applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: InputMappingLocationEnum;

  /**
   * Regex to evaluate on method to decide if input applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "methodMatch" })
  methodMatch?: string;

  /**
   * A jsonPath expression to select an element.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
