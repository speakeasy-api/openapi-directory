// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRoutingVersionNumberCalculateRouteLocationsContentTypePathParams struct {
	// The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
	ContentType shared.ContentTypeEnum `pathParam:"style=simple,explode=false,name=contentType"`
	// Locations through which the calculated route must pass.
	Locations string `pathParam:"style=simple,explode=false,name=locations"`
	// Service version number. The current value is 1.
	VersionNumber shared.VersionNumberEnum `pathParam:"style=simple,explode=false,name=versionNumber"`
}

type GetRoutingVersionNumberCalculateRouteLocationsContentTypeQueryParams struct {
	// Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
	AccelerationEfficiency *float32 `queryParam:"style=form,explode=true,name=accelerationEfficiency"`
	// Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
	AlternativeType *shared.AlternativeTypeEnum `queryParam:"style=form,explode=true,name=alternativeType"`
	// The date and time of arrival at the destination point. It must be specified as a dateTime.
	ArriveAt *string `queryParam:"style=form,explode=true,name=arriveAt"`
	// Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
	AuxiliaryPowerInLitersPerHour *float32 `queryParam:"style=form,explode=true,name=auxiliaryPowerInLitersPerHour"`
	// Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
	// Possible values:
	//   - tollRoads
	//   - motorways
	//   - ferries
	//   - unpavedRoads
	//   - carpools
	//   - alreadyUsedRoads
	Avoid *string `queryParam:"style=form,explode=true,name=avoid"`
	// Specifies the jsonp callback method.
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Re-order the route waypoints to reduce the route length.
	ComputeBestOrder *bool `queryParam:"style=form,explode=true,name=computeBestOrder"`
	// Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
	ComputeTravelTimeFor *shared.ComputeTravelTimeForEnum `queryParam:"style=form,explode=true,name=computeTravelTimeFor"`
	// Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
	ConstantSpeedConsumptionInLitersPerHundredkm *string `queryParam:"style=form,explode=true,name=constantSpeedConsumptionInLitersPerHundredkm"`
	// Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
	ConstantSpeedConsumptionInkWhPerHundredkm *string `queryParam:"style=form,explode=true,name=constantSpeedConsumptionInkWhPerHundredkm"`
	// Specifies the current supply of fuel in liters.
	CurrentFuelInLiters *float32 `queryParam:"style=form,explode=true,name=currentFuelInLiters"`
	// Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
	DecelerationEfficiency *float32 `queryParam:"style=form,explode=true,name=decelerationEfficiency"`
	// The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
	DepartAt *string `queryParam:"style=form,explode=true,name=departAt"`
	// Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
	DownhillEfficiency *float32 `queryParam:"style=form,explode=true,name=downhillEfficiency"`
	// Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
	FuelEnergyDensityInMJoulesPerLiter *float32 `queryParam:"style=form,explode=true,name=fuelEnergyDensityInMJoulesPerLiter"`
	// Degree of hilliness for calculating a thrilling route.
	Hilliness *shared.HillinessEnum `queryParam:"style=form,explode=true,name=hilliness"`
	// If specified, guidance instructions will be returned (if available).
	InstructionsType *shared.InstructionsTypeEnum `queryParam:"style=form,explode=true,name=instructionsType"`
	// The language parameter determines the language of the guidance messages.
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// Number of alternative routes to be calculated.
	MaxAlternatives *int64 `queryParam:"style=form,explode=true,name=maxAlternatives"`
	// All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
	MinDeviationDistance *int64 `queryParam:"style=form,explode=true,name=minDeviationDistance"`
	// All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
	MinDeviationTime *int64 `queryParam:"style=form,explode=true,name=minDeviationTime"`
	// Specifies which data should be reported for diagnosis purposes.
	Report *shared.ReportEnum `queryParam:"style=form,explode=true,name=report"`
	// Specifies the representation of the set of routes provided as a response.
	RouteRepresentation *shared.RouteRepresentationEnum `queryParam:"style=form,explode=true,name=routeRepresentation"`
	// The type of route requested.
	RouteType *shared.RouteTypeEnum `queryParam:"style=form,explode=true,name=routeType"`
	// Specifies which section types are explicitly reported in the route response. Can be specified multiple times.
	//   - carTrain, ferry, tunnel or motorway
	//   - pedestrian
	//   - tollRoad
	//   - tollVignette
	//   - country
	//   - travelMode
	//   - traffic
	SectionType *string `queryParam:"style=form,explode=true,name=sectionType"`
	// Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
	Traffic *bool `queryParam:"style=form,explode=true,name=traffic"`
	// The mode of travel for the requested route.
	TravelMode *shared.TravelModeEnum `queryParam:"style=form,explode=true,name=travelMode"`
	// Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
	UphillEfficiency *float32 `queryParam:"style=form,explode=true,name=uphillEfficiency"`
	// Weight per axle of the vehicle in kg.
	VehicleAxleWeight *int64 `queryParam:"style=form,explode=true,name=vehicleAxleWeight"`
	// Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
	VehicleCommercial *bool `queryParam:"style=form,explode=true,name=vehicleCommercial"`
	// Engine type of the vehicle.
	VehicleEngineType *shared.VehicleEngineTypeEnum `queryParam:"style=form,explode=true,name=vehicleEngineType"`
	// The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
	VehicleHeading *int64 `queryParam:"style=form,explode=true,name=vehicleHeading"`
	// Height of the vehicle in meters.
	VehicleHeight *float32 `queryParam:"style=form,explode=true,name=vehicleHeight"`
	// Length of the vehicle in meters.
	VehicleLength *float32 `queryParam:"style=form,explode=true,name=vehicleLength"`
	// Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
	// Use these for routing in the US:
	//
	//   - <i>USHazmatClass1</i> Explosives
	//   - <i>USHazmatClass2</i> Compressed gas
	//   - <i>USHazmatClass3</i> Flammable liquids
	//   - <i>USHazmatClass4</i> Flammable solids
	//   - <i>USHazmatClass5</i> Oxidizers
	//   - <i>USHazmatClass6</i> Poisons
	//   - <i>USHazmatClass7</i> Radioactive
	//   - <i>USHazmatClass8</i> Corrosives
	//   - <i>USHazmatClass9</i> Miscellaneous
	//
	// Use these for routing in all other countries:
	//
	//   - <i>otherHazmatExplosive</i> Explosives
	//   - <i>otherHazmatGeneral</i> Miscellaneous
	//   - <i>otherHazmatHarmfulToWater</i> Harmful to water
	//
	// vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
	VehicleLoadType *string `queryParam:"style=form,explode=true,name=vehicleLoadType"`
	// Maximum speed of the vehicle in km/hour.
	VehicleMaxSpeed *int64 `queryParam:"style=form,explode=true,name=vehicleMaxSpeed"`
	// Weight of the vehicle in kilograms.
	VehicleWeight *int64 `queryParam:"style=form,explode=true,name=vehicleWeight"`
	// Width of the vehicle in meters.
	VehicleWidth *float32 `queryParam:"style=form,explode=true,name=vehicleWidth"`
	// Amount that a thrilling route should wind.
	Windingness *shared.WindingnessEnum `queryParam:"style=form,explode=true,name=windingness"`
}

type GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest struct {
	PathParams  GetRoutingVersionNumberCalculateRouteLocationsContentTypePathParams
	QueryParams GetRoutingVersionNumberCalculateRouteLocationsContentTypeQueryParams
}

type GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
