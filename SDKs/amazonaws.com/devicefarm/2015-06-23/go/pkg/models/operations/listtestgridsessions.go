// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListTestGridSessionsXAmzTargetEnum
type ListTestGridSessionsXAmzTargetEnum string

const (
	ListTestGridSessionsXAmzTargetEnumDeviceFarm20150623ListTestGridSessions ListTestGridSessionsXAmzTargetEnum = "DeviceFarm_20150623.ListTestGridSessions"
)

func (e ListTestGridSessionsXAmzTargetEnum) ToPointer() *ListTestGridSessionsXAmzTargetEnum {
	return &e
}

func (e *ListTestGridSessionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.ListTestGridSessions":
		*e = ListTestGridSessionsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTestGridSessionsXAmzTargetEnum: %v", v)
	}
}

type ListTestGridSessionsRequest struct {
	ListTestGridSessionsRequest shared.ListTestGridSessionsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  ListTestGridSessionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResult *string `queryParam:"style=form,explode=true,name=maxResult"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListTestGridSessionsResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// InternalServiceException
	InternalServiceException interface{}
	// Success
	ListTestGridSessionsResult *shared.ListTestGridSessionsResult
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
