// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchProductsAsAdminXAmzTargetEnum
type SearchProductsAsAdminXAmzTargetEnum string

const (
	SearchProductsAsAdminXAmzTargetEnumAws242ServiceCatalogServiceSearchProductsAsAdmin SearchProductsAsAdminXAmzTargetEnum = "AWS242ServiceCatalogService.SearchProductsAsAdmin"
)

func (e SearchProductsAsAdminXAmzTargetEnum) ToPointer() *SearchProductsAsAdminXAmzTargetEnum {
	return &e
}

func (e *SearchProductsAsAdminXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS242ServiceCatalogService.SearchProductsAsAdmin":
		*e = SearchProductsAsAdminXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchProductsAsAdminXAmzTargetEnum: %v", v)
	}
}

type SearchProductsAsAdminRequest struct {
	// Pagination limit
	PageSize *string `queryParam:"style=form,explode=true,name=PageSize"`
	// Pagination token
	PageToken                  *string                             `queryParam:"style=form,explode=true,name=PageToken"`
	SearchProductsAsAdminInput shared.SearchProductsAsAdminInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 SearchProductsAsAdminXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SearchProductsAsAdminResponse struct {
	ContentType string
	// InvalidParametersException
	InvalidParametersException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SearchProductsAsAdminOutput *shared.SearchProductsAsAdminOutput
	StatusCode                  int
	RawResponse                 *http.Response
}
