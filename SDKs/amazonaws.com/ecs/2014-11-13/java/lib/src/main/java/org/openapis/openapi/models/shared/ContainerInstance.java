/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ContainerInstance - An Amazon EC2 or External instance that's running the Amazon ECS agent and has been registered with a cluster.
 */
public class ContainerInstance {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentConnected")
    public Boolean agentConnected;
    public ContainerInstance withAgentConnected(Boolean agentConnected) {
        this.agentConnected = agentConnected;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentUpdateStatus")
    public AgentUpdateStatusEnum agentUpdateStatus;
    public ContainerInstance withAgentUpdateStatus(AgentUpdateStatusEnum agentUpdateStatus) {
        this.agentUpdateStatus = agentUpdateStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public Attachment[] attachments;
    public ContainerInstance withAttachments(Attachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    public Attribute[] attributes;
    public ContainerInstance withAttributes(Attribute[] attributes) {
        this.attributes = attributes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacityProviderName")
    public String capacityProviderName;
    public ContainerInstance withCapacityProviderName(String capacityProviderName) {
        this.capacityProviderName = capacityProviderName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerInstanceArn")
    public String containerInstanceArn;
    public ContainerInstance withContainerInstanceArn(String containerInstanceArn) {
        this.containerInstanceArn = containerInstanceArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ec2InstanceId")
    public String ec2InstanceId;
    public ContainerInstance withEc2InstanceId(String ec2InstanceId) {
        this.ec2InstanceId = ec2InstanceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthStatus")
    public ContainerInstanceHealthStatus healthStatus;
    public ContainerInstance withHealthStatus(ContainerInstanceHealthStatus healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingTasksCount")
    public Long pendingTasksCount;
    public ContainerInstance withPendingTasksCount(Long pendingTasksCount) {
        this.pendingTasksCount = pendingTasksCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("registeredAt")
    public OffsetDateTime registeredAt;
    public ContainerInstance withRegisteredAt(OffsetDateTime registeredAt) {
        this.registeredAt = registeredAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registeredResources")
    public Resource[] registeredResources;
    public ContainerInstance withRegisteredResources(Resource[] registeredResources) {
        this.registeredResources = registeredResources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingResources")
    public Resource[] remainingResources;
    public ContainerInstance withRemainingResources(Resource[] remainingResources) {
        this.remainingResources = remainingResources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runningTasksCount")
    public Long runningTasksCount;
    public ContainerInstance withRunningTasksCount(Long runningTasksCount) {
        this.runningTasksCount = runningTasksCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ContainerInstance withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusReason")
    public String statusReason;
    public ContainerInstance withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public ContainerInstance withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public ContainerInstance withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versionInfo")
    public VersionInfo versionInfo;
    public ContainerInstance withVersionInfo(VersionInfo versionInfo) {
        this.versionInfo = versionInfo;
        return this;
    }
    
}
