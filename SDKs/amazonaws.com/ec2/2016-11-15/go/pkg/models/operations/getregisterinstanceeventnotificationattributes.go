// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETRegisterInstanceEventNotificationAttributesActionEnum
type GETRegisterInstanceEventNotificationAttributesActionEnum string

const (
	GETRegisterInstanceEventNotificationAttributesActionEnumRegisterInstanceEventNotificationAttributes GETRegisterInstanceEventNotificationAttributesActionEnum = "RegisterInstanceEventNotificationAttributes"
)

func (e *GETRegisterInstanceEventNotificationAttributesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RegisterInstanceEventNotificationAttributes":
		*e = GETRegisterInstanceEventNotificationAttributesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRegisterInstanceEventNotificationAttributesActionEnum: %s", s)
	}
}

// GETRegisterInstanceEventNotificationAttributesInstanceTagAttribute - Information about the tag keys to register for the current Region. You can either specify individual tag keys or register all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
type GETRegisterInstanceEventNotificationAttributesInstanceTagAttribute struct {
	IncludeAllTagsOfInstance *bool    `queryParam:"name=IncludeAllTagsOfInstance"`
	InstanceTagKeys          []string `queryParam:"name=InstanceTagKeys"`
}

// GETRegisterInstanceEventNotificationAttributesVersionEnum
type GETRegisterInstanceEventNotificationAttributesVersionEnum string

const (
	GETRegisterInstanceEventNotificationAttributesVersionEnumTwoThousandAndSixteen1115 GETRegisterInstanceEventNotificationAttributesVersionEnum = "2016-11-15"
)

func (e *GETRegisterInstanceEventNotificationAttributesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETRegisterInstanceEventNotificationAttributesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRegisterInstanceEventNotificationAttributesVersionEnum: %s", s)
	}
}

type GETRegisterInstanceEventNotificationAttributesRequest struct {
	Action GETRegisterInstanceEventNotificationAttributesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Information about the tag keys to register.
	InstanceTagAttribute *GETRegisterInstanceEventNotificationAttributesInstanceTagAttribute `queryParam:"style=form,explode=true,name=InstanceTagAttribute"`
	Version              GETRegisterInstanceEventNotificationAttributesVersionEnum           `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm        *string                                                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                                                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                                                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                                                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                                                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                                                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                                                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETRegisterInstanceEventNotificationAttributesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
