<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateNetworkSwitchAccessPolicyRequestBody
{
    /**
     * Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyAccessPolicyTypeEnum $accessPolicyType
     */
	#[\JMS\Serializer\Annotation\SerializedName('accessPolicyType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyAccessPolicyTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNetworkSwitchAccessPolicyRequestBodyAccessPolicyTypeEnum $accessPolicyType = null;
    
    /**
     * 802.1x Settings
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyDot1x $dot1x
     */
	#[\JMS\Serializer\Annotation\SerializedName('dot1x')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyDot1x')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNetworkSwitchAccessPolicyRequestBodyDot1x $dot1x = null;
    
    /**
     * If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     * @var ?bool $guestPortBouncing
     */
	#[\JMS\Serializer\Annotation\SerializedName('guestPortBouncing')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $guestPortBouncing = null;
    
    /**
     * ID for the guest VLAN allow unauthorized devices access to limited network resources
     * 
     * @var ?int $guestVlanId
     */
	#[\JMS\Serializer\Annotation\SerializedName('guestVlanId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $guestVlanId = null;
    
    /**
     * Choose the Host Mode for the access policy.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyHostModeEnum $hostMode
     */
	#[\JMS\Serializer\Annotation\SerializedName('hostMode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyHostModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNetworkSwitchAccessPolicyRequestBodyHostModeEnum $hostMode = null;
    
    /**
     * Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
     * 
     * @var ?bool $increaseAccessSpeed
     */
	#[\JMS\Serializer\Annotation\SerializedName('increaseAccessSpeed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $increaseAccessSpeed = null;
    
    /**
     * Name of the access policy
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Object for RADIUS Settings
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadius $radius
     */
	#[\JMS\Serializer\Annotation\SerializedName('radius')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadius')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNetworkSwitchAccessPolicyRequestBodyRadius $radius = null;
    
    /**
     * Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
     * 
     * @var ?bool $radiusAccountingEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusAccountingEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $radiusAccountingEnabled = null;
    
    /**
     * List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadiusAccountingServers> $radiusAccountingServers
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusAccountingServers')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadiusAccountingServers>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $radiusAccountingServers = null;
    
    /**
     * Change of authentication for RADIUS re-authentication and disconnection
     * 
     * @var ?bool $radiusCoaSupportEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusCoaSupportEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $radiusCoaSupportEnabled = null;
    
    /**
     * Acceptable values are `""` for None, or `"11"` for Group Policies ACL
     * 
     * @var ?string $radiusGroupAttribute
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusGroupAttribute')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $radiusGroupAttribute = null;
    
    /**
     * List of RADIUS servers to require connecting devices to authenticate against before granting network access
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadiusServers> $radiusServers
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusServers')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequestBodyRadiusServers>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $radiusServers = null;
    
    /**
     * If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     * @var ?bool $radiusTestingEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('radiusTestingEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $radiusTestingEnabled = null;
    
    /**
     * Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     * 
     * @var ?bool $urlRedirectWalledGardenEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('urlRedirectWalledGardenEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $urlRedirectWalledGardenEnabled = null;
    
    /**
     * IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     * 
     * @var ?array<string> $urlRedirectWalledGardenRanges
     */
	#[\JMS\Serializer\Annotation\SerializedName('urlRedirectWalledGardenRanges')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $urlRedirectWalledGardenRanges = null;
    
    /**
     * CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
     * 
     * @var ?bool $voiceVlanClients
     */
	#[\JMS\Serializer\Annotation\SerializedName('voiceVlanClients')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $voiceVlanClients = null;
    
	public function __construct()
	{
		$this->accessPolicyType = null;
		$this->dot1x = null;
		$this->guestPortBouncing = null;
		$this->guestVlanId = null;
		$this->hostMode = null;
		$this->increaseAccessSpeed = null;
		$this->name = null;
		$this->radius = null;
		$this->radiusAccountingEnabled = null;
		$this->radiusAccountingServers = null;
		$this->radiusCoaSupportEnabled = null;
		$this->radiusGroupAttribute = null;
		$this->radiusServers = null;
		$this->radiusTestingEnabled = null;
		$this->urlRedirectWalledGardenEnabled = null;
		$this->urlRedirectWalledGardenRanges = null;
		$this->voiceVlanClients = null;
	}
}
