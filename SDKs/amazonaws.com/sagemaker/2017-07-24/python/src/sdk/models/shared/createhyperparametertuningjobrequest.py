"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hyperparametertrainingjobdefinition as shared_hyperparametertrainingjobdefinition
from ..shared import hyperparametertuningjobconfig as shared_hyperparametertuningjobconfig
from ..shared import hyperparametertuningjobwarmstartconfig as shared_hyperparametertuningjobwarmstartconfig
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateHyperParameterTuningJobRequest:
    
    hyper_parameter_tuning_job_config: shared_hyperparametertuningjobconfig.HyperParameterTuningJobConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobConfig') }})  
    hyper_parameter_tuning_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobName') }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    training_job_definition: Optional[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinition'), 'exclude': lambda f: f is None }})  
    training_job_definitions: Optional[list[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinitions'), 'exclude': lambda f: f is None }})  
    warm_start_config: Optional[shared_hyperparametertuningjobwarmstartconfig.HyperParameterTuningJobWarmStartConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WarmStartConfig'), 'exclude': lambda f: f is None }})  
    