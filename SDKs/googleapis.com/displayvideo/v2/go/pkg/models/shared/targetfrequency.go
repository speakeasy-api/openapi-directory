// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TargetFrequencyTimeUnitEnum - The unit of time in which the target frequency will be applied. The following time unit is applicable: * `TIME_UNIT_WEEKS`
type TargetFrequencyTimeUnitEnum string

const (
	TargetFrequencyTimeUnitEnumTimeUnitUnspecified TargetFrequencyTimeUnitEnum = "TIME_UNIT_UNSPECIFIED"
	TargetFrequencyTimeUnitEnumTimeUnitLifetime    TargetFrequencyTimeUnitEnum = "TIME_UNIT_LIFETIME"
	TargetFrequencyTimeUnitEnumTimeUnitMonths      TargetFrequencyTimeUnitEnum = "TIME_UNIT_MONTHS"
	TargetFrequencyTimeUnitEnumTimeUnitWeeks       TargetFrequencyTimeUnitEnum = "TIME_UNIT_WEEKS"
	TargetFrequencyTimeUnitEnumTimeUnitDays        TargetFrequencyTimeUnitEnum = "TIME_UNIT_DAYS"
	TargetFrequencyTimeUnitEnumTimeUnitHours       TargetFrequencyTimeUnitEnum = "TIME_UNIT_HOURS"
	TargetFrequencyTimeUnitEnumTimeUnitMinutes     TargetFrequencyTimeUnitEnum = "TIME_UNIT_MINUTES"
)

func (e *TargetFrequencyTimeUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIME_UNIT_UNSPECIFIED":
		fallthrough
	case "TIME_UNIT_LIFETIME":
		fallthrough
	case "TIME_UNIT_MONTHS":
		fallthrough
	case "TIME_UNIT_WEEKS":
		fallthrough
	case "TIME_UNIT_DAYS":
		fallthrough
	case "TIME_UNIT_HOURS":
		fallthrough
	case "TIME_UNIT_MINUTES":
		*e = TargetFrequencyTimeUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetFrequencyTimeUnitEnum: %s", s)
	}
}

// TargetFrequency - Setting that controls the average number of times the ads will show to the same person over a certain period of time.
type TargetFrequency struct {
	// The target number of times, on average, the ads will be shown to the same person in the timespan dictated by time_unit and time_unit_count.
	TargetCount *string `json:"targetCount,omitempty"`
	// The unit of time in which the target frequency will be applied. The following time unit is applicable: * `TIME_UNIT_WEEKS`
	TimeUnit *TargetFrequencyTimeUnitEnum `json:"timeUnit,omitempty"`
	// The number of time_unit the target frequency will last. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_WEEKS` - must be 1
	TimeUnitCount *int `json:"timeUnitCount,omitempty"`
}
