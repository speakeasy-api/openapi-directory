"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Security:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_network_appliance_client_security_events(self, request: operations.GetNetworkApplianceClientSecurityEventsRequest) -> operations.GetNetworkApplianceClientSecurityEventsResponse:
        r"""List the security events for a client
        List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceClientSecurityEventsRequest, base_url, '/networks/{networkId}/appliance/clients/{clientId}/security/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkApplianceClientSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceClientSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_appliance_client_security_events_200_application_json_objects = out

        return res

    def get_network_appliance_security_events(self, request: operations.GetNetworkApplianceSecurityEventsRequest) -> operations.GetNetworkApplianceSecurityEventsResponse:
        r"""List the security events for a network
        List the security events for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceSecurityEventsRequest, base_url, '/networks/{networkId}/appliance/security/events', request)
        
        query_params = utils.get_query_params(operations.GetNetworkApplianceSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_appliance_security_events_200_application_json_objects = out

        return res

    def get_network_appliance_security_intrusion(self, request: operations.GetNetworkApplianceSecurityIntrusionRequest) -> operations.GetNetworkApplianceSecurityIntrusionResponse:
        r"""Returns all supported intrusion settings for an MX network
        Returns all supported intrusion settings for an MX network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceSecurityIntrusionRequest, base_url, '/networks/{networkId}/appliance/security/intrusion', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceSecurityIntrusionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_appliance_security_intrusion_200_application_json_object = out

        return res

    def get_network_appliance_security_malware(self, request: operations.GetNetworkApplianceSecurityMalwareRequest) -> operations.GetNetworkApplianceSecurityMalwareResponse:
        r"""Returns all supported malware settings for an MX network
        Returns all supported malware settings for an MX network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceSecurityMalwareRequest, base_url, '/networks/{networkId}/appliance/security/malware', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceSecurityMalwareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_appliance_security_malware_200_application_json_object = out

        return res

    def get_organization_appliance_security_events(self, request: operations.GetOrganizationApplianceSecurityEventsRequest) -> operations.GetOrganizationApplianceSecurityEventsResponse:
        r"""List the security events for an organization
        List the security events for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceSecurityEventsRequest, base_url, '/organizations/{organizationId}/appliance/security/events', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationApplianceSecurityEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceSecurityEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_appliance_security_events_200_application_json_objects = out

        return res

    def get_organization_appliance_security_intrusion(self, request: operations.GetOrganizationApplianceSecurityIntrusionRequest) -> operations.GetOrganizationApplianceSecurityIntrusionResponse:
        r"""Returns all supported intrusion settings for an organization
        Returns all supported intrusion settings for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceSecurityIntrusionRequest, base_url, '/organizations/{organizationId}/appliance/security/intrusion', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceSecurityIntrusionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_appliance_security_intrusion_200_application_json_object = out

        return res

    def update_network_appliance_security_intrusion(self, request: operations.UpdateNetworkApplianceSecurityIntrusionRequest) -> operations.UpdateNetworkApplianceSecurityIntrusionResponse:
        r"""Set the supported intrusion settings for an MX network
        Set the supported intrusion settings for an MX network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkApplianceSecurityIntrusionRequest, base_url, '/networks/{networkId}/appliance/security/intrusion', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkApplianceSecurityIntrusionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_appliance_security_intrusion_200_application_json_object = out

        return res

    def update_network_appliance_security_malware(self, request: operations.UpdateNetworkApplianceSecurityMalwareRequest) -> operations.UpdateNetworkApplianceSecurityMalwareResponse:
        r"""Set the supported malware settings for an MX network
        Set the supported malware settings for an MX network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkApplianceSecurityMalwareRequest, base_url, '/networks/{networkId}/appliance/security/malware', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkApplianceSecurityMalwareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_appliance_security_malware_200_application_json_object = out

        return res

    def update_organization_appliance_security_intrusion(self, request: operations.UpdateOrganizationApplianceSecurityIntrusionRequest) -> operations.UpdateOrganizationApplianceSecurityIntrusionResponse:
        r"""Sets supported intrusion settings for an organization
        Sets supported intrusion settings for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationApplianceSecurityIntrusionRequest, base_url, '/organizations/{organizationId}/appliance/security/intrusion', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationApplianceSecurityIntrusionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_appliance_security_intrusion_200_application_json_object = out

        return res

    