Metadata-Version: 2.1
Name: openapi
Version: 0.0.1
Summary: Python Client SDK Generated by Speakeasy
Author: Speakeasy
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# openapi

<!-- Start SDK Installation -->
## SDK Installation

```bash
pip install git+https://github.com/speakeasy-api/openapi-directory.git#subdirectory=SDKs/googleapis.com/binaryauthorization/v1/python
```
<!-- End SDK Installation -->

## SDK Example Usage
<!-- Start SDK Example Usage -->
```python
import sdk
from sdk.models import operations, shared

s = sdk.SDK()


req = operations.BinaryauthorizationProjectsAttestorsCreateRequest(
    dollar_xgafv="2",
    attestor_input=shared.AttestorInput(
        description="provident",
        etag="distinctio",
        name="quibusdam",
        user_owned_grafeas_note=shared.UserOwnedGrafeasNoteInput(
            note_reference="unde",
            public_keys=[
                shared.AttestorPublicKey(
                    ascii_armored_pgp_public_key="corrupti",
                    comment="illum",
                    id="vel",
                    pkix_public_key=shared.PkixPublicKey(
                        public_key_pem="error",
                        signature_algorithm="RSA_SIGN_PKCS1_4096_SHA512",
                    ),
                ),
                shared.AttestorPublicKey(
                    ascii_armored_pgp_public_key="suscipit",
                    comment="iure",
                    id="magnam",
                    pkix_public_key=shared.PkixPublicKey(
                        public_key_pem="debitis",
                        signature_algorithm="RSA_PSS_2048_SHA256",
                    ),
                ),
                shared.AttestorPublicKey(
                    ascii_armored_pgp_public_key="delectus",
                    comment="tempora",
                    id="suscipit",
                    pkix_public_key=shared.PkixPublicKey(
                        public_key_pem="molestiae",
                        signature_algorithm="ECDSA_P384_SHA384",
                    ),
                ),
                shared.AttestorPublicKey(
                    ascii_armored_pgp_public_key="placeat",
                    comment="voluptatum",
                    id="iusto",
                    pkix_public_key=shared.PkixPublicKey(
                        public_key_pem="excepturi",
                        signature_algorithm="RSA_PSS_4096_SHA512",
                    ),
                ),
            ],
        ),
    ),
    access_token="recusandae",
    alt="proto",
    attestor_id="ab",
    callback="quis",
    fields_="veritatis",
    key="deserunt",
    oauth_token="perferendis",
    parent="ipsam",
    pretty_print=False,
    quota_user="repellendus",
    upload_type="sapiente",
    upload_protocol="quo",
)
    
res = s.projects.binaryauthorization_projects_attestors_create(req, operations.BinaryauthorizationProjectsAttestorsCreateSecurity(
    oauth2="Bearer YOUR_ACCESS_TOKEN_HERE",
    oauth2c="Bearer YOUR_ACCESS_TOKEN_HERE",
))

if res.attestor is not None:
    # handle response
```
<!-- End SDK Example Usage -->

<!-- Start SDK Available Operations -->
## Available Resources and Operations


### projects

* `binaryauthorization_projects_attestors_create` - Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.
* `binaryauthorization_projects_attestors_delete` - Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
* `binaryauthorization_projects_attestors_list` - Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
* `binaryauthorization_projects_attestors_update` - Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
* `binaryauthorization_projects_attestors_validate_attestation_occurrence` - Returns whether the given Attestation for the given image URI was signed by the given Attestor
* `binaryauthorization_projects_policy_get_iam_policy` - Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
* `binaryauthorization_projects_policy_set_iam_policy` - Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
* `binaryauthorization_projects_policy_test_iam_permissions` - Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.

### systempolicy

* `binaryauthorization_systempolicy_get_policy` - Gets the current system policy in the specified location.
<!-- End SDK Available Operations -->

### Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

### Contributions

While we value open-source contributions to this SDK, this library is generated programmatically.
Feel free to open a PR or a Github issue as a proof of concept and we'll do our best to include it in a future release !

### SDK Created by [Speakeasy](https://docs.speakeasyapi.dev/docs/using-speakeasy/client-sdks)
