/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.bigdatacloud.net"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.
 *
 * @remarks
 *
 * This API is powered by patent-pending â€˜Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.
 *
 * You can authenticate the API with the use of API keys provided in your BigDataCloud account.
 *
 * BigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.
 *
 * The API has Unprecedented Update Rate
 * - Geolocation data re-evaluated every 2 hours or at least once a day
 * - BGP data updated every 2 hours
 * - Registry data updated at least once a day
 * - Country object data usually updates at least once in a month
 *
 * You can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * IP Geolocation with Confidence Area and Hazard Report API
   *
   * @remarks
   * This API returns additional security hazard report in addition to confidence area and locality information.
   */
  ipGeolocationWithConfidenceAreaAndHazardReportApi(
    req: operations.IpGeolocationWithConfidenceAreaAndHazardReportApiRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IpGeolocationWithConfidenceAreaAndHazardReportApiResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IpGeolocationWithConfidenceAreaAndHazardReportApiRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/data/ip-geolocation-full";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IpGeolocationWithConfidenceAreaAndHazardReportApiResponse =
        new operations.IpGeolocationWithConfidenceAreaAndHazardReportApiResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * IP Geolocation with Confidence Area API
   *
   * @remarks
   * Returns list of geocoordinates which represents estimated geolocation confidence area.
   */
  ipGeolocationWithConfidenceAreaApi(
    req: operations.IpGeolocationWithConfidenceAreaApiRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IpGeolocationWithConfidenceAreaApiResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IpGeolocationWithConfidenceAreaApiRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/data/ip-geolocation-with-confidence";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IpGeolocationWithConfidenceAreaApiResponse =
        new operations.IpGeolocationWithConfidenceAreaApiResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
