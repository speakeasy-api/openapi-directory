/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ActivateSubscriptionRequest {
    /**
     * If set, the date must be in the past the subscription will recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("recoverBeginPeriodOrderLastModificationUtcDate")
    public OffsetDateTime recoverBeginPeriodOrderLastModificationUtcDate;
    public ActivateSubscriptionRequest withRecoverBeginPeriodOrderLastModificationUtcDate(OffsetDateTime recoverBeginPeriodOrderLastModificationUtcDate) {
        this.recoverBeginPeriodOrderLastModificationUtcDate = recoverBeginPeriodOrderLastModificationUtcDate;
        return this;
    }
    
    /**
     * If end period set, first the date must be in the past, the subscription will recover existing orders using the begin and the end period order last modification date. 
     * If end period is not set and the begin period is set, then you will recover existing orders from the past using the begin period last modification date and after than you will continue to receive new/updated orders in real-time.
     * If begin/end period are not set then you will receive new/updated orders in real-time.
     * REMARK: The begin period is required if the end period is fulfilled.
     * REMARK: If the end period is order last modification date is indicated then once we have push all orders to your target url the subscription will be desactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("recoverEndPeriodOrderLastModificationUtcDate")
    public OffsetDateTime recoverEndPeriodOrderLastModificationUtcDate;
    public ActivateSubscriptionRequest withRecoverEndPeriodOrderLastModificationUtcDate(OffsetDateTime recoverEndPeriodOrderLastModificationUtcDate) {
        this.recoverEndPeriodOrderLastModificationUtcDate = recoverEndPeriodOrderLastModificationUtcDate;
        return this;
    }
    
}
