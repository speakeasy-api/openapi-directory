/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Request to verify the password.
 */
export class IdentitytoolkitRelyingpartyVerifyPasswordRequest extends SpeakeasyBase {
  /**
   * The captcha challenge.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captchaChallenge" })
  captchaChallenge?: string;

  /**
   * Response to the captcha.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captchaResponse" })
  captchaResponse?: string;

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delegatedProjectNumber" })
  delegatedProjectNumber?: string;

  /**
   * The email of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The GITKit token of the authenticated user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idToken" })
  idToken?: string;

  /**
   * Instance id token of the app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceId" })
  instanceId?: string;

  /**
   * The password inputed by the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pendingIdToken" })
  pendingIdToken?: string;

  /**
   * Whether return sts id token and refresh token instead of gitkit token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "returnSecureToken" })
  returnSecureToken?: boolean;

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tenantId" })
  tenantId?: string;

  /**
   * Tenant project number to be used for idp discovery.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tenantProjectNumber" })
  tenantProjectNumber?: string;
}
