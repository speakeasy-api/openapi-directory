/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Disk - Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/beta/disks) * [Regional](/compute/docs/reference/rest/beta/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
 */
public class Disk {
    /**
     * The architecture of the disk. Valid values are ARM64 or X86_64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("architecture")
    public DiskArchitectureEnum architecture;
    public Disk withArchitecture(DiskArchitectureEnum architecture) {
        this.architecture = architecture;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asyncPrimaryDisk")
    public DiskAsyncReplication asyncPrimaryDisk;
    public Disk withAsyncPrimaryDisk(DiskAsyncReplication asyncPrimaryDisk) {
        this.asyncPrimaryDisk = asyncPrimaryDisk;
        return this;
    }
    
    /**
     * [Output Only] A list of disks this disk is asynchronously replicated to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asyncSecondaryDisks")
    public java.util.Map<String, DiskAsyncReplicationList> asyncSecondaryDisks;
    public Disk withAsyncSecondaryDisks(java.util.Map<String, DiskAsyncReplicationList> asyncSecondaryDisks) {
        this.asyncSecondaryDisks = asyncSecondaryDisks;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;
    public Disk withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Disk withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskEncryptionKey")
    public CustomerEncryptionKey diskEncryptionKey;
    public Disk withDiskEncryptionKey(CustomerEncryptionKey diskEncryptionKey) {
        this.diskEncryptionKey = diskEncryptionKey;
        return this;
    }
    
    /**
     * Specifies whether the disk restored from a source snapshot should erase Windows specific VSS signature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eraseWindowsVssSignature")
    public Boolean eraseWindowsVssSignature;
    public Disk withEraseWindowsVssSignature(Boolean eraseWindowsVssSignature) {
        this.eraseWindowsVssSignature = eraseWindowsVssSignature;
        return this;
    }
    
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestOsFeatures")
    public GuestOsFeature[] guestOsFeatures;
    public Disk withGuestOsFeatures(GuestOsFeature[] guestOsFeatures) {
        this.guestOsFeatures = guestOsFeatures;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Disk withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Deprecated] Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interface")
    public DiskInterfaceEnum interface_;
    public Disk withInterface(DiskInterfaceEnum interface_) {
        this.interface_ = interface_;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#disk for disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Disk withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelFingerprint")
    public String labelFingerprint;
    public Disk withLabelFingerprint(String labelFingerprint) {
        this.labelFingerprint = labelFingerprint;
        return this;
    }
    
    /**
     * Labels to apply to this disk. These can be later modified by the setLabels method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Disk withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * [Output Only] Last attach timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastAttachTimestamp")
    public String lastAttachTimestamp;
    public Disk withLastAttachTimestamp(String lastAttachTimestamp) {
        this.lastAttachTimestamp = lastAttachTimestamp;
        return this;
    }
    
    /**
     * [Output Only] Last detach timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastDetachTimestamp")
    public String lastDetachTimestamp;
    public Disk withLastDetachTimestamp(String lastDetachTimestamp) {
        this.lastDetachTimestamp = lastDetachTimestamp;
        return this;
    }
    
    /**
     * Integer license codes indicating which licenses are attached to this disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseCodes")
    public String[] licenseCodes;
    public Disk withLicenseCodes(String[] licenseCodes) {
        this.licenseCodes = licenseCodes;
        return this;
    }
    
    /**
     * A list of publicly visible licenses. Reserved for Google's use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenses")
    public String[] licenses;
    public Disk withLicenses(String[] licenses) {
        this.licenses = licenses;
        return this;
    }
    
    /**
     * An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationHint")
    public String locationHint;
    public Disk withLocationHint(String locationHint) {
        this.locationHint = locationHint;
        return this;
    }
    
    /**
     * [Output Only] The field indicates if the disk is created from a locked source image. Attachment of a disk created from a locked source image will cause the following operations to become irreversibly prohibited: - R/W or R/O disk attachment to any other instance - Disk detachment. And the disk can only be deleted when the instance is deleted - Creation of images or snapshots - Disk cloning Furthermore, the instance with at least one disk with locked flag set to true will be prohibited from performing the operations below: - Further attachment of secondary disks. - Detachment of any disks - Create machine images - Create instance template - Delete the instance with --keep-disk parameter set to true for locked disks - Attach a locked disk with --auto-delete parameter set to false 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    public Boolean locked;
    public Disk withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiWriter")
    public Boolean multiWriter;
    public Disk withMultiWriter(Boolean multiWriter) {
        this.multiWriter = multiWriter;
        return this;
    }
    
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Disk withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Internal use only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public String options;
    public Disk withOptions(String options) {
        this.options = options;
        return this;
    }
    
    /**
     * Additional disk params.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("params")
    public DiskParams params;
    public Disk withParams(DiskParams params) {
        this.params = params;
        return this;
    }
    
    /**
     * Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("physicalBlockSizeBytes")
    public String physicalBlockSizeBytes;
    public Disk withPhysicalBlockSizeBytes(String physicalBlockSizeBytes) {
        this.physicalBlockSizeBytes = physicalBlockSizeBytes;
        return this;
    }
    
    /**
     * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisionedIops")
    public String provisionedIops;
    public Disk withProvisionedIops(String provisionedIops) {
        this.provisionedIops = provisionedIops;
        return this;
    }
    
    /**
     * Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be between 1 and 7,124.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisionedThroughput")
    public String provisionedThroughput;
    public Disk withProvisionedThroughput(String provisionedThroughput) {
        this.provisionedThroughput = provisionedThroughput;
        return this;
    }
    
    /**
     * [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public Disk withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicaZones")
    public String[] replicaZones;
    public Disk withReplicaZones(String[] replicaZones) {
        this.replicaZones = replicaZones;
        return this;
    }
    
    /**
     * Resource policies applied to this disk for automatic snapshot creations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourcePolicies")
    public String[] resourcePolicies;
    public Disk withResourcePolicies(String[] resourcePolicies) {
        this.resourcePolicies = resourcePolicies;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceStatus")
    public DiskResourceStatus resourceStatus;
    public Disk withResourceStatus(DiskResourceStatus resourceStatus) {
        this.resourceStatus = resourceStatus;
        return this;
    }
    
    /**
     * [Output Only] Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPzs")
    public Boolean satisfiesPzs;
    public Disk withSatisfiesPzs(Boolean satisfiesPzs) {
        this.satisfiesPzs = satisfiesPzs;
        return this;
    }
    
    /**
     * [Output Only] Server-defined fully-qualified URL for this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Disk withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to 65536, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sizeGb")
    public String sizeGb;
    public Disk withSizeGb(String sizeGb) {
        this.sizeGb = sizeGb;
        return this;
    }
    
    /**
     * [Output Only] URL of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceConsistencyGroupPolicy")
    public String sourceConsistencyGroupPolicy;
    public Disk withSourceConsistencyGroupPolicy(String sourceConsistencyGroupPolicy) {
        this.sourceConsistencyGroupPolicy = sourceConsistencyGroupPolicy;
        return this;
    }
    
    /**
     * [Output Only] ID of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceConsistencyGroupPolicyId")
    public String sourceConsistencyGroupPolicyId;
    public Disk withSourceConsistencyGroupPolicyId(String sourceConsistencyGroupPolicyId) {
        this.sourceConsistencyGroupPolicyId = sourceConsistencyGroupPolicyId;
        return this;
    }
    
    /**
     * The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDisk")
    public String sourceDisk;
    public Disk withSourceDisk(String sourceDisk) {
        this.sourceDisk = sourceDisk;
        return this;
    }
    
    /**
     * [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDiskId")
    public String sourceDiskId;
    public Disk withSourceDiskId(String sourceDiskId) {
        this.sourceDiskId = sourceDiskId;
        return this;
    }
    
    /**
     * The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceImage")
    public String sourceImage;
    public Disk withSourceImage(String sourceImage) {
        this.sourceImage = sourceImage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceImageEncryptionKey")
    public CustomerEncryptionKey sourceImageEncryptionKey;
    public Disk withSourceImageEncryptionKey(CustomerEncryptionKey sourceImageEncryptionKey) {
        this.sourceImageEncryptionKey = sourceImageEncryptionKey;
        return this;
    }
    
    /**
     * [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceImageId")
    public String sourceImageId;
    public Disk withSourceImageId(String sourceImageId) {
        this.sourceImageId = sourceImageId;
        return this;
    }
    
    /**
     * The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceSnapshot")
    public String sourceSnapshot;
    public Disk withSourceSnapshot(String sourceSnapshot) {
        this.sourceSnapshot = sourceSnapshot;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceSnapshotEncryptionKey")
    public CustomerEncryptionKey sourceSnapshotEncryptionKey;
    public Disk withSourceSnapshotEncryptionKey(CustomerEncryptionKey sourceSnapshotEncryptionKey) {
        this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
        return this;
    }
    
    /**
     * [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceSnapshotId")
    public String sourceSnapshotId;
    public Disk withSourceSnapshotId(String sourceSnapshotId) {
        this.sourceSnapshotId = sourceSnapshotId;
        return this;
    }
    
    /**
     * The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceStorageObject")
    public String sourceStorageObject;
    public Disk withSourceStorageObject(String sourceStorageObject) {
        this.sourceStorageObject = sourceStorageObject;
        return this;
    }
    
    /**
     * [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public DiskStatusEnum status;
    public Disk withStatus(DiskStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * [Deprecated] Storage type of the persistent disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageType")
    public DiskStorageTypeEnum storageType;
    public Disk withStorageType(DiskStorageTypeEnum storageType) {
        this.storageType = storageType;
        return this;
    }
    
    /**
     * URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Disk withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * A list of publicly visible user-licenses. Unlike regular licenses, user provided licenses can be modified after the disk is created. This includes a list of URLs to the license resource. For example, to provide a debian license: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userLicenses")
    public String[] userLicenses;
    public Disk withUserLicenses(String[] userLicenses) {
        this.userLicenses = userLicenses;
        return this;
    }
    
    /**
     * [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    public String[] users;
    public Disk withUsers(String[] users) {
        this.users = users;
        return this;
    }
    
    /**
     * [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;
    public Disk withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
}
