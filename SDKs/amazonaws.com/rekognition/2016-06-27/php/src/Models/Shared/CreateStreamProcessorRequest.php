<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class CreateStreamProcessorRequest
{
	#[\JMS\Serializer\Annotation\SerializedName('DataSharingPreference')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamProcessorDataSharingPreference')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StreamProcessorDataSharingPreference $dataSharingPreference = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Input')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamProcessorInput')]
    public StreamProcessorInput $input;
    
	#[\JMS\Serializer\Annotation\SerializedName('KmsKeyId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kmsKeyId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * <p>The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation.</p> <p>Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4.</p> <p>Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.</p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StreamProcessorNotificationChannel $notificationChannel
     */
	#[\JMS\Serializer\Annotation\SerializedName('NotificationChannel')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamProcessorNotificationChannel')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StreamProcessorNotificationChannel $notificationChannel = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Output')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamProcessorOutput')]
    public StreamProcessorOutput $output;
    
    /**
     * $regionsOfInterest
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\RegionOfInterest> $regionsOfInterest
     */
	#[\JMS\Serializer\Annotation\SerializedName('RegionsOfInterest')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\RegionOfInterest>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $regionsOfInterest = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('RoleArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $roleArn;
    
	#[\JMS\Serializer\Annotation\SerializedName('Settings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamProcessorSettings')]
    public StreamProcessorSettings $settings;
    
    /**
     * $tags
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('Tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->dataSharingPreference = null;
		$this->input = new \OpenAPI\OpenAPI\Models\Shared\StreamProcessorInput();
		$this->kmsKeyId = null;
		$this->name = "";
		$this->notificationChannel = null;
		$this->output = new \OpenAPI\OpenAPI\Models\Shared\StreamProcessorOutput();
		$this->regionsOfInterest = null;
		$this->roleArn = "";
		$this->settings = new \OpenAPI\OpenAPI\Models\Shared\StreamProcessorSettings();
		$this->tags = null;
	}
}
