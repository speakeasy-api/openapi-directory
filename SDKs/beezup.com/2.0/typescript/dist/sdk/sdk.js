"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var analyticsglobal_1 = require("./analyticsglobal");
var analyticsoptimisations_1 = require("./analyticsoptimisations");
var analyticsreports_1 = require("./analyticsreports");
var analyticsrules_1 = require("./analyticsrules");
var analyticsstatistics_1 = require("./analyticsstatistics");
var analyticstracking_1 = require("./analyticstracking");
var catalogsauto_1 = require("./catalogsauto");
var catalogscatalog_1 = require("./catalogscatalog");
var catalogsglobal_1 = require("./catalogsglobal");
var catalogsimportationcataloginfo_1 = require("./catalogsimportationcataloginfo");
var catalogsimportationprocess_1 = require("./catalogsimportationprocess");
var channelcatalogscategories_1 = require("./channelcatalogscategories");
var channelcatalogscolumnmappings_1 = require("./channelcatalogscolumnmappings");
var channelcatalogsexclusionfilters_1 = require("./channelcatalogsexclusionfilters");
var channelcatalogsexportations_1 = require("./channelcatalogsexportations");
var channelcatalogsglobal_1 = require("./channelcatalogsglobal");
var channelcatalogslegacytrackingglobal_1 = require("./channelcatalogslegacytrackingglobal");
var channelcatalogsproducts_1 = require("./channelcatalogsproducts");
var channelcatalogsproductsoptimisation_1 = require("./channelcatalogsproductsoptimisation");
var channelcatalogsproductsoverrides_1 = require("./channelcatalogsproductsoverrides");
var channelcatalogssettings_1 = require("./channelcatalogssettings");
var channelschannelsglobal_1 = require("./channelschannelsglobal");
var customeraccount_1 = require("./customeraccount");
var customeralerts_1 = require("./customeralerts");
var customercontracts_1 = require("./customercontracts");
var customerfriends_1 = require("./customerfriends");
var customerglobal_1 = require("./customerglobal");
var customerinvoices_1 = require("./customerinvoices");
var customerrights_1 = require("./customerrights");
var customersecurity_1 = require("./customersecurity");
var customershares_1 = require("./customershares");
var customerstores_1 = require("./customerstores");
var marketplaceschannelcatalogsglobal_1 = require("./marketplaceschannelcatalogsglobal");
var marketplaceschannelcatalogspublications_1 = require("./marketplaceschannelcatalogspublications");
var marketplaceschannelcatalogssettings_1 = require("./marketplaceschannelcatalogssettings");
var marketplacesordersautotransitions_1 = require("./marketplacesordersautotransitions");
var marketplacesordersbatches_1 = require("./marketplacesordersbatches");
var marketplacesordersexports_1 = require("./marketplacesordersexports");
var marketplacesordersglobal_1 = require("./marketplacesordersglobal");
var marketplacesorderslist_1 = require("./marketplacesorderslist");
var marketplacesordersorder_1 = require("./marketplacesordersorder");
var marketplacesorderssubscriptionssubscriptions_1 = require("./marketplacesorderssubscriptionssubscriptions");
var marketplacesordersv3batches_1 = require("./marketplacesordersv3batches");
var marketplacesordersv3global_1 = require("./marketplacesordersv3global");
var marketplacesordersv3list_1 = require("./marketplacesordersv3list");
var marketplacesordersv3order_1 = require("./marketplacesordersv3order");
var ominvoiceapigeneration_1 = require("./ominvoiceapigeneration");
var ominvoiceapisettings_1 = require("./ominvoiceapisettings");
var publicchannelspublicchannels_1 = require("./publicchannelspublicchannels");
var publiclistofvalueslov_1 = require("./publiclistofvalueslov");
var publicsecuritysecurity_1 = require("./publicsecuritysecurity");
var userlistofvalueslov_1 = require("./userlistofvalueslov");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.beezup.com"];
/**
 * # The REST API of BeezUP system
 *
 * @remarks
 * ## Overview
 * The REST APIs provide programmatic access to read and write BeezUP data.
 * Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !
 *
 * The main features are:
 * - Register and manage your account
 * - Create and manage and share your stores with your friends/co-workers.
 * - Import your product catalog and schedule the auto importation
 * - Search the channels your want to use
 * - Configure your channels for your catalogs to export your product information:
 *     - cost and general settings
 *     - category and columns mappings
 *     - your will be able to create and manage your custom column
 *     - put in place exlusion filters based on simple conditions on your product data
 *     - override product values
 *     - get product vision for a channel catalog scope
 * - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product.
 * - Automatize your optimisation by using rules!
 * - And of course... Manage your orders harvested from all your marketplaces:
 *     - Synchronize your orders in an uniformized way
 *     - Get the available actions and update the order status
 * - ...and more!
 *
 * ## Authentication credentials
 * The public API with the base path ** /v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials.
 * We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).
 *
 * The user API with the base path ** /v2/user** requires a token which is available on this page:
 * https://go.beezup.com/Account/MyAccount
 *
 * ## Things to keep in mind
 * ### API Rate Limits
 * - The BeezUP REST API is limited to 100 calls/minute.
 *
 * ### Media type
 * The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.
 *
 * ### Required content type
 * The required and default encoding for the request and responses is UTF8.
 *
 * ### Required date time format
 * All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.
 *
 * ### Base URL
 * The Base URL of the BeezUP API Order Management REST API conforms to the following template.
 *
 * https://api.beezup.com
 *
 * All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.
 *
 * You can test our API on https://api-docs.beezup.com/swagger-ui\\
 * You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * @see {@link https://api-docs.beezup.com/} - Find the documentation for BeezUP's API here
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.analyticsGlobal = new analyticsglobal_1.AnalyticsGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analyticsOptimisations = new analyticsoptimisations_1.AnalyticsOptimisations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analyticsReports = new analyticsreports_1.AnalyticsReports(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analyticsRules = new analyticsrules_1.AnalyticsRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analyticsStatistics = new analyticsstatistics_1.AnalyticsStatistics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.analyticsTracking = new analyticstracking_1.AnalyticsTracking(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.catalogsAuto = new catalogsauto_1.CatalogsAuto(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.catalogsCatalog = new catalogscatalog_1.CatalogsCatalog(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.catalogsGlobal = new catalogsglobal_1.CatalogsGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.catalogsImportationCatalogInfo = new catalogsimportationcataloginfo_1.CatalogsImportationCatalogInfo(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.catalogsImportationProcess = new catalogsimportationprocess_1.CatalogsImportationProcess(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsCategories = new channelcatalogscategories_1.ChannelCatalogsCategories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsColumnMappings = new channelcatalogscolumnmappings_1.ChannelCatalogsColumnMappings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsExclusionFilters = new channelcatalogsexclusionfilters_1.ChannelCatalogsExclusionFilters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsExportations = new channelcatalogsexportations_1.ChannelCatalogsExportations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsGlobal = new channelcatalogsglobal_1.ChannelCatalogsGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsLegacyTrackingGlobal =
            new channelcatalogslegacytrackingglobal_1.ChannelCatalogsLegacyTrackingGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsProducts = new channelcatalogsproducts_1.ChannelCatalogsProducts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsProductsOptimisation =
            new channelcatalogsproductsoptimisation_1.ChannelCatalogsProductsOptimisation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsProductsOverrides =
            new channelcatalogsproductsoverrides_1.ChannelCatalogsProductsOverrides(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelCatalogsSettings = new channelcatalogssettings_1.ChannelCatalogsSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.channelsChannelsGlobal = new channelschannelsglobal_1.ChannelsChannelsGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerAccount = new customeraccount_1.CustomerAccount(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerAlerts = new customeralerts_1.CustomerAlerts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerContracts = new customercontracts_1.CustomerContracts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerFriends = new customerfriends_1.CustomerFriends(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerGlobal = new customerglobal_1.CustomerGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerInvoices = new customerinvoices_1.CustomerInvoices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerRights = new customerrights_1.CustomerRights(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerSecurity = new customersecurity_1.CustomerSecurity(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerShares = new customershares_1.CustomerShares(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerStores = new customerstores_1.CustomerStores(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesChannelCatalogsGlobal =
            new marketplaceschannelcatalogsglobal_1.MarketplacesChannelCatalogsGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesChannelCatalogsPublications =
            new marketplaceschannelcatalogspublications_1.MarketplacesChannelCatalogsPublications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesChannelCatalogsSettings =
            new marketplaceschannelcatalogssettings_1.MarketplacesChannelCatalogsSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersAutoTransitions =
            new marketplacesordersautotransitions_1.MarketplacesOrdersAutoTransitions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersBatches = new marketplacesordersbatches_1.MarketplacesOrdersBatches(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersExports = new marketplacesordersexports_1.MarketplacesOrdersExports(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersGlobal = new marketplacesordersglobal_1.MarketplacesOrdersGlobal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersList = new marketplacesorderslist_1.MarketplacesOrdersList(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersOrder = new marketplacesordersorder_1.MarketplacesOrdersOrder(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersSubscriptionsSubscriptions =
            new marketplacesorderssubscriptionssubscriptions_1.MarketplacesOrdersSubscriptionsSubscriptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersV3Batches = new marketplacesordersv3batches_1.MarketplacesOrdersV3Batches(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersV3Global = new marketplacesordersv3global_1.MarketplacesOrdersV3Global(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersV3List = new marketplacesordersv3list_1.MarketplacesOrdersV3List(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.marketplacesOrdersV3Order = new marketplacesordersv3order_1.MarketplacesOrdersV3Order(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.omInvoiceAPIGeneration = new ominvoiceapigeneration_1.OMInvoiceAPIGeneration(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.omInvoiceAPISettings = new ominvoiceapisettings_1.OMInvoiceAPISettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publicChannelsPublicChannels = new publicchannelspublicchannels_1.PublicChannelsPublicChannels(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publicListOfValuesLOV = new publiclistofvalueslov_1.PublicListOfValuesLOV(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publicSecuritySecurity = new publicsecuritysecurity_1.PublicSecuritySecurity(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.userListOfValuesLOV = new userlistofvalueslov_1.UserListOfValuesLOV(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
