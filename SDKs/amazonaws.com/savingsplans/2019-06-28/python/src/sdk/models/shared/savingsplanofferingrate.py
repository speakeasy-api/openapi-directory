"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import parentsavingsplanoffering as shared_parentsavingsplanoffering
from ..shared import savingsplanproducttype_enum as shared_savingsplanproducttype_enum
from ..shared import savingsplanrateservicecode_enum as shared_savingsplanrateservicecode_enum
from ..shared import savingsplanrateunit_enum as shared_savingsplanrateunit_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SavingsPlanOfferingRate:
    r"""Information about a Savings Plan offering rate."""
    
    operation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation'), 'exclude': lambda f: f is None }})  
    product_type: Optional[shared_savingsplanproducttype_enum.SavingsPlanProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})  
    properties: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""The properties."""  
    rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})  
    savings_plan_offering: Optional[shared_parentsavingsplanoffering.ParentSavingsPlanOffering] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingsPlanOffering'), 'exclude': lambda f: f is None }})  
    service_code: Optional[shared_savingsplanrateservicecode_enum.SavingsPlanRateServiceCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceCode'), 'exclude': lambda f: f is None }})  
    unit: Optional[shared_savingsplanrateunit_enum.SavingsPlanRateUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})  
    usage_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageType'), 'exclude': lambda f: f is None }})  
    