// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeAcceleratorXAmzTargetEnum
type DescribeAcceleratorXAmzTargetEnum string

const (
	DescribeAcceleratorXAmzTargetEnumGlobalAcceleratorV20180706DescribeAccelerator DescribeAcceleratorXAmzTargetEnum = "GlobalAccelerator_V20180706.DescribeAccelerator"
)

func (e DescribeAcceleratorXAmzTargetEnum) ToPointer() *DescribeAcceleratorXAmzTargetEnum {
	return &e
}

func (e *DescribeAcceleratorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GlobalAccelerator_V20180706.DescribeAccelerator":
		*e = DescribeAcceleratorXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAcceleratorXAmzTargetEnum: %v", v)
	}
}

type DescribeAcceleratorRequest struct {
	DescribeAcceleratorRequest shared.DescribeAcceleratorRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 DescribeAcceleratorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeAcceleratorResponse struct {
	// AcceleratorNotFoundException
	AcceleratorNotFoundException interface{}
	ContentType                  string
	// Success
	DescribeAcceleratorResponse *shared.DescribeAcceleratorResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	StatusCode               int
	RawResponse              *http.Response
}
