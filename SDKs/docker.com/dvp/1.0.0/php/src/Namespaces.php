<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Namespaces 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get namespace data for timespan
     * 
     * Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanResponse
     */
	public function getNamespaceDataByTimespan(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}', \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespaceDataByTimespanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseData', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get namespace metadata for timespan
     * 
     * Gets info about data for the given namespace and timespan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataResponse
     */
	public function getNamespaceTimespanMetadata(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}', \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespanMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timespanModel = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get timespans with data
     * 
     * Gets a list of timespans of the given type that have data for the given namespace and year
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansResponse
     */
	public function getNamespaceTimespans(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}', \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespaceTimespansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timespanData = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get years with data
     * 
     * Gets a list of years that have data for the given namespace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsResponse
     */
	public function getNamespaceYears(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/namespaces/{namespace}/pulls/exports/years', \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespaceYearsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->yearData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\YearData', 'json');
            }
        }

        return $response;
    }
}