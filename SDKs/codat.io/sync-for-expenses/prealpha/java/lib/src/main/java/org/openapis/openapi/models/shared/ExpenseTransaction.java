/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ExpenseTransaction {
    /**
     * Currency the transaction was recorded in.
     */
    @JsonProperty("currency")
    public String currency;

    public ExpenseTransaction withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | \u00a315.62                     |
     * | **EUR**          | \u20ac20            | 0.885         | \u00a317.70                     |
     * | **RUB**          | \u20bd20            | 0.011         | \u00a30.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | \u00a320            | 1.277         | $25.54                     |
     * | **EUR**          | \u20ac20            | 1.134         | $22.68                     |
     * | **RUB**          | \u20bd20            | 0.015         | $0.30                      |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyRate")
    public Double currencyRate;

    public ExpenseTransaction withCurrencyRate(Double currencyRate) {
        this.currencyRate = currencyRate;
        return this;
    }
    
    /**
     * Your unique idenfier for the transaction.
     */
    @JsonProperty("id")
    public String id;

    public ExpenseTransaction withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonProperty("issueDate")
    public String issueDate;

    public ExpenseTransaction withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * Array of transaction lines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    public ExpenseTransactionLine[] lines;

    public ExpenseTransaction withLines(ExpenseTransactionLine[] lines) {
        this.lines = lines;
        return this;
    }
    
    /**
     * Name of the merchant where the purchase took place
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantName")
    public String merchantName;

    public ExpenseTransaction withMerchantName(String merchantName) {
        this.merchantName = merchantName;
        return this;
    }
    
    /**
     * Any private, company notes about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public ExpenseTransaction withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The type of transaction.
     */
    @JsonProperty("type")
    public ExpenseTransactionTypeEnum type;

    public ExpenseTransaction withType(ExpenseTransactionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public ExpenseTransaction(@JsonProperty("currency") String currency, @JsonProperty("id") String id, @JsonProperty("issueDate") String issueDate, @JsonProperty("type") ExpenseTransactionTypeEnum type) {
        this.currency = currency;
        this.id = id;
        this.issueDate = issueDate;
        this.type = type;
  }
}
