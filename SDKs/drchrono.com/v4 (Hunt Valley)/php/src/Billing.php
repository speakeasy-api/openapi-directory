<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Billing 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve or search billing profiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListResponse
     */
	public function billingProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/billing_profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BillingProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingProfilesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BillingProfilesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing billing profiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadResponse
     */
	public function billingProfilesRead(
        \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/billing_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingProfilesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create communication (phone call) logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateResponse
     */
	public function commLogsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/comm_logs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommLogsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommLogsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneCallLog = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhoneCallLog', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search communicatioin (phone call) logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommLogsListResponse
     */
	public function commLogsList(
        \OpenAPI\OpenAPI\Models\Operations\CommLogsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommLogsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommLogsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/comm_logs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommLogsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommLogsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commLogsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CommLogsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing communication (phone call) logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateResponse
     */
	public function commLogsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/comm_logs/{id}', \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommLogsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing communication (phone call) logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommLogsReadResponse
     */
	public function commLogsRead(
        \OpenAPI\OpenAPI\Models\Operations\CommLogsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommLogsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommLogsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/comm_logs/{id}', \OpenAPI\OpenAPI\Models\Operations\CommLogsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommLogsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommLogsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneCallLog = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhoneCallLog', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing communication (phone call) logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateResponse
     */
	public function commLogsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/comm_logs/{id}', \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommLogsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search custom insurance plan names
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListResponse
     */
	public function customInsurancePlanNamesList(
        \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_insurance_plan_names');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customInsurancePlanNamesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing custom insurance plan name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadResponse
     */
	public function customInsurancePlanNamesRead(
        \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_insurance_plan_names/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomInsurancePlanNamesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customInsurancePlanName = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomInsurancePlanName', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search past eligibility checks for patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListResponse
     */
	public function eligibilityChecksList(
        \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/eligibility_checks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eligibilityChecksList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EligibilityChecksList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing past eligibility check
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadResponse
     */
	public function eligibilityChecksRead(
        \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/eligibility_checks/{id}', \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EligibilityChecksReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->coverage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Coverage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create billing line item for appointments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateResponse
     */
	public function lineItemsCreate(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingLineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingLineItem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * lineItemsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteResponse
     */
	public function lineItemsDelete(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items/{id}', \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search billing line items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsListResponse
     */
	public function lineItemsList(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItemsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LineItemsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * lineItemsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateResponse
     */
	public function lineItemsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items/{id}', \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing billing line item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsReadResponse
     */
	public function lineItemsRead(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items/{id}', \OpenAPI\OpenAPI\Models\Operations\LineItemsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingLineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingLineItem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * lineItemsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateResponse
     */
	public function lineItemsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/line_items/{id}', \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LineItemsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient payment logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListResponse
     */
	public function patientPaymentLogList(
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_payment_log');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientPaymentLogList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient payment log
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadResponse
     */
	public function patientPaymentLogRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_payment_log/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPaymentLogReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cashPaymentLog = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CashPaymentLog', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient payment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateResponse
     */
	public function patientPaymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_payments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cashPayment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CashPayment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListResponse
     */
	public function patientPaymentsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_payments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientPaymentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientPaymentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient payment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadResponse
     */
	public function patientPaymentsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_payments/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPaymentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cashPayment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CashPayment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * proceduresList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProceduresListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProceduresListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProceduresListResponse
     */
	public function proceduresList(
        \OpenAPI\OpenAPI\Models\Operations\ProceduresListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProceduresListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProceduresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/procedures');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProceduresListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProceduresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proceduresList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProceduresList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * proceduresRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProceduresReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProceduresReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProceduresReadResponse
     */
	public function proceduresRead(
        \OpenAPI\OpenAPI\Models\Operations\ProceduresReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProceduresReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProceduresReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/procedures/{id}', \OpenAPI\OpenAPI\Models\Operations\ProceduresReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProceduresReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProceduresReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingLineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingLineItem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search insurance transactions associated with billing line items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TransactionsListResponse
     */
	public function transactionsList(
        \OpenAPI\OpenAPI\Models\Operations\TransactionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TransactionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TransactionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/transactions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TransactionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TransactionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TransactionsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing insurance transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TransactionsReadResponse
     */
	public function transactionsRead(
        \OpenAPI\OpenAPI\Models\Operations\TransactionsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TransactionsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TransactionsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/transactions/{id}', \OpenAPI\OpenAPI\Models\Operations\TransactionsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TransactionsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TransactionsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItemTransaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LineItemTransaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}