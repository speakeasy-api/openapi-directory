// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateCommentXAmzTargetEnum
type UpdateCommentXAmzTargetEnum string

const (
	UpdateCommentXAmzTargetEnumCodeCommit20150413UpdateComment UpdateCommentXAmzTargetEnum = "CodeCommit_20150413.UpdateComment"
)

func (e *UpdateCommentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.UpdateComment":
		*e = UpdateCommentXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommentXAmzTargetEnum: %s", s)
	}
}

type UpdateCommentHeaders struct {
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        UpdateCommentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateCommentRequest struct {
	Headers UpdateCommentHeaders
	Request shared.UpdateCommentInput `request:"mediaType=application/json"`
}

type UpdateCommentResponse struct {
	// CommentContentRequiredException
	CommentContentRequiredException interface{}
	// CommentContentSizeLimitExceededException
	CommentContentSizeLimitExceededException interface{}
	// CommentDeletedException
	CommentDeletedException interface{}
	// CommentDoesNotExistException
	CommentDoesNotExistException interface{}
	// CommentIdRequiredException
	CommentIDRequiredException interface{}
	// CommentNotCreatedByCallerException
	CommentNotCreatedByCallerException interface{}
	ContentType                        string
	// InvalidCommentIdException
	InvalidCommentIDException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	UpdateCommentOutput *shared.UpdateCommentOutput
}
