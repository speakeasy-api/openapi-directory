// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateStandardsControlPathParams struct {
	// The ARN of the security standard control to enable or disable.
	StandardsControlArn string `pathParam:"style=simple,explode=false,name=StandardsControlArn"`
}

type UpdateStandardsControlHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateStandardsControlRequestBodyControlStatusEnum - The updated status of the security standard control.
type UpdateStandardsControlRequestBodyControlStatusEnum string

const (
	UpdateStandardsControlRequestBodyControlStatusEnumEnabled  UpdateStandardsControlRequestBodyControlStatusEnum = "ENABLED"
	UpdateStandardsControlRequestBodyControlStatusEnumDisabled UpdateStandardsControlRequestBodyControlStatusEnum = "DISABLED"
)

func (e *UpdateStandardsControlRequestBodyControlStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = UpdateStandardsControlRequestBodyControlStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStandardsControlRequestBodyControlStatusEnum: %s", s)
	}
}

type UpdateStandardsControlRequestBody struct {
	// The updated status of the security standard control.
	ControlStatus *UpdateStandardsControlRequestBodyControlStatusEnum `json:"ControlStatus,omitempty"`
	// A description of the reason why you are disabling a security standard control. If you are disabling a control, then this is required.
	DisabledReason *string `json:"DisabledReason,omitempty"`
}

type UpdateStandardsControlRequest struct {
	PathParams UpdateStandardsControlPathParams
	Headers    UpdateStandardsControlHeaders
	Request    UpdateStandardsControlRequestBody `request:"mediaType=application/json"`
}

type UpdateStandardsControlResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// InvalidAccessException
	InvalidAccessException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateStandardsControlResponse map[string]interface{}
}
