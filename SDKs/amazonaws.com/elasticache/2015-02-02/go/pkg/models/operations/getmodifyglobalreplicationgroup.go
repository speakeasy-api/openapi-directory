// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyGlobalReplicationGroupActionEnum
type GETModifyGlobalReplicationGroupActionEnum string

const (
	GETModifyGlobalReplicationGroupActionEnumModifyGlobalReplicationGroup GETModifyGlobalReplicationGroupActionEnum = "ModifyGlobalReplicationGroup"
)

func (e *GETModifyGlobalReplicationGroupActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyGlobalReplicationGroup":
		*e = GETModifyGlobalReplicationGroupActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyGlobalReplicationGroupActionEnum: %s", s)
	}
}

// GETModifyGlobalReplicationGroupVersionEnum
type GETModifyGlobalReplicationGroupVersionEnum string

const (
	GETModifyGlobalReplicationGroupVersionEnumTwoThousandAndFifteen0202 GETModifyGlobalReplicationGroupVersionEnum = "2015-02-02"
)

func (e *GETModifyGlobalReplicationGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = GETModifyGlobalReplicationGroupVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyGlobalReplicationGroupVersionEnum: %s", s)
	}
}

type GETModifyGlobalReplicationGroupRequest struct {
	Action GETModifyGlobalReplicationGroupActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.
	ApplyImmediately bool `queryParam:"style=form,explode=true,name=ApplyImmediately"`
	// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.
	AutomaticFailoverEnabled *bool `queryParam:"style=form,explode=true,name=AutomaticFailoverEnabled"`
	// A valid cache node type that you want to scale this Global datastore to.
	CacheNodeType *string `queryParam:"style=form,explode=true,name=CacheNodeType"`
	// The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.
	CacheParameterGroupName *string `queryParam:"style=form,explode=true,name=CacheParameterGroupName"`
	// The upgraded version of the cache engine to be run on the clusters in the Global datastore.
	EngineVersion *string `queryParam:"style=form,explode=true,name=EngineVersion"`
	// A description of the Global datastore
	GlobalReplicationGroupDescription *string `queryParam:"style=form,explode=true,name=GlobalReplicationGroupDescription"`
	// The name of the Global datastore
	GlobalReplicationGroupID string                                     `queryParam:"style=form,explode=true,name=GlobalReplicationGroupId"`
	Version                  GETModifyGlobalReplicationGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm            *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyGlobalReplicationGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
