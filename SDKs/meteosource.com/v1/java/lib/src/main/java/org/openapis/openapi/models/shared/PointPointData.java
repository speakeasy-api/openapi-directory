/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PointPointData - Successful Response
 */
public class PointPointData {
    @JsonProperty("alerts")
    public PointPointAlerts alerts;
    public PointPointData withAlerts(PointPointAlerts alerts) {
        this.alerts = alerts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    public PointPointCurrentData current;
    public PointPointData withCurrent(PointPointCurrentData current) {
        this.current = current;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daily")
    public PointPointDaily daily;
    public PointPointData withDaily(PointPointDaily daily) {
        this.daily = daily;
        return this;
    }
    
    /**
     * Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
     */
    @JsonProperty("elevation")
    public Long elevation;
    public PointPointData withElevation(Long elevation) {
        this.elevation = elevation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly")
    public PointPointHourly hourly;
    public PointPointData withHourly(PointPointHourly hourly) {
        this.hourly = hourly;
        return this;
    }
    
    /**
     * Latitude of the point, always in the format &lt;float&gt;&lt;N/S&gt;, for example ``23.5S``
     */
    @JsonProperty("lat")
    public String lat;
    public PointPointData withLat(String lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * Longitude of the point, always in the format &lt;float&gt;&lt;E/W&gt;, for example ``23.5W``
     */
    @JsonProperty("lon")
    public String lon;
    public PointPointData withLon(String lon) {
        this.lon = lon;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minutely")
    public PointPointMinutely minutely;
    public PointPointData withMinutely(PointPointMinutely minutely) {
        this.minutely = minutely;
        return this;
    }
    
    /**
     * Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public PointPointData withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Unit system (metric, uk, ca or us)
     */
    @JsonProperty("units")
    public String units;
    public PointPointData withUnits(String units) {
        this.units = units;
        return this;
    }
    
}
