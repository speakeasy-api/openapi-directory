// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventAdditionalEventTypesEnum string

const (
	EventAdditionalEventTypesEnumComment          EventAdditionalEventTypesEnum = "comment"
	EventAdditionalEventTypesEnumCreate           EventAdditionalEventTypesEnum = "create"
	EventAdditionalEventTypesEnumEdit             EventAdditionalEventTypesEnum = "edit"
	EventAdditionalEventTypesEnumEmptyTrash       EventAdditionalEventTypesEnum = "emptyTrash"
	EventAdditionalEventTypesEnumMove             EventAdditionalEventTypesEnum = "move"
	EventAdditionalEventTypesEnumPermissionChange EventAdditionalEventTypesEnum = "permissionChange"
	EventAdditionalEventTypesEnumRename           EventAdditionalEventTypesEnum = "rename"
	EventAdditionalEventTypesEnumTrash            EventAdditionalEventTypesEnum = "trash"
	EventAdditionalEventTypesEnumUnknown          EventAdditionalEventTypesEnum = "unknown"
	EventAdditionalEventTypesEnumUntrash          EventAdditionalEventTypesEnum = "untrash"
	EventAdditionalEventTypesEnumUpload           EventAdditionalEventTypesEnum = "upload"
)

func (e *EventAdditionalEventTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "comment":
		fallthrough
	case "create":
		fallthrough
	case "edit":
		fallthrough
	case "emptyTrash":
		fallthrough
	case "move":
		fallthrough
	case "permissionChange":
		fallthrough
	case "rename":
		fallthrough
	case "trash":
		fallthrough
	case "unknown":
		fallthrough
	case "untrash":
		fallthrough
	case "upload":
		*e = EventAdditionalEventTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventAdditionalEventTypesEnum: %s", s)
	}
}

// EventPrimaryEventTypeEnum - The main type of event that occurred.
type EventPrimaryEventTypeEnum string

const (
	EventPrimaryEventTypeEnumComment          EventPrimaryEventTypeEnum = "comment"
	EventPrimaryEventTypeEnumCreate           EventPrimaryEventTypeEnum = "create"
	EventPrimaryEventTypeEnumEdit             EventPrimaryEventTypeEnum = "edit"
	EventPrimaryEventTypeEnumEmptyTrash       EventPrimaryEventTypeEnum = "emptyTrash"
	EventPrimaryEventTypeEnumMove             EventPrimaryEventTypeEnum = "move"
	EventPrimaryEventTypeEnumPermissionChange EventPrimaryEventTypeEnum = "permissionChange"
	EventPrimaryEventTypeEnumRename           EventPrimaryEventTypeEnum = "rename"
	EventPrimaryEventTypeEnumTrash            EventPrimaryEventTypeEnum = "trash"
	EventPrimaryEventTypeEnumUnknown          EventPrimaryEventTypeEnum = "unknown"
	EventPrimaryEventTypeEnumUntrash          EventPrimaryEventTypeEnum = "untrash"
	EventPrimaryEventTypeEnumUpload           EventPrimaryEventTypeEnum = "upload"
)

func (e *EventPrimaryEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "comment":
		fallthrough
	case "create":
		fallthrough
	case "edit":
		fallthrough
	case "emptyTrash":
		fallthrough
	case "move":
		fallthrough
	case "permissionChange":
		fallthrough
	case "rename":
		fallthrough
	case "trash":
		fallthrough
	case "unknown":
		fallthrough
	case "untrash":
		fallthrough
	case "upload":
		*e = EventPrimaryEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventPrimaryEventTypeEnum: %s", s)
	}
}

// Event - Represents the changes associated with an action taken by a user.
type Event struct {
	// Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
	AdditionalEventTypes []EventAdditionalEventTypesEnum `json:"additionalEventTypes,omitempty"`
	// The time at which the event occurred formatted as Unix time in milliseconds.
	EventTimeMillis *string `json:"eventTimeMillis,omitempty"`
	// Whether this event is caused by a user being deleted.
	FromUserDeletion *bool `json:"fromUserDeletion,omitempty"`
	// Contains information about changes in an object's parents as a result of a move type event.
	Move *Move `json:"move,omitempty"`
	// Extra information for permissionChange type events, such as the user or group the new permission applies to.
	PermissionChanges []PermissionChange `json:"permissionChanges,omitempty"`
	// The main type of event that occurred.
	PrimaryEventType *EventPrimaryEventTypeEnum `json:"primaryEventType,omitempty"`
	// Contains information about a renametype event.
	Rename *Rename `json:"rename,omitempty"`
	// Information about the object modified by the event.
	Target *Target `json:"target,omitempty"`
	// A representation of a user.
	User *User `json:"user,omitempty"`
}
