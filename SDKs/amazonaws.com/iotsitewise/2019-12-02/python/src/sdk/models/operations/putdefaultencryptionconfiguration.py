"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import putdefaultencryptionconfigurationresponse as shared_putdefaultencryptionconfigurationresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum(str, Enum):
    r"""The type of encryption used for the encryption configuration."""
    SITEWISE_DEFAULT_ENCRYPTION = 'SITEWISE_DEFAULT_ENCRYPTION'
    KMS_BASED_ENCRYPTION = 'KMS_BASED_ENCRYPTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutDefaultEncryptionConfigurationRequestBody:
    
    encryption_type: PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionType') }})
    r"""The type of encryption used for the encryption configuration."""  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyId'), 'exclude': lambda f: f is None }})
    r"""The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>."""  
    

@dataclasses.dataclass
class PutDefaultEncryptionConfigurationRequest:
    
    request_body: PutDefaultEncryptionConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutDefaultEncryptionConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflicting_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictingOperationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    put_default_encryption_configuration_response: Optional[shared_putdefaultencryptionconfigurationresponse.PutDefaultEncryptionConfigurationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    