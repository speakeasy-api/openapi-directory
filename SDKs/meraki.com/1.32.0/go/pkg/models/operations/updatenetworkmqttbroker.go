// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// UpdateNetworkMqttBrokerRequestBodySecuritySecurity - TLS settings of the MQTT broker.
type UpdateNetworkMqttBrokerRequestBodySecuritySecurity struct {
	// CA Certificate of the MQTT broker.
	CaCertificate *string `json:"caCertificate,omitempty"`
	// Whether the TLS hostname verification is enabled for the MQTT broker.
	VerifyHostnames *bool `json:"verifyHostnames,omitempty"`
}

// UpdateNetworkMqttBrokerRequestBodySecurity - Security settings of the MQTT broker.
type UpdateNetworkMqttBrokerRequestBodySecurity struct {
	// Security protocol of the MQTT broker.
	Mode *string `json:"mode,omitempty"`
	// TLS settings of the MQTT broker.
	Security *UpdateNetworkMqttBrokerRequestBodySecuritySecurity `json:"security,omitempty"`
}

type UpdateNetworkMqttBrokerRequestBody struct {
	// Authentication settings of the MQTT broker
	Authentication map[string]interface{} `json:"authentication,omitempty"`
	// Host name/IP address where the MQTT broker runs.
	Host *string `json:"host,omitempty"`
	// Name of the MQTT broker.
	Name *string `json:"name,omitempty"`
	// Host port though which the MQTT broker can be reached.
	Port *int64 `json:"port,omitempty"`
	// Security settings of the MQTT broker.
	Security *UpdateNetworkMqttBrokerRequestBodySecurity `json:"security,omitempty"`
}

type UpdateNetworkMqttBrokerRequest struct {
	RequestBody  *UpdateNetworkMqttBrokerRequestBody `request:"mediaType=application/json"`
	MqttBrokerID string                              `pathParam:"style=simple,explode=false,name=mqttBrokerId"`
	NetworkID    string                              `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkMqttBrokerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkMqttBroker200ApplicationJSONObject map[string]interface{}
}
