/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ScanRun - A ScanRun is a output-only resource representing an actual run of the scan.
 */
public class ScanRun {
    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;

    public ScanRun withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The execution state of the ScanRun.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionState")
    public ScanRunExecutionStateEnum executionState;

    public ScanRun withExecutionState(ScanRunExecutionStateEnum executionState) {
        this.executionState = executionState;
        return this;
    }
    
    /**
     * Whether the scan run has found any vulnerabilities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasVulnerabilities")
    public Boolean hasVulnerabilities;

    public ScanRun withHasVulnerabilities(Boolean hasVulnerabilities) {
        this.hasVulnerabilities = hasVulnerabilities;
        return this;
    }
    
    /**
     * The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ScanRun withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progressPercent")
    public Integer progressPercent;

    public ScanRun withProgressPercent(Integer progressPercent) {
        this.progressPercent = progressPercent;
        return this;
    }
    
    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultState")
    public ScanRunResultStateEnum resultState;

    public ScanRun withResultState(ScanRunResultStateEnum resultState) {
        this.resultState = resultState;
        return this;
    }
    
    /**
     * The time at which the ScanRun started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;

    public ScanRun withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlsCrawledCount")
    public String urlsCrawledCount;

    public ScanRun withUrlsCrawledCount(String urlsCrawledCount) {
        this.urlsCrawledCount = urlsCrawledCount;
        return this;
    }
    
    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlsTestedCount")
    public String urlsTestedCount;

    public ScanRun withUrlsTestedCount(String urlsTestedCount) {
        this.urlsTestedCount = urlsTestedCount;
        return this;
    }
    
    public ScanRun(){}
}
