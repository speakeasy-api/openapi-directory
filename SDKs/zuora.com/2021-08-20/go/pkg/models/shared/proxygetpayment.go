// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// ProxyGetPaymentGatewayStateEnum - The status of the payment in the gateway; use for reconciliation.
type ProxyGetPaymentGatewayStateEnum string

const (
	ProxyGetPaymentGatewayStateEnumMarkedForSubmission ProxyGetPaymentGatewayStateEnum = "MarkedForSubmission"
	ProxyGetPaymentGatewayStateEnumSubmitted           ProxyGetPaymentGatewayStateEnum = "Submitted"
	ProxyGetPaymentGatewayStateEnumSettled             ProxyGetPaymentGatewayStateEnum = "Settled"
	ProxyGetPaymentGatewayStateEnumNotSubmitted        ProxyGetPaymentGatewayStateEnum = "NotSubmitted"
	ProxyGetPaymentGatewayStateEnumFailedToSettle      ProxyGetPaymentGatewayStateEnum = "FailedToSettle"
)

func (e *ProxyGetPaymentGatewayStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarkedForSubmission":
		fallthrough
	case "Submitted":
		fallthrough
	case "Settled":
		fallthrough
	case "NotSubmitted":
		fallthrough
	case "FailedToSettle":
		*e = ProxyGetPaymentGatewayStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyGetPaymentGatewayStateEnum: %s", s)
	}
}

// ProxyGetPaymentSourceEnum - How the payment was created, whether through the API, manually, import, or payment run.
type ProxyGetPaymentSourceEnum string

const (
	ProxyGetPaymentSourceEnumPaymentRun ProxyGetPaymentSourceEnum = "PaymentRun"
	ProxyGetPaymentSourceEnumImport     ProxyGetPaymentSourceEnum = "Import"
	ProxyGetPaymentSourceEnumManually   ProxyGetPaymentSourceEnum = "Manually"
	ProxyGetPaymentSourceEnumAPI        ProxyGetPaymentSourceEnum = "API"
)

func (e *ProxyGetPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PaymentRun":
		fallthrough
	case "Import":
		fallthrough
	case "Manually":
		fallthrough
	case "API":
		*e = ProxyGetPaymentSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyGetPaymentSourceEnum: %s", s)
	}
}

// ProxyGetPaymentStatusEnum - The status of the payment in Zuora. The value depends on the type of payments.
//
// - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
// - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
type ProxyGetPaymentStatusEnum string

const (
	ProxyGetPaymentStatusEnumProcessed ProxyGetPaymentStatusEnum = "Processed"
	ProxyGetPaymentStatusEnumError     ProxyGetPaymentStatusEnum = "Error"
	ProxyGetPaymentStatusEnumVoided    ProxyGetPaymentStatusEnum = "Voided"
	ProxyGetPaymentStatusEnumCanceled  ProxyGetPaymentStatusEnum = "Canceled"
)

func (e *ProxyGetPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processed":
		fallthrough
	case "Error":
		fallthrough
	case "Voided":
		fallthrough
	case "Canceled":
		*e = ProxyGetPaymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyGetPaymentStatusEnum: %s", s)
	}
}

// ProxyGetPaymentTransferredToAccountingEnum - Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type ProxyGetPaymentTransferredToAccountingEnum string

const (
	ProxyGetPaymentTransferredToAccountingEnumProcessing ProxyGetPaymentTransferredToAccountingEnum = "Processing"
	ProxyGetPaymentTransferredToAccountingEnumYes        ProxyGetPaymentTransferredToAccountingEnum = "Yes"
	ProxyGetPaymentTransferredToAccountingEnumError      ProxyGetPaymentTransferredToAccountingEnum = "Error"
	ProxyGetPaymentTransferredToAccountingEnumIgnore     ProxyGetPaymentTransferredToAccountingEnum = "Ignore"
)

func (e *ProxyGetPaymentTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = ProxyGetPaymentTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyGetPaymentTransferredToAccountingEnum: %s", s)
	}
}

// ProxyGetPaymentTypeEnum - The type of the payment, whether the payment is external or electronic.
type ProxyGetPaymentTypeEnum string

const (
	ProxyGetPaymentTypeEnumExternal   ProxyGetPaymentTypeEnum = "External"
	ProxyGetPaymentTypeEnumElectronic ProxyGetPaymentTypeEnum = "Electronic"
)

func (e *ProxyGetPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = ProxyGetPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyGetPaymentTypeEnum: %s", s)
	}
}

// ProxyGetPayment - Container for custom fields of a Payment object.
type ProxyGetPayment struct {
	// The unique account ID for the customer that the payment is for.
	//
	AccountID *string `json:"AccountId,omitempty"`
	// The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.
	//
	AccountingCode *string `json:"AccountingCode,omitempty"`
	// The amount of the payment.
	//
	Amount *float64 `json:"Amount,omitempty"`
	// The applied amount of the payment.
	//
	// **Note**: This field is only available if you have the Invoice Settlement feature enabled.
	//
	AppliedAmount *float64 `json:"AppliedAmount,omitempty"`
	// If you have the Invoice Settlement feature disabled, the value of this field is the amount of the payment to apply to a credit balance.
	//
	// If you have the Invoice Settlement feature enabled, the value of this field returned in the response is `0` for the payments that are created after the enablement.
	//
	AppliedCreditBalanceAmount *float64 `json:"AppliedCreditBalanceAmount,omitempty"`
	// The authorization transaction ID from the payment gateway.
	//
	AuthTransactionID *string `json:"AuthTransactionId,omitempty"`
	// The first six digits of the credit card or debit card used for the payment, when applicable.
	//
	BankIdentificationNumber *string `json:"BankIdentificationNumber,omitempty"`
	// The date and time when the payment was canceled.
	//
	CancelledOn *time.Time `json:"CancelledOn,omitempty"`
	// Additional information related to the payment.
	//
	Comment *string `json:"Comment,omitempty"`
	// The ID of the Zuora user who created the payment.
	//
	CreatedByID *string `json:"CreatedById,omitempty"`
	// The date and time when the payment was created.
	//
	CreatedDate *time.Time `json:"CreatedDate,omitempty"`
	// The date when the payment takes effect.
	//
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// The name of the gateway instance that processes the payment.
	//
	Gateway *string `json:"Gateway,omitempty"`
	// A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
	//
	GatewayOrderID *string `json:"GatewayOrderId,omitempty"`
	// The message returned from the payment gateway for the payment. This message is gateway-dependent.
	//
	GatewayResponse *string `json:"GatewayResponse,omitempty"`
	// The code returned from the payment gateway for the payment. This code is gateway-dependent.
	//
	GatewayResponseCode *string `json:"GatewayResponseCode,omitempty"`
	// The status of the payment in the gateway; use for reconciliation.
	//
	GatewayState *ProxyGetPaymentGatewayStateEnum `json:"GatewayState,omitempty"`
	// The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.
	//
	ID *string `json:"Id,omitempty"`
	// ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationIDNS *string `json:"IntegrationId__NS,omitempty"`
	// Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationStatusNS *string `json:"IntegrationStatus__NS,omitempty"`
	// The date and time when a payment was marked and waiting for batch submission to the payment process.
	//
	MarkedForSubmissionOn *time.Time `json:"MarkedForSubmissionOn,omitempty"`
	// Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	OriginNS *string `json:"Origin__NS,omitempty"`
	// The ID of the payment method used for the payment.
	//
	PaymentMethodID *string `json:"PaymentMethodId,omitempty"`
	// The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.
	//
	PaymentMethodSnapshotID *string `json:"PaymentMethodSnapshotId,omitempty"`
	// The unique identification number of the payment. For example, P-00000028.
	//
	PaymentNumber *string `json:"PaymentNumber,omitempty"`
	// The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"ReferenceId,omitempty"`
	// The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.
	//
	RefundAmount *float64 `json:"RefundAmount,omitempty"`
	// The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
	//
	SecondPaymentReferenceID *string `json:"SecondPaymentReferenceId,omitempty"`
	// The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.
	//
	SettledOn *time.Time `json:"SettledOn,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptor *string `json:"SoftDescriptor,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptorPhone *string `json:"SoftDescriptorPhone,omitempty"`
	// How the payment was created, whether through the API, manually, import, or payment run.
	//
	Source *ProxyGetPaymentSourceEnum `json:"Source,omitempty"`
	// The name of the source. The value is a Payment Run number or a file name.
	//
	SourceName *string `json:"SourceName,omitempty"`
	// The status of the payment in Zuora. The value depends on the type of payments.
	//
	// - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
	// - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
	//
	Status *ProxyGetPaymentStatusEnum `json:"Status,omitempty"`
	// The date and time when the payment was submitted.
	//
	SubmittedOn *time.Time `json:"SubmittedOn,omitempty"`
	// Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SyncDateNS *string `json:"SyncDate__NS,omitempty"`
	// Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	TransactionNS *string `json:"Transaction__NS,omitempty"`
	// Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *ProxyGetPaymentTransferredToAccountingEnum `json:"TransferredToAccounting,omitempty"`
	// The type of the payment, whether the payment is external or electronic.
	//
	Type *ProxyGetPaymentTypeEnum `json:"Type,omitempty"`
	// The unapplied amount of the payment.
	//
	// **Note**: This field is only available if you have the Invoice Settlement feature enabled.
	//
	UnappliedAmount *float64 `json:"UnappliedAmount,omitempty"`
	// The ID of the Zuora user who last updated the payment.
	//
	UpdatedByID *string `json:"UpdatedById,omitempty"`
	// The date and time when the payment was last updated.
	//
	UpdatedDate *time.Time `json:"UpdatedDate,omitempty"`
}
