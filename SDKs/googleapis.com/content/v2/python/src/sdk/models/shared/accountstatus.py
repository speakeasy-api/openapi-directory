"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountstatusaccountlevelissue as shared_accountstatusaccountlevelissue
from ..shared import accountstatusdataqualityissue as shared_accountstatusdataqualityissue
from ..shared import accountstatusproducts as shared_accountstatusproducts
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountStatus:
    r"""The status of an account, i.e., information about its products, which is computed offline and not returned immediately at insertion time."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the account for which the status is reported."""  
    account_level_issues: Optional[list[shared_accountstatusaccountlevelissue.AccountStatusAccountLevelIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountLevelIssues'), 'exclude': lambda f: f is None }})
    r"""A list of account level issues."""  
    data_quality_issues: Optional[list[shared_accountstatusdataqualityissue.AccountStatusDataQualityIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataQualityIssues'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED - never populated."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#accountStatus`\\" """  
    products: Optional[list[shared_accountstatusproducts.AccountStatusProducts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes."""  
    website_claimed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteClaimed'), 'exclude': lambda f: f is None }})
    r"""Whether the account's website is claimed or not."""  
    