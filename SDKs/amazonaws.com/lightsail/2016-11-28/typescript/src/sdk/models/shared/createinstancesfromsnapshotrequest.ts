/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AddOnRequest } from "./addonrequest";
import { DiskMap } from "./diskmap";
import { IpAddressTypeEnum } from "./ipaddresstypeenum";
import { Tag } from "./tag";
import { Expose, Transform, Type } from "class-transformer";

export class CreateInstancesFromSnapshotRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AddOnRequest })
  @Expose({ name: "addOns" })
  @Type(() => AddOnRequest)
  addOns?: AddOnRequest[];

  @SpeakeasyMetadata({ elemType: DiskMap, elemDepth: 2 })
  @Expose({ name: "attachedDiskMapping" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DiskMap[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DiskMap);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  attachedDiskMapping?: Record<string, DiskMap[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "availabilityZone" })
  availabilityZone: string;

  @SpeakeasyMetadata()
  @Expose({ name: "bundleId" })
  bundleId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "instanceNames" })
  instanceNames: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "instanceSnapshotName" })
  instanceSnapshotName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ipAddressType" })
  ipAddressType?: IpAddressTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "keyPairName" })
  keyPairName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "restoreDate" })
  restoreDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceInstanceName" })
  sourceInstanceName?: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata()
  @Expose({ name: "useLatestRestorableAutoSnapshot" })
  useLatestRestorableAutoSnapshot?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "userData" })
  userData?: string;
}
