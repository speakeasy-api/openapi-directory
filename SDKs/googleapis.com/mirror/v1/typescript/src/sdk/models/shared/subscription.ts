/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Notification } from "./notification";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A subscription to events on a collection.
 */
export class Subscription extends SpeakeasyBase {
  /**
   * The URL where notifications should be delivered (must start with https://).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callbackUrl" })
  callbackUrl?: string;

  /**
   * The collection to subscribe to. Allowed values are:
   *
   * @remarks
   * - timeline - Changes in the timeline including insertion, deletion, and updates.
   * - locations - Location updates.
   * - settings - Settings updates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collection" })
  collection?: string;

  /**
   * The ID of the subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The type of resource. This is always mirror#subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * A notification delivered by the API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notification" })
  @Type(() => Notification)
  notification?: Notification;

  /**
   * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:
   *
   * @remarks
   * - UPDATE - The item has been updated.
   * - INSERT - A new item has been inserted.
   * - DELETE - The item has been deleted.
   * - MENU_ACTION - A custom menu item has been triggered by the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operation" })
  operation?: string[];

  /**
   * The time at which this subscription was last modified, formatted according to RFC 3339.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;

  /**
   * An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userToken" })
  userToken?: string;

  /**
   * A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verifyToken" })
  verifyToken?: string;
}
