"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountBalances:
    r"""The Account's balances in the minor unit of its currency. For dollars, for example, these values will represent cents."""
    
    available_balance: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_balance') }})
    r"""The Account's available balance, representing the current balance less any open Pending Transactions on the Account."""  
    current_balance: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance') }})
    r"""The Account's current balance, representing the sum of all posted Transactions on the Account."""  
    
class AccountCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class AccountStatusEnum(str, Enum):
    r"""The status of the Account."""
    OPEN = 'open'
    CLOSED = 'closed'

class AccountTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `account`."""
    ACCOUNT = 'account'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance."""
    
    balances: AccountBalances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balances') }})
    r"""The Account's balances in the minor unit of its currency. For dollars, for example, these values will represent cents."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created."""  
    currency: AccountCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency."""  
    entity_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_id') }})
    r"""The identifier for the Entity the Account belongs to."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The Account identifier."""  
    informational_entity_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('informational_entity_id') }})
    r"""The identifier of an Entity that, while not owning the Account, is associated with its activity."""  
    interest_accrued: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interest_accrued') }})
    r"""The interest accrued but not yet paid, expressed as a string containing a floating-point value."""  
    interest_accrued_at: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interest_accrued_at'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name you choose for the Account."""  
    status: AccountStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the Account."""  
    type: AccountTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `account`."""  
    