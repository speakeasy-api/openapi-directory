/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AutoMLDataSplitConfig } from "./automldatasplitconfig";
import { AutoMLJobChannel } from "./automljobchannel";
import { AutoMLJobObjective } from "./automljobobjective";
import { AutoMLOutputDataConfig } from "./automloutputdataconfig";
import { AutoMLProblemTypeConfig } from "./automlproblemtypeconfig";
import { AutoMLSecurityConfig } from "./automlsecurityconfig";
import { ModelDeployConfig } from "./modeldeployconfig";
import { Tag } from "./tag";
import { Expose, Type } from "class-transformer";

export class CreateAutoMLJobV2Request extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AutoMLJobChannel })
  @Expose({ name: "AutoMLJobInputDataConfig" })
  @Type(() => AutoMLJobChannel)
  autoMLJobInputDataConfig: AutoMLJobChannel[];

  @SpeakeasyMetadata()
  @Expose({ name: "AutoMLJobName" })
  autoMLJobName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AutoMLJobObjective" })
  @Type(() => AutoMLJobObjective)
  autoMLJobObjective?: AutoMLJobObjective;

  @SpeakeasyMetadata()
  @Expose({ name: "AutoMLProblemTypeConfig" })
  @Type(() => AutoMLProblemTypeConfig)
  autoMLProblemTypeConfig: AutoMLProblemTypeConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "DataSplitConfig" })
  @Type(() => AutoMLDataSplitConfig)
  dataSplitConfig?: AutoMLDataSplitConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "ModelDeployConfig" })
  @Type(() => ModelDeployConfig)
  modelDeployConfig?: ModelDeployConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputDataConfig" })
  @Type(() => AutoMLOutputDataConfig)
  outputDataConfig: AutoMLOutputDataConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SecurityConfig" })
  @Type(() => AutoMLSecurityConfig)
  securityConfig?: AutoMLSecurityConfig;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
