"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accessendpoint as shared_accessendpoint
from ..shared import applicationsettingsresponse as shared_applicationsettingsresponse
from ..shared import stackerror as shared_stackerror
from ..shared import storageconnector as shared_storageconnector
from ..shared import streamingexperiencesettings as shared_streamingexperiencesettings
from ..shared import usersetting as shared_usersetting
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Stack:
    r"""Describes a stack."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    access_endpoints: Optional[list[shared_accessendpoint.AccessEndpoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessEndpoints'), 'exclude': lambda f: f is None }})  
    application_settings: Optional[shared_applicationsettingsresponse.ApplicationSettingsResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationSettings'), 'exclude': lambda f: f is None }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn'), 'exclude': lambda f: f is None }})  
    created_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayName'), 'exclude': lambda f: f is None }})  
    embed_host_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmbedHostDomains'), 'exclude': lambda f: f is None }})  
    feedback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeedbackURL'), 'exclude': lambda f: f is None }})  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectURL'), 'exclude': lambda f: f is None }})  
    stack_errors: Optional[list[shared_stackerror.StackError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackErrors'), 'exclude': lambda f: f is None }})  
    storage_connectors: Optional[list[shared_storageconnector.StorageConnector]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageConnectors'), 'exclude': lambda f: f is None }})  
    streaming_experience_settings: Optional[shared_streamingexperiencesettings.StreamingExperienceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamingExperienceSettings'), 'exclude': lambda f: f is None }})  
    user_settings: Optional[list[shared_usersetting.UserSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserSettings'), 'exclude': lambda f: f is None }})  
    