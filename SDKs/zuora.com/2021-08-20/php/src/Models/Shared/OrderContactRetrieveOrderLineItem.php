<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderContactRetrieveOrderLineItem - A new account created as the sold-to contact of the Order Line Item (OLI). 
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderContactRetrieveOrderLineItem
{
    /**
     * First line of the contact's address. This is often a street address or a business name.
     * 
     * 
     * 
     * @var ?string $address1
     */
	#[\JMS\Serializer\Annotation\SerializedName('address1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $address1 = null;
    
    /**
     * Second line of the contact's address.
     * 
     * 
     * 
     * @var ?string $address2
     */
	#[\JMS\Serializer\Annotation\SerializedName('address2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $address2 = null;
    
    /**
     * City of the contact's address.
     * 
     * 
     * 
     * @var ?string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $city = null;
    
    /**
     * Country; must be a valid country name or abbreviation. If using [Zuora Tax](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax), you must specify a country in the bill-to contact to calculate tax.
     * 
     * 
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
    /**
     * County of the contact's address.
     * 
     * 
     * 
     * @var ?string $county
     */
	#[\JMS\Serializer\Annotation\SerializedName('county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $county = null;
    
    /**
     * First name of the contact.
     * 
     * 
     * 
     * @var ?string $firstName
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $firstName = null;
    
    /**
     * Last name of the contact.
     * 
     * 
     * 
     * @var ?string $lastName
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastName = null;
    
    /**
     * ZIP code or other postal code of the contact's address.
     * 
     * 
     * 
     * @var ?string $postalCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('postalCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $postalCode = null;
    
    /**
     * State or province of the contact's address.
     * 
     * 
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
	public function __construct()
	{
		$this->address1 = null;
		$this->address2 = null;
		$this->city = null;
		$this->country = null;
		$this->county = null;
		$this->firstName = null;
		$this->lastName = null;
		$this->postalCode = null;
		$this->state = null;
	}
}
