<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class HealthChecks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListResponse
     */
	public function computeHealthChecksAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/healthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->healthChecksAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HealthChecksAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified HealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteResponse
     */
	public function computeHealthChecksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks/{healthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified HealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetResponse
     */
	public function computeHealthChecksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks/{healthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->healthCheck = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HealthCheck', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a HealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertResponse
     */
	public function computeHealthChecksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "healthCheck", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of HealthCheck resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListResponse
     */
	public function computeHealthChecksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->healthCheckList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HealthCheckList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchResponse
     */
	public function computeHealthChecksPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks/{healthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "healthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsResponse
     */
	public function computeHealthChecksTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateResponse
     */
	public function computeHealthChecksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/healthChecks/{healthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "healthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHealthChecksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}