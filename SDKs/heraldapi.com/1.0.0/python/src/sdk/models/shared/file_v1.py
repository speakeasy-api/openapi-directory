"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class FileV1FormatEnum(str, Enum):
    r"""The format of the file returned (e.g., csv, pdf, jpg, or png)."""
    PDF = 'pdf'
    CSV = 'csv'
    JPG = 'jpg'
    PNG = 'png'

class FileV1StatusEnum(str, Enum):
    r"""The status of the file. If the status is `deleted`, you can no longer get a link to access the contents of the file using `/files/{file_id}/temporary_link`."""
    AVAILABLE = 'available'
    DELETED = 'deleted'

class FileV1TypeEnum(str, Enum):
    r"""The type of file defined by Herald to distinguish between multiple files, such as `quote_summary` or `policy_specimen`."""
    QUOTE_SUMMARY = 'quote_summary'
    POLICY_SPECIMEN = 'policy_specimen'
    CYBER_RISK_ASSEMENT = 'cyber_risk_assement'
    APPLICATION_SUMMARY = 'application_summary'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileV1:
    r"""Details for a specific file."""
    
    created_at: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the file was created."""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name'), 'exclude': lambda f: f is None }})
    r"""A filename for the file, can be used when saving a file to a filesystem."""  
    format: Optional[FileV1FormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""The format of the file returned (e.g., csv, pdf, jpg, or png)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""id for a specific file."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The size of the file contents in bytes."""  
    status: Optional[FileV1StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the file. If the status is `deleted`, you can no longer get a link to access the contents of the file using `/files/{file_id}/temporary_link`."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Text for the file that can be shown on screen."""  
    type: Optional[FileV1TypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of file defined by Herald to distinguish between multiple files, such as `quote_summary` or `policy_specimen`."""  
    