// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HealthQuestionDefinitionResourceAttributesCategoryEnum - The category for the health profile definition
type HealthQuestionDefinitionResourceAttributesCategoryEnum string

const (
	HealthQuestionDefinitionResourceAttributesCategoryEnumLifestyleBehaviors HealthQuestionDefinitionResourceAttributesCategoryEnum = "lifestyle_behaviors"
	HealthQuestionDefinitionResourceAttributesCategoryEnumMentalWellbeing    HealthQuestionDefinitionResourceAttributesCategoryEnum = "mental_wellbeing"
	HealthQuestionDefinitionResourceAttributesCategoryEnumPreventativeCare   HealthQuestionDefinitionResourceAttributesCategoryEnum = "preventative_care"
)

func (e HealthQuestionDefinitionResourceAttributesCategoryEnum) ToPointer() *HealthQuestionDefinitionResourceAttributesCategoryEnum {
	return &e
}

func (e *HealthQuestionDefinitionResourceAttributesCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lifestyle_behaviors":
		fallthrough
	case "mental_wellbeing":
		fallthrough
	case "preventative_care":
		*e = HealthQuestionDefinitionResourceAttributesCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthQuestionDefinitionResourceAttributesCategoryEnum: %v", v)
	}
}

// HealthQuestionDefinitionResourceAttributesFormatData - The label, value and icon for the answer choices for the question
type HealthQuestionDefinitionResourceAttributesFormatData struct {
	Icon  *string `json:"icon,omitempty"`
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// HealthQuestionDefinitionResourceAttributesFormat - The list of formats for the health profile definition
type HealthQuestionDefinitionResourceAttributesFormat struct {
	Data []HealthQuestionDefinitionResourceAttributesFormatData `json:"data,omitempty"`
	Type *string                                                `json:"type,omitempty"`
}

// HealthQuestionDefinitionResourceAttributesRequirements - The age and gender requirement for the question to be included
type HealthQuestionDefinitionResourceAttributesRequirements struct {
	Property *string `json:"property,omitempty"`
	// Specifies if the value in property should be equal to the one in value
	ShouldBeEqual *bool `json:"shouldBeEqual,omitempty"`
	// Specifies if the value in property should be greater than the one in value
	ShouldBeGreaterThan *float64 `json:"shouldBeGreaterThan,omitempty"`
	// Specifies if the value in property should be less than the one in value
	ShouldBeLessThan *float64 `json:"shouldBeLessThan,omitempty"`
	// The value to be compared with the one in property, based on shouldBeEqual, shouldBeGreaterThan, or shouldBeLessThan
	Value *string `json:"value,omitempty"`
}

type HealthQuestionDefinitionResourceAttributes struct {
	// The category for the health profile definition
	Category *HealthQuestionDefinitionResourceAttributesCategoryEnum `json:"category,omitempty"`
	// The list of formats for the health profile definition
	Format *HealthQuestionDefinitionResourceAttributesFormat `json:"format,omitempty"`
	// The lsit of age and gender requirements for the question to be included
	Requirements []HealthQuestionDefinitionResourceAttributesRequirements `json:"requirements,omitempty"`
	// The question text which corresponds to the answer choices
	Text *string `json:"text,omitempty"`
}

type HealthQuestionDefinitionResourceLinks struct {
	Self string `json:"self"`
}

type HealthQuestionDefinitionResource struct {
	Attributes    *HealthQuestionDefinitionResourceAttributes `json:"attributes,omitempty"`
	ID            string                                      `json:"id"`
	Links         *HealthQuestionDefinitionResourceLinks      `json:"links,omitempty"`
	Relationships map[string]interface{}                      `json:"relationships,omitempty"`
	Type          string                                      `json:"type"`
}
