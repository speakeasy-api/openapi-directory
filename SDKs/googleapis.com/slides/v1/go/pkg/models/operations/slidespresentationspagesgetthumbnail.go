// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SlidesPresentationsPagesGetThumbnailSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SlidesPresentationsPagesGetThumbnailSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SlidesPresentationsPagesGetThumbnailSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SlidesPresentationsPagesGetThumbnailSecurityOption4 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SlidesPresentationsPagesGetThumbnailSecurityOption5 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SlidesPresentationsPagesGetThumbnailSecurity struct {
	Option1 *SlidesPresentationsPagesGetThumbnailSecurityOption1 `security:"option"`
	Option2 *SlidesPresentationsPagesGetThumbnailSecurityOption2 `security:"option"`
	Option3 *SlidesPresentationsPagesGetThumbnailSecurityOption3 `security:"option"`
	Option4 *SlidesPresentationsPagesGetThumbnailSecurityOption4 `security:"option"`
	Option5 *SlidesPresentationsPagesGetThumbnailSecurityOption5 `security:"option"`
}

// SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum - The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.
type SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum string

const (
	SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnumPng SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum = "PNG"
)

func (e SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum) ToPointer() *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum {
	return &e
}

func (e *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PNG":
		*e = SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum: %v", v)
	}
}

// SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum - The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.
type SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum string

const (
	SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnumThumbnailSizeUnspecified SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum = "THUMBNAIL_SIZE_UNSPECIFIED"
	SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnumLarge                    SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum = "LARGE"
	SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnumMedium                   SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum = "MEDIUM"
	SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnumSmall                    SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum = "SMALL"
)

func (e SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum) ToPointer() *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum {
	return &e
}

func (e *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "THUMBNAIL_SIZE_UNSPECIFIED":
		fallthrough
	case "LARGE":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "SMALL":
		*e = SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum: %v", v)
	}
}

type SlidesPresentationsPagesGetThumbnailRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The object ID of the page whose thumbnail to retrieve.
	PageObjectID string `pathParam:"style=simple,explode=false,name=pageObjectId"`
	// The ID of the presentation to retrieve.
	PresentationID string `pathParam:"style=simple,explode=false,name=presentationId"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.
	ThumbnailPropertiesMimeType *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesMimeTypeEnum `queryParam:"style=form,explode=true,name=thumbnailProperties.mimeType"`
	// The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.
	ThumbnailPropertiesThumbnailSize *SlidesPresentationsPagesGetThumbnailThumbnailPropertiesThumbnailSizeEnum `queryParam:"style=form,explode=true,name=thumbnailProperties.thumbnailSize"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type SlidesPresentationsPagesGetThumbnailResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response
	Thumbnail *shared.Thumbnail
}
