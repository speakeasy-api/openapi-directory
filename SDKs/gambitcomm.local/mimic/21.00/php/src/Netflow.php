<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Netflow 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change NETFLOW export attributes
     * 
     * Change attributes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrResponse
     */
	public function protocolNetflowChangeAttr(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/{flowset-uid}/{field-num}/{attr}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeAttrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowChangeAttr200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Change NETFLOW data export interval
     * 
     * Interval in msec .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsResponse
     */
	public function protocolNetflowChangeDfs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/dfs_interval/{interval}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeDfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowChangeDfs200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Change NETFLOW template export interval
     * 
     * Interval in msec .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsResponse
     */
	public function protocolNetflowChangeTfs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/tfs_interval/{interval}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowChangeTfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowChangeTfs200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's NETFLOW argument structure
     * 
     * Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsResponse
     */
	public function protocolNetflowGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolNetflowGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's NETFLOW configuration
     * 
     * Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigResponse
     */
	public function protocolNetflowGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configNETFLOW = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigNETFLOW', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's NETFLOW statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsResponse
     */
	public function protocolNetflowGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolNetflowGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the NETFLOW statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatsHdrResponse
     */
	public function protocolNetflowGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/netflow/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolNetflowGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's NETFLOW traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceResponse
     */
	public function protocolNetflowGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configNETFLOW = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigNETFLOW', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Halt NETFLOW traffic
     * 
     * Halt NETFLOW traffic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltResponse
     */
	public function protocolNetflowHalt(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/halt', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowHaltResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowHalt200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show list of NETFLOW exports
     * 
     * Show list of NETFLOW exports
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListResponse
     */
	public function protocolNetflowList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolNetflowList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Reload NETFLOW configuration before resuming traffic
     * 
     * Reload NETFLOW configuration before resuming traffic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadResponse
     */
	public function protocolNetflowReload(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/reload', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowReloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowReload200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Resuming traffic
     * 
     * Resuming traffic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeResponse
     */
	public function protocolNetflowResume(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/resume', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowResume200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Swap NETFLOW collector
     * 
     * Allow changing collector without stopping agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorResponse
     */
	public function protocolNetflowSetCollector(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/set/collector/{collectorIP}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetCollectorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowSetCollector200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's NETFLOW configuration
     * 
     * Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigResponse
     */
	public function protocolNetflowSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Swap NETFLOW configuration file
     * 
     * Allow reloading the configuration file for an agent without stopping agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameResponse
     */
	public function protocolNetflowSetFileName(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/set/filename/{fileName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetFileNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowSetFileName200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's NETFLOW traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceResponse
     */
	public function protocolNetflowSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/netflow/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolNetflowSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolNetflowSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}