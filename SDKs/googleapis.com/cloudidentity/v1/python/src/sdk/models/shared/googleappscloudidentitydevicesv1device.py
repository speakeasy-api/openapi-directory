"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleappscloudidentitydevicesv1androidattributes as shared_googleappscloudidentitydevicesv1androidattributes
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleAppsCloudidentityDevicesV1DeviceCompromisedStateEnum(str, Enum):
    r"""Output only. Represents whether the Device is compromised."""
    COMPROMISED_STATE_UNSPECIFIED = 'COMPROMISED_STATE_UNSPECIFIED'
    COMPROMISED = 'COMPROMISED'
    UNCOMPROMISED = 'UNCOMPROMISED'

class GoogleAppsCloudidentityDevicesV1DeviceDeviceTypeEnum(str, Enum):
    r"""Output only. Type of device."""
    DEVICE_TYPE_UNSPECIFIED = 'DEVICE_TYPE_UNSPECIFIED'
    ANDROID = 'ANDROID'
    IOS = 'IOS'
    GOOGLE_SYNC = 'GOOGLE_SYNC'
    WINDOWS = 'WINDOWS'
    MAC_OS = 'MAC_OS'
    LINUX = 'LINUX'
    CHROME_OS = 'CHROME_OS'

class GoogleAppsCloudidentityDevicesV1DeviceEncryptionStateEnum(str, Enum):
    r"""Output only. Device encryption state."""
    ENCRYPTION_STATE_UNSPECIFIED = 'ENCRYPTION_STATE_UNSPECIFIED'
    UNSUPPORTED_BY_DEVICE = 'UNSUPPORTED_BY_DEVICE'
    ENCRYPTED = 'ENCRYPTED'
    NOT_ENCRYPTED = 'NOT_ENCRYPTED'

class GoogleAppsCloudidentityDevicesV1DeviceManagementStateEnum(str, Enum):
    r"""Output only. Management state of the device"""
    MANAGEMENT_STATE_UNSPECIFIED = 'MANAGEMENT_STATE_UNSPECIFIED'
    APPROVED = 'APPROVED'
    BLOCKED = 'BLOCKED'
    PENDING = 'PENDING'
    UNPROVISIONED = 'UNPROVISIONED'
    WIPING = 'WIPING'
    WIPED = 'WIPED'

class GoogleAppsCloudidentityDevicesV1DeviceOwnerTypeEnum(str, Enum):
    r"""Output only. Whether the device is owned by the company or an individual"""
    DEVICE_OWNERSHIP_UNSPECIFIED = 'DEVICE_OWNERSHIP_UNSPECIFIED'
    COMPANY = 'COMPANY'
    BYOD = 'BYOD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAppsCloudidentityDevicesV1Device:
    r"""A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user."""
    
    android_specific_attributes: Optional[shared_googleappscloudidentitydevicesv1androidattributes.GoogleAppsCloudidentityDevicesV1AndroidAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidSpecificAttributes'), 'exclude': lambda f: f is None }})
    r"""Resource representing the Android specific attributes of a Device."""  
    asset_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetTag'), 'exclude': lambda f: f is None }})
    r"""Asset tag of the device."""  
    baseband_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basebandVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. Baseband version of the device."""  
    bootloader_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootloaderVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. Device bootloader version. Example: 0.6.7."""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Output only. Device brand. Example: Samsung."""  
    build_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildNumber'), 'exclude': lambda f: f is None }})
    r"""Output only. Build number of the device."""  
    compromised_state: Optional[GoogleAppsCloudidentityDevicesV1DeviceCompromisedStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compromisedState'), 'exclude': lambda f: f is None }})
    r"""Output only. Represents whether the Device is compromised."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. When the Company-Owned device was imported. This field is empty for BYOD devices."""  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the device."""  
    device_type: Optional[GoogleAppsCloudidentityDevicesV1DeviceDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceType'), 'exclude': lambda f: f is None }})
    r"""Output only. Type of device."""  
    enabled_developer_options: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledDeveloperOptions'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether developer options is enabled on device."""  
    enabled_usb_debugging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledUsbDebugging'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether USB debugging is enabled on device."""  
    encryption_state: Optional[GoogleAppsCloudidentityDevicesV1DeviceEncryptionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionState'), 'exclude': lambda f: f is None }})
    r"""Output only. Device encryption state."""  
    imei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imei'), 'exclude': lambda f: f is None }})
    r"""Output only. IMEI number of device if GSM device; empty otherwise."""  
    kernel_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kernelVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. Kernel version of the device."""  
    last_sync_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSyncTime'), 'exclude': lambda f: f is None }})
    r"""Most recent time when device synced with this service."""  
    management_state: Optional[GoogleAppsCloudidentityDevicesV1DeviceManagementStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managementState'), 'exclude': lambda f: f is None }})
    r"""Output only. Management state of the device"""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Output only. Device manufacturer. Example: Motorola."""  
    meid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meid'), 'exclude': lambda f: f is None }})
    r"""Output only. MEID number of device if CDMA device; empty otherwise."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Output only. Model name of device. Example: Pixel 3."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device."""  
    network_operator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkOperator'), 'exclude': lambda f: f is None }})
    r"""Output only. Mobile or network operator of device, if available."""  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. OS version of the device. Example: Android 8.1.0."""  
    other_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherAccounts'), 'exclude': lambda f: f is None }})
    r"""Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \\"com.example\\", \\"xyz.com\\"."""  
    owner_type: Optional[GoogleAppsCloudidentityDevicesV1DeviceOwnerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerType'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the device is owned by the company or an individual"""  
    release_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. OS release version. Example: 6.0."""  
    security_patch_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityPatchTime'), 'exclude': lambda f: f is None }})
    r"""Output only. OS security patch update time on device."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Serial Number of device. Example: HT82V1A01076."""  
    wifi_mac_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiMacAddresses'), 'exclude': lambda f: f is None }})
    r"""WiFi MAC addresses of device."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAppsCloudidentityDevicesV1DeviceInput:
    r"""A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user."""
    
    android_specific_attributes: Optional[shared_googleappscloudidentitydevicesv1androidattributes.GoogleAppsCloudidentityDevicesV1AndroidAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidSpecificAttributes'), 'exclude': lambda f: f is None }})
    r"""Resource representing the Android specific attributes of a Device."""  
    asset_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetTag'), 'exclude': lambda f: f is None }})
    r"""Asset tag of the device."""  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the device."""  
    last_sync_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSyncTime'), 'exclude': lambda f: f is None }})
    r"""Most recent time when device synced with this service."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Serial Number of device. Example: HT82V1A01076."""  
    wifi_mac_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiMacAddresses'), 'exclude': lambda f: f is None }})
    r"""WiFi MAC addresses of device."""  
    