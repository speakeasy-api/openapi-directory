/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Scheme Certificate
   *
   * @remarks
   * API to verify Scheme Certificate.
   */
  epfsc(
    req: operations.EpfscRequestBody,
    security: operations.EpfscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EpfscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EpfscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/epfsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EpfscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EpfscResponse = new operations.EpfscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.epfsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Epfsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Pension Certificate
   *
   * @remarks
   * API to verify Pension Certificate.
   */
  pecer(
    req: operations.PecerRequestBody,
    security: operations.PecerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PecerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PecerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/pecer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PecerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PecerResponse = new operations.PecerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pecer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pecer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UAN Card
   *
   * @remarks
   * API to verify UAN Card.
   */
  uncrd(
    req: operations.UncrdRequestBody,
    security: operations.UncrdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UncrdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UncrdRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/uncrd/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UncrdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UncrdResponse = new operations.UncrdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.uncrd504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Uncrd504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
