// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// ContinuousCheckContinuousCheckStatusEnum - Shows whether the background check score rose, fell, stood the same or was just created
type ContinuousCheckContinuousCheckStatusEnum string

const (
	ContinuousCheckContinuousCheckStatusEnumNew  ContinuousCheckContinuousCheckStatusEnum = "new"
	ContinuousCheckContinuousCheckStatusEnumUp   ContinuousCheckContinuousCheckStatusEnum = "up"
	ContinuousCheckContinuousCheckStatusEnumDown ContinuousCheckContinuousCheckStatusEnum = "down"
	ContinuousCheckContinuousCheckStatusEnumSame ContinuousCheckContinuousCheckStatusEnum = "same"
)

func (e ContinuousCheckContinuousCheckStatusEnum) ToPointer() *ContinuousCheckContinuousCheckStatusEnum {
	return &e
}

func (e *ContinuousCheckContinuousCheckStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "up":
		fallthrough
	case "down":
		fallthrough
	case "same":
		*e = ContinuousCheckContinuousCheckStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContinuousCheckContinuousCheckStatusEnum: %v", v)
	}
}

// ContinuousCheck - Continuous check allows for background checks to be performed on the same people or vehicles periodically and notifies if new information is found. Allowing companies to keep an eye on their workforce or vehicle fleet for any recent wrongdoing they might be involved in.
type ContinuousCheck struct {
	// Continuous check ID [partition key and sort key]
	ContinuousCheckID *string `json:"ContinuousCheckID,omitempty"`
	// Shows whether the background check score rose, fell, stood the same or was just created
	ContinuousCheckStatus ContinuousCheckContinuousCheckStatusEnum `json:"ContinuousCheckStatus"`
	// Continuous check creation date in RFC3339 format
	CreationDate *types.Date `json:"CreationDate,omitempty"`
	// Indicates whether continuous check is enabled
	Enabled *bool `json:"Enabled,omitempty"`
	// Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks
	Frequency string `json:"Frequency"`
	// Represents to changelog entry of a continuous check
	History *ContinuousCheckEntry `json:"History,omitempty"`
	// Last check ID
	LastCheckID string `json:"LastCheckID"`
	// Next background check date, in RFC3339 format (without time)
	NextRunDate *types.Date `json:"NextRunDate,omitempty"`
	// Represents a background check
	OriginalCheck *Check `json:"OriginalCheck,omitempty"`
	// Continuous check update date in RFC3339 format
	UpdateDate *types.Date `json:"UpdateDate,omitempty"`
}
