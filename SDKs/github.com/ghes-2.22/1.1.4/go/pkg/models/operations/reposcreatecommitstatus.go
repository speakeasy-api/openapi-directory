// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreateCommitStatusRequestBodyStateEnum - The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
type ReposCreateCommitStatusRequestBodyStateEnum string

const (
	ReposCreateCommitStatusRequestBodyStateEnumError   ReposCreateCommitStatusRequestBodyStateEnum = "error"
	ReposCreateCommitStatusRequestBodyStateEnumFailure ReposCreateCommitStatusRequestBodyStateEnum = "failure"
	ReposCreateCommitStatusRequestBodyStateEnumPending ReposCreateCommitStatusRequestBodyStateEnum = "pending"
	ReposCreateCommitStatusRequestBodyStateEnumSuccess ReposCreateCommitStatusRequestBodyStateEnum = "success"
)

func (e ReposCreateCommitStatusRequestBodyStateEnum) ToPointer() *ReposCreateCommitStatusRequestBodyStateEnum {
	return &e
}

func (e *ReposCreateCommitStatusRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "failure":
		fallthrough
	case "pending":
		fallthrough
	case "success":
		*e = ReposCreateCommitStatusRequestBodyStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateCommitStatusRequestBodyStateEnum: %v", v)
	}
}

type ReposCreateCommitStatusRequestBody struct {
	// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
	Context *string `json:"context,omitempty"`
	// A short description of the status.
	Description *string `json:"description,omitempty"`
	// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
	State ReposCreateCommitStatusRequestBodyStateEnum `json:"state"`
	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
	// For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
	// `http://ci.example.com/user/repo/build/sha`
	TargetURL *string `json:"target_url,omitempty"`
}

type ReposCreateCommitStatusRequest struct {
	RequestBody ReposCreateCommitStatusRequestBody `request:"mediaType=application/json"`
	Owner       string                             `pathParam:"style=simple,explode=false,name=owner"`
	Repo        string                             `pathParam:"style=simple,explode=false,name=repo"`
	Sha         string                             `pathParam:"style=simple,explode=false,name=sha"`
}

type ReposCreateCommitStatusResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Status *shared.Status
}
