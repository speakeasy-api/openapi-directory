/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SymbolsGet200ApplicationJSON - Success
 */
public class SymbolsGet200ApplicationJSON {
    /**
     * The other symbols in the same file
     */
    @JsonProperty("alternate_symbol_ids")
    public String[] alternateSymbolIds;
    public SymbolsGet200ApplicationJSON withAlternateSymbolIds(String[] alternateSymbolIds) {
        this.alternateSymbolIds = alternateSymbolIds;
        return this;
    }
    
    /**
     * The application that this symbol belongs to
     */
    @JsonProperty("app_id")
    public String appId;
    public SymbolsGet200ApplicationJSON withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    /**
     * The build number. Optional for Apple. Required for Android.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    public String build;
    public SymbolsGet200ApplicationJSON withBuild(String build) {
        this.build = build;
        return this;
    }
    
    /**
     * The origin of the symbol file
     */
    @JsonProperty("origin")
    public SymbolsGet200ApplicationJSONOriginEnum origin;
    public SymbolsGet200ApplicationJSON withOrigin(SymbolsGet200ApplicationJSONOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * The platform that this symbol is associated with
     */
    @JsonProperty("platform")
    public String platform;
    public SymbolsGet200ApplicationJSON withPlatform(String platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * Whether the symbol is ignored.
     */
    @JsonProperty("status")
    public SymbolsGet200ApplicationJSONStatusEnum status;
    public SymbolsGet200ApplicationJSON withStatus(SymbolsGet200ApplicationJSONStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The unique id for this symbol (uuid)
     */
    @JsonProperty("symbol_id")
    public String symbolId;
    public SymbolsGet200ApplicationJSON withSymbolId(String symbolId) {
        this.symbolId = symbolId;
        return this;
    }
    
    /**
     * The id of the symbol upload this symbol belongs to.
     */
    @JsonProperty("symbol_upload_id")
    public String symbolUploadId;
    public SymbolsGet200ApplicationJSON withSymbolUploadId(String symbolUploadId) {
        this.symbolUploadId = symbolUploadId;
        return this;
    }
    
    /**
     * The type of the symbol for the current symbol upload
     */
    @JsonProperty("type")
    public SymbolsGet200ApplicationJSONTypeEnum type;
    public SymbolsGet200ApplicationJSON withType(SymbolsGet200ApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The path name of the symbol file in blob storage
     */
    @JsonProperty("url")
    public String url;
    public SymbolsGet200ApplicationJSON withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The version number. Optional for Apple. Required for Android.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public SymbolsGet200ApplicationJSON withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
