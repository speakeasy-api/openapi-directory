// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETTerminateClientVpnConnectionsActionEnum
type GETTerminateClientVpnConnectionsActionEnum string

const (
	GETTerminateClientVpnConnectionsActionEnumTerminateClientVpnConnections GETTerminateClientVpnConnectionsActionEnum = "TerminateClientVpnConnections"
)

func (e GETTerminateClientVpnConnectionsActionEnum) ToPointer() *GETTerminateClientVpnConnectionsActionEnum {
	return &e
}

func (e *GETTerminateClientVpnConnectionsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TerminateClientVpnConnections":
		*e = GETTerminateClientVpnConnectionsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETTerminateClientVpnConnectionsActionEnum: %v", v)
	}
}

// GETTerminateClientVpnConnectionsVersionEnum
type GETTerminateClientVpnConnectionsVersionEnum string

const (
	GETTerminateClientVpnConnectionsVersionEnumTwoThousandAndSixteen1115 GETTerminateClientVpnConnectionsVersionEnum = "2016-11-15"
)

func (e GETTerminateClientVpnConnectionsVersionEnum) ToPointer() *GETTerminateClientVpnConnectionsVersionEnum {
	return &e
}

func (e *GETTerminateClientVpnConnectionsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETTerminateClientVpnConnectionsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETTerminateClientVpnConnectionsVersionEnum: %v", v)
	}
}

type GETTerminateClientVpnConnectionsRequest struct {
	Action GETTerminateClientVpnConnectionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the Client VPN endpoint to which the client is connected.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// The ID of the client connection to be terminated.
	ConnectionID *string `queryParam:"style=form,explode=true,name=ConnectionId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
	Username          *string                                     `queryParam:"style=form,explode=true,name=Username"`
	Version           GETTerminateClientVpnConnectionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETTerminateClientVpnConnectionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
