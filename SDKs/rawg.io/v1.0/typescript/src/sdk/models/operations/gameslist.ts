/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GamesListRequest extends SpeakeasyBase {
  /**
   * Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=creators",
  })
  creators?: string;

  /**
   * Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dates" })
  dates?: string;

  /**
   * Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=developers",
  })
  developers?: string;

  /**
   * Exclude additions.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_additions",
  })
  excludeAdditions?: boolean;

  /**
   * Exclude games from a particular collection, for example: `123`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_collection",
  })
  excludeCollection?: number;

  /**
   * Exclude games which included in a game series.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_game_series",
  })
  excludeGameSeries?: boolean;

  /**
   * Exclude games which have additions.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_parents",
  })
  excludeParents?: boolean;

  /**
   * Exclude stores, for example: `5,6`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_stores",
  })
  excludeStores?: string;

  /**
   * Filter by genres, for example: `4,51` or `action,indie`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=genres",
  })
  genres?: string;

  /**
   * Filter by a metacritic rating, for example: `80,100`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=metacritic",
  })
  metacritic?: string;

  /**
   * Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ordering",
  })
  ordering?: string;

  /**
   * A page number within the paginated result set.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Number of results to return per page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Filter by parent platforms, for example: `1,2,3`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parent_platforms",
  })
  parentPlatforms?: string;

  /**
   * Filter by platforms, for example: `4,5`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=platforms",
  })
  platforms?: string;

  /**
   * Filter by platforms count, for example: `1`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=platforms_count",
  })
  platformsCount?: number;

  /**
   * Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=publishers",
  })
  publishers?: string;

  /**
   * Search query.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * Mark the search query as exact.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_exact",
  })
  searchExact?: boolean;

  /**
   * Disable fuzziness for the search query.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_precise",
  })
  searchPrecise?: boolean;

  /**
   * Filter by stores, for example: `5,6`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=stores",
  })
  stores?: string;

  /**
   * Filter by tags, for example: `31,7` or `singleplayer,multiplayer`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=tags" })
  tags?: string;

  /**
   * Filter by an update date, for example: `2020-12-01,2020-12-31`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=updated",
  })
  updated?: string;
}

export class GamesList200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count: number;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  next?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "previous" })
  previous?: string;

  @SpeakeasyMetadata({ elemType: shared.Game })
  @Expose({ name: "results" })
  @Type(() => shared.Game)
  results: shared.Game[];
}

export class GamesListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  @SpeakeasyMetadata()
  gamesList200ApplicationJSONObject?: GamesList200ApplicationJSON;
}
