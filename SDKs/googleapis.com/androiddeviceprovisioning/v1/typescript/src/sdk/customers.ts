/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Customers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new configuration. Once created, a customer can apply the configuration to devices.
   */
  androiddeviceprovisioningCustomersConfigurationsCreate(
    req: operations.AndroiddeviceprovisioningCustomersConfigurationsCreateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersConfigurationsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/configurations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "configurationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersConfigurationsCreateResponse =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configuration = utils.objectToClass(
              httpRes?.data,
              shared.Configuration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied.
   */
  androiddeviceprovisioningCustomersConfigurationsDelete(
    req: operations.AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists a customer's configurations.
   */
  androiddeviceprovisioningCustomersConfigurationsList(
    req: operations.AndroiddeviceprovisioningCustomersConfigurationsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersConfigurationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/configurations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersConfigurationsListResponse =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customerListConfigurationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomerListConfigurationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a configuration's field values.
   */
  androiddeviceprovisioningCustomersConfigurationsPatch(
    req: operations.AndroiddeviceprovisioningCustomersConfigurationsPatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersConfigurationsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "configurationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersConfigurationsPatchResponse =
        new operations.AndroiddeviceprovisioningCustomersConfigurationsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configuration = utils.objectToClass(
              httpRes?.data,
              shared.Configuration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first boot, or next factory reset.
   */
  androiddeviceprovisioningCustomersDevicesApplyConfiguration(
    req: operations.AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/devices:applyConfiguration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customerApplyConfigurationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse =
        new operations.AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists a customer's devices.
   */
  androiddeviceprovisioningCustomersDevicesList(
    req: operations.AndroiddeviceprovisioningCustomersDevicesListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersDevicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningCustomersDevicesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/devices", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersDevicesListResponse =
        new operations.AndroiddeviceprovisioningCustomersDevicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customerListDevicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomerListDevicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a configuration from device.
   */
  androiddeviceprovisioningCustomersDevicesRemoveConfiguration(
    req: operations.AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/devices:removeConfiguration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customerRemoveConfigurationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse =
        new operations.AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch enrollment again.
   */
  androiddeviceprovisioningCustomersDevicesUnclaim(
    req: operations.AndroiddeviceprovisioningCustomersDevicesUnclaimRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersDevicesUnclaimResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroiddeviceprovisioningCustomersDevicesUnclaimRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/devices:unclaim",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customerUnclaimDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersDevicesUnclaimResponse =
        new operations.AndroiddeviceprovisioningCustomersDevicesUnclaimResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the DPCs (device policy controllers) that support zero-touch enrollment.
   */
  androiddeviceprovisioningCustomersDpcsList(
    req: operations.AndroiddeviceprovisioningCustomersDpcsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersDpcsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningCustomersDpcsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/dpcs", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersDpcsListResponse =
        new operations.AndroiddeviceprovisioningCustomersDpcsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customerListDpcsResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomerListDpcsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the user's customer accounts.
   */
  androiddeviceprovisioningCustomersList(
    req: operations.AndroiddeviceprovisioningCustomersListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroiddeviceprovisioningCustomersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroiddeviceprovisioningCustomersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/customers";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroiddeviceprovisioningCustomersListResponse =
        new operations.AndroiddeviceprovisioningCustomersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customerListCustomersResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomerListCustomersResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
