/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StringTranslationStateEnum } from "./stringtranslationstateenum";
import { Expose, Transform } from "class-transformer";

/**
 * String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
 */
export enum StringInSearchTypeEnum {
  LocalProject = "LOCAL_PROJECT",
  ImportedTm = "IMPORTED_TM",
}

export class StringInSearch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "internal_project_id" })
  internalProjectId?: number;

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "project_id" })
  projectId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "search_score" })
  searchScore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: StringTranslationStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "string_id" })
  stringId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  target?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "targets" })
  targets?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "tm_name" })
  tmName?: string;

  /**
   * String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: StringInSearchTypeEnum;
}
