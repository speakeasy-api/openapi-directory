// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScheduleStateEnum string

const (
	ScheduleStateEnumStateUnspecified ScheduleStateEnum = "STATE_UNSPECIFIED"
	ScheduleStateEnumEnabled          ScheduleStateEnum = "ENABLED"
	ScheduleStateEnumPaused           ScheduleStateEnum = "PAUSED"
	ScheduleStateEnumDisabled         ScheduleStateEnum = "DISABLED"
	ScheduleStateEnumUpdateFailed     ScheduleStateEnum = "UPDATE_FAILED"
	ScheduleStateEnumInitializing     ScheduleStateEnum = "INITIALIZING"
	ScheduleStateEnumDeleting         ScheduleStateEnum = "DELETING"
)

func (e *ScheduleStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ENABLED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "UPDATE_FAILED":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "DELETING":
		*e = ScheduleStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleStateEnum: %s", s)
	}
}

// Schedule - The definition of a schedule.
type Schedule struct {
	// Output only. Time the schedule was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule *string `json:"cronSchedule,omitempty"`
	// A brief description of this environment.
	Description *string `json:"description,omitempty"`
	// Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.
	DisplayName *string `json:"displayName,omitempty"`
	// The description a notebook execution workload.
	ExecutionTemplate *ExecutionTemplate `json:"executionTemplate,omitempty"`
	// Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name *string `json:"name,omitempty"`
	// Output only. The most recent execution names triggered from this schedule and their corresponding states.
	RecentExecutions []Execution        `json:"recentExecutions,omitempty"`
	State            *ScheduleStateEnum `json:"state,omitempty"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone *string `json:"timeZone,omitempty"`
	// Output only. Time the schedule was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// ScheduleInput - The definition of a schedule.
type ScheduleInput struct {
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule *string `json:"cronSchedule,omitempty"`
	// A brief description of this environment.
	Description *string `json:"description,omitempty"`
	// The description a notebook execution workload.
	ExecutionTemplate *ExecutionTemplate `json:"executionTemplate,omitempty"`
	State             *ScheduleStateEnum `json:"state,omitempty"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone *string `json:"timeZone,omitempty"`
}
