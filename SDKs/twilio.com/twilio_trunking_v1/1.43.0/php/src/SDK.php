<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const CREATE_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const CREATE_ORIGINATION_URL_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const CREATE_PHONE_NUMBER_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const CREATE_TRUNK_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const DELETE_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const DELETE_ORIGINATION_URL_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const DELETE_PHONE_NUMBER_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const DELETE_TRUNK_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_ORIGINATION_URL_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_PHONE_NUMBER_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_RECORDING_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const FETCH_TRUNK_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const LIST_CREDENTIAL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const LIST_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const LIST_ORIGINATION_URL_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const LIST_PHONE_NUMBER_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const LIST_TRUNK_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const UPDATE_ORIGINATION_URL_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const UPDATE_RECORDING_SERVERS = [
		'https://trunking.twilio.com',
	];
	
	public const UPDATE_TRUNK_SERVERS = [
		'https://trunking.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createCredentialList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListResponse
     */
	public function createCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/CredentialLists', \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkCredentialList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkCredentialList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Associate an IP Access Control List with a Trunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListResponse
     */
	public function createIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListResponse
    {
        $baseUrl = SDK::CREATE_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/IpAccessControlLists', \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkIpAccessControlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkIpAccessControlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createOriginationUrl
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlResponse
     */
	public function createOriginationUrl(
        \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlResponse
    {
        $baseUrl = SDK::CREATE_ORIGINATION_URL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/OriginationUrls', \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOriginationUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkOriginationUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkOriginationUrl', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
     */
	public function createPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
    {
        $baseUrl = SDK::CREATE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkPhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkPhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrunkCreateTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrunkResponse
     */
	public function createTrunk(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrunkCreateTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrunkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrunkResponse
    {
        $baseUrl = SDK::CREATE_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1Trunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1Trunk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteCredentialList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListResponse
     */
	public function deleteCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an associated IP Access Control List from a Trunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListResponse
     */
	public function deleteIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListResponse
    {
        $baseUrl = SDK::DELETE_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteOriginationUrl
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlResponse
     */
	public function deleteOriginationUrl(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlResponse
    {
        $baseUrl = SDK::DELETE_ORIGINATION_URL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOriginationUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deletePhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
     */
	public function deletePhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
    {
        $baseUrl = SDK::DELETE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkResponse
     */
	public function deleteTrunk(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkResponse
    {
        $baseUrl = SDK::DELETE_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchCredentialList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListResponse
     */
	public function fetchCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkCredentialList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkCredentialList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchIpAccessControlList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListResponse
     */
	public function fetchIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListResponse
    {
        $baseUrl = SDK::FETCH_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkIpAccessControlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkIpAccessControlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchOriginationUrl
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlResponse
     */
	public function fetchOriginationUrl(
        \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlResponse
    {
        $baseUrl = SDK::FETCH_ORIGINATION_URL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchOriginationUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkOriginationUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkOriginationUrl', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
     */
	public function fetchPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
    {
        $baseUrl = SDK::FETCH_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkPhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkPhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRecording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
     */
	public function fetchRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/Recording', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrunkResponse
     */
	public function fetchTrunk(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrunkResponse
    {
        $baseUrl = SDK::FETCH_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1Trunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1Trunk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listCredentialList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialListResponse
     */
	public function listCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialListResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/CredentialLists', \OpenAPI\OpenAPI\Models\Operations\ListCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialListListCredentialListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all IP Access Control Lists for a Trunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListResponse
     */
	public function listIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListResponse
    {
        $baseUrl = SDK::LIST_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/IpAccessControlLists', \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIpAccessControlListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIpAccessControlListListIpAccessControlListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listOriginationUrl
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlResponse
     */
	public function listOriginationUrl(
        \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlResponse
    {
        $baseUrl = SDK::LIST_ORIGINATION_URL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/OriginationUrls', \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOriginationUrlResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListOriginationUrlListOriginationUrlResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
     */
	public function listPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
    {
        $baseUrl = SDK::LIST_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberListPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrunkResponse
     */
	public function listTrunk(
        \OpenAPI\OpenAPI\Models\Operations\ListTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrunkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrunkResponse
    {
        $baseUrl = SDK::LIST_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrunkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrunkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrunkListTrunkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateOriginationUrl
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlResponse
     */
	public function updateOriginationUrl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlResponse
    {
        $baseUrl = SDK::UPDATE_ORIGINATION_URL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOriginationUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkOriginationUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkOriginationUrl', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRecording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingResponse
     */
	public function updateRecording(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingResponse
    {
        $baseUrl = SDK::UPDATE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{TrunkSid}/Recording', \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1TrunkRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1TrunkRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkResponse
     */
	public function updateTrunk(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkResponse
    {
        $baseUrl = SDK::UPDATE_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Trunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trunkingV1Trunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrunkingV1Trunk', 'json');
            }
        }

        return $response;
    }
}