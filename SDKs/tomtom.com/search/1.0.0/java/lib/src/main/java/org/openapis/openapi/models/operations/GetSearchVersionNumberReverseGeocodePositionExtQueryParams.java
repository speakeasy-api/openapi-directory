/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSearchVersionNumberReverseGeocodePositionExtQueryParams {
    /**
     * Specifies the jsonp callback method.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=heading")
    public Float heading;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withHeading(Float heading) {
        this.heading = heading;
        return this;
    }
    
    /**
     * If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=number")
    public String number;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The maximum distance in meters from the specified position for the reverse geocoder to consider.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=radius")
    public Long radius;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withRadius(Long radius) {
        this.radius = radius;
        return this;
    }
    
    /**
     * Enables return of the road use array for reverse geocodes at street level.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=returnRoadUse")
    public Boolean returnRoadUse;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withReturnRoadUse(Boolean returnRoadUse) {
        this.returnRoadUse = returnRoadUse;
        return this;
    }
    
    /**
     * To enable return of the posted speed limit (where available).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=returnSpeedLimit")
    public Boolean returnSpeedLimit;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withReturnSpeedLimit(Boolean returnSpeedLimit) {
        this.returnSpeedLimit = returnSpeedLimit;
        return this;
    }
    
    /**
     * Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: ["LimitedAccess", "Arterial", "Terminal", "Ramp", "Rotary", "LocalStreet"].
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=roadUse")
    public String roadUse;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withRoadUse(String roadUse) {
        this.roadUse = roadUse;
        return this;
    }
    
    /**
     * If the "spatialKeys" flag is set, the response will also contain a proprietary geospatial keys for a specified location.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=spatialKeys")
    public Boolean spatialKeys;
    public GetSearchVersionNumberReverseGeocodePositionExtQueryParams withSpatialKeys(Boolean spatialKeys) {
        this.spatialKeys = spatialKeys;
        return this;
    }
    
}
