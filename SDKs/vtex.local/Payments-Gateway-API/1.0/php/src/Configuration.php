<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Configuration 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Affiliation By Id
     * 
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdResponse
     */
	public function affiliationById(
        \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/affiliations/{affiliationId}', \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AffiliationByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Affiliations
     * 
     * Returns all affiliations that your provider can handle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AffiliationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AffiliationsResponse
     */
	public function affiliations(
        \OpenAPI\OpenAPI\Models\Operations\AffiliationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AffiliationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/affiliations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AffiliationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Available Payment Methods
     * 
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AvailablePaymentMethodsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AvailablePaymentMethodsResponse
     */
	public function availablePaymentMethods(
        \OpenAPI\OpenAPI\Models\Operations\AvailablePaymentMethodsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AvailablePaymentMethodsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/merchants/payment-systems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AvailablePaymentMethodsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentSystemsResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PaymentSystemsResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert Affiliation
     * 
     * Creates a new affiliation and returns a successful response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsertAffiliationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InsertAffiliationResponse
     */
	public function insertAffiliation(
        \OpenAPI\OpenAPI\Models\Operations\InsertAffiliationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InsertAffiliationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/affiliations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "insertAffiliationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsertAffiliationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Insert Rule
     * 
     * Creates a new rule and returns a successful response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsertRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InsertRuleResponse
     */
	public function insertRule(
        \OpenAPI\OpenAPI\Models\Operations\InsertRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InsertRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/rules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "insertRuleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsertRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Rule By Id
     * 
     * Update Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdResponse
     */
	public function putRuleById(
        \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ruleByIdRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRuleByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete Rule
     * 
     * Deletes rules by specified Id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RuleResponse
     */
	public function rule(
        \OpenAPI\OpenAPI\Models\Operations\RuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\RuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Rule By Id
     * 
     * Returns rule by specified RuleId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuleByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RuleByIdResponse
     */
	public function ruleById(
        \OpenAPI\OpenAPI\Models\Operations\RuleByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RuleByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\RuleByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuleByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Rules
     * 
     * Returns all rules conditions your provider can handle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RulesResponse
     */
	public function rules(
        \OpenAPI\OpenAPI\Models\Operations\RulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/rules');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Affiliation
     * 
     * Returns all affiliations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationResponse
     */
	public function updateAffiliation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/affiliations/{affiliationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAffiliationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAffiliationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}