// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateChannelTypeRequestAutoModerationEnum - Enables automatic message moderation
type CreateChannelTypeRequestAutoModerationEnum string

const (
	CreateChannelTypeRequestAutoModerationEnumDisabled CreateChannelTypeRequestAutoModerationEnum = "disabled"
	CreateChannelTypeRequestAutoModerationEnumSimple   CreateChannelTypeRequestAutoModerationEnum = "simple"
	CreateChannelTypeRequestAutoModerationEnumAi       CreateChannelTypeRequestAutoModerationEnum = "AI"
)

func (e *CreateChannelTypeRequestAutoModerationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "simple":
		fallthrough
	case "AI":
		*e = CreateChannelTypeRequestAutoModerationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeRequestAutoModerationEnum: %s", s)
	}
}

// CreateChannelTypeRequestAutoModerationBehaviorEnum - Sets behavior of automatic moderation
type CreateChannelTypeRequestAutoModerationBehaviorEnum string

const (
	CreateChannelTypeRequestAutoModerationBehaviorEnumFlag  CreateChannelTypeRequestAutoModerationBehaviorEnum = "flag"
	CreateChannelTypeRequestAutoModerationBehaviorEnumBlock CreateChannelTypeRequestAutoModerationBehaviorEnum = "block"
)

func (e *CreateChannelTypeRequestAutoModerationBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "flag":
		fallthrough
	case "block":
		*e = CreateChannelTypeRequestAutoModerationBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeRequestAutoModerationBehaviorEnum: %s", s)
	}
}

// CreateChannelTypeRequestBlocklistBehaviorEnum - Sets behavior of blocklist
type CreateChannelTypeRequestBlocklistBehaviorEnum string

const (
	CreateChannelTypeRequestBlocklistBehaviorEnumFlag  CreateChannelTypeRequestBlocklistBehaviorEnum = "flag"
	CreateChannelTypeRequestBlocklistBehaviorEnumBlock CreateChannelTypeRequestBlocklistBehaviorEnum = "block"
)

func (e *CreateChannelTypeRequestBlocklistBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "flag":
		fallthrough
	case "block":
		*e = CreateChannelTypeRequestBlocklistBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeRequestBlocklistBehaviorEnum: %s", s)
	}
}

type CreateChannelTypeRequest struct {
	// Enables automatic message moderation
	Automod CreateChannelTypeRequestAutoModerationEnum `json:"automod"`
	// Sets behavior of automatic moderation
	AutomodBehavior *CreateChannelTypeRequestAutoModerationBehaviorEnum `json:"automod_behavior,omitempty"`
	// Name of the blocklist to use
	Blocklist *string `json:"blocklist,omitempty"`
	// Sets behavior of blocklist
	BlocklistBehavior *CreateChannelTypeRequestBlocklistBehaviorEnum `json:"blocklist_behavior,omitempty"`
	// List of commands that channel supports
	Commands []string `json:"commands,omitempty"`
	// Connect events support
	ConnectEvents *bool `json:"connect_events,omitempty"`
	// Enables custom events
	CustomEvents *bool               `json:"custom_events,omitempty"`
	Grants       map[string][]string `json:"grants,omitempty"`
	// Number of maximum message characters
	MaxMessageLength *float64 `json:"max_message_length,omitempty"`
	// Number of days to keep messages. 'infinite' disables retention
	MessageRetention *string `json:"message_retention,omitempty"`
	// Enables mutes
	Mutes *bool `json:"mutes,omitempty"`
	// Channel type name
	Name string `json:"name"`
	// List of permissions for the channel type
	Permissions []PolicyRequest `json:"permissions,omitempty"`
	// Enables push notifications
	PushNotifications *bool `json:"push_notifications,omitempty"`
	// Enables message reactions
	Reactions *bool `json:"reactions,omitempty"`
	// Read events support
	ReadEvents *bool `json:"read_events,omitempty"`
	// Enables message replies (threads)
	Replies *bool `json:"replies,omitempty"`
	// Enables message search
	Search *bool `json:"search,omitempty"`
	// Typing events support
	TypingEvents *bool `json:"typing_events,omitempty"`
	// Enables file uploads
	Uploads *bool `json:"uploads,omitempty"`
	// Enables URL enrichment
	URLEnrichment *bool `json:"url_enrichment,omitempty"`
}
