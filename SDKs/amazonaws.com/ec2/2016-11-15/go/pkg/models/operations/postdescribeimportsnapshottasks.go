// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeImportSnapshotTasksActionEnum
type POSTDescribeImportSnapshotTasksActionEnum string

const (
	POSTDescribeImportSnapshotTasksActionEnumDescribeImportSnapshotTasks POSTDescribeImportSnapshotTasksActionEnum = "DescribeImportSnapshotTasks"
)

func (e *POSTDescribeImportSnapshotTasksActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeImportSnapshotTasks":
		*e = POSTDescribeImportSnapshotTasksActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeImportSnapshotTasksActionEnum: %s", s)
	}
}

// POSTDescribeImportSnapshotTasksVersionEnum
type POSTDescribeImportSnapshotTasksVersionEnum string

const (
	POSTDescribeImportSnapshotTasksVersionEnumTwoThousandAndSixteen1115 POSTDescribeImportSnapshotTasksVersionEnum = "2016-11-15"
)

func (e *POSTDescribeImportSnapshotTasksVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTDescribeImportSnapshotTasksVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeImportSnapshotTasksVersionEnum: %s", s)
	}
}

type POSTDescribeImportSnapshotTasksQueryParams struct {
	Action POSTDescribeImportSnapshotTasksActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string                                    `queryParam:"style=form,explode=true,name=NextToken"`
	Version   POSTDescribeImportSnapshotTasksVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeImportSnapshotTasksHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeImportSnapshotTasksRequest struct {
	QueryParams POSTDescribeImportSnapshotTasksQueryParams
	Headers     POSTDescribeImportSnapshotTasksHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeImportSnapshotTasksResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
