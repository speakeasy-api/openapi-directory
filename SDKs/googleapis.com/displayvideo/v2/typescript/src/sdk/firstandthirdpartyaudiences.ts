/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class FirstAndThirdPartyAudiences {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
   */
  displayvideoFirstAndThirdPartyAudiencesCreate(
    req: operations.DisplayvideoFirstAndThirdPartyAudiencesCreateRequest,
    security: operations.DisplayvideoFirstAndThirdPartyAudiencesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoFirstAndThirdPartyAudiencesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoFirstAndThirdPartyAudiencesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/firstAndThirdPartyAudiences";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firstAndThirdPartyAudienceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoFirstAndThirdPartyAudiencesCreateResponse =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstAndThirdPartyAudience = utils.objectToClass(
              httpRes?.data,
              shared.FirstAndThirdPartyAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
   */
  displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembers(
    req: operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest,
    security: operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}:editCustomerMatchMembers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "editCustomerMatchMembersRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.editCustomerMatchMembersResponse = utils.objectToClass(
              httpRes?.data,
              shared.EditCustomerMatchMembersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a first and third party audience.
   */
  displayvideoFirstAndThirdPartyAudiencesGet(
    req: operations.DisplayvideoFirstAndThirdPartyAudiencesGetRequest,
    security: operations.DisplayvideoFirstAndThirdPartyAudiencesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoFirstAndThirdPartyAudiencesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoFirstAndThirdPartyAudiencesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoFirstAndThirdPartyAudiencesGetResponse =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstAndThirdPartyAudience = utils.objectToClass(
              httpRes?.data,
              shared.FirstAndThirdPartyAudience
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists first and third party audiences. The order is defined by the order_by parameter.
   */
  displayvideoFirstAndThirdPartyAudiencesList(
    req: operations.DisplayvideoFirstAndThirdPartyAudiencesListRequest,
    security: operations.DisplayvideoFirstAndThirdPartyAudiencesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoFirstAndThirdPartyAudiencesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoFirstAndThirdPartyAudiencesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/firstAndThirdPartyAudiences";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoFirstAndThirdPartyAudiencesListResponse =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFirstAndThirdPartyAudiencesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFirstAndThirdPartyAudiencesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
   */
  displayvideoFirstAndThirdPartyAudiencesPatch(
    req: operations.DisplayvideoFirstAndThirdPartyAudiencesPatchRequest,
    security: operations.DisplayvideoFirstAndThirdPartyAudiencesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoFirstAndThirdPartyAudiencesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoFirstAndThirdPartyAudiencesPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firstAndThirdPartyAudienceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoFirstAndThirdPartyAudiencesPatchResponse =
        new operations.DisplayvideoFirstAndThirdPartyAudiencesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstAndThirdPartyAudience = utils.objectToClass(
              httpRes?.data,
              shared.FirstAndThirdPartyAudience
            );
          }
          break;
      }

      return res;
    });
  }
}
