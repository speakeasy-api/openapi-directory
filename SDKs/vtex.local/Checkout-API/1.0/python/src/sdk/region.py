"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Region:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_sellers_by_region(self, request: operations.GetSellersByRegionRequest) -> operations.GetSellersByRegionResponse:
        r"""Get sellers by region or address
        Retrieve a list of sellers that cater to a specific region or address, according to your set up of our [regionalization feature](https://help.vtex.com/en/tutorial/setting-up-price-and-availability-of-skus-by-region--12ne58BmvYsYuGsimmugoc#). Learn more about [Region v2](https://developers.vtex.com/vtex-developer-docs/changelog/region-v2).
        
        
        To access the list of sellers, you must choose one of the following methods:
        
        
        1. Send the identification of the list of sellers (`regionId`) as a path parameter through the URL. Or;
        
        2. Send the `country` (3-digit ISO code) and at least one of the two values (`postal Code` or `geo Coordinates`) as query parameters through the URL. For this method, it is also allowed to send both values (`postalCode` or `geoCoordinates`) in the same request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSellersByRegionRequest, base_url, '/api/checkout/pub/regions/{regionId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetSellersByRegionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSellersByRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSellersByRegion200ApplicationJSON])
                res.get_sellers_by_region_200_application_json_object = out

        return res

    