/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Timezone } from "./timezone";
import { Expose, Transform } from "class-transformer";

export class Location extends SpeakeasyBase {
  /**
   * The complete address using comma-separated values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  /**
   * The components which make up the address such as road, city, state, etc
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address-components" })
  addressComponents: Record<string, string>;

  /**
   * The city of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The country of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The ISO 2-letter country code of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country-code" })
  countryCode: string;

  /**
   * The ISO 3-letter country code of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country-code3" })
  countryCode3: string;

  /**
   * ISO 4217 currency code associated with the country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency-code" })
  currencyCode: string;

  /**
   * The location latitude
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location-tags" })
  locationTags: string[];

  /**
   * The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location-type" })
  locationType: string;

  /**
   * The location longitude
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * The formatted address using local standards suitable for printing on an envelope
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postal-address" })
  postalAddress: string;

  /**
   * The postal code for the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postal-code" })
  postalCode: string;

  /**
   * The ISO 3166-2 region code for the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region-code" })
  regionCode: string;

  /**
   * The state of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * Map containing timezone details for the location
   */
  @SpeakeasyMetadata({ elemType: Timezone })
  @Expose({ name: "timezone" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Timezone> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Timezone);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  timezone: Record<string, Timezone>;
}
