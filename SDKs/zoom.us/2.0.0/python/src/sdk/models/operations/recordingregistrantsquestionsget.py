"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetRequest:
    
    meeting_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
    
    To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. 
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
    """  
    
class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum(str, Enum):
    r"""The type of registration question and answers."""
    SHORT = 'short'
    SINGLE = 'single'
    MULTIPLE = 'multiple'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""Answer choices for the question. Can not be used with Short answer type."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""State whether registrants are required to answer custom questions or not."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of the question."""  
    type: Optional[RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of registration question and answers."""  
    
class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum(str, Enum):
    r"""Field name."""
    LAST_NAME = 'last_name'
    ADDRESS = 'address'
    CITY = 'city'
    COUNTRY = 'country'
    ZIP = 'zip'
    STATE = 'state'
    PHONE = 'phone'
    INDUSTRY = 'industry'
    ORG = 'org'
    JOB_TITLE = 'job_title'
    PURCHASING_TIME_FRAME = 'purchasing_time_frame'
    ROLE_IN_PURCHASE_PROCESS = 'role_in_purchase_process'
    NO_OF_EMPLOYEES = 'no_of_employees'
    COMMENTS = 'comments'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions:
    
    field_name: Optional[RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_name'), 'exclude': lambda f: f is None }})
    r"""Field name."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""State whether the field is required to be answered by the registrant or not."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions:
    r"""Recording Registrant Questions"""
    
    custom_questions: Optional[list[RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_questions'), 'exclude': lambda f: f is None }})
    r"""Array of Registrant Custom Questions"""  
    questions: Optional[list[RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""Array of Registrant Questions"""  
    

@dataclasses.dataclass
class RecordingRegistrantsQuestionsGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    recording_registrant_questions: Optional[RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Recording Registrant Question object returned.
    """  
    