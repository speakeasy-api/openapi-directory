/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RenderMetadata } from "./rendermetadata";
import { Expose, Type } from "class-transformer";

/**
 * Output only. Reason this render failed. This will always be unspecified while the render in progress.
 */
export enum TargetRenderFailureCauseEnum {
  FailureCauseUnspecified = "FAILURE_CAUSE_UNSPECIFIED",
  CloudBuildUnavailable = "CLOUD_BUILD_UNAVAILABLE",
  ExecutionFailed = "EXECUTION_FAILED",
  CloudBuildRequestFailed = "CLOUD_BUILD_REQUEST_FAILED",
}

/**
 * Output only. Current state of the render operation for this Target.
 */
export enum TargetRenderRenderingStateEnum {
  TargetRenderStateUnspecified = "TARGET_RENDER_STATE_UNSPECIFIED",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
  InProgress = "IN_PROGRESS",
}

/**
 * Details of rendering for a single target.
 */
export class TargetRender extends SpeakeasyBase {
  /**
   * Output only. Reason this render failed. This will always be unspecified while the render in progress.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failureCause" })
  failureCause?: TargetRenderFailureCauseEnum;

  /**
   * Output only. Additional information about the render failure, if available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failureMessage" })
  failureMessage?: string;

  /**
   * RenderMetadata includes information associated with a `Release` render.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => RenderMetadata)
  metadata?: RenderMetadata;

  /**
   * Output only. The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renderingBuild" })
  renderingBuild?: string;

  /**
   * Output only. Current state of the render operation for this Target.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renderingState" })
  renderingState?: TargetRenderRenderingStateEnum;
}
