"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogQuery = void 0;
var utils_1 = require("../../../internal/utils");
var catalogqueryexact_1 = require("./catalogqueryexact");
var catalogqueryitemsforitemoptions_1 = require("./catalogqueryitemsforitemoptions");
var catalogqueryitemsformodifierlist_1 = require("./catalogqueryitemsformodifierlist");
var catalogqueryitemsfortax_1 = require("./catalogqueryitemsfortax");
var catalogqueryitemvariationsforitemoptionvalues_1 = require("./catalogqueryitemvariationsforitemoptionvalues");
var catalogqueryprefix_1 = require("./catalogqueryprefix");
var catalogqueryrange_1 = require("./catalogqueryrange");
var catalogqueryset_1 = require("./catalogqueryset");
var catalogquerysortedattribute_1 = require("./catalogquerysortedattribute");
var catalogquerytext_1 = require("./catalogquerytext");
var class_transformer_1 = require("class-transformer");
/**
 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
 *
 * @remarks
 *
 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
 * Any combination of the following types may be used together:
 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
 * All other query types cannot be combined with any others.
 *
 * When a query filter is based on an attribute, the attribute must be searchable.
 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
 *
 * * Searchable attribute and objects queryable by searchable attributes **
 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
 * - `abbreviation`: `CatalogItem`
 * - `upc`: `CatalogItemVariation`
 * - `sku`: `CatalogItemVariation`
 * - `caption`: `CatalogImage`
 * - `display_name`: `CatalogItemOption`
 *
 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
 */
var CatalogQuery = /** @class */ (function (_super) {
    __extends(CatalogQuery, _super);
    function CatalogQuery() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exact_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryexact_1.CatalogQueryExact; }),
        __metadata("design:type", catalogqueryexact_1.CatalogQueryExact)
    ], CatalogQuery.prototype, "exactQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "item_variations_for_item_option_values_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryitemvariationsforitemoptionvalues_1.CatalogQueryItemVariationsForItemOptionValues; }),
        __metadata("design:type", catalogqueryitemvariationsforitemoptionvalues_1.CatalogQueryItemVariationsForItemOptionValues)
    ], CatalogQuery.prototype, "itemVariationsForItemOptionValuesQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "items_for_item_options_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryitemsforitemoptions_1.CatalogQueryItemsForItemOptions; }),
        __metadata("design:type", catalogqueryitemsforitemoptions_1.CatalogQueryItemsForItemOptions)
    ], CatalogQuery.prototype, "itemsForItemOptionsQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "items_for_modifier_list_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryitemsformodifierlist_1.CatalogQueryItemsForModifierList; }),
        __metadata("design:type", catalogqueryitemsformodifierlist_1.CatalogQueryItemsForModifierList)
    ], CatalogQuery.prototype, "itemsForModifierListQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "items_for_tax_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryitemsfortax_1.CatalogQueryItemsForTax; }),
        __metadata("design:type", catalogqueryitemsfortax_1.CatalogQueryItemsForTax)
    ], CatalogQuery.prototype, "itemsForTaxQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prefix_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryprefix_1.CatalogQueryPrefix; }),
        __metadata("design:type", catalogqueryprefix_1.CatalogQueryPrefix)
    ], CatalogQuery.prototype, "prefixQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "range_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryrange_1.CatalogQueryRange; }),
        __metadata("design:type", catalogqueryrange_1.CatalogQueryRange)
    ], CatalogQuery.prototype, "rangeQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "set_query" }),
        (0, class_transformer_1.Type)(function () { return catalogqueryset_1.CatalogQuerySet; }),
        __metadata("design:type", catalogqueryset_1.CatalogQuerySet)
    ], CatalogQuery.prototype, "setQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sorted_attribute_query" }),
        (0, class_transformer_1.Type)(function () { return catalogquerysortedattribute_1.CatalogQuerySortedAttribute; }),
        __metadata("design:type", catalogquerysortedattribute_1.CatalogQuerySortedAttribute)
    ], CatalogQuery.prototype, "sortedAttributeQuery", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "text_query" }),
        (0, class_transformer_1.Type)(function () { return catalogquerytext_1.CatalogQueryText; }),
        __metadata("design:type", catalogquerytext_1.CatalogQueryText)
    ], CatalogQuery.prototype, "textQuery", void 0);
    return CatalogQuery;
}(utils_1.SpeakeasyBase));
exports.CatalogQuery = CatalogQuery;
