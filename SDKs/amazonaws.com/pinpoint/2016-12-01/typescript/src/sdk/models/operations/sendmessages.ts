/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies the configuration and other settings for a message.
 */
export class SendMessagesRequestBodyMessageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AddressConfiguration })
  @Expose({ name: "Addresses" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.AddressConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.AddressConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  addresses?: Record<string, shared.AddressConfiguration>;

  @SpeakeasyMetadata()
  @Expose({ name: "Context" })
  context?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.EndpointSendConfiguration })
  @Expose({ name: "Endpoints" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.EndpointSendConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.EndpointSendConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  endpoints?: Record<string, shared.EndpointSendConfiguration>;

  @SpeakeasyMetadata()
  @Expose({ name: "MessageConfiguration" })
  @Type(() => shared.DirectMessageConfiguration)
  messageConfiguration?: shared.DirectMessageConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "TemplateConfiguration" })
  @Type(() => shared.TemplateConfiguration)
  templateConfiguration?: shared.TemplateConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "TraceId" })
  traceId?: string;
}

export class SendMessagesRequestBody extends SpeakeasyBase {
  /**
   * Specifies the configuration and other settings for a message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MessageRequest" })
  @Type(() => SendMessagesRequestBodyMessageRequest)
  messageRequest: SendMessagesRequestBodyMessageRequest;
}

export class SendMessagesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SendMessagesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=application-id",
  })
  applicationId: string;
}

export class SendMessagesResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * MethodNotAllowedException
   */
  @SpeakeasyMetadata()
  methodNotAllowedException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * PayloadTooLargeException
   */
  @SpeakeasyMetadata()
  payloadTooLargeException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  sendMessagesResponse?: shared.SendMessagesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
