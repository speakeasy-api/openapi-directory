"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NodesChildrenCreateNodeAttributesCategoryEnum(str, Enum):
    r"""The category of the node, as selected by project contributors."""
    ANALYSIS = 'analysis'
    COMMUNICATION = 'communication'
    DATA = 'data'
    HYPOTHESIS = 'hypothesis'
    INSTRUMENTATION = 'instrumentation'
    METHODS_AND_MEASURES = 'methods and measures'
    PROCEDURE = 'procedure'
    PROJECT = 'project'
    SOFTWARE = 'software'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodesChildrenCreateNodeAttributesInput:
    r"""The properties of the node entity."""
    
    category: NodesChildrenCreateNodeAttributesCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The category of the node, as selected by project contributors."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title of the node."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the node."""  
    node_license: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_license'), 'exclude': lambda f: f is None }})
    r"""A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."""  
    public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""Whether or not the node is publicly visible. This field is only editable by project administrators."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of strings that describe this node, as entered by project contributors."""  
    template_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_from'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the node from which this node was templated, if this node was created from a template."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodesChildrenCreateNodeInput:
    
    attributes: NodesChildrenCreateNodeAttributesInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})
    r"""The properties of the node entity."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type identifier of the node entity (`nodes`)."""  
    

@dataclasses.dataclass
class NodesChildrenCreateRequest:
    
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the node."""  
    request_body: NodesChildrenCreateNodeInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class NodesChildrenCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    