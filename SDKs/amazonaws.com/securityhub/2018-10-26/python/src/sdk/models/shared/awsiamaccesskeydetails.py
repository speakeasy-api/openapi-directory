"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsiamaccesskeysessioncontext as shared_awsiamaccesskeysessioncontext
from ..shared import awsiamaccesskeystatus_enum as shared_awsiamaccesskeystatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsIamAccessKeyDetails:
    r"""IAM access key details related to a finding."""
    
    access_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessKeyId'), 'exclude': lambda f: f is None }})  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'exclude': lambda f: f is None }})  
    principal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrincipalId'), 'exclude': lambda f: f is None }})  
    principal_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrincipalName'), 'exclude': lambda f: f is None }})  
    principal_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrincipalType'), 'exclude': lambda f: f is None }})  
    session_context: Optional[shared_awsiamaccesskeysessioncontext.AwsIamAccessKeySessionContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SessionContext'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_awsiamaccesskeystatus_enum.AwsIamAccessKeyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserName'), 'exclude': lambda f: f is None }})  
    