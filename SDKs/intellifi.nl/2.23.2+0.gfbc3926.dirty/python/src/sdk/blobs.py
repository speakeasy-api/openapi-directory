"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Blobs:
    r"""The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
    Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
    
    See also the `kvpairs` resource.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_blob(self, request: shared.BlobInput) -> operations.AddBlobResponse:
        r"""Create binary large object (blob) metadata"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/blobs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddBlobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_blob(self, request: operations.DeleteBlobRequest) -> operations.DeleteBlobResponse:
        r"""Delete binary large object (blob)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBlobRequest, base_url, '/blobs/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBlobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_blob_by_id(self, request: operations.GetBlobByIDRequest) -> operations.GetBlobByIDResponse:
        r"""Download a binary large object (blob)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBlobByIDRequest, base_url, '/blobs/{id}/download/{filename}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBlobByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'image/*'):
                res.get_blob_by_id_200_image_wildcard_binary_string = http_res.content

        return res

    def get_blob_metadata_by_id(self, request: operations.GetBlobMetadataByIDRequest) -> operations.GetBlobMetadataByIDResponse:
        r"""Get binary large object (blob)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBlobMetadataByIDRequest, base_url, '/blobs/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBlobMetadataByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Blob])
                res.blob = out

        return res

    def get_blobs(self, request: operations.GetBlobsRequest) -> operations.GetBlobsResponse:
        r"""Get all binary large objects (blob)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/blobs'
        
        query_params = utils.get_query_params(operations.GetBlobsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBlobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetBlobs200ApplicationJSON])
                res.get_blobs_200_application_json_object = out

        return res

    def upload_blob_by_id(self, request: operations.UploadBlobByIDRequest) -> operations.UploadBlobByIDResponse:
        r"""Create binary large object (blob)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadBlobByIDRequest, base_url, '/blobs/{id}/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadBlobByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    