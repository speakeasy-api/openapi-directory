/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Districts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns the admins for a district
   */
  getAdminsForDistrict(
    req: operations.GetAdminsForDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAdminsForDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAdminsForDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/admins",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAdminsForDistrictResponse =
        new operations.GetAdminsForDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtAdminsResponse = utils.objectToClass(
              httpRes?.data,
              shared.DistrictAdminsResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a specific district
   */
  getDistrict(
    req: operations.GetDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/districts/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictResponse =
        new operations.GetDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtResponse = utils.objectToClass(
              httpRes?.data,
              shared.DistrictResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the status of the district
   */
  getDistrictStatus(
    req: operations.GetDistrictStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/status",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictStatusResponse =
        new operations.GetDistrictStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtStatusResponses = utils.objectToClass(
              httpRes?.data,
              shared.DistrictStatusResponses
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of districts. In practice this will only return the one district associated with the bearer token
   */
  getDistricts(
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/districts";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictsResponse =
        new operations.GetDistrictsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtsResponse = utils.objectToClass(
              httpRes?.data,
              shared.DistrictsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the schools for a district
   */
  getSchoolsForDistrict(
    req: operations.GetSchoolsForDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSchoolsForDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSchoolsForDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/schools",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSchoolsForDistrictResponse =
        new operations.GetSchoolsForDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schoolsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SchoolsResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the sections for a district
   */
  getSectionsForDistrict(
    req: operations.GetSectionsForDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSectionsForDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSectionsForDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/sections",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSectionsForDistrictResponse =
        new operations.GetSectionsForDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sectionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SectionsResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the students for a district
   */
  getStudentsForDistrict(
    req: operations.GetStudentsForDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStudentsForDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStudentsForDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/students",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStudentsForDistrictResponse =
        new operations.GetStudentsForDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.studentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.StudentsResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the teachers for a district
   */
  getTeachersForDistrict(
    req: operations.GetTeachersForDistrictRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeachersForDistrictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeachersForDistrictRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/districts/{id}/teachers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeachersForDistrictResponse =
        new operations.GetTeachersForDistrictResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teachersResponse = utils.objectToClass(
              httpRes?.data,
              shared.TeachersResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }
}
