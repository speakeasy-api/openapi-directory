/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRepositoriesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

/**
 * Filters the result based on the authenticated user's role on each repository.
 *
 * @remarks
 *
 * * **member**: returns repositories to which the user has explicit read access
 * * **contributor**: returns repositories to which the user has explicit write access
 * * **admin**: returns repositories to which the user has explicit administrator access
 * * **owner**: returns all repositories owned by the current user
 *
 */
export enum GetRepositoriesRoleEnum {
  Admin = "admin",
  Contributor = "contributor",
  Member = "member",
  Owner = "owner",
}

export class GetRepositoriesRequest extends SpeakeasyBase {
  /**
   * Filter the results to include only repositories created on or
   *
   * @remarks
   * after this [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)
   *  timestamp. Example: `YYYY-MM-DDTHH:mm:ss.sssZ`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=after" })
  after?: string;

  /**
   * Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   *
   * @remarks
   * `role` parameter must also be specified.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   * Filters the result based on the authenticated user's role on each repository.
   *
   * @remarks
   *
   * * **member**: returns repositories to which the user has explicit read access
   * * **contributor**: returns repositories to which the user has explicit write access
   * * **admin**: returns repositories to which the user has explicit administrator access
   * * **owner**: returns all repositories owned by the current user
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=role" })
  role?: GetRepositoriesRoleEnum;

  /**
   * Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;
}

export class GetRepositoriesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * All public repositories.
   */
  @SpeakeasyMetadata()
  paginatedRepositories?: shared.PaginatedRepositories;
}
