<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ComputerVision 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List suggested keywords
     * 
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeywordsResponse
     */
	public function getKeywords(
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeywordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cv/keywords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetKeywordsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeywordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 415) {
        }

        return $response;
    }
	
    /**
     * List similar images
     * 
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesResponse
     */
	public function getSimilarImages(
        \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cv/similar/images');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSimilarImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List similar videos
     * 
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosResponse
     */
	public function getSimilarVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cv/similar/videos');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSimilarVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Upload ephemeral images
     * 
     * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ImageCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadEphemeralImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadEphemeralImageResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function uploadEphemeralImage(
        \OpenAPI\OpenAPI\Models\Shared\ImageCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadEphemeralImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadEphemeralImageResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadEphemeralImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageCreateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageCreateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 413) {
        }

        return $response;
    }
	
    /**
     * Upload images
     * 
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ImageCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadImageResponse
     */
	public function uploadImage(
        \OpenAPI\OpenAPI\Models\Shared\ImageCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cv/images');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computerVisionImageCreateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputerVisionImageCreateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 413 or $httpResponse->getStatusCode() === 415) {
        }

        return $response;
    }
}