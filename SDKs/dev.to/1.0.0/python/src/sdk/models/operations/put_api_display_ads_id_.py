"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PutAPIDisplayAdsIDRequestBodyDisplayToEnum(str, Enum):
    r"""Potentially limits visitors to whom the ad is visible"""
    ALL = 'all'
    LOGGED_IN = 'logged_in'
    LOGGED_OUT = 'logged_out'

class PutAPIDisplayAdsIDRequestBodyPlacementAreaEnum(str, Enum):
    r"""Identifies which area of site layout the ad can appear in"""
    SIDEBAR_LEFT = 'sidebar_left'
    SIDEBAR_LEFT_2 = 'sidebar_left_2'
    SIDEBAR_RIGHT = 'sidebar_right'
    POST_SIDEBAR = 'post_sidebar'
    POST_COMMENTS = 'post_comments'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAPIDisplayAdsIDRequestBody:
    
    body_markdown: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_markdown') }})
    r"""The text (in markdown) of the ad (required)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""For internal use, helps distinguish ads from one another"""  
    placement_area: PutAPIDisplayAdsIDRequestBodyPlacementAreaEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement_area') }})
    r"""Identifies which area of site layout the ad can appear in"""  
    approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved'), 'exclude': lambda f: f is None }})
    r"""Ad must be both published and approved to be in rotation"""  
    creator_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator_id'), 'exclude': lambda f: f is None }})
    r"""Identifies the user who created the ad."""  
    display_to: Optional[PutAPIDisplayAdsIDRequestBodyDisplayToEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_to'), 'exclude': lambda f: f is None }})
    r"""Potentially limits visitors to whom the ad is visible"""  
    organization_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_id'), 'exclude': lambda f: f is None }})
    r"""Identifies the organization to which the ad belongs, required for 'community' type ads"""  
    published: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published'), 'exclude': lambda f: f is None }})
    r"""Ad must be both published and approved to be in rotation"""  
    tag_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_list'), 'exclude': lambda f: f is None }})
    r"""Tags on which this ad can be displayed (blank is all/any tags)"""  
    

@dataclasses.dataclass
class PutAPIDisplayAdsIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The ID of the user to unpublish."""  
    request_body: Optional[PutAPIDisplayAdsIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PutAPIDisplayAdsIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    