// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkClientRequest struct {
	ClientID  string `pathParam:"style=simple,explode=false,name=clientId"`
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type GetNetworkClient200ApplicationJSONClientVpnConnections struct {
	// The time the client last connected to the VPN
	ConnectedAt *int64 `json:"connectedAt,omitempty"`
	// The time the client last disconnectd from the VPN
	DisconnectedAt *int64 `json:"disconnectedAt,omitempty"`
	// The IP address of the VPN the client last connected to
	RemoteIP *string `json:"remoteIp,omitempty"`
}

// GetNetworkClient200ApplicationJSONStatusEnum - The connection status of the client
type GetNetworkClient200ApplicationJSONStatusEnum string

const (
	GetNetworkClient200ApplicationJSONStatusEnumOffline GetNetworkClient200ApplicationJSONStatusEnum = "Offline"
	GetNetworkClient200ApplicationJSONStatusEnumOnline  GetNetworkClient200ApplicationJSONStatusEnum = "Online"
)

func (e GetNetworkClient200ApplicationJSONStatusEnum) ToPointer() *GetNetworkClient200ApplicationJSONStatusEnum {
	return &e
}

func (e *GetNetworkClient200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Offline":
		fallthrough
	case "Online":
		*e = GetNetworkClient200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkClient200ApplicationJSONStatusEnum: %v", v)
	}
}

// GetNetworkClient200ApplicationJSON - Successful operation
type GetNetworkClient200ApplicationJSON struct {
	// The Cisco discover protocol settings for the client
	Cdp [][]string `json:"cdp,omitempty"`
	// VPN connections associated with the client
	ClientVpnConnections []GetNetworkClient200ApplicationJSONClientVpnConnections `json:"clientVpnConnections,omitempty"`
	// Short description of the client
	Description *string `json:"description,omitempty"`
	// Timestamp client was first seen in the network
	FirstSeen *int64 `json:"firstSeen,omitempty"`
	// The ID of the client
	ID *string `json:"id,omitempty"`
	// The IP address of the client
	IP *string `json:"ip,omitempty"`
	// The IPv6 address of the client
	Ip6 *string `json:"ip6,omitempty"`
	// Timestamp client was last seen in the network
	LastSeen *int64 `json:"lastSeen,omitempty"`
	// The link layer discover protocol settings for the client
	Lldp [][]string `json:"lldp,omitempty"`
	// The MAC address of the client
	Mac *string `json:"mac,omitempty"`
	// Manufacturer of the client
	Manufacturer *string `json:"manufacturer,omitempty"`
	// The operating system of the client
	Os *string `json:"os,omitempty"`
	// The MAC address of the node that the device was last connected to
	RecentDeviceMac *string `json:"recentDeviceMac,omitempty"`
	// Status of SM for the client
	SmInstalled *bool `json:"smInstalled,omitempty"`
	// The name of the SSID that the client is connected to
	Ssid *string `json:"ssid,omitempty"`
	// The connection status of the client
	Status *GetNetworkClient200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// The switch port that the client is connected to
	Switchport *string `json:"switchport,omitempty"`
	// The username of the user of the client
	User *string `json:"user,omitempty"`
	// The name of the VLAN that the client is connected to
	Vlan *string `json:"vlan,omitempty"`
	// Wireless capabilities of the client
	WirelessCapabilities *string `json:"wirelessCapabilities,omitempty"`
}

type GetNetworkClientResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkClient200ApplicationJSONObject *GetNetworkClient200ApplicationJSON
}
