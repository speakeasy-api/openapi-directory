"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assetstatus_enum as shared_assetstatus_enum
from ..shared import bookdepreciationdetail as shared_bookdepreciationdetail
from ..shared import bookdepreciationsetting as shared_bookdepreciationsetting
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Asset:
    r"""Fixed asset you are creating"""
    
    asset_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetName') }})
    r"""The name of the asset"""  
    accounting_book_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingBookValue'), 'exclude': lambda f: f is None }})
    r"""The accounting value of the asset"""  
    asset_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetId'), 'exclude': lambda f: f is None }})
    r"""The Xero-generated Id for the asset"""  
    asset_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetNumber'), 'exclude': lambda f: f is None }})
    r"""Must be unique."""  
    asset_status: Optional[shared_assetstatus_enum.AssetStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetStatus'), 'exclude': lambda f: f is None }})
    r"""See Asset Status Codes."""  
    asset_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetTypeId'), 'exclude': lambda f: f is None }})
    r"""The Xero-generated Id for the asset type"""  
    book_depreciation_detail: Optional[shared_bookdepreciationdetail.BookDepreciationDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookDepreciationDetail'), 'exclude': lambda f: f is None }})  
    book_depreciation_setting: Optional[shared_bookdepreciationsetting.BookDepreciationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookDepreciationSetting'), 'exclude': lambda f: f is None }})  
    can_rollback: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canRollback'), 'exclude': lambda f: f is None }})
    r"""Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn't have 'legacy' journal entries and if there is no lock period that would prevent this asset from rolling back."""  
    disposal_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disposalDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the asset was disposed"""  
    disposal_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disposalPrice'), 'exclude': lambda f: f is None }})
    r"""The price the asset was disposed at"""  
    is_delete_enabled_for_date: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDeleteEnabledForDate'), 'exclude': lambda f: f is None }})
    r"""Boolean to indicate whether delete is enabled"""  
    purchase_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the asset was purchased YYYY-MM-DD"""  
    purchase_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchasePrice'), 'exclude': lambda f: f is None }})
    r"""The purchase price of the asset"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""The asset's serial number"""  
    warranty_expiry_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warrantyExpiryDate'), 'exclude': lambda f: f is None }})
    r"""The date the assetâ€™s warranty expires (if needed) YYYY-MM-DD"""  
    