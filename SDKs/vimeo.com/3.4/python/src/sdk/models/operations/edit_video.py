"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import video as shared_video
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EditVideoSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyEmbedButtons:
    
    embed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Embed button."""  
    fullscreen: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullscreen'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Fullscreen button."""  
    hd: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hd'), 'exclude': lambda f: f is None }})
    r"""Show or hide the HD button."""  
    like: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Like button."""  
    scaling: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaling'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Scaling button (shown only in Fullscreen mode)."""  
    share: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Share button."""  
    watchlater: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Watch Later button."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyEmbedLogosCustom:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Show or hide your custom logo."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The URL that loads when the user clicks your custom logo."""  
    sticky: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sticky'), 'exclude': lambda f: f is None }})
    r"""Whether always to show the custom logo or to hide it after time with the rest of the UI."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyEmbedLogos:
    
    custom: Optional[EditVideoRequestBodyEmbedLogosCustom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom'), 'exclude': lambda f: f is None }})  
    vimeo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vimeo'), 'exclude': lambda f: f is None }})
    r"""Show or hide the Vimeo logo."""  
    
class EditVideoRequestBodyEmbedTitleNameEnum(str, Enum):
    r"""Show or hide the video title, or enable the user to determine whether the video title appears."""
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'

class EditVideoRequestBodyEmbedTitleOwnerEnum(str, Enum):
    r"""Show or hide the owner information, or enable the user to determine whether the owner information appears."""
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'

class EditVideoRequestBodyEmbedTitlePortraitEnum(str, Enum):
    r"""Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears."""
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyEmbedTitle:
    
    name: Optional[EditVideoRequestBodyEmbedTitleNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Show or hide the video title, or enable the user to determine whether the video title appears."""  
    owner: Optional[EditVideoRequestBodyEmbedTitleOwnerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""Show or hide the owner information, or enable the user to determine whether the owner information appears."""  
    portrait: Optional[EditVideoRequestBodyEmbedTitlePortraitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portrait'), 'exclude': lambda f: f is None }})
    r"""Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyEmbed:
    
    buttons: Optional[EditVideoRequestBodyEmbedButtons] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buttons'), 'exclude': lambda f: f is None }})  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""The main color of the embed player."""  
    logos: Optional[EditVideoRequestBodyEmbedLogos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logos'), 'exclude': lambda f: f is None }})  
    playbar: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playbar'), 'exclude': lambda f: f is None }})
    r"""Show or hide the playbar."""  
    title: Optional[EditVideoRequestBodyEmbedTitle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    volume: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume'), 'exclude': lambda f: f is None }})
    r"""Show or hide the volume selector."""  
    
class EditVideoRequestBodyLicenseEnum(str, Enum):
    r"""The Creative Commons license."""
    BY = 'by'
    BY_NC = 'by-nc'
    BY_NC_ND = 'by-nc-nd'
    BY_NC_SA = 'by-nc-sa'
    BY_ND = 'by-nd'
    BY_SA = 'by-sa'
    CC0 = 'cc0'

class EditVideoRequestBodyPrivacyCommentsEnum(str, Enum):
    r"""The privacy level required to comment on the video."""
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class EditVideoRequestBodyPrivacyEmbedEnum(str, Enum):
    r"""The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains."""
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class EditVideoRequestBodyPrivacyViewEnum(str, Enum):
    r"""The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`."""
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether a user can add the video to an album, channel, or group."""  
    comments: Optional[EditVideoRequestBodyPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The privacy level required to comment on the video."""  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether a user can download the video. Not available to users with a Basic membership."""  
    embed: Optional[EditVideoRequestBodyPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains."""  
    view: Optional[EditVideoRequestBodyPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`."""  
    
class EditVideoRequestBodyRatingsMpaaReasonEnum(str, Enum):
    r"""The reason for the video's MPAA rating.
    
    Option descriptions:
     * `at` - Adult themes
     * `bn` - Brief nudity
     * `n` - Nudity
     * `sl` - Strong language
     * `ss` - Sexual situations
     * `v` - Violence
    """
    AT = 'at'
    BN = 'bn'
    N = 'n'
    SL = 'sl'
    SS = 'ss'
    V = 'v'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyRatingsMpaa:
    
    reason: Optional[EditVideoRequestBodyRatingsMpaaReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason for the video's MPAA rating.
    
    Option descriptions:
     * `at` - Adult themes
     * `bn` - Brief nudity
     * `n` - Nudity
     * `sl` - Strong language
     * `ss` - Sexual situations
     * `v` - Violence
    """  
    
class EditVideoRequestBodyRatingsTvReasonEnum(str, Enum):
    r"""The reason for the video's TV rating.
    
    Option descriptions:
     * `d` - Suggestive dialogue
     * `fv` - Fantasy violence
     * `l` - Language
     * `ss` - Sexual situations
     * `v` - Violence
    """
    D = 'd'
    FV = 'fv'
    L = 'l'
    SS = 'ss'
    V = 'v'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyRatingsTv:
    
    reason: Optional[EditVideoRequestBodyRatingsTvReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason for the video's TV rating.
    
    Option descriptions:
     * `d` - Suggestive dialogue
     * `fv` - Fantasy violence
     * `l` - Language
     * `ss` - Sexual situations
     * `v` - Violence
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyRatings:
    
    mpaa: Optional[EditVideoRequestBodyRatingsMpaa] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mpaa'), 'exclude': lambda f: f is None }})  
    tv: Optional[EditVideoRequestBodyRatingsTv] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tv'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodyReviewPage:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Enable or disable video review."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodySpatialDirectorTimeline:
    
    pitch: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pitch') }})
    r"""The timeline pitch. This value must be between -90 and 90."""  
    time_code: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_code') }})
    r"""The 360 director timeline time code."""  
    yaw: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yaw') }})
    r"""The timeline yaw. This value must be between 0 and 360."""  
    roll: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roll'), 'exclude': lambda f: f is None }})
    r"""The timeline roll."""  
    
class EditVideoRequestBodySpatialProjectionEnum(str, Enum):
    r"""The 360 spatial projection."""
    CUBICAL = 'cubical'
    CYLINDRICAL = 'cylindrical'
    DOME = 'dome'
    EQUIRECTANGULAR = 'equirectangular'
    PYRAMID = 'pyramid'

class EditVideoRequestBodySpatialStereoFormatEnum(str, Enum):
    r"""The 360 spatial stereo format."""
    LEFT_RIGHT = 'left-right'
    MONO = 'mono'
    TOP_BOTTOM = 'top-bottom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBodySpatial:
    
    director_timeline: Optional[list[EditVideoRequestBodySpatialDirectorTimeline]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('director_timeline'), 'exclude': lambda f: f is None }})
    r"""The 360 director timeline."""  
    field_of_view: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_of_view'), 'exclude': lambda f: f is None }})
    r"""The 360 field of view: default 50, minimum 30, maximum 90."""  
    projection: Optional[EditVideoRequestBodySpatialProjectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projection'), 'exclude': lambda f: f is None }})
    r"""The 360 spatial projection."""  
    stereo_format: Optional[EditVideoRequestBodySpatialStereoFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stereo_format'), 'exclude': lambda f: f is None }})
    r"""The 360 spatial stereo format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoRequestBody:
    
    content_rating: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_rating'), 'exclude': lambda f: f is None }})
    r"""A list of values describing the content in this video. You can find the full list in the [`/contentratings`](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The new description of the video."""  
    embed: Optional[EditVideoRequestBodyEmbed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})  
    license: Optional[EditVideoRequestBodyLicenseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""The Creative Commons license."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The new title for the video."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter."""  
    privacy: Optional[EditVideoRequestBodyPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    ratings: Optional[EditVideoRequestBodyRatings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratings'), 'exclude': lambda f: f is None }})  
    review_page: Optional[EditVideoRequestBodyReviewPage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_page'), 'exclude': lambda f: f is None }})  
    spatial: Optional[EditVideoRequestBodySpatial] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spatial'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class EditVideoRequest:
    
    request_body: EditVideoRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/vnd.vimeo.video+json' }})  
    video_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'video_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the video."""  
    

@dataclasses.dataclass
class EditVideoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""A parameter is invalid."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    video: Optional[shared_video.Video] = dataclasses.field(default=None)
    r"""The video was edited."""  
    