// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum - Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
type CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum string

const (
	CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnumAll      CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "all"
	CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnumPrivate  CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "private"
	CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnumSelected CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "selected"
)

func (e CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum) ToPointer() *CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum {
	return &e
}

func (e *CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "private":
		fallthrough
	case "selected":
		*e = CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum: %v", v)
	}
}

type CodespacesCreateOrUpdateOrgSecretRequestBody struct {
	// The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-an-organization-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`
	// The ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
	// An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []int64 `json:"selected_repository_ids,omitempty"`
	// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
	Visibility CodespacesCreateOrUpdateOrgSecretRequestBodyVisibilityEnum `json:"visibility"`
}

type CodespacesCreateOrUpdateOrgSecretRequest struct {
	RequestBody CodespacesCreateOrUpdateOrgSecretRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The name of the secret.
	SecretName string `pathParam:"style=simple,explode=false,name=secret_name"`
}

type CodespacesCreateOrUpdateOrgSecretResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response when creating a secret
	EmptyObject map[string]interface{}
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
