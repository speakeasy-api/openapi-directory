"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createpiperesponse as shared_createpiperesponse
from ..shared import filtercriteria as shared_filtercriteria
from ..shared import pipeenrichmenthttpparameters as shared_pipeenrichmenthttpparameters
from ..shared import pipesourceactivemqbrokerparameters as shared_pipesourceactivemqbrokerparameters
from ..shared import pipesourcedynamodbstreamparameters as shared_pipesourcedynamodbstreamparameters
from ..shared import pipesourcekinesisstreamparameters as shared_pipesourcekinesisstreamparameters
from ..shared import pipesourcemanagedstreamingkafkaparameters as shared_pipesourcemanagedstreamingkafkaparameters
from ..shared import pipesourcerabbitmqbrokerparameters as shared_pipesourcerabbitmqbrokerparameters
from ..shared import pipesourceselfmanagedkafkaparameters as shared_pipesourceselfmanagedkafkaparameters
from ..shared import pipesourcesqsqueueparameters as shared_pipesourcesqsqueueparameters
from ..shared import pipetargetbatchjobparameters as shared_pipetargetbatchjobparameters
from ..shared import pipetargetcloudwatchlogsparameters as shared_pipetargetcloudwatchlogsparameters
from ..shared import pipetargetecstaskparameters as shared_pipetargetecstaskparameters
from ..shared import pipetargeteventbridgeeventbusparameters as shared_pipetargeteventbridgeeventbusparameters
from ..shared import pipetargethttpparameters as shared_pipetargethttpparameters
from ..shared import pipetargetkinesisstreamparameters as shared_pipetargetkinesisstreamparameters
from ..shared import pipetargetlambdafunctionparameters as shared_pipetargetlambdafunctionparameters
from ..shared import pipetargetredshiftdataparameters as shared_pipetargetredshiftdataparameters
from ..shared import pipetargetsagemakerpipelineparameters as shared_pipetargetsagemakerpipelineparameters
from ..shared import pipetargetsqsqueueparameters as shared_pipetargetsqsqueueparameters
from ..shared import pipetargetstatemachineparameters as shared_pipetargetstatemachineparameters
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreatePipeRequestBodyDesiredStateEnum(str, Enum):
    r"""The state the pipe should be in."""
    RUNNING = 'RUNNING'
    STOPPED = 'STOPPED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePipeRequestBodyEnrichmentParameters:
    r"""The parameters required to set up enrichment on your pipe."""
    
    http_parameters: Optional[shared_pipeenrichmenthttpparameters.PipeEnrichmentHTTPParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HttpParameters'), 'exclude': lambda f: f is None }})  
    input_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputTemplate'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePipeRequestBodySourceParameters:
    r"""The parameters required to set up a source for your pipe."""
    
    active_mq_broker_parameters: Optional[shared_pipesourceactivemqbrokerparameters.PipeSourceActiveMQBrokerParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveMQBrokerParameters'), 'exclude': lambda f: f is None }})  
    dynamo_db_stream_parameters: Optional[shared_pipesourcedynamodbstreamparameters.PipeSourceDynamoDBStreamParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DynamoDBStreamParameters'), 'exclude': lambda f: f is None }})  
    filter_criteria: Optional[shared_filtercriteria.FilterCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilterCriteria'), 'exclude': lambda f: f is None }})  
    kinesis_stream_parameters: Optional[shared_pipesourcekinesisstreamparameters.PipeSourceKinesisStreamParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisStreamParameters'), 'exclude': lambda f: f is None }})  
    managed_streaming_kafka_parameters: Optional[shared_pipesourcemanagedstreamingkafkaparameters.PipeSourceManagedStreamingKafkaParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManagedStreamingKafkaParameters'), 'exclude': lambda f: f is None }})  
    rabbit_mq_broker_parameters: Optional[shared_pipesourcerabbitmqbrokerparameters.PipeSourceRabbitMQBrokerParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RabbitMQBrokerParameters'), 'exclude': lambda f: f is None }})  
    self_managed_kafka_parameters: Optional[shared_pipesourceselfmanagedkafkaparameters.PipeSourceSelfManagedKafkaParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelfManagedKafkaParameters'), 'exclude': lambda f: f is None }})  
    sqs_queue_parameters: Optional[shared_pipesourcesqsqueueparameters.PipeSourceSqsQueueParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SqsQueueParameters'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePipeRequestBodyTargetParameters:
    r"""The parameters required to set up a target for your pipe."""
    
    batch_job_parameters: Optional[shared_pipetargetbatchjobparameters.PipeTargetBatchJobParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchJobParameters'), 'exclude': lambda f: f is None }})  
    cloud_watch_logs_parameters: Optional[shared_pipetargetcloudwatchlogsparameters.PipeTargetCloudWatchLogsParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLogsParameters'), 'exclude': lambda f: f is None }})  
    ecs_task_parameters: Optional[shared_pipetargetecstaskparameters.PipeTargetEcsTaskParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EcsTaskParameters'), 'exclude': lambda f: f is None }})  
    event_bridge_event_bus_parameters: Optional[shared_pipetargeteventbridgeeventbusparameters.PipeTargetEventBridgeEventBusParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventBridgeEventBusParameters'), 'exclude': lambda f: f is None }})  
    http_parameters: Optional[shared_pipetargethttpparameters.PipeTargetHTTPParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HttpParameters'), 'exclude': lambda f: f is None }})  
    input_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputTemplate'), 'exclude': lambda f: f is None }})  
    kinesis_stream_parameters: Optional[shared_pipetargetkinesisstreamparameters.PipeTargetKinesisStreamParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisStreamParameters'), 'exclude': lambda f: f is None }})  
    lambda_function_parameters: Optional[shared_pipetargetlambdafunctionparameters.PipeTargetLambdaFunctionParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LambdaFunctionParameters'), 'exclude': lambda f: f is None }})  
    redshift_data_parameters: Optional[shared_pipetargetredshiftdataparameters.PipeTargetRedshiftDataParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftDataParameters'), 'exclude': lambda f: f is None }})  
    sage_maker_pipeline_parameters: Optional[shared_pipetargetsagemakerpipelineparameters.PipeTargetSageMakerPipelineParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SageMakerPipelineParameters'), 'exclude': lambda f: f is None }})  
    sqs_queue_parameters: Optional[shared_pipetargetsqsqueueparameters.PipeTargetSqsQueueParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SqsQueueParameters'), 'exclude': lambda f: f is None }})  
    step_function_state_machine_parameters: Optional[shared_pipetargetstatemachineparameters.PipeTargetStateMachineParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StepFunctionStateMachineParameters'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePipeRequestBody:
    
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})
    r"""The ARN of the role that allows the pipe to send data to the target."""  
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Source') }})
    r"""The ARN of the source resource."""  
    target: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Target') }})
    r"""The ARN of the target resource."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""A description of the pipe."""  
    desired_state: Optional[CreatePipeRequestBodyDesiredStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DesiredState'), 'exclude': lambda f: f is None }})
    r"""The state the pipe should be in."""  
    enrichment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Enrichment'), 'exclude': lambda f: f is None }})
    r"""The ARN of the enrichment resource."""  
    enrichment_parameters: Optional[CreatePipeRequestBodyEnrichmentParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnrichmentParameters'), 'exclude': lambda f: f is None }})
    r"""The parameters required to set up enrichment on your pipe."""  
    source_parameters: Optional[CreatePipeRequestBodySourceParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceParameters'), 'exclude': lambda f: f is None }})
    r"""The parameters required to set up a source for your pipe."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""The list of key-value pairs to associate with the pipe."""  
    target_parameters: Optional[CreatePipeRequestBodyTargetParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetParameters'), 'exclude': lambda f: f is None }})
    r"""The parameters required to set up a target for your pipe."""  
    

@dataclasses.dataclass
class CreatePipeRequest:
    
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Name', 'style': 'simple', 'explode': False }})
    r"""The name of the pipe."""  
    request_body: CreatePipeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreatePipeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_pipe_response: Optional[shared_createpiperesponse.CreatePipeResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    