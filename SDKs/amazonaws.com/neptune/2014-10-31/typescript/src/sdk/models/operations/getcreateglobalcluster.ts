/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETCreateGlobalClusterActionEnum {
  CreateGlobalCluster = "CreateGlobalCluster",
}

export enum GETCreateGlobalClusterVersionEnum {
  TwoThousandAndFourteen1031 = "2014-10-31",
}

export class GETCreateGlobalClusterRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETCreateGlobalClusterActionEnum;

  /**
   * The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DeletionProtection",
  })
  deletionProtection?: boolean;

  /**
   * <p>The name of the database engine to be used in the global database.</p> <p>Valid values: <code>neptune</code> </p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Engine",
  })
  engine?: string;

  /**
   * <p>The Neptune engine version to be used by the global database.</p> <p>Valid values: <code>1.2.0.0</code> or above.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EngineVersion",
  })
  engineVersion?: string;

  /**
   * The cluster identifier of the new global database cluster.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=GlobalClusterIdentifier",
  })
  globalClusterIdentifier: string;

  /**
   * (<i>Optional</i>) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceDBClusterIdentifier",
  })
  sourceDBClusterIdentifier?: string;

  /**
   * The storage encryption setting for the new global database cluster.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=StorageEncrypted",
  })
  storageEncrypted?: boolean;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETCreateGlobalClusterVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETCreateGlobalClusterResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
