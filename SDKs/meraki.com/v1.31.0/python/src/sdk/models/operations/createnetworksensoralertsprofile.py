"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum(str, Enum):
    r"""If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds."""
    ABOVE = 'above'
    BELOW = 'below'

class CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum(str, Enum):
    r"""Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0."""
    ZERO = '0'
    SIXTY = '60'
    ONE_HUNDRED_AND_TWENTY = '120'
    ONE_HUNDRED_AND_EIGHTY = '180'
    TWO_HUNDRED_AND_FORTY = '240'
    THREE_HUNDRED = '300'
    SIX_HUNDRED = '600'
    NINE_HUNDRED = '900'
    ONE_THOUSAND_EIGHT_HUNDRED = '1800'
    THREE_THOUSAND_SIX_HUNDRED = '3600'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor:
    r"""Door open threshold. 'open' must be provided and set to true."""
    
    open: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open') }})
    r"""Alerting threshold for a door open event. Must be set to true."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative humidity level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity:
    r"""Humidity threshold. One of 'relativePercentage' or 'quality' must be provided."""
    
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative humidity level."""  
    relative_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePercentage'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in %RH."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative indoor air quality level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality:
    r"""Indoor air quality score threshold. One of 'score' or 'quality' must be provided."""
    
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative indoor air quality level."""  
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as indoor air quality score."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative ambient noise level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient:
    r"""Ambient noise threshold. One of 'level' or 'quality' must be provided."""
    
    level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as adjusted decibels."""  
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative ambient noise level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise:
    r"""Noise threshold. 'ambient' must be provided."""
    
    ambient: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ambient') }})
    r"""Ambient noise threshold. One of 'level' or 'quality' must be provided."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative PM2.5 level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25:
    r"""PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as PM2.5 parts per million."""  
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative PM2.5 level."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative temperature level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature:
    r"""Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided."""
    
    celsius: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('celsius'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in degrees Celsius."""  
    fahrenheit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fahrenheit'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in degrees Fahrenheit."""  
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative temperature level."""  
    
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative TVOC level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc:
    r"""TVOC concentration threshold. One of 'concentration' or 'quality' must be provided."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as TVOC micrograms per cubic meter."""  
    quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative TVOC level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater:
    r"""Water detection threshold. 'present' must be provided and set to true."""
    
    present: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present') }})
    r"""Alerting threshold for a water detection event. Must be set to true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold:
    r"""Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value."""
    
    door: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('door'), 'exclude': lambda f: f is None }})
    r"""Door open threshold. 'open' must be provided and set to true."""  
    humidity: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Humidity threshold. One of 'relativePercentage' or 'quality' must be provided."""  
    indoor_air_quality: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indoorAirQuality'), 'exclude': lambda f: f is None }})
    r"""Indoor air quality score threshold. One of 'score' or 'quality' must be provided."""  
    noise: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noise'), 'exclude': lambda f: f is None }})
    r"""Noise threshold. 'ambient' must be provided."""  
    pm25: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided."""  
    temperature: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided."""  
    tvoc: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvoc'), 'exclude': lambda f: f is None }})
    r"""TVOC concentration threshold. One of 'concentration' or 'quality' must be provided."""  
    water: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water'), 'exclude': lambda f: f is None }})
    r"""Water detection threshold. 'present' must be provided and set to true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyConditions:
    
    metric: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric') }})
    r"""The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."""  
    threshold: CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold') }})
    r"""Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value."""  
    direction: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds."""  
    duration: Optional[CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodyRecipients:
    r"""List of recipients that will recieve the alert."""
    
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""A list of emails that will receive information about the alert."""  
    http_server_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpServerIds'), 'exclude': lambda f: f is None }})
    r"""A list of webhook endpoint IDs that will receive information about the alert."""  
    sms_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsNumbers'), 'exclude': lambda f: f is None }})
    r"""A list of SMS numbers that will receive information about the alert."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBodySchedule:
    r"""The sensor schedule to use with the alert profile."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequestBody:
    
    conditions: list[CreateNetworkSensorAlertsProfileRequestBodyConditions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions') }})
    r"""List of conditions that will cause the profile to send an alert."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the sensor alert profile."""  
    recipients: Optional[CreateNetworkSensorAlertsProfileRequestBodyRecipients] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""List of recipients that will recieve the alert."""  
    schedule: Optional[CreateNetworkSensorAlertsProfileRequestBodySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})
    r"""The sensor schedule to use with the alert profile."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serials'), 'exclude': lambda f: f is None }})
    r"""List of device serials assigned to this sensor alert profile."""  
    

@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkSensorAlertsProfileRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum(str, Enum):
    r"""If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds."""
    ABOVE = 'above'
    BELOW = 'below'

class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum(str, Enum):
    r"""Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0."""
    ZERO = '0'
    SIXTY = '60'
    ONE_HUNDRED_AND_TWENTY = '120'
    ONE_HUNDRED_AND_EIGHTY = '180'
    TWO_HUNDRED_AND_FORTY = '240'
    THREE_HUNDRED = '300'
    SIX_HUNDRED = '600'
    NINE_HUNDRED = '900'
    ONE_THOUSAND_EIGHT_HUNDRED = '1800'
    THREE_THOUSAND_SIX_HUNDRED = '3600'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor:
    r"""Door open threshold. 'open' must be provided and set to true."""
    
    open: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open') }})
    r"""Alerting threshold for a door open event. Must be set to true."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative humidity level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity:
    r"""Humidity threshold. One of 'relativePercentage' or 'quality' must be provided."""
    
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative humidity level."""  
    relative_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePercentage'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in %RH."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative indoor air quality level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality:
    r"""Indoor air quality score threshold. One of 'score' or 'quality' must be provided."""
    
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative indoor air quality level."""  
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as indoor air quality score."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative ambient noise level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient:
    r"""Ambient noise threshold. One of 'level' or 'quality' must be provided."""
    
    level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as adjusted decibels."""  
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative ambient noise level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise:
    r"""Noise threshold. 'ambient' must be provided."""
    
    ambient: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ambient') }})
    r"""Ambient noise threshold. One of 'level' or 'quality' must be provided."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative PM2.5 level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25:
    r"""PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as PM2.5 parts per million."""  
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative PM2.5 level."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative temperature level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature:
    r"""Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided."""
    
    celsius: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('celsius'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in degrees Celsius."""  
    fahrenheit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fahrenheit'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold in degrees Fahrenheit."""  
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative temperature level."""  
    
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum(str, Enum):
    r"""Alerting threshold as a qualitative TVOC level."""
    FAIR = 'fair'
    GOOD = 'good'
    INADEQUATE = 'inadequate'
    POOR = 'poor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc:
    r"""TVOC concentration threshold. One of 'concentration' or 'quality' must be provided."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as TVOC micrograms per cubic meter."""  
    quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Alerting threshold as a qualitative TVOC level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater:
    r"""Water detection threshold. 'present' must be provided and set to true."""
    
    present: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present') }})
    r"""Alerting threshold for a water detection event. Must be set to true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold:
    r"""Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value."""
    
    door: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('door'), 'exclude': lambda f: f is None }})
    r"""Door open threshold. 'open' must be provided and set to true."""  
    humidity: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Humidity threshold. One of 'relativePercentage' or 'quality' must be provided."""  
    indoor_air_quality: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indoorAirQuality'), 'exclude': lambda f: f is None }})
    r"""Indoor air quality score threshold. One of 'score' or 'quality' must be provided."""  
    noise: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noise'), 'exclude': lambda f: f is None }})
    r"""Noise threshold. 'ambient' must be provided."""  
    pm25: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided."""  
    temperature: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided."""  
    tvoc: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvoc'), 'exclude': lambda f: f is None }})
    r"""TVOC concentration threshold. One of 'concentration' or 'quality' must be provided."""  
    water: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water'), 'exclude': lambda f: f is None }})
    r"""Water detection threshold. 'present' must be provided and set to true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONConditions:
    
    metric: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric') }})
    r"""The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."""  
    threshold: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold') }})
    r"""Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value."""  
    direction: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds."""  
    duration: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients:
    r"""List of recipients that will recieve the alert."""
    
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""A list of emails that will receive information about the alert."""  
    http_server_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpServerIds'), 'exclude': lambda f: f is None }})
    r"""A list of webhook endpoint IDs that will receive information about the alert."""  
    sms_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsNumbers'), 'exclude': lambda f: f is None }})
    r"""A list of SMS numbers that will receive information about the alert."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule:
    r"""The sensor schedule to use with the alert profile."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the sensor schedule to use with the alert profile."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSensorAlertsProfile200ApplicationJSON:
    r"""Successful operation"""
    
    conditions: list[CreateNetworkSensorAlertsProfile200ApplicationJSONConditions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions') }})
    r"""List of conditions that will cause the profile to send an alert."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the sensor alert profile."""  
    profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileId'), 'exclude': lambda f: f is None }})
    r"""ID of the sensor alert profile."""  
    recipients: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""List of recipients that will recieve the alert."""  
    schedule: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})
    r"""The sensor schedule to use with the alert profile."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serials'), 'exclude': lambda f: f is None }})
    r"""List of device serials assigned to this sensor alert profile."""  
    

@dataclasses.dataclass
class CreateNetworkSensorAlertsProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_sensor_alerts_profile_200_application_json_object: Optional[CreateNetworkSensorAlertsProfile200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    