// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchDetectTargetedSentimentXAmzTargetEnum
type BatchDetectTargetedSentimentXAmzTargetEnum string

const (
	BatchDetectTargetedSentimentXAmzTargetEnumComprehend20171127BatchDetectTargetedSentiment BatchDetectTargetedSentimentXAmzTargetEnum = "Comprehend_20171127.BatchDetectTargetedSentiment"
)

func (e *BatchDetectTargetedSentimentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Comprehend_20171127.BatchDetectTargetedSentiment":
		*e = BatchDetectTargetedSentimentXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchDetectTargetedSentimentXAmzTargetEnum: %s", s)
	}
}

type BatchDetectTargetedSentimentRequest struct {
	BatchDetectTargetedSentimentRequest shared.BatchDetectTargetedSentimentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                       *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                   *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                      *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                            *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                   *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                       *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                   *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                          BatchDetectTargetedSentimentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchDetectTargetedSentimentResponse struct {
	// Success
	BatchDetectTargetedSentimentResponse *shared.BatchDetectTargetedSentimentResponse
	// BatchSizeLimitExceededException
	BatchSizeLimitExceededException interface{}
	ContentType                     string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TextSizeLimitExceededException
	TextSizeLimitExceededException interface{}
	// UnsupportedLanguageException
	UnsupportedLanguageException interface{}
}
