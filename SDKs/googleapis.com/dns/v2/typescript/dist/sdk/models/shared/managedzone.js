"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedZone = exports.ManagedZoneVisibilityEnum = void 0;
var utils_1 = require("../../../internal/utils");
var managedzonecloudloggingconfig_1 = require("./managedzonecloudloggingconfig");
var managedzonednssecconfig_1 = require("./managedzonednssecconfig");
var managedzoneforwardingconfig_1 = require("./managedzoneforwardingconfig");
var managedzonepeeringconfig_1 = require("./managedzonepeeringconfig");
var managedzoneprivatevisibilityconfig_1 = require("./managedzoneprivatevisibilityconfig");
var managedzonereverselookupconfig_1 = require("./managedzonereverselookupconfig");
var managedzoneservicedirectoryconfig_1 = require("./managedzoneservicedirectoryconfig");
var class_transformer_1 = require("class-transformer");
/**
 * The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
 */
var ManagedZoneVisibilityEnum;
(function (ManagedZoneVisibilityEnum) {
    ManagedZoneVisibilityEnum["Public"] = "PUBLIC";
    ManagedZoneVisibilityEnum["Private"] = "PRIVATE";
})(ManagedZoneVisibilityEnum = exports.ManagedZoneVisibilityEnum || (exports.ManagedZoneVisibilityEnum = {}));
/**
 * A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
 */
var ManagedZone = /** @class */ (function (_super) {
    __extends(ManagedZone, _super);
    function ManagedZone() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cloudLoggingConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzonecloudloggingconfig_1.ManagedZoneCloudLoggingConfig; }),
        __metadata("design:type", managedzonecloudloggingconfig_1.ManagedZoneCloudLoggingConfig)
    ], ManagedZone.prototype, "cloudLoggingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTime" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsName" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "dnsName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnssecConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzonednssecconfig_1.ManagedZoneDnsSecConfig; }),
        __metadata("design:type", managedzonednssecconfig_1.ManagedZoneDnsSecConfig)
    ], ManagedZone.prototype, "dnssecConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "forwardingConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzoneforwardingconfig_1.ManagedZoneForwardingConfig; }),
        __metadata("design:type", managedzoneforwardingconfig_1.ManagedZoneForwardingConfig)
    ], ManagedZone.prototype, "forwardingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], ManagedZone.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameServerSet" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "nameServerSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameServers" }),
        __metadata("design:type", Array)
    ], ManagedZone.prototype, "nameServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peeringConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzonepeeringconfig_1.ManagedZonePeeringConfig; }),
        __metadata("design:type", managedzonepeeringconfig_1.ManagedZonePeeringConfig)
    ], ManagedZone.prototype, "peeringConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privateVisibilityConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzoneprivatevisibilityconfig_1.ManagedZonePrivateVisibilityConfig; }),
        __metadata("design:type", managedzoneprivatevisibilityconfig_1.ManagedZonePrivateVisibilityConfig)
    ], ManagedZone.prototype, "privateVisibilityConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reverseLookupConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzonereverselookupconfig_1.ManagedZoneReverseLookupConfig; }),
        __metadata("design:type", managedzonereverselookupconfig_1.ManagedZoneReverseLookupConfig)
    ], ManagedZone.prototype, "reverseLookupConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceDirectoryConfig" }),
        (0, class_transformer_1.Type)(function () { return managedzoneservicedirectoryconfig_1.ManagedZoneServiceDirectoryConfig; }),
        __metadata("design:type", managedzoneservicedirectoryconfig_1.ManagedZoneServiceDirectoryConfig)
    ], ManagedZone.prototype, "serviceDirectoryConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visibility" }),
        __metadata("design:type", String)
    ], ManagedZone.prototype, "visibility", void 0);
    return ManagedZone;
}(utils_1.SpeakeasyBase));
exports.ManagedZone = ManagedZone;
