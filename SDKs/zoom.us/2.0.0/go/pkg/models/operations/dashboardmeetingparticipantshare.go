// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DashboardMeetingParticipantShareSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type DashboardMeetingParticipantSharePathParams struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

// DashboardMeetingParticipantShareTypeEnum - The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
type DashboardMeetingParticipantShareTypeEnum string

const (
	DashboardMeetingParticipantShareTypeEnumPast    DashboardMeetingParticipantShareTypeEnum = "past"
	DashboardMeetingParticipantShareTypeEnumPastOne DashboardMeetingParticipantShareTypeEnum = "pastOne"
	DashboardMeetingParticipantShareTypeEnumLive    DashboardMeetingParticipantShareTypeEnum = "live"
)

func (e *DashboardMeetingParticipantShareTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = DashboardMeetingParticipantShareTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipantShareTypeEnum: %s", s)
	}
}

type DashboardMeetingParticipantShareQueryParams struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
	Type *DashboardMeetingParticipantShareTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DashboardMeetingParticipantShareRequest struct {
	PathParams  DashboardMeetingParticipantSharePathParams
	QueryParams DashboardMeetingParticipantShareQueryParams
	Security    DashboardMeetingParticipantShareSecurity
}

type DashboardMeetingParticipantShare200ApplicationXMLParticipantsDetails struct {
	// Type of content shared.
	Content *string
	// End time of sharing.
	EndTime *string
	// Start time of sharing.
	StartTime *string
}

type DashboardMeetingParticipantShare200ApplicationXMLParticipants struct {
	// Array of sharing and recording details.
	Details []DashboardMeetingParticipantShare200ApplicationXMLParticipantsDetails
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string
	// Participant display name.
	UserName *string
}

// DashboardMeetingParticipantShare200ApplicationXML - Pagination object.
type DashboardMeetingParticipantShare200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// Array of participants.
	Participants []DashboardMeetingParticipantShare200ApplicationXMLParticipants
	// The number of all records available across pages.
	TotalRecords *int64
}

type DashboardMeetingParticipantShare200ApplicationJSONParticipantsDetails struct {
	// Type of content shared.
	Content *string `json:"content,omitempty"`
	// End time of sharing.
	EndTime *string `json:"end_time,omitempty"`
	// Start time of sharing.
	StartTime *string `json:"start_time,omitempty"`
}

type DashboardMeetingParticipantShare200ApplicationJSONParticipants struct {
	// Array of sharing and recording details.
	Details []DashboardMeetingParticipantShare200ApplicationJSONParticipantsDetails `json:"details,omitempty"`
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string `json:"id,omitempty"`
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string `json:"user_id,omitempty"`
	// Participant display name.
	UserName *string `json:"user_name,omitempty"`
}

// DashboardMeetingParticipantShare200ApplicationJSON - Pagination object.
type DashboardMeetingParticipantShare200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// Array of participants.
	Participants []DashboardMeetingParticipantShare200ApplicationJSONParticipants `json:"participants,omitempty"`
	// The number of all records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DashboardMeetingParticipantShareResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meeting participants returned.
	DashboardMeetingParticipantShare200ApplicationJSONObject *DashboardMeetingParticipantShare200ApplicationJSON
}
