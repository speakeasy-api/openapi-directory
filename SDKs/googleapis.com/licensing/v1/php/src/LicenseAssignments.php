<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LicenseAssignments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Revoke a license.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteResponse
     */
	public function licensingLicenseAssignmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific user's license by product SKU.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetResponse
     */
	public function licensingLicenseAssignmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign a license.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertResponse
     */
	public function licensingLicenseAssignmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "licenseAssignmentInsert", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all users assigned licenses for a specific product SKU.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductResponse
     */
	public function licensingLicenseAssignmentsListForProduct(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/users', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all users assigned licenses for a specific product SKU.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuResponse
     */
	public function licensingLicenseAssignmentsListForProductAndSku(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/users', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsListForProductAndSkuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchResponse
     */
	public function licensingLicenseAssignmentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "licenseAssignment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reassign a user's product SKU with a different SKU in the same product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateResponse
     */
	public function licensingLicenseAssignmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "licenseAssignment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensingLicenseAssignmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAssignment', 'json');
            }
        }

        return $response;
    }
}