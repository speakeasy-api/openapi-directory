"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import transaction as shared_transaction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostTransactionAccountsIDTransactionsRequestBody:
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of the transaction. A positive amount is a credit, and a negative amount is a debit."""  
    date_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date') }})
    r"""The date when the transaction occurred."""  
    payee: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee') }})
    r"""The payee/merchant of the transaction."""  
    category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of a category for the transaction."""  
    cheque_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cheque_number'), 'exclude': lambda f: f is None }})
    r"""A cheque number for the transaction."""  
    is_transfer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_transfer'), 'exclude': lambda f: f is None }})
    r"""Whether the transaction should be indicated as a transfer."""  
    labels: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A set of comma-separated labels for the transaction."""  
    memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo'), 'exclude': lambda f: f is None }})
    r"""A memo for the transaction."""  
    needs_review: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needs_review'), 'exclude': lambda f: f is None }})
    r"""Whether the transaction needs to be reviewed or not."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""A note for the transaction."""  
    

@dataclasses.dataclass
class PostTransactionAccountsIDTransactionsRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the transaction account."""  
    request_body: Optional[PostTransactionAccountsIDTransactionsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PostTransactionAccountsIDTransactionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Not Allowed"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    transaction: Optional[shared_transaction.Transaction] = dataclasses.field(default=None)
    r"""Success"""  
    