"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adblockingconfiguration as shared_adblockingconfiguration
from ..shared import audiencesegmentgroup as shared_audiencesegmentgroup
from ..shared import clickthroughurlsuffixproperties as shared_clickthroughurlsuffixproperties
from ..shared import creativeoptimizationconfiguration as shared_creativeoptimizationconfiguration
from ..shared import defaultclickthrougheventtagproperties as shared_defaultclickthrougheventtagproperties
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import eventtagoverride as shared_eventtagoverride
from ..shared import lastmodifiedinfo as shared_lastmodifiedinfo
from ..shared import measurementpartnercampaignlink as shared_measurementpartnercampaignlink
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Campaign:
    r"""Contains properties of a Campaign Manager campaign."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this campaign. This is a read-only field that can be left blank."""  
    ad_blocking_configuration: Optional[shared_adblockingconfiguration.AdBlockingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adBlockingConfiguration'), 'exclude': lambda f: f is None }})
    r"""Campaign ad blocking settings."""  
    additional_creative_optimization_configurations: Optional[list[shared_creativeoptimizationconfiguration.CreativeOptimizationConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalCreativeOptimizationConfigurations'), 'exclude': lambda f: f is None }})
    r"""Additional creative optimization configurations for the campaign."""  
    advertiser_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserGroupId'), 'exclude': lambda f: f is None }})
    r"""Advertiser group ID of the associated advertiser."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of this campaign. This is a required field."""  
    advertiser_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Whether this campaign has been archived."""  
    audience_segment_groups: Optional[list[shared_audiencesegmentgroup.AudienceSegmentGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceSegmentGroups'), 'exclude': lambda f: f is None }})
    r"""Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups."""  
    billing_invoice_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingInvoiceCode'), 'exclude': lambda f: f is None }})
    r"""Billing invoice code included in the Campaign Manager client billing invoices associated with the campaign."""  
    click_through_url_suffix_properties: Optional[shared_clickthroughurlsuffixproperties.ClickThroughURLSuffixProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThroughUrlSuffixProperties'), 'exclude': lambda f: f is None }})
    r"""Click Through URL Suffix settings."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Arbitrary comments about this campaign. Must be less than 256 characters long."""  
    create_info: Optional[shared_lastmodifiedinfo.LastModifiedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createInfo'), 'exclude': lambda f: f is None }})
    r"""Modification timestamp."""  
    creative_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeGroupIds'), 'exclude': lambda f: f is None }})
    r"""List of creative group IDs that are assigned to the campaign."""  
    creative_optimization_configuration: Optional[shared_creativeoptimizationconfiguration.CreativeOptimizationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeOptimizationConfiguration'), 'exclude': lambda f: f is None }})
    r"""Creative optimization settings."""  
    default_click_through_event_tag_properties: Optional[shared_defaultclickthrougheventtagproperties.DefaultClickThroughEventTagProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultClickThroughEventTagProperties'), 'exclude': lambda f: f is None }})
    r"""Properties of inheriting and overriding the default click-through event tag. A campaign may override the event tag defined at the advertiser level, and an ad may also override the campaign's setting further."""  
    default_landing_page_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLandingPageId'), 'exclude': lambda f: f is None }})
    r"""The default landing page ID for this campaign."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    event_tag_overrides: Optional[list[shared_eventtagoverride.EventTagOverride]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTagOverrides'), 'exclude': lambda f: f is None }})
    r"""Overrides that can be used to activate or deactivate advertiser event tags."""  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})
    r"""External ID for this campaign."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this campaign. This is a read-only auto-generated field."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#campaign\\"."""  
    last_modified_info: Optional[shared_lastmodifiedinfo.LastModifiedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedInfo'), 'exclude': lambda f: f is None }})
    r"""Modification timestamp."""  
    measurement_partner_link: Optional[shared_measurementpartnercampaignlink.MeasurementPartnerCampaignLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementPartnerLink'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this campaign. This is a required field and must be less than 512 characters long and unique among campaigns of the same advertiser."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this campaign. This is a read-only field that can be left blank."""  
    