"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://api.fraudlabspro.com",
    r"""FraudLabs Pro"""
    "https://virtserver.swaggerhub.com/fraudlabspro/fraudlabspro/1.0",
    r"""SwaggerHub API Auto Mocking"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Online payment fraud detection service. It helps merchants to minimize chargebacks and therefore maximize the revenue. It can be used to detect fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def post_v1_order_feedback(self, request: operations.PostV1OrderFeedbackRequest) -> operations.PostV1OrderFeedbackResponse:
        r"""Feedback the status of an order transaction."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/order/feedback'
        
        query_params = utils.get_query_params(operations.PostV1OrderFeedbackRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV1OrderFeedbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                res.post_v1_order_feedback_200_application_json_string = http_res.content

        return res

    def post_v1_order_screen(self, request: operations.PostV1OrderScreenRequest) -> operations.PostV1OrderScreenResponse:
        r"""Screen order for payment fraud."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/order/screen'
        
        query_params = utils.get_query_params(operations.PostV1OrderScreenRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV1OrderScreenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                res.post_v1_order_screen_200_application_json_string = http_res.content

        return res

    