<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ExcelReports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Download generated excel report
     * 
     * Download the previously generated Excel report to a local drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function downloadExcelReport(
        \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/assess/excel/download', \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadExcelReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate an Excel report
     * 
     * Generate an Excel report which can subsequently be downloaded.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportResponse
     */
	public function generateExcelReport(
        \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/assess/excel', \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateExcelReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->excelStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExcelStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the marketing metrics from an accounting source for a given company.
     * 
     * Request an Excel report for download.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsResponse
     */
	public function getAccountingMarketingMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/accountingMetrics/marketing', \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountingMarketingMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download generated excel report
     * 
     * Download the previously generated Excel report to a local drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExcelReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExcelReportResponse
     */
	public function getExcelReport(
        \OpenAPI\OpenAPI\Models\Operations\GetExcelReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExcelReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/assess/excel/download', \OpenAPI\OpenAPI\Models\Operations\GetExcelReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExcelReportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExcelReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get status of Excel report
     * 
     * Returns the status of the latest report requested.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusResponse
     */
	public function getExcelReportGenerationStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/assess/excel', \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExcelReportGenerationStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->excelStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExcelStatus', 'json');
            }
        }

        return $response;
    }
}