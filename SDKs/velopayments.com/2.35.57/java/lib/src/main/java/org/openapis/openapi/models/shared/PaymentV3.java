/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PaymentV3 {
    /**
     * The amount of the payment in minor units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Long amount;

    public PaymentV3 withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Populated only if the payment was automatically withdrawn during instruction for being invalid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoWithdrawnReasonCode")
    public String autoWithdrawnReasonCode;

    public PaymentV3 withAutoWithdrawnReasonCode(String autoWithdrawnReasonCode) {
        this.autoWithdrawnReasonCode = autoWithdrawnReasonCode;
        return this;
    }
    
    /**
     * The currency that the payment was made in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public PaymentV3 withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Payee data associated with a payment. Either individual or company must be populated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee")
    public PayoutPayeeV3 payee;

    public PaymentV3 withPayee(PayoutPayeeV3 payee) {
        this.payee = payee;
        return this;
    }
    
    /**
     * The id of the payment
     */
    @JsonProperty("paymentId")
    public String paymentId;

    public PaymentV3 withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * &lt;p&gt;Any value here will override the memo value in the parent payout&lt;/p&gt;
     * &lt;p&gt;This should be the reference field on the statement seen by the payee (but not via ACH)&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMemo")
    public String paymentMemo;

    public PaymentV3 withPaymentMemo(String paymentMemo) {
        this.paymentMemo = paymentMemo;
        return this;
    }
    
    /**
     * &lt;p&gt;Metadata about the payment that may be relevant to the specific rails or remote system making the payout&lt;/p&gt;
     * &lt;p&gt;The structure of the data will be dictated by the requirements of the payment rails&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMetadata")
    public String paymentMetadata;

    public PaymentV3 withPaymentMetadata(String paymentMetadata) {
        this.paymentMetadata = paymentMetadata;
        return this;
    }
    
    /**
     * A reference identifier for the payor for the given payee payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payorPaymentId")
    public String payorPaymentId;

    public PaymentV3 withPayorPaymentId(String payorPaymentId) {
        this.payorPaymentId = payorPaymentId;
        return this;
    }
    
    /**
     * Indicates the 3rd party system involved in making this payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("railsId")
    public String railsId;

    public PaymentV3 withRailsId(String railsId) {
        this.railsId = railsId;
        return this;
    }
    
    /**
     * The remoteId supplied by the payor that identifies the payee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteId")
    public String remoteId;

    public PaymentV3 withRemoteId(String remoteId) {
        this.remoteId = remoteId;
        return this;
    }
    
    /**
     * &lt;p&gt;The identifier for the remote payments system if not Velo&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteSystemId")
    public String remoteSystemId;

    public PaymentV3 withRemoteSystemId(String remoteSystemId) {
        this.remoteSystemId = remoteSystemId;
        return this;
    }
    
    /**
     * The identifier of the source account to debit the payment from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountName")
    public String sourceAccountName;

    public PaymentV3 withSourceAccountName(String sourceAccountName) {
        this.sourceAccountName = sourceAccountName;
        return this;
    }
    
    /**
     * Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public PaymentV3 withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmissionType")
    public String transmissionType;

    public PaymentV3 withTransmissionType(String transmissionType) {
        this.transmissionType = transmissionType;
        return this;
    }
    
    /**
     * Can this paynent be withdrawn
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withdrawable")
    public Boolean withdrawable;

    public PaymentV3 withWithdrawable(Boolean withdrawable) {
        this.withdrawable = withdrawable;
        return this;
    }
    
    public PaymentV3(@JsonProperty("paymentId") String paymentId) {
        this.paymentId = paymentId;
  }
}
