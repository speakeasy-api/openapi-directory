// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceRecordStopResponseMessageEnum - Response message
type ConferenceRecordStopResponseMessageEnum string

const (
	ConferenceRecordStopResponseMessageEnumConferenceRecordStopExecuted                 ConferenceRecordStopResponseMessageEnum = "Conference RecordStop Executed"
	ConferenceRecordStopResponseMessageEnumConferenceNameParameterMustBePresent         ConferenceRecordStopResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceRecordStopResponseMessageEnumRecordFileParameterMustBePresent             ConferenceRecordStopResponseMessageEnum = "RecordFile Parameter must be present"
	ConferenceRecordStopResponseMessageEnumConferenceRecordStopFailed                   ConferenceRecordStopResponseMessageEnum = "Conference RecordStop Failed"
	ConferenceRecordStopResponseMessageEnumConferenceRecordStopFailedConferenceNotFound ConferenceRecordStopResponseMessageEnum = "Conference RecordStop Failed -- Conference not found"
)

func (e ConferenceRecordStopResponseMessageEnum) ToPointer() *ConferenceRecordStopResponseMessageEnum {
	return &e
}

func (e *ConferenceRecordStopResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference RecordStop Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "RecordFile Parameter must be present":
		fallthrough
	case "Conference RecordStop Failed":
		fallthrough
	case "Conference RecordStop Failed -- Conference not found":
		*e = ConferenceRecordStopResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceRecordStopResponseMessageEnum: %v", v)
	}
}

// ConferenceRecordStopResponse - Response
type ConferenceRecordStopResponse struct {
	// Response message
	Message ConferenceRecordStopResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
