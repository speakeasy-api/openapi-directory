"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class POSTPMMandateInfoExistingMandateStatusEnum(str, Enum):
    r"""Indicates whether the mandate is an existing mandate."""
    TRUE = 'true'
    FALSE = 'false'

class POSTPMMandateInfoMandateReceivedStatusEnum(str, Enum):
    r"""Indicates whether the mandate is received from the gateway"""
    TRUE = 'true'
    FALSE = 'false'

class POSTPMMandateInfoMitConsentAgreementSrcEnum(str, Enum):
    EXTERNAL = 'External'

class POSTPMMandateInfoMitProfileActionEnum(str, Enum):
    r"""Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    
    * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    
      Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
      
      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    
    
    * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    """
    ACTIVATE = 'Activate'
    PERSIST = 'Persist'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTPMMandateInfo:
    r"""The mandate information for the Credit Card, ACH, or Bank Transfer payment method.
    
    The following mandate fields are specific to the ACH and Bank Transfer payment methods:
    * `mandateId`
    * `mandateReceivedStatus`
    * `existingMandateStatus`
    * `mandateCreationDate`
    * `mandateUpdateDate`
    * `mandateStatus`
    * `mandateReason`
    
    The following mandate fields are specific to the Credit Card payment method:
    * `mitTransactionId`
    * `mitProfileAgreedOn`
    * `mitConsentAgreementRef`
    * `mitConsentAgreementSrc`
    * `mitProfileType`
    * `mitProfileAction`
    """
    
    existing_mandate_status: Optional[POSTPMMandateInfoExistingMandateStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existingMandateStatus'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the mandate is an existing mandate."""  
    mandate_creation_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateCreationDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the mandate was created."""  
    mandate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateId'), 'exclude': lambda f: f is None }})
    r"""The mandate ID."""  
    mandate_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateReason'), 'exclude': lambda f: f is None }})
    r"""The reason of the mandate from the gateway side."""  
    mandate_received_status: Optional[POSTPMMandateInfoMandateReceivedStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateReceivedStatus'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the mandate is received from the gateway"""  
    mandate_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the mandate from the gateway side."""  
    mandate_update_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateUpdateDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the mandate was updated."""  
    mit_consent_agreement_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitConsentAgreementRef'), 'exclude': lambda f: f is None }})
    r"""Reference for the consent agreement that you have established with the customer."""  
    mit_consent_agreement_src: Optional[POSTPMMandateInfoMitConsentAgreementSrcEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitConsentAgreementSrc'), 'exclude': lambda f: f is None }})  
    mit_profile_action: Optional[POSTPMMandateInfoMitProfileActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitProfileAction'), 'exclude': lambda f: f is None }})
    r"""Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    
    * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    
      Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
      
      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    
    
    * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    """  
    mit_profile_agreed_on: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitProfileAgreedOn'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the stored credential profile is agreed. The date format is `yyyy-mm-dd`."""  
    mit_profile_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitProfileType'), 'exclude': lambda f: f is None }})
    r"""Indicates the type of the stored credential profile."""  
    mit_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitTransactionId'), 'exclude': lambda f: f is None }})
    r"""Specifies the ID of the transaction. Only applicable if you set the `mitProfileAction` field to `Persist`."""  
    