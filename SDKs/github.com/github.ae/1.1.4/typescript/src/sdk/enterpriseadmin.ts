/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Enterprise Administration
 */
export class EnterpriseAdmin {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a self-hosted runner to a group for an enterprise
   *
   * @remarks
   * Adds a self-hosted runner to a runner group configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise`
   * scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(
    req: operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse =
        new operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Create a global webhook
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook} - API method documentation
   */
  enterpriseAdminCreateGlobalWebhook(
    req: operations.EnterpriseAdminCreateGlobalWebhookRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateGlobalWebhookRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/hooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateGlobalWebhookResponse =
        new operations.EnterpriseAdminCreateGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an impersonation OAuth token
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token} - API method documentation
   */
  enterpriseAdminCreateImpersonationOAuthToken(
    req: operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}/authorizations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse =
        new operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorization = utils.objectToClass(
              httpRes?.data,
              shared.Authorization
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an organization
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization} - API method documentation
   */
  enterpriseAdminCreateOrg(
    req: operations.EnterpriseAdminCreateOrgRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateOrgRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/organizations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateOrgResponse =
        new operations.EnterpriseAdminCreateOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizationSimple = utils.objectToClass(
              httpRes?.data,
              shared.OrganizationSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a pre-receive environment
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminCreatePreReceiveEnvironment(
    req: operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin/pre-receive-environments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a registration token for an enterprise
   *
   * @remarks
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
   * ```
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-enterprise} - API method documentation
   */
  enterpriseAdminCreateRegistrationTokenForEnterprise(
    req: operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners/registration-token",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse =
        new operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authenticationToken = utils.objectToClass(
              httpRes?.data,
              shared.AuthenticationToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a remove token for an enterprise
   *
   * @remarks
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-enterprise} - API method documentation
   */
  enterpriseAdminCreateRemoveTokenForEnterprise(
    req: operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners/remove-token",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse =
        new operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authenticationToken = utils.objectToClass(
              httpRes?.data,
              shared.AuthenticationToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a self-hosted runner group for an enterprise
   *
   * @remarks
   * Creates a new self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(
    req: operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse =
        new operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runnerGroupsEnterprise = utils.objectToClass(
              httpRes?.data,
              shared.RunnerGroupsEnterprise
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a global webhook
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook} - API method documentation
   */
  enterpriseAdminDeleteGlobalWebhook(
    req: operations.EnterpriseAdminDeleteGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteGlobalWebhookResponse =
        new operations.EnterpriseAdminDeleteGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete an impersonation OAuth token
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token} - API method documentation
   */
  enterpriseAdminDeleteImpersonationOAuthToken(
    req: operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}/authorizations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse =
        new operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a personal access token
   *
   * @remarks
   * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token} - API method documentation
   */
  enterpriseAdminDeletePersonalAccessToken(
    req: operations.EnterpriseAdminDeletePersonalAccessTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePersonalAccessTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePersonalAccessTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/tokens/{token_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePersonalAccessTokenResponse =
        new operations.EnterpriseAdminDeletePersonalAccessTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a pre-receive environment
   *
   * @remarks
   * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * *   _Cannot modify or delete the default environment_
   * *   _Cannot delete environment that has hooks_
   * *   _Cannot delete environment when download is in progress_
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminDeletePreReceiveEnvironment(
    req: operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminDeletePreReceiveEnvironment422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a public key
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key} - API method documentation
   */
  enterpriseAdminDeletePublicKey(
    req: operations.EnterpriseAdminDeletePublicKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeletePublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeletePublicKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/keys/{key_ids}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeletePublicKeyResponse =
        new operations.EnterpriseAdminDeletePublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a self-hosted runner from an enterprise
   *
   * @remarks
   * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise} - API method documentation
   */
  enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(
    req: operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners/{runner_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse =
        new operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a self-hosted runner group from an enterprise
   *
   * @remarks
   * Deletes a self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise} - API method documentation
   */
  enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(
    req: operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse =
        new operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a user
   *
   * @remarks
   * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
   *
   * You can delete any user account except your own.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user} - API method documentation
   */
  enterpriseAdminDeleteUser(
    req: operations.EnterpriseAdminDeleteUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDeleteUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminDeleteUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/users/{username}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDeleteUserResponse =
        new operations.EnterpriseAdminDeleteUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Disable a selected organization for GitHub Actions in an enterprise
   *
   * @remarks
   * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise} - API method documentation
   */
  enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(
    req: operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse =
        new operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Enable a selected organization for GitHub Actions in an enterprise
   *
   * @remarks
   * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise} - API method documentation
   */
  enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(
    req: operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse =
        new operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get all statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics} - API method documentation
   */
  enterpriseAdminGetAllStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAllStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/all";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAllStatsResponse =
        new operations.EnterpriseAdminGetAllStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get allowed actions for an enterprise
   *
   * @remarks
   * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#get-allowed-actions-for-an-enterprise} - API method documentation
   */
  enterpriseAdminGetAllowedActionsEnterprise(
    req: operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/selected-actions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse =
        new operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.selectedActions = utils.objectToClass(
              httpRes?.data,
              shared.SelectedActions
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the global announcement banner
   *
   * @remarks
   * Gets the current message and expiration date of the global announcement banner in your enterprise.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#get-the-global-announcement-banner} - API method documentation
   */
  enterpriseAdminGetAnnouncement(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAnnouncementResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/announcement";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAnnouncementResponse =
        new operations.EnterpriseAdminGetAnnouncementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.announcement = utils.objectToClass(
              httpRes?.data,
              shared.Announcement
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the audit log for an enterprise
   *
   * @remarks
   * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise} - API method documentation
   */
  enterpriseAdminGetAuditLog(
    req: operations.EnterpriseAdminGetAuditLogRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetAuditLogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetAuditLogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/audit-log",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetAuditLogResponse =
        new operations.EnterpriseAdminGetAuditLogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.auditLogEvents = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.auditLogEvents = utils.objectToClass(
              httpRes?.data,
              shared.AuditLogEvent,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get comment statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics} - API method documentation
   */
  enterpriseAdminGetCommentStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetCommentStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/stats/comments";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetCommentStatsResponse =
        new operations.EnterpriseAdminGetCommentStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseCommentOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseCommentOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the download status for a pre-receive environment
   *
   * @remarks
   * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(
    req: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironmentDownloadStatus = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironmentDownloadStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get gist statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics} - API method documentation
   */
  enterpriseAdminGetGistStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetGistStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/gists";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetGistStatsResponse =
        new operations.EnterpriseAdminGetGistStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseGistOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseGistOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get GitHub Actions permissions for an enterprise
   *
   * @remarks
   * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#get-github-actions-permissions-for-an-enterprise} - API method documentation
   */
  enterpriseAdminGetGithubActionsPermissionsEnterprise(
    req: operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse =
        new operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsEnterprisePermissions = utils.objectToClass(
              httpRes?.data,
              shared.ActionsEnterprisePermissions
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a global webhook
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook} - API method documentation
   */
  enterpriseAdminGetGlobalWebhook(
    req: operations.EnterpriseAdminGetGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetGlobalWebhookResponse =
        new operations.EnterpriseAdminGetGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get hooks statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics} - API method documentation
   */
  enterpriseAdminGetHooksStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetHooksStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/hooks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetHooksStatsResponse =
        new operations.EnterpriseAdminGetHooksStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseHookOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseHookOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get issue statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics} - API method documentation
   */
  enterpriseAdminGetIssueStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetIssueStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/issues";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetIssueStatsResponse =
        new operations.EnterpriseAdminGetIssueStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseIssueOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseIssueOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get license information
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information} - API method documentation
   */
  enterpriseAdminGetLicenseInformation(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetLicenseInformationResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/settings/license";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetLicenseInformationResponse =
        new operations.EnterpriseAdminGetLicenseInformationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseInfo = utils.objectToClass(
              httpRes?.data,
              shared.LicenseInfo
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get milestone statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics} - API method documentation
   */
  enterpriseAdminGetMilestoneStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetMilestoneStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/stats/milestones";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetMilestoneStatsResponse =
        new operations.EnterpriseAdminGetMilestoneStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseMilestoneOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseMilestoneOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get organization statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics} - API method documentation
   */
  enterpriseAdminGetOrgStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetOrgStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/orgs";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetOrgStatsResponse =
        new operations.EnterpriseAdminGetOrgStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseOrganizationOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseOrganizationOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get pages statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics} - API method documentation
   */
  enterpriseAdminGetPagesStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPagesStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/pages";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPagesStatsResponse =
        new operations.EnterpriseAdminGetPagesStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterprisePageOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterprisePageOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pre-receive environment
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminGetPreReceiveEnvironment(
    req: operations.EnterpriseAdminGetPreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminGetPreReceiveEnvironmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminGetPreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get pull request statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics} - API method documentation
   */
  enterpriseAdminGetPullRequestStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetPullRequestStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/pulls";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetPullRequestStatsResponse =
        new operations.EnterpriseAdminGetPullRequestStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterprisePullRequestOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterprisePullRequestOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get repository statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics} - API method documentation
   */
  enterpriseAdminGetRepoStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetRepoStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/repos";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetRepoStatsResponse =
        new operations.EnterpriseAdminGetRepoStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseRepositoryOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseRepositoryOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a self-hosted runner for an enterprise
   *
   * @remarks
   * Gets a specific self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise} - API method documentation
   */
  enterpriseAdminGetSelfHostedRunnerForEnterprise(
    req: operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners/{runner_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse =
        new operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runner = utils.objectToClass(httpRes?.data, shared.Runner);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a self-hosted runner group for an enterprise
   *
   * @remarks
   * Gets a specific self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(
    req: operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse =
        new operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runnerGroupsEnterprise = utils.objectToClass(
              httpRes?.data,
              shared.RunnerGroupsEnterprise
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get users statistics
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics} - API method documentation
   */
  enterpriseAdminGetUserStats(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminGetUserStatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/stats/users";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminGetUserStatsResponse =
        new operations.EnterpriseAdminGetUserStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseUserOverview = utils.objectToClass(
              httpRes?.data,
              shared.EnterpriseUserOverview
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List global webhooks
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks} - API method documentation
   */
  enterpriseAdminListGlobalWebhooks(
    req: operations.EnterpriseAdminListGlobalWebhooksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListGlobalWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListGlobalWebhooksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/hooks";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListGlobalWebhooksResponse =
        new operations.EnterpriseAdminListGlobalWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHooks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.globalHooks = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List personal access tokens
   *
   * @remarks
   * Lists personal access tokens for all users, including admin users.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens} - API method documentation
   */
  enterpriseAdminListPersonalAccessTokens(
    req: operations.EnterpriseAdminListPersonalAccessTokensRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPersonalAccessTokensResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPersonalAccessTokensRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/tokens";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPersonalAccessTokensResponse =
        new operations.EnterpriseAdminListPersonalAccessTokensResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorizations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.authorizations = utils.objectToClass(
              httpRes?.data,
              shared.Authorization,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List pre-receive environments
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments} - API method documentation
   */
  enterpriseAdminListPreReceiveEnvironments(
    req: operations.EnterpriseAdminListPreReceiveEnvironmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPreReceiveEnvironmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPreReceiveEnvironmentsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin/pre-receive-environments";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPreReceiveEnvironmentsResponse =
        new operations.EnterpriseAdminListPreReceiveEnvironmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.preReceiveEnvironments = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List public keys
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys} - API method documentation
   */
  enterpriseAdminListPublicKeys(
    req: operations.EnterpriseAdminListPublicKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListPublicKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminListPublicKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/admin/keys";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListPublicKeysResponse =
        new operations.EnterpriseAdminListPublicKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicKeyFulls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.publicKeyFulls = utils.objectToClass(
              httpRes?.data,
              shared.PublicKeyFull,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List runner applications for an enterprise
   *
   * @remarks
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#list-runner-applications-for-an-enterprise} - API method documentation
   */
  enterpriseAdminListRunnerApplicationsForEnterprise(
    req: operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners/downloads",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse =
        new operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runnerApplications = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.runnerApplications = utils.objectToClass(
              httpRes?.data,
              shared.RunnerApplication,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List selected organizations enabled for GitHub Actions in an enterprise
   *
   * @remarks
   * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise} - API method documentation
   */
  enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(
    req: operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/organizations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
        new operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List self-hosted runner groups for an enterprise
   *
   * @remarks
   * Lists all self-hosted runner groups for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise} - API method documentation
   */
  enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(
    req: operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse =
        new operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List self-hosted runners for an enterprise
   *
   * @remarks
   * Lists all self-hosted runners configured for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-for-an-enterprise} - API method documentation
   */
  enterpriseAdminListSelfHostedRunnersForEnterprise(
    req: operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runners",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse =
        new operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List self-hosted runners in a group for an enterprise
   *
   * @remarks
   * Lists the self-hosted runners that are in a specific enterprise group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(
    req: operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse =
        new operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Ping a global webhook
   *
   * @remarks
   * This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook} - API method documentation
   */
  enterpriseAdminPingGlobalWebhook(
    req: operations.EnterpriseAdminPingGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminPingGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminPingGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}/pings",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminPingGlobalWebhookResponse =
        new operations.EnterpriseAdminPingGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Remove the global announcement banner
   *
   * @remarks
   * Removes the global announcement banner in your enterprise.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#remove-the-global-announcement-banner} - API method documentation
   */
  enterpriseAdminRemoveAnnouncement(
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminRemoveAnnouncementResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/announcement";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminRemoveAnnouncementResponse =
        new operations.EnterpriseAdminRemoveAnnouncementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a self-hosted runner from a group for an enterprise
   *
   * @remarks
   * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(
    req: operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse =
        new operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Set allowed actions for an enterprise
   *
   * @remarks
   * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#set-allowed-actions-for-an-enterprise} - API method documentation
   */
  enterpriseAdminSetAllowedActionsEnterprise(
    req: operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/selected-actions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "selectedActions",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse =
        new operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Set the global announcement banner
   *
   * @remarks
   * Sets the message and expiration time for the global announcement banner in your enterprise.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#set-the-global-announcement-banner} - API method documentation
   */
  enterpriseAdminSetAnnouncement(
    req: shared.Announcement,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetAnnouncementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Announcement(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/announcement";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetAnnouncementResponse =
        new operations.EnterpriseAdminSetAnnouncementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.announcement = utils.objectToClass(
              httpRes?.data,
              shared.Announcement
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Set GitHub Actions permissions for an enterprise
   *
   * @remarks
   * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#set-github-actions-permissions-for-an-enterprise} - API method documentation
   */
  enterpriseAdminSetGithubActionsPermissionsEnterprise(
    req: operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse =
        new operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Set selected organizations enabled for GitHub Actions in an enterprise
   *
   * @remarks
   * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise} - API method documentation
   */
  enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
    req: operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/permissions/organizations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
        new operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Set self-hosted runners in a group for an enterprise
   *
   * @remarks
   * Replaces the list of self-hosted runners that are part of an enterprise runner group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(
    req: operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse =
        new operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Start a pre-receive environment download
   *
   * @remarks
   * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
   *
   * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * * _Cannot modify or delete the default environment_
   * * _Can not start a new download when a download is in progress_
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download} - API method documentation
   */
  enterpriseAdminStartPreReceiveEnvironmentDownload(
    req: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse =
        new operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironmentDownloadStatus = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironmentDownloadStatus
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Suspend a user
   *
   * @remarks
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
   *
   * You can suspend any user account except your own.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user} - API method documentation
   */
  enterpriseAdminSuspendUser(
    req: operations.EnterpriseAdminSuspendUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminSuspendUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminSuspendUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/suspended",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminSuspendUserResponse =
        new operations.EnterpriseAdminSuspendUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Unsuspend a user
   *
   * @remarks
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user} - API method documentation
   */
  enterpriseAdminUnsuspendUser(
    req: operations.EnterpriseAdminUnsuspendUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUnsuspendUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUnsuspendUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/suspended",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUnsuspendUserResponse =
        new operations.EnterpriseAdminUnsuspendUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a global webhook
   *
   * @remarks
   * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook} - API method documentation
   */
  enterpriseAdminUpdateGlobalWebhook(
    req: operations.EnterpriseAdminUpdateGlobalWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateGlobalWebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateGlobalWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/hooks/{hook_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateGlobalWebhookResponse =
        new operations.EnterpriseAdminUpdateGlobalWebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalHook2 = utils.objectToClass(
              httpRes?.data,
              shared.GlobalHook2
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an organization name
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name} - API method documentation
   */
  enterpriseAdminUpdateOrgName(
    req: operations.EnterpriseAdminUpdateOrgNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateOrgNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdateOrgNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/organizations/{org}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateOrgNameResponse =
        new operations.EnterpriseAdminUpdateOrgNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminUpdateOrgName202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminUpdateOrgName202ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a pre-receive environment
   *
   * @remarks
   * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment} - API method documentation
   */
  enterpriseAdminUpdatePreReceiveEnvironment(
    req: operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/pre-receive-environments/{pre_receive_environment_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse =
        new operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preReceiveEnvironment = utils.objectToClass(
              httpRes?.data,
              shared.PreReceiveEnvironment
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a self-hosted runner group for an enterprise
   *
   * @remarks
   * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise} - API method documentation
   */
  enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(
    req: operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse =
        new operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runnerGroupsEnterprise = utils.objectToClass(
              httpRes?.data,
              shared.RunnerGroupsEnterprise
            );
          }
          break;
      }

      return res;
    });
  }
}
