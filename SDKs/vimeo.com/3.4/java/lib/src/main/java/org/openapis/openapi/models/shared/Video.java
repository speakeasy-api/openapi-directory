/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Video - The video belongs to the category.
 */
public class Video {
    /**
     * The categories to which this video belongs.
     */
    @JsonProperty("categories")
    public Category[] categories;
    public Video withCategories(Category[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * The content ratings of this video.
     */
    @JsonProperty("content_rating")
    public String[] contentRating;
    public Video withContentRating(String[] contentRating) {
        this.contentRating = contentRating;
        return this;
    }
    
    /**
     * The context of the video's subscription, if this video is part of a subscription.
     */
    @JsonProperty("context")
    public VideoContext context;
    public Video withContext(VideoContext context) {
        this.context = context;
        return this;
    }
    
    /**
     * The time in ISO 8601 format when the video was created.
     */
    @JsonProperty("created_time")
    public String createdTime;
    public Video withCreatedTime(String createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    /**
     * A brief explanation of the video's content.
     */
    @JsonProperty("description")
    public String description;
    public Video withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The video's duration in seconds.
     */
    @JsonProperty("duration")
    public Double duration;
    public Video withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Information about embedding this video.
     */
    @JsonProperty("embed")
    public EmbedSettings embed;
    public Video withEmbed(EmbedSettings embed) {
        this.embed = embed;
        return this;
    }
    
    /**
     * The video's height in pixels.
     */
    @JsonProperty("height")
    public Double height;
    public Video withHeight(Double height) {
        this.height = height;
        return this;
    }
    
    /**
     * The video's primary language.
     */
    @JsonProperty("language")
    public String language;
    public Video withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The time in ISO 8601 format when the user last modified the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_user_action_event_date")
    public String lastUserActionEventDate;
    public Video withLastUserActionEventDate(String lastUserActionEventDate) {
        this.lastUserActionEventDate = lastUserActionEventDate;
        return this;
    }
    
    /**
     * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
     * 
     * Option descriptions:
     *  * `by` - Attribution
     *  * `by-nc` - Attribution Non-Commercial
     *  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
     *  * `by-nc-sa` - Attribution Non-Commercial Share Alike
     *  * `by-nd` - Attribution No Derivatives
     *  * `by-sa` - Attribution Share Alike
     *  * `cc0` - Public Domain Dedication
     * 
     */
    @JsonProperty("license")
    public VideoLicenseEnum license;
    public Video withLicense(VideoLicenseEnum license) {
        this.license = license;
        return this;
    }
    
    /**
     * The link to the video.
     */
    @JsonProperty("link")
    public String link;
    public Video withLink(String link) {
        this.link = link;
        return this;
    }
    
    /**
     * The video's metadata.
     */
    @JsonProperty("metadata")
    public VideoMetadata metadata;
    public Video withMetadata(VideoMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The time in ISO 8601 format when the video metadata was last modified.
     */
    @JsonProperty("modified_time")
    public String modifiedTime;
    public Video withModifiedTime(String modifiedTime) {
        this.modifiedTime = modifiedTime;
        return this;
    }
    
    /**
     * The video's title.
     */
    @JsonProperty("name")
    public String name;
    public Video withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Information about the folder that contains this video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folder")
    public VideoProject parentFolder;
    public Video withParentFolder(VideoProject parentFolder) {
        this.parentFolder = parentFolder;
        return this;
    }
    
    /**
     * The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public Video withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The active picture for this video.
     */
    @JsonProperty("pictures")
    public Picture pictures;
    public Video withPictures(Picture pictures) {
        this.pictures = pictures;
        return this;
    }
    
    /**
     * The video's privacy setting.
     */
    @JsonProperty("privacy")
    public VideoPrivacy privacy;
    public Video withPrivacy(VideoPrivacy privacy) {
        this.privacy = privacy;
        return this;
    }
    
    /**
     * The time in ISO 8601 format when the video was released.
     */
    @JsonProperty("release_time")
    public String releaseTime;
    public Video withReleaseTime(String releaseTime) {
        this.releaseTime = releaseTime;
        return this;
    }
    
    /**
     * The resource key string of the video.
     */
    @JsonProperty("resource_key")
    public String resourceKey;
    public Video withResourceKey(String resourceKey) {
        this.resourceKey = resourceKey;
        return this;
    }
    
    /**
     * 360 spatial data.
     */
    @JsonProperty("spatial")
    public VideoSpatial spatial;
    public Video withSpatial(VideoSpatial spatial) {
        this.spatial = spatial;
        return this;
    }
    
    /**
     * A collection of stats associated with this video.
     */
    @JsonProperty("stats")
    public VideoStats stats;
    public Video withStats(VideoStats stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
     * 
     * Option descriptions:
     *  * `available` - The video is available.
     *  * `quota_exceeded` - The user's quota is exceeded with this video.
     *  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
     *  * `transcode_starting` - Transcoding is beginning for the video.
     *  * `transcoding` - Transcoding is underway for the video.
     *  * `transcoding_error` - There was an error in transcoding the video.
     *  * `unavailable` - The video is unavailable.
     *  * `uploading` - The video is being uploaded.
     *  * `uploading_error` - There was an error in uploading the video.
     * 
     */
    @JsonProperty("status")
    public VideoStatusEnum status;
    public Video withStatus(VideoStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * An array of all tags assigned to this video.
     */
    @JsonProperty("tags")
    public Tag[] tags;
    public Video withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The transcode information for a video upload.
     */
    @JsonProperty("transcode")
    public VideoTranscode transcode;
    public Video withTranscode(VideoTranscode transcode) {
        this.transcode = transcode;
        return this;
    }
    
    /**
     * The upload information for this video.
     */
    @JsonProperty("upload")
    public VideoUpload upload;
    public Video withUpload(VideoUpload upload) {
        this.upload = upload;
        return this;
    }
    
    /**
     * The video's canonical relative URI.
     */
    @JsonProperty("uri")
    public String uri;
    public Video withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    /**
     * The video owner.
     */
    @JsonProperty("user")
    public VideoUser user;
    public Video withUser(VideoUser user) {
        this.user = user;
        return this;
    }
    
    /**
     * The video's width in pixels.
     */
    @JsonProperty("width")
    public Double width;
    public Video withWidth(Double width) {
        this.width = width;
        return this;
    }
    
}
