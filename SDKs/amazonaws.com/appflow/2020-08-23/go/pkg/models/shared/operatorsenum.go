// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OperatorsEnum string

const (
	OperatorsEnumProjection           OperatorsEnum = "PROJECTION"
	OperatorsEnumLessThan             OperatorsEnum = "LESS_THAN"
	OperatorsEnumGreaterThan          OperatorsEnum = "GREATER_THAN"
	OperatorsEnumContains             OperatorsEnum = "CONTAINS"
	OperatorsEnumBetween              OperatorsEnum = "BETWEEN"
	OperatorsEnumLessThanOrEqualTo    OperatorsEnum = "LESS_THAN_OR_EQUAL_TO"
	OperatorsEnumGreaterThanOrEqualTo OperatorsEnum = "GREATER_THAN_OR_EQUAL_TO"
	OperatorsEnumEqualTo              OperatorsEnum = "EQUAL_TO"
	OperatorsEnumNotEqualTo           OperatorsEnum = "NOT_EQUAL_TO"
	OperatorsEnumAddition             OperatorsEnum = "ADDITION"
	OperatorsEnumMultiplication       OperatorsEnum = "MULTIPLICATION"
	OperatorsEnumDivision             OperatorsEnum = "DIVISION"
	OperatorsEnumSubtraction          OperatorsEnum = "SUBTRACTION"
	OperatorsEnumMaskAll              OperatorsEnum = "MASK_ALL"
	OperatorsEnumMaskFirstN           OperatorsEnum = "MASK_FIRST_N"
	OperatorsEnumMaskLastN            OperatorsEnum = "MASK_LAST_N"
	OperatorsEnumValidateNonNull      OperatorsEnum = "VALIDATE_NON_NULL"
	OperatorsEnumValidateNonZero      OperatorsEnum = "VALIDATE_NON_ZERO"
	OperatorsEnumValidateNonNegative  OperatorsEnum = "VALIDATE_NON_NEGATIVE"
	OperatorsEnumValidateNumeric      OperatorsEnum = "VALIDATE_NUMERIC"
	OperatorsEnumNoOp                 OperatorsEnum = "NO_OP"
)

func (e *OperatorsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROJECTION":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "BETWEEN":
		fallthrough
	case "LESS_THAN_OR_EQUAL_TO":
		fallthrough
	case "GREATER_THAN_OR_EQUAL_TO":
		fallthrough
	case "EQUAL_TO":
		fallthrough
	case "NOT_EQUAL_TO":
		fallthrough
	case "ADDITION":
		fallthrough
	case "MULTIPLICATION":
		fallthrough
	case "DIVISION":
		fallthrough
	case "SUBTRACTION":
		fallthrough
	case "MASK_ALL":
		fallthrough
	case "MASK_FIRST_N":
		fallthrough
	case "MASK_LAST_N":
		fallthrough
	case "VALIDATE_NON_NULL":
		fallthrough
	case "VALIDATE_NON_ZERO":
		fallthrough
	case "VALIDATE_NON_NEGATIVE":
		fallthrough
	case "VALIDATE_NUMERIC":
		fallthrough
	case "NO_OP":
		*e = OperatorsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OperatorsEnum: %s", s)
	}
}
