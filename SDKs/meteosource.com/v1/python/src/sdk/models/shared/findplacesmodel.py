"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindPlacesModel:
    r"""Successful Response"""
    
    adm_area1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adm_area1'), 'exclude': lambda f: f is None }})
    r"""first-level administrative area (a US state, for example)"""  
    adm_area2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adm_area2'), 'exclude': lambda f: f is None }})
    r"""second-level administrative area (a US county, for example)"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""name of the country"""  
    lat: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude of the point, always in the format \<float><N/S>, for example ``23.5S``"""  
    lon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lon'), 'exclude': lambda f: f is None }})
    r"""Longitude of the point, always in format \<float><E/W>, for example ``23.5W``"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name of the place"""  
    place_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place_id'), 'exclude': lambda f: f is None }})
    r"""unique identifier of the place, which can be used in /point and /map endpoints"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Timezone of the point in tzinfo format."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The character of the place. May be one of the following values:
    
    * administrative areas (states, counties, districts...): ``administrative_area``
    * country: ``country``
    * a different political entity from a country (for example, a dependent teritory): ``political_entity``
    * villages, towns and cities: ``settlement``
    * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal``
    * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,
        ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula``
    * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon``
    * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert``
    * places based on postcodes: ``postcode``
    """  
    