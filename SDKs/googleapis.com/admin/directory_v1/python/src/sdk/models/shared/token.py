"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Token:
    r"""JSON template for token resource in Directory API."""
    
    anonymous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anonymous'), 'exclude': lambda f: f is None }})
    r"""Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The Client ID of the application the token is issued to."""  
    display_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayText'), 'exclude': lambda f: f is None }})
    r"""The displayable name of the application the token is issued to."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The type of the API resource. This is always `admin#directory#token`."""  
    native_app: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeApp'), 'exclude': lambda f: f is None }})
    r"""Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""A list of authorization scopes the application is granted."""  
    user_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userKey'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the user that issued the token."""  
    