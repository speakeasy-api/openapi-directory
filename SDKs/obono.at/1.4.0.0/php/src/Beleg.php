<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Beleg 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Signs a receipt and stores it in the "Datenerfassungsprotokoll".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddBelegRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddBelegResponse
     */
	public function addBeleg(
        \OpenAPI\OpenAPI\Models\Operations\AddBelegRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddBelegResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', \OpenAPI\OpenAPI\Models\Operations\AddBelegRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "belegdaten", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddBelegResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Generates an `Abschlussbeleg`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussResponse
     */
	public function createAbschluss(
        \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registrierkassen/{registrierkasseUuid}/abschluss', \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "abschlussbelegdaten", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAbschlussResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBelegRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBelegResponse
     */
	public function getBeleg(
        \OpenAPI\OpenAPI\Models\Operations\GetBelegRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBelegResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', \OpenAPI\OpenAPI\Models\Operations\GetBelegRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBelegResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beleg = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Beleg', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Retrieves the `Beleg` collection from the "Datenerfassungsprotokoll".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBelegeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBelegeResponse
     */
	public function getBelege(
        \OpenAPI\OpenAPI\Models\Operations\GetBelegeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBelegeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registrierkassen/{registrierkasseUuid}/belege', \OpenAPI\OpenAPI\Models\Operations\GetBelegeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBelegeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBelegeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->belege = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Belege', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidResponse
     */
	public function getBelegeBelegUuid(
        \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/belege/{belegUuid}', \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBelegeBelegUuidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beleg = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Beleg', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}