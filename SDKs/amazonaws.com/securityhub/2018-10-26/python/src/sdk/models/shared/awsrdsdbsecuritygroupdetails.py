"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsrdsdbsecuritygroupec2securitygroup as shared_awsrdsdbsecuritygroupec2securitygroup
from ..shared import awsrdsdbsecuritygroupiprange as shared_awsrdsdbsecuritygroupiprange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsRdsDbSecurityGroupDetails:
    r"""Provides information about an Amazon RDS DB security group."""
    
    db_security_group_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSecurityGroupArn'), 'exclude': lambda f: f is None }})  
    db_security_group_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSecurityGroupDescription'), 'exclude': lambda f: f is None }})  
    db_security_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSecurityGroupName'), 'exclude': lambda f: f is None }})  
    ec2_security_groups: Optional[list[shared_awsrdsdbsecuritygroupec2securitygroup.AwsRdsDbSecurityGroupEc2SecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2SecurityGroups'), 'exclude': lambda f: f is None }})  
    ip_ranges: Optional[list[shared_awsrdsdbsecuritygroupiprange.AwsRdsDbSecurityGroupIPRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpRanges'), 'exclude': lambda f: f is None }})  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    