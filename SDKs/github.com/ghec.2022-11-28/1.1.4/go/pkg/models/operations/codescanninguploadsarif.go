// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type CodeScanningUploadSarifPathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type CodeScanningUploadSarifRequestBody struct {
	// The base directory used in the analysis, as it appears in the SARIF file.
	// This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
	CheckoutURI *string `json:"checkout_uri,omitempty"`
	// The SHA of the commit to which the analysis you are uploading relates.
	CommitSha string `json:"commit_sha"`
	// The full Git reference, formatted as `refs/heads/<branch name>`,
	// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref string `json:"ref"`
	// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-cloud@latest//code-security/secure-coding/sarif-support-for-code-scanning)."
	Sarif string `json:"sarif"`
	// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
	ToolName *string `json:"tool_name,omitempty"`
	// Whether the SARIF file will be validated according to the code scanning specifications.
	// This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
	Validate *bool `json:"validate,omitempty"`
}

type CodeScanningUploadSarifRequest struct {
	PathParams CodeScanningUploadSarifPathParams
	Request    CodeScanningUploadSarifRequestBody `request:"mediaType=application/json"`
}

// CodeScanningUploadSarif503ApplicationJSON - Service unavailable
type CodeScanningUploadSarif503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type CodeScanningUploadSarifResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository
	BasicError *shared.BasicError
	// Response
	CodeScanningSarifsReceipt *shared.CodeScanningSarifsReceipt
	// Service unavailable
	CodeScanningUploadSarif503ApplicationJSONObject *CodeScanningUploadSarif503ApplicationJSON
}
