"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scoringdetail as shared_scoringdetail
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FantasyDefenseSeason:
    
    assisted_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistedTackles'), 'exclude': lambda f: f is None }})  
    auction_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuctionValue'), 'exclude': lambda f: f is None }})  
    auction_value_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuctionValuePPR'), 'exclude': lambda f: f is None }})  
    average_draft_position: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPosition'), 'exclude': lambda f: f is None }})  
    average_draft_position2_qb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPosition2QB'), 'exclude': lambda f: f is None }})  
    average_draft_position_dynasty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPositionDynasty'), 'exclude': lambda f: f is None }})  
    average_draft_position_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPositionPPR'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnYards'), 'exclude': lambda f: f is None }})  
    blocked_kicks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKicks'), 'exclude': lambda f: f is None }})  
    defensive_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefensiveTouchdowns'), 'exclude': lambda f: f is None }})  
    draft_kings_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    draft_kings_kicker_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsKickerFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    draft_kings_quarterback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsQuarterbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    draft_kings_runningback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsRunningbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    draft_kings_tight_end_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsTightEndFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    draft_kings_wide_receiver_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsWideReceiverFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_kicker_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelKickerFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_quarterback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelQuarterbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_runningback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelRunningbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_tight_end_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelTightEndFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fan_duel_wide_receiver_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelWideReceiverFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_kicker_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftKickerFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_quarterback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftQuarterbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_runningback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftRunningbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_tight_end_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftTightEndFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_draft_wide_receiver_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftWideReceiverFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPoints'), 'exclude': lambda f: f is None }})  
    fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    fantasy_points_draft_kings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsDraftKings'), 'exclude': lambda f: f is None }})  
    fantasy_points_fan_duel: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFanDuel'), 'exclude': lambda f: f is None }})  
    fantasy_points_fantasy_draft: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFantasyDraft'), 'exclude': lambda f: f is None }})  
    fantasy_points_yahoo: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsYahoo'), 'exclude': lambda f: f is None }})  
    field_goal_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    field_goal_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnYards'), 'exclude': lambda f: f is None }})  
    fourth_down_attempts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthDownAttempts'), 'exclude': lambda f: f is None }})  
    fourth_down_conversions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthDownConversions'), 'exclude': lambda f: f is None }})  
    fumble_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    fumble_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnYards'), 'exclude': lambda f: f is None }})  
    fumbles_forced: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesForced'), 'exclude': lambda f: f is None }})  
    fumbles_recovered: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesRecovered'), 'exclude': lambda f: f is None }})  
    games: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Games'), 'exclude': lambda f: f is None }})  
    global_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalTeamID'), 'exclude': lambda f: f is None }})  
    humidity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Humidity'), 'exclude': lambda f: f is None }})  
    interception_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    interception_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnYards'), 'exclude': lambda f: f is None }})  
    interceptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interceptions'), 'exclude': lambda f: f is None }})  
    kicker_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickerFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    kick_return_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnLong'), 'exclude': lambda f: f is None }})  
    kick_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturns'), 'exclude': lambda f: f is None }})  
    kick_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    kick_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYards'), 'exclude': lambda f: f is None }})  
    offensive_yards_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveYardsAllowed'), 'exclude': lambda f: f is None }})  
    passes_defended: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassesDefended'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointsAllowed'), 'exclude': lambda f: f is None }})  
    points_allowed_by_defense_special_teams: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointsAllowedByDefenseSpecialTeams'), 'exclude': lambda f: f is None }})  
    punt_return_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnLong'), 'exclude': lambda f: f is None }})  
    punt_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturns'), 'exclude': lambda f: f is None }})  
    punt_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    punt_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYards'), 'exclude': lambda f: f is None }})  
    quarterback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    quarterback_hits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackHits'), 'exclude': lambda f: f is None }})  
    runningback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunningbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    sacks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sacks'), 'exclude': lambda f: f is None }})  
    sack_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SackYards'), 'exclude': lambda f: f is None }})  
    safeties: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Safeties'), 'exclude': lambda f: f is None }})  
    scoring_details: Optional[list[shared_scoringdetail.ScoringDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoringDetails'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    solo_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoloTackles'), 'exclude': lambda f: f is None }})  
    special_teams_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsTouchdowns'), 'exclude': lambda f: f is None }})  
    tackles_for_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLoss'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamID'), 'exclude': lambda f: f is None }})  
    temperature: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }})  
    third_down_attempts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdDownAttempts'), 'exclude': lambda f: f is None }})  
    third_down_conversions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdDownConversions'), 'exclude': lambda f: f is None }})  
    tight_end_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TightEndFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    touchdowns_scored: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TouchdownsScored'), 'exclude': lambda f: f is None }})  
    two_point_conversion_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReturns'), 'exclude': lambda f: f is None }})  
    wide_receiver_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WideReceiverFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    wind_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindSpeed'), 'exclude': lambda f: f is None }})  
    yahoo_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    yahoo_kicker_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooKickerFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    yahoo_quarterback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooQuarterbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    yahoo_runningback_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooRunningbackFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    yahoo_tight_end_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooTightEndFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    yahoo_wide_receiver_fantasy_points_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YahooWideReceiverFantasyPointsAllowed'), 'exclude': lambda f: f is None }})  
    