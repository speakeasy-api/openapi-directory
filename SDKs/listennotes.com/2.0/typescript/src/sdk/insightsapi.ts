/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints to get insights of podcasts, e.g., audience demographics
 */
export class InsightsAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetch audience demographics for a podcast
   *
   * @remarks
   * Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
   */
  getPodcastAudience(
    req: operations.GetPodcastAudienceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPodcastAudienceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPodcastAudienceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/podcasts/{id}/audience",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPodcastAudienceResponse =
        new operations.GetPodcastAudienceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.podcastAudienceResponse = utils.objectToClass(
              httpRes?.data,
              shared.PodcastAudienceResponse
            );
          }
          break;
        case httpRes?.status == 401 ||
          httpRes?.status == 404 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }
}
