"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import networkdirection_enum as shared_networkdirection_enum
from ..shared import portrange as shared_portrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Network:
    r"""The details of network-related information about a finding."""
    
    destination_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationDomain'), 'exclude': lambda f: f is None }})  
    destination_ip_v4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationIpV4'), 'exclude': lambda f: f is None }})  
    destination_ip_v6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationIpV6'), 'exclude': lambda f: f is None }})  
    destination_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationPort'), 'exclude': lambda f: f is None }})  
    direction: Optional[shared_networkdirection_enum.NetworkDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Direction'), 'exclude': lambda f: f is None }})  
    open_port_range: Optional[shared_portrange.PortRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenPortRange'), 'exclude': lambda f: f is None }})  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Protocol'), 'exclude': lambda f: f is None }})  
    source_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceDomain'), 'exclude': lambda f: f is None }})  
    source_ip_v4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceIpV4'), 'exclude': lambda f: f is None }})  
    source_ip_v6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceIpV6'), 'exclude': lambda f: f is None }})  
    source_mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceMac'), 'exclude': lambda f: f is None }})  
    source_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourcePort'), 'exclude': lambda f: f is None }})  
    