/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthorAssociationEnum } from "./authorassociationenum";
import { Link } from "./link";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { ReactionRollup } from "./reactionrollup";
import { Expose, Transform, Type } from "class-transformer";

export class ReviewCommentLinks extends SpeakeasyBase {
  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "html" })
  @Type(() => Link)
  html: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_request" })
  @Type(() => Link)
  pullRequest: Link;

  /**
   * Hypermedia Link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => Link)
  self: Link;
}

/**
 * The side of the first line of the range for a multi-line comment.
 */
export enum ReviewCommentSideEnum {
  Left = "LEFT",
  Right = "RIGHT",
}

/**
 * The side of the first line of the range for a multi-line comment.
 */
export enum ReviewCommentStartSideEnum {
  Left = "LEFT",
  Right = "RIGHT",
}

/**
 * Legacy Review Comment
 */
export class ReviewComment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => ReviewCommentLinks)
  links: ReviewCommentLinks;

  /**
   * How the author is associated with the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_association" })
  authorAssociation: AuthorAssociationEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_html" })
  bodyHtml?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_text" })
  bodyText?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commit_id" })
  commitId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "diff_hunk" })
  diffHunk: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "in_reply_to_id" })
  inReplyToId?: number;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line" })
  line?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "original_commit_id" })
  originalCommitId: string;

  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_line" })
  originalLine?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "original_position" })
  originalPosition: number;

  /**
   * The original first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_start_line" })
  originalStartLine?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pull_request_review_id" })
  pullRequestReviewId: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pull_request_url" })
  pullRequestUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  @Type(() => ReactionRollup)
  reactions?: ReactionRollup;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "side" })
  side?: ReviewCommentSideEnum;

  /**
   * The first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_line" })
  startLine?: number;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_side" })
  startSide?: ReviewCommentStartSideEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NullableSimpleUser)
  user: NullableSimpleUser;
}
