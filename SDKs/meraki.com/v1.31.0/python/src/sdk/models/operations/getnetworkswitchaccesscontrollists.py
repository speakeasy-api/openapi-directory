"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSwitchAccessControlListsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    
class GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum(str, Enum):
    r"""IP address version"""
    ANY = 'any'
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'

class GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum(str, Enum):
    r"""'allow' or 'deny' traffic specified by this rule"""
    ALLOW = 'allow'
    DENY = 'deny'

class GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum(str, Enum):
    r"""The type of protocol"""
    ANY = 'any'
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchAccessControlLists200ApplicationJSONRules:
    
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Description of the rule (optional)"""  
    dst_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstCidr'), 'exclude': lambda f: f is None }})
    r"""Destination IP address (in IP or CIDR notation)"""  
    dst_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPort'), 'exclude': lambda f: f is None }})
    r"""Destination port"""  
    ip_version: Optional[GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipVersion'), 'exclude': lambda f: f is None }})
    r"""IP address version"""  
    policy: Optional[GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""'allow' or 'deny' traffic specified by this rule"""  
    protocol: Optional[GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""The type of protocol"""  
    src_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcCidr'), 'exclude': lambda f: f is None }})
    r"""Source IP address (in IP or CIDR notation)"""  
    src_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""Source port"""  
    vlan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""ncoming traffic VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchAccessControlLists200ApplicationJSON:
    r"""Successful operation"""
    
    rules: Optional[list[GetNetworkSwitchAccessControlLists200ApplicationJSONRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""An ordered array of the access control list rules"""  
    

@dataclasses.dataclass
class GetNetworkSwitchAccessControlListsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_switch_access_control_lists_200_application_json_object: Optional[GetNetworkSwitchAccessControlLists200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    