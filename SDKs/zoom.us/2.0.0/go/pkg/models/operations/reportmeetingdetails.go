// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ReportMeetingDetailsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ReportMeetingDetailsRequest struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type ReportMeetingDetails200ApplicationXMLCustomKeys struct {
	// Custom key associated with the user.
	Key *string
	// Value of the custom key associated with the user.
	Value *string
}

type ReportMeetingDetails200ApplicationXMLTrackingFields struct {
	// Tracking fields type.
	Field *string
	// Tracking fields value.
	Value *string
}

// ReportMeetingDetails200ApplicationXML - **HTTP Status Code:** `200`<br>
// Meeting details returned.<br>
// This is only available for paid account.
type ReportMeetingDetails200ApplicationXML struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportMeetingDetails200ApplicationXMLCustomKeys
	// Department of the host.
	Dept *string
	// Meeting duration.
	Duration *int64
	// Meeting end time.
	EndTime *time.Time
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// Number of meeting participants.
	ParticipantsCount *int64
	// Meeting start time.
	StartTime *time.Time
	// Meeting topic.
	Topic *string
	// Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
	//
	// **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
	TotalMinutes *int64
	// Tracking fields.
	TrackingFields []ReportMeetingDetails200ApplicationXMLTrackingFields
	// Meeting type.
	Type *int64
	// User email.
	UserEmail *string
	// User display name.
	UserName *string
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

type ReportMeetingDetails200ApplicationJSONCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

type ReportMeetingDetails200ApplicationJSONTrackingFields struct {
	// Tracking fields type.
	Field *string `json:"field,omitempty"`
	// Tracking fields value.
	Value *string `json:"value,omitempty"`
}

// ReportMeetingDetails200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Meeting details returned.<br>
// This is only available for paid account.
type ReportMeetingDetails200ApplicationJSON struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportMeetingDetails200ApplicationJSONCustomKeys `json:"custom_keys,omitempty"`
	// Department of the host.
	Dept *string `json:"dept,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// Meeting end time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// Number of meeting participants.
	ParticipantsCount *int64 `json:"participants_count,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
	//
	// **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
	TotalMinutes *int64 `json:"total_minutes,omitempty"`
	// Tracking fields.
	TrackingFields []ReportMeetingDetails200ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting type.
	Type *int64 `json:"type,omitempty"`
	// User email.
	UserEmail *string `json:"user_email,omitempty"`
	// User display name.
	UserName *string `json:"user_name,omitempty"`
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type ReportMeetingDetailsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meeting details returned.<br>
	// This is only available for paid account.
	ReportMeetingDetails200ApplicationJSONObject *ReportMeetingDetails200ApplicationJSON
}
