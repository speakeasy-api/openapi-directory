// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAPICacheRequestBodyAPICachingBehaviorEnum - <p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>
type UpdateAPICacheRequestBodyAPICachingBehaviorEnum string

const (
	UpdateAPICacheRequestBodyAPICachingBehaviorEnumFullRequestCaching UpdateAPICacheRequestBodyAPICachingBehaviorEnum = "FULL_REQUEST_CACHING"
	UpdateAPICacheRequestBodyAPICachingBehaviorEnumPerResolverCaching UpdateAPICacheRequestBodyAPICachingBehaviorEnum = "PER_RESOLVER_CACHING"
)

func (e UpdateAPICacheRequestBodyAPICachingBehaviorEnum) ToPointer() *UpdateAPICacheRequestBodyAPICachingBehaviorEnum {
	return &e
}

func (e *UpdateAPICacheRequestBodyAPICachingBehaviorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL_REQUEST_CACHING":
		fallthrough
	case "PER_RESOLVER_CACHING":
		*e = UpdateAPICacheRequestBodyAPICachingBehaviorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAPICacheRequestBodyAPICachingBehaviorEnum: %v", v)
	}
}

// UpdateAPICacheRequestBodyTypeEnum - <p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>
type UpdateAPICacheRequestBodyTypeEnum string

const (
	UpdateAPICacheRequestBodyTypeEnumT2Small   UpdateAPICacheRequestBodyTypeEnum = "T2_SMALL"
	UpdateAPICacheRequestBodyTypeEnumT2Medium  UpdateAPICacheRequestBodyTypeEnum = "T2_MEDIUM"
	UpdateAPICacheRequestBodyTypeEnumR4Large   UpdateAPICacheRequestBodyTypeEnum = "R4_LARGE"
	UpdateAPICacheRequestBodyTypeEnumR4Xlarge  UpdateAPICacheRequestBodyTypeEnum = "R4_XLARGE"
	UpdateAPICacheRequestBodyTypeEnumR42Xlarge UpdateAPICacheRequestBodyTypeEnum = "R4_2XLARGE"
	UpdateAPICacheRequestBodyTypeEnumR44Xlarge UpdateAPICacheRequestBodyTypeEnum = "R4_4XLARGE"
	UpdateAPICacheRequestBodyTypeEnumR48Xlarge UpdateAPICacheRequestBodyTypeEnum = "R4_8XLARGE"
	UpdateAPICacheRequestBodyTypeEnumSmall     UpdateAPICacheRequestBodyTypeEnum = "SMALL"
	UpdateAPICacheRequestBodyTypeEnumMedium    UpdateAPICacheRequestBodyTypeEnum = "MEDIUM"
	UpdateAPICacheRequestBodyTypeEnumLarge     UpdateAPICacheRequestBodyTypeEnum = "LARGE"
	UpdateAPICacheRequestBodyTypeEnumXlarge    UpdateAPICacheRequestBodyTypeEnum = "XLARGE"
	UpdateAPICacheRequestBodyTypeEnumLarge2X   UpdateAPICacheRequestBodyTypeEnum = "LARGE_2X"
	UpdateAPICacheRequestBodyTypeEnumLarge4X   UpdateAPICacheRequestBodyTypeEnum = "LARGE_4X"
	UpdateAPICacheRequestBodyTypeEnumLarge8X   UpdateAPICacheRequestBodyTypeEnum = "LARGE_8X"
	UpdateAPICacheRequestBodyTypeEnumLarge12X  UpdateAPICacheRequestBodyTypeEnum = "LARGE_12X"
)

func (e UpdateAPICacheRequestBodyTypeEnum) ToPointer() *UpdateAPICacheRequestBodyTypeEnum {
	return &e
}

func (e *UpdateAPICacheRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "T2_SMALL":
		fallthrough
	case "T2_MEDIUM":
		fallthrough
	case "R4_LARGE":
		fallthrough
	case "R4_XLARGE":
		fallthrough
	case "R4_2XLARGE":
		fallthrough
	case "R4_4XLARGE":
		fallthrough
	case "R4_8XLARGE":
		fallthrough
	case "SMALL":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LARGE":
		fallthrough
	case "XLARGE":
		fallthrough
	case "LARGE_2X":
		fallthrough
	case "LARGE_4X":
		fallthrough
	case "LARGE_8X":
		fallthrough
	case "LARGE_12X":
		*e = UpdateAPICacheRequestBodyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAPICacheRequestBodyTypeEnum: %v", v)
	}
}

type UpdateAPICacheRequestBody struct {
	// <p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>
	APICachingBehavior UpdateAPICacheRequestBodyAPICachingBehaviorEnum `json:"apiCachingBehavior"`
	// <p>TTL in seconds for cache entries.</p> <p>Valid values are 1â€“3,600 seconds.</p>
	TTL int64 `json:"ttl"`
	// <p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>
	Type UpdateAPICacheRequestBodyTypeEnum `json:"type"`
}

type UpdateAPICacheRequest struct {
	RequestBody       UpdateAPICacheRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The GraphQL API ID.
	APIID string `pathParam:"style=simple,explode=false,name=apiId"`
}

type UpdateAPICacheResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InternalFailureException
	InternalFailureException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
	// Success
	UpdateAPICacheResponse *shared.UpdateAPICacheResponse
}
