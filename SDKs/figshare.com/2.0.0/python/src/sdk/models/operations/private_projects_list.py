"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errormessage as shared_errormessage
from ..shared import projectprivate as shared_projectprivate
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class PrivateProjectsListSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PrivateProjectsListOrderEnum(str, Enum):
    r"""The field by which to order."""
    PUBLISHED_DATE = 'published_date'
    MODIFIED_DATE = 'modified_date'
    VIEWS = 'views'

class PrivateProjectsListOrderDirectionEnum(str, Enum):
    ASC = 'asc'
    DESC = 'desc'

class PrivateProjectsListStorageEnum(str, Enum):
    r"""only return collections from this institution"""
    GROUP = 'group'
    INDIVIDUAL = 'individual'


@dataclasses.dataclass
class PrivateProjectsListRequest:
    
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results included on a page. Used for pagination with query"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Where to start the listing(the offset of the first result). Used for pagination with limit"""  
    order: Optional[PrivateProjectsListOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The field by which to order."""  
    order_direction: Optional[PrivateProjectsListOrderDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_direction', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number. Used for pagination with page_size"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of results included on a page. Used for pagination with page"""  
    roles: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'roles', 'style': 'form', 'explode': True }})
    r"""Any combination of owner, collaborator, viewer separated by comma. Examples: \\"owner\\" or \\"owner,collaborator\\"."""  
    storage: Optional[PrivateProjectsListStorageEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'storage', 'style': 'form', 'explode': True }})
    r"""only return collections from this institution"""  
    

@dataclasses.dataclass
class PrivateProjectsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_message: Optional[shared_errormessage.ErrorMessage] = dataclasses.field(default=None)
    r"""Forbidden"""  
    project_privates: Optional[list[shared_projectprivate.ProjectPrivate]] = dataclasses.field(default=None)
    r"""OK. An array of projects"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    