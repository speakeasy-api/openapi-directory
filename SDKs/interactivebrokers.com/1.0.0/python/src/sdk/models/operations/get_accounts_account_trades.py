"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ordertype_enum as shared_ordertype_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAccountsAccountTradesRequest:
    
    account: str = dataclasses.field(metadata={'path_param': { 'field_name': 'account', 'style': 'simple', 'explode': False }})
    r"""Account Number"""  
    request_body: Optional[str] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Start time specified in UTC. Allowed formats are \\"yyyy-MM-dd\\" or \\"yyyy-MM-dd'T'HH:mm:ss\\". Time is optional and is set to midnight if omitted, e.g. \\"00:00:00 hh:mm:ss\\"."""  
    
class GetAccountsAccountTrades200ApplicationJSONSideEnum(str, Enum):
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountsAccountTrades200ApplicationJSON:
    
    avg_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvgPrice'), 'exclude': lambda f: f is None }})  
    commission: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Commission'), 'exclude': lambda f: f is None }})  
    commission_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommissionCurrency'), 'exclude': lambda f: f is None }})  
    contract_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractId'), 'exclude': lambda f: f is None }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    customer_order_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerOrderId'), 'exclude': lambda f: f is None }})  
    exec_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecId'), 'exclude': lambda f: f is None }})  
    execution_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionTime'), 'exclude': lambda f: f is None }})  
    filled_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilledQuantity'), 'exclude': lambda f: f is None }})  
    last_market: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastMarket'), 'exclude': lambda f: f is None }})  
    listing_exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListingExchange'), 'exclude': lambda f: f is None }})  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderId'), 'exclude': lambda f: f is None }})  
    order_type: Optional[shared_ordertype_enum.OrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderType'), 'exclude': lambda f: f is None }})
    r"""Market = '1'
    Limit = '2'
    Stop = '3'
    StopLimit = '4'
    """  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})  
    remaining_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemainingQuantity'), 'exclude': lambda f: f is None }})  
    side: Optional[GetAccountsAccountTrades200ApplicationJSONSideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Side'), 'exclude': lambda f: f is None }})  
    ticker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ticker'), 'exclude': lambda f: f is None }})  
    trade_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TradePrice'), 'exclude': lambda f: f is None }})  
    trade_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TradeSize'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAccountsAccountTradesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_accounts_account_trades_200_application_json_objects: Optional[list[GetAccountsAccountTrades200ApplicationJSON]] = dataclasses.field(default=None)
    r"""List of Trades"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    