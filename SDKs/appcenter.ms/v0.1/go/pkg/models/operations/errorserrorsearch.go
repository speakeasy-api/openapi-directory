// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsErrorSearchSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsErrorSearchOrderEnum - It controls the order of sorting
type ErrorsErrorSearchOrderEnum string

const (
	ErrorsErrorSearchOrderEnumDesc ErrorsErrorSearchOrderEnum = "desc"
	ErrorsErrorSearchOrderEnumAsc  ErrorsErrorSearchOrderEnum = "asc"
)

func (e *ErrorsErrorSearchOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "desc":
		fallthrough
	case "asc":
		*e = ErrorsErrorSearchOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorSearchOrderEnum: %s", s)
	}
}

// ErrorsErrorSearchSortEnum - It controls the sort based on specified field
type ErrorsErrorSearchSortEnum string

const (
	ErrorsErrorSearchSortEnumTimestamp          ErrorsErrorSearchSortEnum = "timestamp"
	ErrorsErrorSearchSortEnumErrorGroupID       ErrorsErrorSearchSortEnum = "errorGroupId"
	ErrorsErrorSearchSortEnumExceptionClassName ErrorsErrorSearchSortEnum = "exceptionClassName"
	ErrorsErrorSearchSortEnumExceptionFile      ErrorsErrorSearchSortEnum = "exceptionFile"
	ErrorsErrorSearchSortEnumExceptionLine      ErrorsErrorSearchSortEnum = "exceptionLine"
	ErrorsErrorSearchSortEnumExceptionMessage   ErrorsErrorSearchSortEnum = "exceptionMessage"
	ErrorsErrorSearchSortEnumExceptionMethod    ErrorsErrorSearchSortEnum = "exceptionMethod"
	ErrorsErrorSearchSortEnumDeviceName         ErrorsErrorSearchSortEnum = "deviceName"
	ErrorsErrorSearchSortEnumOsVersion          ErrorsErrorSearchSortEnum = "osVersion"
	ErrorsErrorSearchSortEnumUserID             ErrorsErrorSearchSortEnum = "userId"
)

func (e *ErrorsErrorSearchSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "timestamp":
		fallthrough
	case "errorGroupId":
		fallthrough
	case "exceptionClassName":
		fallthrough
	case "exceptionFile":
		fallthrough
	case "exceptionLine":
		fallthrough
	case "exceptionMessage":
		fallthrough
	case "exceptionMethod":
		fallthrough
	case "deviceName":
		fallthrough
	case "osVersion":
		fallthrough
	case "userId":
		*e = ErrorsErrorSearchSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorSearchSortEnum: %s", s)
	}
}

type ErrorsErrorSearchRequest struct {
	// The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
	DollarSkip *int64 `queryParam:"style=form,explode=true,name=$skip"`
	// The maximum number of results to return
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// A filter as specified in OData notation
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// It controls the order of sorting
	Order *ErrorsErrorSearchOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// A query string
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// It controls the sort based on specified field
	Sort *ErrorsErrorSearchSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorSearchDefaultApplicationJSONError struct {
	Code    ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// ErrorsErrorSearchDefaultApplicationJSON - Error code with reason
type ErrorsErrorSearchDefaultApplicationJSON struct {
	Error ErrorsErrorSearchDefaultApplicationJSONError `json:"error"`
}

type ErrorsErrorSearch200ApplicationJSONErrors struct {
	Country        *string    `json:"country,omitempty"`
	DeviceName     *string    `json:"deviceName,omitempty"`
	ErrorID        *string    `json:"errorId,omitempty"`
	HasAttachments *bool      `json:"hasAttachments,omitempty"`
	HasBreadcrumbs *bool      `json:"hasBreadcrumbs,omitempty"`
	Language       *string    `json:"language,omitempty"`
	OsType         *string    `json:"osType,omitempty"`
	OsVersion      *string    `json:"osVersion,omitempty"`
	Timestamp      *time.Time `json:"timestamp,omitempty"`
	UserID         *string    `json:"userId,omitempty"`
}

// ErrorsErrorSearch200ApplicationJSON - List of errors
type ErrorsErrorSearch200ApplicationJSON struct {
	Errors         []ErrorsErrorSearch200ApplicationJSONErrors `json:"errors,omitempty"`
	HasMoreResults *bool                                       `json:"hasMoreResults,omitempty"`
}

type ErrorsErrorSearchResponse struct {
	ContentType string
	// List of errors
	ErrorsErrorSearch200ApplicationJSONObject *ErrorsErrorSearch200ApplicationJSON
	// Error code with reason
	ErrorsErrorSearchDefaultApplicationJSONObject *ErrorsErrorSearchDefaultApplicationJSON
	StatusCode                                    int
	RawResponse                                   *http.Response
}
