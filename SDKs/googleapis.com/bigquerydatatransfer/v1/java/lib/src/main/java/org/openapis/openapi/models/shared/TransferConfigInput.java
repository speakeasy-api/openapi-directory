/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TransferConfigInput - Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, `destination_dataset_id` specifies where data should be stored. When a new transfer configuration is created, the specified `destination_dataset_id` is created when needed and shared with the appropriate data source service account.
 */
public class TransferConfigInput {
    /**
     * The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataRefreshWindowDays")
    public Integer dataRefreshWindowDays;

    public TransferConfigInput withDataRefreshWindowDays(Integer dataRefreshWindowDays) {
        this.dataRefreshWindowDays = dataRefreshWindowDays;
        return this;
    }
    
    /**
     * Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceId")
    public String dataSourceId;

    public TransferConfigInput withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }
    
    /**
     * The BigQuery target dataset id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationDatasetId")
    public String destinationDatasetId;

    public TransferConfigInput withDestinationDatasetId(String destinationDatasetId) {
        this.destinationDatasetId = destinationDatasetId;
        return this;
    }
    
    /**
     * Is this config disabled. When set to true, no runs are scheduled for a given transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public TransferConfigInput withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * User specified display name for the data transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public TransferConfigInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Represents preferences for sending email notifications for transfer run events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailPreferences")
    public EmailPreferences emailPreferences;

    public TransferConfigInput withEmailPreferences(EmailPreferences emailPreferences) {
        this.emailPreferences = emailPreferences;
        return this;
    }
    
    /**
     * The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TransferConfigInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationPubsubTopic")
    public String notificationPubsubTopic;

    public TransferConfigInput withNotificationPubsubTopic(String notificationPubsubTopic) {
        this.notificationPubsubTopic = notificationPubsubTopic;
        return this;
    }
    
    /**
     * Information about a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerInfo")
    public UserInfo ownerInfo;

    public TransferConfigInput withOwnerInfo(UserInfo ownerInfo) {
        this.ownerInfo = ownerInfo;
        return this;
    }
    
    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("params")
    public java.util.Map<String, Object> params;

    public TransferConfigInput withParams(java.util.Map<String, Object> params) {
        this.params = params;
        return this;
    }
    
    /**
     * Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public String schedule;

    public TransferConfigInput withSchedule(String schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * Options customizing the data transfer schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleOptions")
    public ScheduleOptions scheduleOptions;

    public TransferConfigInput withScheduleOptions(ScheduleOptions scheduleOptions) {
        this.scheduleOptions = scheduleOptions;
        return this;
    }
    
    /**
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    public String userId;

    public TransferConfigInput withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    public TransferConfigInput(){}
}
