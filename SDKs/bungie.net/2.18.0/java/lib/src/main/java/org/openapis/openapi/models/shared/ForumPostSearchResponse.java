/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



public class ForumPostSearchResponse {
    
    public UserGeneralUser[] authors;

    public ForumPostSearchResponse withAuthors(UserGeneralUser[] authors) {
        this.authors = authors;
        return this;
    }
    
    
    public Integer availablePages;

    public ForumPostSearchResponse withAvailablePages(Integer availablePages) {
        this.availablePages = availablePages;
        return this;
    }
    
    
    public GroupsV2GroupResponse[] groups;

    public ForumPostSearchResponse withGroups(GroupsV2GroupResponse[] groups) {
        this.groups = groups;
        return this;
    }
    
    
    public Boolean hasMore;

    public ForumPostSearchResponse withHasMore(Boolean hasMore) {
        this.hasMore = hasMore;
        return this;
    }
    
    
    public ForumPollResponse[] polls;

    public ForumPostSearchResponse withPolls(ForumPollResponse[] polls) {
        this.polls = polls;
        return this;
    }
    
    
    public QueriesPagedQuery query;

    public ForumPostSearchResponse withQuery(QueriesPagedQuery query) {
        this.query = query;
        return this;
    }
    
    
    public ForumForumRecruitmentDetail[] recruitmentDetails;

    public ForumPostSearchResponse withRecruitmentDetails(ForumForumRecruitmentDetail[] recruitmentDetails) {
        this.recruitmentDetails = recruitmentDetails;
        return this;
    }
    
    
    public ForumPostResponse[] relatedPosts;

    public ForumPostSearchResponse withRelatedPosts(ForumPostResponse[] relatedPosts) {
        this.relatedPosts = relatedPosts;
        return this;
    }
    
    
    public String replacementContinuationToken;

    public ForumPostSearchResponse withReplacementContinuationToken(String replacementContinuationToken) {
        this.replacementContinuationToken = replacementContinuationToken;
        return this;
    }
    
    
    public ForumPostResponse[] results;

    public ForumPostSearchResponse withResults(ForumPostResponse[] results) {
        this.results = results;
        return this;
    }
    
    
    public TagsModelsContractsTagResponse[] searchedTags;

    public ForumPostSearchResponse withSearchedTags(TagsModelsContractsTagResponse[] searchedTags) {
        this.searchedTags = searchedTags;
        return this;
    }
    
    
    public Integer totalResults;

    public ForumPostSearchResponse withTotalResults(Integer totalResults) {
        this.totalResults = totalResults;
        return this;
    }
    
    /**
     * If useTotalResults is true, then totalResults represents an accurate count.
     * If False, it does not, and may be estimated/only the size of the current page.
     * Either way, you should probably always only trust hasMore.
     * This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
     */
    
    public Boolean useTotalResults;

    public ForumPostSearchResponse withUseTotalResults(Boolean useTotalResults) {
        this.useTotalResults = useTotalResults;
        return this;
    }
    
    public ForumPostSearchResponse(){}
}
