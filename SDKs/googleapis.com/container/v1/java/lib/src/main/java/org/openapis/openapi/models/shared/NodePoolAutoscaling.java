/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NodePoolAutoscaling - NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
 */
public class NodePoolAutoscaling {
    /**
     * Can this node pool be deleted automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoprovisioned")
    public Boolean autoprovisioned;
    public NodePoolAutoscaling withAutoprovisioned(Boolean autoprovisioned) {
        this.autoprovisioned = autoprovisioned;
        return this;
    }
    
    /**
     * Is autoscaling enabled for this node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public NodePoolAutoscaling withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Location policy used when scaling up a nodepool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationPolicy")
    public NodePoolAutoscalingLocationPolicyEnum locationPolicy;
    public NodePoolAutoscaling withLocationPolicy(NodePoolAutoscalingLocationPolicyEnum locationPolicy) {
        this.locationPolicy = locationPolicy;
        return this;
    }
    
    /**
     * Maximum number of nodes for one location in the NodePool. Must be &gt;= min_node_count. There has to be enough quota to scale up the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxNodeCount")
    public Integer maxNodeCount;
    public NodePoolAutoscaling withMaxNodeCount(Integer maxNodeCount) {
        this.maxNodeCount = maxNodeCount;
        return this;
    }
    
    /**
     * Minimum number of nodes for one location in the NodePool. Must be &gt;= 1 and &lt;= max_node_count.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minNodeCount")
    public Integer minNodeCount;
    public NodePoolAutoscaling withMinNodeCount(Integer minNodeCount) {
        this.minNodeCount = minNodeCount;
        return this;
    }
    
    /**
     * Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalMaxNodeCount")
    public Integer totalMaxNodeCount;
    public NodePoolAutoscaling withTotalMaxNodeCount(Integer totalMaxNodeCount) {
        this.totalMaxNodeCount = totalMaxNodeCount;
        return this;
    }
    
    /**
     * Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalMinNodeCount")
    public Integer totalMinNodeCount;
    public NodePoolAutoscaling withTotalMinNodeCount(Integer totalMinNodeCount) {
        this.totalMinNodeCount = totalMinNodeCount;
        return this;
    }
    
}
