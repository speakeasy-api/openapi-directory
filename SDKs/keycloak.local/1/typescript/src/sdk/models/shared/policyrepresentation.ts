/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ResourceRepresentation } from "./resourcerepresentation";
import { ScopeRepresentation } from "./scoperepresentation";
import { Expose, Type } from "class-transformer";

export enum PolicyRepresentationDecisionStrategyEnum {
  Affirmative = "AFFIRMATIVE",
  Unanimous = "UNANIMOUS",
  Consensus = "CONSENSUS",
}

export enum PolicyRepresentationLogicEnum {
  Positive = "POSITIVE",
  Negative = "NEGATIVE",
}

export class PolicyRepresentation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  config?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "decisionStrategy" })
  decisionStrategy?: PolicyRepresentationDecisionStrategyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logic" })
  logic?: PolicyRepresentationLogicEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  owner?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "policies" })
  policies?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "resources" })
  resources?: string[];

  @SpeakeasyMetadata({ elemType: ResourceRepresentation })
  @Expose({ name: "resourcesData" })
  @Type(() => ResourceRepresentation)
  resourcesData?: ResourceRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes?: string[];

  @SpeakeasyMetadata({ elemType: ScopeRepresentation })
  @Expose({ name: "scopesData" })
  @Type(() => ScopeRepresentation)
  scopesData?: ScopeRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
