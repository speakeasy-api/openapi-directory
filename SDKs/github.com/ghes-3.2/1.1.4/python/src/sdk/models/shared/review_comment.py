"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import author_association_enum as shared_author_association_enum
from ..shared import link as shared_link
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import reaction_rollup as shared_reaction_rollup
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReviewCommentLinks:
    
    html: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html') }})
    r"""Hypermedia Link"""  
    pull_request: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_request') }})
    r"""Hypermedia Link"""  
    self_: shared_link.Link = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""Hypermedia Link"""  
    
class ReviewCommentSideEnum(str, Enum):
    r"""The side of the first line of the range for a multi-line comment."""
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'

class ReviewCommentStartSideEnum(str, Enum):
    r"""The side of the first line of the range for a multi-line comment."""
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReviewComment:
    r"""Legacy Review Comment"""
    
    links: ReviewCommentLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    author_association: shared_author_association_enum.AuthorAssociationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_association') }})
    r"""How the author is associated with the repository."""  
    body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body') }})  
    commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_id') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    diff_hunk: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_hunk') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    original_commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_commit_id') }})  
    original_position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_position') }})  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})  
    pull_request_review_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_request_review_id') }})  
    pull_request_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_request_url') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Simple User"""  
    body_html: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_html'), 'exclude': lambda f: f is None }})  
    body_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_text'), 'exclude': lambda f: f is None }})  
    in_reply_to_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_reply_to_id'), 'exclude': lambda f: f is None }})  
    line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""The line of the blob to which the comment applies. The last line of the range for a multi-line comment"""  
    original_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_line'), 'exclude': lambda f: f is None }})
    r"""The original line of the blob to which the comment applies. The last line of the range for a multi-line comment"""  
    original_start_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_start_line'), 'exclude': lambda f: f is None }})
    r"""The original first line of the range for a multi-line comment."""  
    reactions: Optional[shared_reaction_rollup.ReactionRollup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reactions'), 'exclude': lambda f: f is None }})  
    side: Optional[ReviewCommentSideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('side'), 'exclude': lambda f: f is None }})
    r"""The side of the first line of the range for a multi-line comment."""  
    start_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_line'), 'exclude': lambda f: f is None }})
    r"""The first line of the range for a multi-line comment."""  
    start_side: Optional[ReviewCommentStartSideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_side'), 'exclude': lambda f: f is None }})
    r"""The side of the first line of the range for a multi-line comment."""  
    