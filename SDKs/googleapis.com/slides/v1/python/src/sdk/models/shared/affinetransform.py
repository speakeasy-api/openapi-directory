"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AffineTransformUnitEnum(str, Enum):
    r"""The units for translate elements."""
    UNIT_UNSPECIFIED = 'UNIT_UNSPECIFIED'
    EMU = 'EMU'
    PT = 'PT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AffineTransform:
    r"""AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements."""
    
    scale_x: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaleX'), 'exclude': lambda f: f is None }})
    r"""The X coordinate scaling element."""  
    scale_y: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaleY'), 'exclude': lambda f: f is None }})
    r"""The Y coordinate scaling element."""  
    shear_x: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shearX'), 'exclude': lambda f: f is None }})
    r"""The X coordinate shearing element."""  
    shear_y: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shearY'), 'exclude': lambda f: f is None }})
    r"""The Y coordinate shearing element."""  
    translate_x: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translateX'), 'exclude': lambda f: f is None }})
    r"""The X coordinate translation element."""  
    translate_y: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translateY'), 'exclude': lambda f: f is None }})
    r"""The Y coordinate translation element."""  
    unit: Optional[AffineTransformUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""The units for translate elements."""  
    