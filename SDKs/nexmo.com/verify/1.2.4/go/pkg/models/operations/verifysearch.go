// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type VerifySearchRequest struct {
	APIKey    string `queryParam:"style=form,explode=true,name=api_key"`
	APISecret string `queryParam:"style=form,explode=true,name=api_secret"`
	// The response format.
	Format shared.FormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided.
	RequestID string `queryParam:"style=form,explode=true,name=request_id"`
	// More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.
	RequestIds []string `queryParam:"style=form,explode=true,name=request_ids"`
}

type VerifySearch200TextXMLType string

const (
	VerifySearch200TextXMLTypeSearchResponse      VerifySearch200TextXMLType = "searchResponse"
	VerifySearch200TextXMLTypeSearchErrorResponse VerifySearch200TextXMLType = "searchErrorResponse"
)

type VerifySearch200TextXML struct {
	SearchResponse      *shared.SearchResponse
	SearchErrorResponse *shared.SearchErrorResponse

	Type VerifySearch200TextXMLType
}

func CreateVerifySearch200TextXMLSearchResponse(searchResponse shared.SearchResponse) VerifySearch200TextXML {
	typ := VerifySearch200TextXMLTypeSearchResponse

	return VerifySearch200TextXML{
		SearchResponse: &searchResponse,
		Type:           typ,
	}
}

func CreateVerifySearch200TextXMLSearchErrorResponse(searchErrorResponse shared.SearchErrorResponse) VerifySearch200TextXML {
	typ := VerifySearch200TextXMLTypeSearchErrorResponse

	return VerifySearch200TextXML{
		SearchErrorResponse: &searchErrorResponse,
		Type:                typ,
	}
}

func (u *VerifySearch200TextXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	searchResponse := new(shared.SearchResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&searchResponse); err == nil {
		u.SearchResponse = searchResponse
		u.Type = VerifySearch200TextXMLTypeSearchResponse
		return nil
	}

	searchErrorResponse := new(shared.SearchErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&searchErrorResponse); err == nil {
		u.SearchErrorResponse = searchErrorResponse
		u.Type = VerifySearch200TextXMLTypeSearchErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifySearch200TextXML) MarshalJSON() ([]byte, error) {
	if u.SearchResponse != nil {
		return json.Marshal(u.SearchResponse)
	}

	if u.SearchErrorResponse != nil {
		return json.Marshal(u.SearchErrorResponse)
	}

	return nil, nil
}

type VerifySearch200ApplicationJSONType string

const (
	VerifySearch200ApplicationJSONTypeSearchResponse      VerifySearch200ApplicationJSONType = "searchResponse"
	VerifySearch200ApplicationJSONTypeSearchErrorResponse VerifySearch200ApplicationJSONType = "searchErrorResponse"
)

type VerifySearch200ApplicationJSON struct {
	SearchResponse      *shared.SearchResponse
	SearchErrorResponse *shared.SearchErrorResponse

	Type VerifySearch200ApplicationJSONType
}

func CreateVerifySearch200ApplicationJSONSearchResponse(searchResponse shared.SearchResponse) VerifySearch200ApplicationJSON {
	typ := VerifySearch200ApplicationJSONTypeSearchResponse

	return VerifySearch200ApplicationJSON{
		SearchResponse: &searchResponse,
		Type:           typ,
	}
}

func CreateVerifySearch200ApplicationJSONSearchErrorResponse(searchErrorResponse shared.SearchErrorResponse) VerifySearch200ApplicationJSON {
	typ := VerifySearch200ApplicationJSONTypeSearchErrorResponse

	return VerifySearch200ApplicationJSON{
		SearchErrorResponse: &searchErrorResponse,
		Type:                typ,
	}
}

func (u *VerifySearch200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	searchResponse := new(shared.SearchResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&searchResponse); err == nil {
		u.SearchResponse = searchResponse
		u.Type = VerifySearch200ApplicationJSONTypeSearchResponse
		return nil
	}

	searchErrorResponse := new(shared.SearchErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&searchErrorResponse); err == nil {
		u.SearchErrorResponse = searchErrorResponse
		u.Type = VerifySearch200ApplicationJSONTypeSearchErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifySearch200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SearchResponse != nil {
		return json.Marshal(u.SearchResponse)
	}

	if u.SearchErrorResponse != nil {
		return json.Marshal(u.SearchErrorResponse)
	}

	return nil, nil
}

type VerifySearchResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VerifySearch200ApplicationJSONOneOf *VerifySearch200ApplicationJSON
}
