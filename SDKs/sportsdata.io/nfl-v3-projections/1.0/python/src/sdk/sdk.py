"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/nfl/projections",
    "https://azure-api.sportsdata.io/v3/nfl/projections",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""NFL projected stats API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def dfs_slate_ownership_projections_by_slateid(self, request: operations.DfsSlateOwnershipProjectionsBySlateidRequest) -> operations.DfsSlateOwnershipProjectionsBySlateidResponse:
        r"""DFS Slate Ownership Projections by SlateID
        Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfsSlateOwnershipProjectionsBySlateidRequest, base_url, '/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfsSlateOwnershipProjectionsBySlateidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DfsSlateWithOwnershipProjection])
                res.dfs_slate_with_ownership_projection = out

        return res

    def dfs_slates_by_date(self, request: operations.DfsSlatesByDateRequest) -> operations.DfsSlatesByDateResponse:
        r"""DFS Slates by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfsSlatesByDateRequest, base_url, '/{format}/DfsSlatesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfsSlatesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlate]])
                res.dfs_slates = out

        return res

    def dfs_slates_by_week(self, request: operations.DfsSlatesByWeekRequest) -> operations.DfsSlatesByWeekResponse:
        r"""DFS Slates by Week"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfsSlatesByWeekRequest, base_url, '/{format}/DfsSlatesByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfsSlatesByWeekResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlate]])
                res.dfs_slates = out

        return res

    def idp_projected_player_game_stats_by_player_w_injuries_lineups_dfs_salaries(self, request: operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest) -> operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse:
        r"""IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayerGameProjection])
                res.player_game_projection = out

        return res

    def idp_projected_player_game_stats_by_team_w_injuries_lineups_dfs_salaries(self, request: operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest) -> operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse:
        r"""IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    def idp_projected_player_game_stats_by_week_w_injuries_lineups_dfs_salaries(self, request: operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest) -> operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse:
        r"""IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    def injured_players(self, request: operations.InjuredPlayersRequest) -> operations.InjuredPlayersResponse:
        r"""Injured Players
        This endpoint provides all currently injured NFL players, along with injury details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InjuredPlayersRequest, base_url, '/{format}/InjuredPlayers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InjuredPlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def projected_fantasy_defense_game_stats_w_dfs_salaries(self, request: operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest) -> operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse:
        r"""Projected Fantasy Defense Game Stats (w/ DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest, base_url, '/{format}/FantasyDefenseProjectionsByGame/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FantasyDefenseGameProjection]])
                res.fantasy_defense_game_projections = out

        return res

    def projected_fantasy_defense_season_stats_w_adp(self, request: operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest) -> operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse:
        r"""Projected Fantasy Defense Season Stats (w/ ADP)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest, base_url, '/{format}/FantasyDefenseProjectionsBySeason/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FantasyDefenseSeasonProjection]])
                res.fantasy_defense_season_projections = out

        return res

    def projected_player_game_stats_by_player_w_injuries_lineups_dfs_salaries(self, request: operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest) -> operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse:
        r"""Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/PlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayerGameProjection])
                res.player_game_projection = out

        return res

    def projected_player_game_stats_by_team_w_injuries_lineups_dfs_salaries(self, request: operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest) -> operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse:
        r"""Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    def projected_player_game_stats_by_week_w_injuries_lineups_dfs_salaries(self, request: operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest) -> operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse:
        r"""Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest, base_url, '/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGameProjection]])
                res.player_game_projections = out

        return res

    def projected_player_season_stats_by_player_w_adp(self, request: operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest) -> operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse:
        r"""Projected Player Season Stats by Player (w/ ADP)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest, base_url, '/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayerSeasonProjection])
                res.player_season_projection = out

        return res

    def projected_player_season_stats_by_team_w_adp(self, request: operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest) -> operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse:
        r"""Projected Player Season Stats by Team (w/ ADP)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest, base_url, '/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeasonProjection]])
                res.player_season_projections = out

        return res

    def projected_player_season_stats_w_adp(self, request: operations.ProjectedPlayerSeasonStatsWAdpRequest) -> operations.ProjectedPlayerSeasonStatsWAdpResponse:
        r"""Projected Player Season Stats (w/ ADP)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectedPlayerSeasonStatsWAdpRequest, base_url, '/{format}/PlayerSeasonProjectionStats/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectedPlayerSeasonStatsWAdpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeasonProjection]])
                res.player_season_projections = out

        return res

    def upcoming_dfs_slate_ownership_projections(self, request: operations.UpcomingDfsSlateOwnershipProjectionsRequest) -> operations.UpcomingDfsSlateOwnershipProjectionsResponse:
        r"""Upcoming DFS Slate Ownership Projections
        Grabs DFS Slates which have not yet started for which we have DFS Ownership projections.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpcomingDfsSlateOwnershipProjectionsRequest, base_url, '/{format}/UpcomingDfsSlateOwnershipProjections', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpcomingDfsSlateOwnershipProjectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlateWithOwnershipProjection]])
                res.dfs_slate_with_ownership_projections = out

        return res

    