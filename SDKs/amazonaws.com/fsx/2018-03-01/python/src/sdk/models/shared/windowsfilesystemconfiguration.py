"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alias as shared_alias
from ..shared import filesystemmaintenanceoperation_enum as shared_filesystemmaintenanceoperation_enum
from ..shared import selfmanagedactivedirectoryattributes as shared_selfmanagedactivedirectoryattributes
from ..shared import windowsauditlogconfiguration as shared_windowsauditlogconfiguration
from ..shared import windowsdeploymenttype_enum as shared_windowsdeploymenttype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WindowsFileSystemConfiguration:
    r"""The configuration for this Microsoft Windows file system."""
    
    active_directory_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveDirectoryId'), 'exclude': lambda f: f is None }})  
    aliases: Optional[list[shared_alias.Alias]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aliases'), 'exclude': lambda f: f is None }})
    r"""An array of one or more DNS aliases that are currently associated with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see <a href=\\"https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\\">DNS aliases</a>."""  
    audit_log_configuration: Optional[shared_windowsauditlogconfiguration.WindowsAuditLogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuditLogConfiguration'), 'exclude': lambda f: f is None }})  
    automatic_backup_retention_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomaticBackupRetentionDays'), 'exclude': lambda f: f is None }})  
    copy_tags_to_backups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToBackups'), 'exclude': lambda f: f is None }})  
    daily_automatic_backup_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DailyAutomaticBackupStartTime'), 'exclude': lambda f: f is None }})  
    deployment_type: Optional[shared_windowsdeploymenttype_enum.WindowsDeploymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentType'), 'exclude': lambda f: f is None }})  
    maintenance_operations_in_progress: Optional[list[shared_filesystemmaintenanceoperation_enum.FileSystemMaintenanceOperationEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintenanceOperationsInProgress'), 'exclude': lambda f: f is None }})  
    preferred_file_server_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredFileServerIp'), 'exclude': lambda f: f is None }})  
    preferred_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredSubnetId'), 'exclude': lambda f: f is None }})  
    remote_administration_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoteAdministrationEndpoint'), 'exclude': lambda f: f is None }})  
    self_managed_active_directory_configuration: Optional[shared_selfmanagedactivedirectoryattributes.SelfManagedActiveDirectoryAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelfManagedActiveDirectoryConfiguration'), 'exclude': lambda f: f is None }})
    r"""The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined."""  
    throughput_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThroughputCapacity'), 'exclude': lambda f: f is None }})  
    weekly_maintenance_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WeeklyMaintenanceStartTime'), 'exclude': lambda f: f is None }})  
    