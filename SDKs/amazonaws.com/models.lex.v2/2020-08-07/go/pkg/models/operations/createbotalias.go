// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateBotAliasRequestBodyConversationLogSettings - Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
type CreateBotAliasRequestBodyConversationLogSettings struct {
	AudioLogSettings []shared.AudioLogSetting `json:"audioLogSettings,omitempty"`
	TextLogSettings  []shared.TextLogSetting  `json:"textLogSettings,omitempty"`
}

// CreateBotAliasRequestBodySentimentAnalysisSettings - Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
type CreateBotAliasRequestBodySentimentAnalysisSettings struct {
	DetectSentiment *bool `json:"detectSentiment,omitempty"`
}

type CreateBotAliasRequestBody struct {
	// Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
	BotAliasLocaleSettings map[string]shared.BotAliasLocaleSettings `json:"botAliasLocaleSettings,omitempty"`
	// The alias to create. The name must be unique for the bot.
	BotAliasName string `json:"botAliasName"`
	// The version of the bot that this alias points to. You can use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a> operation to change the bot version associated with the alias.
	BotVersion *string `json:"botVersion,omitempty"`
	// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
	ConversationLogSettings *CreateBotAliasRequestBodyConversationLogSettings `json:"conversationLogSettings,omitempty"`
	// A description of the alias. Use this description to help identify the alias.
	Description *string `json:"description,omitempty"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings *CreateBotAliasRequestBodySentimentAnalysisSettings `json:"sentimentAnalysisSettings,omitempty"`
	// A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateBotAliasRequest struct {
	RequestBody       CreateBotAliasRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The unique identifier of the bot that the alias applies to.
	BotID string `pathParam:"style=simple,explode=false,name=botId"`
}

type CreateBotAliasResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateBotAliasResponse *shared.CreateBotAliasResponse
	// InternalServerException
	InternalServerException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
