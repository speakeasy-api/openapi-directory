"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional

GETALLPRICETABLESANDRULES_SERVERS = [
	"https://api.vtex.com/{account}/pricing",
]


@dataclasses.dataclass
class GetallpricetablesandrulesRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getallpricetablesandrules200ApplicationJSONRulesContextDateRange:
    r"""The rule will be active during this time range."""
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Date when rule will be activated. Date format: `RFC3339`."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Date when the rule will be deactivated. Date format: `RFC3339`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getallpricetablesandrules200ApplicationJSONRulesContextMarkupRange:
    r"""For an item to be eligible to the rule, it's markup should be in this Markup Range."""
    
    from_: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Item markup should be greater than or equal to this value."""  
    to: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Item markup should be less than or equal to this value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getallpricetablesandrules200ApplicationJSONRulesContext:
    r"""Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item."""
    
    brands: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`."""  
    categories: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`."""  
    date_range: Optional[Getallpricetablesandrules200ApplicationJSONRulesContextDateRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateRange'), 'exclude': lambda f: f is None }})
    r"""The rule will be active during this time range."""  
    internal_categories: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalCategories'), 'exclude': lambda f: f is None }})
    r"""Internal Categories."""  
    markup_range: Optional[Getallpricetablesandrules200ApplicationJSONRulesContextMarkupRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markupRange'), 'exclude': lambda f: f is None }})
    r"""For an item to be eligible to the rule, it's markup should be in this Markup Range."""  
    stock_statuses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stockStatuses'), 'exclude': lambda f: f is None }})
    r"""Stock statuses."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getallpricetablesandrules200ApplicationJSONRules:
    r"""Object containing a price table rule."""
    
    context: Optional[Getallpricetablesandrules200ApplicationJSONRulesContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item."""  
    id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Rule ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getallpricetablesandrules200ApplicationJSON:
    
    percentual_modifier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualModifier'), 'exclude': lambda f: f is None }})
    r"""Percentual modifier."""  
    rules: Optional[list[Getallpricetablesandrules200ApplicationJSONRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""Array of rules for the price table."""  
    trade_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradePolicyId'), 'exclude': lambda f: f is None }})
    r"""Trade Policy ID (Price Table ID)."""  
    

@dataclasses.dataclass
class GetallpricetablesandrulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getallpricetablesandrules_200_application_json_objects: Optional[list[Getallpricetablesandrules200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    