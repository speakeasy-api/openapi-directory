// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationApplianceVPNThirdPartyVPNPeersRequest struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum - [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnumOne GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum = "1"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnumTwo GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum = "2"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum: %v", v)
	}
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumMd5    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "md5"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumSha1   GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "sha1"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumSha256 GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "sha256"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum: %v", v)
	}
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes128    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes128"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes192    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes192"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes256    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes256"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumDes       GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "des"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumNull      GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "null"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumTripledes GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "tripledes"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "null":
		fallthrough
	case "tripledes":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum: %v", v)
	}
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumMd5    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "md5"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumSha1   GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "sha1"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumSha256 GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "sha256"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum: %v", v)
	}
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes128    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes128"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes192    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes192"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes256    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes256"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumDes       GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "des"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumTripledes GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "tripledes"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "tripledes":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum: %v", v)
	}
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum string

const (
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumDefault   GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "default"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfmd5    GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfmd5"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfsha1   GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha1"
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfsha256 GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha256"
)

func (e GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum) ToPointer() *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum {
	return &e
}

func (e *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "prfmd5":
		fallthrough
	case "prfsha1":
		fallthrough
	case "prfsha256":
		*e = GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum: %v", v)
	}
}

// GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies - Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies struct {
	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum `json:"childAuthAlgo,omitempty"`
	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum `json:"childCipherAlgo,omitempty"`
	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime *int64 `json:"childLifetime,omitempty"`
	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup,omitempty"`
	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum `json:"ikeAuthAlgo,omitempty"`
	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum `json:"ikeCipherAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup,omitempty"`
	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime *int64 `json:"ikeLifetime,omitempty"`
	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum `json:"ikePrfAlgo,omitempty"`
}

type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers struct {
	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	IkeVersion *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum `json:"ikeVersion,omitempty"`
	// Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
	IpsecPolicies *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies `json:"ipsecPolicies,omitempty"`
	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset *string `json:"ipsecPoliciesPreset,omitempty"`
	// [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
	LocalID *string `json:"localId,omitempty"`
	// The name of the VPN peer
	Name *string `json:"name,omitempty"`
	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags,omitempty"`
	// The list of the private subnets of the VPN peer
	PrivateSubnets []string `json:"privateSubnets,omitempty"`
	// [optional] The public IP of the VPN peer
	PublicIP *string `json:"publicIp,omitempty"`
	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID *string `json:"remoteId,omitempty"`
	// The shared secret with the VPN peer
	Secret *string `json:"secret,omitempty"`
}

// GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON - Successful operation
type GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON struct {
	// The list of VPN peers
	Peers []GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers `json:"peers,omitempty"`
}

type GetOrganizationApplianceVPNThirdPartyVPNPeersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject *GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON
}
