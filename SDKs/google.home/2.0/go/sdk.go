// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"http://example.com/setup",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # Google Home Local API
// This is an unofficial documentation of the local API used by the Home app to communicate with GH devices.
// [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)
//
// [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)
//
// ## Getting Started
//
// Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`
//
// Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.
//
// GET requests are simple, in the browser kind.
// POST requests need to set the header (when there's a body): `content-type: application/json`
//
// ## Authentication
//
// Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.
//
// There are 3 kinds of tokens involved here:
//
// ### Local Authorization Token
// This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.)
// ##### Get this token
// - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f).
// - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.
//
// ### Access Token
// This is a standard google oauth2 access token. It is in the form `ya29.***`.
// This gives access to the Google Home Foyer API. These expire in an hour.
// Use this to get the homegraph (and then the local authorization token above).
// ##### Get this token
// To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist.
// Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).
//
// ### Master Token
// This is in the form `aas_et/***` and can be used to request access tokens.
// ##### Get this token
// The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.
//
// ## Example
//
// Here's the whole flow from just a pair of username/password to using the local API.
//
// Prerequisites:
// - [grpcurl](https://github.com/fullstorydev/grpcurl)
// - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)
//
// ### 1. Get an access token with the script
// - Download get_tokens.py
// - Fill in username and password
// ```sh
// python3 get_tokens.py
// # Note down the access token printed.
// ```
//
// ### 2. Use the access token and get home graph
// - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken
// - This will give a list of all devices and their local auth tokens
// ```sh
//
//	./grpcurl -H 'authorization: Bearer ya29.a0Af****' \
//		-import-path /path/to/protos \
//		-proto /path/to/protos/google/internal/home/foyer/v1.proto \
//		googlehomefoyer-pa.googleapis.com:443 \
//		google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}'
//
// # Note down the local auth token for the device you want.
// ```
//
// ### 3. Make the call to the local device using the local auth token
// ```sh
// curl -H "cast-local-authorization-token: LOCAL_AUTH_TOKEN" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status
// ```
type SDK struct {
	// Assistant - This folder contains all endpoints related to Assistant's tasks like Do Not Disturb, Alarms and Timers, Accessibility and equalizer.
	Assistant *assistant
	// Bluetooth - This folder contains Bluetooth related endpoints.
	Bluetooth *bluetooth
	// DeviceInfo - Endpoints in this folder give information about the device.
	DeviceInfo *deviceInfo
	// DeviceSettings - This folder consists of all endpoints to modify and control the device.
	DeviceSettings *deviceSettings
	// StaticFiles - This folder contains a list of static files stored in Home.
	StaticFiles *staticFiles
	// Wifi - This folder contains Wi-Fi related endpoints.
	Wifi *wifi

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Assistant = newAssistant(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Bluetooth = newBluetooth(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.DeviceInfo = newDeviceInfo(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.DeviceSettings = newDeviceSettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.StaticFiles = newStaticFiles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Wifi = newWifi(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
