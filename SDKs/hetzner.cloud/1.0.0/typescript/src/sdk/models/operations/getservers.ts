/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetServersSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Name = "name",
  NameAsc = "name:asc",
  NameDesc = "name:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

/**
 * Can be used multiple times. The response will only contain Server matching the status
 */
export enum GetServersStatusEnum {
  Initializing = "initializing",
  Starting = "starting",
  Running = "running",
  Stopping = "stopping",
  Off = "off",
  Deleting = "deleting",
  Rebuilding = "rebuilding",
  Migrating = "migrating",
  Unknown = "unknown",
}

export class GetServersRequest extends SpeakeasyBase {
  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetServersSortEnum;

  /**
   * Can be used multiple times. The response will only contain Server matching the status
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: GetServersStatusEnum;
}

export class GetServers200ApplicationJSONMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetServers200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetServers200ApplicationJSONMetaPagination)
  pagination: GetServers200ApplicationJSONMetaPagination;
}

export class GetServers200ApplicationJSONServersDatacenterLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * The Server types the Datacenter can handle
 */
export class GetServers200ApplicationJSONServersDatacenterServerTypes extends SpeakeasyBase {
  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available: number[];

  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available_for_migration" })
  availableForMigration: number[];

  /**
   * IDs of Server types that are supported in the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supported" })
  supported: number[];
}

/**
 * Datacenter this Resource is located at
 */
export class GetServers200ApplicationJSONServersDatacenter extends SpeakeasyBase {
  /**
   * Description of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GetServers200ApplicationJSONServersDatacenterLocation)
  location: GetServers200ApplicationJSONServersDatacenterLocation;

  /**
   * Unique identifier of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Server types the Datacenter can handle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_types" })
  @Type(() => GetServers200ApplicationJSONServersDatacenterServerTypes)
  serverTypes: GetServers200ApplicationJSONServersDatacenterServerTypes;
}

/**
 * Information about the Server the Image was created from
 */
export class GetServers200ApplicationJSONServersImageCreatedFrom extends SpeakeasyBase {
  /**
   * ID of the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Server name at the time the Image was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Flavor of operating system contained in the Image
 */
export enum GetServers200ApplicationJSONServersImageOsFlavorEnum {
  Ubuntu = "ubuntu",
  Centos = "centos",
  Debian = "debian",
  Fedora = "fedora",
  Unknown = "unknown",
}

/**
 * Protection configuration for the Resource
 */
export class GetServers200ApplicationJSONServersImageProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Whether the Image can be used or if it's still being created or unavailable
 */
export enum GetServers200ApplicationJSONServersImageStatusEnum {
  Available = "available",
  Creating = "creating",
  Unavailable = "unavailable",
}

/**
 * Type of the Image
 */
export enum GetServers200ApplicationJSONServersImageTypeEnum {
  System = "system",
  App = "app",
  Snapshot = "snapshot",
  Backup = "backup",
  Temporary = "temporary",
}

export class GetServers200ApplicationJSONServersImage extends SpeakeasyBase {
  /**
   * ID of Server the Image is bound to. Only set for Images of type `backup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bound_to" })
  boundTo: number;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Information about the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_from" })
  @Type(() => GetServers200ApplicationJSONServersImageCreatedFrom)
  createdFrom: GetServers200ApplicationJSONServersImageCreatedFrom;

  /**
   * Point in time where the Image was deleted (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: string;

  /**
   * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Size of the disk contained in the Image in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk_size" })
  diskSize: number;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_size" })
  imageSize: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Unique identifier of the Image. This value is only set for system Images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Flavor of operating system contained in the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_flavor" })
  osFlavor: GetServers200ApplicationJSONServersImageOsFlavorEnum;

  /**
   * Operating system version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_version" })
  osVersion: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetServers200ApplicationJSONServersImageProtection)
  protection: GetServers200ApplicationJSONServersImageProtection;

  /**
   * Indicates that rapid deploy of the Image is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rapid_deploy" })
  rapidDeploy?: boolean;

  /**
   * Whether the Image can be used or if it's still being created or unavailable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetServers200ApplicationJSONServersImageStatusEnum;

  /**
   * Type of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServers200ApplicationJSONServersImageTypeEnum;
}

/**
 * Type of the ISO
 */
export enum GetServers200ApplicationJSONServersIsoTypeEnum {
  Public = "public",
  Private = "private",
}

/**
 * ISO Image that is attached to this Server. Null if no ISO is attached.
 */
export class GetServers200ApplicationJSONServersIso extends SpeakeasyBase {
  /**
   * ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Unique identifier of the ISO. Only set for public ISOs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Type of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServers200ApplicationJSONServersIsoTypeEnum;
}

/**
 * Type of the Placement Group
 */
export enum GetServers200ApplicationJSONServersPlacementGroupNullableTypeEnum {
  Spread = "spread",
}

export class GetServers200ApplicationJSONServersPlacementGroupNullable extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Array of IDs of Servers that are part of this Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servers" })
  servers: number[];

  /**
   * Type of the Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServers200ApplicationJSONServersPlacementGroupNullableTypeEnum;
}

export class GetServers200ApplicationJSONServersPrivateNet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alias_ips" })
  aliasIps?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mac_address" })
  macAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: number;
}

/**
 * Protection configuration for the Server
 */
export class GetServers200ApplicationJSONServersProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Server from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;

  /**
   * If true, prevents the Server from being rebuilt
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebuild" })
  rebuild: boolean;
}

/**
 * Status of the Firewall on the Server
 */
export enum GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewallStatusEnum {
  Applied = "applied",
  Pending = "pending",
}

export class GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewall extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Status of the Firewall on the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewallStatusEnum;
}

/**
 * IP address (v4) and its reverse DNS entry of this Server
 */
export class GetServers200ApplicationJSONServersPublicNetIpv4 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entry for the IPv4 addresses of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v4) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

export class GetServers200ApplicationJSONServersPublicNetIpv6DnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv6 address of this Server for which the reverse DNS entry has been set up
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * IPv6 network assigned to this Server and its reverse DNS entry
 */
export class GetServers200ApplicationJSONServersPublicNetIpv6 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default
   */
  @SpeakeasyMetadata({
    elemType: GetServers200ApplicationJSONServersPublicNetIpv6DnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => GetServers200ApplicationJSONServersPublicNetIpv6DnsPtr)
  dnsPtr: GetServers200ApplicationJSONServersPublicNetIpv6DnsPtr[];

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v6) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
 */
export class GetServers200ApplicationJSONServersPublicNet extends SpeakeasyBase {
  /**
   * Firewalls applied to the public network interface of this Server
   */
  @SpeakeasyMetadata({
    elemType:
      GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewall,
  })
  @Expose({ name: "firewalls" })
  @Type(
    () => GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewall
  )
  firewalls?: GetServers200ApplicationJSONServersPublicNetServerPublicNetFirewall[];

  /**
   * IDs of Floating IPs assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "floating_ips" })
  floatingIps: number[];

  /**
   * IP address (v4) and its reverse DNS entry of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv4" })
  @Type(() => GetServers200ApplicationJSONServersPublicNetIpv4)
  ipv4: GetServers200ApplicationJSONServersPublicNetIpv4;

  /**
   * IPv6 network assigned to this Server and its reverse DNS entry
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => GetServers200ApplicationJSONServersPublicNetIpv6)
  ipv6: GetServers200ApplicationJSONServersPublicNetIpv6;
}

/**
 * Type of cpu
 */
export enum GetServers200ApplicationJSONServersServerTypeCpuTypeEnum {
  Shared = "shared",
  Dedicated = "dedicated",
}

/**
 * Hourly costs for a Server type in this Location
 */
export class GetServers200ApplicationJSONServersServerTypePricesPriceHourly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

/**
 * Monthly costs for a Server type in this Location
 */
export class GetServers200ApplicationJSONServersServerTypePricesPriceMonthly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

export class GetServers200ApplicationJSONServersServerTypePrices extends SpeakeasyBase {
  /**
   * Name of the Location the price is for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * Hourly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_hourly" })
  @Type(() => GetServers200ApplicationJSONServersServerTypePricesPriceHourly)
  priceHourly: GetServers200ApplicationJSONServersServerTypePricesPriceHourly;

  /**
   * Monthly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_monthly" })
  @Type(() => GetServers200ApplicationJSONServersServerTypePricesPriceMonthly)
  priceMonthly: GetServers200ApplicationJSONServersServerTypePricesPriceMonthly;
}

/**
 * Type of Server boot drive. Local has higher speed. Network has better availability.
 */
export enum GetServers200ApplicationJSONServersServerTypeStorageTypeEnum {
  Local = "local",
  Network = "network",
}

/**
 * Type of Server - determines how much ram, disk and cpu a Server has
 */
export class GetServers200ApplicationJSONServersServerType extends SpeakeasyBase {
  /**
   * Number of cpu cores a Server of this type will have
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cores" })
  cores: number;

  /**
   * Type of cpu
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpu_type" })
  cpuType: GetServers200ApplicationJSONServersServerTypeCpuTypeEnum;

  /**
   * True if Server type is deprecated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: boolean;

  /**
   * Description of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Disk size a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk" })
  disk: number;

  /**
   * ID of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Memory a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory: number;

  /**
   * Unique identifier of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Prices in different Locations
   */
  @SpeakeasyMetadata({
    elemType: GetServers200ApplicationJSONServersServerTypePrices,
  })
  @Expose({ name: "prices" })
  @Type(() => GetServers200ApplicationJSONServersServerTypePrices)
  prices: GetServers200ApplicationJSONServersServerTypePrices[];

  /**
   * Type of Server boot drive. Local has higher speed. Network has better availability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storage_type" })
  storageType: GetServers200ApplicationJSONServersServerTypeStorageTypeEnum;
}

/**
 * Status of the Server
 */
export enum GetServers200ApplicationJSONServersStatusEnum {
  Running = "running",
  Initializing = "initializing",
  Starting = "starting",
  Stopping = "stopping",
  Off = "off",
  Deleting = "deleting",
  Migrating = "migrating",
  Rebuilding = "rebuilding",
  Unknown = "unknown",
}

export class GetServers200ApplicationJSONServers extends SpeakeasyBase {
  /**
   * Time window (UTC) in which the backup will run, or null if the backups are not enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backup_window" })
  backupWindow: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Datacenter this Resource is located at
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  @Type(() => GetServers200ApplicationJSONServersDatacenter)
  datacenter: GetServers200ApplicationJSONServersDatacenter;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => GetServers200ApplicationJSONServersImage)
  image: GetServers200ApplicationJSONServersImage;

  /**
   * Free Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "included_traffic" })
  includedTraffic: number;

  /**
   * Inbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingoing_traffic" })
  ingoingTraffic: number;

  /**
   * ISO Image that is attached to this Server. Null if no ISO is attached.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  @Type(() => GetServers200ApplicationJSONServersIso)
  iso: GetServers200ApplicationJSONServersIso;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "load_balancers" })
  loadBalancers?: number[];

  /**
   * True if Server has been locked and is not available to user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked: boolean;

  /**
   * Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Outbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outgoing_traffic" })
  outgoingTraffic: number;

  @SpeakeasyMetadata()
  @Expose({ name: "placement_group" })
  @Type(() => GetServers200ApplicationJSONServersPlacementGroupNullable)
  placementGroup?: GetServers200ApplicationJSONServersPlacementGroupNullable;

  /**
   * Size of the primary Disk
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary_disk_size" })
  primaryDiskSize: number;

  /**
   * Private networks information
   */
  @SpeakeasyMetadata({
    elemType: GetServers200ApplicationJSONServersPrivateNet,
  })
  @Expose({ name: "private_net" })
  @Type(() => GetServers200ApplicationJSONServersPrivateNet)
  privateNet: GetServers200ApplicationJSONServersPrivateNet[];

  /**
   * Protection configuration for the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetServers200ApplicationJSONServersProtection)
  protection: GetServers200ApplicationJSONServersProtection;

  /**
   * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_net" })
  @Type(() => GetServers200ApplicationJSONServersPublicNet)
  publicNet: GetServers200ApplicationJSONServersPublicNet;

  /**
   * True if rescue mode is enabled. Server will then boot into rescue system on next reboot
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rescue_enabled" })
  rescueEnabled: boolean;

  /**
   * Type of Server - determines how much ram, disk and cpu a Server has
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_type" })
  @Type(() => GetServers200ApplicationJSONServersServerType)
  serverType: GetServers200ApplicationJSONServersServerType;

  /**
   * Status of the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetServers200ApplicationJSONServersStatusEnum;

  /**
   * IDs of Volumes assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumes" })
  volumes?: number[];
}

/**
 * A paged array of servers
 */
export class GetServers200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetServers200ApplicationJSONMeta)
  meta?: GetServers200ApplicationJSONMeta;

  @SpeakeasyMetadata({ elemType: GetServers200ApplicationJSONServers })
  @Expose({ name: "servers" })
  @Type(() => GetServers200ApplicationJSONServers)
  servers: GetServers200ApplicationJSONServers[];
}

export class GetServersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A paged array of servers
   */
  @SpeakeasyMetadata()
  getServers200ApplicationJSONObject?: GetServers200ApplicationJSON;
}
