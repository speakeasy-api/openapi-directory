/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DimensionFilter } from "./dimensionfilter";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents a DimensionValuesRequest.
 */
export class DimensionValueRequest extends SpeakeasyBase {
  /**
   * The name of the dimension for which values should be requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensionName" })
  dimensionName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * The list of filters by which to filter values. The filters are ANDed.
   */
  @SpeakeasyMetadata({ elemType: DimensionFilter })
  @Expose({ name: "filters" })
  @Type(() => DimensionFilter)
  filters?: DimensionFilter[];

  /**
   * The kind of request this is, in this case dfareporting#dimensionValueRequest .
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;
}
