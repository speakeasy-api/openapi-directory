"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreviewDeployedDevicesFleetDevice:
    r"""Created"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""Specifies the unique string identifier of the Account responsible for this Device."""  
    date_authenticated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_authenticated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specifies the date this Device was last authenticated, given in UTC ISO 8601 format."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specifies the date this Device was created, given in UTC ISO 8601 format."""  
    date_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specifies the date this Device was last updated, given in UTC ISO 8601 format."""  
    deployment_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment_sid'), 'exclude': lambda f: f is None }})
    r"""Specifies the unique string identifier of the Deployment group that this Device is associated with."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Contains a boolean flag indicating whether the device is enabled or not, blocks device connectivity if set to false."""  
    fleet_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleet_sid'), 'exclude': lambda f: f is None }})
    r"""Specifies the unique string identifier of the Fleet that the given Device belongs to."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendly_name'), 'exclude': lambda f: f is None }})
    r"""Contains a human readable descriptive text for this Device, up to 256 characters long"""  
    identity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identity'), 'exclude': lambda f: f is None }})
    r"""Contains an arbitrary string identifier representing a human user associated with this Device, assigned by the developer, up to 256 characters long."""  
    sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sid'), 'exclude': lambda f: f is None }})
    r"""Contains a 34 character string that uniquely identifies this Device resource."""  
    unique_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_name'), 'exclude': lambda f: f is None }})
    r"""Contains a unique and addressable name of this Device, assigned by the developer, up to 128 characters long."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Contains an absolute URL for this Device resource."""  
    