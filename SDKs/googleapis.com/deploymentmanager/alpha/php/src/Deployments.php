<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Deployments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancels and removes the preview currently associated with the deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewResponse
     */
	public function deploymentmanagerDeploymentsCancelPreview(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/cancelPreview', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deploymentsCancelPreviewRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsCancelPreviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a deployment and all of the resources in the deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteResponse
     */
	public function deploymentmanagerDeploymentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a specific deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetResponse
     */
	public function deploymentmanagerDeploymentsGet(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyResponse
     */
	public function deploymentmanagerDeploymentsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a deployment and all of the resources described by the deployment manifest.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertResponse
     */
	public function deploymentmanagerDeploymentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deployment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all deployments for a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListResponse
     */
	public function deploymentmanagerDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deploymentsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeploymentsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a deployment and all of the resources described by the deployment manifest.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchResponse
     */
	public function deploymentmanagerDeploymentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deployment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyResponse
     */
	public function deploymentmanagerDeploymentsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopResponse
     */
	public function deploymentmanagerDeploymentsStop(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/stop', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deploymentsStopRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsResponse
     */
	public function deploymentmanagerDeploymentsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a deployment and all of the resources described by the deployment manifest.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateResponse
     */
	public function deploymentmanagerDeploymentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deployment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerDeploymentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}