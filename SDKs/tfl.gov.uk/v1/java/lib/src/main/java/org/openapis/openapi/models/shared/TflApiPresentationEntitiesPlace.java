/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TflApiPresentationEntitiesPlace - OK
 */
public class TflApiPresentationEntitiesPlace {
    /**
     * A bag of additional key/value pairs with extra information about this place.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalProperties")
    public TflApiPresentationEntitiesAdditionalProperties[] additionalProperties;

    public TflApiPresentationEntitiesPlace withAdditionalProperties(TflApiPresentationEntitiesAdditionalProperties[] additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    public TflApiPresentationEntitiesPlace[] children;

    public TflApiPresentationEntitiesPlace withChildren(TflApiPresentationEntitiesPlace[] children) {
        this.children = children;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childrenUrls")
    public String[] childrenUrls;

    public TflApiPresentationEntitiesPlace withChildrenUrls(String[] childrenUrls) {
        this.childrenUrls = childrenUrls;
        return this;
    }
    
    /**
     * A human readable name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonName")
    public String commonName;

    public TflApiPresentationEntitiesPlace withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * The distance of the place from its search point, if this is the result
     *             of a geographical search, otherwise zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance")
    public Double distance;

    public TflApiPresentationEntitiesPlace withDistance(Double distance) {
        this.distance = distance;
        return this;
    }
    
    /**
     * A unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public TflApiPresentationEntitiesPlace withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * WGS84 latitude of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lat")
    public Double lat;

    public TflApiPresentationEntitiesPlace withLat(Double lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * WGS84 longitude of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lon")
    public Double lon;

    public TflApiPresentationEntitiesPlace withLon(Double lon) {
        this.lon = lon;
        return this;
    }
    
    /**
     * The type of Place. See /Place/Meta/placeTypes for possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placeType")
    public String placeType;

    public TflApiPresentationEntitiesPlace withPlaceType(String placeType) {
        this.placeType = placeType;
        return this;
    }
    
    /**
     * The unique location of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public TflApiPresentationEntitiesPlace withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public TflApiPresentationEntitiesPlace(){}
}
