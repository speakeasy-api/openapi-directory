// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnvironmentHealthAttributeEnum string

const (
	EnvironmentHealthAttributeEnumStatus             EnvironmentHealthAttributeEnum = "Status"
	EnvironmentHealthAttributeEnumColor              EnvironmentHealthAttributeEnum = "Color"
	EnvironmentHealthAttributeEnumCauses             EnvironmentHealthAttributeEnum = "Causes"
	EnvironmentHealthAttributeEnumApplicationMetrics EnvironmentHealthAttributeEnum = "ApplicationMetrics"
	EnvironmentHealthAttributeEnumInstancesHealth    EnvironmentHealthAttributeEnum = "InstancesHealth"
	EnvironmentHealthAttributeEnumAll                EnvironmentHealthAttributeEnum = "All"
	EnvironmentHealthAttributeEnumHealthStatus       EnvironmentHealthAttributeEnum = "HealthStatus"
	EnvironmentHealthAttributeEnumRefreshedAt        EnvironmentHealthAttributeEnum = "RefreshedAt"
)

func (e EnvironmentHealthAttributeEnum) ToPointer() *EnvironmentHealthAttributeEnum {
	return &e
}

func (e *EnvironmentHealthAttributeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Status":
		fallthrough
	case "Color":
		fallthrough
	case "Causes":
		fallthrough
	case "ApplicationMetrics":
		fallthrough
	case "InstancesHealth":
		fallthrough
	case "All":
		fallthrough
	case "HealthStatus":
		fallthrough
	case "RefreshedAt":
		*e = EnvironmentHealthAttributeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentHealthAttributeEnum: %v", v)
	}
}
