// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
)

type assetsMonteCarloReturnsSimulation struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newAssetsMonteCarloReturnsSimulation(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *assetsMonteCarloReturnsSimulation {
	return &assetsMonteCarloReturnsSimulation{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// PostAssetsReturnsSimulationMonteCarloCornishFisher - Cornish-Fisher Distribution
// Simulate the return(s) of one asset for one or several time period(s) using a Cornish-Fisher distribution.
//
// References
// * [Maillard, Didier, A User’s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
// * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–Fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
func (s *assetsMonteCarloReturnsSimulation) PostAssetsReturnsSimulationMonteCarloCornishFisher(ctx context.Context, request operations.PostAssetsReturnsSimulationMonteCarloCornishFisherRequestBody) (*operations.PostAssetsReturnsSimulationMonteCarloCornishFisherResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/assets/returns/simulation/monte-carlo/cornish-fisher"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostAssetsReturnsSimulationMonteCarloCornishFisherResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostAssetsReturnsSimulationMonteCarloCornishFisher200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostAssetsReturnsSimulationMonteCarloCornishFisher200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// PostAssetsReturnsSimulationMonteCarloCornishFisherCorrected - Corrected Cornish-Fisher Distribution
// Simulate the return(s) of one asset for one or several time period(s) using a corrected Cornish-Fisher distribution.
//
// References
// * [Maillard, Didier, A User’s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
// * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
func (s *assetsMonteCarloReturnsSimulation) PostAssetsReturnsSimulationMonteCarloCornishFisherCorrected(ctx context.Context, request operations.PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedRequestBody) (*operations.PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/assets/returns/simulation/monte-carlo/cornish-fisher/corrected"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostAssetsReturnsSimulationMonteCarloCornishFisherCorrected200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostAssetsReturnsSimulationMonteCarloCornishFisherCorrected200ApplicationJSONObject = out
		}
	case httpRes.StatusCode == 500:
	}

	return res, nil
}

// PostAssetsReturnsSimulationMonteCarloGaussian - Gaussian Distribution
// Simulate the return(s) of one asset for one or several time period(s) using a Gaussian distribution.
//
// References
// * [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)
func (s *assetsMonteCarloReturnsSimulation) PostAssetsReturnsSimulationMonteCarloGaussian(ctx context.Context, request operations.PostAssetsReturnsSimulationMonteCarloGaussianRequestBody) (*operations.PostAssetsReturnsSimulationMonteCarloGaussianResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/assets/returns/simulation/monte-carlo/gaussian"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostAssetsReturnsSimulationMonteCarloGaussianResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.PostAssetsReturnsSimulationMonteCarloGaussian200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PostAssetsReturnsSimulationMonteCarloGaussian200ApplicationJSONObject = out
		}
	}

	return res, nil
}
