/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class TableDataInsertAllRequestRows extends SpeakeasyBase {
  /**
   * [Optional] A unique ID for each row. BigQuery uses this property to detect duplicate insertion requests on a best-effort basis.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insertId" })
  insertId?: string;

  /**
   * Represents a single JSON object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "json" })
  json?: Record<string, any>;
}

export class TableDataInsertAllRequest extends SpeakeasyBase {
  /**
   * [Optional] Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreUnknownValues" })
  ignoreUnknownValues?: boolean;

  /**
   * The resource type of the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The rows to insert.
   */
  @SpeakeasyMetadata({ elemType: TableDataInsertAllRequestRows })
  @Expose({ name: "rows" })
  @Type(() => TableDataInsertAllRequestRows)
  rows?: TableDataInsertAllRequestRows[];

  /**
   * [Optional] Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skipInvalidRows" })
  skipInvalidRows?: boolean;

  /**
   * If specified, treats the destination table as a base template, and inserts the rows into an instance table named "{destination}{templateSuffix}". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateSuffix" })
  templateSuffix?: string;
}
