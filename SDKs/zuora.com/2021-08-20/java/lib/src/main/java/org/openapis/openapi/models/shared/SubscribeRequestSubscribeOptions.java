/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SubscribeRequestSubscribeOptions -  This optional object specifies parameters related to invoicing - whether to immediately generate an invoice and collect payment, and whether the invoice should cover all subscriptions or just this new subscription.
 * The default behavior is to invoice immediately for all the account's subscriptions, with the current date as the target date, and immediately collect payment if the account's `AutoPay` flag is true.
 * 
 * 
 * **Values:** A valid SubscribeOptions object. 
 */
public class SubscribeRequestSubscribeOptions {
    /**
     * The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
     * 
     * **Note:**
     *   - This field is only available if you have the Invoice Settlement feature enabled and set the `X-Zuora-WSDL-Version` request header to `107` or later.
     *   - This field is valid only if the `applyCredit` field is set to `true`.
     *   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
     *   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplicationOrder")
    public String[] applicationOrder;
    public SubscribeRequestSubscribeOptions withApplicationOrder(String[] applicationOrder) {
        this.applicationOrder = applicationOrder;
        return this;
    }
    
    /**
     * Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
     * 
     * If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
     * 
     * **Note**: This field is only available if you have the Invoice Settlement feature enabled and set the `X-Zuora-WSDL-Version` request header to `107` or later.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplyCredit")
    public Boolean applyCredit;
    public SubscribeRequestSubscribeOptions withApplyCredit(Boolean applyCredit) {
        this.applyCredit = applyCredit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplyCreditBalance")
    public Boolean applyCreditBalance;
    public SubscribeRequestSubscribeOptions withApplyCreditBalance(Boolean applyCreditBalance) {
        this.applyCreditBalance = applyCreditBalance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ElectronicPaymentOptions")
    public SubscribeRequestSubscribeOptionsElectronicPaymentOptions electronicPaymentOptions;
    public SubscribeRequestSubscribeOptions withElectronicPaymentOptions(SubscribeRequestSubscribeOptionsElectronicPaymentOptions electronicPaymentOptions) {
        this.electronicPaymentOptions = electronicPaymentOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExternalPaymentOptions")
    public SubscribeRequestSubscribeOptionsExternalPaymentOptions externalPaymentOptions;
    public SubscribeRequestSubscribeOptions withExternalPaymentOptions(SubscribeRequestSubscribeOptionsExternalPaymentOptions externalPaymentOptions) {
        this.externalPaymentOptions = externalPaymentOptions;
        return this;
    }
    
    @JsonProperty("GenerateInvoice")
    public Boolean generateInvoice;
    public SubscribeRequestSubscribeOptions withGenerateInvoice(Boolean generateInvoice) {
        this.generateInvoice = generateInvoice;
        return this;
    }
    
    /**
     * Use this when you are using electronic payment types.
     * 
     * If `GenerateInvoice` is true, specifies whether payment should be applied when the subscription is created. If the `Account` &gt; `AutoPay` flag is true and `GenerateInvoice` is true and `ProcessPayments` is true, then the payment is created for the invoice balance and charged. The default value is `true`. 
     * 
     * If a temporary error that Zuora cannot create or submit a payment to the gateway is seen, Zuora will automatically retry the action to collect the payment. You can contact [Zuora Global Support](https://support.zuora.com/) to set the maximum number of retries that Zuora can perform. The number can range from 0 to 2 with a default value of 0. However, retrying the request can make the API call take longer than expected. Zuora does not guarantee the retry could be completed within the timeout limit. 
     * 
     * **Note:** The retry mechanism only supports the case that one single subscription is created by the Subscribe action. Also, the retry mechanism does not support the preview mode of the Subscribe action.
     * 
     * **Note:** If you have the [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) feature enabled, Zuora does not support using this field to collect payments against invoices.
     * 
     */
    @JsonProperty("ProcessPayments")
    public Boolean processPayments;
    public SubscribeRequestSubscribeOptions withProcessPayments(Boolean processPayments) {
        this.processPayments = processPayments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscribeInvoiceProcessingOptions")
    public SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions subscribeInvoiceProcessingOptions;
    public SubscribeRequestSubscribeOptions withSubscribeInvoiceProcessingOptions(SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions subscribeInvoiceProcessingOptions) {
        this.subscribeInvoiceProcessingOptions = subscribeInvoiceProcessingOptions;
        return this;
    }
    
}
