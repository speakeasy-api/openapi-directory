"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Roles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_roles_delete(self, request: operations.DirectoryRolesDeleteRequest, security: operations.DirectoryRolesDeleteSecurity) -> operations.DirectoryRolesDeleteResponse:
        r"""Deletes a role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesDeleteRequest, base_url, '/admin/directory/v1/customer/{customer}/roles/{roleId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryRolesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_roles_get(self, request: operations.DirectoryRolesGetRequest, security: operations.DirectoryRolesGetSecurity) -> operations.DirectoryRolesGetResponse:
        r"""Retrieves a role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesGetRequest, base_url, '/admin/directory/v1/customer/{customer}/roles/{roleId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryRolesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Role])
                res.role = out

        return res

    def directory_roles_insert(self, request: operations.DirectoryRolesInsertRequest, security: operations.DirectoryRolesInsertSecurity) -> operations.DirectoryRolesInsertResponse:
        r"""Creates a role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesInsertRequest, base_url, '/admin/directory/v1/customer/{customer}/roles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryRolesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Role])
                res.role = out

        return res

    def directory_roles_list(self, request: operations.DirectoryRolesListRequest, security: operations.DirectoryRolesListSecurity) -> operations.DirectoryRolesListResponse:
        r"""Retrieves a paginated list of all the roles in a domain."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesListRequest, base_url, '/admin/directory/v1/customer/{customer}/roles', request)
        
        query_params = utils.get_query_params(operations.DirectoryRolesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Roles])
                res.roles = out

        return res

    def directory_roles_patch(self, request: operations.DirectoryRolesPatchRequest, security: operations.DirectoryRolesPatchSecurity) -> operations.DirectoryRolesPatchResponse:
        r"""Patches a role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesPatchRequest, base_url, '/admin/directory/v1/customer/{customer}/roles/{roleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryRolesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Role])
                res.role = out

        return res

    def directory_roles_update(self, request: operations.DirectoryRolesUpdateRequest, security: operations.DirectoryRolesUpdateSecurity) -> operations.DirectoryRolesUpdateResponse:
        r"""Updates a role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryRolesUpdateRequest, base_url, '/admin/directory/v1/customer/{customer}/roles/{roleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryRolesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryRolesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Role])
                res.role = out

        return res

    