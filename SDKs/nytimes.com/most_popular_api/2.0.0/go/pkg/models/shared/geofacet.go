// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type GeoFacet2Enum string

const (
	GeoFacet2EnumUnknown GeoFacet2Enum = ""
)

func (e GeoFacet2Enum) ToPointer() *GeoFacet2Enum {
	return &e
}

func (e *GeoFacet2Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		*e = GeoFacet2Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GeoFacet2Enum: %v", v)
	}
}

type GeoFacetType string

const (
	GeoFacetTypeArrayOfany    GeoFacetType = "arrayOfany"
	GeoFacetTypeGeoFacet2Enum GeoFacetType = "GeoFacet_2_Enum"
)

type GeoFacet struct {
	ArrayOfany    []interface{}
	GeoFacet2Enum *GeoFacet2Enum

	Type GeoFacetType
}

func CreateGeoFacetArrayOfany(arrayOfany []interface{}) GeoFacet {
	typ := GeoFacetTypeArrayOfany

	return GeoFacet{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func CreateGeoFacetGeoFacet2Enum(geoFacet2Enum GeoFacet2Enum) GeoFacet {
	typ := GeoFacetTypeGeoFacet2Enum

	return GeoFacet{
		GeoFacet2Enum: &geoFacet2Enum,
		Type:          typ,
	}
}

func (u *GeoFacet) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfany := []interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfany); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = GeoFacetTypeArrayOfany
		return nil
	}

	geoFacet2Enum := new(GeoFacet2Enum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&geoFacet2Enum); err == nil {
		u.GeoFacet2Enum = geoFacet2Enum
		u.Type = GeoFacetTypeGeoFacet2Enum
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GeoFacet) MarshalJSON() ([]byte, error) {
	if u.ArrayOfany != nil {
		return json.Marshal(u.ArrayOfany)
	}

	if u.GeoFacet2Enum != nil {
		return json.Marshal(u.GeoFacet2Enum)
	}

	return nil, nil
}
