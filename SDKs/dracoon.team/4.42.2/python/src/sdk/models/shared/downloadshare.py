"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DownloadShareClassificationEnum(str, Enum):
    r"""&#128679; Deprecated since v4.11.0
    
    Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    (default: classification from parent room)
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DownloadShare:
    r"""Download Share information"""
    
    access_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessKey') }})
    r"""Share access key to generate secure link"""  
    cnt_downloads: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cntDownloads') }})
    r"""Downloads counter (incremented on each download)"""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Creation date"""  
    created_by: shared_userinfo.UserInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy') }})
    r"""User information"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Share ID"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Alias name"""  
    node_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeId') }})
    r"""Source node ID"""  
    notify_creator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyCreator') }})
    r"""&#128679; Deprecated since v4.20.0
    
    Notify creator on every download.
    """  
    classification: Optional[DownloadShareClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.11.0
    
    Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    (default: classification from parent room)
    """  
    data_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataUrl'), 'exclude': lambda f: f is None }})
    r"""Path to shared download node"""  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    internal_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalNotes'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Internal notes
    """  
    is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encrypted share
    
    (this only applies to shared files, not folders)
    """  
    is_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isProtected'), 'exclude': lambda f: f is None }})
    r"""Is share protected by password"""  
    max_downloads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxDownloads'), 'exclude': lambda f: f is None }})
    r"""Max allowed downloads"""  
    node_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodePath'), 'exclude': lambda f: f is None }})
    r"""Path to shared download node"""  
    node_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeType'), 'exclude': lambda f: f is None }})
    r"""Node type"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes"""  
    recipients: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.11.0
    
    CSV string of recipient email addresses
    """  
    show_creator_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showCreatorName'), 'exclude': lambda f: f is None }})
    r"""Show creator first and last name."""  
    show_creator_username: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showCreatorUsername'), 'exclude': lambda f: f is None }})
    r"""Show creator email address."""  
    sms_recipients: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsRecipients'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.11.0
    
    CSV string of recipient MSISDNs
    """  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Modification date"""  
    updated_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    