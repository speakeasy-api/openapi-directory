/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The settings for client-side encryption for cryptographic computing.
 */
export class CreateCollaborationRequestBodyDataEncryptionMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowCleartext" })
  allowCleartext?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allowDuplicates" })
  allowDuplicates?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allowJoinsOnColumnsWithDifferentNames" })
  allowJoinsOnColumnsWithDifferentNames?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "preserveNulls" })
  preserveNulls?: boolean;
}

/**
 * An indicator as to whether query logging has been enabled or disabled for the collaboration.
 */
export enum CreateCollaborationRequestBodyQueryLogStatusEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

export class CreateCollaborationRequestBody extends SpeakeasyBase {
  /**
   * The display name of the collaboration creator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creatorDisplayName" })
  creatorDisplayName: string;

  /**
   * The abilities granted to the collaboration creator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creatorMemberAbilities" })
  creatorMemberAbilities: shared.MemberAbilityEnum[];

  /**
   * The settings for client-side encryption for cryptographic computing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataEncryptionMetadata" })
  @Type(() => CreateCollaborationRequestBodyDataEncryptionMetadata)
  dataEncryptionMetadata?: CreateCollaborationRequestBodyDataEncryptionMetadata;

  /**
   * A description of the collaboration provided by the collaboration owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * A list of initial members, not including the creator. This list is immutable.
   */
  @SpeakeasyMetadata({ elemType: shared.MemberSpecification })
  @Expose({ name: "members" })
  @Type(() => shared.MemberSpecification)
  members: shared.MemberSpecification[];

  /**
   * The display name for a collaboration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * An indicator as to whether query logging has been enabled or disabled for the collaboration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryLogStatus" })
  queryLogStatus: CreateCollaborationRequestBodyQueryLogStatusEnum;

  /**
   * Map of tags assigned to a resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateCollaborationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateCollaborationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateCollaborationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createCollaborationOutput?: shared.CreateCollaborationOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
