"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import computetype_enum as shared_computetype_enum
from ..shared import createsimulationjobresponse as shared_createsimulationjobresponse
from ..shared import datasourceconfig as shared_datasourceconfig
from ..shared import robotapplicationconfig as shared_robotapplicationconfig
from ..shared import simulationapplicationconfig as shared_simulationapplicationconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSimulationJobRequestBodyCompute:
    r"""Compute information for the simulation job."""
    
    compute_type: Optional[shared_computetype_enum.ComputeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeType'), 'exclude': lambda f: f is None }})  
    gpu_unit_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpuUnitLimit'), 'exclude': lambda f: f is None }})  
    simulation_unit_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulationUnitLimit'), 'exclude': lambda f: f is None }})  
    
class CreateSimulationJobRequestBodyFailureBehaviorEnum(str, Enum):
    r"""<p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>"""
    FAIL = 'Fail'
    CONTINUE = 'Continue'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSimulationJobRequestBodyLoggingConfig:
    r"""The logging configuration."""
    
    record_all_ros_topics: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordAllRosTopics'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSimulationJobRequestBodyOutputLocation:
    r"""The output location."""
    
    s3_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Bucket'), 'exclude': lambda f: f is None }})  
    s3_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Prefix'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSimulationJobRequestBodyVpcConfig:
    r"""If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs."""
    
    assign_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignPublicIp'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroups'), 'exclude': lambda f: f is None }})  
    subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSimulationJobRequestBody:
    
    iam_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamRole') }})
    r"""The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job."""  
    max_job_duration_in_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxJobDurationInSeconds') }})
    r"""The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>."""  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken'), 'exclude': lambda f: f is None }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    compute: Optional[CreateSimulationJobRequestBodyCompute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compute'), 'exclude': lambda f: f is None }})
    r"""Compute information for the simulation job."""  
    data_sources: Optional[list[shared_datasourceconfig.DataSourceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSources'), 'exclude': lambda f: f is None }})
    r"""<p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>"""  
    failure_behavior: Optional[CreateSimulationJobRequestBodyFailureBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureBehavior'), 'exclude': lambda f: f is None }})
    r"""<p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>"""  
    logging_config: Optional[CreateSimulationJobRequestBodyLoggingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loggingConfig'), 'exclude': lambda f: f is None }})
    r"""The logging configuration."""  
    output_location: Optional[CreateSimulationJobRequestBodyOutputLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputLocation'), 'exclude': lambda f: f is None }})
    r"""The output location."""  
    robot_applications: Optional[list[shared_robotapplicationconfig.RobotApplicationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robotApplications'), 'exclude': lambda f: f is None }})
    r"""The robot application to use in the simulation job."""  
    simulation_applications: Optional[list[shared_simulationapplicationconfig.SimulationApplicationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulationApplications'), 'exclude': lambda f: f is None }})
    r"""The simulation application to use in the simulation job."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A map that contains tag keys and tag values that are attached to the simulation job."""  
    vpc_config: Optional[CreateSimulationJobRequestBodyVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfig'), 'exclude': lambda f: f is None }})
    r"""If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs."""  
    

@dataclasses.dataclass
class CreateSimulationJobRequest:
    
    request_body: CreateSimulationJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateSimulationJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_simulation_job_response: Optional[shared_createsimulationjobresponse.CreateSimulationJobResponse] = dataclasses.field(default=None)
    r"""Success"""  
    idempotent_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotentParameterMismatchException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    