"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customemaillambdaversionconfigtype as shared_customemaillambdaversionconfigtype
from ..shared import customsmslambdaversionconfigtype as shared_customsmslambdaversionconfigtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LambdaConfigType:
    r"""Specifies the configuration for Lambda triggers."""
    
    create_auth_challenge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateAuthChallenge'), 'exclude': lambda f: f is None }})  
    custom_email_sender: Optional[shared_customemaillambdaversionconfigtype.CustomEmailLambdaVersionConfigType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomEmailSender'), 'exclude': lambda f: f is None }})  
    custom_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomMessage'), 'exclude': lambda f: f is None }})  
    custom_sms_sender: Optional[shared_customsmslambdaversionconfigtype.CustomSMSLambdaVersionConfigType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomSMSSender'), 'exclude': lambda f: f is None }})  
    define_auth_challenge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefineAuthChallenge'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSKeyID'), 'exclude': lambda f: f is None }})  
    post_authentication: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostAuthentication'), 'exclude': lambda f: f is None }})  
    post_confirmation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostConfirmation'), 'exclude': lambda f: f is None }})  
    pre_authentication: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreAuthentication'), 'exclude': lambda f: f is None }})  
    pre_sign_up: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreSignUp'), 'exclude': lambda f: f is None }})  
    pre_token_generation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreTokenGeneration'), 'exclude': lambda f: f is None }})  
    user_migration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserMigration'), 'exclude': lambda f: f is None }})  
    verify_auth_challenge_response: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerifyAuthChallengeResponse'), 'exclude': lambda f: f is None }})  
    