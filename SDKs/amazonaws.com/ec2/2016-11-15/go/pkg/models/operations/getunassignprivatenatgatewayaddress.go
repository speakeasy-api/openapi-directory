// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUnassignPrivateNatGatewayAddressActionEnum
type GETUnassignPrivateNatGatewayAddressActionEnum string

const (
	GETUnassignPrivateNatGatewayAddressActionEnumUnassignPrivateNatGatewayAddress GETUnassignPrivateNatGatewayAddressActionEnum = "UnassignPrivateNatGatewayAddress"
)

func (e *GETUnassignPrivateNatGatewayAddressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UnassignPrivateNatGatewayAddress":
		*e = GETUnassignPrivateNatGatewayAddressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUnassignPrivateNatGatewayAddressActionEnum: %s", s)
	}
}

// GETUnassignPrivateNatGatewayAddressVersionEnum
type GETUnassignPrivateNatGatewayAddressVersionEnum string

const (
	GETUnassignPrivateNatGatewayAddressVersionEnumTwoThousandAndSixteen1115 GETUnassignPrivateNatGatewayAddressVersionEnum = "2016-11-15"
)

func (e *GETUnassignPrivateNatGatewayAddressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETUnassignPrivateNatGatewayAddressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUnassignPrivateNatGatewayAddressVersionEnum: %s", s)
	}
}

type GETUnassignPrivateNatGatewayAddressQueryParams struct {
	Action GETUnassignPrivateNatGatewayAddressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
	MaxDrainDurationSeconds *int64 `queryParam:"style=form,explode=true,name=MaxDrainDurationSeconds"`
	// The NAT gateway ID.
	NatGatewayID string `queryParam:"style=form,explode=true,name=NatGatewayId"`
	// The private IPv4 addresses you want to unassign.
	PrivateIPAddress []string                                       `queryParam:"style=form,explode=true,name=PrivateIpAddress"`
	Version          GETUnassignPrivateNatGatewayAddressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETUnassignPrivateNatGatewayAddressHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUnassignPrivateNatGatewayAddressRequest struct {
	QueryParams GETUnassignPrivateNatGatewayAddressQueryParams
	Headers     GETUnassignPrivateNatGatewayAddressHeaders
}

type GETUnassignPrivateNatGatewayAddressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
