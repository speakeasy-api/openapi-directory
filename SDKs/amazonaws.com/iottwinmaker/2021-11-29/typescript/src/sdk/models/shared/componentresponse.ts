/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentPropertyGroupResponse } from "./componentpropertygroupresponse";
import { Status } from "./status";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that returns information about a component type create or update request.
 */
export class ComponentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "componentName" })
  componentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeId" })
  componentTypeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "definedIn" })
  definedIn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: any;

  @SpeakeasyMetadata({ elemType: ComponentPropertyGroupResponse })
  @Expose({ name: "propertyGroups" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentPropertyGroupResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentPropertyGroupResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyGroups?: Record<string, ComponentPropertyGroupResponse>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => Status)
  status?: Status;

  @SpeakeasyMetadata()
  @Expose({ name: "syncSource" })
  syncSource?: string;
}
