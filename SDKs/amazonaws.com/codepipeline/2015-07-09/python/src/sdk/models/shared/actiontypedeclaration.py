"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actiontypeartifactdetails as shared_actiontypeartifactdetails
from ..shared import actiontypeexecutor as shared_actiontypeexecutor
from ..shared import actiontypeidentifier as shared_actiontypeidentifier
from ..shared import actiontypepermissions as shared_actiontypepermissions
from ..shared import actiontypeurls as shared_actiontypeurls
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionTypeDeclaration:
    r"""The parameters for the action type definition that are provided when the action type is created or updated."""
    
    executor: shared_actiontypeexecutor.ActionTypeExecutor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executor') }})  
    id: shared_actiontypeidentifier.ActionTypeIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    input_artifact_details: shared_actiontypeartifactdetails.ActionTypeArtifactDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputArtifactDetails') }})  
    output_artifact_details: shared_actiontypeartifactdetails.ActionTypeArtifactDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputArtifactDetails') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    permissions: Optional[shared_actiontypepermissions.ActionTypePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    properties: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""The properties of the action type to be updated."""  
    urls: Optional[shared_actiontypeurls.ActionTypeUrls] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urls'), 'exclude': lambda f: f is None }})  
    