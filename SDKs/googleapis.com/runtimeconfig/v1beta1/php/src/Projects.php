<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new RuntimeConfig resource. The configuration name must be unique within project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateResponse
     */
	public function runtimeconfigProjectsConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/configs', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runtimeConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runtimeConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuntimeConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyResponse
     */
	public function runtimeconfigProjectsConfigsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the RuntimeConfig resources within project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListResponse
     */
	public function runtimeconfigProjectsConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/configs', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyResponse
     */
	public function runtimeconfigProjectsConfigsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a variable within the given configuration. You cannot create a variable with a name that is a prefix of an existing variable name, or a name that has an existing variable name as a prefix. To learn more about creating a variable, read the [Setting and Getting Data](/deployment-manager/runtime-configurator/set-and-get-variables) documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateResponse
     */
	public function runtimeconfigProjectsConfigsVariablesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/variables', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variable", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists variables within given a configuration, matching any provided filters. This only lists variable names, not the values, unless `return_values` is true, in which case only variables that user has IAM permission to GetVariable will be returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListResponse
     */
	public function runtimeconfigProjectsConfigsVariablesList(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/variables', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVariablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVariablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing variable with a new value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateResponse
     */
	public function runtimeconfigProjectsConfigsVariablesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variable", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watches a specific variable and waits for a change in the variable's value. When there is a change, this method returns the new value or times out. If a variable is deleted while being watched, the `variableState` state is set to `DELETED` and the method returns the last known variable `value`. If you set the deadline for watching to a larger value than internal timeout (60 seconds), the current variable value is returned and the `variableState` will be `VARIABLE_STATE_UNSPECIFIED`. To learn more about creating a watcher, read the [Watching a Variable for Changes](/deployment-manager/runtime-configurator/watching-a-variable) documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchResponse
     */
	public function runtimeconfigProjectsConfigsVariablesWatch(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:watch', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "watchVariableRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsVariablesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Waiter resource. This operation returns a long-running Operation resource which can be polled for completion. However, a waiter with the given name will exist (and can be retrieved) prior to the operation completing. If the operation fails, the failed Waiter resource will still exist and must be deleted prior to subsequent creation attempts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateResponse
     */
	public function runtimeconfigProjectsConfigsWaitersCreate(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/waiters', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "waiter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the waiter with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteResponse
     */
	public function runtimeconfigProjectsConfigsWaitersDelete(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a single waiter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetResponse
     */
	public function runtimeconfigProjectsConfigsWaitersGet(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->waiter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Waiter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List waiters within the given configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListResponse
     */
	public function runtimeconfigProjectsConfigsWaitersList(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/waiters', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWaitersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWaitersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsResponse
     */
	public function runtimeconfigProjectsConfigsWaitersTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RuntimeconfigProjectsConfigsWaitersTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}