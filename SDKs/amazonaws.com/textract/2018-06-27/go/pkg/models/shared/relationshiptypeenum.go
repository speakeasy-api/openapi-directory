// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RelationshipTypeEnum string

const (
	RelationshipTypeEnumValue           RelationshipTypeEnum = "VALUE"
	RelationshipTypeEnumChild           RelationshipTypeEnum = "CHILD"
	RelationshipTypeEnumComplexFeatures RelationshipTypeEnum = "COMPLEX_FEATURES"
	RelationshipTypeEnumMergedCell      RelationshipTypeEnum = "MERGED_CELL"
	RelationshipTypeEnumTitle           RelationshipTypeEnum = "TITLE"
	RelationshipTypeEnumAnswer          RelationshipTypeEnum = "ANSWER"
	RelationshipTypeEnumTable           RelationshipTypeEnum = "TABLE"
	RelationshipTypeEnumTableTitle      RelationshipTypeEnum = "TABLE_TITLE"
	RelationshipTypeEnumTableFooter     RelationshipTypeEnum = "TABLE_FOOTER"
)

func (e RelationshipTypeEnum) ToPointer() *RelationshipTypeEnum {
	return &e
}

func (e *RelationshipTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VALUE":
		fallthrough
	case "CHILD":
		fallthrough
	case "COMPLEX_FEATURES":
		fallthrough
	case "MERGED_CELL":
		fallthrough
	case "TITLE":
		fallthrough
	case "ANSWER":
		fallthrough
	case "TABLE":
		fallthrough
	case "TABLE_TITLE":
		fallthrough
	case "TABLE_FOOTER":
		*e = RelationshipTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationshipTypeEnum: %v", v)
	}
}
