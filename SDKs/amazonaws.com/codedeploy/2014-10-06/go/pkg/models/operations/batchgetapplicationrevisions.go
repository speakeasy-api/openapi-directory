// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetApplicationRevisionsXAmzTargetEnum
type BatchGetApplicationRevisionsXAmzTargetEnum string

const (
	BatchGetApplicationRevisionsXAmzTargetEnumCodeDeploy20141006BatchGetApplicationRevisions BatchGetApplicationRevisionsXAmzTargetEnum = "CodeDeploy_20141006.BatchGetApplicationRevisions"
)

func (e *BatchGetApplicationRevisionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.BatchGetApplicationRevisions":
		*e = BatchGetApplicationRevisionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetApplicationRevisionsXAmzTargetEnum: %s", s)
	}
}

type BatchGetApplicationRevisionsHeaders struct {
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetApplicationRevisionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetApplicationRevisionsRequest struct {
	Headers BatchGetApplicationRevisionsHeaders
	Request shared.BatchGetApplicationRevisionsInput `request:"mediaType=application/json"`
}

type BatchGetApplicationRevisionsResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	// Success
	BatchGetApplicationRevisionsOutput *shared.BatchGetApplicationRevisionsOutput
	// BatchLimitExceededException
	BatchLimitExceededException interface{}
	ContentType                 string
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidRevisionException
	InvalidRevisionException interface{}
	// RevisionRequiredException
	RevisionRequiredException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
