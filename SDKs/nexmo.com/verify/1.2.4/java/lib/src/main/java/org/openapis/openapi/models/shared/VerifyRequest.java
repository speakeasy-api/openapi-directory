/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class VerifyRequest {
    /**
     * You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
     */
    @SpeakeasyMetadata("form:name=api_key")
    public String apiKey;
    public VerifyRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
     */
    @SpeakeasyMetadata("form:name=api_secret")
    public String apiSecret;
    public VerifyRequest withApiSecret(String apiSecret) {
        this.apiSecret = apiSecret;
        return this;
    }
    
    /**
     * An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: "Your `Acme Inc` PIN is ..."
     */
    @SpeakeasyMetadata("form:name=brand")
    public String brand;
    public VerifyRequest withBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * The length of the verification code.
     */
    @SpeakeasyMetadata("form:name=code_length")
    public VerifyRequestCodeLengthEnum codeLength;
    public VerifyRequest withCodeLength(VerifyRequestCodeLengthEnum codeLength) {
        this.codeLength = codeLength;
        return this;
    }
    
    /**
     * If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
     */
    @SpeakeasyMetadata("form:name=country")
    public String country;
    public VerifyRequest withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: &lt;https://developer.nexmo.com/verify/guides/verify-languages&gt;
     */
    @SpeakeasyMetadata("form:name=lg")
    public VerifyRequestLgEnum lg;
    public VerifyRequest withLg(VerifyRequestLgEnum lg) {
        this.lg = lg;
        return this;
    }
    
    /**
     * Specifies the wait time in seconds between attempts to deliver the verification code.
     */
    @SpeakeasyMetadata("form:name=next_event_wait")
    public Long nextEventWait;
    public VerifyRequest withNextEventWait(Long nextEventWait) {
        this.nextEventWait = nextEventWait;
        return this;
    }
    
    /**
     * The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     */
    @SpeakeasyMetadata("form:name=number")
    public String number;
    public VerifyRequest withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. &lt;b&gt;This feature is not enabled by default&lt;/b&gt; - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status `20` will be returned.
     */
    @SpeakeasyMetadata("form:name=pin_code")
    public String pinCode;
    public VerifyRequest withPinCode(String pinCode) {
        this.pinCode = pinCode;
        return this;
    }
    
    /**
     * How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
     */
    @SpeakeasyMetadata("form:name=pin_expiry")
    public Long pinExpiry;
    public VerifyRequest withPinExpiry(Long pinExpiry) {
        this.pinExpiry = pinExpiry;
        return this;
    }
    
    /**
     * An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply.
     */
    @SpeakeasyMetadata("form:name=sender_id")
    public String senderId;
    public VerifyRequest withSenderId(String senderId) {
        this.senderId = senderId;
        return this;
    }
    
    /**
     * Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
     */
    @SpeakeasyMetadata("form:name=workflow_id")
    public VerifyRequestWorkflowIdEnum workflowId;
    public VerifyRequest withWorkflowId(VerifyRequestWorkflowIdEnum workflowId) {
        this.workflowId = workflowId;
        return this;
    }
    
}
