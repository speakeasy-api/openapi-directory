"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hitlayoutparameter as shared_hitlayoutparameter
from ..shared import reviewpolicy as shared_reviewpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateHITWithHITTypeRequest:
    
    hit_type_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITTypeId') }})  
    lifetime_in_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LifetimeInSeconds') }})  
    assignment_review_policy: Optional[shared_reviewpolicy.ReviewPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssignmentReviewPolicy'), 'exclude': lambda f: f is None }})  
    hit_layout_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITLayoutId'), 'exclude': lambda f: f is None }})  
    hit_layout_parameters: Optional[list[shared_hitlayoutparameter.HITLayoutParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITLayoutParameters'), 'exclude': lambda f: f is None }})  
    hit_review_policy: Optional[shared_reviewpolicy.ReviewPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HITReviewPolicy'), 'exclude': lambda f: f is None }})  
    max_assignments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxAssignments'), 'exclude': lambda f: f is None }})  
    question: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Question'), 'exclude': lambda f: f is None }})  
    requester_annotation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequesterAnnotation'), 'exclude': lambda f: f is None }})  
    unique_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UniqueRequestToken'), 'exclude': lambda f: f is None }})  
    