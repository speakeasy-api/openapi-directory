"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import booksannotationsrange as shared_booksannotationsrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnnotationClientVersionRanges:
    r"""Selection ranges sent from the client."""
    
    cfi_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cfiRange'), 'exclude': lambda f: f is None }})  
    content_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentVersion'), 'exclude': lambda f: f is None }})
    r"""Content version the client sent in."""  
    gb_image_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbImageRange'), 'exclude': lambda f: f is None }})  
    gb_text_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbTextRange'), 'exclude': lambda f: f is None }})  
    image_cfi_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageCfiRange'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnnotationCurrentVersionRanges:
    r"""Selection ranges for the most recent content version."""
    
    cfi_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cfiRange'), 'exclude': lambda f: f is None }})  
    content_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentVersion'), 'exclude': lambda f: f is None }})
    r"""Content version applicable to ranges below."""  
    gb_image_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbImageRange'), 'exclude': lambda f: f is None }})  
    gb_text_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbTextRange'), 'exclude': lambda f: f is None }})  
    image_cfi_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageCfiRange'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnnotationLayerSummary:
    
    allowed_character_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedCharacterCount'), 'exclude': lambda f: f is None }})
    r"""Maximum allowed characters on this layer, especially for the \\"copy\\" layer."""  
    limit_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitType'), 'exclude': lambda f: f is None }})
    r"""Type of limitation on this layer. \\"limited\\" or \\"unlimited\\" for the \\"copy\\" layer."""  
    remaining_character_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingCharacterCount'), 'exclude': lambda f: f is None }})
    r"""Remaining allowed characters on this layer, especially for the \\"copy\\" layer."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Annotation:
    r"""Successful response"""
    
    after_selected_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('afterSelectedText'), 'exclude': lambda f: f is None }})
    r"""Anchor text after excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty."""  
    before_selected_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beforeSelectedText'), 'exclude': lambda f: f is None }})
    r"""Anchor text before excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty."""  
    client_version_ranges: Optional[AnnotationClientVersionRanges] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientVersionRanges'), 'exclude': lambda f: f is None }})
    r"""Selection ranges sent from the client."""  
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})
    r"""Timestamp for the created time of this annotation."""  
    current_version_ranges: Optional[AnnotationCurrentVersionRanges] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersionRanges'), 'exclude': lambda f: f is None }})
    r"""Selection ranges for the most recent content version."""  
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""User-created data for this annotation."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Indicates that this annotation is deleted."""  
    highlight_style: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlightStyle'), 'exclude': lambda f: f is None }})
    r"""The highlight style for this annotation."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of this annotation, in the form of a GUID."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    layer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layerId'), 'exclude': lambda f: f is None }})
    r"""The layer this annotation is for."""  
    layer_summary: Optional[AnnotationLayerSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layerSummary'), 'exclude': lambda f: f is None }})  
    page_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageIds'), 'exclude': lambda f: f is None }})
    r"""Pages that this annotation spans."""  
    selected_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedText'), 'exclude': lambda f: f is None }})
    r"""Excerpt from the volume."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""URL to this resource."""  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'exclude': lambda f: f is None }})
    r"""Timestamp for the last time this annotation was modified."""  
    volume_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeId'), 'exclude': lambda f: f is None }})
    r"""The volume that this annotation belongs to."""  
    