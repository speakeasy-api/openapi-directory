"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import featureflags_enum as shared_featureflags_enum
from ..shared import itemlist as shared_itemlist
from ..shared import itemtype_enum as shared_itemtype_enum
from ..shared import listorder_enum as shared_listorder_enum
from ..shared import listorderby_enum as shared_listorderby_enum
from ..shared import serviceerror as shared_serviceerror
from typing import Optional


@dataclasses.dataclass
class GetListsRequest:
    
    ids: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""A comma delimited list of item list identifiers.
    
    These can be list ids e.g. `14354,65473,3234`
    
    Or more complex sort/filter queries using pipes e.g.
    
    `14354|max_rating=AUOFLC-E|order=asc|order_by=year-added,65473|page_size=30,3234`
    
    _Note the id must always come first for each encoded list query_
    
    List parameters may be provide without the `param=` prefix e.g. `14354|genre:action`
    
    Only the following options can be present.
      - `order`
      - `order_by`
      - `max_rating`
      - `page_size`
      - `item_type`
      - `param`
    """  
    device: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device', 'style': 'form', 'explode': True }})
    r"""The type of device the content is targeting."""  
    ff: Optional[list[shared_featureflags_enum.FeatureFlagsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ff', 'style': 'form', 'explode': False }})
    r"""The set of opt in feature flags which cause breaking changes to responses.
    
    While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
    may need to evolve over this time.
    
    These feature flags allow clients to select which response formats they expect and avoid breaking
    clients as these formats evolve under the current major version.
    
    ### Flags
    
    - `all` - Enable all flags. Useful for testing. _Don't use in production_.
    - `idp` - Dynamic item detail pages with schedulable rows.
    - `ldp` - Dynamic list detail pages with schedulable rows.
    - `hb` - Hubble formatted image urls.
    - `rpt` - Updated resume point threshold logic.
    - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results.
    - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page.
    - `cd` - Custom Destination support.
    
    See the `feature-flags.md` for available flag details.
    """  
    item_type: Optional[shared_itemtype_enum.ItemTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'item_type', 'style': 'form', 'explode': True }})
    r"""The item type to filter by. Defaults to unspecified."""  
    lang: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""Language code for the preferred language to be returned in the response.
    
    Parameter value is case-insensitive and should be
      - a valid 2 letter language code without region such as en, de
      - or with region such as en_us, en_au
    
    If undefined then defaults to 'en', unless the server has been configured
    with a custom default.
    
    See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    """  
    max_rating: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_rating', 'style': 'form', 'explode': True }})
    r"""The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."""  
    order: Optional[shared_listorder_enum.ListOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The list sort order, either 'asc' or 'desc'."""  
    order_by: Optional[shared_listorderby_enum.ListOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""What to order by."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of items to return in a page."""  
    segments: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segments', 'style': 'form', 'explode': False }})
    r"""The list of segments to filter the response by."""  
    sub: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sub', 'style': 'form', 'explode': True }})
    r"""The active subscription code."""  
    

@dataclasses.dataclass
class GetListsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    item_lists: Optional[list[shared_itemlist.ItemList]] = dataclasses.field(default=None)
    r"""The array of item lists requested."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_error: Optional[shared_serviceerror.ServiceError] = dataclasses.field(default=None)
    r"""Bad request."""  
    