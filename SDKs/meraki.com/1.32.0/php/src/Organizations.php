<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organizations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Assign SM seats to a network
     * 
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
     */
	public function assignOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/assignSeats', \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * 
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
     */
	public function claimIntoOrganization(
        \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimIntoOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * 
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse
     */
	public function claimIntoOrganizationInventory(
        \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimIntoOrganizationInventory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new organization by cloning the addressed organization
     * 
     * Create a new organization by cloning the addressed organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
     */
	public function cloneOrganization(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganization201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CloneOrganization201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Combine multiple networks into a single network
     * 
     * Combine multiple networks into a single network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
     */
	public function combineOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks/combine', \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->combineOrganizationNetworks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworks200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new organization
     * 
     * Create a new organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse
     */
	public function createOrganization(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganization201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganization201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an action batch
     * 
     * Create an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse
     */
	public function createOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationActionBatch201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatch201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new adaptive policy ACL
     * 
     * Creates new adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
     */
	public function createOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new adaptive policy group
     * 
     * Creates a new adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
     */
	public function createOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an Adaptive Policy
     * 
     * Add an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
     */
	public function createOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new dashboard administrator
     * 
     * Create a new dashboard administrator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse
     */
	public function createOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdmin201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization-wide alert configuration
     * 
     * Create an organization-wide alert configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
     */
	public function createOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAlertsProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new branding policy to an organization
     * 
     * Add a new branding policy to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse
     */
	public function createOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationBrandingPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicy201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new configuration template
     * 
     * Create a new configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse
     */
	public function createOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationConfigTemplate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new early access feature opt-in for an organization
     * 
     * Create a new early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function createOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports event logs related to the onboarding app into elastisearch
     * 
     * Imports event logs related to the onboarding app into elastisearch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse
     */
	public function createOrganizationInventoryOnboardingCloudMonitoringExportEvent(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInventoryOnboardingCloudMonitoringExportEvent202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * 
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse
     */
	public function createOrganizationInventoryOnboardingCloudMonitoringImport(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates or updates an import session
     * 
     * Initiates or updates an import session. An import ID will be generated and used when you are ready to commit the import.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareResponse
     */
	public function createOrganizationInventoryOnboardingCloudMonitoringPrepare(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInventoryOnboardingCloudMonitoringPrepare201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a network
     * 
     * Create a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
     */
	public function createOrganizationNetwork(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationNetwork201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetwork201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Policy Object.
     * 
     * Creates a new Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
     */
	public function createOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObject201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Policy Object Group.
     * 
     * Creates a new Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
     */
	public function createOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObjectsGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a SAML IdP for your organization.
     * 
     * Create a SAML IdP for your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse
     */
	public function createOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationSamlIdp201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdp201ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a SAML role
     * 
     * Create a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse
     */
	public function createOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationSamlRole201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an organization
     * 
     * Delete an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse
     */
	public function deleteOrganization(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an action batch
     * 
     * Delete an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse
     */
	public function deleteOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy ACL
     * 
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
     */
	public function deleteOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
     */
	public function deleteOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an Adaptive Policy
     * 
     * Delete an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
     */
	public function deleteOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Revoke all access for a dashboard administrator within this organization
     * 
     * Revoke all access for a dashboard administrator within this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse
     */
	public function deleteOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins/{adminId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes an organization-wide alert config
     * 
     * Removes an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
     */
	public function deleteOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a branding policy
     * 
     * Delete a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse
     */
	public function deleteOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a configuration template
     * 
     * Remove a configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse
     */
	public function deleteOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an early access feature opt-in
     * 
     * Delete an early access feature opt-in
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function deleteOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object.
     * 
     * Deletes a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
     */
	public function deleteOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object Group.
     * 
     * Deletes a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
     */
	public function deleteOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a SAML IdP in your organization.
     * 
     * Remove a SAML IdP in your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse
     */
	public function deleteOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a SAML role
     * 
     * Remove a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse
     */
	public function deleteOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user and all of its authentication methods.
     * 
     * Delete a user and all of its authentication methods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse
     */
	public function deleteOrganizationUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return an organization
     * 
     * Return an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
     */
	public function getOrganization(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganization200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an action batch
     * 
     * Return an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse
     */
	public function getOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationActionBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatch200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the list of action batches in the organization
     * 
     * Return the list of action batches in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse
     */
	public function getOrganizationActionBatches(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationActionBatches200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the adaptive policy ACL information
     * 
     * Returns the adaptive policy ACL information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
     */
	public function getOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy ACLs in a organization
     * 
     * List adaptive policy ACLs in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
     */
	public function getOrganizationAdaptivePolicyAcls(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcls200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an adaptive policy group
     * 
     * Returns an adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
     */
	public function getOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy groups in a organization
     * 
     * List adaptive policy groups in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
     */
	public function getOrganizationAdaptivePolicyGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * Returns adaptive policy aggregate statistics for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
     */
	public function getOrganizationAdaptivePolicyOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policies in an organization
     * 
     * List adaptive policies in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
     */
	public function getOrganizationAdaptivePolicyPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an adaptive policy
     * 
     * Return an adaptive policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
     */
	public function getOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns global adaptive policy settings in an organization
     * 
     * Returns global adaptive policy settings in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
     */
	public function getOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the dashboard administrators in this organization
     * 
     * List the dashboard administrators in this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse
     */
	public function getOrganizationAdmins(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdmins200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all organization-wide alert configurations
     * 
     * List all organization-wide alert configurations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
     */
	public function getOrganizationAlertsProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAlertsProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the API requests made by an organization
     * 
     * List the API requests made by an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse
     */
	public function getOrganizationApiRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequests200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequests200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an aggregated overview of API requests data
     * 
     * Return an aggregated overview of API requests data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse
     */
	public function getOrganizationApiRequestsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequestsOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tracks organizations' API requests by response code across a given time period
     * 
     * Tracks organizations' API requests by response code across a given time period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse
     */
	public function getOrganizationApiRequestsOverviewResponseCodesByInterval(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByIntervalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApiRequestsOverviewResponseCodesByInterval200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationApiRequestsOverviewResponseCodesByInterval200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the branding policies of an organization
     * 
     * List the branding policies of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse
     */
	public function getOrganizationBrandingPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicies200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the branding policy IDs of an organization in priority order
     * 
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse
     */
	public function getOrganizationBrandingPoliciesPriorities(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/priorities', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPriorities200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a branding policy
     * 
     * Return a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse
     */
	public function getOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * 
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse
     */
	public function getOrganizationClientsBandwidthUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/bandwidthUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsBandwidthUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsBandwidthUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return summary information around client data usage (in mb) across the given organization.
     * 
     * Return summary information around client data usage (in mb) across the given organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse
     */
	public function getOrganizationClientsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client details in an organization
     * 
     * Return the client details in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse
     */
	public function getOrganizationClientsSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/search', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsSearch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single configuration template
     * 
     * Return a single configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse
     */
	public function getOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the configuration templates for this organization
     * 
     * List the configuration templates for this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse
     */
	public function getOrganizationConfigTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplates200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View the Change Log for your organization
     * 
     * View the Change Log for your organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse
     */
	public function getOrganizationConfigurationChanges(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configurationChanges', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigurationChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigurationChanges200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in an organization
     * 
     * List the devices in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
     */
	public function getOrganizationDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the availability information for devices in an organization
     * 
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
     */
	public function getOrganizationDevicesAvailabilities(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/availabilities', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesAvailabilities200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilities200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the power status information for devices in an organization
     * 
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
     */
	public function getOrganizationDevicesPowerModulesStatusesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the status of every Meraki device in the organization
     * 
     * List the status of every Meraki device in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
     */
	public function getOrganizationDevicesStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatuses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of current device statuses
     * 
     * Return an overview of current device statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
     */
	public function getOrganizationDevicesStatusesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatusesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the current uplink addresses for devices in an organization.
     * 
     * List the current uplink addresses for devices in an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
     */
	public function getOrganizationDevicesUplinksAddressesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
     */
	public function getOrganizationDevicesUplinksLossAndLatency(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinksLossAndLatency', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksLossAndLatency200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatency200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the available early access features for organization
     * 
     * List the available early access features for organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse
     */
	public function getOrganizationEarlyAccessFeatures(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeatures200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show an early access feature opt-in for an organization
     * 
     * Show an early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function getOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the early access feature opt-ins for an organization
     * 
     * List the early access feature opt-ins for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse
     */
	public function getOrganizationEarlyAccessFeaturesOptIns(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeaturesOptIns200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get firmware upgrade information for an organization
     * 
     * Get firmware upgrade information for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse
     */
	public function getOrganizationFirmwareUpgrades(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/firmware/upgrades', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationFirmwareUpgrades200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgrades200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get firmware upgrade status for the filtered devices
     * 
     * Get firmware upgrade status for the filtered devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse
     */
	public function getOrganizationFirmwareUpgradesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/firmware/upgrades/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationFirmwareUpgradesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single device from the inventory of an organization
     * 
     * Return a single device from the inventory of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
     */
	public function getOrganizationInventoryDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the device inventory for an organization
     * 
     * Return the device inventory for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
     */
	public function getOrganizationInventoryDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check the status of a committed Import operation
     * 
     * Check the status of a committed Import operation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse
     */
	public function getOrganizationInventoryOnboardingCloudMonitoringImports(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of networks eligible for adding cloud monitored device
     * 
     * Returns list of networks eligible for adding cloud monitored device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse
     */
	public function getOrganizationInventoryOnboardingCloudMonitoringNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display a license
     * 
     * Display a license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
     */
	public function getOrganizationLicense(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/{licenseId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicense200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the licenses for an organization
     * 
     * List the licenses for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
     */
	public function getOrganizationLicenses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicenses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of the license state for an organization
     * 
     * Return an overview of the license state for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse
     */
	public function getOrganizationLicensesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicensesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the login security settings for an organization.
     * 
     * Returns the login security settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse
     */
	public function getOrganizationLoginSecurity(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/loginSecurity', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLoginSecurity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the networks that the user has privileges on in an organization
     * 
     * List the networks that the user has privileges on in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
     */
	public function getOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationNetworks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworks200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * 
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse
     */
	public function getOrganizationOpenapiSpec(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/openapiSpec', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationOpenapiSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationOpenapiSpec200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object.
     * 
     * Shows details of a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
     */
	public function getOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Objects belonging to the organization.
     * 
     * Lists Policy Objects belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
     */
	public function getOrganizationPolicyObjects(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjects200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object Group.
     * 
     * Shows details of a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
     */
	public function getOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Object Groups belonging to the organization.
     * 
     * Lists Policy Object Groups belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
     */
	public function getOrganizationPolicyObjectsGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the SAML SSO enabled settings for an organization.
     * 
     * Returns the SAML SSO enabled settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse
     */
	public function getOrganizationSaml(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSaml200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSaml200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a SAML IdP from your organization.
     * 
     * Get a SAML IdP from your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse
     */
	public function getOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlIdp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the SAML IdPs in your organization.
     * 
     * List the SAML IdPs in your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse
     */
	public function getOrganizationSamlIdps(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlIdps200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdps200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a SAML role
     * 
     * Return a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse
     */
	public function getOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlRole200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the SAML roles for this organization
     * 
     * List the SAML roles for this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse
     */
	public function getOrganizationSamlRoles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlRoles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SNMP settings for an organization
     * 
     * Return the SNMP settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse
     */
	public function getOrganizationSnmp(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/snmp', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the top 10 appliances sorted by utilization over given time range.
     * 
     * Return the top 10 appliances sorted by utilization over given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse
     */
	public function getOrganizationSummaryTopAppliancesByUtilization(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/appliances/byUtilization', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopAppliancesByUtilization200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopAppliancesByUtilization200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * 
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse
     */
	public function getOrganizationSummaryTopClientsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/clients/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopClientsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * 
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse
     */
	public function getOrganizationSummaryTopClientsManufacturersByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopClientsManufacturersByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopClientsManufacturersByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 devices sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 device models sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesModelsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/models/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 ssids by data usage over given time range
     * 
     * Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse
     */
	public function getOrganizationSummaryTopSsidsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/ssids/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopSsidsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSsidsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 switches by energy usage over given time range
     * 
     * Return metrics for organization's top 10 switches by energy usage over given time range. Default unit is joules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse
     */
	public function getOrganizationSummaryTopSwitchesByEnergyUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/switches/byEnergyUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopSwitchesByEnergyUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopSwitchesByEnergyUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
     */
	public function getOrganizationUplinksStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/uplinks/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationUplinksStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
     */
	public function getOrganizationWebhooksAlertTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/alertTypes', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksAlertTypes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the log of webhook POSTs sent
     * 
     * Return the log of webhook POSTs sent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
     */
	public function getOrganizationWebhooksLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/logs', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the organizations that the user has privileges on
     * 
     * List the organizations that the user has privileges on
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
     */
	public function getOrganizations(
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizations200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move licenses to another organization
     * 
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse
     */
	public function moveOrganizationLicenses(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/move', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicenses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicenses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move SM seats to another organization
     * 
     * Move SM seats to another organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
     */
	public function moveOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/moveSeats', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Release a list of claimed devices from an organization.
     * 
     * Release a list of claimed devices from an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse
     */
	public function releaseFromOrganizationInventory(
        \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/release', \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releaseFromOrganizationInventory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renew SM seats of a license
     * 
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
     */
	public function renewOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/renewSeats', \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->renewOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization
     * 
     * Update an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
     */
	public function updateOrganization(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganization200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an action batch
     * 
     * Update an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse
     */
	public function updateOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationActionBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy ACL
     * 
     * Updates an adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
     */
	public function updateOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy group
     * 
     * Updates an adaptive policy group. If updating "Infrastructure", only the SGT is allowed. Cannot update "Unknown".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
     */
	public function updateOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Adaptive Policy
     * 
     * Update an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
     */
	public function updateOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update global adaptive policy settings
     * 
     * Update global adaptive policy settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
     */
	public function updateOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an administrator
     * 
     * Update an administrator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse
     */
	public function updateOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins/{adminId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdmin200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization-wide alert config
     * 
     * Update an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
     */
	public function updateOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the priority ordering of an organization's branding policies.
     * 
     * Update the priority ordering of an organization's branding policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse
     */
	public function updateOrganizationBrandingPoliciesPriorities(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/priorities', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPriorities200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a branding policy
     * 
     * Update a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse
     */
	public function updateOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationBrandingPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a configuration template
     * 
     * Update a configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse
     */
	public function updateOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationConfigTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an early access feature opt-in for an organization
     * 
     * Update an early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function updateOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a license
     * 
     * Update a license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse
     */
	public function updateOrganizationLicense(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/{licenseId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationLicense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicense200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the login security settings for an organization
     * 
     * Update the login security settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse
     */
	public function updateOrganizationLoginSecurity(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/loginSecurity', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationLoginSecurity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object.
     * 
     * Updates a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
     */
	public function updateOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object Group.
     * 
     * Updates a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
     */
	public function updateOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the SAML SSO enabled settings for an organization.
     * 
     * Updates the SAML SSO enabled settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse
     */
	public function updateOrganizationSaml(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSaml200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSaml200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a SAML IdP in your organization
     * 
     * Update a SAML IdP in your organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse
     */
	public function updateOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSamlIdp200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdp200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a SAML role
     * 
     * Update a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse
     */
	public function updateOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSamlRole200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRole200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the SNMP settings for an organization
     * 
     * Update the SNMP settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse
     */
	public function updateOrganizationSnmp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/snmp', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}