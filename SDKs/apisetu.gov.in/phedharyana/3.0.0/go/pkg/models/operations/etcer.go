// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EtcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type EtcerRequestBodyCertificateParameters struct {
	// Unique Code
	UniqueCode string `json:"_unique_code"`
}

// EtcerRequestBodyFormatEnum - The format of the certificate in response.
type EtcerRequestBodyFormatEnum string

const (
	EtcerRequestBodyFormatEnumPdf EtcerRequestBodyFormatEnum = "pdf"
)

func (e *EtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = EtcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EtcerRequestBodyFormatEnum: %s", s)
	}
}

// EtcerRequestBody - Request format
type EtcerRequestBody struct {
	CertificateParameters *EtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Etcer504ApplicationJSONErrorEnum string

const (
	Etcer504ApplicationJSONErrorEnumGatewayTimeout Etcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Etcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Etcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer504ApplicationJSONErrorDescriptionEnum string

const (
	Etcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Etcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Etcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Etcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer504ApplicationJSON - Gateway timeout
type Etcer504ApplicationJSON struct {
	Error            *Etcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer503ApplicationJSONErrorEnum string

const (
	Etcer503ApplicationJSONErrorEnumServiceUnavailable Etcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Etcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Etcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer503ApplicationJSONErrorDescriptionEnum string

const (
	Etcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Etcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Etcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Etcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer503ApplicationJSON - Service unavailable
type Etcer503ApplicationJSON struct {
	Error            *Etcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer502ApplicationJSONErrorEnum string

const (
	Etcer502ApplicationJSONErrorEnumBadGatewy Etcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Etcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Etcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer502ApplicationJSONErrorDescriptionEnum string

const (
	Etcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Etcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Etcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Etcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer502ApplicationJSON - Bad gateway
type Etcer502ApplicationJSON struct {
	Error            *Etcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer500ApplicationJSONErrorEnum string

const (
	Etcer500ApplicationJSONErrorEnumInternalServerError Etcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Etcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Etcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer500ApplicationJSONErrorDescriptionEnum string

const (
	Etcer500ApplicationJSONErrorDescriptionEnumInternalServerError Etcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Etcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Etcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer500ApplicationJSON - Internal server error
type Etcer500ApplicationJSON struct {
	Error            *Etcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer404ApplicationJSONErrorEnum string

const (
	Etcer404ApplicationJSONErrorEnumRecordNotFound Etcer404ApplicationJSONErrorEnum = "record_not_found"
	Etcer404ApplicationJSONErrorEnumURLNotFound    Etcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Etcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Etcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer404ApplicationJSONErrorDescriptionEnum string

const (
	Etcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Etcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Etcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Etcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Etcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Etcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer404ApplicationJSON - No record found
type Etcer404ApplicationJSON struct {
	Error            *Etcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer401ApplicationJSONErrorEnum string

const (
	Etcer401ApplicationJSONErrorEnumInvalidAuthentication Etcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Etcer401ApplicationJSONErrorEnumInvalidAuthorization  Etcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Etcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Etcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer401ApplicationJSONErrorDescriptionEnum string

const (
	Etcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Etcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Etcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Etcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Etcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Etcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer401ApplicationJSON - Unauthorized access
type Etcer401ApplicationJSON struct {
	Error            *Etcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Etcer400ApplicationJSONErrorEnum string

const (
	Etcer400ApplicationJSONErrorEnumMissingParameter Etcer400ApplicationJSONErrorEnum = "missing_parameter"
	Etcer400ApplicationJSONErrorEnumInvalidParameter Etcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Etcer400ApplicationJSONErrorEnumInvalidFormat    Etcer400ApplicationJSONErrorEnum = "invalid_format"
	Etcer400ApplicationJSONErrorEnumInvalidTxnid     Etcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Etcer400ApplicationJSONErrorEnumInvalidConsentid Etcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Etcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Etcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Etcer400ApplicationJSONErrorDescriptionEnum string

const (
	Etcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Etcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Etcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Etcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Etcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Etcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Etcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Etcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Etcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Etcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Etcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Etcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Etcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Etcer400ApplicationJSON - Bad request
type Etcer400ApplicationJSON struct {
	Error            *Etcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Etcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EtcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Etcer400ApplicationJSONObject *Etcer400ApplicationJSON
	// Unauthorized access
	Etcer401ApplicationJSONObject *Etcer401ApplicationJSON
	// No record found
	Etcer404ApplicationJSONObject *Etcer404ApplicationJSON
	// Internal server error
	Etcer500ApplicationJSONObject *Etcer500ApplicationJSON
	// Bad gateway
	Etcer502ApplicationJSONObject *Etcer502ApplicationJSON
	// Service unavailable
	Etcer503ApplicationJSONObject *Etcer503ApplicationJSON
	// Gateway timeout
	Etcer504ApplicationJSONObject *Etcer504ApplicationJSON
}
