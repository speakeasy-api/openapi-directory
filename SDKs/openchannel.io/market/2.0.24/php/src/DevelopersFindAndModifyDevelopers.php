<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DevelopersFindAndModifyDevelopers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes a single developer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdResponse
     */
	public function deleteDevelopersDeveloperId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/developers/{developerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDevelopersDeveloperIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Returns a paginated list of developers
     * 
     * - Results are paginated and the default is value is 100 if no limit is provided
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDevelopersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDevelopersResponse
     */
	public function getDevelopers(
        \OpenAPI\OpenAPI\Models\Operations\GetDevelopersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDevelopersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/developers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDevelopersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDevelopersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a single developer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdResponse
     */
	public function getDevelopersDeveloperId(
        \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/developers/{developerId}', \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDevelopersDeveloperIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates the developer fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdResponse
     */
	public function patchDevelopersDeveloperId(
        \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/developers/{developerId}', \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchDevelopersDeveloperIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates the developer record or adds the developer if it doesn't exist
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdResponse
     */
	public function postDevelopersDeveloperId(
        \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/developers/{developerId}', \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDevelopersDeveloperIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}