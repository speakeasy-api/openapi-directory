/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DatafeedStatus - The status of a datafeed, that is, the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
 */
public class DatafeedStatus {
    /**
     * The country for which the status is reported, represented as a CLDR territory code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public DatafeedStatus withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The ID of the feed for which the status is reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datafeedId")
    public String datafeedId;

    public DatafeedStatus withDatafeedId(String datafeedId) {
        this.datafeedId = datafeedId;
        return this;
    }
    
    /**
     * The list of errors occurring in the feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public DatafeedStatusError[] errors;

    public DatafeedStatus withErrors(DatafeedStatusError[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * The feed label status is reported for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedLabel")
    public String feedLabel;

    public DatafeedStatus withFeedLabel(String feedLabel) {
        this.feedLabel = feedLabel;
        return this;
    }
    
    /**
     * The number of items in the feed that were processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemsTotal")
    public String itemsTotal;

    public DatafeedStatus withItemsTotal(String itemsTotal) {
        this.itemsTotal = itemsTotal;
        return this;
    }
    
    /**
     * The number of items in the feed that were valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemsValid")
    public String itemsValid;

    public DatafeedStatus withItemsValid(String itemsValid) {
        this.itemsValid = itemsValid;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "`content#datafeedStatus`"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public DatafeedStatus withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The two-letter ISO 639-1 language for which the status is reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public DatafeedStatus withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The last date at which the feed was uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUploadDate")
    public String lastUploadDate;

    public DatafeedStatus withLastUploadDate(String lastUploadDate) {
        this.lastUploadDate = lastUploadDate;
        return this;
    }
    
    /**
     * The processing status of the feed. Acceptable values are: - "`"`failure`": The feed could not be processed or all items had errors.`" - "`in progress`": The feed is being processed. - "`none`": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - "`success`": The feed was processed successfully, though some items might have had errors. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingStatus")
    public String processingStatus;

    public DatafeedStatus withProcessingStatus(String processingStatus) {
        this.processingStatus = processingStatus;
        return this;
    }
    
    /**
     * The list of errors occurring in the feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    public DatafeedStatusError[] warnings;

    public DatafeedStatus withWarnings(DatafeedStatusError[] warnings) {
        this.warnings = warnings;
        return this;
    }
    
    public DatafeedStatus(){}
}
