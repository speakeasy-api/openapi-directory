"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum(str, Enum):
    r"""The allocation method to use across clusters"""
    EQUAL_WEIGHTING = 'equalWeighting'
    INVERSE_VOLATILITY = 'inverseVolatility'
    INVERSE_VARIANCE = 'inverseVariance'

class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum(str, Enum):
    r"""The hierarchical clustering method to use"""
    SINGLE_LINKAGE = 'singleLinkage'
    AVERAGE_LINKAGE = 'averageLinkage'
    COMPLETE_LINKAGE = 'completeLinkage'
    WARD_LINKAGE = 'wardLinkage'

class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum(str, Enum):
    r"""The order to impose on the hierarchical clustering tree leaves"""
    R_HCLUST = 'r-hclust'
    OPTIMAL = 'optimal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints:
    
    maximum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage"""  
    maximum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure"""  
    minimum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage"""  
    minimum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure"""  
    
class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum(str, Enum):
    r"""The allocation method to use within clusters"""
    EQUAL_WEIGHTING = 'equalWeighting'
    INVERSE_VOLATILITY = 'inverseVolatility'
    INVERSE_VARIANCE = 'inverseVariance'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody:
    
    assets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""The number of assets"""  
    assets_covariance_matrix: list[list[float]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsCovarianceMatrix') }})
    r"""assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j"""  
    across_cluster_allocation_method: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acrossClusterAllocationMethod'), 'exclude': lambda f: f is None }})
    r"""The allocation method to use across clusters"""  
    clustering_method: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusteringMethod'), 'exclude': lambda f: f is None }})
    r"""The hierarchical clustering method to use"""  
    clustering_ordering: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusteringOrdering'), 'exclude': lambda f: f is None }})
    r"""The order to impose on the hierarchical clustering tree leaves"""  
    clusters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusters'), 'exclude': lambda f: f is None }})
    r"""The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference"""  
    constraints: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})  
    within_cluster_allocation_method: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withinClusterAllocationMethod'), 'exclude': lambda f: f is None }})
    r"""The allocation method to use within clusters"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON:
    r"""OK"""
    
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_optimization_hierarchical_risk_parity_clustering_based_200_application_json_object: Optional[PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    