"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import writeresult as shared_writeresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WriteResponse:
    r"""The response for Firestore.Write."""
    
    commit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitTime'), 'exclude': lambda f: f is None }})
    r"""The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write."""  
    stream_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamId'), 'exclude': lambda f: f is None }})
    r"""The ID of the stream. Only set on the first message, when a new stream was created."""  
    stream_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamToken'), 'exclude': lambda f: f is None }})
    r"""A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set."""  
    write_results: Optional[list[shared_writeresult.WriteResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('writeResults'), 'exclude': lambda f: f is None }})
    r"""The result of applying the writes. This i-th write result corresponds to the i-th write in the request."""  
    