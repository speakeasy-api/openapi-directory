/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Mutation } from "./mutation";
import { TransactionOptions } from "./transactionoptions";
import { Expose, Type } from "class-transformer";

/**
 * The type of commit to perform. Defaults to `TRANSACTIONAL`.
 */
export enum CommitRequestModeEnum {
  ModeUnspecified = "MODE_UNSPECIFIED",
  Transactional = "TRANSACTIONAL",
  NonTransactional = "NON_TRANSACTIONAL",
}

/**
 * The request for Datastore.Commit.
 */
export class CommitRequest extends SpeakeasyBase {
  /**
   * The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "databaseId" })
  databaseId?: string;

  /**
   * The type of commit to perform. Defaults to `TRANSACTIONAL`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: CommitRequestModeEnum;

  /**
   * The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
   */
  @SpeakeasyMetadata({ elemType: Mutation })
  @Expose({ name: "mutations" })
  @Type(() => Mutation)
  mutations?: Mutation[];

  /**
   * Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "singleUseTransaction" })
  @Type(() => TransactionOptions)
  singleUseTransaction?: TransactionOptions;

  /**
   * The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction" })
  transaction?: string;
}
