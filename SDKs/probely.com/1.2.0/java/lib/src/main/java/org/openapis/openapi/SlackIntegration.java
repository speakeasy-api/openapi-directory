/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Receive slack notifications on Probely events.
 * 
 */
public class SlackIntegration {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public SlackIntegration(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Retrieve slack integration data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlackResponse getTargetsTargetIdIntegrationsSlack(org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlackRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlackPathParams.class, baseUrl, "/targets/{target_id}/integrations/slack/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlackResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlackResponse() {{
            slack = null;
            getTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = null;
            getTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Slack out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Slack.class);
                res.slack = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlack401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlack401ApplicationJSON.class);
                res.getTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlack403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsSlack403ApplicationJSON.class);
                res.getTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update slack integration data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlackResponse patchTargetsTargetIdIntegrationsSlack(org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlackRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlackPathParams.class, baseUrl, "/targets/{target_id}/integrations/slack/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlackResponse res = new org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlackResponse() {{
            slack = null;
            patchTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = null;
            patchTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = null;
            patchTargetsTargetIdIntegrationsSlack404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Slack out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Slack.class);
                res.slack = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack401ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack403ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsSlack404ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsSlack404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update slack integration data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlackResponse putTargetsTargetIdIntegrationsSlack(org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlackRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlackPathParams.class, baseUrl, "/targets/{target_id}/integrations/slack/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlackResponse res = new org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlackResponse() {{
            slack = null;
            putTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = null;
            putTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = null;
            putTargetsTargetIdIntegrationsSlack404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Slack out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Slack.class);
                res.slack = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack401ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsSlack401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack403ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsSlack403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsSlack404ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsSlack404ApplicationJSONObject = out;
            }
        }

        return res;
    }
}