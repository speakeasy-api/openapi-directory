"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from typing import Optional


@dataclasses.dataclass
class PANVerificationRecordSchemaCertificateDataPANVerificationRecord:
    
    num: str = dataclasses.field()  
    verified_on: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaCertificateData:
    
    pan_verification_record: Optional[PANVerificationRecordSchemaCertificateDataPANVerificationRecord] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedByOrganizationAddress:
    
    country: str = dataclasses.field()  
    district: str = dataclasses.field()  
    house: str = dataclasses.field()  
    landmark: str = dataclasses.field()  
    line1: str = dataclasses.field()  
    line2: str = dataclasses.field()  
    locality: str = dataclasses.field()  
    pin: str = dataclasses.field()  
    state: str = dataclasses.field()  
    type: str = dataclasses.field()  
    vtc: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedByOrganization:
    
    address: PANVerificationRecordSchemaIssuedByOrganizationAddress = dataclasses.field()  
    code: str = dataclasses.field()  
    name: str = dataclasses.field()  
    tin: str = dataclasses.field()  
    type: str = dataclasses.field()  
    uid: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedBy:
    
    organization: PANVerificationRecordSchemaIssuedByOrganization = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedToPersonAddress:
    
    country: str = dataclasses.field()  
    district: str = dataclasses.field()  
    house: str = dataclasses.field()  
    landmark: str = dataclasses.field()  
    line1: str = dataclasses.field()  
    line2: str = dataclasses.field()  
    locality: str = dataclasses.field()  
    pin: str = dataclasses.field()  
    state: str = dataclasses.field()  
    type: str = dataclasses.field()  
    vtc: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedToPersonPhoto:
    
    format: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedToPerson:
    
    address: PANVerificationRecordSchemaIssuedToPersonAddress = dataclasses.field()  
    dob: str = dataclasses.field()  
    email: str = dataclasses.field()  
    gender: str = dataclasses.field()  
    marital_status: str = dataclasses.field()  
    name: str = dataclasses.field()  
    phone: str = dataclasses.field()  
    photo: PANVerificationRecordSchemaIssuedToPersonPhoto = dataclasses.field()  
    religion: str = dataclasses.field()  
    swd: str = dataclasses.field()  
    swd_indicator: str = dataclasses.field()  
    title: str = dataclasses.field()  
    uid: str = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchemaIssuedTo:
    
    person: PANVerificationRecordSchemaIssuedToPerson = dataclasses.field()  
    

@dataclasses.dataclass
class PANVerificationRecordSchema:
    r"""The certificate data in response body in PDF, XML or JSON format as requested in format parameter."""
    
    certificate_data: PANVerificationRecordSchemaCertificateData = dataclasses.field()  
    issued_at: str = dataclasses.field()  
    issue_date: str = dataclasses.field()  
    issued_by: PANVerificationRecordSchemaIssuedBy = dataclasses.field()  
    issued_to: PANVerificationRecordSchemaIssuedTo = dataclasses.field()  
    language: str = dataclasses.field()  
    name: str = dataclasses.field()  
    number: str = dataclasses.field()  
    status: str = dataclasses.field()  
    type: str = dataclasses.field()  
    valid_from_date: str = dataclasses.field()  
    