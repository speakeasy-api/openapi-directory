/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ScopeLifecycleState } from "./scopelifecyclestate";
import { Expose, Type } from "class-transformer";

/**
 * Scope represents a Scope in a Fleet.
 */
export class Scope extends SpeakeasyBase {
  /**
   * Output only. When the scope was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. When the scope was deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteTime" })
  deleteTime?: string;

  /**
   * The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * ScopeLifecycleState describes the state of a Scope resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => ScopeLifecycleState)
  state?: ScopeLifecycleState;

  /**
   * Output only. Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;

  /**
   * Output only. When the scope was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * Scope represents a Scope in a Fleet.
 */
export class ScopeInput extends SpeakeasyBase {
  /**
   * The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
