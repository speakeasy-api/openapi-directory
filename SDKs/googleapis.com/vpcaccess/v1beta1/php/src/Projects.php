<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Serverless VPC Access connector, returns an operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateResponse
     */
	public function vpcaccessProjectsLocationsConnectorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/connectors', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the resource does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteResponse
     */
	public function vpcaccessProjectsLocationsConnectorsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Serverless VPC Access connectors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListResponse
     */
	public function vpcaccessProjectsLocationsConnectorsList(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/connectors', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Serverless VPC Access connector, returns an operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchResponse
     */
	public function vpcaccessProjectsLocationsConnectorsPatch(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsConnectorsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListResponse
     */
	public function vpcaccessProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetResponse
     */
	public function vpcaccessProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListResponse
     */
	public function vpcaccessProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VpcaccessProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}