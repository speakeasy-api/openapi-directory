"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class V1:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def firebasedynamiclinks_get_link_stats(self, request: operations.FirebasedynamiclinksGetLinkStatsRequest, security: operations.FirebasedynamiclinksGetLinkStatsSecurity) -> operations.FirebasedynamiclinksGetLinkStatsResponse:
        r"""Fetches analytics stats of a short Dynamic Link for a given duration. Metrics include number of clicks, redirects, installs, app first opens, and app reopens."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasedynamiclinksGetLinkStatsRequest, base_url, '/v1/{dynamicLink}/linkStats', request)
        
        query_params = utils.get_query_params(operations.FirebasedynamiclinksGetLinkStatsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasedynamiclinksGetLinkStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DynamicLinkStats])
                res.dynamic_link_stats = out

        return res

    def firebasedynamiclinks_install_attribution(self, request: operations.FirebasedynamiclinksInstallAttributionRequest, security: operations.FirebasedynamiclinksInstallAttributionSecurity) -> operations.FirebasedynamiclinksInstallAttributionResponse:
        r"""Get iOS strong/weak-match info for post-install attribution."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/installAttribution'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_ios_post_install_attribution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasedynamiclinksInstallAttributionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasedynamiclinksInstallAttributionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetIosPostInstallAttributionResponse])
                res.get_ios_post_install_attribution_response = out

        return res

    def firebasedynamiclinks_reopen_attribution(self, request: operations.FirebasedynamiclinksReopenAttributionRequest, security: operations.FirebasedynamiclinksReopenAttributionSecurity) -> operations.FirebasedynamiclinksReopenAttributionResponse:
        r"""Get iOS reopen attribution for app universal link open deeplinking."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/reopenAttribution'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_ios_reopen_attribution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasedynamiclinksReopenAttributionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasedynamiclinksReopenAttributionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetIosReopenAttributionResponse])
                res.get_ios_reopen_attribution_response = out

        return res

    