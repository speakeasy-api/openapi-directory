<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scheduled 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdResponse
     */
	public function deleteTargetsTargetIdScheduledscansId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/{id}/', \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteTargetsTargetIdScheduledscansId401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansId401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteTargetsTargetIdScheduledscansId403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteTargetsTargetIdScheduledscansId403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List scheduled scans for all targets expanding recurrence
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedResponse
     */
	public function getTargetsAllScheduledscansExpanded(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/scheduledscans/expanded/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpandedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllScheduledscansExpanded200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpanded200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllScheduledscansExpanded404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScheduledscansExpanded404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List scheduled scans
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansResponse
     */
	public function getTargetsTargetIdScheduledscans(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscans200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscans200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscans401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscans401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscans404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscans404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List scheduled scans expanding recurrence
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedResponse
     */
	public function getTargetsTargetIdScheduledscansExpanded(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/expanded/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpandedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscansExpanded200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpanded200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscansExpanded404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansExpanded404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a scheduled scan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdResponse
     */
	public function getTargetsTargetIdScheduledscansId(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/{id}/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduled = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scheduled', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscansId401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansId401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScheduledscansId404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScheduledscansId404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partial update
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdResponse
     */
	public function patchTargetsTargetIdScheduledscansId(
        \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/{id}/', \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduled = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scheduled', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdScheduledscansId400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansId400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdScheduledscansId401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansId401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdScheduledscansId403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansId403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdScheduledscansId404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdScheduledscansId404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new scheduled scan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansResponse
     */
	public function postTargetsTargetIdScheduledscans(
        \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/', \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduled = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scheduled', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScheduledscans400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscans400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScheduledscans401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscans401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScheduledscans403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscans403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScheduledscans404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScheduledscans404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a scheduled scan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdResponse
     */
	public function putTargetsTargetIdScheduledscansId(
        \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scheduledscans/{id}/', \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduled = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scheduled', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdScheduledscansId400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansId400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdScheduledscansId401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansId401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdScheduledscansId403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansId403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdScheduledscansId404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdScheduledscansId404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}