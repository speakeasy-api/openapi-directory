/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { JobDriver } from "./jobdriver";
import { ParametricConfigurationOverrides } from "./parametricconfigurationoverrides";
import { TemplateParameterConfiguration } from "./templateparameterconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The values of StartJobRun API requests used in job runs started using the job template.
 */
export class JobTemplateData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "configurationOverrides" })
  @Type(() => ParametricConfigurationOverrides)
  configurationOverrides?: ParametricConfigurationOverrides;

  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn: string;

  /**
   * Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobDriver" })
  @Type(() => JobDriver)
  jobDriver: JobDriver;

  @SpeakeasyMetadata()
  @Expose({ name: "jobTags" })
  jobTags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: TemplateParameterConfiguration })
  @Expose({ name: "parameterConfiguration" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TemplateParameterConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TemplateParameterConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameterConfiguration?: Record<string, TemplateParameterConfiguration>;

  @SpeakeasyMetadata()
  @Expose({ name: "releaseLabel" })
  releaseLabel: string;
}
