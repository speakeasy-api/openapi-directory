"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import prediction as shared_prediction
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GroundhogActiveEnum(str, Enum):
    ZERO = '0'
    ONE = '1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Groundhog:
    r"""An animal that makes an annual prediction on Groundhog Day."""
    
    active: GroundhogActiveEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})  
    contact: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact') }})  
    coordinates: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates') }})  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    current_prediction: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPrediction') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    is_groundhog: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGroundhog') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region') }})  
    shortname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortname') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    predictions: Optional[list[shared_prediction.Prediction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predictions'), 'exclude': lambda f: f is None }})  
    predictions_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predictionsCount'), 'exclude': lambda f: f is None }})
    r"""All predictions, excluding nulls."""  
    