/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PersonalNameParsedOut - A origined name.
 */
public class PersonalNameParsedOut {
    /**
     * First / last name structure corresponding to the most likely parsing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstLastName")
    public FirstLastNameOut firstLastName;
    public PersonalNameParsedOut withFirstLastName(FirstLastNameOut firstLastName) {
        this.firstLastName = firstLastName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public PersonalNameParsedOut withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The input name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PersonalNameParsedOut withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nameParserType")
    public PersonalNameParsedOutNameParserTypeEnum nameParserType;
    public PersonalNameParsedOut withNameParserType(PersonalNameParsedOutNameParserTypeEnum nameParserType) {
        this.nameParserType = nameParserType;
        return this;
    }
    
    /**
     * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nameParserTypeAlt")
    public PersonalNameParsedOutNameParserTypeAltEnum nameParserTypeAlt;
    public PersonalNameParsedOut withNameParserTypeAlt(PersonalNameParsedOutNameParserTypeAltEnum nameParserTypeAlt) {
        this.nameParserTypeAlt = nameParserTypeAlt;
        return this;
    }
    
    /**
     * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public Double score;
    public PersonalNameParsedOut withScore(Double score) {
        this.score = score;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("script")
    public String script;
    public PersonalNameParsedOut withScript(String script) {
        this.script = script;
        return this;
    }
    
}
