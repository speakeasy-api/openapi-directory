/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InviteUserRequest - Details of User to invite
 */
public class InviteUserRequest {
    /**
     * the email address of the invited user
     */
    @JsonProperty("email")
    public String email;

    public InviteUserRequest withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The payorId or payeeId or null if the user is a backoffice admin
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityId")
    public String entityId;

    public InviteUserRequest withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    public String firstName;

    public InviteUserRequest withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    public String lastName;

    public InviteUserRequest withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * &lt;p&gt;The MFA type that the user will use&lt;/p&gt;
     * &lt;p&gt;The type may be conditional on the role(s) the user has&lt;/p&gt;
     * 
     */
    @JsonProperty("mfaType")
    public InviteUserRequestMfaTypeEnum mfaType;

    public InviteUserRequest withMfaType(InviteUserRequestMfaTypeEnum mfaType) {
        this.mfaType = mfaType;
        return this;
    }
    
    /**
     * The main contact number for the user
     * 
     */
    @JsonProperty("primaryContactNumber")
    public String primaryContactNumber;

    public InviteUserRequest withPrimaryContactNumber(String primaryContactNumber) {
        this.primaryContactNumber = primaryContactNumber;
        return this;
    }
    
    /**
     * The role(s) for the user
     * The role must exist
     * The role can be a custom role or a system role but the invoker must have the permissions to assign the role
     * System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support
     * 
     */
    @JsonProperty("roles")
    public String[] roles;

    public InviteUserRequest withRoles(String[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * The secondary contact number for the user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryContactNumber")
    public String secondaryContactNumber;

    public InviteUserRequest withSecondaryContactNumber(String secondaryContactNumber) {
        this.secondaryContactNumber = secondaryContactNumber;
        return this;
    }
    
    /**
     * The phone number of a device that the user can receive sms messages on
     * 
     */
    @JsonProperty("smsNumber")
    public String smsNumber;

    public InviteUserRequest withSmsNumber(String smsNumber) {
        this.smsNumber = smsNumber;
        return this;
    }
    
    /**
     * Will default to PAYOR if not provided but entityId is provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userType")
    public InviteUserRequestUserTypeEnum userType;

    public InviteUserRequest withUserType(InviteUserRequestUserTypeEnum userType) {
        this.userType = userType;
        return this;
    }
    
    /**
     * Optional property that MUST be suppied when manually verifying a user
     * The user's smsNumber is registered via a separate endpoint and an OTP sent to them
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verificationCode")
    public String verificationCode;

    public InviteUserRequest withVerificationCode(String verificationCode) {
        this.verificationCode = verificationCode;
        return this;
    }
    
    public InviteUserRequest(@JsonProperty("email") String email, @JsonProperty("mfaType") InviteUserRequestMfaTypeEnum mfaType, @JsonProperty("primaryContactNumber") String primaryContactNumber, @JsonProperty("roles") String[] roles, @JsonProperty("smsNumber") String smsNumber) {
        this.email = email;
        this.mfaType = mfaType;
        this.primaryContactNumber = primaryContactNumber;
        this.roles = roles;
        this.smsNumber = smsNumber;
  }
}
