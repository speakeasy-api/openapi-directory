"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import intakevlanattachment as shared_intakevlanattachment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NetworkConfigBandwidthEnum(str, Enum):
    r"""Interconnect bandwidth. Set only when type is CLIENT."""
    BANDWIDTH_UNSPECIFIED = 'BANDWIDTH_UNSPECIFIED'
    BW_1_GBPS = 'BW_1_GBPS'
    BW_2_GBPS = 'BW_2_GBPS'
    BW_5_GBPS = 'BW_5_GBPS'
    BW_10_GBPS = 'BW_10_GBPS'

class NetworkConfigServiceCidrEnum(str, Enum):
    r"""Service CIDR, if any."""
    SERVICE_CIDR_UNSPECIFIED = 'SERVICE_CIDR_UNSPECIFIED'
    DISABLED = 'DISABLED'
    HIGH_26 = 'HIGH_26'
    HIGH_27 = 'HIGH_27'
    HIGH_28 = 'HIGH_28'

class NetworkConfigTypeEnum(str, Enum):
    r"""The type of this network, either Client or Private."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CLIENT = 'CLIENT'
    PRIVATE = 'PRIVATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkConfigInput:
    r"""Configuration parameters for a new network."""
    
    bandwidth: Optional[NetworkConfigBandwidthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidth'), 'exclude': lambda f: f is None }})
    r"""Interconnect bandwidth. Set only when type is CLIENT."""  
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""CIDR range of the network."""  
    gcp_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcpService'), 'exclude': lambda f: f is None }})
    r"""The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A transient unique identifier to identify a volume within an ProvisioningConfig request."""  
    jumbo_frames_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jumboFramesEnabled'), 'exclude': lambda f: f is None }})
    r"""The JumboFramesEnabled option for customer to set."""  
    service_cidr: Optional[NetworkConfigServiceCidrEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceCidr'), 'exclude': lambda f: f is None }})
    r"""Service CIDR, if any."""  
    type: Optional[NetworkConfigTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this network, either Client or Private."""  
    user_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userNote'), 'exclude': lambda f: f is None }})
    r"""User note field, it can be used by customers to add additional information for the BMS Ops team ."""  
    vlan_attachments: Optional[list[shared_intakevlanattachment.IntakeVlanAttachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanAttachments'), 'exclude': lambda f: f is None }})
    r"""List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan)."""  
    vlan_same_project: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanSameProject'), 'exclude': lambda f: f is None }})
    r"""Whether the VLAN attachment pair is located in the same project."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkConfig:
    r"""Configuration parameters for a new network."""
    
    bandwidth: Optional[NetworkConfigBandwidthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidth'), 'exclude': lambda f: f is None }})
    r"""Interconnect bandwidth. Set only when type is CLIENT."""  
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""CIDR range of the network."""  
    gcp_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcpService'), 'exclude': lambda f: f is None }})
    r"""The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A transient unique identifier to identify a volume within an ProvisioningConfig request."""  
    jumbo_frames_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jumboFramesEnabled'), 'exclude': lambda f: f is None }})
    r"""The JumboFramesEnabled option for customer to set."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the network config."""  
    service_cidr: Optional[NetworkConfigServiceCidrEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceCidr'), 'exclude': lambda f: f is None }})
    r"""Service CIDR, if any."""  
    type: Optional[NetworkConfigTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this network, either Client or Private."""  
    user_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userNote'), 'exclude': lambda f: f is None }})
    r"""User note field, it can be used by customers to add additional information for the BMS Ops team ."""  
    vlan_attachments: Optional[list[shared_intakevlanattachment.IntakeVlanAttachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanAttachments'), 'exclude': lambda f: f is None }})
    r"""List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan)."""  
    vlan_same_project: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanSameProject'), 'exclude': lambda f: f is None }})
    r"""Whether the VLAN attachment pair is located in the same project."""  
    