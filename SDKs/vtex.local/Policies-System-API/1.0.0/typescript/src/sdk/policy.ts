/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Policy {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Policy
   *
   * @remarks
   * Creates a new policy from scratch.
   */
  policyCreateOrUpdate(
    req: operations.PolicyCreateOrUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PolicyCreateOrUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PolicyCreateOrUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/policy-engine/policies/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "policySaveRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PolicyCreateOrUpdateResponse =
        new operations.PolicyCreateOrUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Policy by ID
   *
   * @remarks
   * Deletes a specific policy of the account by its ID.
   */
  policyDelete(
    req: operations.PolicyDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PolicyDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PolicyDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/policy-engine/policies/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PolicyDeleteResponse =
        new operations.PolicyDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Evaluate Policies
   *
   * @remarks
   * This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions.
   */
  policyEvaluate(
    req: operations.PolicyEvaluateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PolicyEvaluateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PolicyEvaluateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/policy-engine/evaluate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "evaluatePolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PolicyEvaluateResponse =
        new operations.PolicyEvaluateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policyActionGetResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.policyActionGetResponses = utils.objectToClass(
              httpRes?.data,
              shared.PolicyActionGetResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Policy by ID
   *
   * @remarks
   * Retrieves general information of a policy by its ID.
   */
  policyGet(
    req: operations.PolicyGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PolicyGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PolicyGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/policy-engine/policies/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PolicyGetResponse =
        new operations.PolicyGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policyGetResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.policyGetResponses = utils.objectToClass(
              httpRes?.data,
              shared.PolicyGetResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Policy List
   *
   * @remarks
   * Retrieves a list of all policies in the account and general information of each policy.
   */
  policyList(
    req: operations.PolicyListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PolicyListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PolicyListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/policy-engine/policies";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PolicyListResponse =
        new operations.PolicyListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policyGetResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.policyGetResponses = utils.objectToClass(
              httpRes?.data,
              shared.PolicyGetResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Policy
   *
   * @remarks
   * Updates an existing policy at your account.
   */
  putApiPolicyEnginePoliciesId(
    req: operations.PutApiPolicyEnginePoliciesIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutApiPolicyEnginePoliciesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutApiPolicyEnginePoliciesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/policy-engine/policies/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "policySaveRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutApiPolicyEnginePoliciesIdResponse =
        new operations.PutApiPolicyEnginePoliciesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
