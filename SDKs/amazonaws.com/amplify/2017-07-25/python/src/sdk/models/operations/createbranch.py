"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createbranchresult as shared_createbranchresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateBranchRequestBodyStageEnum(str, Enum):
    r"""Describes the current stage for the branch."""
    PRODUCTION = 'PRODUCTION'
    BETA = 'BETA'
    DEVELOPMENT = 'DEVELOPMENT'
    EXPERIMENTAL = 'EXPERIMENTAL'
    PULL_REQUEST = 'PULL_REQUEST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBranchRequestBody:
    
    branch_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchName') }})
    r"""The name for the branch."""  
    backend_environment_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendEnvironmentArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app."""  
    basic_auth_credentials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthCredentials'), 'exclude': lambda f: f is None }})
    r"""The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."""  
    build_spec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildSpec'), 'exclude': lambda f: f is None }})
    r"""The build specification (build spec) file for an Amplify app build."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description for the branch."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name for a branch. This is used as the default domain prefix."""  
    enable_auto_build: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAutoBuild'), 'exclude': lambda f: f is None }})
    r"""Enables auto building for the branch."""  
    enable_basic_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBasicAuth'), 'exclude': lambda f: f is None }})
    r"""Enables basic authorization for the branch."""  
    enable_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableNotification'), 'exclude': lambda f: f is None }})
    r"""Enables notifications for the branch."""  
    enable_performance_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePerformanceMode'), 'exclude': lambda f: f is None }})
    r"""<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"""  
    enable_pull_request_preview: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePullRequestPreview'), 'exclude': lambda f: f is None }})
    r"""Enables pull request previews for this branch."""  
    environment_variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables'), 'exclude': lambda f: f is None }})
    r"""The environment variables for the branch."""  
    framework: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('framework'), 'exclude': lambda f: f is None }})
    r"""The framework for the branch."""  
    pull_request_environment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pullRequestEnvironmentName'), 'exclude': lambda f: f is None }})
    r"""The Amplify environment name for the pull request."""  
    stage: Optional[CreateBranchRequestBodyStageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stage'), 'exclude': lambda f: f is None }})
    r"""Describes the current stage for the branch."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tag for the branch."""  
    ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""The content Time to Live (TTL) for the website in seconds."""  
    

@dataclasses.dataclass
class CreateBranchRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The unique ID for an Amplify app."""  
    request_body: CreateBranchRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateBranchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_branch_result: Optional[shared_createbranchresult.CreateBranchResult] = dataclasses.field(default=None)
    r"""Success"""  
    dependent_service_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DependentServiceFailureException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    