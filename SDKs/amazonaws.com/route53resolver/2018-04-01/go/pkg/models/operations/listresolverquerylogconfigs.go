// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListResolverQueryLogConfigsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListResolverQueryLogConfigsXAmzTargetEnum
type ListResolverQueryLogConfigsXAmzTargetEnum string

const (
	ListResolverQueryLogConfigsXAmzTargetEnumRoute53ResolverListResolverQueryLogConfigs ListResolverQueryLogConfigsXAmzTargetEnum = "Route53Resolver.ListResolverQueryLogConfigs"
)

func (e *ListResolverQueryLogConfigsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Resolver.ListResolverQueryLogConfigs":
		*e = ListResolverQueryLogConfigsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListResolverQueryLogConfigsXAmzTargetEnum: %s", s)
	}
}

type ListResolverQueryLogConfigsHeaders struct {
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListResolverQueryLogConfigsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListResolverQueryLogConfigsRequest struct {
	QueryParams ListResolverQueryLogConfigsQueryParams
	Headers     ListResolverQueryLogConfigsHeaders
	Request     shared.ListResolverQueryLogConfigsRequest `request:"mediaType=application/json"`
}

type ListResolverQueryLogConfigsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListResolverQueryLogConfigsResponse *shared.ListResolverQueryLogConfigsResponse
	StatusCode                          int
	RawResponse                         *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
