// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetricsNameEnum string

const (
	MetricsNameEnumIncomingBytes                      MetricsNameEnum = "IncomingBytes"
	MetricsNameEnumIncomingRecords                    MetricsNameEnum = "IncomingRecords"
	MetricsNameEnumOutgoingBytes                      MetricsNameEnum = "OutgoingBytes"
	MetricsNameEnumOutgoingRecords                    MetricsNameEnum = "OutgoingRecords"
	MetricsNameEnumWriteProvisionedThroughputExceeded MetricsNameEnum = "WriteProvisionedThroughputExceeded"
	MetricsNameEnumReadProvisionedThroughputExceeded  MetricsNameEnum = "ReadProvisionedThroughputExceeded"
	MetricsNameEnumIteratorAgeMilliseconds            MetricsNameEnum = "IteratorAgeMilliseconds"
	MetricsNameEnumAll                                MetricsNameEnum = "ALL"
)

func (e MetricsNameEnum) ToPointer() *MetricsNameEnum {
	return &e
}

func (e *MetricsNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IncomingBytes":
		fallthrough
	case "IncomingRecords":
		fallthrough
	case "OutgoingBytes":
		fallthrough
	case "OutgoingRecords":
		fallthrough
	case "WriteProvisionedThroughputExceeded":
		fallthrough
	case "ReadProvisionedThroughputExceeded":
		fallthrough
	case "IteratorAgeMilliseconds":
		fallthrough
	case "ALL":
		*e = MetricsNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricsNameEnum: %v", v)
	}
}
