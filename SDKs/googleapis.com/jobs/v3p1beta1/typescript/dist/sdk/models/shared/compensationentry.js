"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompensationEntry = exports.CompensationEntryUnitEnum = exports.CompensationEntryTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var compensationrange_1 = require("./compensationrange");
var money_1 = require("./money");
var class_transformer_1 = require("class-transformer");
/**
 * Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
 */
var CompensationEntryTypeEnum;
(function (CompensationEntryTypeEnum) {
    CompensationEntryTypeEnum["CompensationTypeUnspecified"] = "COMPENSATION_TYPE_UNSPECIFIED";
    CompensationEntryTypeEnum["Base"] = "BASE";
    CompensationEntryTypeEnum["Bonus"] = "BONUS";
    CompensationEntryTypeEnum["SigningBonus"] = "SIGNING_BONUS";
    CompensationEntryTypeEnum["Equity"] = "EQUITY";
    CompensationEntryTypeEnum["ProfitSharing"] = "PROFIT_SHARING";
    CompensationEntryTypeEnum["Commissions"] = "COMMISSIONS";
    CompensationEntryTypeEnum["Tips"] = "TIPS";
    CompensationEntryTypeEnum["OtherCompensationType"] = "OTHER_COMPENSATION_TYPE";
})(CompensationEntryTypeEnum = exports.CompensationEntryTypeEnum || (exports.CompensationEntryTypeEnum = {}));
/**
 * Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
 */
var CompensationEntryUnitEnum;
(function (CompensationEntryUnitEnum) {
    CompensationEntryUnitEnum["CompensationUnitUnspecified"] = "COMPENSATION_UNIT_UNSPECIFIED";
    CompensationEntryUnitEnum["Hourly"] = "HOURLY";
    CompensationEntryUnitEnum["Daily"] = "DAILY";
    CompensationEntryUnitEnum["Weekly"] = "WEEKLY";
    CompensationEntryUnitEnum["Monthly"] = "MONTHLY";
    CompensationEntryUnitEnum["Yearly"] = "YEARLY";
    CompensationEntryUnitEnum["OneTime"] = "ONE_TIME";
    CompensationEntryUnitEnum["OtherCompensationUnit"] = "OTHER_COMPENSATION_UNIT";
})(CompensationEntryUnitEnum = exports.CompensationEntryUnitEnum || (exports.CompensationEntryUnitEnum = {}));
/**
 * A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
 */
var CompensationEntry = /** @class */ (function (_super) {
    __extends(CompensationEntry, _super);
    function CompensationEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        (0, class_transformer_1.Type)(function () { return money_1.Money; }),
        __metadata("design:type", money_1.Money)
    ], CompensationEntry.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], CompensationEntry.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "expectedUnitsPerYear" }),
        __metadata("design:type", Number)
    ], CompensationEntry.prototype, "expectedUnitsPerYear", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "range" }),
        (0, class_transformer_1.Type)(function () { return compensationrange_1.CompensationRange; }),
        __metadata("design:type", compensationrange_1.CompensationRange)
    ], CompensationEntry.prototype, "range", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], CompensationEntry.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unit" }),
        __metadata("design:type", String)
    ], CompensationEntry.prototype, "unit", void 0);
    return CompensationEntry;
}(utils_1.SpeakeasyBase));
exports.CompensationEntry = CompensationEntry;
