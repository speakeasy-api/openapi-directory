<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderFulfillment - Contains details about how to fulfill this order.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderFulfillment
{
    /**
     * Application-defined data attached to this fulfillment. Metadata fields are intended
     * 
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * Contains details necessary to fulfill a pickup order.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderFulfillmentPickupDetails $pickupDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('pickup_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderFulfillmentPickupDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderFulfillmentPickupDetails $pickupDetails = null;
    
    /**
     * Contains the details necessary to fulfill a shipment order.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderFulfillmentShipmentDetails $shipmentDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('shipment_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderFulfillmentShipmentDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderFulfillmentShipmentDetails $shipmentDetails = null;
    
    /**
     * The state of the fulfillment.
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
    /**
     * The type of the fulfillment.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * A unique ID that identifies the fulfillment only within this order.
     * 
     * @var ?string $uid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uid = null;
    
	public function __construct()
	{
		$this->metadata = null;
		$this->pickupDetails = null;
		$this->shipmentDetails = null;
		$this->state = null;
		$this->type = null;
		$this->uid = null;
	}
}
