"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Cards:
    r"""Definitions and configuration for the CRM cards your app can display."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_crm_v3_extensions_cards_app_id_card_id_archive(self, request: operations.DeleteCrmV3ExtensionsCardsAppIDCardIDArchiveRequest, security: operations.DeleteCrmV3ExtensionsCardsAppIDCardIDArchiveSecurity) -> operations.DeleteCrmV3ExtensionsCardsAppIDCardIDArchiveResponse:
        r"""Delete a card
        Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCrmV3ExtensionsCardsAppIDCardIDArchiveRequest, base_url, '/crm/v3/extensions/cards/{appId}/{cardId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCrmV3ExtensionsCardsAppIDCardIDArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_crm_v3_extensions_cards_app_id_card_id_get_by_id(self, request: operations.GetCrmV3ExtensionsCardsAppIDCardIDGetByIDRequest, security: operations.GetCrmV3ExtensionsCardsAppIDCardIDGetByIDSecurity) -> operations.GetCrmV3ExtensionsCardsAppIDCardIDGetByIDResponse:
        r"""Get a card.
        Returns the definition for a card with the given ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCrmV3ExtensionsCardsAppIDCardIDGetByIDRequest, base_url, '/crm/v3/extensions/cards/{appId}/{cardId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCrmV3ExtensionsCardsAppIDCardIDGetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CardResponse])
                res.card_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_crm_v3_extensions_cards_app_id_get_all(self, request: operations.GetCrmV3ExtensionsCardsAppIDGetAllRequest, security: operations.GetCrmV3ExtensionsCardsAppIDGetAllSecurity) -> operations.GetCrmV3ExtensionsCardsAppIDGetAllResponse:
        r"""Get all cards
        Returns a list of cards for a given app.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCrmV3ExtensionsCardsAppIDGetAllRequest, base_url, '/crm/v3/extensions/cards/{appId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCrmV3ExtensionsCardsAppIDGetAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CardListResponse])
                res.card_list_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_crm_v3_extensions_cards_app_id_card_id_update(self, request: operations.PatchCrmV3ExtensionsCardsAppIDCardIDUpdateRequest, security: operations.PatchCrmV3ExtensionsCardsAppIDCardIDUpdateSecurity) -> operations.PatchCrmV3ExtensionsCardsAppIDCardIDUpdateResponse:
        r"""Update a card
        Update a card definition with new details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCrmV3ExtensionsCardsAppIDCardIDUpdateRequest, base_url, '/crm/v3/extensions/cards/{appId}/{cardId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "card_patch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCrmV3ExtensionsCardsAppIDCardIDUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CardResponse])
                res.card_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_crm_v3_extensions_cards_app_id_create(self, request: operations.PostCrmV3ExtensionsCardsAppIDCreateRequest, security: operations.PostCrmV3ExtensionsCardsAppIDCreateSecurity) -> operations.PostCrmV3ExtensionsCardsAppIDCreateResponse:
        r"""Create a new card
        Defines a new card that will become active on an account when this app is installed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCrmV3ExtensionsCardsAppIDCreateRequest, base_url, '/crm/v3/extensions/cards/{appId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "card_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCrmV3ExtensionsCardsAppIDCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CardResponse])
                res.card_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    