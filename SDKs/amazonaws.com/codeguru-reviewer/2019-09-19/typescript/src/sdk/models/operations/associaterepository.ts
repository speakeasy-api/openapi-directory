/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>An object that contains:</p> <ul> <li> <p>The encryption option for a repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (<code>AWS_OWNED_CMK</code>) or customer managed (<code>CUSTOMER_MANAGED_CMK</code>).</p> </li> <li> <p>The ID of the Amazon Web Services KMS key that is associated with a repository association.</p> </li> </ul>
 */
export class AssociateRepositoryRequestBodyKMSKeyDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionOption" })
  encryptionOption?: shared.EncryptionOptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KMSKeyId" })
  kmsKeyId?: string;
}

/**
 * Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This <code>Repository</code> object is not used if your source code is in an associated GitHub repository.
 */
export class AssociateRepositoryRequestBodyRepository extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Bitbucket" })
  @Type(() => shared.ThirdPartySourceRepository)
  bitbucket?: shared.ThirdPartySourceRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "CodeCommit" })
  @Type(() => shared.CodeCommitRepository)
  codeCommit?: shared.CodeCommitRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "GitHubEnterpriseServer" })
  @Type(() => shared.ThirdPartySourceRepository)
  gitHubEnterpriseServer?: shared.ThirdPartySourceRepository;

  /**
   * Information about a repository in an S3 bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3Bucket" })
  @Type(() => shared.S3Repository)
  s3Bucket?: shared.S3Repository;
}

export class AssociateRepositoryRequestBody extends SpeakeasyBase {
  /**
   * Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientRequestToken" })
  clientRequestToken?: string;

  /**
   * <p>An object that contains:</p> <ul> <li> <p>The encryption option for a repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (<code>AWS_OWNED_CMK</code>) or customer managed (<code>CUSTOMER_MANAGED_CMK</code>).</p> </li> <li> <p>The ID of the Amazon Web Services KMS key that is associated with a repository association.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "KMSKeyDetails" })
  @Type(() => AssociateRepositoryRequestBodyKMSKeyDetails)
  kmsKeyDetails?: AssociateRepositoryRequestBodyKMSKeyDetails;

  /**
   * Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This <code>Repository</code> object is not used if your source code is in an associated GitHub repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Repository" })
  @Type(() => AssociateRepositoryRequestBodyRepository)
  repository: AssociateRepositoryRequestBodyRepository;

  /**
   * <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li> <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class AssociateRepositoryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AssociateRepositoryRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class AssociateRepositoryResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  associateRepositoryResponse?: shared.AssociateRepositoryResponse;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
