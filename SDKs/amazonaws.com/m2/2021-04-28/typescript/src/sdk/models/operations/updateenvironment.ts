/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateEnvironmentRequestBody extends SpeakeasyBase {
  /**
   * Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyDuringMaintenanceWindow" })
  applyDuringMaintenanceWindow?: boolean;

  /**
   * The desired capacity for the runtime environment to update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desiredCapacity" })
  desiredCapacity?: number;

  /**
   * The version of the runtime engine for the runtime environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "engineVersion" })
  engineVersion?: string;

  /**
   * The instance type for the runtime environment to update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceType" })
  instanceType?: string;

  /**
   * Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredMaintenanceWindow" })
  preferredMaintenanceWindow?: string;
}

export class UpdateEnvironmentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateEnvironmentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the runtime environment that you want to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=environmentId",
  })
  environmentId: string;
}

export class UpdateEnvironmentResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateEnvironmentResponse?: shared.UpdateEnvironmentResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
