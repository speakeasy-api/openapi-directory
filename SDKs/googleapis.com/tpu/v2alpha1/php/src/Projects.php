<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists accelerator types supported by this API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListResponse
     */
	public function tpuProjectsLocationsAcceleratorTypesList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/acceleratorTypes', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsAcceleratorTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAcceleratorTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAcceleratorTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates the Cloud TPU service identity for the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityResponse
     */
	public function tpuProjectsLocationsGenerateServiceIdentity(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}:generateServiceIdentity', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsGenerateServiceIdentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateServiceIdentityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateServiceIdentityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListResponse
     */
	public function tpuProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateResponse
     */
	public function tpuProjectsLocationsNodesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the guest attributes for the node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesResponse
     */
	public function tpuProjectsLocationsNodesGetGuestAttributes(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:getGuestAttributes', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getGuestAttributesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesGetGuestAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getGuestAttributesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetGuestAttributesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists nodes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListResponse
     */
	public function tpuProjectsLocationsNodesList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNodesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNodesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the configurations of a node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchResponse
     */
	public function tpuProjectsLocationsNodesPatch(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Simulates a maintenance event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventResponse
     */
	public function tpuProjectsLocationsNodesSimulateMaintenanceEvent(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:simulateMaintenanceEvent', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "simulateMaintenanceEventRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesSimulateMaintenanceEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartResponse
     */
	public function tpuProjectsLocationsNodesStart(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:start', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a node. This operation is only available with single TPU nodes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopResponse
     */
	public function tpuProjectsLocationsNodesStop(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsNodesStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelResponse
     */
	public function tpuProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListResponse
     */
	public function tpuProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a QueuedResource TPU instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateResponse
     */
	public function tpuProjectsLocationsQueuedResourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/queuedResources', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queuedResourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a QueuedResource TPU instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteResponse
     */
	public function tpuProjectsLocationsQueuedResourcesDelete(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists queued resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListResponse
     */
	public function tpuProjectsLocationsQueuedResourcesList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/queuedResources', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsQueuedResourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listQueuedResourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListQueuedResourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a runtime version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetResponse
     */
	public function tpuProjectsLocationsRuntimeVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runtimeVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuntimeVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists runtime versions supported by this API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListResponse
     */
	public function tpuProjectsLocationsRuntimeVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{parent}/runtimeVersions', \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TpuProjectsLocationsRuntimeVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRuntimeVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRuntimeVersionsResponse', 'json');
            }
        }

        return $response;
    }
}