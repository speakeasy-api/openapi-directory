<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CrossSelling 
{
	
	public const PRODUCT_SEARCH_ACCESSORIES_SERVERS = [
		'https://entelperu.{environment}.com.br/api/catalog_system/pub/products/crossselling/accessories',
	];
	
	public const PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS = [
		'https://entelperu.{environment}.com.br/api/catalog_system/pub/products/crossselling/accessories',
	];
	
	public const PRODUCT_SEARCH_SIMILARS_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const PRODUCT_SEARCH_SUGGESTIONS_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];
	
	public const PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS = [
		'http://example.com/.{environment}.com.br',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Product Search of Accessories
     * 
     * Retrieves general information about the product's accessories.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesResponse
     */
	public function productSearchAccessories(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_ACCESSORIES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/accessories/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchAccessoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Product Search of Show Together
     * 
     * Retrieves general information about the products that are show together with the product in question.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherResponse
     */
	public function productSearchShowTogether(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/showtogether/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchShowTogetherResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Product Search of Similars
     * 
     * Retrieves general information about related product searches.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsResponse
     */
	public function productSearchSimilars(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_SIMILARS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/similars/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchSimilarsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Product Search of Suggestions
     * 
     * Retrieves general information about other product suggestions related to the product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsResponse
     */
	public function productSearchSuggestions(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_SUGGESTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/suggestions/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Product Search of Who Bought Also Bought
     * 
     * Retrieves general information about other related products that the user also bought.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtResponse
     */
	public function productSearchWhoBoughtAlsoBought(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/whoboughtalsobought/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBoughtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearchWhoBoughtAlsoBought200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoBoughtAlsoBought200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Product Search of Who Saw Also Bought
     * 
     * Retrieves general information about other related products that the users saw and also bought.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtResponse
     */
	public function productSearchWhoSawAlsoBought(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/whosawalsobought/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBoughtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearchWhoSawAlsoBought200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoBought200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Product Search of Who Saw Also Saw
     * 
     * Retrieves general information about other related products that the users also saw.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawResponse
     */
	public function productSearchWhoSawAlsoSaw(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawResponse
    {
        $baseUrl = CrossSelling::PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/api/catalog_system/pub/products/crossselling/whosawalsosaw/{productId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearchWhoSawAlsoSaw200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearchWhoSawAlsoSaw200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
}