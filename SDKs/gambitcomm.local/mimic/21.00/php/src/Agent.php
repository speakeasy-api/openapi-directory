<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Agent 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a new ipalias for the agent.
     * 
     * port defaults to 161 if not specified. mask defaults to the class-based network mask for the address. interface defaults to the default network interface.  If port is set to 0, the system will automatically select a port number. This is useful for client-mode protocols, such as TFTP or TOD. Upon start of an IP alias with a 0 (auto-assigned) port number, its port will change to contain the value of the selected system port.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddIpaliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddIpaliasResponse
     */
	public function addIpalias(
        \OpenAPI\OpenAPI\Models\Operations\AddIpaliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddIpaliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/add/{IP}/{port}/{mask}/{interface}', \OpenAPI\OpenAPI\Models\Operations\AddIpaliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddIpaliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->addIpalias200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * 
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptResponse
     */
	public function addTimerScript(
        \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/timer/script/add/{script}/{interval}/{arg}', \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTimerScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->addTimerScript200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Remove the current agent.
     * 
     * For speed, this operation will complete asynchronously. The same synchronization considerations apply as in /mimic/agent/start.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentRemoveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentRemoveResponse
     */
	public function agentRemove(
        \OpenAPI\OpenAPI\Models\Operations\AgentRemoveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/remove', \OpenAPI\OpenAPI\Models\Operations\AgentRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentRemove200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * This command copies the variable store from the other agent to this agent.
     * 
     * This command copies the variable store from the other agent to this agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyResponse
     */
	public function agentStoreCopy(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/copy/{otherAgent}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreCopy200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * This command can be used as a predicate to ascertain the existence of a given variable.
     * 
     * It returns "1" if the variable exists, else "0".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsResponse
     */
	public function agentStoreExists(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/exists/{var}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreExistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreExists200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Fetches the value associated with a variable.
     * 
     * The value will be returned as a string (like all Tcl values).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetResponse
     */
	public function agentStoreGet(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/get/{var}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreGet200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * This command will return the list of variables in the said scope.
     * 
     * The list will be a Tcl format list with curly braces "{}" around each list element. These elements in turn are space separated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreListResponse
     */
	public function agentStoreList(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/list', \OpenAPI\OpenAPI\Models\Operations\AgentStoreListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentStoreList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * 
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceResponse
     */
	public function agentStoreLreplace(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/lreplace/{var}/{index}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreLreplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreLreplace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * This command can be used as a predicate to ascertain the persistence of a given variable.
     * 
     * It returns "1" if the variable is persistent, else "0".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsResponse
     */
	public function agentStorePersists(
        \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/persists/{var}', \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStorePersistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStorePersists200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * These commands allow the creation of a new variable, or changing an existing value.
     * 
     * The append sub-command will append the value to an existing variable, or create a new one. The set sub-command will overwrite an existing variable, or create a new one. The optional persist flag can be used to indicate if the variable is to be persistent as described above. By default a value of '0' will be implied for the persist flag. To avoid mistakes, for existing variables the persist flag can only be set. If you want to reset it, you first need to unset the variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetResponse
     */
	public function agentStoreSet(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/set/{var}/{persist}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreSet200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes a variable which is currently defined.
     * 
     * This will cleanup persistent variables if needed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetResponse
     */
	public function agentStoreUnset(
        \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/store/unset/{var}', \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AgentStoreUnsetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->agentStoreUnset200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes an existing ipalias from the agent.
     * 
     * port defaults to 161 if not specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DelIpaliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DelIpaliasResponse
     */
	public function delIpalias(
        \OpenAPI\OpenAPI\Models\Operations\DelIpaliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DelIpaliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/delete/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\DelIpaliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DelIpaliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->delIpalias200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Remove a timer script from the execution list.
     * 
     * The first scheduled script that matches the script name, and optionally the interval and argument will be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptResponse
     */
	public function delTimerScript(
        \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/timer/script/delete/{script}/{interval}/{arg}', \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DelTimerScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->delTimerScript200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add a source address that the agent will accept messages from.
     * 
     * An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FromAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FromAddResponse
     */
	public function fromAdd(
        \OpenAPI\OpenAPI\Models\Operations\FromAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FromAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/from/add/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\FromAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FromAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->fromAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * delete a source address that the agent will accept messages from.
     * 
     * An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FromDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FromDelResponse
     */
	public function fromDel(
        \OpenAPI\OpenAPI\Models\Operations\FromDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FromDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/from/delete/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\FromDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FromDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->fromDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List the source addresses that the agent will accept messages from.
     * 
     * This in effect implements source-address-indexing, where 2 agents with the same address can be configured, each accepting messages from different management stations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FromListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FromListResponse
     */
	public function fromList(
        \OpenAPI\OpenAPI\Models\Operations\FromListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FromListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/from/list', \OpenAPI\OpenAPI\Models\Operations\FromListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FromListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipSources = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IPSource>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * current running state of the agent
     * 
     * 0-Unknown 1-Running 2-Stopped 3-Halted 4-Paused 5-Deleted 6-Stopping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentStateResponse
     */
	public function getAgentState(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/state', \OpenAPI\OpenAPI\Models\Operations\GetAgentStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAgentState200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * has the agent value space changed?
     * 
     * has the agent value space changed?
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChangedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChangedResponse
     */
	public function getChanged(
        \OpenAPI\OpenAPI\Models\Operations\GetChangedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChangedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/changed', \OpenAPI\OpenAPI\Models\Operations\GetChangedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChangedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getChanged200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * has the lab configuration changed?
     * 
     * has the lab configuration changed?
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedResponse
     */
	public function getConfigChanged(
        \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/config_changed', \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConfigChangedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConfigChanged200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * one-way transit delay in msec.
     * 
     * The minimum granularity is 10 msec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDelayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDelayResponse
     */
	public function getDelay(
        \OpenAPI\OpenAPI\Models\Operations\GetDelayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDelayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/delay', \OpenAPI\OpenAPI\Models\Operations\GetDelayRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDelayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDelay200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * drop rate (every N-th PDU). 0 means no drops.
     * 
     * drop rate (every N-th PDU). 0 means no drops.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDropsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDropsResponse
     */
	public function getDrops(
        \OpenAPI\OpenAPI\Models\Operations\GetDropsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDropsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/drops', \OpenAPI\OpenAPI\Models\Operations\GetDropsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDropsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDrops200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * host address of the agent.
     * 
     * Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHostResponse
     */
	public function getHost(
        \OpenAPI\OpenAPI\Models\Operations\GetHostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/host', \OpenAPI\OpenAPI\Models\Operations\GetHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getHost200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * timeout in seconds for retransmitting INFORM PDUs.
     * 
     * The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutResponse
     */
	public function getInformTimeout(
        \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/inform_timeout', \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInformTimeoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getInformTimeout200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * network interface card for the agent.
     * 
     * network interface card for the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInterfaceResponse
     */
	public function getInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/interface', \OpenAPI\OpenAPI\Models\Operations\GetInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getInterface200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * subnet mask of the agent.
     * 
     * subnet mask of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMaskResponse
     */
	public function getMask(
        \OpenAPI\OpenAPI\Models\Operations\GetMaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/mask', \OpenAPI\OpenAPI\Models\Operations\GetMaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getMask200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * set of MIBs, simulations and scenarios
     * 
     * set of MIBs, simulations and scenarios
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMibsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMibsResponse
     */
	public function getMibs(
        \OpenAPI\OpenAPI\Models\Operations\GetMibsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMibsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/mibs', \OpenAPI\OpenAPI\Models\Operations\GetMibsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMibsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->triplets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Triplet>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * number of starts for the agent.
     * 
     * This count is incremented each time an agent starts. It affects the SNMPv3 EngineBoots parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsResponse
     */
	public function getNumberStarts(
        \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/num_starts', \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumberStartsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNumberStarts200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * MIB directory of the agent.
     * 
     * MIB directory of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOiddirRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOiddirResponse
     */
	public function getOiddir(
        \OpenAPI\OpenAPI\Models\Operations\GetOiddirRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOiddirResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/oiddir', \OpenAPI\OpenAPI\Models\Operations\GetOiddirRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOiddirResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getOiddir200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * owner of the agent.
     * 
     * owner of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOwnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOwnerResponse
     */
	public function getOwner(
        \OpenAPI\OpenAPI\Models\Operations\GetOwnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/owner', \OpenAPI\OpenAPI\Models\Operations\GetOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getOwner200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * maximum PDU size.
     * 
     * The limit for this configurable is 65536.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPdusizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPdusizeResponse
     */
	public function getPdusize(
        \OpenAPI\OpenAPI\Models\Operations\GetPdusizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPdusizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/pdusize', \OpenAPI\OpenAPI\Models\Operations\GetPdusizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPdusizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPdusize200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * port number
     * 
     * port number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPortResponse
     */
	public function getPort(
        \OpenAPI\OpenAPI\Models\Operations\GetPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/port', \OpenAPI\OpenAPI\Models\Operations\GetPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getPort200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * private directory of the agent.
     * 
     * private directory of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPrivdirRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPrivdirResponse
     */
	public function getPrivdir(
        \OpenAPI\OpenAPI\Models\Operations\GetPrivdirRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPrivdirResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/privdir', \OpenAPI\OpenAPI\Models\Operations\GetPrivdirRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPrivdirResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getPrivdir200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * protocols supported by agent
     * 
     * protocols supported by agent as an array of strings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProtocolsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProtocolsResponse
     */
	public function getProtocols(
        \OpenAPI\OpenAPI\Models\Operations\GetProtocolsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProtocolsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/protocol', \OpenAPI\OpenAPI\Models\Operations\GetProtocolsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProtocolsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProtocols200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * read community string
     * 
     * read community string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityResponse
     */
	public function getReadCommunity(
        \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/read', \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReadCommunityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getReadCommunity200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * first scenario name
     * 
     * first scenario name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScenResponse
     */
	public function getScen(
        \OpenAPI\OpenAPI\Models\Operations\GetScenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/scen', \OpenAPI\OpenAPI\Models\Operations\GetScenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getScen200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * first simulation name
     * 
     * first simulation name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSimResponse
     */
	public function getSim(
        \OpenAPI\OpenAPI\Models\Operations\GetSimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/sim', \OpenAPI\OpenAPI\Models\Operations\GetSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getSim200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * relative start time
     * 
     * relative start time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStarttimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStarttimeResponse
     */
	public function getStarttime(
        \OpenAPI\OpenAPI\Models\Operations\GetStarttimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStarttimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/start', \OpenAPI\OpenAPI\Models\Operations\GetStarttimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStarttimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getStarttime200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * has the agent state changed?
     * 
     * has the agent state changed?
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStateChangedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStateChangedResponse
     */
	public function getStateChanged(
        \OpenAPI\OpenAPI\Models\Operations\GetStateChangedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStateChangedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/state_changed', \OpenAPI\OpenAPI\Models\Operations\GetStateChangedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStateChangedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getStateChanged200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * current statistics of the agent instance
     * 
     * The statistics are returned as 64-bit decimal numbers for the following statistics, total, discarded, error, GET, GETNEXT, SET, GETBULK, trap, GET variables, GETNEXT variables, SET variables, GETBULK variables, INFORM sent, INFORM re-sent, INFORM timed out, INFORM acked, INFORM REPORT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatisticsResponse
     */
	public function getStatistics(
        \OpenAPI\OpenAPI\Models\Operations\GetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/statistics', \OpenAPI\OpenAPI\Models\Operations\GetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * SNMP PDU tracing
     * 
     * SNMP PDU tracing
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTraceResponse
     */
	public function getTrace(
        \OpenAPI\OpenAPI\Models\Operations\GetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/trace', \OpenAPI\OpenAPI\Models\Operations\GetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTrace200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * SNMP SET validation policy.
     * 
     * Is a bitmask in which with the following bits (from LSB) check for type, length, range, access
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetValidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetValidateResponse
     */
	public function getValidate(
        \OpenAPI\OpenAPI\Models\Operations\GetValidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/validate', \OpenAPI\OpenAPI\Models\Operations\GetValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getValidate200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * write community string
     * 
     * write community string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityResponse
     */
	public function getWriteCommunity(
        \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/get/write', \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWriteCommunityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getWriteCommunity200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Halt the current agent.
     * 
     * Halt the current agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HaltRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\HaltResponse
     */
	public function halt(
        \OpenAPI\OpenAPI\Models\Operations\HaltRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\HaltResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/halt', \OpenAPI\OpenAPI\Models\Operations\HaltRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HaltResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->halt200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Lists all the additional ipaliases configured for the agent.
     * 
     * The agent host address (set with mimic agent set host) is not in this list, since it is already accessible separately with mimic agent get host.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesResponse
     */
	public function listIpaliases(
        \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/list', \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIpaliasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipAliases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IPAlias>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List the timer scripts currently running along with the their intervals.
     * 
     * The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsResponse
     */
	public function listTimerScripts(
        \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/timer/script/list', \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTimerScriptsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timerScripts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TimerScript>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add an agent.
     * 
     * Add an agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewResponse
     */
	public function new(
        \OpenAPI\OpenAPI\Models\Operations\NewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/add/{IP}', \OpenAPI\OpenAPI\Models\Operations\NewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->new200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Pause the current agent.
     * 
     * Pause the current agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PauseNowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PauseNowResponse
     */
	public function pauseNow(
        \OpenAPI\OpenAPI\Models\Operations\PauseNowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PauseNowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/pause', \OpenAPI\OpenAPI\Models\Operations\PauseNowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PauseNowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->pauseNow200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the protocol's configuration.
     * 
     * Returns the protocol's configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigResponse
     */
	public function protocolGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/{prot}/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolGetConfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Reload the current agent.
     * 
     * This only works for halted agents. The net effect is the same as restarting an agent (ie. stop, start, halt), but without disconnecting the network (and thus existing connections).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReloadResponse
     */
	public function reload(
        \OpenAPI\OpenAPI\Models\Operations\ReloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/reload', \OpenAPI\OpenAPI\Models\Operations\ReloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->reload200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Resume the current agent.
     * 
     * Resume the current agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResumeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResumeResponse
     */
	public function resume(
        \OpenAPI\OpenAPI\Models\Operations\ResumeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/resume', \OpenAPI\OpenAPI\Models\Operations\ResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->resume200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Save agent MIB values.
     * 
     * Save agent MIB values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveResponse
     */
	public function save(
        \OpenAPI\OpenAPI\Models\Operations\SaveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/save', \OpenAPI\OpenAPI\Models\Operations\SaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->save200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * one-way transit delay in msec
     * 
     * The minimum granularity is 10 msec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetDelayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetDelayResponse
     */
	public function setDelay(
        \OpenAPI\OpenAPI\Models\Operations\SetDelayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetDelayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/delay/{delay}', \OpenAPI\OpenAPI\Models\Operations\SetDelayRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetDelayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setDelay200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * drop rate (every N-th PDU)
     * 
     * 0 means no drops
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetDropsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetDropsResponse
     */
	public function setDrops(
        \OpenAPI\OpenAPI\Models\Operations\SetDropsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetDropsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/drops/{drops}', \OpenAPI\OpenAPI\Models\Operations\SetDropsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetDropsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setDrops200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * host address of the agent.
     * 
     * Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetHostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetHostResponse
     */
	public function setHost(
        \OpenAPI\OpenAPI\Models\Operations\SetHostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/host/{host}', \OpenAPI\OpenAPI\Models\Operations\SetHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setHost200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * timeout in seconds for retransmitting INFORM PDUs
     * 
     * The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutResponse
     */
	public function setInformTimeout(
        \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/inform_timeout/{inform_timeout}', \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetInformTimeoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setInformTimeout200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * network interface card for the agent
     * 
     * network interface card for the agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetInterfaceResponse
     */
	public function setInterface(
        \OpenAPI\OpenAPI\Models\Operations\SetInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/interface/{interface}', \OpenAPI\OpenAPI\Models\Operations\SetInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setInterface200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * subnet mask of the agent.
     * 
     * subnet mask of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetMaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetMaskResponse
     */
	public function setMask(
        \OpenAPI\OpenAPI\Models\Operations\SetMaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetMaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/mask/{mask}', \OpenAPI\OpenAPI\Models\Operations\SetMaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetMaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setMask200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * set of MIBs, simulations and scenarios
     * 
     * set of MIBs, simulations and scenarios
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetMibsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetMibsResponse
     */
	public function setMibs(
        \OpenAPI\OpenAPI\Models\Operations\SetMibsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetMibsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/mibs', \OpenAPI\OpenAPI\Models\Operations\SetMibsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetMibsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setMibs200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * MIB directory of the agent.
     * 
     * MIB directory of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetOiddirRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetOiddirResponse
     */
	public function setOiddir(
        \OpenAPI\OpenAPI\Models\Operations\SetOiddirRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetOiddirResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/oiddir/{oiddir}', \OpenAPI\OpenAPI\Models\Operations\SetOiddirRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetOiddirResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setOiddir200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * owner of the agent
     * 
     * owner of the agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetOwnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetOwnerResponse
     */
	public function setOwner(
        \OpenAPI\OpenAPI\Models\Operations\SetOwnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/owner/{owner}', \OpenAPI\OpenAPI\Models\Operations\SetOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setOwner200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * maximum PDU size
     * 
     * The limit for this configurable is 65536
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetPdusizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetPdusizeResponse
     */
	public function setPdusize(
        \OpenAPI\OpenAPI\Models\Operations\SetPdusizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetPdusizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/pdusize/{pdusize}', \OpenAPI\OpenAPI\Models\Operations\SetPdusizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetPdusizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setPdusize200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * port number
     * 
     * port number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetPortResponse
     */
	public function setPort(
        \OpenAPI\OpenAPI\Models\Operations\SetPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/port/{port}', \OpenAPI\OpenAPI\Models\Operations\SetPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setPort200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * private directory of the agent.
     * 
     * private directory of the agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetPrivdirRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetPrivdirResponse
     */
	public function setPrivdir(
        \OpenAPI\OpenAPI\Models\Operations\SetPrivdirRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetPrivdirResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/privdir/{privdir}', \OpenAPI\OpenAPI\Models\Operations\SetPrivdirRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetPrivdirResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setPrivdir200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * protocols supported by agent as a comma-separated list
     * 
     * protocols supported by agent as a comma-separated list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetProtocolsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetProtocolsResponse
     */
	public function setProtocols(
        \OpenAPI\OpenAPI\Models\Operations\SetProtocolsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetProtocolsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/protocol', \OpenAPI\OpenAPI\Models\Operations\SetProtocolsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetProtocolsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setProtocols200ApplicationJSONStringIntegers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * read community string
     * 
     * read community string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityResponse
     */
	public function setReadCommunity(
        \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/read/{read}', \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetReadCommunityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setReadCommunity200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * relative start time
     * 
     * relative start time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetStarttimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetStarttimeResponse
     */
	public function setStarttime(
        \OpenAPI\OpenAPI\Models\Operations\SetStarttimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetStarttimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/start/{start}', \OpenAPI\OpenAPI\Models\Operations\SetStarttimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetStarttimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setStarttime200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * SNMP PDU tracing
     * 
     * SNMP PDU tracing
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetTraceResponse
     */
	public function setTrace(
        \OpenAPI\OpenAPI\Models\Operations\SetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/trace/{trace}', \OpenAPI\OpenAPI\Models\Operations\SetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setTrace200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * SNMP SET validation policy
     * 
     * Is a bitmask in which with the following bits (from LSB) check for type, length, range, access. A default value of 65535 does all validation checking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetValidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetValidateResponse
     */
	public function setValidate(
        \OpenAPI\OpenAPI\Models\Operations\SetValidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/validate/{validate}', \OpenAPI\OpenAPI\Models\Operations\SetValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setValidate200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * write community string
     * 
     * write community string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityResponse
     */
	public function setWriteCommunity(
        \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/set/write/{write}', \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetWriteCommunityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->setWriteCommunity200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Start the current agent.
     * 
     * For speed, this operation will complete asynchronously. A successful return from this command means the starting of the agent is in progress. If you need to rely on the agent to have completed startup, you should wait for it's state to become RUNNING.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartResponse
     */
	public function start(
        \OpenAPI\OpenAPI\Models\Operations\StartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/start', \OpenAPI\OpenAPI\Models\Operations\StartRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->start200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Starts an existing ipalias for the agent.
     * 
     * port defaults to 161 if not specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartIpaliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartIpaliasResponse
     */
	public function startIpalias(
        \OpenAPI\OpenAPI\Models\Operations\StartIpaliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartIpaliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/start/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\StartIpaliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartIpaliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->startIpalias200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the status (0=down, 1=up) of an existing ipalias for the agent.
     * 
     * port defaults to 161 if not specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasResponse
     */
	public function statusIpalias(
        \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/status/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StatusIpaliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->statusIpalias200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's primary IP address
     * 
     * Agent primary IP address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopResponse
     */
	public function stop(
        \OpenAPI\OpenAPI\Models\Operations\StopRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/stop', \OpenAPI\OpenAPI\Models\Operations\StopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->stop200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stops an existing ipalias for the agent.
     * 
     * port defaults to 161 if not specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopIpaliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopIpaliasResponse
     */
	public function stopIpalias(
        \OpenAPI\OpenAPI\Models\Operations\StopIpaliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopIpaliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/ipalias/stop/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\StopIpaliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopIpaliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->stopIpalias200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add a trap destination to the set of destinations.
     * 
     * Add a trap destination to the set of destinations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddResponse
     */
	public function trapConfigAdd(
        \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/trap/config/add/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TrapConfigAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->trapConfigAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Remove a trap destination from the set of destinations.
     * 
     * Remove a trap destination from the set of destinations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelResponse
     */
	public function trapConfigDel(
        \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/trap/config/delete/{IP}/{port}', \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TrapConfigDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->trapConfigDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List the set of trap destinations for this agent instance.
     * 
     * Each trap destination is identified with an IP address and a port number. The default port number is the standard SNMP trap port 162.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TrapConfigListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TrapConfigListResponse
     */
	public function trapConfigList(
        \OpenAPI\OpenAPI\Models\Operations\TrapConfigListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TrapConfigListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/trap/config/list', \OpenAPI\OpenAPI\Models\Operations\TrapConfigListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TrapConfigListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trapDests = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TrapDest>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List the outstanding asynchronous traps for this agent instance.
     * 
     * List the outstanding asynchronous traps for this agent instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TrapListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TrapListResponse
     */
	public function trapList(
        \OpenAPI\OpenAPI\Models\Operations\TrapListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TrapListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/trap/list', \OpenAPI\OpenAPI\Models\Operations\TrapListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TrapListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trapList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
}