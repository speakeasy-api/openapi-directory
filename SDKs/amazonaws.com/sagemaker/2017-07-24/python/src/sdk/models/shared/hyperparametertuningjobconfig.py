"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hyperparametertuningjobobjective as shared_hyperparametertuningjobobjective
from ..shared import hyperparametertuningjobstrategyconfig as shared_hyperparametertuningjobstrategyconfig
from ..shared import hyperparametertuningjobstrategytype_enum as shared_hyperparametertuningjobstrategytype_enum
from ..shared import parameterranges as shared_parameterranges
from ..shared import resourcelimits as shared_resourcelimits
from ..shared import trainingjobearlystoppingtype_enum as shared_trainingjobearlystoppingtype_enum
from ..shared import tuningjobcompletioncriteria as shared_tuningjobcompletioncriteria
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HyperParameterTuningJobConfig:
    r"""Configures a hyperparameter tuning job."""
    
    resource_limits: shared_resourcelimits.ResourceLimits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceLimits') }})  
    strategy: shared_hyperparametertuningjobstrategytype_enum.HyperParameterTuningJobStrategyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Strategy') }})  
    hyper_parameter_tuning_job_objective: Optional[shared_hyperparametertuningjobobjective.HyperParameterTuningJobObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobObjective'), 'exclude': lambda f: f is None }})  
    parameter_ranges: Optional[shared_parameterranges.ParameterRanges] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParameterRanges'), 'exclude': lambda f: f is None }})  
    random_seed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RandomSeed'), 'exclude': lambda f: f is None }})  
    strategy_config: Optional[shared_hyperparametertuningjobstrategyconfig.HyperParameterTuningJobStrategyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StrategyConfig'), 'exclude': lambda f: f is None }})  
    training_job_early_stopping_type: Optional[shared_trainingjobearlystoppingtype_enum.TrainingJobEarlyStoppingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobEarlyStoppingType'), 'exclude': lambda f: f is None }})  
    tuning_job_completion_criteria: Optional[shared_tuningjobcompletioncriteria.TuningJobCompletionCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningJobCompletionCriteria'), 'exclude': lambda f: f is None }})  
    