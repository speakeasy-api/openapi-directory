/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Committees are entities that spend and raise money in an election. Their characteristics and relationships with candidates can change over time. 
 * 
 *  You might want to use filters or search endpoints to find the committee you're looking for. Then you can use other committee endpoints to explore information about the committee that interests you. 
 * 
 *  Financial information is organized by `committee_id`, so finding the committee you're interested in will lead you to more granular financial information. 
 * 
 *  The committee endpoints include all FEC filers, even if they aren't registered as a committee. 
 * 
 *  Officially, committees include the committees and organizations that file with the FEC. Several different types of organizations file financial reports with the FEC: 
 * 
 *  *Campaign committees authorized by particular candidates to raise and spend funds in their campaigns. Non-party committees (e.g., PACs), some of which may be sponsored by corporations, unions, trade or membership groups, etc. Political party committees at the national, state, and local levels. Groups and individuals making only independent expenditures Corporations, unions, and other organizations making internal communications* 
 * 
 *  The committee endpoints primarily use data from FEC registration Form 1 and Form 2.
 */
public class Committee {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Committee(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     *  - This endpoint is useful for finding detailed information about a particular committee or - filer. Use the `committee_id` to find the most recent information about the committee. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesResponse getCandidateCandidateIdCommittees(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesRequest.class, baseUrl, "/candidate/{candidate_id}/committees/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesResponse(contentType, httpRes.statusCode()) {{
            committeeDetailPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeDetailPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeDetailPage.class);
                res.committeeDetailPage = out;
            }
        }

        return res;
    }

    /**
     *  - Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryResponse getCandidateCandidateIdCommitteesHistory(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryRequest.class, baseUrl, "/candidate/{candidate_id}/committees/history/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryResponse(contentType, httpRes.statusCode()) {{
            committeeHistoryProfilePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeHistoryProfilePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeHistoryProfilePage.class);
                res.committeeHistoryProfilePage = out;
            }
        }

        return res;
    }

    /**
     *  - Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleResponse getCandidateCandidateIdCommitteesHistoryCycle(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleRequest.class, baseUrl, "/candidate/{candidate_id}/committees/history/{cycle}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleResponse res = new org.openapis.openapi.models.operations.GetCandidateCandidateIdCommitteesHistoryCycleResponse(contentType, httpRes.statusCode()) {{
            committeeHistoryProfilePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeHistoryProfilePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeHistoryProfilePage.class);
                res.committeeHistoryProfilePage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint is useful for finding detailed information about a particular committee or - filer. Use the `committee_id` to find the most recent information about the committee. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdResponse getCommitteeCommitteeId(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdRequest.class, baseUrl, "/committee/{committee_id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdResponse(contentType, httpRes.statusCode()) {{
            committeeDetailPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeDetailPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeDetailPage.class);
                res.committeeDetailPage = out;
            }
        }

        return res;
    }

    /**
     *  - Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryResponse getCommitteeCommitteeIdHistory(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryRequest.class, baseUrl, "/committee/{committee_id}/history/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryResponse(contentType, httpRes.statusCode()) {{
            committeeHistoryProfilePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeHistoryProfilePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeHistoryProfilePage.class);
                res.committeeHistoryProfilePage = out;
            }
        }

        return res;
    }

    /**
     *  - Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleResponse getCommitteeCommitteeIdHistoryCycle(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleRequest.class, baseUrl, "/committee/{committee_id}/history/{cycle}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdHistoryCycleResponse(contentType, httpRes.statusCode()) {{
            committeeHistoryProfilePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeHistoryProfilePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeHistoryProfilePage.class);
                res.committeeHistoryProfilePage = out;
            }
        }

        return res;
    }

    /**
     *  - Fetch basic information about committees and filers. Use parameters to filter for - particular characteristics. -  - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteesResponse getCommittees(org.openapis.openapi.models.operations.GetCommitteesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/committees/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteesResponse res = new org.openapis.openapi.models.operations.GetCommitteesResponse(contentType, httpRes.statusCode()) {{
            committeePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteePage.class);
                res.committeePage = out;
            }
        }

        return res;
    }
}