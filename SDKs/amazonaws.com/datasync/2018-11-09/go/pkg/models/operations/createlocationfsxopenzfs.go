// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLocationFsxOpenZfsXAmzTargetEnum
type CreateLocationFsxOpenZfsXAmzTargetEnum string

const (
	CreateLocationFsxOpenZfsXAmzTargetEnumFmrsServiceCreateLocationFsxOpenZfs CreateLocationFsxOpenZfsXAmzTargetEnum = "FmrsService.CreateLocationFsxOpenZfs"
)

func (e CreateLocationFsxOpenZfsXAmzTargetEnum) ToPointer() *CreateLocationFsxOpenZfsXAmzTargetEnum {
	return &e
}

func (e *CreateLocationFsxOpenZfsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FmrsService.CreateLocationFsxOpenZfs":
		*e = CreateLocationFsxOpenZfsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLocationFsxOpenZfsXAmzTargetEnum: %v", v)
	}
}

type CreateLocationFsxOpenZfsRequest struct {
	CreateLocationFsxOpenZfsRequest shared.CreateLocationFsxOpenZfsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      CreateLocationFsxOpenZfsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateLocationFsxOpenZfsResponse struct {
	ContentType string
	// Success
	CreateLocationFsxOpenZfsResponse *shared.CreateLocationFsxOpenZfsResponse
	// InternalException
	InternalException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
