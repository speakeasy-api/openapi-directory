"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import condition as shared_condition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ZoneBoundary:
    r"""Represents a Zone's boundaries."""
    
    condition: Optional[list[shared_condition.Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""The conditions that, when conjoined, make up the boundary."""  
    custom_evaluation_trigger_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customEvaluationTriggerId'), 'exclude': lambda f: f is None }})
    r"""Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true."""  
    