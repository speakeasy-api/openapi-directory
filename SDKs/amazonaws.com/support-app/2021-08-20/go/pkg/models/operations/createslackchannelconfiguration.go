// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum - <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, you must specify <code>true</code> for at least one of the following parameters:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, the following parameters must be null or <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, they default to <code>false</code>.</p> </note>
type CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum string

const (
	CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnumNone CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum = "none"
	CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnumAll  CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum = "all"
	CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnumHigh CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum = "high"
)

func (e CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum) ToPointer() *CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum {
	return &e
}

func (e *CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "all":
		fallthrough
	case "high":
		*e = CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum: %v", v)
	}
}

type CreateSlackChannelConfigurationRequestBody struct {
	// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
	ChannelID string `json:"channelId"`
	// The name of the Slack channel that you configure for the Amazon Web Services Support App.
	ChannelName *string `json:"channelName,omitempty"`
	// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.
	ChannelRoleArn string `json:"channelRoleArn"`
	// Whether you want to get notified when a support case has a new correspondence.
	NotifyOnAddCorrespondenceToCase *bool `json:"notifyOnAddCorrespondenceToCase,omitempty"`
	// <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, you must specify <code>true</code> for at least one of the following parameters:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, the following parameters must be null or <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, they default to <code>false</code>.</p> </note>
	NotifyOnCaseSeverity CreateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum `json:"notifyOnCaseSeverity"`
	// Whether you want to get notified when a support case is created or reopened.
	NotifyOnCreateOrReopenCase *bool `json:"notifyOnCreateOrReopenCase,omitempty"`
	// Whether you want to get notified when a support case is resolved.
	NotifyOnResolveCase *bool `json:"notifyOnResolveCase,omitempty"`
	// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
	TeamID string `json:"teamId"`
}

type CreateSlackChannelConfigurationRequest struct {
	RequestBody       CreateSlackChannelConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateSlackChannelConfigurationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateSlackChannelConfigurationResult map[string]interface{}
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ValidationException
	ValidationException interface{}
}
