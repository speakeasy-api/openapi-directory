// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ResetUserPasswordXAmzTargetEnum
type ResetUserPasswordXAmzTargetEnum string

const (
	ResetUserPasswordXAmzTargetEnumDirectoryService20150416ResetUserPassword ResetUserPasswordXAmzTargetEnum = "DirectoryService_20150416.ResetUserPassword"
)

func (e ResetUserPasswordXAmzTargetEnum) ToPointer() *ResetUserPasswordXAmzTargetEnum {
	return &e
}

func (e *ResetUserPasswordXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.ResetUserPassword":
		*e = ResetUserPasswordXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResetUserPasswordXAmzTargetEnum: %v", v)
	}
}

type ResetUserPasswordRequest struct {
	ResetUserPasswordRequest shared.ResetUserPasswordRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               ResetUserPasswordXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ResetUserPasswordResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidPasswordException
	InvalidPasswordException interface{}
	// Success
	ResetUserPasswordResult map[string]interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ServiceException
	ServiceException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
	// UserDoesNotExistException
	UserDoesNotExistException interface{}
}
