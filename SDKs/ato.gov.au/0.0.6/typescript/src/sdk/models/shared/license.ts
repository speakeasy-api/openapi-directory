/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The license type.
 */
export enum LicenseLicenseTypeEnum {
  AustralianFinancialServicesLicense = "Australian Financial Services License",
  License2B = "License 2B",
}

/**
 * The business name's lifecycle state.
 */
export enum LicenseLifecycleStateEnum {
  Approved = "Approved",
  Expired = "Expired",
  Issued = "Issued",
  PendingApproval = "Pending Approval",
  Suspended = "Suspended",
}

/**
 * The License resource.
 */
export class LicenseInput extends SpeakeasyBase {
  /**
   * The license type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: LicenseLicenseTypeEnum;

  /**
   * The business name's lifecycle state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifecycleState" })
  lifecycleState?: LicenseLifecycleStateEnum;
}

/**
 * The License resource.
 */
export class License extends SpeakeasyBase {
  /**
   * The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  fromDate?: Date;

  /**
   * The resource's unique identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The license type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: LicenseLicenseTypeEnum;

  /**
   * The business name's lifecycle state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifecycleState" })
  lifecycleState?: LicenseLifecycleStateEnum;

  /**
   * The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  toDate?: Date;
}
