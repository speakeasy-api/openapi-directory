<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AlbumsAlbumVideos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a specific video to an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumResponse
     */
	public function addVideoToAlbum(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a specific video to an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Response
     */
	public function addVideoToAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific video in an album
     * 
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoResponse
     */
	public function getAlbumVideo(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific video in an album
     * 
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Response
     */
	public function getAlbumVideoAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideoAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosResponse
     */
	public function getAlbumVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Response
     */
	public function getAlbumVideosAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumVideosAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a video from an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumResponse
     */
	public function removeVideoFromAlbum(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a video from an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Response
     */
	public function removeVideoFromAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveVideoFromAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace all the videos in an album
     * 
     * This method replaces all the existing videos in an album with one or more videos.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumResponse
     */
	public function replaceVideosInAlbum(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos', \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace all the videos in an album
     * 
     * This method replaces all the existing videos in an album with one or more videos.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Response
     */
	public function replaceVideosInAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos', \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceVideosInAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set a video as the album thumbnail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailResponse
     */
	public function setVideoAsAlbumThumbnail(
        \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail', \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set a video as the album thumbnail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Response
     */
	public function setVideoAsAlbumThumbnailAlt1(
        \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail', \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetVideoAsAlbumThumbnailAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}