/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The Open Cybersecurity Schema Framework (OCSF) event class which describes the type of data that the custom source will send to Security Lake.
 */
export enum CreateCustomLogSourceRequestBodyEventClassEnum {
  AccessActivity = "ACCESS_ACTIVITY",
  FileActivity = "FILE_ACTIVITY",
  KernelActivity = "KERNEL_ACTIVITY",
  KernelExtension = "KERNEL_EXTENSION",
  MemoryActivity = "MEMORY_ACTIVITY",
  ModuleActivity = "MODULE_ACTIVITY",
  ProcessActivity = "PROCESS_ACTIVITY",
  RegistryKeyActivity = "REGISTRY_KEY_ACTIVITY",
  RegistryValueActivity = "REGISTRY_VALUE_ACTIVITY",
  ResourceActivity = "RESOURCE_ACTIVITY",
  ScheduledJobActivity = "SCHEDULED_JOB_ACTIVITY",
  SecurityFinding = "SECURITY_FINDING",
  AccountChange = "ACCOUNT_CHANGE",
  Authentication = "AUTHENTICATION",
  Authorization = "AUTHORIZATION",
  EntityManagementAudit = "ENTITY_MANAGEMENT_AUDIT",
  DhcpActivity = "DHCP_ACTIVITY",
  NetworkActivity = "NETWORK_ACTIVITY",
  DnsActivity = "DNS_ACTIVITY",
  FtpActivity = "FTP_ACTIVITY",
  HttpActivity = "HTTP_ACTIVITY",
  RdpActivity = "RDP_ACTIVITY",
  SmbActivity = "SMB_ACTIVITY",
  SshActivity = "SSH_ACTIVITY",
  CloudApi = "CLOUD_API",
  ContainerLifecycle = "CONTAINER_LIFECYCLE",
  DatabaseLifecycle = "DATABASE_LIFECYCLE",
  ConfigState = "CONFIG_STATE",
  CloudStorage = "CLOUD_STORAGE",
  InventoryInfo = "INVENTORY_INFO",
  RfbActivity = "RFB_ACTIVITY",
  SmtpActivity = "SMTP_ACTIVITY",
  VirtualMachineActivity = "VIRTUAL_MACHINE_ACTIVITY",
}

export class CreateCustomLogSourceRequestBody extends SpeakeasyBase {
  /**
   * The name for a third-party custom source. This must be a Regionally unique value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customSourceName" })
  customSourceName: string;

  /**
   * The Open Cybersecurity Schema Framework (OCSF) event class which describes the type of data that the custom source will send to Security Lake.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventClass" })
  eventClass: CreateCustomLogSourceRequestBodyEventClassEnum;

  /**
   * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be used by the Glue crawler. The recommended IAM policies are:</p> <ul> <li> <p>The managed policy <code>AWSGlueServiceRole</code> </p> </li> <li> <p>A custom policy granting access to your Amazon S3 Data Lake</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "glueInvocationRoleArn" })
  glueInvocationRoleArn: string;

  /**
   * The Amazon Web Services account ID of the custom source that will write logs and events into the Amazon S3 Data Lake.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logProviderAccountId" })
  logProviderAccountId: string;
}

export class CreateCustomLogSourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateCustomLogSourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateCustomLogSourceResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AccountNotFoundException
   */
  @SpeakeasyMetadata()
  accountNotFoundException?: any;

  /**
   * BucketNotFoundException
   */
  @SpeakeasyMetadata()
  bucketNotFoundException?: any;

  /**
   * ConflictSourceNamesException
   */
  @SpeakeasyMetadata()
  conflictSourceNamesException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createCustomLogSourceResponse?: shared.CreateCustomLogSourceResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
