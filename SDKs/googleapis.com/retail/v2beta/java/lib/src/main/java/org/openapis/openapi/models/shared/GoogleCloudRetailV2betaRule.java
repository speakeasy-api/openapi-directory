/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRetailV2betaRule - A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently rules only work for controls with SOLUTION_TYPE_SEARCH.
 */
public class GoogleCloudRetailV2betaRule {
    /**
     * A boost action to apply to results matching condition specified above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boostAction")
    public GoogleCloudRetailV2betaRuleBoostAction boostAction;

    public GoogleCloudRetailV2betaRule withBoostAction(GoogleCloudRetailV2betaRuleBoostAction boostAction) {
        this.boostAction = boostAction;
        return this;
    }
    
    /**
     * Metadata that is used to define a condition that triggers an action. A valid condition must specify at least one of 'query_terms' or 'products_filter'. If multiple fields are specified, the condition is met if all the fields are satisfied e.g. if a set of query terms and product_filter are set, then only items matching the product_filter for requests with a query matching the query terms wil get boosted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public GoogleCloudRetailV2betaCondition condition;

    public GoogleCloudRetailV2betaRule withCondition(GoogleCloudRetailV2betaCondition condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * Prevents `query_term` from being associated with specified terms during search. Example: Don't associate "gShoe" and "cheap".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doNotAssociateAction")
    public GoogleCloudRetailV2betaRuleDoNotAssociateAction doNotAssociateAction;

    public GoogleCloudRetailV2betaRule withDoNotAssociateAction(GoogleCloudRetailV2betaRuleDoNotAssociateAction doNotAssociateAction) {
        this.doNotAssociateAction = doNotAssociateAction;
        return this;
    }
    
    /**
     * * Rule Condition: - No Condition.query_terms provided is a global match. - 1 or more Condition.query_terms provided are combined with OR operator. * Action Input: The request query and filter that are applied to the retrieved products, in addition to any filters already provided with the SearchRequest. The AND operator is used to combine the query's existing filters with the filter rule(s). NOTE: May result in 0 results when filters conflict. * Action Result: Filters the returned objects to be ONLY those that passed the filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterAction")
    public GoogleCloudRetailV2betaRuleFilterAction filterAction;

    public GoogleCloudRetailV2betaRule withFilterAction(GoogleCloudRetailV2betaRuleFilterAction filterAction) {
        this.filterAction = filterAction;
        return this;
    }
    
    /**
     * Prevents a term in the query from being used in search. Example: Don't search for "shoddy".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreAction")
    public GoogleCloudRetailV2betaRuleIgnoreAction ignoreAction;

    public GoogleCloudRetailV2betaRule withIgnoreAction(GoogleCloudRetailV2betaRuleIgnoreAction ignoreAction) {
        this.ignoreAction = ignoreAction;
        return this;
    }
    
    /**
     * Maps a set of terms to a set of synonyms. Set of synonyms will be treated as synonyms of each query term only. `query_terms` will not be treated as synonyms of each other. Example: "sneakers" will use a synonym of "shoes". "shoes" will not use a synonym of "sneakers".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onewaySynonymsAction")
    public GoogleCloudRetailV2betaRuleOnewaySynonymsAction onewaySynonymsAction;

    public GoogleCloudRetailV2betaRule withOnewaySynonymsAction(GoogleCloudRetailV2betaRuleOnewaySynonymsAction onewaySynonymsAction) {
        this.onewaySynonymsAction = onewaySynonymsAction;
        return this;
    }
    
    /**
     * Redirects a shopper to a specific page. * Rule Condition: - Must specify Condition.query_terms. * Action Input: Request Query * Action Result: Redirects shopper to provided uri.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectAction")
    public GoogleCloudRetailV2betaRuleRedirectAction redirectAction;

    public GoogleCloudRetailV2betaRule withRedirectAction(GoogleCloudRetailV2betaRuleRedirectAction redirectAction) {
        this.redirectAction = redirectAction;
        return this;
    }
    
    /**
     * Replaces a term in the query. Multiple replacement candidates can be specified. All `query_terms` will be replaced with the replacement term. Example: Replace "gShoe" with "google shoe".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replacementAction")
    public GoogleCloudRetailV2betaRuleReplacementAction replacementAction;

    public GoogleCloudRetailV2betaRule withReplacementAction(GoogleCloudRetailV2betaRuleReplacementAction replacementAction) {
        this.replacementAction = replacementAction;
        return this;
    }
    
    /**
     * Creates a set of terms that will be treated as synonyms of each other. Example: synonyms of "sneakers" and "shoes": * "sneakers" will use a synonym of "shoes". * "shoes" will use a synonym of "sneakers".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twowaySynonymsAction")
    public GoogleCloudRetailV2betaRuleTwowaySynonymsAction twowaySynonymsAction;

    public GoogleCloudRetailV2betaRule withTwowaySynonymsAction(GoogleCloudRetailV2betaRuleTwowaySynonymsAction twowaySynonymsAction) {
        this.twowaySynonymsAction = twowaySynonymsAction;
        return this;
    }
    
    public GoogleCloudRetailV2betaRule(){}
}
