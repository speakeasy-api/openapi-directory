/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoint for getting Personal Current Account data
 */
export class Pca {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of all `Personal Current Account` objects.
   */
  getPersonalCurrentAccounts(
    req: operations.GetPersonalCurrentAccountsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPersonalCurrentAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPersonalCurrentAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/personal-current-accounts";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPersonalCurrentAccountsResponse =
        new operations.GetPersonalCurrentAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.getPersonalCurrentAccounts200ApplicationPrsOpenbankingOpendataV13PlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPersonalCurrentAccounts200ApplicationPrsOpenbankingOpendataV13PlusJson
              );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.fourHundredErrorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccounts400ErrorObject
            );
          }
          break;
        case httpRes?.status == 408:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.fourHundredAndEightErrorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccounts408ErrorObject
            );
          }
          break;
        case httpRes?.status == 429:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.fourHundredAndTwentyNineErrorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccounts429ErrorObject
            );
          }
          break;
        case httpRes?.status == 500:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.fiveHundredErrorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccounts500ErrorObject
            );
          }
          break;
        case httpRes?.status == 503:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.fiveHundredAndThreeErrorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccounts503ErrorObject
            );
          }
          break;
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.errorObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPersonalCurrentAccountsErrorObject
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets header information on the current set of `Personal Current Account` data
   */
  headPersonalCurrentAccounts(
    req: operations.HeadPersonalCurrentAccountsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeadPersonalCurrentAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HeadPersonalCurrentAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/personal-current-accounts";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "head",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HeadPersonalCurrentAccountsResponse =
        new operations.HeadPersonalCurrentAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/prs.openbanking.opendata.v1.3+json`
            )
          ) {
            res.noResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
