"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class AccessToken:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def access_token_put_form(self, request: shared.AccessTokenToPut) -> operations.AccessTokenPutFormResponse:
        r"""Creates a Access Token to write on a Card (e.g. NFC)
        Creates a Access Token to write on a Card (e.g. NFC)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/AccessToken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccessTokenPutFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.access_token_put_form_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.access_token_put_form_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.access_token_put_form_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.access_token_put_form_200_text_xml_string = http_res.content

        return res

    def access_token_put_json(self, request: shared.AccessTokenToPut) -> operations.AccessTokenPutJSONResponse:
        r"""Creates a Access Token to write on a Card (e.g. NFC)
        Creates a Access Token to write on a Card (e.g. NFC)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/AccessToken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccessTokenPutJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.access_token_put_json_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.access_token_put_json_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.access_token_put_json_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.access_token_put_json_200_text_xml_string = http_res.content

        return res

    def access_token_put_raw(self, request: bytes) -> operations.AccessTokenPutRawResponse:
        r"""Creates a Access Token to write on a Card (e.g. NFC)
        Creates a Access Token to write on a Card (e.g. NFC)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/AccessToken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccessTokenPutRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.access_token_put_raw_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.access_token_put_raw_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.access_token_put_raw_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.access_token_put_raw_200_text_xml_string = http_res.content

        return res

    