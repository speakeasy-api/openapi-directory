// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RepricingRuleTypeEnum - Required. Immutable. The type of the rule.
type RepricingRuleTypeEnum string

const (
	RepricingRuleTypeEnumRepricingRuleTypeUnspecified RepricingRuleTypeEnum = "REPRICING_RULE_TYPE_UNSPECIFIED"
	RepricingRuleTypeEnumTypeStatsBased               RepricingRuleTypeEnum = "TYPE_STATS_BASED"
	RepricingRuleTypeEnumTypeCogsBased                RepricingRuleTypeEnum = "TYPE_COGS_BASED"
	RepricingRuleTypeEnumTypeSalesVolumeBased         RepricingRuleTypeEnum = "TYPE_SALES_VOLUME_BASED"
	RepricingRuleTypeEnumTypeCompetitivePrice         RepricingRuleTypeEnum = "TYPE_COMPETITIVE_PRICE"
)

func (e *RepricingRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REPRICING_RULE_TYPE_UNSPECIFIED":
		fallthrough
	case "TYPE_STATS_BASED":
		fallthrough
	case "TYPE_COGS_BASED":
		fallthrough
	case "TYPE_SALES_VOLUME_BASED":
		fallthrough
	case "TYPE_COMPETITIVE_PRICE":
		*e = RepricingRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RepricingRuleTypeEnum: %s", s)
	}
}

// RepricingRuleInput - Represents a repricing rule. A repricing rule is used by shopping serving to adjust transactable offer prices if conditions are met.
type RepricingRuleInput struct {
	// A repricing rule that changes the sale price based on cost of goods sale.
	CogsBasedRule *RepricingRuleCostOfGoodsSaleRule `json:"cogsBasedRule,omitempty"`
	// Required. Immutable. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) (e.g. "US").
	CountryCode         *string                     `json:"countryCode,omitempty"`
	EffectiveTimePeriod *RepricingRuleEffectiveTime `json:"effectiveTimePeriod,omitempty"`
	// Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
	EligibleOfferMatcher *RepricingRuleEligibleOfferMatcher `json:"eligibleOfferMatcher,omitempty"`
	// Required. Immutable. The two-letter ISO 639-1 language code associated with the repricing rule.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Represents whether a rule is paused. A paused rule will behave like a non-paused rule within CRUD operations, with the major difference that a paused rule will not be evaluated and will have no effect on offers.
	Paused *bool `json:"paused,omitempty"`
	// Definition of a rule restriction. At least one of the following needs to be true: (1) use_auto_pricing_min_price is true (2) floor.price_delta exists (3) floor.percentage_delta exists If floor.price_delta and floor.percentage_delta are both set on a rule, the highest value will be chosen by the Repricer. In other words, for a product with a price of $50, if the `floor.percentage_delta` is "-10" and the floor.price_delta is "-12", the offer price will only be lowered $5 (10% lower than the original offer price).
	Restriction *RepricingRuleRestriction `json:"restriction,omitempty"`
	// Definition of stats based rule.
	StatsBasedRule *RepricingRuleStatsBasedRule `json:"statsBasedRule,omitempty"`
	// The title for the rule.
	Title *string `json:"title,omitempty"`
	// Required. Immutable. The type of the rule.
	Type *RepricingRuleTypeEnum `json:"type,omitempty"`
}

// RepricingRule - Represents a repricing rule. A repricing rule is used by shopping serving to adjust transactable offer prices if conditions are met.
type RepricingRule struct {
	// A repricing rule that changes the sale price based on cost of goods sale.
	CogsBasedRule *RepricingRuleCostOfGoodsSaleRule `json:"cogsBasedRule,omitempty"`
	// Required. Immutable. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) (e.g. "US").
	CountryCode         *string                     `json:"countryCode,omitempty"`
	EffectiveTimePeriod *RepricingRuleEffectiveTime `json:"effectiveTimePeriod,omitempty"`
	// Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
	EligibleOfferMatcher *RepricingRuleEligibleOfferMatcher `json:"eligibleOfferMatcher,omitempty"`
	// Required. Immutable. The two-letter ISO 639-1 language code associated with the repricing rule.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Output only. Immutable. Merchant that owns the repricing rule.
	MerchantID *string `json:"merchantId,omitempty"`
	// Represents whether a rule is paused. A paused rule will behave like a non-paused rule within CRUD operations, with the major difference that a paused rule will not be evaluated and will have no effect on offers.
	Paused *bool `json:"paused,omitempty"`
	// Definition of a rule restriction. At least one of the following needs to be true: (1) use_auto_pricing_min_price is true (2) floor.price_delta exists (3) floor.percentage_delta exists If floor.price_delta and floor.percentage_delta are both set on a rule, the highest value will be chosen by the Repricer. In other words, for a product with a price of $50, if the `floor.percentage_delta` is "-10" and the floor.price_delta is "-12", the offer price will only be lowered $5 (10% lower than the original offer price).
	Restriction *RepricingRuleRestriction `json:"restriction,omitempty"`
	// Output only. Immutable. The ID to uniquely identify each repricing rule.
	RuleID *string `json:"ruleId,omitempty"`
	// Definition of stats based rule.
	StatsBasedRule *RepricingRuleStatsBasedRule `json:"statsBasedRule,omitempty"`
	// The title for the rule.
	Title *string `json:"title,omitempty"`
	// Required. Immutable. The type of the rule.
	Type *RepricingRuleTypeEnum `json:"type,omitempty"`
}
