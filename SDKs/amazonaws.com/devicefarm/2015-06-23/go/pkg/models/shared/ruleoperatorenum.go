// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RuleOperatorEnum string

const (
	RuleOperatorEnumEquals              RuleOperatorEnum = "EQUALS"
	RuleOperatorEnumLessThan            RuleOperatorEnum = "LESS_THAN"
	RuleOperatorEnumLessThanOrEquals    RuleOperatorEnum = "LESS_THAN_OR_EQUALS"
	RuleOperatorEnumGreaterThan         RuleOperatorEnum = "GREATER_THAN"
	RuleOperatorEnumGreaterThanOrEquals RuleOperatorEnum = "GREATER_THAN_OR_EQUALS"
	RuleOperatorEnumIn                  RuleOperatorEnum = "IN"
	RuleOperatorEnumNotIn               RuleOperatorEnum = "NOT_IN"
	RuleOperatorEnumContains            RuleOperatorEnum = "CONTAINS"
)

func (e RuleOperatorEnum) ToPointer() *RuleOperatorEnum {
	return &e
}

func (e *RuleOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EQUALS":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "LESS_THAN_OR_EQUALS":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "GREATER_THAN_OR_EQUALS":
		fallthrough
	case "IN":
		fallthrough
	case "NOT_IN":
		fallthrough
	case "CONTAINS":
		*e = RuleOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleOperatorEnum: %v", v)
	}
}
