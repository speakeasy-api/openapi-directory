"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkApplianceSsidResponse = exports.UpdateNetworkApplianceSsid200ApplicationJSON = exports.UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers = exports.UpdateNetworkApplianceSsidRequest = exports.UpdateNetworkApplianceSsidRequestBody = exports.UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkApplianceSsidRequestBodyRadiusServers = exports.UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication = exports.UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
 */
var UpdateNetworkApplianceSsidRequestBodyAuthModeEnum;
(function (UpdateNetworkApplianceSsidRequestBodyAuthModeEnum) {
    UpdateNetworkApplianceSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexMeraki"] = "8021x-meraki";
    UpdateNetworkApplianceSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexRadius"] = "8021x-radius";
    UpdateNetworkApplianceSsidRequestBodyAuthModeEnum["Open"] = "open";
    UpdateNetworkApplianceSsidRequestBodyAuthModeEnum["Psk"] = "psk";
})(UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = exports.UpdateNetworkApplianceSsidRequestBodyAuthModeEnum || (exports.UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = {}));
/**
 * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
 */
var UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication, _super);
    function UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication.prototype, "enabled", void 0);
    return UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication = UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication;
/**
 * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
 */
var UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum;
(function (UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum) {
    UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum["Wep"] = "wep";
    UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum["Wpa"] = "wpa";
})(UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum || (exports.UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum = {}));
var UpdateNetworkApplianceSsidRequestBodyRadiusServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsidRequestBodyRadiusServers, _super);
    function UpdateNetworkApplianceSsidRequestBodyRadiusServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBodyRadiusServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsidRequestBodyRadiusServers.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBodyRadiusServers.prototype, "secret", void 0);
    return UpdateNetworkApplianceSsidRequestBodyRadiusServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsidRequestBodyRadiusServers = UpdateNetworkApplianceSsidRequestBodyRadiusServers;
/**
 * The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
 */
var UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum;
(function (UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum) {
    UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum["Wpa1AndWpa2"] = "WPA1 and WPA2";
    UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum["Wpa2Only"] = "WPA2 only";
    UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum["Wpa3TransitionMode"] = "WPA3 Transition Mode";
    UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum["Wpa3Only"] = "WPA3 only";
})(UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum || (exports.UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = {}));
var UpdateNetworkApplianceSsidRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsidRequestBody, _super);
    function UpdateNetworkApplianceSsidRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "authMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultVlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "defaultVlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpEnforcedDeauthentication" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication; }),
        __metadata("design:type", UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "dhcpEnforcedDeauthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "encryptionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "psk" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "psk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceSsidRequestBodyRadiusServers,
        }),
        (0, class_transformer_1.Expose)({ name: "radiusServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceSsidRequestBodyRadiusServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "radiusServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visible" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "visible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wpaEncryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequestBody.prototype, "wpaEncryptionMode", void 0);
    return UpdateNetworkApplianceSsidRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsidRequestBody = UpdateNetworkApplianceSsidRequestBody;
var UpdateNetworkApplianceSsidRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsidRequest, _super);
    function UpdateNetworkApplianceSsidRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkApplianceSsidRequestBody)
    ], UpdateNetworkApplianceSsidRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=number",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidRequest.prototype, "number", void 0);
    return UpdateNetworkApplianceSsidRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsidRequest = UpdateNetworkApplianceSsidRequest;
var UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers, _super);
    function UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers.prototype, "port", void 0);
    return UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers = UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers;
/**
 * Successful operation
 */
var UpdateNetworkApplianceSsid200ApplicationJSON = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsid200ApplicationJSON, _super);
    function UpdateNetworkApplianceSsid200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "authMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultVlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "defaultVlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "encryptionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "number" }),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "number", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers,
        }),
        (0, class_transformer_1.Expose)({ name: "radiusServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "radiusServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visible" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "visible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wpaEncryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsid200ApplicationJSON.prototype, "wpaEncryptionMode", void 0);
    return UpdateNetworkApplianceSsid200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsid200ApplicationJSON = UpdateNetworkApplianceSsid200ApplicationJSON;
var UpdateNetworkApplianceSsidResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkApplianceSsidResponse, _super);
    function UpdateNetworkApplianceSsidResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkApplianceSsidResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkApplianceSsidResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkApplianceSsidResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", UpdateNetworkApplianceSsid200ApplicationJSON)
    ], UpdateNetworkApplianceSsidResponse.prototype, "updateNetworkApplianceSsid200ApplicationJSONObject", void 0);
    return UpdateNetworkApplianceSsidResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkApplianceSsidResponse = UpdateNetworkApplianceSsidResponse;
