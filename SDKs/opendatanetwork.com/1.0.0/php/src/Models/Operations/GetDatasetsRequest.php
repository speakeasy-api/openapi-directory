<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetDatasetsRequest
{
    /**
     * e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * 
     * @var ?string $xAppToken
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-App-Token')]
    public ?string $xAppToken = null;
    
    /**
     * The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
     * 
     * used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * 
     * @var ?string $appToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=app_token')]
    public ?string $appToken = null;
    
    /**
     * If included, the search terms of the dataset
     * 
     * will be used in the query.
     * 
     * @var ?string $datasetId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=dataset_id')]
    public ?string $datasetId = null;
    
    /**
     * Entities to use in formulating the query.
     * 
     * @var ?string $entityId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=entity_id')]
    public ?string $entityId = null;
    
    /**
     * Maximum number of results to return.
     * 
     * Must be an integer from 0 to 50000.
     * 
     * @var ?float $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?float $limit = null;
    
    /**
     * Number of results to skip.
     * 
     * Used for pagination.
     * 
     * @var ?float $offset
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=offset')]
    public ?float $offset = null;
    
	public function __construct()
	{
		$this->xAppToken = null;
		$this->appToken = null;
		$this->datasetId = null;
		$this->entityId = null;
		$this->limit = null;
		$this->offset = null;
	}
}
