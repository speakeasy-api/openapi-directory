/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TableStats - Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.
 */
public class TableStats {
    /**
     * How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageCellsPerColumn")
    public Double averageCellsPerColumn;

    public TableStats withAverageCellsPerColumn(Double averageCellsPerColumn) {
        this.averageCellsPerColumn = averageCellsPerColumn;
        return this;
    }
    
    /**
     * How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col", "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageColumnsPerRow")
    public Double averageColumnsPerRow;

    public TableStats withAverageColumnsPerRow(Double averageColumnsPerRow) {
        this.averageColumnsPerRow = averageColumnsPerRow;
        return this;
    }
    
    /**
     * This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logicalDataBytes")
    public String logicalDataBytes;

    public TableStats withLogicalDataBytes(String logicalDataBytes) {
        this.logicalDataBytes = logicalDataBytes;
        return this;
    }
    
    /**
     * How many rows are in the table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowCount")
    public String rowCount;

    public TableStats withRowCount(String rowCount) {
        this.rowCount = rowCount;
        return this;
    }
    
    public TableStats(){}
}
