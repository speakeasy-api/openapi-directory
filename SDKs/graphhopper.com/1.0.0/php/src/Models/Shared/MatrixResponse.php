<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MatrixResponse - Matrix API response
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MatrixResponse
{
    /**
     * The distance matrix for the specified points in the same order as the time matrix. The distances are in meters. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     * 
     * @var ?array<array<float>> $distances
     */
	#[\JMS\Serializer\Annotation\SerializedName('distances')]
    #[\JMS\Serializer\Annotation\Type('array<array<float>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $distances = null;
    
    /**
     * Optional. Additional response data.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\MatrixResponseHints> $hints
     */
	#[\JMS\Serializer\Annotation\SerializedName('hints')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MatrixResponseHints>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $hints = null;
    
    /**
     * Additional information for your request
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ResponseInfo $info
     */
	#[\JMS\Serializer\Annotation\SerializedName('info')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ResponseInfo')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ResponseInfo $info = null;
    
    /**
     * The time matrix for the specified points in the order [[from1->to1, from1->to2, ...], [from2->to1, from2->to2, ...], ...]. The times are in seconds. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     * 
     * @var ?array<array<float>> $times
     */
	#[\JMS\Serializer\Annotation\SerializedName('times')]
    #[\JMS\Serializer\Annotation\Type('array<array<float>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $times = null;
    
    /**
     * The weight matrix for the specified points in the same order as the time matrix. The weights for different vehicles can have a different unit but the weights array is perfectly suited as input for Vehicle Routing Problems as it is currently faster to calculate. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     * 
     * @var ?array<array<float>> $weights
     */
	#[\JMS\Serializer\Annotation\SerializedName('weights')]
    #[\JMS\Serializer\Annotation\Type('array<array<float>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $weights = null;
    
	public function __construct()
	{
		$this->distances = null;
		$this->hints = null;
		$this->info = null;
		$this->times = null;
		$this->weights = null;
	}
}
