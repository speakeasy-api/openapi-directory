"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Group:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def groups_add_member(self, request: operations.GroupsAddMemberRequest) -> operations.GroupsAddMemberResponse:
        r"""Add a member to a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsAddMemberRequest, base_url, '/{tenantID}/groups/{groupObjectId}/$links/members', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GroupsAddMemberRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsAddMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_create(self, request: operations.GroupsCreateRequest) -> operations.GroupsCreateResponse:
        r"""Create a group in the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsCreateRequest, base_url, '/{tenantID}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GroupsCreateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.ad_group = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.ad_group = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_delete(self, request: operations.GroupsDeleteRequest) -> operations.GroupsDeleteResponse:
        r"""Delete a group from the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsDeleteRequest, base_url, '/{tenantID}/groups/{objectId}', request)
        
        query_params = utils.get_query_params(operations.GroupsDeleteRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_get(self, request: operations.GroupsGetRequest) -> operations.GroupsGetResponse:
        r"""Gets group information from the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetRequest, base_url, '/{tenantID}/groups/{objectId}', request)
        
        query_params = utils.get_query_params(operations.GroupsGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.ad_group = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.ad_group = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_get_group_members(self, request: operations.GroupsGetGroupMembersRequest) -> operations.GroupsGetGroupMembersResponse:
        r"""Gets the members of a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetGroupMembersRequest, base_url, '/{tenantID}/groups/{objectId}/members', request)
        
        query_params = utils.get_query_params(operations.GroupsGetGroupMembersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetGroupMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DirectoryObjectListResult])
                res.directory_object_list_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DirectoryObjectListResult])
                res.directory_object_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_get_member_groups(self, request: operations.GroupsGetMemberGroupsRequest) -> operations.GroupsGetMemberGroupsResponse:
        r"""Gets a collection of object IDs of groups of which the specified group is a member."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetMemberGroupsRequest, base_url, '/{tenantID}/groups/{objectId}/getMemberGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GroupsGetMemberGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetMemberGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupGetMemberGroupsResult])
                res.group_get_member_groups_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupGetMemberGroupsResult])
                res.group_get_member_groups_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_is_member_of(self, request: operations.GroupsIsMemberOfRequest) -> operations.GroupsIsMemberOfResponse:
        r"""Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsIsMemberOfRequest, base_url, '/{tenantID}/isMemberOf', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GroupsIsMemberOfRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsIsMemberOfResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.check_group_membership_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.check_group_membership_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_list(self, request: operations.GroupsListRequest) -> operations.GroupsListResponse:
        r"""Gets list of groups for the current tenant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsListRequest, base_url, '/{tenantID}/groups', request)
        
        query_params = utils.get_query_params(operations.GroupsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupListResult])
                res.group_list_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupListResult])
                res.group_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def groups_remove_member(self, request: operations.GroupsRemoveMemberRequest) -> operations.GroupsRemoveMemberResponse:
        r"""Remove a member from a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsRemoveMemberRequest, base_url, '/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}', request)
        
        query_params = utils.get_query_params(operations.GroupsRemoveMemberRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsRemoveMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    