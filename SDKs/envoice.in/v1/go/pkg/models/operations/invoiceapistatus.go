// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type InvoiceAPIStatusRequest struct {
	ID          int    `queryParam:"style=form,explode=true,name=id"`
	XAuthKey    string `header:"style=simple,explode=false,name=x-auth-key"`
	XAuthSecret string `header:"style=simple,explode=false,name=x-auth-secret"`
}

// InvoiceAPIStatus200TextJSONEnum - OK
type InvoiceAPIStatus200TextJSONEnum string

const (
	InvoiceAPIStatus200TextJSONEnumDraft   InvoiceAPIStatus200TextJSONEnum = "Draft"
	InvoiceAPIStatus200TextJSONEnumPaid    InvoiceAPIStatus200TextJSONEnum = "Paid"
	InvoiceAPIStatus200TextJSONEnumUnpaid  InvoiceAPIStatus200TextJSONEnum = "Unpaid"
	InvoiceAPIStatus200TextJSONEnumOverdue InvoiceAPIStatus200TextJSONEnum = "Overdue"
	InvoiceAPIStatus200TextJSONEnumVoid    InvoiceAPIStatus200TextJSONEnum = "Void"
)

func (e InvoiceAPIStatus200TextJSONEnum) ToPointer() *InvoiceAPIStatus200TextJSONEnum {
	return &e
}

func (e *InvoiceAPIStatus200TextJSONEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Paid":
		fallthrough
	case "Unpaid":
		fallthrough
	case "Overdue":
		fallthrough
	case "Void":
		*e = InvoiceAPIStatus200TextJSONEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceAPIStatus200TextJSONEnum: %v", v)
	}
}

// InvoiceAPIStatus200ApplicationXMLEnum - OK
type InvoiceAPIStatus200ApplicationXMLEnum string

const (
	InvoiceAPIStatus200ApplicationXMLEnumDraft   InvoiceAPIStatus200ApplicationXMLEnum = "Draft"
	InvoiceAPIStatus200ApplicationXMLEnumPaid    InvoiceAPIStatus200ApplicationXMLEnum = "Paid"
	InvoiceAPIStatus200ApplicationXMLEnumUnpaid  InvoiceAPIStatus200ApplicationXMLEnum = "Unpaid"
	InvoiceAPIStatus200ApplicationXMLEnumOverdue InvoiceAPIStatus200ApplicationXMLEnum = "Overdue"
	InvoiceAPIStatus200ApplicationXMLEnumVoid    InvoiceAPIStatus200ApplicationXMLEnum = "Void"
)

func (e InvoiceAPIStatus200ApplicationXMLEnum) ToPointer() *InvoiceAPIStatus200ApplicationXMLEnum {
	return &e
}

func (e *InvoiceAPIStatus200ApplicationXMLEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Paid":
		fallthrough
	case "Unpaid":
		fallthrough
	case "Overdue":
		fallthrough
	case "Void":
		*e = InvoiceAPIStatus200ApplicationXMLEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceAPIStatus200ApplicationXMLEnum: %v", v)
	}
}

// InvoiceAPIStatus200ApplicationJSONEnum - OK
type InvoiceAPIStatus200ApplicationJSONEnum string

const (
	InvoiceAPIStatus200ApplicationJSONEnumDraft   InvoiceAPIStatus200ApplicationJSONEnum = "Draft"
	InvoiceAPIStatus200ApplicationJSONEnumPaid    InvoiceAPIStatus200ApplicationJSONEnum = "Paid"
	InvoiceAPIStatus200ApplicationJSONEnumUnpaid  InvoiceAPIStatus200ApplicationJSONEnum = "Unpaid"
	InvoiceAPIStatus200ApplicationJSONEnumOverdue InvoiceAPIStatus200ApplicationJSONEnum = "Overdue"
	InvoiceAPIStatus200ApplicationJSONEnumVoid    InvoiceAPIStatus200ApplicationJSONEnum = "Void"
)

func (e InvoiceAPIStatus200ApplicationJSONEnum) ToPointer() *InvoiceAPIStatus200ApplicationJSONEnum {
	return &e
}

func (e *InvoiceAPIStatus200ApplicationJSONEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Paid":
		fallthrough
	case "Unpaid":
		fallthrough
	case "Overdue":
		fallthrough
	case "Void":
		*e = InvoiceAPIStatus200ApplicationJSONEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceAPIStatus200ApplicationJSONEnum: %v", v)
	}
}

type InvoiceAPIStatusResponse struct {
	Body        []byte
	ContentType string
	// OK
	InvoiceAPIStatus200ApplicationJSONStringEnum *InvoiceAPIStatus200ApplicationJSONEnum
	// OK
	InvoiceAPIStatus200TextJSONStringEnum *InvoiceAPIStatus200TextJSONEnum
	StatusCode                            int
	RawResponse                           *http.Response
}
