// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum - The state of the client connection.
type TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum string

const (
	TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnumActive            TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum = "active"
	TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnumFailedToTerminate TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum = "failed-to-terminate"
	TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnumTerminating       TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum = "terminating"
	TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnumTerminated        TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum = "terminated"
)

func (e TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum) ToPointer() *TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum {
	return &e
}

func (e *TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "failed-to-terminate":
		fallthrough
	case "terminating":
		fallthrough
	case "terminated":
		*e = TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum: %v", v)
	}
}

// TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatus - A message about the status of the client connection, if applicable.
type TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatus struct {
	Code    *TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatusCodeEnum
	Message *string
}

// TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum - The state of the client connection.
type TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum string

const (
	TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnumActive            TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum = "active"
	TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnumFailedToTerminate TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum = "failed-to-terminate"
	TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnumTerminating       TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum = "terminating"
	TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnumTerminated        TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum = "terminated"
)

func (e TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum) ToPointer() *TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum {
	return &e
}

func (e *TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "failed-to-terminate":
		fallthrough
	case "terminating":
		fallthrough
	case "terminated":
		*e = TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum: %v", v)
	}
}

// TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatus - The state of the client connection.
type TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatus struct {
	Code    *TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatusCodeEnum
	Message *string
}

// TerminateClientVpnConnectionsResultConnectionStatuses - Information about a terminated Client VPN endpoint client connection.
type TerminateClientVpnConnectionsResultConnectionStatuses struct {
	ConnectionID   *string
	CurrentStatus  *TerminateClientVpnConnectionsResultConnectionStatusesCurrentStatus
	PreviousStatus *TerminateClientVpnConnectionsResultConnectionStatusesPreviousStatus
}

// TerminateClientVpnConnectionsResult - Success
type TerminateClientVpnConnectionsResult struct {
	ClientVpnEndpointID *string
	ConnectionStatuses  []TerminateClientVpnConnectionsResultConnectionStatuses
	Username            *string
}
