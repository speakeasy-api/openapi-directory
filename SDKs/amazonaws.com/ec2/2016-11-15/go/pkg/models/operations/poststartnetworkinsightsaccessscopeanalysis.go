// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTStartNetworkInsightsAccessScopeAnalysisActionEnum
type POSTStartNetworkInsightsAccessScopeAnalysisActionEnum string

const (
	POSTStartNetworkInsightsAccessScopeAnalysisActionEnumStartNetworkInsightsAccessScopeAnalysis POSTStartNetworkInsightsAccessScopeAnalysisActionEnum = "StartNetworkInsightsAccessScopeAnalysis"
)

func (e *POSTStartNetworkInsightsAccessScopeAnalysisActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StartNetworkInsightsAccessScopeAnalysis":
		*e = POSTStartNetworkInsightsAccessScopeAnalysisActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTStartNetworkInsightsAccessScopeAnalysisActionEnum: %s", s)
	}
}

// POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum
type POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum string

const (
	POSTStartNetworkInsightsAccessScopeAnalysisVersionEnumTwoThousandAndSixteen1115 POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum = "2016-11-15"
)

func (e *POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum: %s", s)
	}
}

type POSTStartNetworkInsightsAccessScopeAnalysisQueryParams struct {
	Action  POSTStartNetworkInsightsAccessScopeAnalysisActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTStartNetworkInsightsAccessScopeAnalysisVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTStartNetworkInsightsAccessScopeAnalysisHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTStartNetworkInsightsAccessScopeAnalysisRequest struct {
	QueryParams POSTStartNetworkInsightsAccessScopeAnalysisQueryParams
	Headers     POSTStartNetworkInsightsAccessScopeAnalysisHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTStartNetworkInsightsAccessScopeAnalysisResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
