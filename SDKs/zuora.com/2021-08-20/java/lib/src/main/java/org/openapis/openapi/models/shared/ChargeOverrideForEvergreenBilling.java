/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ChargeOverrideForEvergreenBilling - Billing information about the charge.
 * 
 */
public class ChargeOverrideForEvergreenBilling {
    /**
     * Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleDay")
    public Long billCycleDay;
    public ChargeOverrideForEvergreenBilling withBillCycleDay(Long billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     * Specifies how Zuora determines the day that each billing period begins on.
     * 
     *   * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.
     *   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.
     *   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.
     *   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.
     *   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleType")
    public ChargeOverrideForEvergreenBillingBillCycleTypeEnum billCycleType;
    public ChargeOverrideForEvergreenBilling withBillCycleType(ChargeOverrideForEvergreenBillingBillCycleTypeEnum billCycleType) {
        this.billCycleType = billCycleType;
        return this;
    }
    
    /**
     * Billing frequency of the charge. The value of this field controls the duration of each billing period.
     * 
     * If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriod")
    public ChargeOverrideForEvergreenBillingBillingPeriodEnum billingPeriod;
    public ChargeOverrideForEvergreenBilling withBillingPeriod(ChargeOverrideForEvergreenBillingBillingPeriodEnum billingPeriod) {
        this.billingPeriod = billingPeriod;
        return this;
    }
    
    /**
     * Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.
     * 
     * * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active.
     * * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription.
     * * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.
     * 
     * See the `billCycleType` field for information about how Zuora determines the billing day.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriodAlignment")
    public ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum billingPeriodAlignment;
    public ChargeOverrideForEvergreenBilling withBillingPeriodAlignment(ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum billingPeriodAlignment) {
        this.billingPeriodAlignment = billingPeriodAlignment;
        return this;
    }
    
    /**
     * Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingTiming")
    public ChargeOverrideForEvergreenBillingBillingTimingEnum billingTiming;
    public ChargeOverrideForEvergreenBilling withBillingTiming(ChargeOverrideForEvergreenBillingBillingTimingEnum billingTiming) {
        this.billingTiming = billingTiming;
        return this;
    }
    
    /**
     * Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specificBillingPeriod")
    public Long specificBillingPeriod;
    public ChargeOverrideForEvergreenBilling withSpecificBillingPeriod(Long specificBillingPeriod) {
        this.specificBillingPeriod = specificBillingPeriod;
        return this;
    }
    
    /**
     * Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weeklyBillCycleDay")
    public ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum weeklyBillCycleDay;
    public ChargeOverrideForEvergreenBilling withWeeklyBillCycleDay(ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum weeklyBillCycleDay) {
        this.weeklyBillCycleDay = weeklyBillCycleDay;
        return this;
    }
    
}
