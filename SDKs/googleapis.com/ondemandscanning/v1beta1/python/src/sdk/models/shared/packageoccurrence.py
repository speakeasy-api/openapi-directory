"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import license as shared_license
from ..shared import location as shared_location
from ..shared import version as shared_version
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PackageOccurrenceArchitectureEnum(str, Enum):
    r"""Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages."""
    ARCHITECTURE_UNSPECIFIED = 'ARCHITECTURE_UNSPECIFIED'
    X86 = 'X86'
    X64 = 'X64'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PackageOccurrence:
    r"""Details on how a particular software package was installed on a system."""
    
    architecture: Optional[PackageOccurrenceArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architecture'), 'exclude': lambda f: f is None }})
    r"""Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages."""  
    cpe_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpeUri'), 'exclude': lambda f: f is None }})
    r"""Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages."""  
    license: Optional[shared_license.License] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""License information."""  
    location: Optional[list[shared_location.Location]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""All of the places within the filesystem versions of this package have been found."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Output only. The name of the installed package."""  
    package_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageType'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.)."""  
    version: Optional[shared_version.Version] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version contains structured information about the version of a package."""  
    