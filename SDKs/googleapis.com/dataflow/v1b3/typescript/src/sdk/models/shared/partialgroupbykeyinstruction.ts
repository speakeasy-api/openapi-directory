/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { InstructionInput } from "./instructioninput";
import { SideInputInfo } from "./sideinputinfo";
import { Expose, Type } from "class-transformer";

/**
 * An instruction that does a partial group-by-key. One input and one output.
 */
export class PartialGroupByKeyInstruction extends SpeakeasyBase {
  /**
   * An input of an instruction, as a reference to an output of a producer instruction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input" })
  @Type(() => InstructionInput)
  input?: InstructionInput;

  /**
   * The codec to use for interpreting an element in the input PTable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputElementCodec" })
  inputElementCodec?: Record<string, any>;

  /**
   * If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originalCombineValuesInputStoreName" })
  originalCombineValuesInputStoreName?: string;

  /**
   * If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originalCombineValuesStepName" })
  originalCombineValuesStepName?: string;

  /**
   * Zero or more side inputs.
   */
  @SpeakeasyMetadata({ elemType: SideInputInfo })
  @Expose({ name: "sideInputs" })
  @Type(() => SideInputInfo)
  sideInputs?: SideInputInfo[];

  /**
   * The value combining function to invoke.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueCombiningFn" })
  valueCombiningFn?: Record<string, any>;
}
