/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BackfillModeEnum } from "./backfillmodeenum";
import { FlexMatchModeEnum } from "./flexmatchmodeenum";
import { GameProperty } from "./gameproperty";
import { Tag } from "./tag";
import { Expose, Type } from "class-transformer";

export class CreateMatchmakingConfigurationInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AcceptanceRequired" })
  acceptanceRequired: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AcceptanceTimeoutSeconds" })
  acceptanceTimeoutSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalPlayerCount" })
  additionalPlayerCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "BackfillMode" })
  backfillMode?: BackfillModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomEventData" })
  customEventData?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FlexMatchMode" })
  flexMatchMode?: FlexMatchModeEnum;

  @SpeakeasyMetadata({ elemType: GameProperty })
  @Expose({ name: "GameProperties" })
  @Type(() => GameProperty)
  gameProperties?: GameProperty[];

  @SpeakeasyMetadata()
  @Expose({ name: "GameSessionData" })
  gameSessionData?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GameSessionQueueArns" })
  gameSessionQueueArns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NotificationTarget" })
  notificationTarget?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RequestTimeoutSeconds" })
  requestTimeoutSeconds: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleSetName" })
  ruleSetName: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
