"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import articleindex as shared_articleindex
from enum import Enum
from typing import Optional

class GetArticlesStateEnum(str, Enum):
    r"""Using this parameter will allow the client to check which articles are fresh or rising.
                If `state=fresh` the server will return fresh articles.
                If `state=rising` the server will return rising articles.
                This param can be used in conjuction with `username`, only if set to `all`.
    """
    FRESH = 'fresh'
    RISING = 'rising'
    ALL = 'all'


@dataclasses.dataclass
class GetArticlesRequest:
    
    collection_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'collection_id', 'style': 'form', 'explode': True }})
    r"""Adding this will allow the client to return the list of articles
    belonging to the requested collection, ordered by ascending publication date.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Pagination page"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Page size (the number of items to return per page). The default maximum value can be overridden by \\"API_PER_PAGE_MAX\\" environment variable."""  
    state: Optional[GetArticlesStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Using this parameter will allow the client to check which articles are fresh or rising.
                If `state=fresh` the server will return fresh articles.
                If `state=rising` the server will return rising articles.
                This param can be used in conjuction with `username`, only if set to `all`.
    """  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': True }})
    r"""Using this parameter will retrieve articles that contain the requested tag. Articles
    will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
    """  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': True }})
    r"""Using this parameter will retrieve articles with any of the comma-separated tags.
    Articles will be ordered by descending popularity.
    """  
    tags_exclude: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags_exclude', 'style': 'form', 'explode': True }})
    r"""Using this parameter will retrieve articles that do _not_ contain _any_
    of comma-separated tags. Articles will be ordered by descending popularity.
    """  
    top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'top', 'style': 'form', 'explode': True }})
    r"""Using this parameter will allow the client to return the most popular articles
    in the last `N` days.
    `top` indicates the number of days since publication of the articles returned.
    This param can be used in conjuction with `tag`.
    """  
    username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})
    r"""Using this parameter will retrieve articles belonging
                to a User or Organization ordered by descending publication date.
                If `state=all` the number of items returned will be `1000` instead of the default `30`.
                This parameter can be used in conjuction with `state`.
    """  
    

@dataclasses.dataclass
class GetArticlesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    article_indices: Optional[list[shared_articleindex.ArticleIndex]] = dataclasses.field(default=None)
    r"""A List of Articles"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    