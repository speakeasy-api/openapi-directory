"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Policies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dns_policies_create(self, request: operations.DNSPoliciesCreateRequest, security: operations.DNSPoliciesCreateSecurity) -> operations.DNSPoliciesCreateResponse:
        r"""Creates a new Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesCreateRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "policy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def dns_policies_delete(self, request: operations.DNSPoliciesDeleteRequest, security: operations.DNSPoliciesDeleteSecurity) -> operations.DNSPoliciesDeleteResponse:
        r"""Deletes a previously created Policy. Fails if the policy is still being referenced by a network."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesDeleteRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies/{policy}', request)
        
        query_params = utils.get_query_params(operations.DNSPoliciesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dns_policies_get(self, request: operations.DNSPoliciesGetRequest, security: operations.DNSPoliciesGetSecurity) -> operations.DNSPoliciesGetResponse:
        r"""Fetches the representation of an existing Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesGetRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies/{policy}', request)
        
        query_params = utils.get_query_params(operations.DNSPoliciesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def dns_policies_list(self, request: operations.DNSPoliciesListRequest, security: operations.DNSPoliciesListSecurity) -> operations.DNSPoliciesListResponse:
        r"""Enumerates all Policies associated with a project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesListRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies', request)
        
        query_params = utils.get_query_params(operations.DNSPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PoliciesListResponse])
                res.policies_list_response = out

        return res

    def dns_policies_patch(self, request: operations.DNSPoliciesPatchRequest, security: operations.DNSPoliciesPatchSecurity) -> operations.DNSPoliciesPatchResponse:
        r"""Applies a partial update to an existing Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesPatchRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies/{policy}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "policy1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSPoliciesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PoliciesPatchResponse])
                res.policies_patch_response = out

        return res

    def dns_policies_update(self, request: operations.DNSPoliciesUpdateRequest, security: operations.DNSPoliciesUpdateSecurity) -> operations.DNSPoliciesUpdateResponse:
        r"""Updates an existing Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSPoliciesUpdateRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/policies/{policy}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "policy1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSPoliciesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSPoliciesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PoliciesUpdateResponse])
                res.policies_update_response = out

        return res

    