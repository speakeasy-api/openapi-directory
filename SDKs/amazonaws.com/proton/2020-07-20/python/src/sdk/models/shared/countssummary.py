"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resourcecountssummary as shared_resourcecountssummary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CountsSummary:
    r"""Summary counts of each Proton resource type."""
    
    components: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})  
    environments: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environments'), 'exclude': lambda f: f is None }})  
    environment_templates: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentTemplates'), 'exclude': lambda f: f is None }})  
    pipelines: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pipelines'), 'exclude': lambda f: f is None }})  
    service_instances: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceInstances'), 'exclude': lambda f: f is None }})  
    services: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})  
    service_templates: Optional[shared_resourcecountssummary.ResourceCountsSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceTemplates'), 'exclude': lambda f: f is None }})  
    