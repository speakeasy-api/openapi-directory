"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Routing = exports.RoutingSnapPreventionsEnum = exports.RoutingNetworkDataProviderEnum = exports.RoutingCurbsideStrictnessEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address).
 */
var RoutingCurbsideStrictnessEnum;
(function (RoutingCurbsideStrictnessEnum) {
    RoutingCurbsideStrictnessEnum["Ignore"] = "ignore";
    RoutingCurbsideStrictnessEnum["Soft"] = "soft";
    RoutingCurbsideStrictnessEnum["Strict"] = "strict";
})(RoutingCurbsideStrictnessEnum = exports.RoutingCurbsideStrictnessEnum || (exports.RoutingCurbsideStrictnessEnum = {}));
/**
 * specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles).
 */
var RoutingNetworkDataProviderEnum;
(function (RoutingNetworkDataProviderEnum) {
    RoutingNetworkDataProviderEnum["Openstreetmap"] = "openstreetmap";
    RoutingNetworkDataProviderEnum["Tomtom"] = "tomtom";
})(RoutingNetworkDataProviderEnum = exports.RoutingNetworkDataProviderEnum || (exports.RoutingNetworkDataProviderEnum = {}));
var RoutingSnapPreventionsEnum;
(function (RoutingSnapPreventionsEnum) {
    RoutingSnapPreventionsEnum["Motorway"] = "motorway";
    RoutingSnapPreventionsEnum["Trunk"] = "trunk";
    RoutingSnapPreventionsEnum["Bridge"] = "bridge";
    RoutingSnapPreventionsEnum["Ford"] = "ford";
    RoutingSnapPreventionsEnum["Tunnel"] = "tunnel";
    RoutingSnapPreventionsEnum["Ferry"] = "ferry";
})(RoutingSnapPreventionsEnum = exports.RoutingSnapPreventionsEnum || (exports.RoutingSnapPreventionsEnum = {}));
/**
 * This contains all routing specific configurations.
 */
var Routing = /** @class */ (function (_super) {
    __extends(Routing, _super);
    function Routing() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "calc_points" }),
        __metadata("design:type", Boolean)
    ], Routing.prototype, "calcPoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "consider_traffic" }),
        __metadata("design:type", Boolean)
    ], Routing.prototype, "considerTraffic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "curbside_strictness" }),
        __metadata("design:type", String)
    ], Routing.prototype, "curbsideStrictness", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fail_fast" }),
        __metadata("design:type", Boolean)
    ], Routing.prototype, "failFast", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network_data_provider" }),
        __metadata("design:type", String)
    ], Routing.prototype, "networkDataProvider", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "return_snapped_waypoints" }),
        __metadata("design:type", Boolean)
    ], Routing.prototype, "returnSnappedWaypoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "snap_preventions" }),
        __metadata("design:type", Array)
    ], Routing.prototype, "snapPreventions", void 0);
    return Routing;
}(utils_1.SpeakeasyBase));
exports.Routing = Routing;
