// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                           `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                           `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormData1 - Social contract to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
type PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormData1 struct {
	Accounting        *PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author            *string                                                               `multipartForm:"name=Author"`
	Code              *string                                                               `multipartForm:"name=Code"`
	Comment           *string                                                               `multipartForm:"name=Comment"`
	ContractDate      *string                                                               `multipartForm:"name=ContractDate"`
	ContractDuration  *string                                                               `multipartForm:"name=ContractDuration"`
	ContractualChange *string                                                               `multipartForm:"name=ContractualChange"`
	Date              *string                                                               `multipartForm:"name=Date"`
	File              PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormDataFile        `multipartForm:"file"`
	Position          *string                                                               `multipartForm:"name=Position"`
	Title             string                                                                `multipartForm:"name=Title"`
	WageDevelopments  *float32                                                              `multipartForm:"name=WageDevelopments"`
}

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartRequest struct {
	// Social contract to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDSocialContractsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder employee
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDSocialContractsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDSocialContractsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDSocialContractsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDSocialContractsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDSocialContractsMultipart201ApplicationJSON
}
