"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bets:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cashin(self, request: operations.CashinRequest) -> operations.CashinResponse:
        r"""Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
        Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CashinRequest, base_url, '/{betId}/cashin', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CashinRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CashInResponse])
                res.cash_in_response = out
        elif http_res.status_code in [400, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Errors])
                res.errors = out

        return res

    def get_bet_history(self, request: operations.GetBetHistoryRequest) -> operations.GetBetHistoryResponse:
        r"""Retrieves the customer’s bet history.
        Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/history'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetBetHistoryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBetHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BetHistoryResponse])
                res.bet_history_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Errors])
                res.errors = out

        return res

    def get_free_bets(self, request: operations.GetFreeBetsRequest) -> operations.GetFreeBetsResponse:
        r"""Returns available free bets
        Retrieves the current free bets available for a customer.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/freebets'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetFreeBetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFreeBetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FreeBetDetail]])
                res.free_bet = out
        elif http_res.status_code == 204:
            pass

        return res

    def place_complex_bet(self, request: operations.PlaceComplexBetRequest) -> operations.PlaceComplexBetResponse:
        r"""Places a multiple or a complex bet.
        Places a multiple or a complex bet.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bet/complex'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "complex_bet_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PlaceComplexBetRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceComplexBetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BetPlaced]])
                res.bet_placed_response = out
        elif http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BetDelayed]])
                res.bet_delayed_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Errors])
                res.errors = out

        return res

    def place_single_bet(self, request: operations.PlaceSingleBetRequest) -> operations.PlaceSingleBetResponse:
        r"""Places a single bet
        Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bet/single'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "single_bet_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PlaceSingleBetRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceSingleBetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BetPlaced]])
                res.bet_placed_response = out
        elif http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BetDelayed]])
                res.bet_delayed_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Errors])
                res.errors = out

        return res

    def validate_betslip(self, request: operations.ValidateBetslipRequest) -> operations.ValidateBetslipResponse:
        r"""Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/betslips'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "bet_slip_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ValidateBetslipRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ValidateBetslipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BetSlipResponse])
                res.bet_slip_response = out

        return res

    