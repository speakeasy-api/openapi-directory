/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmwareNodePool - Resource VmwareNodePool represents a VMware node pool. ##
 */
public class VmwareNodePool {
    /**
     * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;

    public VmwareNodePool withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * Parameters that describe the configuration of all nodes within a given node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public VmwareNodeConfig config;

    public VmwareNodePool withConfig(VmwareNodeConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Output only. The time at which this node pool was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public VmwareNodePool withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;

    public VmwareNodePool withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * The display name for the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public VmwareNodePool withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public VmwareNodePool withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Immutable. The resource name of this node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public VmwareNodePool withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodePoolAutoscaling")
    public VmwareNodePoolAutoscalingConfig nodePoolAutoscaling;

    public VmwareNodePool withNodePoolAutoscaling(VmwareNodePoolAutoscalingConfig nodePoolAutoscaling) {
        this.nodePoolAutoscaling = nodePoolAutoscaling;
        return this;
    }
    
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onPremVersion")
    public String onPremVersion;

    public VmwareNodePool withOnPremVersion(String onPremVersion) {
        this.onPremVersion = onPremVersion;
        return this;
    }
    
    /**
     * Output only. If set, there are currently changes in flight to the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciling")
    public Boolean reconciling;

    public VmwareNodePool withReconciling(Boolean reconciling) {
        this.reconciling = reconciling;
        return this;
    }
    
    /**
     * Output only. The current state of the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public VmwareNodePoolStateEnum state;

    public VmwareNodePool withState(VmwareNodePoolStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ResourceStatus status;

    public VmwareNodePool withStatus(ResourceStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Output only. The unique identifier of the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public VmwareNodePool withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The time at which this node pool was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public VmwareNodePool withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public VmwareNodePool(){}
}
