/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CodespacesRepoMachinesForAuthenticatedUserRequest extends SpeakeasyBase {
  /**
   * IP for location auto-detection when proxying a request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=client_ip",
  })
  clientIp?: string;

  /**
   * The location to check for available machines. Assigned by IP if not provided.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=location",
  })
  location?: string;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

/**
 * Response
 */
export class CodespacesRepoMachinesForAuthenticatedUser200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.CodespaceMachine })
  @Expose({ name: "machines" })
  @Type(() => shared.CodespaceMachine)
  machines: shared.CodespaceMachine[];

  @SpeakeasyMetadata()
  @Expose({ name: "total_count" })
  totalCount: number;
}

export class CodespacesRepoMachinesForAuthenticatedUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Requires authentication
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  codespacesRepoMachinesForAuthenticatedUser200ApplicationJSONObject?: CodespacesRepoMachinesForAuthenticatedUser200ApplicationJSON;
}
