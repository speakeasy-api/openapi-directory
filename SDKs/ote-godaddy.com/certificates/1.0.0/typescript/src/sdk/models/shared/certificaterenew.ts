/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
 */
export enum CertificateRenewRootTypeEnum {
  GodaddySha1 = "GODADDY_SHA_1",
  GodaddySha2 = "GODADDY_SHA_2",
  StarfieldSha1 = "STARFIELD_SHA_1",
  StarfieldSha2 = "STARFIELD_SHA_2",
}

/**
 * The renew request info
 */
export class CertificateRenew extends SpeakeasyBase {
  /**
   * Required if client would like to receive stateful actions via callback during certificate lifecyle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callbackUrl" })
  callbackUrl?: string;

  /**
   * The common name of certificate to be secured
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commonName" })
  commonName?: string;

  /**
   * Certificate Signing Request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "csr" })
  csr?: string;

  /**
   * Number of years for certificate validity period, if different from previous certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  period?: number;

  /**
   * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rootType" })
  rootType?: CertificateRenewRootTypeEnum;

  /**
   * Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subjectAlternativeNames" })
  subjectAlternativeNames?: string[];
}
