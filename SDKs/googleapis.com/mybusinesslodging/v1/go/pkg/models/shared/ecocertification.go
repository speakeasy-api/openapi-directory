// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EcoCertificationAwardedExceptionEnum - Awarded exception.
type EcoCertificationAwardedExceptionEnum string

const (
	EcoCertificationAwardedExceptionEnumExceptionUnspecified EcoCertificationAwardedExceptionEnum = "EXCEPTION_UNSPECIFIED"
	EcoCertificationAwardedExceptionEnumUnderConstruction    EcoCertificationAwardedExceptionEnum = "UNDER_CONSTRUCTION"
	EcoCertificationAwardedExceptionEnumDependentOnSeason    EcoCertificationAwardedExceptionEnum = "DEPENDENT_ON_SEASON"
	EcoCertificationAwardedExceptionEnumDependentOnDayOfWeek EcoCertificationAwardedExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e EcoCertificationAwardedExceptionEnum) ToPointer() *EcoCertificationAwardedExceptionEnum {
	return &e
}

func (e *EcoCertificationAwardedExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = EcoCertificationAwardedExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EcoCertificationAwardedExceptionEnum: %v", v)
	}
}

// EcoCertificationEcoCertificateEnum - Required. The eco certificate.
type EcoCertificationEcoCertificateEnum string

const (
	EcoCertificationEcoCertificateEnumEcoCertificateUnspecified                        EcoCertificationEcoCertificateEnum = "ECO_CERTIFICATE_UNSPECIFIED"
	EcoCertificationEcoCertificateEnumIso14001                                         EcoCertificationEcoCertificateEnum = "ISO14001"
	EcoCertificationEcoCertificateEnumIso50001                                         EcoCertificationEcoCertificateEnum = "ISO50001"
	EcoCertificationEcoCertificateEnumAsianEcotourism                                  EcoCertificationEcoCertificateEnum = "ASIAN_ECOTOURISM"
	EcoCertificationEcoCertificateEnumBiosphereResposnibleTourism                      EcoCertificationEcoCertificateEnum = "BIOSPHERE_RESPOSNIBLE_TOURISM"
	EcoCertificationEcoCertificateEnumBureauVeritas                                    EcoCertificationEcoCertificateEnum = "BUREAU_VERITAS"
	EcoCertificationEcoCertificateEnumControlUnion                                     EcoCertificationEcoCertificateEnum = "CONTROL_UNION"
	EcoCertificationEcoCertificateEnumEarthcheck                                       EcoCertificationEcoCertificateEnum = "EARTHCHECK"
	EcoCertificationEcoCertificateEnumEcoCertificationMalta                            EcoCertificationEcoCertificateEnum = "ECO_CERTIFICATION_MALTA"
	EcoCertificationEcoCertificateEnumEcotourismAustraliasEco                          EcoCertificationEcoCertificateEnum = "ECOTOURISM_AUSTRALIAS_ECO"
	EcoCertificationEcoCertificateEnumGreatGreenDeal                                   EcoCertificationEcoCertificateEnum = "GREAT_GREEN_DEAL"
	EcoCertificationEcoCertificateEnumGreenGlobe                                       EcoCertificationEcoCertificateEnum = "GREEN_GLOBE"
	EcoCertificationEcoCertificateEnumGreenGrowth2050                                  EcoCertificationEcoCertificateEnum = "GREEN_GROWTH2050"
	EcoCertificationEcoCertificateEnumGreenKey                                         EcoCertificationEcoCertificateEnum = "GREEN_KEY"
	EcoCertificationEcoCertificateEnumGreenKeyEcoRating                                EcoCertificationEcoCertificateEnum = "GREEN_KEY_ECO_RATING"
	EcoCertificationEcoCertificateEnumGreenSeal                                        EcoCertificationEcoCertificateEnum = "GREEN_SEAL"
	EcoCertificationEcoCertificateEnumGreenStar                                        EcoCertificationEcoCertificateEnum = "GREEN_STAR"
	EcoCertificationEcoCertificateEnumGreenTourismActive                               EcoCertificationEcoCertificateEnum = "GREEN_TOURISM_ACTIVE"
	EcoCertificationEcoCertificateEnumHiltonLightstay                                  EcoCertificationEcoCertificateEnum = "HILTON_LIGHTSTAY"
	EcoCertificationEcoCertificateEnumHostellingInternationalsQualityAndSustainability EcoCertificationEcoCertificateEnum = "HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY"
	EcoCertificationEcoCertificateEnumHotelesMasVerdes                                 EcoCertificationEcoCertificateEnum = "HOTELES_MAS_VERDES"
	EcoCertificationEcoCertificateEnumNordicSwanEcolabel                               EcoCertificationEcoCertificateEnum = "NORDIC_SWAN_ECOLABEL"
	EcoCertificationEcoCertificateEnumPreferredByNatureSustainableTourism              EcoCertificationEcoCertificateEnum = "PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM"
	EcoCertificationEcoCertificateEnumSustainableTravelIreland                         EcoCertificationEcoCertificateEnum = "SUSTAINABLE_TRAVEL_IRELAND"
	EcoCertificationEcoCertificateEnumTofTigersInititivesPug                           EcoCertificationEcoCertificateEnum = "TOF_TIGERS_INITITIVES_PUG"
	EcoCertificationEcoCertificateEnumTravelife                                        EcoCertificationEcoCertificateEnum = "TRAVELIFE"
	EcoCertificationEcoCertificateEnumUnitedCertificationSystemsLimited                EcoCertificationEcoCertificateEnum = "UNITED_CERTIFICATION_SYSTEMS_LIMITED"
	EcoCertificationEcoCertificateEnumVireoSrl                                         EcoCertificationEcoCertificateEnum = "VIREO_SRL"
)

func (e EcoCertificationEcoCertificateEnum) ToPointer() *EcoCertificationEcoCertificateEnum {
	return &e
}

func (e *EcoCertificationEcoCertificateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ECO_CERTIFICATE_UNSPECIFIED":
		fallthrough
	case "ISO14001":
		fallthrough
	case "ISO50001":
		fallthrough
	case "ASIAN_ECOTOURISM":
		fallthrough
	case "BIOSPHERE_RESPOSNIBLE_TOURISM":
		fallthrough
	case "BUREAU_VERITAS":
		fallthrough
	case "CONTROL_UNION":
		fallthrough
	case "EARTHCHECK":
		fallthrough
	case "ECO_CERTIFICATION_MALTA":
		fallthrough
	case "ECOTOURISM_AUSTRALIAS_ECO":
		fallthrough
	case "GREAT_GREEN_DEAL":
		fallthrough
	case "GREEN_GLOBE":
		fallthrough
	case "GREEN_GROWTH2050":
		fallthrough
	case "GREEN_KEY":
		fallthrough
	case "GREEN_KEY_ECO_RATING":
		fallthrough
	case "GREEN_SEAL":
		fallthrough
	case "GREEN_STAR":
		fallthrough
	case "GREEN_TOURISM_ACTIVE":
		fallthrough
	case "HILTON_LIGHTSTAY":
		fallthrough
	case "HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY":
		fallthrough
	case "HOTELES_MAS_VERDES":
		fallthrough
	case "NORDIC_SWAN_ECOLABEL":
		fallthrough
	case "PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM":
		fallthrough
	case "SUSTAINABLE_TRAVEL_IRELAND":
		fallthrough
	case "TOF_TIGERS_INITITIVES_PUG":
		fallthrough
	case "TRAVELIFE":
		fallthrough
	case "UNITED_CERTIFICATION_SYSTEMS_LIMITED":
		fallthrough
	case "VIREO_SRL":
		*e = EcoCertificationEcoCertificateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EcoCertificationEcoCertificateEnum: %v", v)
	}
}

// EcoCertification - An eco certificate awarded to the hotel.
type EcoCertification struct {
	// Whether the eco certificate was awarded or not.
	Awarded *bool `json:"awarded,omitempty"`
	// Awarded exception.
	AwardedException *EcoCertificationAwardedExceptionEnum `json:"awardedException,omitempty"`
	// Required. The eco certificate.
	EcoCertificate *EcoCertificationEcoCertificateEnum `json:"ecoCertificate,omitempty"`
}
