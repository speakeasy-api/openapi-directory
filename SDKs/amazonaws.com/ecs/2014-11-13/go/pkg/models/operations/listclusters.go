// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListClustersXAmzTargetEnum
type ListClustersXAmzTargetEnum string

const (
	ListClustersXAmzTargetEnumAmazonEc2ContainerServiceV20141113ListClusters ListClustersXAmzTargetEnum = "AmazonEC2ContainerServiceV20141113.ListClusters"
)

func (e ListClustersXAmzTargetEnum) ToPointer() *ListClustersXAmzTargetEnum {
	return &e
}

func (e *ListClustersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonEC2ContainerServiceV20141113.ListClusters":
		*e = ListClustersXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListClustersXAmzTargetEnum: %v", v)
	}
}

type ListClustersRequest struct {
	ListClustersRequest shared.ListClustersRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          ListClustersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListClustersResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListClustersResponse *shared.ListClustersResponse
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
}
