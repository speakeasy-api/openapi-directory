<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class APIV2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create podcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePodcastRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePodcastResponse
     */
	public function createPodcast(
        \OpenAPI\OpenAPI\Models\Operations\CreatePodcastRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePodcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePodcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create podcast episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeResponse
     */
	public function createPodcastEpisode(
        \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}/episodes/create', \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePodcastEpisodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete podcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePodcastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePodcastResponse
     */
	public function deletePodcast(
        \OpenAPI\OpenAPI\Models\Operations\DeletePodcastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePodcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}', \OpenAPI\OpenAPI\Models\Operations\DeletePodcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePodcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete podcast episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Response
     */
	public function deletePodcast1(
        \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePodcast1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List stations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsResponse
     */
	public function getPartnerAggregatorStations(
        \OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/stations/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPartnerAggregatorStationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get podcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPodcastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastResponse
     */
	public function getPodcast(
        \OpenAPI\OpenAPI\Models\Operations\GetPodcastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}', \OpenAPI\OpenAPI\Models\Operations\GetPodcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastCategoriesResponse
     */
	public function getPodcastCategories(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/categories');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastCountriesResponse
     */
	public function getPodcastCountries(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastCountriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/countries');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastCountriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get podcast episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeResponse
     */
	public function getPodcastEpisode(
        \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get podcast episodes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesResponse
     */
	public function getPodcastEpisodes(
        \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}/episodes', \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastEpisodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPodcastLanguagesResponse
     */
	public function getPodcastLanguages(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPodcastLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/languages');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPodcastLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Countries that can be used to filter stations in the search stations request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStationCountriesResponse
     */
	public function getStationCountries(
    ): \OpenAPI\OpenAPI\Models\Operations\GetStationCountriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/stations/countries');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStationCountriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Genres that can be used to filter stations in the search stations request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStationGenresResponse
     */
	public function getStationGenres(
    ): \OpenAPI\OpenAPI\Models\Operations\GetStationGenresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/stations/genres');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStationGenresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of Languages that can be used to filter stations in the search stations request
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStationLanguagesResponse
     */
	public function getStationLanguages(
    ): \OpenAPI\OpenAPI\Models\Operations\GetStationLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/stations/languages');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStationLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search podcasts
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PodcastSearchParams $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchPodcastsResponse
     */
	public function searchPodcasts(
        \OpenAPI\OpenAPI\Models\Shared\PodcastSearchParams $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchPodcastsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchPodcastsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search stations
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\StationSearchParams $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchStationsResponse
     */
	public function searchStations(
        \OpenAPI\OpenAPI\Models\Shared\StationSearchParams $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchStationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/stations/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchStationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update podcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastResponse
     */
	public function updatePodcast(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}', \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update podcast episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeResponse
     */
	public function updatePodcastEpisode(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePodcastEpisodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}