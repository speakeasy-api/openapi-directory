"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PatientManagementController:
    r"""Patient Management Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_patient_management(self, request: operations.GetPatientManagementRequest) -> operations.GetPatientManagementResponse:
        r"""getPatientManagement
        getPatientManagement
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPatientManagementRequest, base_url, '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPatientManagementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientManagement])
                res.patient_management = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_patient_management_diagnoses(self) -> operations.GetPatientManagementDiagnosesResponse:
        r"""getPatientManagementDiagnoses
        getPatientManagementDiagnoses
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patientmanagement/diagnoses'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPatientManagementDiagnosesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Code]])
                res.codes = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_patient_management_lookup_types(self) -> operations.GetPatientManagementLookupTypesResponse:
        r"""getPatientManagementLookupTypes
        getPatientManagementLookupTypes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patientmanagement/lookuptypes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPatientManagementLookupTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LookupType]])
                res.lookup_types = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def save_patient_management(self, request: operations.SavePatientManagementRequest) -> operations.SavePatientManagementResponse:
        r"""savePatientManagement
        savePatientManagement
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SavePatientManagementRequest, base_url, '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patient_management", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SavePatientManagementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def save_patient_management_surgeries(self, request: operations.SavePatientManagementSurgeriesRequest) -> operations.SavePatientManagementSurgeriesResponse:
        r"""savePatientManagementSurgeries
        savePatientManagementSurgeries
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SavePatientManagementSurgeriesRequest, base_url, '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}/surgeries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patient_management", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SavePatientManagementSurgeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def validate_patient_management(self, request: shared.PatientManagement) -> operations.ValidatePatientManagementResponse:
        r"""validatePatientManagement
        validatePatientManagement
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patientmanagement/validate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ValidatePatientManagementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    