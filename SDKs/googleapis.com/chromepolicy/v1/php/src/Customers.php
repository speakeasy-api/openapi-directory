<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse
     */
	public function chromepolicyCustomersPoliciesGroupsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/groups:batchDelete', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyResponse
     */
	public function chromepolicyCustomersPoliciesGroupsBatchModify(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/groups:batchModify', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsBatchModifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse
     */
	public function chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/groups:listGroupPriorityOrdering', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1ListGroupPriorityOrderingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse
     */
	public function chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/groups:updateGroupPriorityOrdering', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a certificate at a specified OU for a customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse
     */
	public function chromepolicyCustomersPoliciesNetworksDefineCertificate(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/networks:defineCertificate', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1DefineCertificateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1DefineCertificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1DefineCertificateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Define a new network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse
     */
	public function chromepolicyCustomersPoliciesNetworksDefineNetwork(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/networks:defineNetwork', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1DefineNetworkRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1DefineNetworkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1DefineNetworkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an existing certificate by guid.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse
     */
	public function chromepolicyCustomersPoliciesNetworksRemoveCertificate(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/networks:removeCertificate', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1RemoveCertificateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1RemoveCertificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an existing network by guid.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse
     */
	public function chromepolicyCustomersPoliciesNetworksRemoveNetwork(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/networks:removeNetwork', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1RemoveNetworkRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1RemoveNetworkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse
     */
	public function chromepolicyCustomersPoliciesOrgunitsBatchInherit(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/orgunits:batchInherit', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse
     */
	public function chromepolicyCustomersPoliciesOrgunitsBatchModify(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies/orgunits:batchModify', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the resolved policy values for a list of policies that match a search query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveResponse
     */
	public function chromepolicyCustomersPoliciesResolve(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{customer}/policies:resolve', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleChromePolicyVersionsV1ResolveRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPoliciesResolveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1ResolveResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1ResolveResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific policy schema for a customer by its resource name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetResponse
     */
	public function chromepolicyCustomersPolicySchemasGet(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1PolicySchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1PolicySchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of policy schemas that match a specified filter value for a given customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListResponse
     */
	public function chromepolicyCustomersPolicySchemasList(
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/policySchemas', \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChromepolicyCustomersPolicySchemasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleChromePolicyVersionsV1ListPolicySchemasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleChromePolicyVersionsV1ListPolicySchemasResponse', 'json');
            }
        }

        return $response;
    }
}