"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import option as shared_option
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FieldTypeDefinitionFieldTypeEnum(str, Enum):
    r"""Controls how the field appears in HubSpot."""
    BOOLEANCHECKBOX = 'booleancheckbox'
    CHECKBOX = 'checkbox'
    DATE = 'date'
    FILE = 'file'
    NUMBER = 'number'
    PHONENUMBER = 'phonenumber'
    RADIO = 'radio'
    SELECT = 'select'
    TEXT = 'text'
    TEXTAREA = 'textarea'
    CALCULATION_EQUATION = 'calculation_equation'
    CALCULATION_ROLLUP = 'calculation_rollup'
    CALCULATION_SCORE = 'calculation_score'
    CALCULATION_READ_TIME = 'calculation_read_time'
    UNKNOWN = 'unknown'

class FieldTypeDefinitionReferencedObjectTypeEnum(str, Enum):
    r"""This can be set to `OWNER` if the field should contain a HubSpot owner value."""
    CONTACT = 'CONTACT'
    COMPANY = 'COMPANY'
    DEAL = 'DEAL'
    ENGAGEMENT = 'ENGAGEMENT'
    TICKET = 'TICKET'
    OWNER = 'OWNER'
    PRODUCT = 'PRODUCT'
    LINE_ITEM = 'LINE_ITEM'
    BET_DELIVERABLE_SERVICE = 'BET_DELIVERABLE_SERVICE'
    CONTENT = 'CONTENT'
    CONVERSATION = 'CONVERSATION'
    BET_ALERT = 'BET_ALERT'
    PORTAL = 'PORTAL'
    QUOTE = 'QUOTE'
    FORM_SUBMISSION_INBOUNDDB = 'FORM_SUBMISSION_INBOUNDDB'
    QUOTA = 'QUOTA'
    UNSUBSCRIBE = 'UNSUBSCRIBE'
    COMMUNICATION = 'COMMUNICATION'
    FEEDBACK_SUBMISSION = 'FEEDBACK_SUBMISSION'
    ATTRIBUTION = 'ATTRIBUTION'
    SALESFORCE_SYNC_ERROR = 'SALESFORCE_SYNC_ERROR'
    RESTORABLE_CRM_OBJECT = 'RESTORABLE_CRM_OBJECT'
    HUB = 'HUB'
    LANDING_PAGE = 'LANDING_PAGE'
    PRODUCT_OR_FOLDER = 'PRODUCT_OR_FOLDER'
    TASK = 'TASK'
    FORM = 'FORM'
    MARKETING_EMAIL = 'MARKETING_EMAIL'
    AD_ACCOUNT = 'AD_ACCOUNT'
    AD_CAMPAIGN = 'AD_CAMPAIGN'
    AD_GROUP = 'AD_GROUP'
    AD = 'AD'
    KEYWORD = 'KEYWORD'
    CAMPAIGN = 'CAMPAIGN'
    SOCIAL_CHANNEL = 'SOCIAL_CHANNEL'
    SOCIAL_POST = 'SOCIAL_POST'
    SITE_PAGE = 'SITE_PAGE'
    BLOG_POST = 'BLOG_POST'
    IMPORT = 'IMPORT'
    EXPORT = 'EXPORT'
    CTA = 'CTA'
    TASK_TEMPLATE = 'TASK_TEMPLATE'
    AUTOMATION_PLATFORM_FLOW = 'AUTOMATION_PLATFORM_FLOW'
    OBJECT_LIST = 'OBJECT_LIST'
    NOTE = 'NOTE'
    MEETING_EVENT = 'MEETING_EVENT'
    CALL = 'CALL'
    EMAIL = 'EMAIL'
    PUBLISHING_TASK = 'PUBLISHING_TASK'
    CONVERSATION_SESSION = 'CONVERSATION_SESSION'
    CONTACT_CREATE_ATTRIBUTION = 'CONTACT_CREATE_ATTRIBUTION'
    INVOICE = 'INVOICE'
    MARKETING_EVENT = 'MARKETING_EVENT'
    CONVERSATION_INBOX = 'CONVERSATION_INBOX'
    CHATFLOW = 'CHATFLOW'
    MEDIA_BRIDGE = 'MEDIA_BRIDGE'
    SEQUENCE = 'SEQUENCE'
    SEQUENCE_STEP = 'SEQUENCE_STEP'
    FORECAST = 'FORECAST'
    SNIPPET = 'SNIPPET'
    TEMPLATE = 'TEMPLATE'
    UNKNOWN = 'UNKNOWN'

class FieldTypeDefinitionTypeEnum(str, Enum):
    r"""The data type of the field."""
    STRING = 'string'
    NUMBER = 'number'
    BOOL = 'bool'
    DATETIME = 'datetime'
    ENUMERATION = 'enumeration'
    DATE = 'date'
    PHONE_NUMBER = 'phone_number'
    CURRENCY_NUMBER = 'currency_number'
    JSON = 'json'
    OBJECT_COORDINATES = 'object_coordinates'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldTypeDefinition:
    r"""The data type expected by an input field."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The input field name."""  
    options: list[shared_option.Option] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""A list of valid options for the field value."""  
    type: FieldTypeDefinitionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The data type of the field."""  
    field_type: Optional[FieldTypeDefinitionFieldTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldType'), 'exclude': lambda f: f is None }})
    r"""Controls how the field appears in HubSpot."""  
    options_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optionsUrl'), 'exclude': lambda f: f is None }})
    r"""A URL that will accept HTTPS requests when the valid options for the field are fetched."""  
    referenced_object_type: Optional[FieldTypeDefinitionReferencedObjectTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referencedObjectType'), 'exclude': lambda f: f is None }})
    r"""This can be set to `OWNER` if the field should contain a HubSpot owner value."""  
    