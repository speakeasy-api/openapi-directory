<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OrganizationSecurityPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts an association for the specified security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationResponse
     */
	public function computeOrganizationSecurityPoliciesAddAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/addAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyAssociation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a rule into a security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleResponse
     */
	public function computeOrganizationSecurityPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copies rules to the specified security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesResponse
     */
	public function computeOrganizationSecurityPoliciesCopyRules(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/copyRules', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesCopyRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteResponse
     */
	public function computeOrganizationSecurityPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all of the ordered rules present in a single specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetResponse
     */
	public function computeOrganizationSecurityPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an association with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationResponse
     */
	public function computeOrganizationSecurityPoliciesGetAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/getAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyAssociation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyAssociation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleResponse
     */
	public function computeOrganizationSecurityPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertResponse
     */
	public function computeOrganizationSecurityPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the policies that have been configured for the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListResponse
     */
	public function computeOrganizationSecurityPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists associations of a specified target, i.e., organization or folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsResponse
     */
	public function computeOrganizationSecurityPoliciesListAssociations(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/listAssociations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesListAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationSecurityPoliciesListAssociationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrganizationSecurityPoliciesListAssociationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves the specified security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveResponse
     */
	public function computeOrganizationSecurityPoliciesMove(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/move', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchResponse
     */
	public function computeOrganizationSecurityPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleResponse
     */
	public function computeOrganizationSecurityPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an association for the specified security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationResponse
     */
	public function computeOrganizationSecurityPoliciesRemoveAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/removeAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleResponse
     */
	public function computeOrganizationSecurityPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/securityPolicies/{securityPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeOrganizationSecurityPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}