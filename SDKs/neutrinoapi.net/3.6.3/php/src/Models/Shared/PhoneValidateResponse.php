<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class PhoneValidateResponse
{
    /**
     * The phone number country
     * 
     * @var string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $country;
    
    /**
     * The phone number country as an ISO 2-letter country code
     * 
     * @var string $countryCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode;
    
    /**
     * The phone number country as an ISO 3-letter country code
     * 
     * @var string $countryCode3
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode3;
    
    /**
     * ISO 4217 currency code associated with the country
     * 
     * @var string $currencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currencyCode;
    
    /**
     * The international calling code
     * 
     * @var string $internationalCallingCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('international-calling-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $internationalCallingCode;
    
    /**
     * The number represented in full international format (E.164)
     * 
     * @var string $internationalNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('international-number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $internationalNumber;
    
    /**
     * True if this is a mobile number. If the number type is unknown this value will be false
     * 
     * @var bool $isMobile
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-mobile')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isMobile;
    
    /**
     * The number represented in local dialing format
     * 
     * @var string $localNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('local-number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $localNumber;
    
    /**
     * The phone number location. Could be the city, region or country depending on the type of number
     * 
     * @var string $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $location;
    
    /**
     * The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
     * 
     * @var string $prefixNetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('prefix-network')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $prefixNetwork;
    
    /**
     * The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>
     * 
     * @var string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $type;
    
    /**
     * Is this a valid phone number
     * 
     * @var bool $valid
     */
	#[\JMS\Serializer\Annotation\SerializedName('valid')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $valid;
    
	public function __construct()
	{
		$this->country = "";
		$this->countryCode = "";
		$this->countryCode3 = "";
		$this->currencyCode = "";
		$this->internationalCallingCode = "";
		$this->internationalNumber = "";
		$this->isMobile = false;
		$this->localNumber = "";
		$this->location = "";
		$this->prefixNetwork = "";
		$this->type = "";
		$this->valid = false;
	}
}
