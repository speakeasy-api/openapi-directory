"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettingsMulticastRequestBodyDefaultSettings:
    r"""Default multicast setting for entire network. IGMP snooping and Flood unknown multicast traffic settings are enabled by default."""
    
    flood_unknown_multicast_traffic_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodUnknownMulticastTrafficEnabled'), 'exclude': lambda f: f is None }})
    r"""Flood unknown multicast traffic setting for entire network"""  
    igmp_snooping_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('igmpSnoopingEnabled'), 'exclude': lambda f: f is None }})
    r"""IGMP snooping setting for entire network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettingsMulticastRequestBodyOverrides:
    
    flood_unknown_multicast_traffic_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodUnknownMulticastTrafficEnabled') }})
    r"""Flood unknown multicast traffic setting for switches, switch stacks or switch profiles"""  
    igmp_snooping_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('igmpSnoopingEnabled') }})
    r"""IGMP snooping setting for switches, switch stacks or switch profiles"""  
    stacks: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stacks'), 'exclude': lambda f: f is None }})
    r"""List of switch stack ids for non-template network"""  
    switches: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switches'), 'exclude': lambda f: f is None }})
    r"""List of switch serials for non-template network"""  
    switch_profiles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchProfiles'), 'exclude': lambda f: f is None }})
    r"""List of switch profiles ids for template network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettingsMulticastRequestBody:
    
    default_settings: Optional[UpdateNetworkSwitchSettingsMulticastRequestBodyDefaultSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSettings'), 'exclude': lambda f: f is None }})
    r"""Default multicast setting for entire network. IGMP snooping and Flood unknown multicast traffic settings are enabled by default."""  
    overrides: Optional[list[UpdateNetworkSwitchSettingsMulticastRequestBodyOverrides]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrides'), 'exclude': lambda f: f is None }})
    r"""Array of paired switches/stacks/profiles and corresponding multicast settings. An empty array will clear the multicast settings."""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchSettingsMulticastRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchSettingsMulticastRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchSettingsMulticastResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_settings_multicast_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    