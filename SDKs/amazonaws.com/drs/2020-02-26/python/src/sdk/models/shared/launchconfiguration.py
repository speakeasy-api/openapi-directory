"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import launchdisposition_enum as shared_launchdisposition_enum
from ..shared import licensing as shared_licensing
from ..shared import targetinstancetyperightsizingmethod_enum as shared_targetinstancetyperightsizingmethod_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LaunchConfiguration:
    r"""Success"""
    
    copy_private_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyPrivateIp'), 'exclude': lambda f: f is None }})  
    copy_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyTags'), 'exclude': lambda f: f is None }})  
    ec2_launch_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2LaunchTemplateID'), 'exclude': lambda f: f is None }})  
    launch_disposition: Optional[shared_launchdisposition_enum.LaunchDispositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchDisposition'), 'exclude': lambda f: f is None }})  
    licensing: Optional[shared_licensing.Licensing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensing'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    source_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID'), 'exclude': lambda f: f is None }})  
    target_instance_type_right_sizing_method: Optional[shared_targetinstancetyperightsizingmethod_enum.TargetInstanceTypeRightSizingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetInstanceTypeRightSizingMethod'), 'exclude': lambda f: f is None }})  
    