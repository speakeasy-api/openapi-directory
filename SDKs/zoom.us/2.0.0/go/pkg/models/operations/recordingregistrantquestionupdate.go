// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RecordingRegistrantQuestionUpdateSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum - The type of registration question and answers.
type RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnumShort    RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnumSingle   RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "single"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnumMultiple RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "multiple"
)

func (e *RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single":
		fallthrough
	case "multiple":
		*e = RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestions struct {
	// Answer choices for the question. Can not be used with Short answer type.
	Answers []string `json:"answers,omitempty"`
	// State whether registrants are required to answer custom questions or not.
	Required *bool `json:"required,omitempty"`
	// Title of the question.
	Title *string `json:"title,omitempty"`
	// The type of registration question and answers.
	Type *RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum - Field name.
type RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum string

const (
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumLastName              RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "last_name"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumAddress               RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "address"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumCity                  RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "city"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumCountry               RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "country"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumZip                   RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumState                 RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "state"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumPhone                 RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumIndustry              RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumOrg                   RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "org"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumJobTitle              RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnumComments              RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "last_name":
		fallthrough
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestions struct {
	// Field name.
	FieldName *RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// State whether the field is required to be answered by the registrant or not.
	Required *bool `json:"required,omitempty"`
}

// RecordingRegistrantQuestionUpdateRecordingRegistrantQuestions - Recording Registrant Questions
type RecordingRegistrantQuestionUpdateRecordingRegistrantQuestions struct {
	// Array of Registrant Custom Questions
	CustomQuestions []RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty" multipartForm:"name=custom_questions,json"`
	// Array of Registrant Questions
	Questions []RecordingRegistrantQuestionUpdateRecordingRegistrantQuestionsQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
}

type RecordingRegistrantQuestionUpdateRequest struct {
	// Recording Registrant Questions
	RequestBody RecordingRegistrantQuestionUpdateRecordingRegistrantQuestions `request:"mediaType=application/json"`
	// To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
	//
	// To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type RecordingRegistrantQuestionUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
