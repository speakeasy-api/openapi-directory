/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Most Docker Hub API endpoints require you to authenticate using your
 *
 * @remarks
 * Docker credentials before using them.
 *
 * Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending
 * on your plan (Free, Pro, or Team) and your account's permissions.
 *
 * To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
 *
 */
export class Authentication {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Second factor authentication.
   *
   * @remarks
   * When user has 2FA enabled, this is the second call to perform after
   * `/v2/users/login` call.
   *
   * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.
   *
   * The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
   *
   * Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
   *
   */
  postUsers2FALogin(
    req: shared.Users2FALoginRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsers2FALoginResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Users2FALoginRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/users/2fa-login";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsers2FALoginResponse =
        new operations.PostUsers2FALoginResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsersLoginSuccessResponse = utils.objectToClass(
              httpRes?.data,
              shared.PostUsersLoginSuccessResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsers2FALoginErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.PostUsers2FALoginErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an authentication token
   *
   * @remarks
   * Creates and returns a bearer token in JWT format that you can use to
   * authenticate with Docker Hub APIs.
   *
   * The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
   *
   * Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
   *
   */
  postUsersLogin(
    req: shared.UsersLoginRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersLoginResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UsersLoginRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/users/login";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersLoginResponse =
        new operations.PostUsersLoginResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsersLoginSuccessResponse = utils.objectToClass(
              httpRes?.data,
              shared.PostUsersLoginSuccessResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsersLoginErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.PostUsersLoginErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
