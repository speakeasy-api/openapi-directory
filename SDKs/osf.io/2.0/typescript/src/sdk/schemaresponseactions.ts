/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
 *
 * @remarks
 *
 * Schema Response Actions have a  few different triggers to cause state transitions:
 *
 *   - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
 *   this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
 *   Registration to either approved or reject the Schema Response.
 *
 *   - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
 *   makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
 *   are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
 *   will transition the Schema Response to `pending_moderation`.
 *
 *   - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
 *   state. This trigger is only valid for Schema Responses that are associated with a Registration that has
 *   Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 *
 *   - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
 *   `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
 *
 *   - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
 *   `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
 *   that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 */
export class SchemaResponseActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * A Schema Response Action from a Schema Response
   *
   * @remarks
   * Retrieves a Schema Response Action by it's ID.
   * #### Returns
   * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
   * #### Errors
   * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
   */
  getSchemaResponsesSchemaResponseIdActionsSchemaResponseActionId(
    req: operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse =
        new operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new Schema Response Action
   *
   * @remarks
   * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.
   * #### Returns
   * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
   * #### Errors
   * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
   */
  postSchemaResponsesSchemaResponseIdActions(
    req: operations.PostSchemaResponsesSchemaResponseIdActionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSchemaResponsesSchemaResponseIdActionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSchemaResponsesSchemaResponseIdActionsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/schema_responses/{schema_response_id}/actions/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSchemaResponsesSchemaResponseIdActionsResponse =
        new operations.PostSchemaResponsesSchemaResponseIdActionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of Schema Response Actions for a Schema Response
   *
   * @remarks
   * This retrieves a paginated list of all Schema Response Actions created for a Schema Response.
   * #### Returns
   * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
   * #### Errors
   * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
   */
  schemaResponseActionRead(
    req: operations.SchemaResponseActionReadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SchemaResponseActionReadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SchemaResponseActionReadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/schema_responses/{schema_response_id}/actions/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SchemaResponseActionReadResponse =
        new operations.SchemaResponseActionReadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
