"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionRuleInfo = exports.TransactionRuleInfoTypeEnum = exports.TransactionRuleInfoStatusEnum = exports.TransactionRuleInfoProcessingTypesEnum = exports.TransactionRuleInfoEntryModesEnum = void 0;
var utils_1 = require("../../../internal/utils");
var amount_1 = require("./amount");
var transactionruleinterval_1 = require("./transactionruleinterval");
var class_transformer_1 = require("class-transformer");
var TransactionRuleInfoEntryModesEnum;
(function (TransactionRuleInfoEntryModesEnum) {
    TransactionRuleInfoEntryModesEnum["Barcode"] = "barcode";
    TransactionRuleInfoEntryModesEnum["Chip"] = "chip";
    TransactionRuleInfoEntryModesEnum["Cof"] = "cof";
    TransactionRuleInfoEntryModesEnum["Contactless"] = "contactless";
    TransactionRuleInfoEntryModesEnum["Magstripe"] = "magstripe";
    TransactionRuleInfoEntryModesEnum["Manual"] = "manual";
    TransactionRuleInfoEntryModesEnum["Ocr"] = "ocr";
    TransactionRuleInfoEntryModesEnum["Server"] = "server";
    TransactionRuleInfoEntryModesEnum["Unknown"] = "unknown";
})(TransactionRuleInfoEntryModesEnum = exports.TransactionRuleInfoEntryModesEnum || (exports.TransactionRuleInfoEntryModesEnum = {}));
var TransactionRuleInfoProcessingTypesEnum;
(function (TransactionRuleInfoProcessingTypesEnum) {
    TransactionRuleInfoProcessingTypesEnum["AtmWithdraw"] = "atmWithdraw";
    TransactionRuleInfoProcessingTypesEnum["BalanceInquiry"] = "balanceInquiry";
    TransactionRuleInfoProcessingTypesEnum["Ecommerce"] = "ecommerce";
    TransactionRuleInfoProcessingTypesEnum["Moto"] = "moto";
    TransactionRuleInfoProcessingTypesEnum["Pos"] = "pos";
    TransactionRuleInfoProcessingTypesEnum["Recurring"] = "recurring";
    TransactionRuleInfoProcessingTypesEnum["Token"] = "token";
    TransactionRuleInfoProcessingTypesEnum["Unknown"] = "unknown";
})(TransactionRuleInfoProcessingTypesEnum = exports.TransactionRuleInfoProcessingTypesEnum || (exports.TransactionRuleInfoProcessingTypesEnum = {}));
/**
 * The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
 *
 * @remarks
 * with an **active** status.
 *
 * Possible values: **active**, **inactive**.
 */
var TransactionRuleInfoStatusEnum;
(function (TransactionRuleInfoStatusEnum) {
    TransactionRuleInfoStatusEnum["Active"] = "active";
    TransactionRuleInfoStatusEnum["Inactive"] = "inactive";
})(TransactionRuleInfoStatusEnum = exports.TransactionRuleInfoStatusEnum || (exports.TransactionRuleInfoStatusEnum = {}));
/**
 * Type of conditions provided in the rule.
 *
 * @remarks
 *
 * Possible values:
 *   * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
 *  * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
 *  * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
 *  * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
 *
 */
var TransactionRuleInfoTypeEnum;
(function (TransactionRuleInfoTypeEnum) {
    TransactionRuleInfoTypeEnum["AllowList"] = "allowList";
    TransactionRuleInfoTypeEnum["BlockList"] = "blockList";
    TransactionRuleInfoTypeEnum["MaxUsage"] = "maxUsage";
    TransactionRuleInfoTypeEnum["Velocity"] = "velocity";
})(TransactionRuleInfoTypeEnum = exports.TransactionRuleInfoTypeEnum || (exports.TransactionRuleInfoTypeEnum = {}));
var TransactionRuleInfo = /** @class */ (function (_super) {
    __extends(TransactionRuleInfo, _super);
    function TransactionRuleInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        (0, class_transformer_1.Type)(function () { return amount_1.Amount; }),
        __metadata("design:type", amount_1.Amount)
    ], TransactionRuleInfo.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "balancePlatformId" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "balancePlatformId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "countries" }),
        __metadata("design:type", Array)
    ], TransactionRuleInfo.prototype, "countries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endDate" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "endDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "entryModes" }),
        __metadata("design:type", Array)
    ], TransactionRuleInfo.prototype, "entryModes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interval" }),
        (0, class_transformer_1.Type)(function () { return transactionruleinterval_1.TransactionRuleInterval; }),
        __metadata("design:type", transactionruleinterval_1.TransactionRuleInterval)
    ], TransactionRuleInfo.prototype, "interval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxTransactions" }),
        __metadata("design:type", Number)
    ], TransactionRuleInfo.prototype, "maxTransactions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mccs" }),
        __metadata("design:type", Array)
    ], TransactionRuleInfo.prototype, "mccs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentInstrumentGroupId" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "paymentInstrumentGroupId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentInstrumentId" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "paymentInstrumentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "processingTypes" }),
        __metadata("design:type", Array)
    ], TransactionRuleInfo.prototype, "processingTypes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reference" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "reference", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startDate" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "startDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], TransactionRuleInfo.prototype, "type", void 0);
    return TransactionRuleInfo;
}(utils_1.SpeakeasyBase));
exports.TransactionRuleInfo = TransactionRuleInfo;
