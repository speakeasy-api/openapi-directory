/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Company Search methods
 */
export class V1Company {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves a list of companies from the KYC API company index
   *
   * @remarks
   * KYC API company index lookup by country and mixed parameters. This function requires a country code then a mixture of name
   */
  companyAlternativeSearch(
    req: operations.CompanyAlternativeSearchRequest,
    security: operations.CompanyAlternativeSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyAlternativeSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyAlternativeSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/search/{country}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyAlternativeSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyAlternativeSearchResponse =
        new operations.CompanyAlternativeSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyAlternativeSearch200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyAlternativeSearch200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyAlternativeSearch200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyAlternativeSearchDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyAlternativeSearchDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves announcement data
   *
   * @remarks
   * Request full announcement data identified by announcement id
   */
  companyAnnouncement(
    req: operations.CompanyAnnouncementRequest,
    security: operations.CompanyAnnouncementSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyAnnouncementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyAnnouncementRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/announcement/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyAnnouncementSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyAnnouncementResponse =
        new operations.CompanyAnnouncementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyAnnouncement200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyAnnouncement200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyAnnouncement200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyAnnouncementDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyAnnouncementDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of stock exchange listings
   *
   * @remarks
   * Lookup stock exchange listings identified by an ISIN (International Securities Identification Number) number. Search is forwarded to a provider.
   */
  companyDeepsearchISIN(
    req: operations.CompanyDeepsearchISINRequestBody,
    security: operations.CompanyDeepsearchISINSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyDeepsearchISINResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyDeepsearchISINRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/company/deepsearch/isin";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyDeepsearchISINSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyDeepsearchISINResponse =
        new operations.CompanyDeepsearchISINResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchISIN200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyDeepsearchISIN200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchIsin200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchISINDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchISINDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of companies
   *
   * @remarks
   * Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
   */
  companyDeepsearchLEI(
    req: operations.CompanyDeepsearchLEIRequest,
    security: operations.CompanyDeepsearchLEISecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyDeepsearchLEIResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyDeepsearchLEIRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/deepsearch/lei/{number}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyDeepsearchLEISecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyDeepsearchLEIResponse =
        new operations.CompanyDeepsearchLEIResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchLEI200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchLei200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchLEIDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchLEIDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of companies from the official business register
   *
   * @remarks
   * Search for companies with a certain name. Search is forwarded to the respective business register of the country.
   */
  companyDeepsearchName(
    req: operations.CompanyDeepsearchNameRequest,
    security: operations.CompanyDeepsearchNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyDeepsearchNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyDeepsearchNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/deepsearch/name/{country}/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyDeepsearchNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyDeepsearchNameResponse =
        new operations.CompanyDeepsearchNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchName200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyDeepsearchName200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchName200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchNameDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchNameDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of companies from the official business register
   *
   * @remarks
   * Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
   */
  companyDeepsearchNumber(
    req: operations.CompanyDeepsearchNumberRequest,
    security: operations.CompanyDeepsearchNumberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyDeepsearchNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyDeepsearchNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/deepsearch/number/{country}/{number}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyDeepsearchNumberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyDeepsearchNumberResponse =
        new operations.CompanyDeepsearchNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchNumber200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyDeepsearchNumber200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchNumber200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyDeepsearchNumberDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyDeepsearchNumberDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves company announcements
   *
   * @remarks
   * Search announcements filed to the business register from a company identified by an id
   */
  companyIdAnnouncements(
    req: operations.CompanyIdAnnouncementsRequest,
    security: operations.CompanyIdAnnouncementsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyIdAnnouncementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyIdAnnouncementsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/{id}/announcements",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyIdAnnouncementsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyIdAnnouncementsResponse =
        new operations.CompanyIdAnnouncementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyIdAnnouncements200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyIdAnnouncements200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyIdAnnouncements200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyIdAnnouncementsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyIdAnnouncementsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves company details
   *
   * @remarks
   * Get company details by id. The level of details is defined by the dataset parameter
   */
  companyIdDataset(
    req: operations.CompanyIdDatasetRequest,
    security: operations.CompanyIdDatasetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyIdDatasetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyIdDatasetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/{id}/{dataset}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyIdDatasetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyIdDatasetResponse =
        new operations.CompanyIdDatasetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneapi1v11company1deepsearch1lei1Percent7BnumberPercent7DGetResponses200ContentApplication1jsonSchemaPropertiesCompany =
              utils.objectToClass(
                httpRes?.data,
                shared.Oneapi1v11company1deepsearch1lei1Percent7BnumberPercent7DGetResponses200ContentApplication1jsonSchemaPropertiesCompany
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyIdDatasetDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyIdDatasetDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves structured data extracted from a company document
   *
   * @remarks
   * Request company superdata identified by company id
   */
  companyIdSuper(
    req: operations.CompanyIdSuperRequest,
    security: operations.CompanyIdSuperSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyIdSuperResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyIdSuperRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/{id}/super/{country}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyIdSuperSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyIdSuperResponse =
        new operations.CompanyIdSuperResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyIdSuper200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyIdSuper200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.CompanyIdSuper200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyIdSuperDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyIdSuperDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get available ChangeTypes
   *
   * @remarks
   * Get current list of available ChangeTypes to subscribe to
   */
  companyMonitorChangeTypesList(
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyMonitorChangeTypesListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/company/monitoring/changeTypes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyMonitorChangeTypesListResponse =
        new operations.CompanyMonitorChangeTypesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorChangeTypesList200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorChangeTypesListDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorChangeTypesListDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get monitor status for specific company id
   *
   * @remarks
   * Query status of registered monitors for a specific company identified by a company id
   */
  companyMonitorId(
    req: operations.CompanyMonitorIdRequest,
    security: operations.CompanyMonitorIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyMonitorIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyMonitorIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/monitoring/list/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyMonitorIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyMonitorIdResponse =
        new operations.CompanyMonitorIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorId200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyMonitorId200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.CompanyMonitorId200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorIdDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorIdDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of registered monitors
   *
   * @remarks
   * Query list of all registered monitors for logged in user
   */
  companyMonitorList(
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyMonitorListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/company/monitoring/list";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyMonitorListResponse =
        new operations.CompanyMonitorListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorList200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyMonitorList200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorList200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorListDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorListDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Register a Company for monitoring
   *
   * @remarks
   * Add a company to your perpetual monitoring list and register a callback URL to get monitoring alerts.
   */
  companyMonitorRegister(
    req: operations.CompanyMonitorRegisterRequest,
    security: operations.CompanyMonitorRegisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyMonitorRegisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyMonitorRegisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/monitoring/register/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyMonitorRegisterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyMonitorRegisterResponse =
        new operations.CompanyMonitorRegisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorRegister200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorRegister200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorRegisterDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorRegisterDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivates an active notification
   *
   * @remarks
   * Deactivate a previously registered company monitor identified by the notifier id
   */
  companyMonitorUnregister(
    req: operations.CompanyMonitorUnregisterRequest,
    security: operations.CompanyMonitorUnregisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyMonitorUnregisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyMonitorUnregisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/monitoring/unregister/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyMonitorUnregisterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyMonitorUnregisterResponse =
        new operations.CompanyMonitorUnregisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyMonitorUnregisterDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyMonitorUnregisterDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of registered notifications
   *
   * @remarks
   * Query list of registered notifications for a specific company identified by a company id
   */
  companyNotificationId(
    req: operations.CompanyNotificationIdRequest,
    security: operations.CompanyNotificationIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyNotificationIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyNotificationIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/notification/list/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyNotificationIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyNotificationIdResponse =
        new operations.CompanyNotificationIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationId200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyNotificationId200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationId200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationIdDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationIdDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of registered notifications
   *
   * @remarks
   * Query list of registered callback URLs for logged in user
   */
  companyNotificationList(
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyNotificationListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/company/notification/list";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyNotificationListResponse =
        new operations.CompanyNotificationListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationList200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companyNotificationList200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationList200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationListDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationListDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new notification
   *
   * @remarks
   * Register a new callback URL to get notifications about companies.
   */
  companyNotificationRegister(
    req: operations.CompanyNotificationRegisterRequest,
    security: operations.CompanyNotificationRegisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyNotificationRegisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyNotificationRegisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/notification/register/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyNotificationRegisterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyNotificationRegisterResponse =
        new operations.CompanyNotificationRegisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationRegister200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationRegister200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationRegisterDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationRegisterDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unregister a company from Monitoring
   *
   * @remarks
   * Deactivate a previously registered company monitor identified by the notifier id
   */
  companyNotificationUnregister(
    req: operations.CompanyNotificationUnregisterRequest,
    security: operations.CompanyNotificationUnregisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanyNotificationUnregisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanyNotificationUnregisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/notification/unregister/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanyNotificationUnregisterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanyNotificationUnregisterResponse =
        new operations.CompanyNotificationUnregisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companyNotificationUnregisterDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanyNotificationUnregisterDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of companies from the KYC API company index
   *
   * @remarks
   * KYC API company index lookup for companies with a certain name in a country.
   */
  companySearchName(
    req: operations.CompanySearchNameRequest,
    security: operations.CompanySearchNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanySearchNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanySearchNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/search/name/{country}/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanySearchNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanySearchNameResponse =
        new operations.CompanySearchNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companySearchName200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companySearchName200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanySearchName200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companySearchNameDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanySearchNameDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of companies from the KYC API company index
   *
   * @remarks
   * KYC API company index lookup for companies with a certain register number in a country.
   */
  companySearchNumber(
    req: operations.CompanySearchNumberRequest,
    security: operations.CompanySearchNumberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompanySearchNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompanySearchNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/company/search/number/{country}/{number}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompanySearchNumberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompanySearchNumberResponse =
        new operations.CompanySearchNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companySearchNumber200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.companySearchNumber200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanySearchNumber200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.companySearchNumberDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompanySearchNumberDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
