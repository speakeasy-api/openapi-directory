"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import committeehistory as shared_committeehistory
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleA:
    
    amendment_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator'), 'exclude': lambda f: f is None }})  
    amendment_indicator_desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator_desc'), 'exclude': lambda f: f is None }})  
    back_reference_schedule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_reference_schedule_name'), 'exclude': lambda f: f is None }})  
    back_reference_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_reference_transaction_id'), 'exclude': lambda f: f is None }})  
    candidate_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_first_name'), 'exclude': lambda f: f is None }})  
    candidate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    candidate_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_last_name'), 'exclude': lambda f: f is None }})  
    candidate_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_middle_name'), 'exclude': lambda f: f is None }})  
    candidate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_name'), 'exclude': lambda f: f is None }})
    r"""Name of candidate running for office"""  
    candidate_office: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office'), 'exclude': lambda f: f is None }})  
    candidate_office_district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office_district'), 'exclude': lambda f: f is None }})
    r"""Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00."""  
    candidate_office_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office_full'), 'exclude': lambda f: f is None }})  
    candidate_office_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office_state'), 'exclude': lambda f: f is None }})  
    candidate_office_state_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_office_state_full'), 'exclude': lambda f: f is None }})  
    candidate_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_prefix'), 'exclude': lambda f: f is None }})  
    candidate_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_suffix'), 'exclude': lambda f: f is None }})  
    committee: Optional[shared_committeehistory.CommitteeHistory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee'), 'exclude': lambda f: f is None }})  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    conduit_committee_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_city'), 'exclude': lambda f: f is None }})  
    conduit_committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_id'), 'exclude': lambda f: f is None }})  
    conduit_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_name'), 'exclude': lambda f: f is None }})  
    conduit_committee_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_state'), 'exclude': lambda f: f is None }})  
    conduit_committee_street1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_street1'), 'exclude': lambda f: f is None }})  
    conduit_committee_street2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_street2'), 'exclude': lambda f: f is None }})  
    conduit_committee_zip: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conduit_committee_zip'), 'exclude': lambda f: f is None }})  
    contribution_receipt_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contribution_receipt_amount'), 'exclude': lambda f: f is None }})  
    contribution_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contribution_receipt_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    contributor: Optional[shared_committeehistory.CommitteeHistory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor'), 'exclude': lambda f: f is None }})  
    contributor_aggregate_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_aggregate_ytd'), 'exclude': lambda f: f is None }})  
    contributor_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_city'), 'exclude': lambda f: f is None }})
    r"""City of contributor"""  
    contributor_employer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_employer'), 'exclude': lambda f: f is None }})
    r"""Employer of contributor, filers need to make an effort to gather this information"""  
    contributor_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_first_name'), 'exclude': lambda f: f is None }})  
    contributor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_id'), 'exclude': lambda f: f is None }})
    r"""The FEC identifier should be represented here if the contributor is registered with the FEC."""  
    contributor_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_last_name'), 'exclude': lambda f: f is None }})  
    contributor_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_middle_name'), 'exclude': lambda f: f is None }})  
    contributor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_name'), 'exclude': lambda f: f is None }})
    r"""Name of contributor"""  
    contributor_occupation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_occupation'), 'exclude': lambda f: f is None }})
    r"""Occupation of contributor, filers need to make an effort to gather this information"""  
    contributor_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_prefix'), 'exclude': lambda f: f is None }})  
    contributor_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_state'), 'exclude': lambda f: f is None }})
    r"""State of contributor"""  
    contributor_street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_street_1'), 'exclude': lambda f: f is None }})  
    contributor_street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_street_2'), 'exclude': lambda f: f is None }})  
    contributor_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_suffix'), 'exclude': lambda f: f is None }})  
    contributor_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of contributor"""  
    donor_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('donor_committee_name'), 'exclude': lambda f: f is None }})  
    election_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_type'), 'exclude': lambda f: f is None }})  
    election_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_type_full'), 'exclude': lambda f: f is None }})  
    entity_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type'), 'exclude': lambda f: f is None }})  
    entity_type_desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type_desc'), 'exclude': lambda f: f is None }})  
    fec_election_type_desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_election_type_desc'), 'exclude': lambda f: f is None }})  
    fec_election_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_election_year'), 'exclude': lambda f: f is None }})  
    file_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_number'), 'exclude': lambda f: f is None }})  
    filing_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing_form'), 'exclude': lambda f: f is None }})  
    image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_number'), 'exclude': lambda f: f is None }})  
    increased_limit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('increased_limit'), 'exclude': lambda f: f is None }})  
    is_individual: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_individual'), 'exclude': lambda f: f is None }})  
    line_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_number'), 'exclude': lambda f: f is None }})  
    line_number_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_number_label'), 'exclude': lambda f: f is None }})  
    link_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_id'), 'exclude': lambda f: f is None }})  
    load_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    memo_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo_code'), 'exclude': lambda f: f is None }})  
    memo_code_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo_code_full'), 'exclude': lambda f: f is None }})  
    memo_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo_text'), 'exclude': lambda f: f is None }})  
    memoed_subtotal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoed_subtotal'), 'exclude': lambda f: f is None }})  
    national_committee_nonfederal_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('national_committee_nonfederal_account'), 'exclude': lambda f: f is None }})  
    original_sub_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_sub_id'), 'exclude': lambda f: f is None }})  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf_url'), 'exclude': lambda f: f is None }})  
    receipt_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_type'), 'exclude': lambda f: f is None }})  
    receipt_type_desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_type_desc'), 'exclude': lambda f: f is None }})  
    receipt_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_type_full'), 'exclude': lambda f: f is None }})  
    recipient_committee_designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_committee_designation'), 'exclude': lambda f: f is None }})  
    recipient_committee_org_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_committee_org_type'), 'exclude': lambda f: f is None }})  
    recipient_committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_committee_type'), 'exclude': lambda f: f is None }})  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_year'), 'exclude': lambda f: f is None }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    schedule_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_type'), 'exclude': lambda f: f is None }})  
    schedule_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_type_full'), 'exclude': lambda f: f is None }})  
    sub_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_id'), 'exclude': lambda f: f is None }})  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id'), 'exclude': lambda f: f is None }})  
    two_year_transaction_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('two_year_transaction_period'), 'exclude': lambda f: f is None }})
    r"""This is a two-year period that is derived from the year a transaction took place in the
    Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
    (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
    the two_year_transaction_period is named after the ending, even-numbered year. If we do not
    have the date  of the transaction, we fall back to using the report year (report_year in both
    tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
    specified, the results default to the most current cycle.
    """  
    unused_contbr_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unused_contbr_id'), 'exclude': lambda f: f is None }})  
    