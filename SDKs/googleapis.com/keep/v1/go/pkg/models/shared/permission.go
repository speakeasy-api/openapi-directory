// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PermissionRoleEnum - The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.
type PermissionRoleEnum string

const (
	PermissionRoleEnumRoleUnspecified PermissionRoleEnum = "ROLE_UNSPECIFIED"
	PermissionRoleEnumOwner           PermissionRoleEnum = "OWNER"
	PermissionRoleEnumWriter          PermissionRoleEnum = "WRITER"
)

func (e *PermissionRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ROLE_UNSPECIFIED":
		fallthrough
	case "OWNER":
		fallthrough
	case "WRITER":
		*e = PermissionRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionRoleEnum: %s", s)
	}
}

// PermissionInput - A single permission on the note. Associates a `member` with a `role`.
type PermissionInput struct {
	// The email associated with the member. If set on create, the `email` field in the `User` or `Group` message must either be empty or match this field. On read, may be unset if the member does not have an associated email.
	Email *string `json:"email,omitempty"`
	// Describes a single Google Family.
	Family map[string]interface{} `json:"family,omitempty"`
	// Describes a single Group.
	Group *Group `json:"group,omitempty"`
	// The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.
	Role *PermissionRoleEnum `json:"role,omitempty"`
	// Describes a single user.
	User *User `json:"user,omitempty"`
}

// Permission - A single permission on the note. Associates a `member` with a `role`.
type Permission struct {
	// Output only. Whether this member has been deleted. If the member is recovered, this value is set to false and the recovered member retains the role on the note.
	Deleted *bool `json:"deleted,omitempty"`
	// The email associated with the member. If set on create, the `email` field in the `User` or `Group` message must either be empty or match this field. On read, may be unset if the member does not have an associated email.
	Email *string `json:"email,omitempty"`
	// Describes a single Google Family.
	Family map[string]interface{} `json:"family,omitempty"`
	// Describes a single Group.
	Group *Group `json:"group,omitempty"`
	// Output only. The resource name.
	Name *string `json:"name,omitempty"`
	// The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.
	Role *PermissionRoleEnum `json:"role,omitempty"`
	// Describes a single user.
	User *User `json:"user,omitempty"`
}
