/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FeedConnection - success returns a FeedConnection object matching the id in response
 * https://developer.xero.com/documentation/bank-feeds-api/feed-connections
 */
public class FeedConnection {
    /**
     * Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public FeedConnection withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountName")
    public String accountName;

    public FeedConnection withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }
    
    /**
     * String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    public String accountNumber;

    public FeedConnection withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountToken")
    public String accountToken;

    public FeedConnection withAccountToken(String accountToken) {
        this.accountToken = accountToken;
        return this;
    }
    
    /**
     * High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    public FeedConnectionAccountTypeEnum accountType;

    public FeedConnection withAccountType(FeedConnectionAccountTypeEnum accountType) {
        this.accountType = accountType;
        return this;
    }
    
    /**
     * ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public CountryCodeEnum country;

    public FeedConnection withCountry(CountryCodeEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     * 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyCodeEnum currency;

    public FeedConnection withCurrency(CurrencyCodeEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public Error error;

    public FeedConnection withError(Error error) {
        this.error = error;
        return this;
    }
    
    /**
     * GUID used to identify the Account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public FeedConnection withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * the current status of the feed connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public FeedConnectionStatusEnum status;

    public FeedConnection withStatus(FeedConnectionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public FeedConnection(){}
}
