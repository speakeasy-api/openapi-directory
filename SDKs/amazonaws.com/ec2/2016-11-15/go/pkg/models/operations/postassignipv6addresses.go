// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTAssignIpv6AddressesActionEnum
type POSTAssignIpv6AddressesActionEnum string

const (
	POSTAssignIpv6AddressesActionEnumAssignIpv6Addresses POSTAssignIpv6AddressesActionEnum = "AssignIpv6Addresses"
)

func (e POSTAssignIpv6AddressesActionEnum) ToPointer() *POSTAssignIpv6AddressesActionEnum {
	return &e
}

func (e *POSTAssignIpv6AddressesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AssignIpv6Addresses":
		*e = POSTAssignIpv6AddressesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTAssignIpv6AddressesActionEnum: %v", v)
	}
}

// POSTAssignIpv6AddressesVersionEnum
type POSTAssignIpv6AddressesVersionEnum string

const (
	POSTAssignIpv6AddressesVersionEnumTwoThousandAndSixteen1115 POSTAssignIpv6AddressesVersionEnum = "2016-11-15"
)

func (e POSTAssignIpv6AddressesVersionEnum) ToPointer() *POSTAssignIpv6AddressesVersionEnum {
	return &e
}

func (e *POSTAssignIpv6AddressesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTAssignIpv6AddressesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTAssignIpv6AddressesVersionEnum: %v", v)
	}
}

type POSTAssignIpv6AddressesRequest struct {
	Action            POSTAssignIpv6AddressesActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                             `request:"mediaType=text/xml"`
	Version           POSTAssignIpv6AddressesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTAssignIpv6AddressesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
