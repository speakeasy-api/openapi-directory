// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetAuditEventsSecurity struct {
	Jwtsa string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetAuditEventsRequestBodyType string

const (
	GetAuditEventsRequestBodyTypeCursor      GetAuditEventsRequestBodyType = "Cursor"
	GetAuditEventsRequestBodyTypeResetCursor GetAuditEventsRequestBodyType = "ResetCursor"
)

type GetAuditEventsRequestBody struct {
	Cursor      *shared.Cursor
	ResetCursor *shared.ResetCursor

	Type GetAuditEventsRequestBodyType
}

func CreateGetAuditEventsRequestBodyCursor(cursor shared.Cursor) GetAuditEventsRequestBody {
	typ := GetAuditEventsRequestBodyTypeCursor

	return GetAuditEventsRequestBody{
		Cursor: &cursor,
		Type:   typ,
	}
}

func CreateGetAuditEventsRequestBodyResetCursor(resetCursor shared.ResetCursor) GetAuditEventsRequestBody {
	typ := GetAuditEventsRequestBodyTypeResetCursor

	return GetAuditEventsRequestBody{
		ResetCursor: &resetCursor,
		Type:        typ,
	}
}

func (u *GetAuditEventsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cursor := new(shared.Cursor)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cursor); err == nil {
		u.Cursor = cursor
		u.Type = GetAuditEventsRequestBodyTypeCursor
		return nil
	}

	resetCursor := new(shared.ResetCursor)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&resetCursor); err == nil {
		u.ResetCursor = resetCursor
		u.Type = GetAuditEventsRequestBodyTypeResetCursor
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAuditEventsRequestBody) MarshalJSON() ([]byte, error) {
	if u.Cursor != nil {
		return json.Marshal(u.Cursor)
	}

	if u.ResetCursor != nil {
		return json.Marshal(u.ResetCursor)
	}

	return nil, nil
}

// GetAuditEvents200ApplicationJSON - Audit events response object
type GetAuditEvents200ApplicationJSON struct {
	Items []shared.AuditEvent `json:"items,omitempty"`
}

type GetAuditEventsResponse struct {
	ContentType string
	// Unauthorized
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Audit events response object
	GetAuditEvents200ApplicationJSONObject *GetAuditEvents200ApplicationJSON
}
