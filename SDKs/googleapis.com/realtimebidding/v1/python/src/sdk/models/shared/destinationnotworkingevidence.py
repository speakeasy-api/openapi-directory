"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DestinationNotWorkingEvidenceDNSErrorEnum(str, Enum):
    r"""DNS lookup errors."""
    DNS_ERROR_UNSPECIFIED = 'DNS_ERROR_UNSPECIFIED'
    ERROR_DNS = 'ERROR_DNS'
    GOOGLE_CRAWLER_DNS_ISSUE = 'GOOGLE_CRAWLER_DNS_ISSUE'

class DestinationNotWorkingEvidenceInvalidPageEnum(str, Enum):
    r"""Page was crawled successfully, but was detected as either a page with no content or an error page."""
    INVALID_PAGE_UNSPECIFIED = 'INVALID_PAGE_UNSPECIFIED'
    EMPTY_OR_ERROR_PAGE = 'EMPTY_OR_ERROR_PAGE'

class DestinationNotWorkingEvidencePlatformEnum(str, Enum):
    r"""Platform of the non-working URL."""
    PLATFORM_UNSPECIFIED = 'PLATFORM_UNSPECIFIED'
    PERSONAL_COMPUTER = 'PERSONAL_COMPUTER'
    ANDROID = 'ANDROID'
    IOS = 'IOS'

class DestinationNotWorkingEvidenceRedirectionErrorEnum(str, Enum):
    r"""HTTP redirect chain error."""
    REDIRECTION_ERROR_UNSPECIFIED = 'REDIRECTION_ERROR_UNSPECIFIED'
    TOO_MANY_REDIRECTS = 'TOO_MANY_REDIRECTS'
    INVALID_REDIRECT = 'INVALID_REDIRECT'
    EMPTY_REDIRECT = 'EMPTY_REDIRECT'
    REDIRECT_ERROR_UNKNOWN = 'REDIRECT_ERROR_UNKNOWN'

class DestinationNotWorkingEvidenceURLRejectedEnum(str, Enum):
    r"""Rejected because of malformed URLs or invalid requests."""
    URL_REJECTED_UNSPECIFIED = 'URL_REJECTED_UNSPECIFIED'
    BAD_REQUEST = 'BAD_REQUEST'
    MALFORMED_URL = 'MALFORMED_URL'
    URL_REJECTED_UNKNOWN = 'URL_REJECTED_UNKNOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationNotWorkingEvidence:
    r"""Evidence of the creative's destination URL not functioning properly or having been incorrectly set up."""
    
    dns_error: Optional[DestinationNotWorkingEvidenceDNSErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsError'), 'exclude': lambda f: f is None }})
    r"""DNS lookup errors."""  
    expanded_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expandedUrl'), 'exclude': lambda f: f is None }})
    r"""The full non-working URL."""  
    http_error: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpError'), 'exclude': lambda f: f is None }})
    r"""HTTP error code (for example, 404 or 5xx)"""  
    invalid_page: Optional[DestinationNotWorkingEvidenceInvalidPageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidPage'), 'exclude': lambda f: f is None }})
    r"""Page was crawled successfully, but was detected as either a page with no content or an error page."""  
    last_check_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastCheckTime'), 'exclude': lambda f: f is None }})
    r"""Approximate time when the ad destination was last checked."""  
    platform: Optional[DestinationNotWorkingEvidencePlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""Platform of the non-working URL."""  
    redirection_error: Optional[DestinationNotWorkingEvidenceRedirectionErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectionError'), 'exclude': lambda f: f is None }})
    r"""HTTP redirect chain error."""  
    url_rejected: Optional[DestinationNotWorkingEvidenceURLRejectedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlRejected'), 'exclude': lambda f: f is None }})
    r"""Rejected because of malformed URLs or invalid requests."""  
    