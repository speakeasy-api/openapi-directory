"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import localtime as shared_localtime
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartDates:
    r"""Event's Start Dates"""
    
    date_tba: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTBA'), 'exclude': lambda f: f is None }})
    r"""Boolean flag to indicate whether or not the start date is TBA"""  
    date_tbd: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTBD'), 'exclude': lambda f: f is None }})
    r"""Boolean flag to indicate whether or not the start date is TBD"""  
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The event start datetime"""  
    local_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The event start date in local date"""  
    local_time: Optional[shared_localtime.LocalTime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localTime'), 'exclude': lambda f: f is None }})  
    no_specific_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noSpecificTime'), 'exclude': lambda f: f is None }})
    r"""Boolean flag to indicate whether or not the event has no specific time"""  
    time_tba: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeTBA'), 'exclude': lambda f: f is None }})
    r"""Boolean flag to indicate whether or not the start time is TBA"""  
    