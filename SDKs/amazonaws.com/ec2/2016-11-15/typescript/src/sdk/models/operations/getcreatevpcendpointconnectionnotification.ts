/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETCreateVpcEndpointConnectionNotificationActionEnum {
  CreateVpcEndpointConnectionNotification = "CreateVpcEndpointConnectionNotification",
}

export enum GETCreateVpcEndpointConnectionNotificationVersionEnum {
  TwoThousandAndSixteen1115 = "2016-11-15",
}

export class GETCreateVpcEndpointConnectionNotificationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETCreateVpcEndpointConnectionNotificationActionEnum;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ClientToken",
  })
  clientToken?: string;

  /**
   * The endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ConnectionEvents",
  })
  connectionEvents: string[];

  /**
   * The ARN of the SNS topic for the notifications.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ConnectionNotificationArn",
  })
  connectionNotificationArn: string;

  /**
   * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DryRun",
  })
  dryRun?: boolean;

  /**
   * The ID of the endpoint service.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ServiceId",
  })
  serviceId?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETCreateVpcEndpointConnectionNotificationVersionEnum;

  /**
   * The ID of the endpoint.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=VpcEndpointId",
  })
  vpcEndpointId?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETCreateVpcEndpointConnectionNotificationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
