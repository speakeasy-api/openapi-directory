"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import servicemeshstatusdetails as shared_servicemeshstatusdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServiceMeshDataPlaneManagementStateEnum(str, Enum):
    r"""Lifecycle status of data plane management."""
    LIFECYCLE_STATE_UNSPECIFIED = 'LIFECYCLE_STATE_UNSPECIFIED'
    DISABLED = 'DISABLED'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    PROVISIONING = 'PROVISIONING'
    ACTIVE = 'ACTIVE'
    STALLED = 'STALLED'
    NEEDS_ATTENTION = 'NEEDS_ATTENTION'
    DEGRADED = 'DEGRADED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceMeshDataPlaneManagement:
    r"""Status of data plane management. Only reported per-member."""
    
    details: Optional[list[shared_servicemeshstatusdetails.ServiceMeshStatusDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Explanation of the status."""  
    state: Optional[ServiceMeshDataPlaneManagementStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Lifecycle status of data plane management."""  
    