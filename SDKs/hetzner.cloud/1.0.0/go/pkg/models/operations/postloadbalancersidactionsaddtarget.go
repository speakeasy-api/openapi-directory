// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostLoadBalancersIDActionsAddTargetPathParams struct {
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostLoadBalancersIDActionsAddTargetAddTargetRequestIP - IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
type PostLoadBalancersIDActionsAddTargetAddTargetRequestIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// PostLoadBalancersIDActionsAddTargetAddTargetRequestLabelSelector - Configuration for label selector targets, required if type is `label_selector`
type PostLoadBalancersIDActionsAddTargetAddTargetRequestLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostLoadBalancersIDActionsAddTargetAddTargetRequestServer - Configuration for type Server, required if type is `server`
type PostLoadBalancersIDActionsAddTargetAddTargetRequestServer struct {
	// ID of the Server
	ID float64 `json:"id"`
}

// PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum - Type of the resource
type PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum string

const (
	PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnumServer        PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum = "server"
	PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnumLabelSelector PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum = "label_selector"
	PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnumIP            PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum = "ip"
)

func (e *PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsAddTargetAddTargetRequest struct {
	// IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
	IP *PostLoadBalancersIDActionsAddTargetAddTargetRequestIP `json:"ip,omitempty"`
	// Configuration for label selector targets, required if type is `label_selector`
	LabelSelector *PostLoadBalancersIDActionsAddTargetAddTargetRequestLabelSelector `json:"label_selector,omitempty"`
	// Configuration for type Server, required if type is `server`
	Server *PostLoadBalancersIDActionsAddTargetAddTargetRequestServer `json:"server,omitempty"`
	// Type of the resource
	Type PostLoadBalancersIDActionsAddTargetAddTargetRequestTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type PostLoadBalancersIDActionsAddTargetRequest struct {
	PathParams PostLoadBalancersIDActionsAddTargetPathParams
	Request    *PostLoadBalancersIDActionsAddTargetAddTargetRequest `request:"mediaType=application/json"`
}

// PostLoadBalancersIDActionsAddTargetActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostLoadBalancersIDActionsAddTargetActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostLoadBalancersIDActionsAddTargetActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum - Status of the Action
type PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum string

const (
	PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnumSuccess PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum = "success"
	PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnumRunning PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum = "running"
	PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnumError   PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum = "error"
)

func (e *PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsAddTargetActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostLoadBalancersIDActionsAddTargetActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostLoadBalancersIDActionsAddTargetActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostLoadBalancersIDActionsAddTargetActionResponseActionStatusEnum `json:"status"`
}

// PostLoadBalancersIDActionsAddTargetActionResponse - The `action` key contains the `add_target` Action
type PostLoadBalancersIDActionsAddTargetActionResponse struct {
	Action PostLoadBalancersIDActionsAddTargetActionResponseAction `json:"action"`
}

type PostLoadBalancersIDActionsAddTargetResponse struct {
	// The `action` key contains the `add_target` Action
	ActionResponse *PostLoadBalancersIDActionsAddTargetActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
