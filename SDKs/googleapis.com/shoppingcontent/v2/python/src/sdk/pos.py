"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_pos_custombatch(self, request: operations.ContentPosCustombatchRequest, security: operations.ContentPosCustombatchSecurity) -> operations.ContentPosCustombatchResponse:
        r"""Batches multiple POS-related calls in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pos/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pos_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentPosCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosCustomBatchResponse])
                res.pos_custom_batch_response = out

        return res

    def content_pos_delete(self, request: operations.ContentPosDeleteRequest, security: operations.ContentPosDeleteSecurity) -> operations.ContentPosDeleteResponse:
        r"""Deletes a store for the given merchant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosDeleteRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}', request)
        
        query_params = utils.get_query_params(operations.ContentPosDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_pos_get(self, request: operations.ContentPosGetRequest, security: operations.ContentPosGetSecurity) -> operations.ContentPosGetResponse:
        r"""Retrieves information about the given store."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosGetRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}', request)
        
        query_params = utils.get_query_params(operations.ContentPosGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosStore])
                res.pos_store = out

        return res

    def content_pos_insert(self, request: operations.ContentPosInsertRequest, security: operations.ContentPosInsertSecurity) -> operations.ContentPosInsertResponse:
        r"""Creates a store for the given merchant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosInsertRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/store', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pos_store", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentPosInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosStore])
                res.pos_store = out

        return res

    def content_pos_inventory(self, request: operations.ContentPosInventoryRequest, security: operations.ContentPosInventorySecurity) -> operations.ContentPosInventoryResponse:
        r"""Submit inventory for the given merchant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosInventoryRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/inventory', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pos_inventory_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentPosInventoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosInventoryResponse])
                res.pos_inventory_response = out

        return res

    def content_pos_list(self, request: operations.ContentPosListRequest, security: operations.ContentPosListSecurity) -> operations.ContentPosListResponse:
        r"""Lists the stores of the target merchant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosListRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/store', request)
        
        query_params = utils.get_query_params(operations.ContentPosListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosListResponse])
                res.pos_list_response = out

        return res

    def content_pos_sale(self, request: operations.ContentPosSaleRequest, security: operations.ContentPosSaleSecurity) -> operations.ContentPosSaleResponse:
        r"""Submit a sale event for the given merchant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentPosSaleRequest, base_url, '/{merchantId}/pos/{targetMerchantId}/sale', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pos_sale_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentPosSaleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentPosSaleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PosSaleResponse])
                res.pos_sale_response = out

        return res

    