/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class JobStatistics2 {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("biEngineStatistics")
    public BiEngineStatistics biEngineStatistics;
    public JobStatistics2 withBiEngineStatistics(BiEngineStatistics biEngineStatistics) {
        this.biEngineStatistics = biEngineStatistics;
        return this;
    }
    
    /**
     * [Output only] Billing tier for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingTier")
    public Integer billingTier;
    public JobStatistics2 withBillingTier(Integer billingTier) {
        this.billingTier = billingTier;
        return this;
    }
    
    /**
     * [Output only] Whether the query result was fetched from the query cache.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheHit")
    public Boolean cacheHit;
    public JobStatistics2 withCacheHit(Boolean cacheHit) {
        this.cacheHit = cacheHit;
        return this;
    }
    
    /**
     * [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlAffectedRowAccessPolicyCount")
    public String ddlAffectedRowAccessPolicyCount;
    public JobStatistics2 withDdlAffectedRowAccessPolicyCount(String ddlAffectedRowAccessPolicyCount) {
        this.ddlAffectedRowAccessPolicyCount = ddlAffectedRowAccessPolicyCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlDestinationTable")
    public TableReference ddlDestinationTable;
    public JobStatistics2 withDdlDestinationTable(TableReference ddlDestinationTable) {
        this.ddlDestinationTable = ddlDestinationTable;
        return this;
    }
    
    /**
     * The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlOperationPerformed")
    public String ddlOperationPerformed;
    public JobStatistics2 withDdlOperationPerformed(String ddlOperationPerformed) {
        this.ddlOperationPerformed = ddlOperationPerformed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlTargetDataset")
    public DatasetReference ddlTargetDataset;
    public JobStatistics2 withDdlTargetDataset(DatasetReference ddlTargetDataset) {
        this.ddlTargetDataset = ddlTargetDataset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlTargetRoutine")
    public RoutineReference ddlTargetRoutine;
    public JobStatistics2 withDdlTargetRoutine(RoutineReference ddlTargetRoutine) {
        this.ddlTargetRoutine = ddlTargetRoutine;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlTargetRowAccessPolicy")
    public RowAccessPolicyReference ddlTargetRowAccessPolicy;
    public JobStatistics2 withDdlTargetRowAccessPolicy(RowAccessPolicyReference ddlTargetRowAccessPolicy) {
        this.ddlTargetRowAccessPolicy = ddlTargetRowAccessPolicy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ddlTargetTable")
    public TableReference ddlTargetTable;
    public JobStatistics2 withDdlTargetTable(TableReference ddlTargetTable) {
        this.ddlTargetTable = ddlTargetTable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dmlStats")
    public DmlStatistics dmlStats;
    public JobStatistics2 withDmlStats(DmlStatistics dmlStats) {
        this.dmlStats = dmlStats;
        return this;
    }
    
    /**
     * [Output only] The original estimate of bytes processed for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedBytesProcessed")
    public String estimatedBytesProcessed;
    public JobStatistics2 withEstimatedBytesProcessed(String estimatedBytesProcessed) {
        this.estimatedBytesProcessed = estimatedBytesProcessed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mlStatistics")
    public MlStatistics mlStatistics;
    public JobStatistics2 withMlStatistics(MlStatistics mlStatistics) {
        this.mlStatistics = mlStatistics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelTraining")
    public BigQueryModelTraining modelTraining;
    public JobStatistics2 withModelTraining(BigQueryModelTraining modelTraining) {
        this.modelTraining = modelTraining;
        return this;
    }
    
    /**
     * [Output only, Beta] Deprecated; do not use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelTrainingCurrentIteration")
    public Integer modelTrainingCurrentIteration;
    public JobStatistics2 withModelTrainingCurrentIteration(Integer modelTrainingCurrentIteration) {
        this.modelTrainingCurrentIteration = modelTrainingCurrentIteration;
        return this;
    }
    
    /**
     * [Output only, Beta] Deprecated; do not use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelTrainingExpectedTotalIteration")
    public String modelTrainingExpectedTotalIteration;
    public JobStatistics2 withModelTrainingExpectedTotalIteration(String modelTrainingExpectedTotalIteration) {
        this.modelTrainingExpectedTotalIteration = modelTrainingExpectedTotalIteration;
        return this;
    }
    
    /**
     * [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numDmlAffectedRows")
    public String numDmlAffectedRows;
    public JobStatistics2 withNumDmlAffectedRows(String numDmlAffectedRows) {
        this.numDmlAffectedRows = numDmlAffectedRows;
        return this;
    }
    
    /**
     * [Output only] Describes execution plan for the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryPlan")
    public ExplainQueryStage[] queryPlan;
    public JobStatistics2 withQueryPlan(ExplainQueryStage[] queryPlan) {
        this.queryPlan = queryPlan;
        return this;
    }
    
    /**
     * [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referencedRoutines")
    public RoutineReference[] referencedRoutines;
    public JobStatistics2 withReferencedRoutines(RoutineReference[] referencedRoutines) {
        this.referencedRoutines = referencedRoutines;
        return this;
    }
    
    /**
     * [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referencedTables")
    public TableReference[] referencedTables;
    public JobStatistics2 withReferencedTables(TableReference[] referencedTables) {
        this.referencedTables = referencedTables;
        return this;
    }
    
    /**
     * [Output only] Job resource usage breakdown by reservation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservationUsage")
    public JobStatistics2ReservationUsage[] reservationUsage;
    public JobStatistics2 withReservationUsage(JobStatistics2ReservationUsage[] reservationUsage) {
        this.reservationUsage = reservationUsage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public TableSchema schema;
    public JobStatistics2 withSchema(TableSchema schema) {
        this.schema = schema;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchStatistics")
    public SearchStatistics searchStatistics;
    public JobStatistics2 withSearchStatistics(SearchStatistics searchStatistics) {
        this.searchStatistics = searchStatistics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkStatistics")
    public SparkStatistics sparkStatistics;
    public JobStatistics2 withSparkStatistics(SparkStatistics sparkStatistics) {
        this.sparkStatistics = sparkStatistics;
        return this;
    }
    
    /**
     * The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statementType")
    public String statementType;
    public JobStatistics2 withStatementType(String statementType) {
        this.statementType = statementType;
        return this;
    }
    
    /**
     * [Output only] [Beta] Describes a timeline of job execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeline")
    public QueryTimelineSample[] timeline;
    public JobStatistics2 withTimeline(QueryTimelineSample[] timeline) {
        this.timeline = timeline;
        return this;
    }
    
    /**
     * [Output only] Total bytes billed for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesBilled")
    public String totalBytesBilled;
    public JobStatistics2 withTotalBytesBilled(String totalBytesBilled) {
        this.totalBytesBilled = totalBytesBilled;
        return this;
    }
    
    /**
     * [Output only] Total bytes processed for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesProcessed")
    public String totalBytesProcessed;
    public JobStatistics2 withTotalBytesProcessed(String totalBytesProcessed) {
        this.totalBytesProcessed = totalBytesProcessed;
        return this;
    }
    
    /**
     * [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesProcessedAccuracy")
    public String totalBytesProcessedAccuracy;
    public JobStatistics2 withTotalBytesProcessedAccuracy(String totalBytesProcessedAccuracy) {
        this.totalBytesProcessedAccuracy = totalBytesProcessedAccuracy;
        return this;
    }
    
    /**
     * [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPartitionsProcessed")
    public String totalPartitionsProcessed;
    public JobStatistics2 withTotalPartitionsProcessed(String totalPartitionsProcessed) {
        this.totalPartitionsProcessed = totalPartitionsProcessed;
        return this;
    }
    
    /**
     * [Output only] Slot-milliseconds for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlotMs")
    public String totalSlotMs;
    public JobStatistics2 withTotalSlotMs(String totalSlotMs) {
        this.totalSlotMs = totalSlotMs;
        return this;
    }
    
    /**
     * [Output-only] Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferredBytes")
    public String transferredBytes;
    public JobStatistics2 withTransferredBytes(String transferredBytes) {
        this.transferredBytes = transferredBytes;
        return this;
    }
    
    /**
     * Standard SQL only: list of undeclared query parameters detected during a dry run validation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("undeclaredQueryParameters")
    public QueryParameter[] undeclaredQueryParameters;
    public JobStatistics2 withUndeclaredQueryParameters(QueryParameter[] undeclaredQueryParameters) {
        this.undeclaredQueryParameters = undeclaredQueryParameters;
        return this;
    }
    
}
