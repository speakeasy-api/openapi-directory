<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Word 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Fetches audio metadata for a word.
     * 
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAudioRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAudioResponse
     */
	public function getAudio(
        \OpenAPI\OpenAPI\Models\Operations\GetAudioRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAudioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/audio', \OpenAPI\OpenAPI\Models\Operations\GetAudioRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAudioRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAudioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Return definitions for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsResponse
     */
	public function getDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/definitions', \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDefinitionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetches etymology data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesResponse
     */
	public function getEtymologies(
        \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/etymologies', \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEtymologiesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEtymologiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns examples for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse
     */
	public function getExamples(
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/examples', \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns syllable information for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHyphenationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHyphenationResponse
     */
	public function getHyphenation(
        \OpenAPI\OpenAPI\Models\Operations\GetHyphenationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHyphenationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/hyphenation', \OpenAPI\OpenAPI\Models\Operations\GetHyphenationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetHyphenationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHyphenationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetches bi-gram phrases for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhrasesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhrasesResponse
     */
	public function getPhrases(
        \OpenAPI\OpenAPI\Models\Operations\GetPhrasesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhrasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/phrases', \OpenAPI\OpenAPI\Models\Operations\GetPhrasesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhrasesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhrasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Given a word as a string, returns relationships from the Word Graph
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsResponse
     */
	public function getRelatedWords(
        \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/relatedWords', \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRelatedWordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the Scrabble score for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreResponse
     */
	public function getScrabbleScore(
        \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/scrabbleScore', \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScrabbleScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns text pronunciations for a given word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsResponse
     */
	public function getTextPronunciations(
        \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/pronunciations', \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextPronunciationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a top example for a word
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTopExampleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTopExampleResponse
     */
	public function getTopExample(
        \OpenAPI\OpenAPI\Models\Operations\GetTopExampleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTopExampleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/topExample', \OpenAPI\OpenAPI\Models\Operations\GetTopExampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTopExampleRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTopExampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns word usage over time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyResponse
     */
	public function getWordFrequency(
        \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/word.json/{word}/frequency', \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWordFrequencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}