"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flaterrorresponse as shared_flaterrorresponse
from ..shared import scorecomment as shared_scorecomment
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetScoreCommentsSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetScoreCommentsDirectionEnum(str, Enum):
    r"""Sort direction"""
    ASC = 'asc'
    DESC = 'desc'

class GetScoreCommentsSortEnum(str, Enum):
    r"""Sort"""
    DATE = 'date'

class GetScoreCommentsTypeEnum(str, Enum):
    r"""Filter the comments by type"""
    DOCUMENT = 'document'
    INLINE = 'inline'


@dataclasses.dataclass
class GetScoreCommentsRequest:
    
    score: str = dataclasses.field(metadata={'path_param': { 'field_name': 'score', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`)."""  
    direction: Optional[GetScoreCommentsDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Sort direction"""  
    sharing_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sharingKey', 'style': 'form', 'explode': True }})
    r"""This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document."""  
    sort: Optional[GetScoreCommentsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort"""  
    type: Optional[GetScoreCommentsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Filter the comments by type"""  
    

@dataclasses.dataclass
class GetScoreCommentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flat_error_response: Optional[shared_flaterrorresponse.FlatErrorResponse] = dataclasses.field(default=None)
    r"""Account overquota"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    score_comments: Optional[list[shared_scorecomment.ScoreComment]] = dataclasses.field(default=None)
    r"""The comments of the score"""  
    