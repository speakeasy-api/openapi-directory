"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .consolidated_safe_scoring import ConsolidatedSafeScoring
from .consolidated_statistics import ConsolidatedStatistics
from .three_for_back_end_optional_ import ThreeForBackEndOptional
from .two_1_user_statistics_optional_ import Two1UserStatisticsOptional
from .two_2_user_trips_optional_ import Two2UserTripsOptional
from .two_4_user_safe_scoring_optional_ import Two4UserSafeScoringOptional
from .two_for_mobile_app_optional_ import TwoForMobileAppOptional

SERVERS = [
    "https://api.telematicssdk.com",
    "https://mobilesdk.telematicssdk.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Introduction
    We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.
    
    * [CONTACT US](https://telematicssdk.com)
    * [SANDBOX](https://userdatahub.com)
    * [DEV.PORTAL](https://docs.telematicssdk.com)
    * [DEMO APP](https://raxeltelematics.com/telematics-app)
    
    
    # Overview
    Datamotion provides telematics infrastructure for mobile applications. 
    
    Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application
    
    There are 3 groups of methods:
    * 1 - user management
    * 2 - statistics for mobile app
    * 3 - statistics for back-end(s)
    
    in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns)
    # Possible architecture
    
    There are three common schemes that are used by our clients. These schemes can be combined
    * Collect, Process, Store (required: 1&2)
    * Collect, Process (required: 1& sns)
    * Collect (required 1&sns)
    
    
    ## Collect, Process, Store
    ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)
    
    ## Collect, Process
    ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)
    
    ## Collect
    ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)
    
    ***
    ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)
    
    # Common use-cases:
    * Safe and efficient driving
    * Usage-based insurance
    * Safe driving assessment
    * Driver assessment
    * Trip log
    * Geo-analysis
    * Accident monitoring
    * Driving engagements
    * Location based services
    * Realtime Tracking
    and beyond
    
    # How to start
    * Register a [SANDBOX ACCOUNT](https://userdatahub.com)
    * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials) 
    * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)
    
    # Authentication
    To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials
    
    Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
    """
    two_for_mobile_app_optional: TwoForMobileAppOptional
    r"""# Introduction
    These API services designed to use it inside a mobile applications to get statistics data and services directly from telematics platform and show it in the app
    
    # Scheme
    ![API statistics](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/API+statistics+integration.png)
    """
    two_1_user_statistics_optional: Two1UserStatisticsOptional
    two_2_user_trips_optional: Two2UserTripsOptional
    two_4_user_safe_scoring_optional: Two4UserSafeScoringOptional
    three_for_back_end_optional: ThreeForBackEndOptional
    r"""# Introduction
    The methods are required to have an admin authentication.
    
    # How to get admin credentials
    Please create admin credentials in [Datahub](https://userdatahub.com) and use method v1/Auth/Login (1. User management)
    
    # Scheme
    ![Admin statistics integration](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/admin+statistics+integration.png)
    """
    consolidated_safe_scoring: ConsolidatedSafeScoring
    consolidated_statistics: ConsolidatedStatistics

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.two_for_mobile_app_optional = TwoForMobileAppOptional(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.two_1_user_statistics_optional = Two1UserStatisticsOptional(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.two_2_user_trips_optional = Two2UserTripsOptional(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.two_4_user_safe_scoring_optional = Two4UserSafeScoringOptional(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.three_for_back_end_optional = ThreeForBackEndOptional(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.consolidated_safe_scoring = ConsolidatedSafeScoring(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.consolidated_statistics = ConsolidatedStatistics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    