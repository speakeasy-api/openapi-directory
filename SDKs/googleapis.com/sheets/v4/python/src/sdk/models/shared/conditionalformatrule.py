"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import booleanrule as shared_booleanrule
from ..shared import gradientrule as shared_gradientrule
from ..shared import gridrange as shared_gridrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConditionalFormatRule:
    r"""A rule describing a conditional format."""
    
    boolean_rule: Optional[shared_booleanrule.BooleanRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booleanRule'), 'exclude': lambda f: f is None }})
    r"""A rule that may or may not match, depending on the condition."""  
    gradient_rule: Optional[shared_gradientrule.GradientRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradientRule'), 'exclude': lambda f: f is None }})
    r"""A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points."""  
    ranges: Optional[list[shared_gridrange.GridRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ranges'), 'exclude': lambda f: f is None }})
    r"""The ranges that are formatted if the condition is true. All the ranges must be on the same grid."""  
    