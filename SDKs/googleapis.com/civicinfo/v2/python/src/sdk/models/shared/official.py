"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channel as shared_channel
from ..shared import geocodingsummary as shared_geocodingsummary
from ..shared import simpleaddresstype as shared_simpleaddresstype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Official:
    r"""Information about a person holding an elected office."""
    
    address: Optional[list[shared_simpleaddresstype.SimpleAddressType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Addresses at which to contact the official."""  
    channels: Optional[list[shared_channel.Channel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels'), 'exclude': lambda f: f is None }})
    r"""A list of known (social) media channels for this official."""  
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""The direct email addresses for the official."""  
    geocoding_summaries: Optional[list[shared_geocodingsummary.GeocodingSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geocodingSummaries'), 'exclude': lambda f: f is None }})
    r"""Detailed summary about the official's address's geocoding"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The official's name."""  
    party: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party'), 'exclude': lambda f: f is None }})
    r"""The full name of the party the official belongs to."""  
    phones: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phones'), 'exclude': lambda f: f is None }})
    r"""The official's public contact phone numbers."""  
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoUrl'), 'exclude': lambda f: f is None }})
    r"""A URL for a photo of the official."""  
    urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urls'), 'exclude': lambda f: f is None }})
    r"""The official's public website URLs."""  
    