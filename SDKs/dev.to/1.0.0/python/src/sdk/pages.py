"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pages:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_pages_id_(self, request: operations.DeleteAPIPagesIDRequest) -> operations.DeleteAPIPagesIDResponse:
        r"""remove a page
        This endpoint allows the client to delete a single Page object, specified by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIPagesIDRequest, base_url, '/api/pages/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIPagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code in [401, 422]:
            pass

        return res

    def get_api_pages(self) -> operations.GetAPIPagesResponse:
        r"""show details for all pages
        This endpoint allows the client to retrieve details for all Page objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pages'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIPagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Page]])
                res.pages = out

        return res

    def get_api_pages_id_(self, request: operations.GetAPIPagesIDRequest) -> operations.GetAPIPagesIDResponse:
        r"""show details for a page
        This endpoint allows the client to retrieve details for a single Page object, specified by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIPagesIDRequest, base_url, '/api/pages/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIPagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out

        return res

    def post_api_pages(self, request: operations.PostAPIPagesRequestBody) -> operations.PostAPIPagesResponse:
        r"""pages
        This endpoint allows the client to create a new page.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pages'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIPagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_pages_id_(self, request: operations.PutAPIPagesIDRequest) -> operations.PutAPIPagesIDResponse:
        r"""update details for a page
        This endpoint allows the client to retrieve details for a single Page object, specified by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIPagesIDRequest, base_url, '/api/pages/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "page", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIPagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code in [401, 422]:
            pass

        return res

    