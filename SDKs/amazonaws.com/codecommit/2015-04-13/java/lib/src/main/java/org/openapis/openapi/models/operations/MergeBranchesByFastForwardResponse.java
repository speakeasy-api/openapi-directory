/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class MergeBranchesByFastForwardResponse {
    /**
     * BranchDoesNotExistException
     */
    
    public Object branchDoesNotExistException;

    public MergeBranchesByFastForwardResponse withBranchDoesNotExistException(Object branchDoesNotExistException) {
        this.branchDoesNotExistException = branchDoesNotExistException;
        return this;
    }
    
    /**
     * BranchNameIsTagNameException
     */
    
    public Object branchNameIsTagNameException;

    public MergeBranchesByFastForwardResponse withBranchNameIsTagNameException(Object branchNameIsTagNameException) {
        this.branchNameIsTagNameException = branchNameIsTagNameException;
        return this;
    }
    
    /**
     * BranchNameRequiredException
     */
    
    public Object branchNameRequiredException;

    public MergeBranchesByFastForwardResponse withBranchNameRequiredException(Object branchNameRequiredException) {
        this.branchNameRequiredException = branchNameRequiredException;
        return this;
    }
    
    /**
     * CommitDoesNotExistException
     */
    
    public Object commitDoesNotExistException;

    public MergeBranchesByFastForwardResponse withCommitDoesNotExistException(Object commitDoesNotExistException) {
        this.commitDoesNotExistException = commitDoesNotExistException;
        return this;
    }
    
    /**
     * CommitRequiredException
     */
    
    public Object commitRequiredException;

    public MergeBranchesByFastForwardResponse withCommitRequiredException(Object commitRequiredException) {
        this.commitRequiredException = commitRequiredException;
        return this;
    }
    
    /**
     * ConcurrentReferenceUpdateException
     */
    
    public Object concurrentReferenceUpdateException;

    public MergeBranchesByFastForwardResponse withConcurrentReferenceUpdateException(Object concurrentReferenceUpdateException) {
        this.concurrentReferenceUpdateException = concurrentReferenceUpdateException;
        return this;
    }
    
    
    public String contentType;

    public MergeBranchesByFastForwardResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public MergeBranchesByFastForwardResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public MergeBranchesByFastForwardResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public MergeBranchesByFastForwardResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public MergeBranchesByFastForwardResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public MergeBranchesByFastForwardResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * InvalidBranchNameException
     */
    
    public Object invalidBranchNameException;

    public MergeBranchesByFastForwardResponse withInvalidBranchNameException(Object invalidBranchNameException) {
        this.invalidBranchNameException = invalidBranchNameException;
        return this;
    }
    
    /**
     * InvalidCommitException
     */
    
    public Object invalidCommitException;

    public MergeBranchesByFastForwardResponse withInvalidCommitException(Object invalidCommitException) {
        this.invalidCommitException = invalidCommitException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public MergeBranchesByFastForwardResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * InvalidTargetBranchException
     */
    
    public Object invalidTargetBranchException;

    public MergeBranchesByFastForwardResponse withInvalidTargetBranchException(Object invalidTargetBranchException) {
        this.invalidTargetBranchException = invalidTargetBranchException;
        return this;
    }
    
    /**
     * ManualMergeRequiredException
     */
    
    public Object manualMergeRequiredException;

    public MergeBranchesByFastForwardResponse withManualMergeRequiredException(Object manualMergeRequiredException) {
        this.manualMergeRequiredException = manualMergeRequiredException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.MergeBranchesByFastForwardOutput mergeBranchesByFastForwardOutput;

    public MergeBranchesByFastForwardResponse withMergeBranchesByFastForwardOutput(org.openapis.openapi.models.shared.MergeBranchesByFastForwardOutput mergeBranchesByFastForwardOutput) {
        this.mergeBranchesByFastForwardOutput = mergeBranchesByFastForwardOutput;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public MergeBranchesByFastForwardResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public MergeBranchesByFastForwardResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    
    public Integer statusCode;

    public MergeBranchesByFastForwardResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public MergeBranchesByFastForwardResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * TipsDivergenceExceededException
     */
    
    public Object tipsDivergenceExceededException;

    public MergeBranchesByFastForwardResponse withTipsDivergenceExceededException(Object tipsDivergenceExceededException) {
        this.tipsDivergenceExceededException = tipsDivergenceExceededException;
        return this;
    }
    
    public MergeBranchesByFastForwardResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
