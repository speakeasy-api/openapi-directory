// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReactionsCreateForCommitCommentRequestBodyContentEnum - The [reaction type](https://docs.github.com/enterprise-server@3.2/rest/reference/reactions#reaction-types) to add to the commit comment.
type ReactionsCreateForCommitCommentRequestBodyContentEnum string

const (
	ReactionsCreateForCommitCommentRequestBodyContentEnumPlus1    ReactionsCreateForCommitCommentRequestBodyContentEnum = "+1"
	ReactionsCreateForCommitCommentRequestBodyContentEnumMinus1   ReactionsCreateForCommitCommentRequestBodyContentEnum = "-1"
	ReactionsCreateForCommitCommentRequestBodyContentEnumLaugh    ReactionsCreateForCommitCommentRequestBodyContentEnum = "laugh"
	ReactionsCreateForCommitCommentRequestBodyContentEnumConfused ReactionsCreateForCommitCommentRequestBodyContentEnum = "confused"
	ReactionsCreateForCommitCommentRequestBodyContentEnumHeart    ReactionsCreateForCommitCommentRequestBodyContentEnum = "heart"
	ReactionsCreateForCommitCommentRequestBodyContentEnumHooray   ReactionsCreateForCommitCommentRequestBodyContentEnum = "hooray"
	ReactionsCreateForCommitCommentRequestBodyContentEnumRocket   ReactionsCreateForCommitCommentRequestBodyContentEnum = "rocket"
	ReactionsCreateForCommitCommentRequestBodyContentEnumEyes     ReactionsCreateForCommitCommentRequestBodyContentEnum = "eyes"
)

func (e *ReactionsCreateForCommitCommentRequestBodyContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "+1":
		fallthrough
	case "-1":
		fallthrough
	case "laugh":
		fallthrough
	case "confused":
		fallthrough
	case "heart":
		fallthrough
	case "hooray":
		fallthrough
	case "rocket":
		fallthrough
	case "eyes":
		*e = ReactionsCreateForCommitCommentRequestBodyContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReactionsCreateForCommitCommentRequestBodyContentEnum: %s", s)
	}
}

type ReactionsCreateForCommitCommentRequestBody struct {
	// The [reaction type](https://docs.github.com/enterprise-server@3.2/rest/reference/reactions#reaction-types) to add to the commit comment.
	Content ReactionsCreateForCommitCommentRequestBodyContentEnum `json:"content"`
}

type ReactionsCreateForCommitCommentRequest struct {
	RequestBody ReactionsCreateForCommitCommentRequestBody `request:"mediaType=application/json"`
	// The unique identifier of the comment.
	CommentID int64 `pathParam:"style=simple,explode=false,name=comment_id"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReactionsCreateForCommitComment415ApplicationJSON - Preview header missing
type ReactionsCreateForCommitComment415ApplicationJSON struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

type ReactionsCreateForCommitCommentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Reaction exists
	Reaction *shared.Reaction
	// Preview header missing
	ReactionsCreateForCommitComment415ApplicationJSONObject *ReactionsCreateForCommitComment415ApplicationJSON
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
