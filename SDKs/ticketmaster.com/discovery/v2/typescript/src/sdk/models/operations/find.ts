/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Yes if you want to display licensed content
 */
export enum FindIncludeLicensedContentEnum {
  Yes = "yes",
  No = " no",
}

/**
 * yes, to include spell check suggestions in the response.
 */
export enum FindIncludeSpellcheckEnum {
  Yes = "yes",
  No = " no",
}

/**
 * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
 */
export enum FindIncludeTestEnum {
  Yes = "yes",
  No = " no",
  Only = " only",
}

/**
 * Filter entities by its source name
 */
export enum FindSourceEnum {
  Ticketmaster = "ticketmaster",
  Universe = " universe",
  Frontgate = " frontgate",
  Tmr = " tmr",
}

export class FindRequest extends SpeakeasyBase {
  /**
   * Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=classificationId",
  })
  classificationId?: any[];

  /**
   * Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=classificationName",
  })
  classificationName?: any[];

  /**
   * Filter entities by its id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=id" })
  id?: string;

  /**
   * Yes if you want to display licensed content
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeLicensedContent",
  })
  includeLicensedContent?: FindIncludeLicensedContentEnum;

  /**
   * yes, to include spell check suggestions in the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeSpellcheck",
  })
  includeSpellcheck?: FindIncludeSpellcheckEnum;

  /**
   * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeTest",
  })
  includeTest?: FindIncludeTestEnum;

  /**
   * Keyword to search on
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=keyword",
  })
  keyword?: string;

  /**
   * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locale",
  })
  locale?: string;

  /**
   * Page number
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: string;

  /**
   * Page size of the response
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: string;

  /**
   * Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Filter entities by its source name
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: FindSourceEnum;
}

export class FindResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
