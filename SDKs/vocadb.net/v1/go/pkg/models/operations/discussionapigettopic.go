// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DiscussionAPIGetTopicPathParams struct {
	TopicID int `pathParam:"style=simple,explode=false,name=topicId"`
}

// DiscussionAPIGetTopicFieldsEnum
type DiscussionAPIGetTopicFieldsEnum string

const (
	DiscussionAPIGetTopicFieldsEnumNone         DiscussionAPIGetTopicFieldsEnum = "None"
	DiscussionAPIGetTopicFieldsEnumComments     DiscussionAPIGetTopicFieldsEnum = "Comments"
	DiscussionAPIGetTopicFieldsEnumCommentCount DiscussionAPIGetTopicFieldsEnum = "CommentCount"
	DiscussionAPIGetTopicFieldsEnumContent      DiscussionAPIGetTopicFieldsEnum = "Content"
	DiscussionAPIGetTopicFieldsEnumLastComment  DiscussionAPIGetTopicFieldsEnum = "LastComment"
	DiscussionAPIGetTopicFieldsEnumAll          DiscussionAPIGetTopicFieldsEnum = "All"
)

func (e *DiscussionAPIGetTopicFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Comments":
		fallthrough
	case "CommentCount":
		fallthrough
	case "Content":
		fallthrough
	case "LastComment":
		fallthrough
	case "All":
		*e = DiscussionAPIGetTopicFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscussionAPIGetTopicFieldsEnum: %s", s)
	}
}

type DiscussionAPIGetTopicQueryParams struct {
	Fields *DiscussionAPIGetTopicFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
}

type DiscussionAPIGetTopicRequest struct {
	PathParams  DiscussionAPIGetTopicPathParams
	QueryParams DiscussionAPIGetTopicQueryParams
}

type DiscussionAPIGetTopicResponse struct {
	Body        []byte
	ContentType string
	// OK
	DiscussionTopicContract *shared.DiscussionTopicContract
	StatusCode              int
	RawResponse             *http.Response
}
