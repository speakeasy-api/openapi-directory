// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SeriesAttributesStatusEnum - The status of the series
type SeriesAttributesStatusEnum string

const (
	SeriesAttributesStatusEnumActive   SeriesAttributesStatusEnum = "active"
	SeriesAttributesStatusEnumInactive SeriesAttributesStatusEnum = "inactive"
)

func (e *SeriesAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = SeriesAttributesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SeriesAttributesStatusEnum: %s", s)
	}
}

// SeriesAttributesTypeEnum - The type of the series
type SeriesAttributesTypeEnum string

const (
	SeriesAttributesTypeEnumSeries SeriesAttributesTypeEnum = "Series"
)

func (e *SeriesAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Series":
		*e = SeriesAttributesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SeriesAttributesTypeEnum: %s", s)
	}
}

type SeriesAttributes struct {
	// The Amazon Music subscription URL
	AmazonSubscriptionURL *string `json:"amazon_subscription_url,omitempty"`
	// The CastBox subscription URL
	CastboxSubscriptionURL *string `json:"castbox_subscription_url,omitempty"`
	// This will be replaced by the relationship `cover_image` in a future update.<br/>
	// The image ID of the cover art for this series. The `/images` endpoint provideds details to the image.
	//
	CoverImageID *string    `json:"cover_image_id,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	// The description of the series eventually in HTML format
	Description *string `json:"description,omitempty"`
	// Determines whether `description` is in HTML format or plain.
	DescriptionIsHTML *bool `json:"description_is_html,omitempty"`
	// The description with all HTML markup removed. If the description does not contain markup
	// this is identitcal to `description`.
	//
	DescriptionPlain *string `json:"description_plain,omitempty"`
	// The URL of the series on Facebook
	FacebookURL *string `json:"facebook_url,omitempty"`
	// The Google subscription URL
	GoogleSubscriptionURL *string `json:"google_subscription_url,omitempty"`
	// The iHeartRadio subscription URL
	IheartSubscriptionURL *string `json:"iheart_subscription_url,omitempty"`
	// The URL of the series on Instagram
	InstagramURL *string `json:"instagram_url,omitempty"`
	// If `null` or `true`, the ART19 web player will render an iTunes subscription badge
	ItunesSubscriptionBadgeEnabled *bool `json:"itunes_subscription_badge_enabled,omitempty"`
	// The Apple iTunes subscription URL
	ItunesSubscriptionURL *string `json:"itunes_subscription_url,omitempty"`
	// The URL of the series on LinkedIn
	LinkedinURL *string `json:"linkedin_url,omitempty"`
	// The Pocket Casts subscription URL
	PocketCastsSubscriptionURL *string `json:"pocket_casts_subscription_url,omitempty"`
	// The URL of the RSS feed
	PodcastSubscriptionURL *string `json:"podcast_subscription_url,omitempty"`
	// If this is `true`, a public web page for this series is available under
	// `https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.
	// This public page provides details about the series as well as descriptive links to all its
	// episodes. If this is `false`, no such public page is available.
	//
	PublicPageEnabled *bool `json:"public_page_enabled,omitempty"`
	// If present, this is the preferred title for the series in the RSS Feed
	PublicTitle *string `json:"public_title,omitempty"`
	// The RadioPublic subscription URL
	RadioPublicSubscriptionURL *string `json:"radio_public_subscription_url,omitempty"`
	// The author responsible for the RSS feed
	RssAuthor *string `json:"rss_author,omitempty"`
	// The copyright disclaimer for the contents of the show, appearing after a Â© symbol, e.g. `2020 ART19, Inc.`
	RssCopyright *string `json:"rss_copyright,omitempty"`
	// The pubic point of contact for the show
	RssEmail *string `json:"rss_email,omitempty"`
	// The name of the contact for the show
	RssOwner *string `json:"rss_owner,omitempty"`
	// This slug is unique over all series and networks system wide and is used to access the series' feed
	// as well as its eventually enabled public page on ART19.
	//
	Slug *string `json:"slug,omitempty"`
	// The title of the series modified for sorting. This converts all characters to
	// lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
	//
	SortTitle *string `json:"sort_title,omitempty"`
	// If `null` or `true`, the ART19 web player will render a Spotify subscription badge
	SpotifySubscriptionBadgeEnabled *bool `json:"spotify_subscription_badge_enabled,omitempty"`
	// The Spotify subscription URL
	SpotifySubscriptionURL *string `json:"spotify_subscription_url,omitempty"`
	// The status of the series
	Status *SeriesAttributesStatusEnum `json:"status,omitempty"`
	// If `null` or `true`, the ART19 web player will render a Stitcher subscription badge
	StitcherSubscriptionBadgeEnabled *bool `json:"stitcher_subscription_badge_enabled,omitempty"`
	// The Stitcher subscription URL
	StitcherSubscriptionURL *string `json:"stitcher_subscription_url,omitempty"`
	// The title of the series
	Title *string `json:"title,omitempty"`
	// The URL of the series on Tumblr
	TumblrURL *string `json:"tumblr_url,omitempty"`
	// The TuneIn subscription URL
	TuneInSubscriptionURL *string `json:"tune_in_subscription_url,omitempty"`
	// The URL of the series on Twitter
	TwitterURL *string `json:"twitter_url,omitempty"`
	// The type of the series
	Type      *SeriesAttributesTypeEnum `json:"type,omitempty"`
	UpdatedAt *time.Time                `json:"updated_at,omitempty"`
	// The custom website URL for the series
	WebsiteURL *string `json:"website_url,omitempty"`
}

type SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

// SeriesRelationshipsCoverImage - The cover image for the series
type SeriesRelationshipsCoverImage struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsTheCoverImageForTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsTheNetworkTheSeriesBelongsTo struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsAListOfSeasonsInTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationshipsAListOfTagsAssociatedWithTheSeries struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type SeriesRelationships struct {
	ClassificationInclusions *SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries `json:"classification_inclusions,omitempty"`
	// The cover image for the series
	CoverImage *SeriesRelationshipsCoverImage                                               `json:"cover_image,omitempty"`
	Credits    *SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries                   `json:"credits,omitempty"`
	Episodes   *SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile `json:"episodes,omitempty"`
	Images     *SeriesRelationshipsTheCoverImageForTheSeries                                `json:"images,omitempty"`
	Network    *SeriesRelationshipsTheNetworkTheSeriesBelongsTo                             `json:"network,omitempty"`
	Seasons    *SeriesRelationshipsAListOfSeasonsInTheSeries                                `json:"seasons,omitempty"`
	Taggings   *SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries                `json:"taggings,omitempty"`
	Tags       *SeriesRelationshipsAListOfTagsAssociatedWithTheSeries                       `json:"tags,omitempty"`
}

type Series struct {
	Attributes    *SeriesAttributes    `json:"attributes,omitempty"`
	ID            *string              `json:"id,omitempty"`
	Relationships *SeriesRelationships `json:"relationships,omitempty"`
	// The type of resource. This is always `series`
	Type *string `json:"type,omitempty"`
}
