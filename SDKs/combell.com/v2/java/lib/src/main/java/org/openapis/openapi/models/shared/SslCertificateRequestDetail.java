/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SslCertificateRequestDetail - Success
 */
public class SslCertificateRequestDetail {
    /**
     * The type of the certificate:
     * &lt;ul&gt;&lt;li&gt;Standard: Certificate for a single domain.&lt;/li&gt;&lt;li&gt;Multi domain: Certificate for multiple (sub)domains belonging to the same owner.&lt;/li&gt;&lt;li&gt;Wildcard: Certificate for all the subdomains.&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate_type")
    public SslCertificateTypeEnum certificateType;

    public SslCertificateRequestDetail withCertificateType(SslCertificateTypeEnum certificateType) {
        this.certificateType = certificateType;
        return this;
    }
    
    /**
     * The common name of the certificate request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("common_name")
    public String commonName;

    public SslCertificateRequestDetail withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * The id of the certificate request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public SslCertificateRequestDetail withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * The order code of the certificate request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_code")
    public String orderCode;

    public SslCertificateRequestDetail withOrderCode(String orderCode) {
        this.orderCode = orderCode;
        return this;
    }
    
    /**
     * The list of all supported domains in the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject_alt_names")
    public SslSubjectAltName[] subjectAltNames;

    public SslCertificateRequestDetail withSubjectAltNames(SslSubjectAltName[] subjectAltNames) {
        this.subjectAltNames = subjectAltNames;
        return this;
    }
    
    /**
     * The validation level of the certificate:
     * &lt;ul&gt;&lt;li&gt;Domain validated: Basic check of the identity of the owner of the domain name.&lt;/li&gt;&lt;li&gt;Organization validated: Company details are verified and integrated in the certificate.&lt;/li&gt;&lt;li&gt;Extended validated: A thorough verification of your domain name and company details.&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation_level")
    public SslCertificateValidationLevelEnum validationLevel;

    public SslCertificateRequestDetail withValidationLevel(SslCertificateValidationLevelEnum validationLevel) {
        this.validationLevel = validationLevel;
        return this;
    }
    
    /**
     * The list of dns names to be validated with the information related to domain verification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validations")
    public SslCertificateRequestValidation[] validations;

    public SslCertificateRequestDetail withValidations(SslCertificateRequestValidation[] validations) {
        this.validations = validations;
        return this;
    }
    
    /**
     * The vendor of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor")
    public SslCertificateVendorEnum vendor;

    public SslCertificateRequestDetail withVendor(SslCertificateVendorEnum vendor) {
        this.vendor = vendor;
        return this;
    }
    
    public SslCertificateRequestDetail(){}
}
