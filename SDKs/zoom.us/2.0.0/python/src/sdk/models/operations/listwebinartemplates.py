"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListWebinarTemplatesRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListWebinarTemplates200ApplicationXMLTemplates:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the template. If you would like to use this template while scheduling a webinar, you can provide the value of this field in `template_id` field of [Create a Webinar](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the template."""  
    

@dataclasses.dataclass
class ListWebinarTemplates200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK** <br>
    List of existing templates returned.
    """
    
    templates: Optional[list[ListWebinarTemplates200ApplicationXMLTemplates]] = dataclasses.field(default=None)  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""Total number of records returned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWebinarTemplates200ApplicationJSONTemplates:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the template. If you would like to use this template while scheduling a webinar, you can provide the value of this field in `template_id` field of [Create a Webinar](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the template."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWebinarTemplates200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK** <br>
    List of existing templates returned.
    """
    
    templates: Optional[list[ListWebinarTemplates200ApplicationJSONTemplates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templates'), 'exclude': lambda f: f is None }})  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total number of records returned."""  
    

@dataclasses.dataclass
class ListWebinarTemplatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_webinar_templates_200_application_json_object: Optional[ListWebinarTemplates200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK** <br>
    List of existing templates returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    