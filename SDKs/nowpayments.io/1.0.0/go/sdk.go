// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.nowpayments.io",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - NOWPayments is a non-custodial cryptocurrency payment processing platform. Accept payments in a wide range of cryptos and get them instantly converted into a coin of your choice and sent to your wallet. Keeping it simple â€“ no excess.
//
// # Sandbox
// Before production usage, you can test our API using the Sandbox. Details can be found [here](https://documenter.getpostman.com/view/7907941/T1LSCRHC)
//
// # Authentication
// To use the NOWPayments API you should do the following:
//
//   - Sign up at [nowpayments.io](https://nowpayments.io)
//   - Specify your outcome wallet
//   - Generate an API key
//
// # Standard e-commerce flow for NOWPayments API:
// 1. API - Check API availability with the ["GET API status"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#9998079f-dcc8-4e07-9ac7-3d52f0fd733a) method. If required, check the list of available payment currencies with the ["GET available currencies"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#1c268f89-4fe7-471e-81b4-5a3153577b73) method.
// 2. UI - Ask a customer to select item/items for purchase to determine the total sum;
// 3. UI - Ask a customer to select payment currency
// 4. API - Get the minimum payment amount for the selected currency pair (payment currency to your Outcome Wallet currency) with the ["GET Minimum payment amount"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#41b02221-2d58-4fcf-9529-59d3763d6434) method;
// 5. API - Get the estimate of the total amount in crypto with ["GET Estimated price"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#7025cacf-7040-4c7b-a83f-f9ff0a22a822) and check that it is larger than the minimum payment amount from step 4;
// 6. API - Call the ["POST Create payment"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#5e37f3ad-0fa1-4292-af51-5c7f95730486) method to create a payment and get the deposit address (in our example, the generated BTC wallet address is returned from this method);
// 7. UI - Ask a customer to send the payment to the generated deposit address (in our example, user has to send BTC coins);
// 8. UI - A customer sends coins, NOWPayments processes and exchanges them (if required), and settles the payment to your Outcome Wallet (in our example, to your ETH address);
// 9. API - You can get the payment status either via our IPN callbacks or manually, using ["GET Payment Status"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#0b77a8e3-2344-4760-a0bd-247da067db6d) and display it to a customer so that they know when their payment has been processed.
// 10. API - you call the list of payments made to your account via the ["GET List of payments"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#c8399c0e-d798-4f01-83ae-ddaa6905c2da) method. Additionally, you can see all of this information in your [Account](https://account.nowpayments.io/payments) on NOWPayments website.
//
// ## Alternative flow
// 1. API - Check API availability with the ["GET API status"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#9998079f-dcc8-4e07-9ac7-3d52f0fd733a) method. If required, check the list of available payment currencies with the ["GET available currencies"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#1c268f89-4fe7-471e-81b4-5a3153577b73) method.
// 2. UI - Ask a customer to select item/items for purchase to determine the total sum;
// 3. UI - Ask a customer to select payment currency
// 4. API - Get the minimum payment amount for the selected currency pair (payment currency to your Outcome Wallet currency) with the ["GET Minimum payment amount"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#41b02221-2d58-4fcf-9529-59d3763d6434) method;
// 5. API - Get the estimate of the total amount in crypto with ["GET Estimated price"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#7025cacf-7040-4c7b-a83f-f9ff0a22a822) and check that it is larger than the minimum payment amount from step 4;
// 6. API - Call the ["POST Create Invoice](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#3e3ce25e-f43f-4636-bbd9-11560e46048b) method to create an invoice. Set "success_url" - parameter so that the user will be redirected to your website after successful payment.
// 7. UI - display the invoice url or redirect the user to the generated link.
// 8. NOWPayments - the customer completes the payment and is redirected back to your website (only if "success_url" parameter is configured correctly!).
// 9. API - You can get the payment status either via our IPN callbacks or manually, using ["GET Payment Status"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#0b77a8e3-2344-4760-a0bd-247da067db6d) and display it to a customer so that they know when their payment has been processed.
// 10. API - you call the list of payments made to your account via the ["GET List of payments"](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#c8399c0e-d798-4f01-83ae-ddaa6905c2da) method. Additionally, you can see all of this information in your [Account](https://account.nowpayments.io/invoices) on NOWPayments website.
//
// # API Documentation
//
// ## Instant Payments Notifications
// IPN (Instant payment notifications, or callbacks) are used to notify you when transaction status is changed.
// To use them, you should complete the following steps:
//
// 1. Generate and save the IPN Secret key in Store Settings tab at the Dashboard.
//
// 2. Insert your URL address where you want to get callbacks in create_payment request. The parameter name is ipn\_callback\_url. You will receive payment updates (statuses) to this URL address.
//
// 3. You will receive all the parameters at  the URL address you specified in (2) by POST request.
// The POST request will contain the *x-nowpayments-sig* parameter in the header.
// The body of the request is similiar to a [get payment status](https://documenter.getpostman.com/view/7907941/S1a32n38?version=latest#0b77a8e3-2344-4760-a0bd-247da067db6d) response body.
// Example:
// {"payment_id":5077125051,"payment_status":"waiting","pay_address":"0xd1cDE08A07cD25adEbEd35c3867a59228C09B606","price_amount":170,"price_currency":"usd","pay_amount":155.38559757,"actually_paid":0,"pay_currency":"mana","order_id":"2","order_description":"Apple Macbook Pro 2019 x 1","purchase_id":"6084744717","created_at":"2021-04-12T14:22:54.942Z","updated_at":"2021-04-12T14:23:06.244Z","outcome_amount":1131.7812095,"outcome_currency":"trx"}
//
// 4. Sort all the parameters from the POST request in alphabetical order.
//
// 5. Convert them to string using
// [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) (params, Object.keys(params).sort()) or the same function.
//
// 6. Sign a string with an IPN-secret key with HMAC and sha-512 key
//
// 7. Compare the signed string from the previous step with the x-nowpayments-sig , which is stored in the header of the callback request.
// If these strings are similar it is a success.
// Otherwise, contact us on support@nowpayments.io to solve the problem.
//
// Example of creating a signed string at Node.JS
//
//	const hmac = crypto.createHmac('sha512', notificationsKey);
//	hmac.update(JSON.stringify(params, Object.keys(params).sort()));
//	const signature = hmac.digest('hex');
//
// Example of comparing signed strings in PHP
//
//	function check_ipn_request_is_valid()
//	    {
//	        $error_msg = "Unknown error";
//	        $auth_ok = false;
//	        $request_data = null;
//
//
//	        if (isset($_SERVER['HTTP_X_NOWPAYMENTS_SIG']) && !empty($_SERVER['HTTP_X_NOWPAYMENTS_SIG'])) {
//	            $recived_hmac = $_SERVER['HTTP_X_NOWPAYMENTS_SIG'];
//
//	            $request_json = file_get_contents('php://input');
//	            $request_data = json_decode($request_json, true);
//	            ksort($request_data);
//	            $sorted_request_json = json_encode($request_data);
//
//	            if ($request_json !== false && !empty($request_json)) {
//	                $hmac = hash_hmac("sha512", $sorted_request_json, trim($this->ipn_secret));
//
//	                if ($hmac == $recived_hmac) {
//	                    $auth_ok = true;
//	                } else {
//	                    $error_msg = 'HMAC signature does not match';
//	                }
//	            } else {
//	                $error_msg = 'Error reading POST data';
//	            }
//	        } else {
//	            $error_msg = 'No HMAC signature sent.';
//	        }
//
//	    }
//
// ## Recurrent payment notifications
// If an error is detected, the payment is flagged and will receive additional recurrent notifications (number of recurrent notifications can be changed in your Store Settings-> Instant Payment Notifications).
//
// If an error is received again during processing of the payment, recurrent notifications will be initiated again.
//
// Example: "Timeout" is set to 1 minute and "Number of recurrent notifications" is set to 3.
//
// Once an error is detected, you will receive 3 notifications at 1 minute intervals.
//
// ## Several payments for one order
// If you want to create several payments for one Order you should do the following:
//
// Â  * Create a payment for the full order amount.
// Â  * Save "purchase_id" which will be in "create_payment" response
// Â  * Create next payment or payments with this "purchase_id" in "create_payment" request.
//   - **Only works for partially_paid payments**
//
// It may be useful if you want to give your customers opportunity to pay a full order with several payments, for example, one part in BTC and one part in ETH. Also, if your customer accidentally paid you only part of a full amount, you can automatically ask them to make another payment.
//
// ## Packages
//
// Please find our out-of-the box packages for easy integration below:
//
// [JavaScript package](https://www.npmjs.com/package/@nowpaymentsio/nowpayments-api-js)
//
// More coming soon!
//
// ## Payments
type SDK struct {

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	return sdk
}

// ThreeGetEstimatedPrice - 3. Get estimated price
// This is a method for calculating the approximate price in cryptocurrency for a given value in Fiat currency. You will need to provide the initial cost in the Fiat currency (amount, currency_from) and the necessary cryptocurrency (currency_to)
// Currently following fiat currencies are available: usd, eur, nzd, brl, gbp.
func (s *SDK) ThreeGetEstimatedPrice(ctx context.Context, request operations.ThreeGetEstimatedPriceRequest) (*operations.ThreeGetEstimatedPriceResponse, error) {
	baseURL := s._serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/estimate"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ThreeGetEstimatedPriceResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.ThreeGetEstimatedPrice200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ThreeGetEstimatedPrice200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// SixGetTheMinimumPaymentAmount - 6. Get the minimum payment amount
// Get the minimum payment amount for a specific pair.
//
// You can provide both currencies in the pair or just currency_from, and we will calculate the minimum payment amount for currency_from and currency which you have specified as the outcome in the Store Settings.
//
// In the case of several outcome wallets we will calculate the minimum amount in the same way we route your payment to a specific wallet.
func (s *SDK) SixGetTheMinimumPaymentAmount(ctx context.Context, request operations.SixGetTheMinimumPaymentAmountRequest) (*operations.SixGetTheMinimumPaymentAmountResponse, error) {
	baseURL := s._serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/min-amount"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.SixGetTheMinimumPaymentAmountResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.SixGetTheMinimumPaymentAmount200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.SixGetTheMinimumPaymentAmount200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// SevenGetListOfPayments - 7. Get list of payments
// Returns the entire list of all transactions, created with certain API key.
// The list of optional parameters:
// - limit - number of records in one page. (possible values: from 1 to 500)
// - page - the page number you want to get (possible values: from 0 to **page count - 1**)
// - sortBy - sort the received list by a paramenter. Set to **created_at** by default (possible values: payment_id, payment_status, pay_address, price_amount, price_currency, pay_amount, actually_paid, pay_currency, order_id, order_description, purchase_id, outcome_amount, outcome_currency)
// - orderBy - display the list in ascending or descending order. Set to **asc** by default (possible values: asc, desc)
// - dateFrom - select the displayed period start date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).
// - dateTo - select the displayed period end date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).
func (s *SDK) SevenGetListOfPayments(ctx context.Context, request operations.SevenGetListOfPaymentsRequest) (*operations.SevenGetListOfPaymentsResponse, error) {
	baseURL := s._serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/payment/"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.SevenGetListOfPaymentsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.SevenGetListOfPayments200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.SevenGetListOfPayments200ApplicationJSONObject = out
		}
	}

	return res, nil
}
