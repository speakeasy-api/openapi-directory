/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The current state of the gateway association.
 */
export enum ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum {
  Associated = "associated",
  NotAssociated = "not-associated",
  Associating = "associating",
  Disassociating = "disassociating",
}

/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
export enum ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  logEnabled?: boolean;

  @SpeakeasyMetadata()
  logGroupArn?: string;

  @SpeakeasyMetadata()
  logOutputFormat?: string;
}

/**
 * Options for logging VPN tunnel activity.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cloudWatchLogOptions?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}

/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The VPN tunnel options.
 */
export class ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dpdTimeoutAction?: string;

  @SpeakeasyMetadata()
  dpdTimeoutSeconds?: number;

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions,
  })
  ikeVersions?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions[];

  @SpeakeasyMetadata()
  logOptions?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;

  @SpeakeasyMetadata()
  outsideIpAddress?: string;

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
  })
  phase1DHGroupNumbers?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
  })
  phase1EncryptionAlgorithms?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
  })
  phase1IntegrityAlgorithms?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase1LifetimeSeconds?: number;

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
  })
  phase2DHGroupNumbers?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
  })
  phase2EncryptionAlgorithms?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType:
      ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
  })
  phase2IntegrityAlgorithms?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase2LifetimeSeconds?: number;

  @SpeakeasyMetadata()
  preSharedKey?: string;

  @SpeakeasyMetadata()
  rekeyFuzzPercentage?: number;

  @SpeakeasyMetadata()
  rekeyMarginTimeSeconds?: number;

  @SpeakeasyMetadata()
  replayWindowSize?: number;

  @SpeakeasyMetadata()
  startupAction?: string;

  @SpeakeasyMetadata()
  tunnelInsideCidr?: string;

  @SpeakeasyMetadata()
  tunnelInsideIpv6Cidr?: string;
}

/**
 * The VPN connection options.
 */
export class ModifyVpnConnectionResultVpnConnectionOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enableAcceleration?: boolean;

  @SpeakeasyMetadata()
  localIpv4NetworkCidr?: string;

  @SpeakeasyMetadata()
  localIpv6NetworkCidr?: string;

  @SpeakeasyMetadata()
  outsideIpAddressType?: string;

  @SpeakeasyMetadata()
  remoteIpv4NetworkCidr?: string;

  @SpeakeasyMetadata()
  remoteIpv6NetworkCidr?: string;

  @SpeakeasyMetadata()
  staticRoutesOnly?: boolean;

  @SpeakeasyMetadata()
  transportTransitGatewayAttachmentId?: string;

  @SpeakeasyMetadata()
  tunnelInsideIpVersion?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum;

  @SpeakeasyMetadata({
    elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions,
  })
  tunnelOptions?: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions[];
}

/**
 * Indicates how the routes were provided.
 */
export enum ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum {
  Static = "Static",
}

/**
 * The current state of the static route.
 */
export enum ModifyVpnConnectionResultVpnConnectionRoutesStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a static route for a VPN connection.
 */
export class ModifyVpnConnectionResultVpnConnectionRoutes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  source?: ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum;

  @SpeakeasyMetadata()
  state?: ModifyVpnConnectionResultVpnConnectionRoutesStateEnum;
}

/**
 * The current state of the VPN connection.
 */
export enum ModifyVpnConnectionResultVpnConnectionStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class ModifyVpnConnectionResultVpnConnectionTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The type of VPN connection.
 */
export enum ModifyVpnConnectionResultVpnConnectionTypeEnum {
  Ipsec1 = "ipsec.1",
}

/**
 * The status of the VPN tunnel.
 */
export enum ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum {
  Up = "UP",
  Down = "DOWN",
}

/**
 * Describes telemetry for a VPN tunnel.
 */
export class ModifyVpnConnectionResultVpnConnectionVgwTelemetry extends SpeakeasyBase {
  @SpeakeasyMetadata()
  acceptedRouteCount?: number;

  @SpeakeasyMetadata()
  certificateArn?: string;

  @SpeakeasyMetadata()
  lastStatusChange?: Date;

  @SpeakeasyMetadata()
  outsideIpAddress?: string;

  @SpeakeasyMetadata()
  status?: ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Information about the VPN connection.
 */
export class ModifyVpnConnectionResultVpnConnection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  category?: string;

  @SpeakeasyMetadata()
  coreNetworkArn?: string;

  @SpeakeasyMetadata()
  coreNetworkAttachmentArn?: string;

  @SpeakeasyMetadata()
  customerGatewayConfiguration?: string;

  @SpeakeasyMetadata()
  customerGatewayId?: string;

  @SpeakeasyMetadata()
  gatewayAssociationState?: ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum;

  @SpeakeasyMetadata()
  options?: ModifyVpnConnectionResultVpnConnectionOptions;

  @SpeakeasyMetadata({ elemType: ModifyVpnConnectionResultVpnConnectionRoutes })
  routes?: ModifyVpnConnectionResultVpnConnectionRoutes[];

  @SpeakeasyMetadata()
  state?: ModifyVpnConnectionResultVpnConnectionStateEnum;

  @SpeakeasyMetadata({ elemType: ModifyVpnConnectionResultVpnConnectionTags })
  tags?: ModifyVpnConnectionResultVpnConnectionTags[];

  @SpeakeasyMetadata()
  transitGatewayId?: string;

  @SpeakeasyMetadata()
  type?: ModifyVpnConnectionResultVpnConnectionTypeEnum;

  @SpeakeasyMetadata({
    elemType: ModifyVpnConnectionResultVpnConnectionVgwTelemetry,
  })
  vgwTelemetry?: ModifyVpnConnectionResultVpnConnectionVgwTelemetry[];

  @SpeakeasyMetadata()
  vpnConnectionId?: string;

  @SpeakeasyMetadata()
  vpnGatewayId?: string;
}

/**
 * Success
 */
export class ModifyVpnConnectionResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  vpnConnection?: ModifyVpnConnectionResultVpnConnection;
}
