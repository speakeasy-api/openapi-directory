// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAppsXAmzTargetEnum
type ListAppsXAmzTargetEnum string

const (
	ListAppsXAmzTargetEnumSageMakerListApps ListAppsXAmzTargetEnum = "SageMaker.ListApps"
)

func (e ListAppsXAmzTargetEnum) ToPointer() *ListAppsXAmzTargetEnum {
	return &e
}

func (e *ListAppsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.ListApps":
		*e = ListAppsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAppsXAmzTargetEnum: %v", v)
	}
}

type ListAppsRequest struct {
	ListAppsRequest shared.ListAppsRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListAppsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAppsResponse struct {
	ContentType string
	// Success
	ListAppsResponse *shared.ListAppsResponse
	StatusCode       int
	RawResponse      *http.Response
}
