"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProxyGetCreditBalanceAdjustmentTransferredToAccountingEnum(str, Enum):
    r"""Status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite."""
    PROCESSING = 'Processing'
    YES = 'Yes'
    NO = 'No'
    ERROR = 'Error'
    IGNORE = 'Ignore'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetCreditBalanceAdjustment:
    r"""Container for custom fields of a Credit Balance Adjustment object."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The account ID of the credit balance's account. Zuora generates this value from the source transaction.
    **Character limit**: 32 **Values**: automatically generated from:
    
    - CreditBalanceAdjustment.SourceTransactionId or
    - CreditBalanceAdjustment.SourceTransactionNumber
    """  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The Chart of Accounts"""  
    adjustment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the credit balance adjustment is applied.
    **Character limit**: 29 **Values**: automatically generated
    """  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the adjustment.
    **Character limit**: 16 **Values**: a valid currency amount
    """  
    cancelled_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CancelledOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the credit balance adjustment was canceled.
    **Character limit**: 29 **Values**: automatically generated
    """  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})
    r"""Use this field to record comments about the credit balance adjustment.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The user ID of the person who created the credit balance adjustment.
    **Character limit**: 32 **Values**: automatically generated
    """  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the credit balance adjustmentwas generated.
    **Character limit**: 29 **Values**: automatically generated
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Object identifier."""  
    integration_id_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationId__NS'), 'exclude': lambda f: f is None }})
    r"""ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    integration_status_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationStatus__NS'), 'exclude': lambda f: f is None }})
    r"""Status of the credit balance adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for the credit balance adjustment. Zuora generates this number in the format, <em>CBA-xxxxxxxx</em>, such as CBA-00375919.
    **Character limit**: 255 **Values**: automatically generated
    """  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReasonCode'), 'exclude': lambda f: f is None }})
    r"""A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    **Character limit**: 32 **Values**: a valid reason code
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payment that the credit balance adjustment is for.
    **Character limit**: 100 **Values**: a string of 100 characters or fewer
    """  
    source_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceTransactionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.
    **Character limit**: 32 **Values**: one of the following:
    
    - InvoiceId
    - PaymentId
    - RefundId
    """  
    source_transaction_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceTransactionNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.
    **Character limit**: 50 **Values**: one of the following:
    
    - InvoiceNumber
    - PaymentNumber
    - RefundNumber
    """  
    source_transaction_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceTransactionType'), 'exclude': lambda f: f is None }})
    r"""The source of the credit balance adjustment.
    **Character limit**: **Values**: automatically generated; one of the following:
    
    - Invoice
    - Payment
    - Refund
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the credit balance adjustment.
    **Character limit**: 9 **Values**: automatically generated; one of the following:
    
    - Processed
    - Canceled
    """  
    sync_date_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SyncDate__NS'), 'exclude': lambda f: f is None }})
    r"""Date when the credit balance adjustment was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    transferred_to_accounting: Optional[ProxyGetCreditBalanceAdjustmentTransferredToAccountingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransferredToAccounting'), 'exclude': lambda f: f is None }})
    r"""Status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})
    r"""Create Query Filter"""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the user who last updated the credit balance adjustment.
    **Character limit**: 32 **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the credit balance adjustment was last updated.
    **Character limit**: 29 **Values**: automatically generated
    """  
    