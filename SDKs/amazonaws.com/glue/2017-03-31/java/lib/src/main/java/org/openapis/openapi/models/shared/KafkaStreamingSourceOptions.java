/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * KafkaStreamingSourceOptions - Additional options for streaming.
 */
public class KafkaStreamingSourceOptions {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AddRecordTimestamp")
    public String addRecordTimestamp;

    public KafkaStreamingSourceOptions withAddRecordTimestamp(String addRecordTimestamp) {
        this.addRecordTimestamp = addRecordTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Assign")
    public String assign;

    public KafkaStreamingSourceOptions withAssign(String assign) {
        this.assign = assign;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BootstrapServers")
    public String bootstrapServers;

    public KafkaStreamingSourceOptions withBootstrapServers(String bootstrapServers) {
        this.bootstrapServers = bootstrapServers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Classification")
    public String classification;

    public KafkaStreamingSourceOptions withClassification(String classification) {
        this.classification = classification;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConnectionName")
    public String connectionName;

    public KafkaStreamingSourceOptions withConnectionName(String connectionName) {
        this.connectionName = connectionName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Delimiter")
    public String delimiter;

    public KafkaStreamingSourceOptions withDelimiter(String delimiter) {
        this.delimiter = delimiter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EmitConsumerLagMetrics")
    public String emitConsumerLagMetrics;

    public KafkaStreamingSourceOptions withEmitConsumerLagMetrics(String emitConsumerLagMetrics) {
        this.emitConsumerLagMetrics = emitConsumerLagMetrics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndingOffsets")
    public String endingOffsets;

    public KafkaStreamingSourceOptions withEndingOffsets(String endingOffsets) {
        this.endingOffsets = endingOffsets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludeHeaders")
    public Boolean includeHeaders;

    public KafkaStreamingSourceOptions withIncludeHeaders(Boolean includeHeaders) {
        this.includeHeaders = includeHeaders;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxOffsetsPerTrigger")
    public Long maxOffsetsPerTrigger;

    public KafkaStreamingSourceOptions withMaxOffsetsPerTrigger(Long maxOffsetsPerTrigger) {
        this.maxOffsetsPerTrigger = maxOffsetsPerTrigger;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinPartitions")
    public Long minPartitions;

    public KafkaStreamingSourceOptions withMinPartitions(Long minPartitions) {
        this.minPartitions = minPartitions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumRetries")
    public Long numRetries;

    public KafkaStreamingSourceOptions withNumRetries(Long numRetries) {
        this.numRetries = numRetries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PollTimeoutMs")
    public Long pollTimeoutMs;

    public KafkaStreamingSourceOptions withPollTimeoutMs(Long pollTimeoutMs) {
        this.pollTimeoutMs = pollTimeoutMs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RetryIntervalMs")
    public Long retryIntervalMs;

    public KafkaStreamingSourceOptions withRetryIntervalMs(Long retryIntervalMs) {
        this.retryIntervalMs = retryIntervalMs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecurityProtocol")
    public String securityProtocol;

    public KafkaStreamingSourceOptions withSecurityProtocol(String securityProtocol) {
        this.securityProtocol = securityProtocol;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartingOffsets")
    public String startingOffsets;

    public KafkaStreamingSourceOptions withStartingOffsets(String startingOffsets) {
        this.startingOffsets = startingOffsets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscribePattern")
    public String subscribePattern;

    public KafkaStreamingSourceOptions withSubscribePattern(String subscribePattern) {
        this.subscribePattern = subscribePattern;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TopicName")
    public String topicName;

    public KafkaStreamingSourceOptions withTopicName(String topicName) {
        this.topicName = topicName;
        return this;
    }
    
    public KafkaStreamingSourceOptions(){}
}
