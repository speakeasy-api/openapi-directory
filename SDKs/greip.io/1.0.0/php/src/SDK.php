<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This documentation shows how to use Greip API, by highlighting the API methods, options and some other features that allow you to get the most of this API.
 * 
 * https://docs.greip.io - API Documentaion
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://docs.greip.io
 */
class SDK
{
	public const SERVERS = [
        /** Production server */
		'https://gregeoip.com',
        /** Development server */
		'https://dev.gregeoip.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
     * 
     * https://docs.greip.io/methods/asn-lookup-api - Greip API - ASN Lookup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetASNLookupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetASNLookupResponse
     * @see https://docs.greip.io/methods/asn-lookup-api
     */
	public function getASNLookup(
        \OpenAPI\OpenAPI\Models\Operations\GetASNLookupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetASNLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ASNLookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetASNLookupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetASNLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
     * 
     * https://docs.greip.io/methods/bin-iin-validation - Greip API - BIN/IIN Validation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBINLookupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBINLookupResponse
     * @see https://docs.greip.io/methods/bin-iin-validation
     */
	public function getBINLookup(
        \OpenAPI\OpenAPI\Models\Operations\GetBINLookupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBINLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/BINLookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBINLookupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBINLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
     * 
     * https://docs.greip.io/methods/bulk-lookup - Greip API - Bulk Lookup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBulkLookupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBulkLookupResponse
     * @see https://docs.greip.io/methods/bulk-lookup
     */
	public function getBulkLookup(
        \OpenAPI\OpenAPI\Models\Operations\GetBulkLookupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBulkLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/BulkLookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBulkLookupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBulkLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Country endpoint: Returns the information of a specific country by passing the `countrCode`.
     * 
     * https://docs.greip.io/methods/country-data-api - Greip API - Country Data API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCountryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCountryResponse
     * @see https://docs.greip.io/methods/country-data-api
     */
	public function getCountry(
        \OpenAPI\OpenAPI\Models\Operations\GetCountryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCountryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Country');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCountryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Returns the geolocation data of the visitor.
     * 
     * https://docs.greip.io/methods/retrieve-visitor-info - Greip API - Retrieve Visitor Info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeoIPRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeoIPResponse
     * @see https://docs.greip.io/methods/retrieve-visitor-info
     */
	public function getGeoIP(
        \OpenAPI\OpenAPI\Models\Operations\GetGeoIPRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeoIPResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GeoIP');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeoIPRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeoIPResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Returns the geolocation data of a specific IP Address.
     * 
     * https://docs.greip.io/methods/lookup-ip-address - Greip API - Lookup IP Address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIPLookupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIPLookupResponse
     * @see https://docs.greip.io/methods/lookup-ip-address
     */
	public function getIPLookup(
        \OpenAPI\OpenAPI\Models\Operations\GetIPLookupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIPLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/IPLookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIPLookupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIPLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * badWords endpoint: Detects whether user inputs contain profanity or not.
     * 
     * https://docs.greip.io/methods/profanity-detection - Greip API - Profanity Detection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBadWordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBadWordsResponse
     * @see https://docs.greip.io/methods/profanity-detection
     */
	public function getBadWords(
        \OpenAPI\OpenAPI\Models\Operations\GetBadWordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBadWordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/badWords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBadWordsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBadWordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * This method can be used as an extra-layer of your system for validating email addresses.
     * 
     * https://docs.greip.io/methods/data-validation/email-validation - Greip API - Email Validation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetValidateEmailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetValidateEmailResponse
     * @see https://docs.greip.io/methods/data-validation/email-validation
     */
	public function getValidateEmail(
        \OpenAPI\OpenAPI\Models\Operations\GetValidateEmailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetValidateEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/validateEmail');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetValidateEmailRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetValidateEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * This method can be used as an extra-layer of your system for validating phone numbers.
     * 
     * https://docs.greip.io/methods/data-validation/phone-number-validation - Greip API - Phone Number Validation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneResponse
     * @see https://docs.greip.io/methods/data-validation/phone-number-validation
     */
	public function getValidatePhone(
        \OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/validatePhone');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetValidatePhoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}