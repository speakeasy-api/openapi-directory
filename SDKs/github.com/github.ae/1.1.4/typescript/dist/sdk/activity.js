"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activity = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Activity APIs provide access to notifications, subscriptions, and timelines.
 */
var Activity = /** @class */ (function () {
    function Activity(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Check if a repository is starred by the authenticated user
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityCheckRepoIsStarredByAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityCheckRepoIsStarredByAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/user/starred/{owner}/{repo}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityCheckRepoIsStarredByAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [204, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case [401, 403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a repository subscription
     *
     * @remarks
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/github-ae@latest/rest/reference/activity#set-a-repository-subscription).
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#delete-a-repository-subscription} - API method documentation
     */
    Activity.prototype.activityDeleteRepoSubscription = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityDeleteRepoSubscriptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/subscription", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityDeleteRepoSubscriptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a thread subscription
     *
     * @remarks
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/github-ae@latest/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#delete-a-thread-subscription} - API method documentation
     */
    Activity.prototype.activityDeleteThreadSubscription = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityDeleteThreadSubscriptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/notifications/threads/{thread_id}/subscription", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityDeleteThreadSubscriptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [204, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get feeds
     *
     * @remarks
     * GitHub AE provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     *
     * *   **Timeline**: The GitHub AE global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub AE.
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#get-feeds} - API method documentation
     */
    Activity.prototype.activityGetFeeds = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/feeds";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityGetFeedsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.feed = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Feed);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a repository subscription
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#get-a-repository-subscription} - API method documentation
     */
    Activity.prototype.activityGetRepoSubscription = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityGetRepoSubscriptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/subscription", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityGetRepoSubscriptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.repositorySubscription = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RepositorySubscription);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    break;
            }
            return res;
        });
    };
    /**
     * Get a thread
     *
     * @remarks
     * Gets information about a notification thread.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#get-a-thread} - API method documentation
     */
    Activity.prototype.activityGetThread = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityGetThreadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/notifications/threads/{thread_id}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityGetThreadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.thread = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Thread);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a thread subscription for the authenticated user
     *
     * @remarks
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/github-ae@latest/rest/reference/activity#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityGetThreadSubscriptionForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.ActivityGetThreadSubscriptionForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/notifications/threads/{thread_id}/subscription", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityGetThreadSubscriptionForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.threadSubscription = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ThreadSubscription);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List events for the authenticated user
     *
     * @remarks
     * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-events-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListEventsForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListEventsForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/users/{username}/events", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListEventsForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.events = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.events = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Event, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List notifications for the authenticated user
     *
     * @remarks
     * List all notifications for the current user, sorted by most recently updated.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-notifications-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListNotificationsForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListNotificationsForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/notifications";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListNotificationsForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.threads = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.threads = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Thread, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List organization events for the authenticated user
     *
     * @remarks
     * This is the user's organization dashboard. You must be authenticated as the user to view this.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-organization-events-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListOrgEventsForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListOrgEventsForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/users/{username}/events/orgs/{org}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListOrgEventsForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.events = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.events = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Event, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repository events
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repository-events} - API method documentation
     */
    Activity.prototype.activityListRepoEvents = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListRepoEventsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/events", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListRepoEventsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.events = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.events = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Event, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repository notifications for the authenticated user
     *
     * @remarks
     * Lists all notifications for the current user in the specified repository.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repository-notifications-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListRepoNotificationsForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.ActivityListRepoNotificationsForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/notifications", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListRepoNotificationsForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.threads = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.threads = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Thread, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repositories starred by the authenticated user
     *
     * @remarks
     * Lists repositories the authenticated user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-starred-by-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListReposStarredByAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListReposStarredByAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/user/starred";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListReposStarredByAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.repositories = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.repositories = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Repository, resFieldDepth);
                    }
                    if (utils.matchContentType(contentType, "application/vnd.github.v3.star+json")) {
                        res.starredRepositories = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.starredRepositories = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.StarredRepository, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repositories starred by a user
     *
     * @remarks
     * Lists repositories a user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-starred-by-a-user} - API method documentation
     */
    Activity.prototype.activityListReposStarredByUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListReposStarredByUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/users/{username}/starred", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListReposStarredByUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.activityListReposStarredByUser200ApplicationJSONAnyOf =
                            httpRes === null || httpRes === void 0 ? void 0 : httpRes.data;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repositories watched by a user
     *
     * @remarks
     * Lists repositories a user is watching.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-watched-by-a-user} - API method documentation
     */
    Activity.prototype.activityListReposWatchedByUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListReposWatchedByUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/users/{username}/subscriptions", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListReposWatchedByUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.minimalRepositories = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.minimalRepositories = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MinimalRepository, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List stargazers
     *
     * @remarks
     * Lists the people that have starred the repository.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-stargazers} - API method documentation
     */
    Activity.prototype.activityListStargazersForRepo = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListStargazersForRepoRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/stargazers", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListStargazersForRepoResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.activityListStargazersForRepo200ApplicationJSONAnyOf =
                            httpRes === null || httpRes === void 0 ? void 0 : httpRes.data;
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 422:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repositories watched by the authenticated user
     *
     * @remarks
     * Lists repositories the authenticated user is watching.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-watched-by-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityListWatchedReposForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListWatchedReposForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/user/subscriptions";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListWatchedReposForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.minimalRepositories = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.minimalRepositories = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MinimalRepository, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List watchers
     *
     * @remarks
     * Lists the people watching the specified repository.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#list-watchers} - API method documentation
     */
    Activity.prototype.activityListWatchersForRepo = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityListWatchersForRepoRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/subscribers", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityListWatchersForRepoResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.simpleUsers = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.simpleUsers = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SimpleUser, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Mark notifications as read
     *
     * @remarks
     * Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub AE will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/github-ae@latest/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#mark-notifications-as-read} - API method documentation
     */
    Activity.prototype.activityMarkNotificationsAsRead = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityMarkNotificationsAsReadRequestBody(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/notifications";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityMarkNotificationsAsReadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.activityMarkNotificationsAsRead202ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ActivityMarkNotificationsAsRead202ApplicationJSON);
                    }
                    break;
                case [205, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Mark repository notifications as read
     *
     * @remarks
     * Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub AE will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/github-ae@latest/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#mark-repository-notifications-as-read} - API method documentation
     */
    Activity.prototype.activityMarkRepoNotificationsAsRead = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityMarkRepoNotificationsAsReadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/notifications", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityMarkRepoNotificationsAsReadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.activityMarkRepoNotificationsAsRead202ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ActivityMarkRepoNotificationsAsRead202ApplicationJSON);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 205:
                    break;
            }
            return res;
        });
    };
    /**
     * Mark a thread as read
     *
     * @remarks
     * Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub AE: https://github.com/notifications.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#mark-a-thread-as-read} - API method documentation
     */
    Activity.prototype.activityMarkThreadAsRead = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityMarkThreadAsReadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/notifications/threads/{thread_id}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "patch" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityMarkThreadAsReadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [205, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Set a repository subscription
     *
     * @remarks
     * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/github-ae@latest/rest/reference/activity#delete-a-repository-subscription) completely.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#set-a-repository-subscription} - API method documentation
     */
    Activity.prototype.activitySetRepoSubscription = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivitySetRepoSubscriptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/subscription", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivitySetRepoSubscriptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.repositorySubscription = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RepositorySubscription);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Set a thread subscription
     *
     * @remarks
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     *
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     *
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/github-ae@latest/rest/reference/activity#delete-a-thread-subscription) endpoint.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#set-a-thread-subscription} - API method documentation
     */
    Activity.prototype.activitySetThreadSubscription = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivitySetThreadSubscriptionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/notifications/threads/{thread_id}/subscription", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivitySetThreadSubscriptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.threadSubscription = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ThreadSubscription);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 304:
                    break;
                case [401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Star a repository for the authenticated user
     *
     * @remarks
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#star-a-repository-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityStarRepoForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityStarRepoForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/user/starred/{owner}/{repo}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityStarRepoForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [204, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case [401, 403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Unstar a repository for the authenticated user
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/activity#unstar-a-repository-for-the-authenticated-user} - API method documentation
     */
    Activity.prototype.activityUnstarRepoForAuthenticatedUser = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ActivityUnstarRepoForAuthenticatedUserRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/user/starred/{owner}/{repo}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ActivityUnstarRepoForAuthenticatedUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [204, 304].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case [401, 403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
            }
            return res;
        });
    };
    return Activity;
}());
exports.Activity = Activity;
