/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HyperParameterTuningAllocationStrategyEnum } from "./hyperparametertuningallocationstrategyenum";
import { HyperParameterTuningInstanceConfig } from "./hyperparametertuninginstanceconfig";
import { TrainingInstanceTypeEnum } from "./traininginstancetypeenum";
import { Expose, Type } from "class-transformer";

/**
 * <p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note>
 */
export class HyperParameterTuningResourceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AllocationStrategy" })
  allocationStrategy?: HyperParameterTuningAllocationStrategyEnum;

  @SpeakeasyMetadata({ elemType: HyperParameterTuningInstanceConfig })
  @Expose({ name: "InstanceConfigs" })
  @Type(() => HyperParameterTuningInstanceConfig)
  instanceConfigs?: HyperParameterTuningInstanceConfig[];

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceCount" })
  instanceCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceType" })
  instanceType?: TrainingInstanceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "VolumeKmsKeyId" })
  volumeKmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VolumeSizeInGB" })
  volumeSizeInGB?: number;
}
