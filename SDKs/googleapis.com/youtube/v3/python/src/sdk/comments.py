"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Comments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def youtube_comments_delete(self, request: operations.YoutubeCommentsDeleteRequest, security: operations.YoutubeCommentsDeleteSecurity) -> operations.YoutubeCommentsDeleteResponse:
        r"""Deletes a resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments'
        
        query_params = utils.get_query_params(operations.YoutubeCommentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def youtube_comments_insert(self, request: operations.YoutubeCommentsInsertRequest, security: operations.YoutubeCommentsInsertSecurity) -> operations.YoutubeCommentsInsertResponse:
        r"""Inserts a new resource into this collection."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeCommentsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def youtube_comments_list(self, request: operations.YoutubeCommentsListRequest, security: operations.YoutubeCommentsListSecurity) -> operations.YoutubeCommentsListResponse:
        r"""Retrieves a list of resources, possibly filtered."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments'
        
        query_params = utils.get_query_params(operations.YoutubeCommentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentListResponse])
                res.comment_list_response = out

        return res

    def youtube_comments_mark_as_spam(self, request: operations.YoutubeCommentsMarkAsSpamRequest, security: operations.YoutubeCommentsMarkAsSpamSecurity) -> operations.YoutubeCommentsMarkAsSpamResponse:
        r"""Expresses the caller's opinion that one or more comments should be flagged as spam."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments/markAsSpam'
        
        query_params = utils.get_query_params(operations.YoutubeCommentsMarkAsSpamRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsMarkAsSpamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def youtube_comments_set_moderation_status(self, request: operations.YoutubeCommentsSetModerationStatusRequest, security: operations.YoutubeCommentsSetModerationStatusSecurity) -> operations.YoutubeCommentsSetModerationStatusResponse:
        r"""Sets the moderation status of one or more comments."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments/setModerationStatus'
        
        query_params = utils.get_query_params(operations.YoutubeCommentsSetModerationStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsSetModerationStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def youtube_comments_update(self, request: operations.YoutubeCommentsUpdateRequest, security: operations.YoutubeCommentsUpdateSecurity) -> operations.YoutubeCommentsUpdateResponse:
        r"""Updates an existing resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/comments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeCommentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeCommentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    