"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import subject as shared_subject
from ..shared import subjectaltnames as shared_subjectaltnames
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubjectDescription:
    r"""These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime."""
    
    hex_serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hexSerialNumber'), 'exclude': lambda f: f is None }})
    r"""The serial number encoded in lowercase hexadecimal."""  
    lifetime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime'), 'exclude': lambda f: f is None }})
    r"""For convenience, the actual lifetime of an issued certificate."""  
    not_after_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notAfterTime'), 'exclude': lambda f: f is None }})
    r"""The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second."""  
    not_before_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notBeforeTime'), 'exclude': lambda f: f is None }})
    r"""The time at which the certificate becomes valid."""  
    subject: Optional[shared_subject.Subject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})
    r"""Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate."""  
    subject_alt_name: Optional[shared_subjectaltnames.SubjectAltNames] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectAltName'), 'exclude': lambda f: f is None }})
    r"""SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \\"common name\\" in the distinguished name)."""  
    