/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NumberOrder - Represents an order created on the CallFire platform
 */
public class NumberOrder {
    /**
     * The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    public Long created;
    public NumberOrder withCreated(Long created) {
        this.created = created;
        return this;
    }
    
    /**
     * An id of an order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public NumberOrder withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Represents an order item of a particular order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    public NumberOrderItem keywords;
    public NumberOrder withKeywords(NumberOrderItem keywords) {
        this.keywords = keywords;
        return this;
    }
    
    /**
     * Represents an order item of a particular order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localNumbers")
    public NumberOrderItem localNumbers;
    public NumberOrder withLocalNumbers(NumberOrderItem localNumbers) {
        this.localNumbers = localNumbers;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesTax")
    public Float salesTax;
    public NumberOrder withSalesTax(Float salesTax) {
        this.salesTax = salesTax;
        return this;
    }
    
    /**
     * A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public NumberOrderStatusEnum status;
    public NumberOrder withStatus(NumberOrderStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public Float summary;
    public NumberOrder withSummary(Float summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * Represents an order item of a particular order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tollFreeNumbers")
    public NumberOrderItem tollFreeNumbers;
    public NumberOrder withTollFreeNumbers(NumberOrderItem tollFreeNumbers) {
        this.tollFreeNumbers = tollFreeNumbers;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public Float total;
    public NumberOrder withTotal(Float total) {
        this.total = total;
        return this;
    }
    
    /**
     * A total cost of an order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalCost")
    public Float totalCost;
    public NumberOrder withTotalCost(Float totalCost) {
        this.totalCost = totalCost;
        return this;
    }
    
}
