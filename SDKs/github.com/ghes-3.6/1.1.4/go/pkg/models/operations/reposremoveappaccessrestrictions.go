// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposRemoveAppAccessRestrictionsRequestBody1 struct {
	// The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
	Apps []string `json:"apps"`
}

type ReposRemoveAppAccessRestrictionsRequestBodyType string

const (
	ReposRemoveAppAccessRestrictionsRequestBodyTypeReposRemoveAppAccessRestrictionsRequestBody1 ReposRemoveAppAccessRestrictionsRequestBodyType = "repos/remove-app-access-restrictions_requestBody_1"
	ReposRemoveAppAccessRestrictionsRequestBodyTypeArrayOfstr                                   ReposRemoveAppAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposRemoveAppAccessRestrictionsRequestBody struct {
	ReposRemoveAppAccessRestrictionsRequestBody1 *ReposRemoveAppAccessRestrictionsRequestBody1
	ArrayOfstr                                   []string

	Type ReposRemoveAppAccessRestrictionsRequestBodyType
}

func CreateReposRemoveAppAccessRestrictionsRequestBodyReposRemoveAppAccessRestrictionsRequestBody1(reposRemoveAppAccessRestrictionsRequestBody1 ReposRemoveAppAccessRestrictionsRequestBody1) ReposRemoveAppAccessRestrictionsRequestBody {
	typ := ReposRemoveAppAccessRestrictionsRequestBodyTypeReposRemoveAppAccessRestrictionsRequestBody1

	return ReposRemoveAppAccessRestrictionsRequestBody{
		ReposRemoveAppAccessRestrictionsRequestBody1: &reposRemoveAppAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposRemoveAppAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposRemoveAppAccessRestrictionsRequestBody {
	typ := ReposRemoveAppAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposRemoveAppAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposRemoveAppAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposRemoveAppAccessRestrictionsRequestBody1 := new(ReposRemoveAppAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposRemoveAppAccessRestrictionsRequestBody1); err == nil {
		u.ReposRemoveAppAccessRestrictionsRequestBody1 = reposRemoveAppAccessRestrictionsRequestBody1
		u.Type = ReposRemoveAppAccessRestrictionsRequestBodyTypeReposRemoveAppAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposRemoveAppAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposRemoveAppAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposRemoveAppAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposRemoveAppAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposRemoveAppAccessRestrictionsRequest struct {
	RequestBody *ReposRemoveAppAccessRestrictionsRequestBody `request:"mediaType=application/json"`
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.6/graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposRemoveAppAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Integrations []shared.Integration
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
