// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPresidentialContributionsBySizeSizeEnum int

const (
	GetPresidentialContributionsBySizeSizeEnumZero        GetPresidentialContributionsBySizeSizeEnum = 0
	GetPresidentialContributionsBySizeSizeEnumTwoHundred  GetPresidentialContributionsBySizeSizeEnum = 200
	GetPresidentialContributionsBySizeSizeEnumFiveHundred GetPresidentialContributionsBySizeSizeEnum = 500
	GetPresidentialContributionsBySizeSizeEnumOneThousand GetPresidentialContributionsBySizeSizeEnum = 1000
	GetPresidentialContributionsBySizeSizeEnumTwoThousand GetPresidentialContributionsBySizeSizeEnum = 2000
)

func (e GetPresidentialContributionsBySizeSizeEnum) ToPointer() *GetPresidentialContributionsBySizeSizeEnum {
	return &e
}

func (e *GetPresidentialContributionsBySizeSizeEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 200:
		fallthrough
	case 500:
		fallthrough
	case 1000:
		fallthrough
	case 2000:
		*e = GetPresidentialContributionsBySizeSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPresidentialContributionsBySizeSizeEnum: %v", v)
	}
}

type GetPresidentialContributionsBySizeRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//   -P00000001    All candidates
	//   -P00000002    Democrasts
	//   -P00000003    Republicans
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// Year of election
	ElectionYear []int `queryParam:"style=form,explode=true,name=election_year"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// The total all contributions in the following ranges:
	// ```
	//   -0    $200 and under
	//   -200  $200.01 - $499.99
	//   -500  $500 - $999.99
	//   -1000 $1000 - $1999.99
	//   -2000 $2000 +
	// ```
	// Unitemized contributions are included in the `0` category.
	//
	Size []GetPresidentialContributionsBySizeSizeEnum `queryParam:"style=form,explode=true,name=size"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
}

type GetPresidentialContributionsBySizeResponse struct {
	ContentType            string
	PresidentialBySizePage *shared.PresidentialBySizePage
	StatusCode             int
	RawResponse            *http.Response
}
