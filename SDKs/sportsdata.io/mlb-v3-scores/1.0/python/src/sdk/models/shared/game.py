"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inning as shared_inning
from ..shared import series as shared_series
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Game:
    
    attendance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attendance'), 'exclude': lambda f: f is None }})  
    away_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayRotationNumber'), 'exclude': lambda f: f is None }})  
    away_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeam'), 'exclude': lambda f: f is None }})  
    away_team_errors: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamErrors'), 'exclude': lambda f: f is None }})  
    away_team_hits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamHits'), 'exclude': lambda f: f is None }})  
    away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamID'), 'exclude': lambda f: f is None }})  
    away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    away_team_probable_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamProbablePitcherID'), 'exclude': lambda f: f is None }})  
    away_team_runs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamRuns'), 'exclude': lambda f: f is None }})  
    away_team_starting_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamStartingPitcher'), 'exclude': lambda f: f is None }})  
    away_team_starting_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamStartingPitcherID'), 'exclude': lambda f: f is None }})  
    balls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Balls'), 'exclude': lambda f: f is None }})  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Channel'), 'exclude': lambda f: f is None }})  
    current_hitter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentHitter'), 'exclude': lambda f: f is None }})  
    current_hitter_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentHitterID'), 'exclude': lambda f: f is None }})  
    current_hitting_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentHittingTeamID'), 'exclude': lambda f: f is None }})  
    current_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentPitcher'), 'exclude': lambda f: f is None }})  
    current_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentPitcherID'), 'exclude': lambda f: f is None }})  
    current_pitching_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentPitchingTeamID'), 'exclude': lambda f: f is None }})  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTime'), 'exclude': lambda f: f is None }})  
    date_time_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTimeUTC'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    due_up_hitter_id1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueUpHitterID1'), 'exclude': lambda f: f is None }})  
    due_up_hitter_id2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueUpHitterID2'), 'exclude': lambda f: f is None }})  
    due_up_hitter_id3: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueUpHitterID3'), 'exclude': lambda f: f is None }})  
    forecast_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastDescription'), 'exclude': lambda f: f is None }})  
    forecast_temp_high: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTempHigh'), 'exclude': lambda f: f is None }})  
    forecast_temp_low: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTempLow'), 'exclude': lambda f: f is None }})  
    forecast_wind_chill: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastWindChill'), 'exclude': lambda f: f is None }})  
    forecast_wind_direction: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastWindDirection'), 'exclude': lambda f: f is None }})  
    forecast_wind_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastWindSpeed'), 'exclude': lambda f: f is None }})  
    game_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameEndDateTime'), 'exclude': lambda f: f is None }})  
    game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameID'), 'exclude': lambda f: f is None }})  
    global_away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalAwayTeamID'), 'exclude': lambda f: f is None }})  
    global_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalGameID'), 'exclude': lambda f: f is None }})  
    global_home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalHomeTeamID'), 'exclude': lambda f: f is None }})  
    home_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRotationNumber'), 'exclude': lambda f: f is None }})  
    home_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeam'), 'exclude': lambda f: f is None }})  
    home_team_errors: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamErrors'), 'exclude': lambda f: f is None }})  
    home_team_hits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamHits'), 'exclude': lambda f: f is None }})  
    home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamID'), 'exclude': lambda f: f is None }})  
    home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    home_team_probable_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamProbablePitcherID'), 'exclude': lambda f: f is None }})  
    home_team_runs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamRuns'), 'exclude': lambda f: f is None }})  
    home_team_starting_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamStartingPitcher'), 'exclude': lambda f: f is None }})  
    home_team_starting_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamStartingPitcherID'), 'exclude': lambda f: f is None }})  
    inning: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inning'), 'exclude': lambda f: f is None }})  
    inning_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningDescription'), 'exclude': lambda f: f is None }})  
    inning_half: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningHalf'), 'exclude': lambda f: f is None }})  
    innings: Optional[list[shared_inning.Inning]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Innings'), 'exclude': lambda f: f is None }})  
    is_closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsClosed'), 'exclude': lambda f: f is None }})  
    last_play: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastPlay'), 'exclude': lambda f: f is None }})  
    losing_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LosingPitcher'), 'exclude': lambda f: f is None }})  
    losing_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LosingPitcherID'), 'exclude': lambda f: f is None }})  
    neutral_venue: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NeutralVenue'), 'exclude': lambda f: f is None }})  
    outs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outs'), 'exclude': lambda f: f is None }})  
    over_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverPayout'), 'exclude': lambda f: f is None }})  
    over_under: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverUnder'), 'exclude': lambda f: f is None }})  
    point_spread: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpread'), 'exclude': lambda f: f is None }})  
    point_spread_away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadAwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    point_spread_home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadHomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    rescheduled_from_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RescheduledFromGameID'), 'exclude': lambda f: f is None }})  
    rescheduled_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RescheduledGameID'), 'exclude': lambda f: f is None }})  
    runner_on_first: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunnerOnFirst'), 'exclude': lambda f: f is None }})  
    runner_on_second: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunnerOnSecond'), 'exclude': lambda f: f is None }})  
    runner_on_third: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunnerOnThird'), 'exclude': lambda f: f is None }})  
    saving_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SavingPitcher'), 'exclude': lambda f: f is None }})  
    saving_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SavingPitcherID'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    series_info: Optional[shared_series.Series] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeriesInfo'), 'exclude': lambda f: f is None }})  
    stadium_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StadiumID'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    strikes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Strikes'), 'exclude': lambda f: f is None }})  
    under_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnderPayout'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Updated'), 'exclude': lambda f: f is None }})  
    winning_pitcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WinningPitcher'), 'exclude': lambda f: f is None }})  
    winning_pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WinningPitcherID'), 'exclude': lambda f: f is None }})  
    