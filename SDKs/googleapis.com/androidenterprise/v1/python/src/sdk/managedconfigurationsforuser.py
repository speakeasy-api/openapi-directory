"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Managedconfigurationsforuser:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidenterprise_managedconfigurationsforuser_delete(self, request: operations.AndroidenterpriseManagedconfigurationsforuserDeleteRequest, security: operations.AndroidenterpriseManagedconfigurationsforuserDeleteSecurity) -> operations.AndroidenterpriseManagedconfigurationsforuserDeleteResponse:
        r"""Removes a per-user managed configuration for an app for the specified user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsforuserDeleteRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsforuserDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsforuserDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidenterprise_managedconfigurationsforuser_get(self, request: operations.AndroidenterpriseManagedconfigurationsforuserGetRequest, security: operations.AndroidenterpriseManagedconfigurationsforuserGetSecurity) -> operations.AndroidenterpriseManagedconfigurationsforuserGetResponse:
        r"""Retrieves details of a per-user managed configuration for an app for the specified user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsforuserGetRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsforuserGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsforuserGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfiguration])
                res.managed_configuration = out

        return res

    def androidenterprise_managedconfigurationsforuser_list(self, request: operations.AndroidenterpriseManagedconfigurationsforuserListRequest, security: operations.AndroidenterpriseManagedconfigurationsforuserListSecurity) -> operations.AndroidenterpriseManagedconfigurationsforuserListResponse:
        r"""Lists all the per-user managed configurations for the specified user. Only the ID is set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsforuserListRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsforuserListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsforuserListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfigurationsForUserListResponse])
                res.managed_configurations_for_user_list_response = out

        return res

    def androidenterprise_managedconfigurationsforuser_update(self, request: operations.AndroidenterpriseManagedconfigurationsforuserUpdateRequest, security: operations.AndroidenterpriseManagedconfigurationsforuserUpdateSecurity) -> operations.AndroidenterpriseManagedconfigurationsforuserUpdateResponse:
        r"""Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsforuserUpdateRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "managed_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsforuserUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsforuserUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfiguration])
                res.managed_configuration = out

        return res

    