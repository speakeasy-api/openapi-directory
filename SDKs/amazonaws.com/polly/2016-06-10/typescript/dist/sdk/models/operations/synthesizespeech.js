"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthesizeSpeechResponse = exports.SynthesizeSpeechRequest = exports.SynthesizeSpeechRequestBody = exports.SynthesizeSpeechRequestBodyVoiceIdEnum = exports.SynthesizeSpeechRequestBodyTextTypeEnum = exports.SynthesizeSpeechRequestBodyOutputFormatEnum = exports.SynthesizeSpeechRequestBodyLanguageCodeEnum = exports.SynthesizeSpeechRequestBodyEngineEnum = void 0;
var utils_1 = require("../../../internal/utils");
var shared = __importStar(require("../shared"));
var class_transformer_1 = require("class-transformer");
/**
 * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>
 */
var SynthesizeSpeechRequestBodyEngineEnum;
(function (SynthesizeSpeechRequestBodyEngineEnum) {
    SynthesizeSpeechRequestBodyEngineEnum["Standard"] = "standard";
    SynthesizeSpeechRequestBodyEngineEnum["Neural"] = "neural";
})(SynthesizeSpeechRequestBodyEngineEnum = exports.SynthesizeSpeechRequestBodyEngineEnum || (exports.SynthesizeSpeechRequestBodyEngineEnum = {}));
/**
 * <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
 */
var SynthesizeSpeechRequestBodyLanguageCodeEnum;
(function (SynthesizeSpeechRequestBodyLanguageCodeEnum) {
    SynthesizeSpeechRequestBodyLanguageCodeEnum["Arb"] = "arb";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["CmnCN"] = "cmn-CN";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["CyGB"] = "cy-GB";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["DaDK"] = "da-DK";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["DEDE"] = "de-DE";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnAU"] = "en-AU";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnGB"] = "en-GB";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnGBWLS"] = "en-GB-WLS";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnIN"] = "en-IN";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnUS"] = "en-US";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["ESES"] = "es-ES";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EsMX"] = "es-MX";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EsUS"] = "es-US";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["FrCA"] = "fr-CA";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["FRFR"] = "fr-FR";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["ISIS"] = "is-IS";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["ITIT"] = "it-IT";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["JaJP"] = "ja-JP";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["HiIN"] = "hi-IN";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["KoKR"] = "ko-KR";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["NbNO"] = "nb-NO";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["NLNL"] = "nl-NL";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["PLPL"] = "pl-PL";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["PtBR"] = "pt-BR";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["PTPT"] = "pt-PT";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["RORO"] = "ro-RO";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["RURU"] = "ru-RU";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["SvSE"] = "sv-SE";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["TRTR"] = "tr-TR";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnNZ"] = "en-NZ";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["EnZA"] = "en-ZA";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["CaES"] = "ca-ES";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["DeAT"] = "de-AT";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["YueCN"] = "yue-CN";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["ArAE"] = "ar-AE";
    SynthesizeSpeechRequestBodyLanguageCodeEnum["FIFI"] = "fi-FI";
})(SynthesizeSpeechRequestBodyLanguageCodeEnum = exports.SynthesizeSpeechRequestBodyLanguageCodeEnum || (exports.SynthesizeSpeechRequestBodyLanguageCodeEnum = {}));
/**
 * <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
 */
var SynthesizeSpeechRequestBodyOutputFormatEnum;
(function (SynthesizeSpeechRequestBodyOutputFormatEnum) {
    SynthesizeSpeechRequestBodyOutputFormatEnum["Json"] = "json";
    SynthesizeSpeechRequestBodyOutputFormatEnum["Mp3"] = "mp3";
    SynthesizeSpeechRequestBodyOutputFormatEnum["OggVorbis"] = "ogg_vorbis";
    SynthesizeSpeechRequestBodyOutputFormatEnum["Pcm"] = "pcm";
})(SynthesizeSpeechRequestBodyOutputFormatEnum = exports.SynthesizeSpeechRequestBodyOutputFormatEnum || (exports.SynthesizeSpeechRequestBodyOutputFormatEnum = {}));
/**
 *  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/ssml.html">Using SSML</a>.
 */
var SynthesizeSpeechRequestBodyTextTypeEnum;
(function (SynthesizeSpeechRequestBodyTextTypeEnum) {
    SynthesizeSpeechRequestBodyTextTypeEnum["Ssml"] = "ssml";
    SynthesizeSpeechRequestBodyTextTypeEnum["Text"] = "text";
})(SynthesizeSpeechRequestBodyTextTypeEnum = exports.SynthesizeSpeechRequestBodyTextTypeEnum || (exports.SynthesizeSpeechRequestBodyTextTypeEnum = {}));
/**
 *  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation.
 */
var SynthesizeSpeechRequestBodyVoiceIdEnum;
(function (SynthesizeSpeechRequestBodyVoiceIdEnum) {
    SynthesizeSpeechRequestBodyVoiceIdEnum["Aditi"] = "Aditi";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Amy"] = "Amy";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Astrid"] = "Astrid";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Bianca"] = "Bianca";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Brian"] = "Brian";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Camila"] = "Camila";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Carla"] = "Carla";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Carmen"] = "Carmen";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Celine"] = "Celine";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Chantal"] = "Chantal";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Conchita"] = "Conchita";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Cristiano"] = "Cristiano";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Dora"] = "Dora";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Emma"] = "Emma";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Enrique"] = "Enrique";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ewa"] = "Ewa";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Filiz"] = "Filiz";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Gabrielle"] = "Gabrielle";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Geraint"] = "Geraint";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Giorgio"] = "Giorgio";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Gwyneth"] = "Gwyneth";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Hans"] = "Hans";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ines"] = "Ines";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ivy"] = "Ivy";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Jacek"] = "Jacek";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Jan"] = "Jan";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Joanna"] = "Joanna";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Joey"] = "Joey";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Justin"] = "Justin";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Karl"] = "Karl";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Kendra"] = "Kendra";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Kevin"] = "Kevin";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Kimberly"] = "Kimberly";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Lea"] = "Lea";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Liv"] = "Liv";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Lotte"] = "Lotte";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Lucia"] = "Lucia";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Lupe"] = "Lupe";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Mads"] = "Mads";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Maja"] = "Maja";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Marlene"] = "Marlene";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Mathieu"] = "Mathieu";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Matthew"] = "Matthew";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Maxim"] = "Maxim";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Mia"] = "Mia";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Miguel"] = "Miguel";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Mizuki"] = "Mizuki";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Naja"] = "Naja";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Nicole"] = "Nicole";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Olivia"] = "Olivia";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Penelope"] = "Penelope";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Raveena"] = "Raveena";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ricardo"] = "Ricardo";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ruben"] = "Ruben";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Russell"] = "Russell";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Salli"] = "Salli";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Seoyeon"] = "Seoyeon";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Takumi"] = "Takumi";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Tatyana"] = "Tatyana";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Vicki"] = "Vicki";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Vitoria"] = "Vitoria";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Zeina"] = "Zeina";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Zhiyu"] = "Zhiyu";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Aria"] = "Aria";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ayanda"] = "Ayanda";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Arlet"] = "Arlet";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Hannah"] = "Hannah";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Arthur"] = "Arthur";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Daniel"] = "Daniel";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Liam"] = "Liam";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Pedro"] = "Pedro";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Kajal"] = "Kajal";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Hiujin"] = "Hiujin";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Laura"] = "Laura";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Elin"] = "Elin";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ida"] = "Ida";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Suvi"] = "Suvi";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ola"] = "Ola";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Hala"] = "Hala";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Andres"] = "Andres";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Sergio"] = "Sergio";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Remi"] = "Remi";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Adriano"] = "Adriano";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Thiago"] = "Thiago";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Ruth"] = "Ruth";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Stephen"] = "Stephen";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Kazuha"] = "Kazuha";
    SynthesizeSpeechRequestBodyVoiceIdEnum["Tomoko"] = "Tomoko";
})(SynthesizeSpeechRequestBodyVoiceIdEnum = exports.SynthesizeSpeechRequestBodyVoiceIdEnum || (exports.SynthesizeSpeechRequestBodyVoiceIdEnum = {}));
var SynthesizeSpeechRequestBody = /** @class */ (function (_super) {
    __extends(SynthesizeSpeechRequestBody, _super);
    function SynthesizeSpeechRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Engine" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "engine", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LanguageCode" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "languageCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LexiconNames" }),
        __metadata("design:type", Array)
    ], SynthesizeSpeechRequestBody.prototype, "lexiconNames", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OutputFormat" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "outputFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SampleRate" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "sampleRate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SpeechMarkTypes" }),
        __metadata("design:type", Array)
    ], SynthesizeSpeechRequestBody.prototype, "speechMarkTypes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Text" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "text", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TextType" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "textType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VoiceId" }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequestBody.prototype, "voiceId", void 0);
    return SynthesizeSpeechRequestBody;
}(utils_1.SpeakeasyBase));
exports.SynthesizeSpeechRequestBody = SynthesizeSpeechRequestBody;
var SynthesizeSpeechRequest = /** @class */ (function (_super) {
    __extends(SynthesizeSpeechRequest, _super);
    function SynthesizeSpeechRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", SynthesizeSpeechRequestBody)
    ], SynthesizeSpeechRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzAlgorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzContentSha256", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Credential",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzCredential", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Date",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzSecurityToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Signature",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzSignature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
        }),
        __metadata("design:type", String)
    ], SynthesizeSpeechRequest.prototype, "xAmzSignedHeaders", void 0);
    return SynthesizeSpeechRequest;
}(utils_1.SpeakeasyBase));
exports.SynthesizeSpeechRequest = SynthesizeSpeechRequest;
var SynthesizeSpeechResponse = /** @class */ (function (_super) {
    __extends(SynthesizeSpeechResponse, _super);
    function SynthesizeSpeechResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], SynthesizeSpeechResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "engineNotSupportedException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "invalidSampleRateException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "invalidSsmlException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "languageNotSupportedException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "lexiconNotFoundException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "marksNotSupportedForFormatException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "serviceFailureException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], SynthesizeSpeechResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "ssmlMarksNotSupportedForTextTypeException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.SynthesizeSpeechOutput)
    ], SynthesizeSpeechResponse.prototype, "synthesizeSpeechOutput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], SynthesizeSpeechResponse.prototype, "textLengthExceededException", void 0);
    return SynthesizeSpeechResponse;
}(utils_1.SpeakeasyBase));
exports.SynthesizeSpeechResponse = SynthesizeSpeechResponse;
