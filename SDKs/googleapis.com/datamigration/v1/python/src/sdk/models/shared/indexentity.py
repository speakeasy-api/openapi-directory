"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IndexEntity:
    r"""Index is not used as an independent entity, it is retrieved as part of a Table entity."""
    
    custom_features: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFeatures'), 'exclude': lambda f: f is None }})
    r"""Custom engine specific features."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the index."""  
    table_columns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableColumns'), 'exclude': lambda f: f is None }})
    r"""Table columns used as part of the Index, for example B-TREE index should list the columns which constitutes the index."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of index, for example B-TREE."""  
    unique: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique'), 'exclude': lambda f: f is None }})
    r"""Boolean value indicating whether the index is unique."""  
    