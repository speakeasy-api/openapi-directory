// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BooksMyconfigRequestAccessSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// BooksMyconfigRequestAccessLicenseTypesEnum - The type of access license to request. If not specified, the default is BOTH.
type BooksMyconfigRequestAccessLicenseTypesEnum string

const (
	BooksMyconfigRequestAccessLicenseTypesEnumLicenseTypesUndefined BooksMyconfigRequestAccessLicenseTypesEnum = "LICENSE_TYPES_UNDEFINED"
	BooksMyconfigRequestAccessLicenseTypesEnumBoth                  BooksMyconfigRequestAccessLicenseTypesEnum = "BOTH"
	BooksMyconfigRequestAccessLicenseTypesEnumConcurrent            BooksMyconfigRequestAccessLicenseTypesEnum = "CONCURRENT"
	BooksMyconfigRequestAccessLicenseTypesEnumDownload              BooksMyconfigRequestAccessLicenseTypesEnum = "DOWNLOAD"
)

func (e BooksMyconfigRequestAccessLicenseTypesEnum) ToPointer() *BooksMyconfigRequestAccessLicenseTypesEnum {
	return &e
}

func (e *BooksMyconfigRequestAccessLicenseTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LICENSE_TYPES_UNDEFINED":
		fallthrough
	case "BOTH":
		fallthrough
	case "CONCURRENT":
		fallthrough
	case "DOWNLOAD":
		*e = BooksMyconfigRequestAccessLicenseTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksMyconfigRequestAccessLicenseTypesEnum: %v", v)
	}
}

type BooksMyconfigRequestAccessRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// The device/version ID from which to request the restrictions.
	Cpksver string `queryParam:"style=form,explode=true,name=cpksver"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The type of access license to request. If not specified, the default is BOTH.
	LicenseTypes *BooksMyconfigRequestAccessLicenseTypesEnum `queryParam:"style=form,explode=true,name=licenseTypes"`
	// ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// The client nonce value.
	Nonce string `queryParam:"style=form,explode=true,name=nonce"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// String to identify the originator of this request.
	Source string `queryParam:"style=form,explode=true,name=source"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// The volume to request concurrent/download restrictions for.
	VolumeID string `queryParam:"style=form,explode=true,name=volumeId"`
}

type BooksMyconfigRequestAccessResponse struct {
	ContentType string
	// Successful response
	RequestAccessData *shared.RequestAccessData
	StatusCode        int
	RawResponse       *http.Response
}
