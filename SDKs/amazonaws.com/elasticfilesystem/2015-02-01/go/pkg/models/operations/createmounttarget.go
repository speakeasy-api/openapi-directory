// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateMountTargetRequestBody struct {
	// The ID of the file system for which to create the mount target.
	FileSystemID string `json:"FileSystemId"`
	// Valid IPv4 address within the address range of the specified subnet.
	IPAddress *string `json:"IpAddress,omitempty"`
	// Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified.
	SecurityGroups []string `json:"SecurityGroups,omitempty"`
	// The ID of the subnet to add the mount target in. For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone.
	SubnetID string `json:"SubnetId"`
}

type CreateMountTargetRequest struct {
	RequestBody       CreateMountTargetRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateMountTargetResponse struct {
	// AvailabilityZonesMismatch
	AvailabilityZonesMismatch interface{}
	// BadRequest
	BadRequest  interface{}
	ContentType string
	// FileSystemNotFound
	FileSystemNotFound interface{}
	// IncorrectFileSystemLifeCycleState
	IncorrectFileSystemLifeCycleState interface{}
	// InternalServerError
	InternalServerError interface{}
	// IpAddressInUse
	IPAddressInUse interface{}
	// MountTargetConflict
	MountTargetConflict interface{}
	// Success
	MountTargetDescription *shared.MountTargetDescription
	// NetworkInterfaceLimitExceeded
	NetworkInterfaceLimitExceeded interface{}
	// NoFreeAddressesInSubnet
	NoFreeAddressesInSubnet interface{}
	// SecurityGroupLimitExceeded
	SecurityGroupLimitExceeded interface{}
	// SecurityGroupNotFound
	SecurityGroupNotFound interface{}
	StatusCode            int
	RawResponse           *http.Response
	// SubnetNotFound
	SubnetNotFound interface{}
	// UnsupportedAvailabilityZone
	UnsupportedAvailabilityZone interface{}
}
