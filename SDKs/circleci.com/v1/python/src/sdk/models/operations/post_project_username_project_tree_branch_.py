"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import build as shared_build
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostProjectUsernameProjectTreeBranchRequestBody:
    
    build_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build_parameters'), 'exclude': lambda f: f is None }})
    r"""Additional environment variables to inject into the build environment. A map of names to values."""  
    parallel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parallel'), 'exclude': lambda f: f is None }})
    r"""The number of containers to use to run the build. Default is null and the project default is used."""  
    revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})
    r"""The specific revision to build.
    Default is null and the head of the branch is used. Cannot be used with tag parameter.
    """  
    

@dataclasses.dataclass
class PostProjectUsernameProjectTreeBranchRequest:
    
    branch: str = dataclasses.field(metadata={'path_param': { 'field_name': 'branch', 'style': 'simple', 'explode': False }})
    r"""The branch name should be url-encoded."""  
    project: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project', 'style': 'simple', 'explode': False }})
    r"""XXXXXXXXX"""  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})
    r"""XXXXXXXXX"""  
    request_body: Optional[PostProjectUsernameProjectTreeBranchRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PostProjectUsernameProjectTreeBranchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    build: Optional[shared_build.Build] = dataclasses.field(default=None)
    r"""returns a summary of the build"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    