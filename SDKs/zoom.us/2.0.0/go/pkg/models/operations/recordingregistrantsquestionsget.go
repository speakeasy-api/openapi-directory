// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RecordingRegistrantsQuestionsGetSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type RecordingRegistrantsQuestionsGetPathParams struct {
	// To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
	//
	// To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type RecordingRegistrantsQuestionsGetRequest struct {
	PathParams RecordingRegistrantsQuestionsGetPathParams
	Security   RecordingRegistrantsQuestionsGetSecurity
}

// RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum - The type of registration question and answers.
type RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnumShort    RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnumSingle   RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "single"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnumMultiple RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum = "multiple"
)

func (e *RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single":
		fallthrough
	case "multiple":
		*e = RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions struct {
	// Answer choices for the question. Can not be used with Short answer type.
	Answers []string `json:"answers,omitempty"`
	// State whether registrants are required to answer custom questions or not.
	Required *bool `json:"required,omitempty"`
	// Title of the question.
	Title *string `json:"title,omitempty"`
	// The type of registration question and answers.
	Type *RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum - Field name.
type RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum string

const (
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumLastName              RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "last_name"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumAddress               RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "address"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumCity                  RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "city"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumCountry               RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "country"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumZip                   RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumState                 RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "state"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumPhone                 RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumIndustry              RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumOrg                   RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "org"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumJobTitle              RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnumComments              RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "last_name":
		fallthrough
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions struct {
	// Field name.
	FieldName *RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// State whether the field is required to be answered by the registrant or not.
	Required *bool `json:"required,omitempty"`
}

// RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions - Recording Registrant Questions
type RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions struct {
	// Array of Registrant Custom Questions
	CustomQuestions []RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty"`
	// Array of Registrant Questions
	Questions []RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions `json:"questions,omitempty"`
}

type RecordingRegistrantsQuestionsGetResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// Recording Registrant Question object returned.
	RecordingRegistrantQuestions *RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions
	StatusCode                   int
	RawResponse                  *http.Response
}
