"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TerminalSettingsTerminalLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_terminals_terminal_id_terminal_logos(self, request: operations.GetTerminalsTerminalIDTerminalLogosRequest, security: operations.GetTerminalsTerminalIDTerminalLogosSecurity) -> operations.GetTerminalsTerminalIDTerminalLogosResponse:
        r"""Get the terminal logo
        Returns the logo that is configured for the payment terminal identified in the path.
        The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTerminalsTerminalIDTerminalLogosRequest, base_url, '/terminals/{terminalId}/terminalLogos', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTerminalsTerminalIDTerminalLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Logo])
                res.logo = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_terminals_terminal_id_terminal_settings(self, request: operations.GetTerminalsTerminalIDTerminalSettingsRequest, security: operations.GetTerminalsTerminalIDTerminalSettingsSecurity) -> operations.GetTerminalsTerminalIDTerminalSettingsResponse:
        r"""Get terminal settings
        Returns the settings that are configured for the payment terminal identified in the path.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTerminalsTerminalIDTerminalSettingsRequest, base_url, '/terminals/{terminalId}/terminalSettings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTerminalsTerminalIDTerminalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalSettings])
                res.terminal_settings = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_terminals_terminal_id_terminal_logos(self, request: operations.PatchTerminalsTerminalIDTerminalLogosRequest, security: operations.PatchTerminalsTerminalIDTerminalLogosSecurity) -> operations.PatchTerminalsTerminalIDTerminalLogosResponse:
        r"""Update the logo
        Updates the logo for the payment terminal identified in the path.
        
        * To change the logo, specify the image file as a Base64-encoded string.
        * To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTerminalsTerminalIDTerminalLogosRequest, base_url, '/terminals/{terminalId}/terminalLogos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "logo", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTerminalsTerminalIDTerminalLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Logo])
                res.logo = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_terminals_terminal_id_terminal_settings(self, request: operations.PatchTerminalsTerminalIDTerminalSettingsRequest, security: operations.PatchTerminalsTerminalIDTerminalSettingsSecurity) -> operations.PatchTerminalsTerminalIDTerminalSettingsResponse:
        r"""Update terminal settings
        Updates the settings that are configured for the payment terminal identified in the path.
        
        * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.
        * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.
        * Objects that are not included in the request are not updated.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTerminalsTerminalIDTerminalSettingsRequest, base_url, '/terminals/{terminalId}/terminalSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "terminal_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTerminalsTerminalIDTerminalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalSettings])
                res.terminal_settings = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    