<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Address - Represents a postal address in a country. The address format is based 
 * 
 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
 * This format has dedicated fields for four address components: postal code, 
 * locality (city), administrative district (state, prefecture, or province), and 
 * sublocality (town or village). These components have dedicated fields in the 
 * `Address` object because software sometimes behaves differently based on them. 
 * For example, sales tax software may charge different amounts of sales tax 
 * based on the postal code, and some software is only available in 
 * certain states due to compliance reasons.
 * 
 * For the remaining address components, the `Address` type provides the 
 * `address_line_1` and `address_line_2` fields for free-form data entry. 
 * These fields are free-form because the remaining address components have 
 * too many variations around the world and typical software does not parse 
 * these components. These fields enable users to enter anything they want. 
 * 
 * Note that, in the current implementation, all other `Address` type fields are blank. 
 * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
 * `administrative_district_level_2`, `administrative_district_level_3`, 
 * `first_name`, `last_name`, and `organization`. 
 * 
 * When it comes to localization, the seller's language preferences 
 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
 * are ignored for addresses. Even though Square products (such as Square Point of Sale 
 * and the Seller Dashboard) mostly use a seller's language preference in 
 * communication, when it comes to addresses, they will use English for a US address, 
 * Japanese for an address in Japan, and so on.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Address
{
    /**
     * The first line of the address.
     * 
     * 
     * Fields that start with `address_line` provide the address's most specific
     * details, like street number, street name, and building name. They do *not*
     * provide less specific details like city, state/province, or country (these
     * details are provided in other fields).
     * 
     * @var ?string $addressLine1
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_line_1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $addressLine1 = null;
    
    /**
     * The second line of the address, if any.
     * 
     * @var ?string $addressLine2
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_line_2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $addressLine2 = null;
    
    /**
     * The third line of the address, if any.
     * 
     * @var ?string $addressLine3
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_line_3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $addressLine3 = null;
    
    /**
     * A civil entity within the address's country. In the US, this
     * 
     * is the state.
     * 
     * @var ?string $administrativeDistrictLevel1
     */
	#[\JMS\Serializer\Annotation\SerializedName('administrative_district_level_1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $administrativeDistrictLevel1 = null;
    
    /**
     * A civil entity within the address's `administrative_district_level_1`.
     * 
     * In the US, this is the county.
     * 
     * @var ?string $administrativeDistrictLevel2
     */
	#[\JMS\Serializer\Annotation\SerializedName('administrative_district_level_2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $administrativeDistrictLevel2 = null;
    
    /**
     * A civil entity within the address's `administrative_district_level_2`,
     * 
     * if any.
     * 
     * @var ?string $administrativeDistrictLevel3
     */
	#[\JMS\Serializer\Annotation\SerializedName('administrative_district_level_3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $administrativeDistrictLevel3 = null;
    
    /**
     * The address's country, in ISO 3166-1-alpha-2 format.
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
    /**
     * Optional first name when it's representing recipient.
     * 
     * @var ?string $firstName
     */
	#[\JMS\Serializer\Annotation\SerializedName('first_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $firstName = null;
    
    /**
     * Optional last name when it's representing recipient.
     * 
     * @var ?string $lastName
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastName = null;
    
    /**
     * The city or town of the address.
     * 
     * @var ?string $locality
     */
	#[\JMS\Serializer\Annotation\SerializedName('locality')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $locality = null;
    
    /**
     * Optional organization name when it's representing recipient.
     * 
     * @var ?string $organization
     */
	#[\JMS\Serializer\Annotation\SerializedName('organization')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $organization = null;
    
    /**
     * The address's postal code.
     * 
     * @var ?string $postalCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('postal_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $postalCode = null;
    
    /**
     * A civil region within the address's `locality`, if any.
     * 
     * @var ?string $sublocality
     */
	#[\JMS\Serializer\Annotation\SerializedName('sublocality')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sublocality = null;
    
    /**
     * A civil region within the address's `sublocality`, if any.
     * 
     * @var ?string $sublocality2
     */
	#[\JMS\Serializer\Annotation\SerializedName('sublocality_2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sublocality2 = null;
    
    /**
     * A civil region within the address's `sublocality_2`, if any.
     * 
     * @var ?string $sublocality3
     */
	#[\JMS\Serializer\Annotation\SerializedName('sublocality_3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sublocality3 = null;
    
	public function __construct()
	{
		$this->addressLine1 = null;
		$this->addressLine2 = null;
		$this->addressLine3 = null;
		$this->administrativeDistrictLevel1 = null;
		$this->administrativeDistrictLevel2 = null;
		$this->administrativeDistrictLevel3 = null;
		$this->country = null;
		$this->firstName = null;
		$this->lastName = null;
		$this->locality = null;
		$this->organization = null;
		$this->postalCode = null;
		$this->sublocality = null;
		$this->sublocality2 = null;
		$this->sublocality3 = null;
	}
}
