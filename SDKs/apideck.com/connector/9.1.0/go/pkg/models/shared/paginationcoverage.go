// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaginationCoverageModeEnum - How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
type PaginationCoverageModeEnum string

const (
	PaginationCoverageModeEnumNative  PaginationCoverageModeEnum = "native"
	PaginationCoverageModeEnumVirtual PaginationCoverageModeEnum = "virtual"
)

func (e *PaginationCoverageModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "native":
		fallthrough
	case "virtual":
		*e = PaginationCoverageModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaginationCoverageModeEnum: %s", s)
	}
}

type PaginationCoverage struct {
	// Indicates whether the connector supports changing the page size by using the limit parameter.
	LimitSupport *bool `json:"limit_support,omitempty"`
	// How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
	Mode *PaginationCoverageModeEnum `json:"mode,omitempty"`
	// Indicates whether the connector supports paging through results using the cursor parameter.
	PagingSupport *bool `json:"paging_support,omitempty"`
}
