// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PasswordValidationPolicyComplexityEnum - The complexity of the password.
type PasswordValidationPolicyComplexityEnum string

const (
	PasswordValidationPolicyComplexityEnumComplexityUnspecified PasswordValidationPolicyComplexityEnum = "COMPLEXITY_UNSPECIFIED"
	PasswordValidationPolicyComplexityEnumComplexityDefault     PasswordValidationPolicyComplexityEnum = "COMPLEXITY_DEFAULT"
)

func (e *PasswordValidationPolicyComplexityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMPLEXITY_UNSPECIFIED":
		fallthrough
	case "COMPLEXITY_DEFAULT":
		*e = PasswordValidationPolicyComplexityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordValidationPolicyComplexityEnum: %s", s)
	}
}

// PasswordValidationPolicy - Database instance local user password validation policy
type PasswordValidationPolicy struct {
	// The complexity of the password.
	Complexity *PasswordValidationPolicyComplexityEnum `json:"complexity,omitempty"`
	// Disallow username as a part of the password.
	DisallowUsernameSubstring *bool `json:"disallowUsernameSubstring,omitempty"`
	// Whether the password policy is enabled or not.
	EnablePasswordPolicy *bool `json:"enablePasswordPolicy,omitempty"`
	// Minimum number of characters allowed.
	MinLength *int `json:"minLength,omitempty"`
	// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
	PasswordChangeInterval *string `json:"passwordChangeInterval,omitempty"`
	// Number of previous passwords that cannot be reused.
	ReuseInterval *int `json:"reuseInterval,omitempty"`
}
