// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetQueryExecutionXAmzTargetEnum
type BatchGetQueryExecutionXAmzTargetEnum string

const (
	BatchGetQueryExecutionXAmzTargetEnumAmazonAthenaBatchGetQueryExecution BatchGetQueryExecutionXAmzTargetEnum = "AmazonAthena.BatchGetQueryExecution"
)

func (e BatchGetQueryExecutionXAmzTargetEnum) ToPointer() *BatchGetQueryExecutionXAmzTargetEnum {
	return &e
}

func (e *BatchGetQueryExecutionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonAthena.BatchGetQueryExecution":
		*e = BatchGetQueryExecutionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetQueryExecutionXAmzTargetEnum: %v", v)
	}
}

type BatchGetQueryExecutionRequest struct {
	BatchGetQueryExecutionInput shared.BatchGetQueryExecutionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  BatchGetQueryExecutionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetQueryExecutionResponse struct {
	// Success
	BatchGetQueryExecutionOutput *shared.BatchGetQueryExecutionOutput
	ContentType                  string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
