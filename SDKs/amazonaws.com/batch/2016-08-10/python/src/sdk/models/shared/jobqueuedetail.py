"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import computeenvironmentorder as shared_computeenvironmentorder
from ..shared import jqstate_enum as shared_jqstate_enum
from ..shared import jqstatus_enum as shared_jqstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobQueueDetail:
    r"""An object that represents the details for an Batch job queue."""
    
    compute_environment_order: list[shared_computeenvironmentorder.ComputeEnvironmentOrder] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeEnvironmentOrder') }})  
    job_queue_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobQueueArn') }})  
    job_queue_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobQueueName') }})  
    priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority') }})  
    state: shared_jqstate_enum.JQStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    scheduling_policy_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingPolicyArn'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_jqstatus_enum.JQStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    