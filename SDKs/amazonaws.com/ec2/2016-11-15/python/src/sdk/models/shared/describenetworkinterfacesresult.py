"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesAssociation:
    r"""The association information for an Elastic IP address (IPv4) associated with the network interface."""
    
    allocation_id: Optional[str] = dataclasses.field(default=None)  
    association_id: Optional[str] = dataclasses.field(default=None)  
    carrier_ip: Optional[str] = dataclasses.field(default=None)  
    customer_owned_ip: Optional[str] = dataclasses.field(default=None)  
    ip_owner_id: Optional[str] = dataclasses.field(default=None)  
    public_dns_name: Optional[str] = dataclasses.field(default=None)  
    public_ip: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecificationEnaSrdUDPSpecification:
    r"""ENA Express configuration for UDP network traffic."""
    
    ena_srd_udp_enabled: Optional[bool] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecification:
    r"""Configures ENA Express for the network interface that this action attaches to the instance."""
    
    ena_srd_enabled: Optional[bool] = dataclasses.field(default=None)  
    ena_srd_udp_specification: Optional[DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecificationEnaSrdUDPSpecification] = dataclasses.field(default=None)  
    
class DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum(str, Enum):
    r"""The attachment state."""
    ATTACHING = 'attaching'
    ATTACHED = 'attached'
    DETACHING = 'detaching'
    DETACHED = 'detached'


@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesAttachment:
    r"""The network interface attachment."""
    
    attachment_id: Optional[str] = dataclasses.field(default=None)  
    attach_time: Optional[datetime] = dataclasses.field(default=None)  
    delete_on_termination: Optional[bool] = dataclasses.field(default=None)  
    device_index: Optional[int] = dataclasses.field(default=None)  
    ena_srd_specification: Optional[DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecification] = dataclasses.field(default=None)  
    instance_id: Optional[str] = dataclasses.field(default=None)  
    instance_owner_id: Optional[str] = dataclasses.field(default=None)  
    network_card_index: Optional[int] = dataclasses.field(default=None)  
    status: Optional[DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesGroups:
    r"""Describes a security group."""
    
    group_id: Optional[str] = dataclasses.field(default=None)  
    group_name: Optional[str] = dataclasses.field(default=None)  
    
class DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum(str, Enum):
    r"""The type of network interface."""
    INTERFACE = 'interface'
    NAT_GATEWAY = 'natGateway'
    EFA = 'efa'
    TRUNK = 'trunk'
    LOAD_BALANCER = 'load_balancer'
    NETWORK_LOAD_BALANCER = 'network_load_balancer'
    VPC_ENDPOINT = 'vpc_endpoint'
    BRANCH = 'branch'
    TRANSIT_GATEWAY = 'transit_gateway'
    LAMBDA = 'lambda'
    QUICKSIGHT = 'quicksight'
    GLOBAL_ACCELERATOR_MANAGED = 'global_accelerator_managed'
    API_GATEWAY_MANAGED = 'api_gateway_managed'
    GATEWAY_LOAD_BALANCER = 'gateway_load_balancer'
    GATEWAY_LOAD_BALANCER_ENDPOINT = 'gateway_load_balancer_endpoint'
    IOT_RULES_MANAGED = 'iot_rules_managed'
    AWS_CODESTAR_CONNECTIONS_MANAGED = 'aws_codestar_connections_managed'


@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesIpv4Prefixes:
    r"""Describes an IPv4 prefix."""
    
    ipv4_prefix: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesIpv6Addresses:
    r"""Describes an IPv6 address associated with a network interface."""
    
    ipv6_address: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesIpv6Prefixes:
    r"""Describes the IPv6 prefix."""
    
    ipv6_prefix: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddressesAssociation:
    r"""The association information for an Elastic IP address (IPv4) associated with the network interface."""
    
    allocation_id: Optional[str] = dataclasses.field(default=None)  
    association_id: Optional[str] = dataclasses.field(default=None)  
    carrier_ip: Optional[str] = dataclasses.field(default=None)  
    customer_owned_ip: Optional[str] = dataclasses.field(default=None)  
    ip_owner_id: Optional[str] = dataclasses.field(default=None)  
    public_dns_name: Optional[str] = dataclasses.field(default=None)  
    public_ip: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddresses:
    r"""Describes the private IPv4 address of a network interface."""
    
    association: Optional[DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddressesAssociation] = dataclasses.field(default=None)  
    primary: Optional[bool] = dataclasses.field(default=None)  
    private_dns_name: Optional[str] = dataclasses.field(default=None)  
    private_ip_address: Optional[str] = dataclasses.field(default=None)  
    
class DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum(str, Enum):
    r"""The status of the network interface."""
    AVAILABLE = 'available'
    ASSOCIATED = 'associated'
    ATTACHING = 'attaching'
    IN_USE = 'in-use'
    DETACHING = 'detaching'


@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfacesTagSet:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResultNetworkInterfaces:
    r"""Describes a network interface."""
    
    association: Optional[DescribeNetworkInterfacesResultNetworkInterfacesAssociation] = dataclasses.field(default=None)  
    attachment: Optional[DescribeNetworkInterfacesResultNetworkInterfacesAttachment] = dataclasses.field(default=None)  
    availability_zone: Optional[str] = dataclasses.field(default=None)  
    deny_all_igw_traffic: Optional[bool] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    groups: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesGroups]] = dataclasses.field(default=None)  
    interface_type: Optional[DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum] = dataclasses.field(default=None)  
    ipv4_prefixes: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesIpv4Prefixes]] = dataclasses.field(default=None)  
    ipv6_address: Optional[str] = dataclasses.field(default=None)  
    ipv6_addresses: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesIpv6Addresses]] = dataclasses.field(default=None)  
    ipv6_native: Optional[bool] = dataclasses.field(default=None)  
    ipv6_prefixes: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesIpv6Prefixes]] = dataclasses.field(default=None)  
    mac_address: Optional[str] = dataclasses.field(default=None)  
    network_interface_id: Optional[str] = dataclasses.field(default=None)  
    outpost_arn: Optional[str] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    private_dns_name: Optional[str] = dataclasses.field(default=None)  
    private_ip_address: Optional[str] = dataclasses.field(default=None)  
    private_ip_addresses: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddresses]] = dataclasses.field(default=None)  
    requester_id: Optional[str] = dataclasses.field(default=None)  
    requester_managed: Optional[bool] = dataclasses.field(default=None)  
    source_dest_check: Optional[bool] = dataclasses.field(default=None)  
    status: Optional[DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum] = dataclasses.field(default=None)  
    subnet_id: Optional[str] = dataclasses.field(default=None)  
    tag_set: Optional[list[DescribeNetworkInterfacesResultNetworkInterfacesTagSet]] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeNetworkInterfacesResult:
    r"""Success"""
    
    network_interfaces: Optional[list[DescribeNetworkInterfacesResultNetworkInterfaces]] = dataclasses.field(default=None)  
    next_token: Optional[str] = dataclasses.field(default=None)  
    