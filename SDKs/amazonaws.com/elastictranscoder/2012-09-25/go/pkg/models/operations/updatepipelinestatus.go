// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdatePipelineStatusPathParams struct {
	// The identifier of the pipeline to update.
	ID string `pathParam:"style=simple,explode=false,name=Id"`
}

type UpdatePipelineStatusHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdatePipelineStatusRequestBody struct {
	// <p>The desired status of the pipeline:</p> <ul> <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li> <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li> </ul>
	Status string `json:"Status"`
}

type UpdatePipelineStatusRequest struct {
	PathParams UpdatePipelineStatusPathParams
	Headers    UpdatePipelineStatusHeaders
	Request    UpdatePipelineStatusRequestBody `request:"mediaType=application/json"`
}

type UpdatePipelineStatusResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// IncompatibleVersionException
	IncompatibleVersionException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	StatusCode               int
	RawResponse              *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdatePipelineStatusResponse *shared.UpdatePipelineStatusResponse
	// ValidationException
	ValidationException interface{}
}
