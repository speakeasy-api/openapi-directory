"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import instancegroupstate_enum as shared_instancegroupstate_enum
from ..shared import instanceroletype_enum as shared_instanceroletype_enum
from ..shared import markettype_enum as shared_markettype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceGroupDetail:
    r"""Detailed information about an instance group."""
    
    creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    instance_request_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRequestCount') }})  
    instance_role: shared_instanceroletype_enum.InstanceRoleTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRole') }})  
    instance_running_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRunningCount') }})  
    instance_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType') }})  
    market: shared_markettype_enum.MarketTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Market') }})  
    state: shared_instancegroupstate_enum.InstanceGroupStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State') }})  
    bid_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BidPrice'), 'exclude': lambda f: f is None }})  
    custom_ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomAmiId'), 'exclude': lambda f: f is None }})  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    instance_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceGroupId'), 'exclude': lambda f: f is None }})  
    last_state_change_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastStateChangeReason'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    ready_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadyDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    start_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    