"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestGetTestRunStateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class TestGetTestRunStateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    test_run_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'test_run_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the test run"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestGetTestRunStateTestRunState:
    r"""Current status of a test run"""
    
    exit_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exit_code'), 'exclude': lambda f: f is None }})
    r"""The exit code that the client should use when exiting. Used for indicating status to the caller of the client.
    0: test run completes with no failing tests
    1: test run completes with at least one failing test
    2: test run failed to complete. Status for test run is unknown
    """  
    message: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Multi-line message that describes the status"""  
    wait_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wait_time'), 'exclude': lambda f: f is None }})
    r"""Time (in seconds) that the client should wait for before checking the status again"""  
    

@dataclasses.dataclass
class TestGetTestRunStateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_run_state: Optional[TestGetTestRunStateTestRunState] = dataclasses.field(default=None)
    r"""OK"""  
    