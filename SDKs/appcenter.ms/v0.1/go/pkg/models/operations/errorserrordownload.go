// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsErrorDownloadSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsErrorDownloadFormatEnum - the format of the crash log
type ErrorsErrorDownloadFormatEnum string

const (
	ErrorsErrorDownloadFormatEnumJSON ErrorsErrorDownloadFormatEnum = "json"
	ErrorsErrorDownloadFormatEnumTxt  ErrorsErrorDownloadFormatEnum = "txt"
)

func (e *ErrorsErrorDownloadFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "txt":
		*e = ErrorsErrorDownloadFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorDownloadFormatEnum: %s", s)
	}
}

type ErrorsErrorDownloadRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// the format of the crash log
	Format *ErrorsErrorDownloadFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorDownloadDefaultApplicationJSONError struct {
	Code    ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

// ErrorsErrorDownloadDefaultApplicationJSON - Error code with reason
type ErrorsErrorDownloadDefaultApplicationJSON struct {
	Error ErrorsErrorDownloadDefaultApplicationJSONError `json:"error"`
}

type ErrorsErrorDownloadResponse struct {
	ContentType string
	// Error details.
	ErrorsErrorDownload200ApplicationJSONFileObject map[string]interface{}
	// Error code with reason
	ErrorsErrorDownloadDefaultApplicationJSONObject *ErrorsErrorDownloadDefaultApplicationJSON
	StatusCode                                      int
	RawResponse                                     *http.Response
}
