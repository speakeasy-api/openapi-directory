"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class AttachmentTypeEnum(str, Enum):
    r"""The type of the attachment."""
    UNKNOWN = 'unknown'
    IMAGE = 'image'
    GIFV = 'gifv'
    VIDEO = 'video'
    AUDIO = 'audio'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Attachment:
    r"""Represents a file or media attachment that can be added to a status.
    https://docs.joinmastodon.org/entities/attachment/
    """
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number"""  
    preview_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preview_url') }})
    r"""The location of a scaled-down preview of the attachment."""  
    type: AttachmentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the attachment."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The location of the original full-size attachment."""  
    blurhash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blurhash'), 'exclude': lambda f: f is None }})
    r"""A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load."""  
    meta: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Metadata returned by Paperclip."""  
    remote_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_url'), 'exclude': lambda f: f is None }})
    r"""The location of the full-size original attachment on the remote website. String or null if the attachment is local."""  
    text_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_url'), 'exclude': lambda f: f is None }})
    r"""A shorter URL for the attachment."""  
    