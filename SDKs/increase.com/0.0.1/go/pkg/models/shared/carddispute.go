// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CardDisputeCardDisputeAcceptance - If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.
type CardDisputeCardDisputeAcceptance struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
	AcceptedAt time.Time `json:"accepted_at"`
	// The identifier of the Card Dispute that was accepted.
	CardDisputeID string `json:"card_dispute_id"`
	// The identifier of the Transaction that was created to return the disputed funds to your account.
	TransactionID string `json:"transaction_id"`
}

// CardDisputeCardDisputeRejection - If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.
type CardDisputeCardDisputeRejection struct {
	// The identifier of the Card Dispute that was rejected.
	CardDisputeID string `json:"card_dispute_id"`
	// Why the Card Dispute was rejected.
	Explanation string `json:"explanation"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.
	RejectedAt time.Time `json:"rejected_at"`
}

// CardDisputeStatusEnum - The results of the Dispute investigation.
type CardDisputeStatusEnum string

const (
	CardDisputeStatusEnumPendingReviewing CardDisputeStatusEnum = "pending_reviewing"
	CardDisputeStatusEnumAccepted         CardDisputeStatusEnum = "accepted"
	CardDisputeStatusEnumRejected         CardDisputeStatusEnum = "rejected"
)

func (e CardDisputeStatusEnum) ToPointer() *CardDisputeStatusEnum {
	return &e
}

func (e *CardDisputeStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_reviewing":
		fallthrough
	case "accepted":
		fallthrough
	case "rejected":
		*e = CardDisputeStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardDisputeStatusEnum: %v", v)
	}
}

// CardDisputeTypeEnum - A constant representing the object's type. For this resource it will always be `card_dispute`.
type CardDisputeTypeEnum string

const (
	CardDisputeTypeEnumCardDispute CardDisputeTypeEnum = "card_dispute"
)

func (e CardDisputeTypeEnum) ToPointer() *CardDisputeTypeEnum {
	return &e
}

func (e *CardDisputeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_dispute":
		*e = CardDisputeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardDisputeTypeEnum: %v", v)
	}
}

// CardDispute - If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate.
type CardDispute struct {
	// If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.
	Acceptance CardDisputeCardDisputeAcceptance `json:"acceptance"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
	CreatedAt time.Time `json:"created_at"`
	// The identifier of the Transaction that was disputed.
	DisputedTransactionID string `json:"disputed_transaction_id"`
	// Why you disputed the Transaction in question.
	Explanation string `json:"explanation"`
	// The Card Dispute identifier.
	ID string `json:"id"`
	// If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.
	Rejection CardDisputeCardDisputeRejection `json:"rejection"`
	// The results of the Dispute investigation.
	Status CardDisputeStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `card_dispute`.
	Type CardDisputeTypeEnum `json:"type"`
}
