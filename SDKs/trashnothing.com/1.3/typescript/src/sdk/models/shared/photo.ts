/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class PhotoImages extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

export class Photo extends SpeakeasyBase {
  /**
   * A blurhash of the photo that can be used as a placeholder while the photo is loading (see: https://github.com/woltapp/blurhash). May be null if no blurhash is available and the length of the blurhash can vary based on the photo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blurhash" })
  blurhash?: string;

  /**
   * All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
   */
  @SpeakeasyMetadata({ elemType: PhotoImages })
  @Expose({ name: "images" })
  @Type(() => PhotoImages)
  images?: PhotoImages[];

  @SpeakeasyMetadata()
  @Expose({ name: "photo_id" })
  photoId?: string;

  /**
   * A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnail" })
  thumbnail?: string;

  /**
   * A URL to a large version of this photo (but not necessarily the largest size available).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
