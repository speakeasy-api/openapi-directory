"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelcatalog as shared_channelcatalog
from ..shared import channelcataloglistlinks as shared_channelcataloglistlinks
from ..shared import channelcataloglistlovlinks as shared_channelcataloglistlovlinks
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalogList:
    r"""This is the index of the channel catalog API"""
    
    channel_catalogs: Optional[dict[str, shared_channelcatalog.ChannelCatalog]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCatalogs'), 'exclude': lambda f: f is None }})
    r"""The channel catalog list. The key is the channel catalog identifier"""  
    links: Optional[shared_channelcataloglistlinks.ChannelCatalogListLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc..."""  
    lov_links: Optional[shared_channelcataloglistlovlinks.ChannelCatalogListLovLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovLinks'), 'exclude': lambda f: f is None }})  
    