/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ArtifactStore } from "./artifactstore";
import { StageDeclaration } from "./stagedeclaration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the structure of actions and stages to be performed in the pipeline.
 */
export class PipelineDeclaration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "artifactStore" })
  @Type(() => ArtifactStore)
  artifactStore?: ArtifactStore;

  @SpeakeasyMetadata({ elemType: ArtifactStore })
  @Expose({ name: "artifactStores" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ArtifactStore> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ArtifactStore);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  artifactStores?: Record<string, ArtifactStore>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;

  @SpeakeasyMetadata({ elemType: StageDeclaration })
  @Expose({ name: "stages" })
  @Type(() => StageDeclaration)
  stages: StageDeclaration[];

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;
}
