/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRouteHeaderMatch - Specifies how to select a route rule based on HTTP request headers.
 */
public class HttpRouteHeaderMatch {
    /**
     * The value of the header should match exactly the content of exact_match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exactMatch")
    public String exactMatch;
    public HttpRouteHeaderMatch withExactMatch(String exactMatch) {
        this.exactMatch = exactMatch;
        return this;
    }
    
    /**
     * The name of the HTTP header to match against.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    public String header;
    public HttpRouteHeaderMatch withHeader(String header) {
        this.header = header;
        return this;
    }
    
    /**
     * If specified, the match result will be inverted before checking. Default value is set to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invertMatch")
    public Boolean invertMatch;
    public HttpRouteHeaderMatch withInvertMatch(Boolean invertMatch) {
        this.invertMatch = invertMatch;
        return this;
    }
    
    /**
     * The value of the header must start with the contents of prefix_match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefixMatch")
    public String prefixMatch;
    public HttpRouteHeaderMatch withPrefixMatch(String prefixMatch) {
        this.prefixMatch = prefixMatch;
        return this;
    }
    
    /**
     * A header with header_name must exist. The match takes place whether or not the header has a value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("presentMatch")
    public Boolean presentMatch;
    public HttpRouteHeaderMatch withPresentMatch(Boolean presentMatch) {
        this.presentMatch = presentMatch;
        return this;
    }
    
    /**
     * Represents an integer value range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rangeMatch")
    public HttpRouteHeaderMatchIntegerRange rangeMatch;
    public HttpRouteHeaderMatch withRangeMatch(HttpRouteHeaderMatchIntegerRange rangeMatch) {
        this.rangeMatch = rangeMatch;
        return this;
    }
    
    /**
     * The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regexMatch")
    public String regexMatch;
    public HttpRouteHeaderMatch withRegexMatch(String regexMatch) {
        this.regexMatch = regexMatch;
        return this;
    }
    
    /**
     * The value of the header must end with the contents of suffix_match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffixMatch")
    public String suffixMatch;
    public HttpRouteHeaderMatch withSuffixMatch(String suffixMatch) {
        this.suffixMatch = suffixMatch;
        return this;
    }
    
}
