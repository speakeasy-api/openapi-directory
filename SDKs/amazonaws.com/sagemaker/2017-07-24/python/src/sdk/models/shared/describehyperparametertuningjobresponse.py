"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import hyperparametertrainingjobdefinition as shared_hyperparametertrainingjobdefinition
from ..shared import hyperparametertrainingjobsummary as shared_hyperparametertrainingjobsummary
from ..shared import hyperparametertuningjobcompletiondetails as shared_hyperparametertuningjobcompletiondetails
from ..shared import hyperparametertuningjobconfig as shared_hyperparametertuningjobconfig
from ..shared import hyperparametertuningjobconsumedresources as shared_hyperparametertuningjobconsumedresources
from ..shared import hyperparametertuningjobstatus_enum as shared_hyperparametertuningjobstatus_enum
from ..shared import hyperparametertuningjobwarmstartconfig as shared_hyperparametertuningjobwarmstartconfig
from ..shared import objectivestatuscounters as shared_objectivestatuscounters
from ..shared import trainingjobstatuscounters as shared_trainingjobstatuscounters
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeHyperParameterTuningJobResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    hyper_parameter_tuning_job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobArn') }})  
    hyper_parameter_tuning_job_config: shared_hyperparametertuningjobconfig.HyperParameterTuningJobConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobConfig') }})  
    hyper_parameter_tuning_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobName') }})  
    hyper_parameter_tuning_job_status: shared_hyperparametertuningjobstatus_enum.HyperParameterTuningJobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobStatus') }})  
    objective_status_counters: shared_objectivestatuscounters.ObjectiveStatusCounters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectiveStatusCounters') }})  
    training_job_status_counters: shared_trainingjobstatuscounters.TrainingJobStatusCounters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobStatusCounters') }})  
    best_training_job: Optional[shared_hyperparametertrainingjobsummary.HyperParameterTrainingJobSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BestTrainingJob'), 'exclude': lambda f: f is None }})  
    consumed_resources: Optional[shared_hyperparametertuningjobconsumedresources.HyperParameterTuningJobConsumedResources] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsumedResources'), 'exclude': lambda f: f is None }})
    r"""The total resources consumed by your hyperparameter tuning job."""  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    overall_best_training_job: Optional[shared_hyperparametertrainingjobsummary.HyperParameterTrainingJobSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverallBestTrainingJob'), 'exclude': lambda f: f is None }})  
    training_job_definition: Optional[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinition'), 'exclude': lambda f: f is None }})  
    training_job_definitions: Optional[list[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinitions'), 'exclude': lambda f: f is None }})  
    tuning_job_completion_details: Optional[shared_hyperparametertuningjobcompletiondetails.HyperParameterTuningJobCompletionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningJobCompletionDetails'), 'exclude': lambda f: f is None }})  
    warm_start_config: Optional[shared_hyperparametertuningjobwarmstartconfig.HyperParameterTuningJobWarmStartConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WarmStartConfig'), 'exclude': lambda f: f is None }})  
    