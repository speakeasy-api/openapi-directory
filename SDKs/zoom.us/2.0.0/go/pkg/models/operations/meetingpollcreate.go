// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MeetingPollCreateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingPollCreatePathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

// MeetingPollCreatePollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type MeetingPollCreatePollQuestionsTypeEnum string

const (
	MeetingPollCreatePollQuestionsTypeEnumSingle   MeetingPollCreatePollQuestionsTypeEnum = "single"
	MeetingPollCreatePollQuestionsTypeEnumMultiple MeetingPollCreatePollQuestionsTypeEnum = "multiple"
)

func (e *MeetingPollCreatePollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = MeetingPollCreatePollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollCreatePollQuestionsTypeEnum: %s", s)
	}
}

type MeetingPollCreatePollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *MeetingPollCreatePollQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingPollCreatePoll - Poll
type MeetingPollCreatePoll struct {
	// Array of Polls
	Questions []MeetingPollCreatePollQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
	// Title for the poll.
	Title *string `json:"title,omitempty" multipartForm:"name=title"`
}

type MeetingPollCreateRequest struct {
	PathParams MeetingPollCreatePathParams
	// Meeting poll object
	Request  MeetingPollCreatePoll `request:"mediaType=application/json"`
	Security MeetingPollCreateSecurity
}

// MeetingPollCreatePollStatusEnum - Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type MeetingPollCreatePollStatusEnum string

const (
	MeetingPollCreatePollStatusEnumNotstart MeetingPollCreatePollStatusEnum = "notstart"
	MeetingPollCreatePollStatusEnumStarted  MeetingPollCreatePollStatusEnum = "started"
	MeetingPollCreatePollStatusEnumEnded    MeetingPollCreatePollStatusEnum = "ended"
	MeetingPollCreatePollStatusEnumSharing  MeetingPollCreatePollStatusEnum = "sharing"
)

func (e *MeetingPollCreatePollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = MeetingPollCreatePollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollCreatePollStatusEnum: %s", s)
	}
}

// MeetingPollCreatePoll2 - Poll
type MeetingPollCreatePoll2 struct {
	// Meeting Poll ID
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []MeetingPollCreatePollQuestions `json:"questions,omitempty"`
	// Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *MeetingPollCreatePollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

type MeetingPollCreateResponse struct {
	Body        []byte
	ContentType string
	Headers     map[string][]string
	// **HTTP Status Code:** `201` <br>
	// Meeting Poll Created
	Poll        *MeetingPollCreatePoll2
	StatusCode  int
	RawResponse *http.Response
}
