// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ListCardsRequest struct {
	AccountID           *string    `queryParam:"style=form,explode=true,name=account_id"`
	CreatedAtAfter      *time.Time `queryParam:"style=form,explode=true,name=created_at.after"`
	CreatedAtBefore     *time.Time `queryParam:"style=form,explode=true,name=created_at.before"`
	CreatedAtOnOrAfter  *time.Time `queryParam:"style=form,explode=true,name=created_at.on_or_after"`
	CreatedAtOnOrBefore *time.Time `queryParam:"style=form,explode=true,name=created_at.on_or_before"`
	Cursor              *string    `queryParam:"style=form,explode=true,name=cursor"`
	Limit               *int64     `queryParam:"style=form,explode=true,name=limit"`
}

type ListCardsDefaultApplicationJSON13StatusEnum string

const (
	ListCardsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListCardsDefaultApplicationJSON13StatusEnum = "429"
)

func (e *ListCardsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "429":
		*e = ListCardsDefaultApplicationJSON13StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON13StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON13TypeEnum string

const (
	ListCardsDefaultApplicationJSON13TypeEnumRateLimitedError ListCardsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e *ListCardsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rate_limited_error":
		*e = ListCardsDefaultApplicationJSON13TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON13TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON13 struct {
	Detail     string                                      `json:"detail"`
	RetryAfter *int64                                      `json:"retry_after,omitempty"`
	Status     ListCardsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                      `json:"title"`
	Type       ListCardsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON12StatusEnum string

const (
	ListCardsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListCardsDefaultApplicationJSON12StatusEnum = "403"
)

func (e *ListCardsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListCardsDefaultApplicationJSON12StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON12StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON12TypeEnum string

const (
	ListCardsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListCardsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e *ListCardsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private_feature_error":
		*e = ListCardsDefaultApplicationJSON12TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON12TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON12 struct {
	Detail string                                      `json:"detail"`
	Status ListCardsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListCardsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON11StatusEnum string

const (
	ListCardsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListCardsDefaultApplicationJSON11StatusEnum = "404"
)

func (e *ListCardsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListCardsDefaultApplicationJSON11StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON11StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON11TypeEnum string

const (
	ListCardsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListCardsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e *ListCardsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "object_not_found_error":
		*e = ListCardsDefaultApplicationJSON11TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON11TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON11 struct {
	Detail string                                      `json:"detail"`
	Status ListCardsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListCardsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON10StatusEnum string

const (
	ListCardsDefaultApplicationJSON10StatusEnumFourHundred ListCardsDefaultApplicationJSON10StatusEnum = "400"
)

func (e *ListCardsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListCardsDefaultApplicationJSON10StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON10StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON10TypeEnum string

const (
	ListCardsDefaultApplicationJSON10TypeEnumMalformedRequestError ListCardsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e *ListCardsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "malformed_request_error":
		*e = ListCardsDefaultApplicationJSON10TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON10TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON10 struct {
	Detail string                                      `json:"detail"`
	Status ListCardsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListCardsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON9StatusEnum string

const (
	ListCardsDefaultApplicationJSON9StatusEnumFourHundred ListCardsDefaultApplicationJSON9StatusEnum = "400"
)

func (e *ListCardsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListCardsDefaultApplicationJSON9StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON9StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON9TypeEnum string

const (
	ListCardsDefaultApplicationJSON9TypeEnumInvalidParametersError ListCardsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e *ListCardsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_parameters_error":
		*e = ListCardsDefaultApplicationJSON9TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON9TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                   `json:"errors,omitempty"`
	Status ListCardsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON8StatusEnum string

const (
	ListCardsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListCardsDefaultApplicationJSON8StatusEnum = "409"
)

func (e *ListCardsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListCardsDefaultApplicationJSON8StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON8StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON8TypeEnum string

const (
	ListCardsDefaultApplicationJSON8TypeEnumInvalidOperationError ListCardsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e *ListCardsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_operation_error":
		*e = ListCardsDefaultApplicationJSON8TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON8TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON8 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON7StatusEnum string

const (
	ListCardsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListCardsDefaultApplicationJSON7StatusEnum = "401"
)

func (e *ListCardsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "401":
		*e = ListCardsDefaultApplicationJSON7StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON7StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON7TypeEnum string

const (
	ListCardsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListCardsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e *ListCardsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_api_key_error":
		*e = ListCardsDefaultApplicationJSON7TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON7TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON7 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON6StatusEnum string

const (
	ListCardsDefaultApplicationJSON6StatusEnumFiveHundred ListCardsDefaultApplicationJSON6StatusEnum = "500"
)

func (e *ListCardsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "500":
		*e = ListCardsDefaultApplicationJSON6StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON6StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON6TypeEnum string

const (
	ListCardsDefaultApplicationJSON6TypeEnumInternalServerError ListCardsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e *ListCardsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = ListCardsDefaultApplicationJSON6TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON6TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON6 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON5StatusEnum string

const (
	ListCardsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListCardsDefaultApplicationJSON5StatusEnum = "403"
)

func (e *ListCardsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListCardsDefaultApplicationJSON5StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON5StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON5TypeEnum string

const (
	ListCardsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListCardsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e *ListCardsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "insufficient_permissions_error":
		*e = ListCardsDefaultApplicationJSON5TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON5TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON5 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON4StatusEnum string

const (
	ListCardsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListCardsDefaultApplicationJSON4StatusEnum = "422"
)

func (e *ListCardsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "422":
		*e = ListCardsDefaultApplicationJSON4StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON4StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON4TypeEnum string

const (
	ListCardsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListCardsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e *ListCardsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_unprocessable_error":
		*e = ListCardsDefaultApplicationJSON4TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON4TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON4 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON3StatusEnum string

const (
	ListCardsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListCardsDefaultApplicationJSON3StatusEnum = "409"
)

func (e *ListCardsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListCardsDefaultApplicationJSON3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON3StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON3TypeEnum string

const (
	ListCardsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListCardsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e *ListCardsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_conflict_error":
		*e = ListCardsDefaultApplicationJSON3TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON3TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON3 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON2StatusEnum string

const (
	ListCardsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListCardsDefaultApplicationJSON2StatusEnum = "403"
)

func (e *ListCardsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListCardsDefaultApplicationJSON2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON2StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON2TypeEnum string

const (
	ListCardsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListCardsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e *ListCardsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "environment_mismatch_error":
		*e = ListCardsDefaultApplicationJSON2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON2TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON2 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListCardsDefaultApplicationJSON1StatusEnum string

const (
	ListCardsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListCardsDefaultApplicationJSON1StatusEnum = "404"
)

func (e *ListCardsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListCardsDefaultApplicationJSON1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON1StatusEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON1TypeEnum string

const (
	ListCardsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListCardsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e *ListCardsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_method_not_found_error":
		*e = ListCardsDefaultApplicationJSON1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCardsDefaultApplicationJSON1TypeEnum: %s", s)
	}
}

type ListCardsDefaultApplicationJSON1 struct {
	Detail string                                     `json:"detail"`
	Status ListCardsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                     `json:"title"`
	Type   ListCardsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListCardsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Card List
	CardList *shared.CardList
	// Error
	Error interface{}
}
