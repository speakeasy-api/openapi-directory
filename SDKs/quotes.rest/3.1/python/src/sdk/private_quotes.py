"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PrivateQuotes:
    r"""Create and manage your own Quotes. You need an API key to access this service."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_quote(self, request: operations.DeleteQuoteRequest, security: operations.DeleteQuoteSecurity) -> operations.DeleteQuoteResponse:
        r"""Delete a quote. The user needs to be the owner of the quote to be able to delete it."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.DeleteQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote(self, request: operations.GetQuoteRequest, security: operations.GetQuoteSecurity) -> operations.GetQuoteResponse:
        r"""Gets a `Quote` with a given `id`."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.GetQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteResponse])
                res.quote_response = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_quote_list(self, request: operations.GetQuoteListRequest, security: operations.GetQuoteListSecurity) -> operations.GetQuoteListResponse:
        r"""Get the list of quotes in your private collection."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/list'
        
        query_params = utils.get_query_params(operations.GetQuoteListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_quote(self, request: operations.PatchQuoteRequest, security: operations.PatchQuoteSecurity) -> operations.PatchQuoteResponse:
        r"""Update a quote"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.PatchQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_quote(self, request: operations.PostQuoteRequest, security: operations.PostQuoteSecurity) -> operations.PostQuoteResponse:
        r"""Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.PostQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_quote_tags_add(self, request: operations.PostQuoteTagsAddRequest, security: operations.PostQuoteTagsAddSecurity) -> operations.PostQuoteTagsAddResponse:
        r"""Add a tag to a given Quote."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/tags/add'
        
        query_params = utils.get_query_params(operations.PostQuoteTagsAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQuoteTagsAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_quote_tags_remove(self, request: operations.PostQuoteTagsRemoveRequest, security: operations.PostQuoteTagsRemoveSecurity) -> operations.PostQuoteTagsRemoveResponse:
        r"""Remove a tag from a given quote."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/tags/remove'
        
        query_params = utils.get_query_params(operations.PostQuoteTagsRemoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQuoteTagsRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_quote(self, request: operations.PutQuoteRequest, security: operations.PutQuoteSecurity) -> operations.PutQuoteResponse:
        r"""Add a new quote to your private collection."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.PutQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    