// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompleteUploadRequestResolutionStrategyEnum - Node conflict resolution strategy:
//
// * `autorename`
//
// * `overwrite`
//
// * `fail`
type CompleteUploadRequestResolutionStrategyEnum string

const (
	CompleteUploadRequestResolutionStrategyEnumAutorename CompleteUploadRequestResolutionStrategyEnum = "autorename"
	CompleteUploadRequestResolutionStrategyEnumOverwrite  CompleteUploadRequestResolutionStrategyEnum = "overwrite"
	CompleteUploadRequestResolutionStrategyEnumFail       CompleteUploadRequestResolutionStrategyEnum = "fail"
)

func (e *CompleteUploadRequestResolutionStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "autorename":
		fallthrough
	case "overwrite":
		fallthrough
	case "fail":
		*e = CompleteUploadRequestResolutionStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteUploadRequestResolutionStrategyEnum: %s", s)
	}
}

// CompleteUploadRequest - The body must be empty if public upload token is used.
//
// The `resolutionStrategy` in that case will be always `autorename`
type CompleteUploadRequest struct {
	// File key information
	FileKey *FileKey `json:"fileKey,omitempty"`
	// New file name to store with
	FileName *string `json:"fileName,omitempty"`
	// Preserve Download Share Links and point them to the new node.
	KeepShareLinks *bool `json:"keepShareLinks,omitempty"`
	// Node conflict resolution strategy:
	//
	// * `autorename`
	//
	// * `overwrite`
	//
	// * `fail`
	ResolutionStrategy *CompleteUploadRequestResolutionStrategyEnum `json:"resolutionStrategy,omitempty"`
	// Mandatory for encrypted shares
	UserFileKeyList *UserFileKeyList `json:"userFileKeyList,omitempty"`
}
