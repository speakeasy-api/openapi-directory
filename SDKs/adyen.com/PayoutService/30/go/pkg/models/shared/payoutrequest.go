// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PayoutRequestShopperInteractionEnum - Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
//
// This field has the following possible values:
// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
type PayoutRequestShopperInteractionEnum string

const (
	PayoutRequestShopperInteractionEnumEcommerce PayoutRequestShopperInteractionEnum = "Ecommerce"
	PayoutRequestShopperInteractionEnumContAuth  PayoutRequestShopperInteractionEnum = "ContAuth"
	PayoutRequestShopperInteractionEnumMoto      PayoutRequestShopperInteractionEnum = "Moto"
	PayoutRequestShopperInteractionEnumPos       PayoutRequestShopperInteractionEnum = "POS"
)

func (e PayoutRequestShopperInteractionEnum) ToPointer() *PayoutRequestShopperInteractionEnum {
	return &e
}

func (e *PayoutRequestShopperInteractionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Ecommerce":
		fallthrough
	case "ContAuth":
		fallthrough
	case "Moto":
		fallthrough
	case "POS":
		*e = PayoutRequestShopperInteractionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PayoutRequestShopperInteractionEnum: %v", v)
	}
}

type PayoutRequest struct {
	Amount         Amount   `json:"amount"`
	BillingAddress *Address `json:"billingAddress,omitempty"`
	Card           *Card    `json:"card,omitempty"`
	// An integer value that is added to the normal fraud score. The value can be either positive or negative.
	FraudOffset *int        `json:"fraudOffset,omitempty"`
	FundSource  *FundSource `json:"fundSource,omitempty"`
	// The merchant account identifier, with which you want to process the transaction.
	MerchantAccount string     `json:"merchantAccount"`
	Recurring       *Recurring `json:"recurring,omitempty"`
	// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
	// If you need to provide multiple references for a transaction, separate them with hyphens ("-").
	// Maximum length: 80 characters.
	Reference string `json:"reference"`
	// The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
	SelectedRecurringDetailReference *string `json:"selectedRecurringDetailReference,omitempty"`
	// The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
	// > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
	ShopperEmail *string `json:"shopperEmail,omitempty"`
	// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
	// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
	//
	// This field has the following possible values:
	// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
	// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
	// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
	// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
	ShopperInteraction *PayoutRequestShopperInteractionEnum `json:"shopperInteraction,omitempty"`
	ShopperName        *Name                                `json:"shopperName,omitempty"`
	// Required for recurring payments.
	// Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.
	// > Your reference must not include personally identifiable information (PII), for example name or email address.
	ShopperReference *string `json:"shopperReference,omitempty"`
	// The shopper's telephone number.
	TelephoneNumber *string `json:"telephoneNumber,omitempty"`
}
