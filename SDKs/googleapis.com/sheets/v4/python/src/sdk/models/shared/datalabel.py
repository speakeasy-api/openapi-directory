"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chartdata as shared_chartdata
from ..shared import textformat as shared_textformat
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DataLabelPlacementEnum(str, Enum):
    r"""The placement of the data label relative to the labeled data."""
    DATA_LABEL_PLACEMENT_UNSPECIFIED = 'DATA_LABEL_PLACEMENT_UNSPECIFIED'
    CENTER = 'CENTER'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    ABOVE = 'ABOVE'
    BELOW = 'BELOW'
    INSIDE_END = 'INSIDE_END'
    INSIDE_BASE = 'INSIDE_BASE'
    OUTSIDE_END = 'OUTSIDE_END'

class DataLabelTypeEnum(str, Enum):
    r"""The type of the data label."""
    DATA_LABEL_TYPE_UNSPECIFIED = 'DATA_LABEL_TYPE_UNSPECIFIED'
    NONE = 'NONE'
    DATA = 'DATA'
    CUSTOM = 'CUSTOM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataLabel:
    r"""Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph."""
    
    custom_label_data: Optional[shared_chartdata.ChartData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customLabelData'), 'exclude': lambda f: f is None }})
    r"""The data included in a domain or series."""  
    placement: Optional[DataLabelPlacementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement'), 'exclude': lambda f: f is None }})
    r"""The placement of the data label relative to the labeled data."""  
    text_format: Optional[shared_textformat.TextFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textFormat'), 'exclude': lambda f: f is None }})
    r"""The format of a run of text in a cell. Absent values indicate that the field isn't specified."""  
    type: Optional[DataLabelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the data label."""  
    