// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PodTypeEnum - The pod type
type PodTypeEnum string

const (
	PodTypeEnumS1X1 PodTypeEnum = "s1.x1"
	PodTypeEnumS1X2 PodTypeEnum = "s1.x2"
	PodTypeEnumS1X4 PodTypeEnum = "s1.x4"
	PodTypeEnumS1X8 PodTypeEnum = "s1.x8"
	PodTypeEnumP1X1 PodTypeEnum = "p1.x1"
	PodTypeEnumP1X2 PodTypeEnum = "p1.x2"
	PodTypeEnumP1X4 PodTypeEnum = "p1.x4"
	PodTypeEnumP1X8 PodTypeEnum = "p1.x8"
	PodTypeEnumP2X1 PodTypeEnum = "p2.x1"
	PodTypeEnumP2X2 PodTypeEnum = "p2.x2"
	PodTypeEnumP2X4 PodTypeEnum = "p2.x4"
	PodTypeEnumP2X8 PodTypeEnum = "p2.x8"
)

func (e PodTypeEnum) ToPointer() *PodTypeEnum {
	return &e
}

func (e *PodTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s1.x1":
		fallthrough
	case "s1.x2":
		fallthrough
	case "s1.x4":
		fallthrough
	case "s1.x8":
		fallthrough
	case "p1.x1":
		fallthrough
	case "p1.x2":
		fallthrough
	case "p1.x4":
		fallthrough
	case "p1.x8":
		fallthrough
	case "p2.x1":
		fallthrough
	case "p2.x2":
		fallthrough
	case "p2.x4":
		fallthrough
	case "p2.x8":
		*e = PodTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PodTypeEnum: %v", v)
	}
}
