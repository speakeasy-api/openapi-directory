/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetVehicleChargestate200ApplicationJSON - Successful
 */
public class GetVehicleChargestate200ApplicationJSON {
    /**
     * Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryCapacity")
    public Double batteryCapacity;
    public GetVehicleChargestate200ApplicationJSON withBatteryCapacity(Double batteryCapacity) {
        this.batteryCapacity = batteryCapacity;
        return this;
    }
    
    /**
     * Remaining battery in percent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryLevel")
    public Double batteryLevel;
    public GetVehicleChargestate200ApplicationJSON withBatteryLevel(Double batteryLevel) {
        this.batteryLevel = batteryLevel;
        return this;
    }
    
    /**
     * Charge limit, as a percent of `batteryCapacity`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeLimit")
    public Double chargeLimit;
    public GetVehicleChargestate200ApplicationJSON withChargeLimit(Double chargeLimit) {
        this.chargeLimit = chargeLimit;
        return this;
    }
    
    /**
     * The current charge rate in kW.
     * 
     * This property is only available when the vehicle is charging, and is `null` any other time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeRate")
    public Double chargeRate;
    public GetVehicleChargestate200ApplicationJSON withChargeRate(Double chargeRate) {
        this.chargeRate = chargeRate;
        return this;
    }
    
    /**
     * Estimated time until the current charging intent is completed, in minutes.
     * 
     * This property is only available when the vehicle is charging, and is `null` any other time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeTimeRemaining")
    public Double chargeTimeRemaining;
    public GetVehicleChargestate200ApplicationJSON withChargeTimeRemaining(Double chargeTimeRemaining) {
        this.chargeTimeRemaining = chargeTimeRemaining;
        return this;
    }
    
    /**
     * Current charging status of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCharging")
    public Boolean isCharging;
    public GetVehicleChargestate200ApplicationJSON withIsCharging(Boolean isCharging) {
        this.isCharging = isCharging;
        return this;
    }
    
    /**
     * Array of string constants that explain why the car is or is not charging. May contain multiple values.
     * 
     * **Any:**
     * - DEFAULT - the car is not being controlled by Enode
     * 
     * **Not Charging:**
     * - NOT_PLUGGED_IN - because the car is not plugged into a charger
     * - FULLY_CHARGED - because the car is fully charged
     * - MANUALLY_STOPPED - because the car has been manually commanded to stop charging
     * - SMART_CHARGING_DELAY - because Smart Charging has identified an opportunity to delay charging until prices are lower
     * 
     * **Charging:**
     * - MANUALLY_STARTED - because the car has been manually commanded to start charging
     * - SMART_CHARGING_ACTIVE - because Smart Charging has identified that this is an optimal time to charge
     * - SMART_CHARGING_DEADLINE - because, regardless of price, charging must be active to meet the configured deadline
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isChargingReasons")
    public GetVehicleChargestate200ApplicationJSONIsChargingReasonsEnum[] isChargingReasons;
    public GetVehicleChargestate200ApplicationJSON withIsChargingReasons(GetVehicleChargestate200ApplicationJSONIsChargingReasonsEnum[] isChargingReasons) {
        this.isChargingReasons = isChargingReasons;
        return this;
    }
    
    /**
     * Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPluggedIn")
    public Boolean isPluggedIn;
    public GetVehicleChargestate200ApplicationJSON withIsPluggedIn(Boolean isPluggedIn) {
        this.isPluggedIn = isPluggedIn;
        return this;
    }
    
    /**
     * Estimated remaining kilometers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("range")
    public Double range;
    public GetVehicleChargestate200ApplicationJSON withRange(Double range) {
        this.range = range;
        return this;
    }
    
}
