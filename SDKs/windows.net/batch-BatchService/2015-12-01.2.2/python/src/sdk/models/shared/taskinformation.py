"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import taskexecutioninformation as shared_taskexecutioninformation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TaskInformationTaskStateEnum(str, Enum):
    r"""Gets or sets the current state of the task."""
    ACTIVE = 'active'
    PREPARING = 'preparing'
    RUNNING = 'running'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskInformation:
    r"""Information about a task running on a compute node."""
    
    task_state: TaskInformationTaskStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskState') }})
    r"""Gets or sets the current state of the task."""  
    execution_info: Optional[shared_taskexecutioninformation.TaskExecutionInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionInfo'), 'exclude': lambda f: f is None }})
    r"""Information about the execution of a task."""  
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobId'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the id of the job to which the task belongs."""  
    subtask_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtaskId'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the id of the subtask if the task is a multi-instance task."""  
    task_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the id of the task."""  
    task_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskUrl'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the URL of the task."""  
    