"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tagmarshallerwrapped as shared_tagmarshallerwrapped
from typing import Optional


@dataclasses.dataclass
class GetResourcesTagsFormatRequest:
    
    format: str = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""Automatically added"""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': False }})
    r"""The maximum number of records to return"""  
    media_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mediaId', 'style': 'form', 'explode': False }})
    r"""Return tags associated with the supplied media id."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': False }})
    r"""Return tags[s] matching the supplied name"""  
    name_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nameContains', 'style': 'form', 'explode': False }})
    r"""Return tags which contain the supplied partial name."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': False }})
    r"""Return records starting at the offset index."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': False }})
    r"""The name of the property to which sorting will be applied"""  
    type_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'typeId', 'style': 'form', 'explode': False }})
    r"""Return tags belonging to the supplied tag type id."""  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'typeName', 'style': 'form', 'explode': False }})
    r"""Return tags belonging to the supplied tag type name."""  
    

@dataclasses.dataclass
class GetResourcesTagsFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tag_marshaller_wrappeds: Optional[list[shared_tagmarshallerwrapped.TagMarshallerWrapped]] = dataclasses.field(default=None)
    r"""Returns the list of Tags matching the specified query parameters in the specified 'format'."""  
    