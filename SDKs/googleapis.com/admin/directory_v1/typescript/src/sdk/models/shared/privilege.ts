/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class Privilege extends SpeakeasyBase {
  /**
   * A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.
   */
  @SpeakeasyMetadata({ elemType: Privilege })
  @Expose({ name: "childPrivileges" })
  @Type(() => Privilege)
  childPrivileges?: Privilege[];

  /**
   * ETag of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * If the privilege can be restricted to an organization unit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isOuScopable" })
  isOuScopable?: boolean;

  /**
   * The type of the API resource. This is always `admin#directory#privilege`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The name of the privilege.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privilegeName" })
  privilegeName?: string;

  /**
   * The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceId" })
  serviceId?: string;

  /**
   * The name of the service this privilege is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceName" })
  serviceName?: string;
}
