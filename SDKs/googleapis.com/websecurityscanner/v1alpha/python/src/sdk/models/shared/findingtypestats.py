"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FindingTypeStatsFindingTypeEnum(str, Enum):
    r"""The finding type associated with the stats."""
    FINDING_TYPE_UNSPECIFIED = 'FINDING_TYPE_UNSPECIFIED'
    MIXED_CONTENT = 'MIXED_CONTENT'
    OUTDATED_LIBRARY = 'OUTDATED_LIBRARY'
    ROSETTA_FLASH = 'ROSETTA_FLASH'
    XSS_CALLBACK = 'XSS_CALLBACK'
    XSS_ERROR = 'XSS_ERROR'
    CLEAR_TEXT_PASSWORD = 'CLEAR_TEXT_PASSWORD'
    INVALID_CONTENT_TYPE = 'INVALID_CONTENT_TYPE'
    XSS_ANGULAR_CALLBACK = 'XSS_ANGULAR_CALLBACK'
    INVALID_HEADER = 'INVALID_HEADER'
    MISSPELLED_SECURITY_HEADER_NAME = 'MISSPELLED_SECURITY_HEADER_NAME'
    MISMATCHING_SECURITY_HEADER_VALUES = 'MISMATCHING_SECURITY_HEADER_VALUES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindingTypeStats:
    r"""A FindingTypeStats resource represents stats regarding a specific FindingType of Findings under a given ScanRun."""
    
    finding_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingCount'), 'exclude': lambda f: f is None }})
    r"""The count of findings belonging to this finding type."""  
    finding_type: Optional[FindingTypeStatsFindingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingType'), 'exclude': lambda f: f is None }})
    r"""The finding type associated with the stats."""  
    