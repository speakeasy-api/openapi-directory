// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaskDuplicateRequestIncludeEnum - The fields that will be duplicated to the new task.
type TaskDuplicateRequestIncludeEnum string

const (
	TaskDuplicateRequestIncludeEnumNotes        TaskDuplicateRequestIncludeEnum = "notes"
	TaskDuplicateRequestIncludeEnumAssignee     TaskDuplicateRequestIncludeEnum = "assignee"
	TaskDuplicateRequestIncludeEnumSubtasks     TaskDuplicateRequestIncludeEnum = "subtasks"
	TaskDuplicateRequestIncludeEnumAttachments  TaskDuplicateRequestIncludeEnum = "attachments"
	TaskDuplicateRequestIncludeEnumTags         TaskDuplicateRequestIncludeEnum = "tags"
	TaskDuplicateRequestIncludeEnumFollowers    TaskDuplicateRequestIncludeEnum = "followers"
	TaskDuplicateRequestIncludeEnumProjects     TaskDuplicateRequestIncludeEnum = "projects"
	TaskDuplicateRequestIncludeEnumDates        TaskDuplicateRequestIncludeEnum = "dates"
	TaskDuplicateRequestIncludeEnumDependencies TaskDuplicateRequestIncludeEnum = "dependencies"
	TaskDuplicateRequestIncludeEnumParent       TaskDuplicateRequestIncludeEnum = "parent"
)

func (e *TaskDuplicateRequestIncludeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notes":
		fallthrough
	case "assignee":
		fallthrough
	case "subtasks":
		fallthrough
	case "attachments":
		fallthrough
	case "tags":
		fallthrough
	case "followers":
		fallthrough
	case "projects":
		fallthrough
	case "dates":
		fallthrough
	case "dependencies":
		fallthrough
	case "parent":
		*e = TaskDuplicateRequestIncludeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskDuplicateRequestIncludeEnum: %s", s)
	}
}

type TaskDuplicateRequest struct {
	// The fields that will be duplicated to the new task.
	Include *TaskDuplicateRequestIncludeEnum `json:"include,omitempty"`
	// The name of the new task.
	Name *string `json:"name,omitempty"`
}
