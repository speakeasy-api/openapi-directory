/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CloudassetAnalyzeIamPolicyQueryParams {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public CloudassetAnalyzeIamPolicyQueryParams withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public CloudassetAnalyzeIamPolicyQueryParams withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public CloudassetAnalyzeIamPolicyQueryParams withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * Optional. The permissions to appear in result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=analysisQuery.accessSelector.permissions")
    public String[] analysisQueryAccessSelectorPermissions;
    public CloudassetAnalyzeIamPolicyQueryParams withAnalysisQueryAccessSelectorPermissions(String[] analysisQueryAccessSelectorPermissions) {
        this.analysisQueryAccessSelectorPermissions = analysisQueryAccessSelectorPermissions;
        return this;
    }
    
    /**
     * Optional. The roles to appear in result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=analysisQuery.accessSelector.roles")
    public String[] analysisQueryAccessSelectorRoles;
    public CloudassetAnalyzeIamPolicyQueryParams withAnalysisQueryAccessSelectorRoles(String[] analysisQueryAccessSelectorRoles) {
        this.analysisQueryAccessSelectorRoles = analysisQueryAccessSelectorRoles;
        return this;
    }
    
    /**
     * Required. The identity appear in the form of members in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=analysisQuery.identitySelector.identity")
    public String analysisQueryIdentitySelectorIdentity;
    public CloudassetAnalyzeIamPolicyQueryParams withAnalysisQueryIdentitySelectorIdentity(String analysisQueryIdentitySelectorIdentity) {
        this.analysisQueryIdentitySelectorIdentity = analysisQueryIdentitySelectorIdentity;
        return this;
    }
    
    /**
     * Required. The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=analysisQuery.resourceSelector.fullResourceName")
    public String analysisQueryResourceSelectorFullResourceName;
    public CloudassetAnalyzeIamPolicyQueryParams withAnalysisQueryResourceSelectorFullResourceName(String analysisQueryResourceSelectorFullResourceName) {
        this.analysisQueryResourceSelectorFullResourceName = analysisQueryResourceSelectorFullResourceName;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public CloudassetAnalyzeIamPolicyQueryParams withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public CloudassetAnalyzeIamPolicyQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public CloudassetAnalyzeIamPolicyQueryParams withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public CloudassetAnalyzeIamPolicyQueryParams withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.ExportIamPolicyAnalysis rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.analyzeServiceAccountImpersonation")
    public Boolean optionsAnalyzeServiceAccountImpersonation;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsAnalyzeServiceAccountImpersonation(Boolean optionsAnalyzeServiceAccountImpersonation) {
        this.optionsAnalyzeServiceAccountImpersonation = optionsAnalyzeServiceAccountImpersonation;
        return this;
    }
    
    /**
     * Optional. Amount of time executable has to complete. See JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json). If this field is set with a value less than the RPC deadline, and the execution of your query hasn't finished in the specified execution timeout, you will get a response with partial result. Otherwise, your query's execution will continue until the RPC deadline. If it's not finished until then, you will get a DEADLINE_EXCEEDED error. Default is empty.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.executionTimeout")
    public String optionsExecutionTimeout;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsExecutionTimeout(String optionsExecutionTimeout) {
        this.optionsExecutionTimeout = optionsExecutionTimeout;
        return this;
    }
    
    /**
     * Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If identity_selector is specified, the identity in the result will be determined by the selector, and this flag will have no effect. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.expandGroups")
    public Boolean optionsExpandGroups;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsExpandGroups(Boolean optionsExpandGroups) {
        this.optionsExpandGroups = optionsExpandGroups;
        return this;
    }
    
    /**
     * Optional. If true, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If resource_selector is specified, the resource section of the result will be determined by the selector, and this flag will have no effect. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.expandResources")
    public Boolean optionsExpandResources;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsExpandResources(Boolean optionsExpandResources) {
        this.optionsExpandResources = optionsExpandResources;
        return this;
    }
    
    /**
     * Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If access_selector is specified, the access section of the result will be determined by the selector, and this flag will have no effect. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.expandRoles")
    public Boolean optionsExpandRoles;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsExpandRoles(Boolean optionsExpandRoles) {
        this.optionsExpandRoles = optionsExpandRoles;
        return this;
    }
    
    /**
     * Optional. If true, the result will output group identity edges, starting from the binding's group members, to any expanded identities. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.outputGroupEdges")
    public Boolean optionsOutputGroupEdges;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsOutputGroupEdges(Boolean optionsOutputGroupEdges) {
        this.optionsOutputGroupEdges = optionsOutputGroupEdges;
        return this;
    }
    
    /**
     * Optional. If true, the result will output resource edges, starting from the policy attached resource, to any expanded resources. Default is false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=options.outputResourceEdges")
    public Boolean optionsOutputResourceEdges;
    public CloudassetAnalyzeIamPolicyQueryParams withOptionsOutputResourceEdges(Boolean optionsOutputResourceEdges) {
        this.optionsOutputResourceEdges = optionsOutputResourceEdges;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public CloudassetAnalyzeIamPolicyQueryParams withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public CloudassetAnalyzeIamPolicyQueryParams withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public CloudassetAnalyzeIamPolicyQueryParams withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public CloudassetAnalyzeIamPolicyQueryParams withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
}
