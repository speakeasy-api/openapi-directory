<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an annotation spec set by providing a set of labels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateResponse
     */
	public function datalabelingProjectsAnnotationSpecSetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/annotationSpecSets', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1CreateAnnotationSpecSetRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1AnnotationSpecSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1AnnotationSpecSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists annotation spec sets for a project. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListResponse
     */
	public function datalabelingProjectsAnnotationSpecSetsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/annotationSpecSets', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsAnnotationSpecSetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListAnnotationSpecSetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListAnnotationSpecSetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists examples in an annotated dataset. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListResponse
     */
	public function datalabelingProjectsDatasetsAnnotatedDatasetsExamplesList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/examples', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsExamplesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListExamplesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListExamplesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a FeedbackMessage object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateResponse
     */
	public function datalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/feedbackMessages', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1FeedbackMessage", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List FeedbackMessages with pagination.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListResponse
     */
	public function datalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/feedbackMessages', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsFeedbackMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListFeedbackMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListFeedbackMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List FeedbackThreads with pagination.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListResponse
     */
	public function datalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/feedbackThreads', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsFeedbackThreadsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListFeedbackThreadsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListFeedbackThreadsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists annotated datasets for a dataset. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListResponse
     */
	public function datalabelingProjectsDatasetsAnnotatedDatasetsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/annotatedDatasets', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsAnnotatedDatasetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates dataset. If success return a Dataset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateResponse
     */
	public function datalabelingProjectsDatasetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/datasets', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1CreateDatasetRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1Dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1Dataset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists data items in a dataset. This API can be called after data are imported into dataset. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListResponse
     */
	public function datalabelingProjectsDatasetsDataItemsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/dataItems', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsDataItemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListDataItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListDataItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches example comparisons from an evaluation. The return format is a list of example comparisons that show ground truth and prediction(s) for a single input. Search by providing an evaluation ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchResponse
     */
	public function datalabelingProjectsDatasetsEvaluationsExampleComparisonsSearch(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/exampleComparisons:search', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1SearchExampleComparisonsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsEvaluationsExampleComparisonsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1SearchExampleComparisonsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1SearchExampleComparisonsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports data and annotations from dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataResponse
     */
	public function datalabelingProjectsDatasetsExportData(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:exportData', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1ExportDataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsExportDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a labeling task for image. The type of image labeling task is configured by feature in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelResponse
     */
	public function datalabelingProjectsDatasetsImageLabel(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/image:label', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1LabelImageRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImageLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports data into dataset based on source locations defined in request. It can be called multiple times for the same dataset. Each dataset can only have one long running operation running on it. For example, no labeling task (also long running operation) can be started while importing is still ongoing. Vice versa.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataResponse
     */
	public function datalabelingProjectsDatasetsImportData(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:importData', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1ImportDataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsImportDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists datasets under a project. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListResponse
     */
	public function datalabelingProjectsDatasetsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/datasets', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListDatasetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListDatasetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a labeling task for text. The type of text labeling task is configured by feature in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelResponse
     */
	public function datalabelingProjectsDatasetsTextLabel(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/text:label', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1LabelTextRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsTextLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a labeling task for video. The type of video labeling task is configured by feature in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelResponse
     */
	public function datalabelingProjectsDatasetsVideoLabel(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/video:label', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1LabelVideoRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsDatasetsVideoLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an evaluation job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateResponse
     */
	public function datalabelingProjectsEvaluationJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/evaluationJobs', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1CreateEvaluationJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1EvaluationJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1EvaluationJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all evaluation jobs within a project with possible filters. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListResponse
     */
	public function datalabelingProjectsEvaluationJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/evaluationJobs', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListEvaluationJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListEvaluationJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an evaluation job. You can only update certain fields of the job's EvaluationJobConfig: `humanAnnotationConfig.instruction`, `exampleCount`, and `exampleSamplePercentage`. If you want to change any other aspect of the evaluation job, you must delete the job and create a new one.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchResponse
     */
	public function datalabelingProjectsEvaluationJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1EvaluationJob", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1EvaluationJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1EvaluationJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pauses an evaluation job. Pausing an evaluation job that is already in a `PAUSED` state is a no-op.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseResponse
     */
	public function datalabelingProjectsEvaluationJobsPause(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:pause', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsPauseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resumes a paused evaluation job. A deleted evaluation job can't be resumed. Resuming a running or scheduled evaluation job is a no-op.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeResponse
     */
	public function datalabelingProjectsEvaluationJobsResume(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:resume', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationJobsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches evaluations within a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchResponse
     */
	public function datalabelingProjectsEvaluationsSearch(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/evaluations:search', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsEvaluationsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1SearchEvaluationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1SearchEvaluationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instruction for how data should be labeled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateResponse
     */
	public function datalabelingProjectsInstructionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instructions', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatalabelingV1beta1CreateInstructionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists instructions for a project. Pagination is supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListResponse
     */
	public function datalabelingProjectsInstructionsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instructions', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsInstructionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatalabelingV1beta1ListInstructionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatalabelingV1beta1ListInstructionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelResponse
     */
	public function datalabelingProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteResponse
     */
	public function datalabelingProjectsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetResponse
     */
	public function datalabelingProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/* /operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListResponse
     */
	public function datalabelingProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalabelingProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}