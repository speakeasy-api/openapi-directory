/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DownloadHistory - Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object
 */
public class DownloadHistory {
    /**
     * Information about the downloaded media
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio")
    public DownloadHistoryMediaDetails audio;

    public DownloadHistory withAudio(DownloadHistoryMediaDetails audio) {
        this.audio = audio;
        return this;
    }
    
    /**
     * Date the media was downloaded the first time
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("download_time")
    public OffsetDateTime downloadTime;

    public DownloadHistory withDownloadTime(OffsetDateTime downloadTime) {
        this.downloadTime = downloadTime;
        return this;
    }
    
    /**
     * ID of the download
     */
    @JsonProperty("id")
    public String id;

    public DownloadHistory withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Information about the downloaded media
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public DownloadHistoryMediaDetails image;

    public DownloadHistory withImage(DownloadHistoryMediaDetails image) {
        this.image = image;
        return this;
    }
    
    /**
     * Specifies if the media is downloadable via its respective downloads endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_downloadable")
    public Boolean isDownloadable;

    public DownloadHistory withIsDownloadable(Boolean isDownloadable) {
        this.isDownloadable = isDownloadable;
        return this;
    }
    
    /**
     * The name of the license of this download
     */
    @JsonProperty("license")
    public String license;

    public DownloadHistory withLicense(String license) {
        this.license = license;
        return this;
    }
    
    /**
     * The metadata that was passed in the original licensing request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;

    public DownloadHistory withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Pricing information for revenue-sharing transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revshare")
    public DownloadHistoryRevshareDetails revshare;

    public DownloadHistory withRevshare(DownloadHistoryRevshareDetails revshare) {
        this.revshare = revshare;
        return this;
    }
    
    /**
     * ID of the subscription used to perform this download
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_id")
    public String subscriptionId;

    public DownloadHistory withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * Information about a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public DownloadHistoryUserDetails user;

    public DownloadHistory withUser(DownloadHistoryUserDetails user) {
        this.user = user;
        return this;
    }
    
    /**
     * Information about the downloaded media
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video")
    public DownloadHistoryMediaDetails video;

    public DownloadHistory withVideo(DownloadHistoryMediaDetails video) {
        this.video = video;
        return this;
    }
    
    public DownloadHistory(@JsonProperty("download_time") OffsetDateTime downloadTime, @JsonProperty("id") String id, @JsonProperty("license") String license) {
        this.downloadTime = downloadTime;
        this.id = id;
        this.license = license;
  }
}
