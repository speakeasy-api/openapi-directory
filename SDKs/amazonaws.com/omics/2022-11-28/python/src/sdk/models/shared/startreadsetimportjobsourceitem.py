"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filetype_enum as shared_filetype_enum
from ..shared import sourcefiles as shared_sourcefiles
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartReadSetImportJobSourceItem:
    r"""A source for a read set import job."""
    
    reference_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceArn') }})  
    sample_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleId') }})  
    source_files: shared_sourcefiles.SourceFiles = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFiles') }})  
    source_file_type: shared_filetype_enum.FileTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFileType') }})  
    subject_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectId') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    generated_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generatedFrom'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    