/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://ev.apis.paypi.dev"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * OTP email verification API by PayPI. <br/><br/>
 *
 * @remarks
 * EmailVerify provides a simple way to verify email addresses. We send emails ourselves taking the burden of setting up email systems and tracking codes. <br/><br/>
 * To learn more about this API, check out [EmailVerify documentation](https://emailverify.paypi.dev/) <br/><br/>
 *
 * ## Authentication
 * All requests to the EmailVerify API must be authenticated with an API Key. To get an API key, subscribe to the EmailVerify [here](https://app.paypi.dev/subscribe/c2VydmljZTo1OGQxZDNmMy05OWQ5LTQ3ZjYtOWJkNi02OWNkMTY1OGFmOWU=).  \
 * Set your `Authorization` header to `Bearer YOUR-API-KEY`.
 * ```
 * curl
 * -H "Content-Type: application/json" \
 * -H "Authorization: Bearer YOUR-API-KEY" \
 * ...
 * ```
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Check verification code
   *
   * @remarks
   * Checks the user's emailed code is valid.
   * If this returns success=true, you can safely assume the user you are interacting with is the owner of that email address.
   *
   */
  postCheckCode(
    req: operations.PostCheckCodeRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCheckCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCheckCodeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/checkCode";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCheckCodeResponse =
        new operations.PostCheckCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postCheckCode200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostCheckCode200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postCheckCode401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostCheckCode401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postCheckCode403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostCheckCode403ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send verification code
   *
   * @remarks
   * This request send's a code to the given email address, which should be returned to check it is correct.
   */
  postSendCode(
    req: operations.PostSendCodeRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSendCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSendCodeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sendCode";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSendCodeResponse =
        new operations.PostSendCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postSendCode200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostSendCode200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postSendCode400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostSendCode400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postSendCode401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostSendCode401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
