/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * DestinyEntitiesItemsDestinyItemComponent - The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
 */
public class DestinyEntitiesItemsDestinyItemComponent {
    /**
     * If the item is bound to a location, it will be specified in this enum.
     */
    
    public Integer bindStatus;

    public DestinyEntitiesItemsDestinyItemComponent withBindStatus(Integer bindStatus) {
        this.bindStatus = bindStatus;
        return this;
    }
    
    /**
     * The hash identifier for the specific inventory bucket in which the item is located.
     */
    
    public Long bucketHash;

    public DestinyEntitiesItemsDestinyItemComponent withBucketHash(Long bucketHash) {
        this.bucketHash = bucketHash;
        return this;
    }
    
    /**
     * If the item can expire, this is the date at which it will/did expire.
     */
    
    public OffsetDateTime expirationDate;

    public DestinyEntitiesItemsDestinyItemComponent withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }
    
    /**
     * If this is true, the object is actually a "wrapper" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be "opened" in game before you have and can use the item.
     *  Wrappers are an evolution of "bundles", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you "open" it.
     */
    
    public Boolean isWrapper;

    public DestinyEntitiesItemsDestinyItemComponent withIsWrapper(Boolean isWrapper) {
        this.isWrapper = isWrapper;
        return this;
    }
    
    /**
     * The identifier for the item's definition, which is where most of the useful static information for the item can be found.
     */
    
    public Long itemHash;

    public DestinyEntitiesItemsDestinyItemComponent withItemHash(Long itemHash) {
        this.itemHash = itemHash;
        return this;
    }
    
    /**
     * If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
     */
    
    public Long itemInstanceId;

    public DestinyEntitiesItemsDestinyItemComponent withItemInstanceId(Long itemInstanceId) {
        this.itemInstanceId = itemInstanceId;
        return this;
    }
    
    /**
     * If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
     */
    
    public Boolean[] itemValueVisibility;

    public DestinyEntitiesItemsDestinyItemComponent withItemValueVisibility(Boolean[] itemValueVisibility) {
        this.itemValueVisibility = itemValueVisibility;
        return this;
    }
    
    /**
     * An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
     */
    
    public Integer location;

    public DestinyEntitiesItemsDestinyItemComponent withLocation(Integer location) {
        this.location = location;
        return this;
    }
    
    /**
     * If the item can be locked, this will indicate that state.
     */
    
    public Boolean lockable;

    public DestinyEntitiesItemsDestinyItemComponent withLockable(Boolean lockable) {
        this.lockable = lockable;
        return this;
    }
    
    /**
     * The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.
     */
    
    public Long metricHash;

    public DestinyEntitiesItemsDestinyItemComponent withMetricHash(Long metricHash) {
        this.metricHash = metricHash;
        return this;
    }
    
    /**
     * The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.
     */
    
    public DestinyEntitiesItemsDestinyItemComponentMetricObjective metricObjective;

    public DestinyEntitiesItemsDestinyItemComponent withMetricObjective(DestinyEntitiesItemsDestinyItemComponentMetricObjective metricObjective) {
        this.metricObjective = metricObjective;
        return this;
    }
    
    /**
     * If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
     * If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
     */
    
    public Long overrideStyleItemHash;

    public DestinyEntitiesItemsDestinyItemComponent withOverrideStyleItemHash(Long overrideStyleItemHash) {
        this.overrideStyleItemHash = overrideStyleItemHash;
        return this;
    }
    
    /**
     * The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
     */
    
    public Integer quantity;

    public DestinyEntitiesItemsDestinyItemComponent withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.
     */
    
    public Integer state;

    public DestinyEntitiesItemsDestinyItemComponent withState(Integer state) {
        this.state = state;
        return this;
    }
    
    /**
     * If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.
     */
    
    public Integer[] tooltipNotificationIndexes;

    public DestinyEntitiesItemsDestinyItemComponent withTooltipNotificationIndexes(Integer[] tooltipNotificationIndexes) {
        this.tooltipNotificationIndexes = tooltipNotificationIndexes;
        return this;
    }
    
    /**
     * If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
     */
    
    public Integer transferStatus;

    public DestinyEntitiesItemsDestinyItemComponent withTransferStatus(Integer transferStatus) {
        this.transferStatus = transferStatus;
        return this;
    }
    
    /**
     * The version of this item, used to index into the versions list in the item definition quality block.
     */
    
    public Integer versionNumber;

    public DestinyEntitiesItemsDestinyItemComponent withVersionNumber(Integer versionNumber) {
        this.versionNumber = versionNumber;
        return this;
    }
    
    public DestinyEntitiesItemsDestinyItemComponent(){}
}
