/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PresidentialSummary {
    /**
     * candidate contributions less repayments
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_contributions_less_repayments")
    public Double candidateContributionsLessRepayments;
    public PresidentialSummary withCandidateContributionsLessRepayments(Double candidateContributionsLessRepayments) {
        this.candidateContributionsLessRepayments = candidateContributionsLessRepayments;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     *   -P00000001    All candidates
     *   -P00000002    Democrasts
     *   -P00000003    Republicans
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_id")
    public String candidateId;
    public PresidentialSummary withCandidateId(String candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * Candidate last name
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_last_name")
    public String candidateLastName;
    public PresidentialSummary withCandidateLastName(String candidateLastName) {
        this.candidateLastName = candidateLastName;
        return this;
    }
    
    /**
     * Name of candidate running for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_name")
    public String candidateName;
    public PresidentialSummary withCandidateName(String candidateName) {
        this.candidateName = candidateName;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_party_affiliation")
    public String candidatePartyAffiliation;
    public PresidentialSummary withCandidatePartyAffiliation(String candidatePartyAffiliation) {
        this.candidatePartyAffiliation = candidatePartyAffiliation;
        return this;
    }
    
    /**
     * Ending cash balance on the most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_on_hand_end")
    public Double cashOnHandEnd;
    public PresidentialSummary withCashOnHandEnd(Double cashOnHandEnd) {
        this.cashOnHandEnd = cashOnHandEnd;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_designation")
    public String committeeDesignation;
    public PresidentialSummary withCommitteeDesignation(String committeeDesignation) {
        this.committeeDesignation = committeeDesignation;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_id")
    public String committeeId;
    public PresidentialSummary withCommitteeId(String committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_name")
    public String committeeName;
    public PresidentialSummary withCommitteeName(String committeeName) {
        this.committeeName = committeeName;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type")
    public String committeeType;
    public PresidentialSummary withCommitteeType(String committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * Debts owed by the committee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debts_owed_by_committee")
    public Double debtsOwedByCommittee;
    public PresidentialSummary withDebtsOwedByCommittee(Double debtsOwedByCommittee) {
        this.debtsOwedByCommittee = debtsOwedByCommittee;
        return this;
    }
    
    /**
     * disbursements less offsets
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disbursements_less_offsets")
    public Double disbursementsLessOffsets;
    public PresidentialSummary withDisbursementsLessOffsets(Double disbursementsLessOffsets) {
        this.disbursementsLessOffsets = disbursementsLessOffsets;
        return this;
    }
    
    /**
     * Year of election
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election_year")
    public Integer electionYear;
    public PresidentialSummary withElectionYear(Integer electionYear) {
        this.electionYear = electionYear;
        return this;
    }
    
    /**
     * exempt legal accounting disbursement
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt_legal_accounting_disbursement")
    public Double exemptLegalAccountingDisbursement;
    public PresidentialSummary withExemptLegalAccountingDisbursement(Double exemptLegalAccountingDisbursement) {
        this.exemptLegalAccountingDisbursement = exemptLegalAccountingDisbursement;
        return this;
    }
    
    /**
     * Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("federal_funds")
    public Double federalFunds;
    public PresidentialSummary withFederalFunds(Double federalFunds) {
        this.federalFunds = federalFunds;
        return this;
    }
    
    /**
     * fundraising disbursements
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fundraising_disbursements")
    public Double fundraisingDisbursements;
    public PresidentialSummary withFundraisingDisbursements(Double fundraisingDisbursements) {
        this.fundraisingDisbursements = fundraisingDisbursements;
        return this;
    }
    
    /**
     * individual contributions less refunds
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual_contributions_less_refunds")
    public Double individualContributionsLessRefunds;
    public PresidentialSummary withIndividualContributionsLessRefunds(Double individualContributionsLessRefunds) {
        this.individualContributionsLessRefunds = individualContributionsLessRefunds;
        return this;
    }
    
    /**
     * Contributions received
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_receipts")
    public Double netReceipts;
    public PresidentialSummary withNetReceipts(Double netReceipts) {
        this.netReceipts = netReceipts;
        return this;
    }
    
    /**
     * Offsets to operating expenditures
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsets_to_operating_expenditures")
    public Double offsetsToOperatingExpenditures;
    public PresidentialSummary withOffsetsToOperatingExpenditures(Double offsetsToOperatingExpenditures) {
        this.offsetsToOperatingExpenditures = offsetsToOperatingExpenditures;
        return this;
    }
    
    /**
     * Total operating expenditures
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operating_expenditures")
    public Double operatingExpenditures;
    public PresidentialSummary withOperatingExpenditures(Double operatingExpenditures) {
        this.operatingExpenditures = operatingExpenditures;
        return this;
    }
    
    /**
     * Other disbursements
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_disbursements")
    public Double otherDisbursements;
    public PresidentialSummary withOtherDisbursements(Double otherDisbursements) {
        this.otherDisbursements = otherDisbursements;
        return this;
    }
    
    /**
     * pac contributions less refunds
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pac_contributions_less_refunds")
    public Double pacContributionsLessRefunds;
    public PresidentialSummary withPacContributionsLessRefunds(Double pacContributionsLessRefunds) {
        this.pacContributionsLessRefunds = pacContributionsLessRefunds;
        return this;
    }
    
    /**
     * party contributions less refunds
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party_contributions_less_refunds")
    public Double partyContributionsLessRefunds;
    public PresidentialSummary withPartyContributionsLessRefunds(Double partyContributionsLessRefunds) {
        this.partyContributionsLessRefunds = partyContributionsLessRefunds;
        return this;
    }
    
    /**
     * repayments loans made by candidate
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repayments_loans_made_by_candidate")
    public Double repaymentsLoansMadeByCandidate;
    public PresidentialSummary withRepaymentsLoansMadeByCandidate(Double repaymentsLoansMadeByCandidate) {
        this.repaymentsLoansMadeByCandidate = repaymentsLoansMadeByCandidate;
        return this;
    }
    
    /**
     * repayments other loans
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repayments_other_loans")
    public Double repaymentsOtherLoans;
    public PresidentialSummary withRepaymentsOtherLoans(Double repaymentsOtherLoans) {
        this.repaymentsOtherLoans = repaymentsOtherLoans;
        return this;
    }
    
    /**
     * Net receipts, in millions
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rounded_net_receipts")
    public Double roundedNetReceipts;
    public PresidentialSummary withRoundedNetReceipts(Double roundedNetReceipts) {
        this.roundedNetReceipts = roundedNetReceipts;
        return this;
    }
    
    /**
     * total contribution refunds
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_contribution_refunds")
    public Double totalContributionRefunds;
    public PresidentialSummary withTotalContributionRefunds(Double totalContributionRefunds) {
        this.totalContributionRefunds = totalContributionRefunds;
        return this;
    }
    
    /**
     * total loan repayments made
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_loan_repayments_made")
    public Double totalLoanRepaymentsMade;
    public PresidentialSummary withTotalLoanRepaymentsMade(Double totalLoanRepaymentsMade) {
        this.totalLoanRepaymentsMade = totalLoanRepaymentsMade;
        return this;
    }
    
    /**
     * transfers from affiliated committees
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfers_from_affiliated_committees")
    public Double transfersFromAffiliatedCommittees;
    public PresidentialSummary withTransfersFromAffiliatedCommittees(Double transfersFromAffiliatedCommittees) {
        this.transfersFromAffiliatedCommittees = transfersFromAffiliatedCommittees;
        return this;
    }
    
    /**
     * transfers to other authorized committees
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfers_to_other_authorized_committees")
    public Double transfersToOtherAuthorizedCommittees;
    public PresidentialSummary withTransfersToOtherAuthorizedCommittees(Double transfersToOtherAuthorizedCommittees) {
        this.transfersToOtherAuthorizedCommittees = transfersToOtherAuthorizedCommittees;
        return this;
    }
    
}
