"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import resourceidentifier as shared_resourceidentifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ImageAttributesBucketTypeEnum(str, Enum):
    r"""This will be replaced by the relationship `bucket` in a future update.<br/>
    The type of the owning entity
    """
    AD_REP_ACCOUNT = 'AdRepAccount'
    AGENCY = 'Agency'
    NETWORK = 'Network'
    SERIES = 'Series'
    USER = 'User'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageAttributesTheCropAreaWithinTheOriginalMediaAsset:
    
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""The height of the crop area"""  
    left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('left'), 'exclude': lambda f: f is None }})
    r"""The left coordinate of the crop area"""  
    top: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top'), 'exclude': lambda f: f is None }})
    r"""The top coordinate of the crop area"""  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""The width of the crop area"""  
    
class ImageAttributesStatusEnum(str, Enum):
    r"""The current value of the image state machine. It starts with `uploaded` and
    transitions to `processing` once a worker has picked it up. If all variations and
    styles of an image have been successfully created, the status becomes `valid`. In
    case of a problem during the processing it changes to `invalid`.
    """
    INVALID = 'invalid'
    PROCESSING = 'processing'
    UPLOADED = 'uploaded'
    VALID = 'valid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageAttributes:
    
    bucket_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucket_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `bucket` in a future update.<br/>
    The ID of the owning entity
    """  
    bucket_type: Optional[ImageAttributesBucketTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucket_type'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `bucket` in a future update.<br/>
    The type of the owning entity
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    crop_data: Optional[ImageAttributesTheCropAreaWithinTheOriginalMediaAsset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crop_data'), 'exclude': lambda f: f is None }})  
    status: Optional[ImageAttributesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The current value of the image state machine. It starts with `uploaded` and
    transitions to `processing` once a worker has picked it up. If all variations and
    styles of an image have been successfully created, the status becomes `valid`. In
    case of a problem during the processing it changes to `invalid`.
    """  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageRelationshipsAllMediaAssetsAvailableForThisImage:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageRelationships:
    
    media_assets: Optional[ImageRelationshipsAllMediaAssetsAvailableForThisImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_assets'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Image:
    
    attributes: Optional[ImageAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[ImageRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `images`"""  
    