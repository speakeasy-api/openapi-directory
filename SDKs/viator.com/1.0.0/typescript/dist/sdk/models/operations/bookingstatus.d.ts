import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
/**
 * **note**: all items are optional, but at least one needs to be included
 */
export declare class BookingStatusRequestBody extends SpeakeasyBase {
    /**
     * **earliest date** for *this* booking (must be in the future)
     */
    bookingDateFrom?: string;
    /**
     * **latest date** for *this* booking (must be in the future)
     */
    bookingDateTo?: string;
    /**
     * **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`
     */
    distributorItemRefs?: string[];
    /**
     * **array** of partner-defined distributor reference identifiers
     */
    distributorRefs?: string[];
    /**
     * **array** of item identifiers to check
     */
    itemIds?: number[];
    /**
     * **first name** of the lead traveler
     */
    leadFirstName?: string;
    /**
     * **surname** of the lead traveler
     */
    leadSurname?: string;
    /**
     * **specifier**:
     *
     * @remarks
     * - `true`: bypass the poll limit in the prelive environment only (recommended for testing)
     * - `false`: (default)
     *
     */
    test?: boolean;
}
export declare class BookingStatusRequest extends SpeakeasyBase {
    /**
     * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
     *
     * @remarks
     *
     */
    acceptLanguage: string;
    requestBody?: BookingStatusRequestBody;
}
export declare class BookingStatus200ApplicationJSONDataItemSummaries extends SpeakeasyBase {
    /**
     * **object** containing item booking status information
     */
    bookingStatus?: shared.BookingStatusItem;
    /**
     * **partner-defined distributor item reference identifier**
     */
    distributorItemRef?: string;
    /**
     * Booking-reference number generated by Viator
     *
     * @remarks
     * - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
     *
     */
    itemId?: number;
    /**
     * ignore (Viator only)
     */
    itineraryId?: number;
    /**
     * **sort order** for *this* item
     */
    sortOrder?: number;
    /**
     * **date** of the booking
     */
    travelDate?: string;
}
/**
 * **object** containing booking status and details
 */
export declare class BookingStatus200ApplicationJSONData extends SpeakeasyBase {
    /**
     * **date**: of *this* booking
     */
    bookingDate?: string;
    /**
     * **object** containing itinerary booking status information
     */
    bookingStatus?: shared.BookingStatusItinerary;
    /**
     * **alphanumeric identifer** of the distributor for *this* booking
     */
    distributorRef?: string;
    /**
     * **array** of item summary objects
     */
    itemSummaries?: BookingStatus200ApplicationJSONDataItemSummaries[];
    /**
     * ignore (Viator only)
     */
    itineraryId?: number;
    /**
     * **sort order** for *this* response
     */
    sortOrder?: number;
}
/**
 * Success
 */
export declare class BookingStatus200ApplicationJSON extends SpeakeasyBase {
    /**
     * **object** containing booking status and details
     */
    data?: BookingStatus200ApplicationJSONData;
    /**
     * **timestamp** of *this* response
     */
    dateStamp?: string;
    /**
     * **array** of error codes pertaining to *this* error
     *
     * @remarks
     * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
     *
     */
    errorCodes?: string[];
    /**
     * **array** of error message strings
     */
    errorMessage?: any[];
    /**
     * **array** of error message strings in plain text
     */
    errorMessageText?: string;
    /**
     * **name** of *this* type of error
     */
    errorName?: string;
    /**
     * **reference number** of *this* error
     */
    errorReference?: string;
    /**
     * **code** specifying the type of error
     */
    errorType?: string;
    /**
     * ignore (Viator only)
     */
    extraInfo?: Record<string, any>;
    /**
     * ignore (Viator only)
     */
    extraObject?: Record<string, any>;
    /**
     * **boolean indicator** of *this* request's outcome
     *
     * @remarks
     * - `true`: the request was successful with no errors
     * - `false`: an error was encountered
     *
     */
    success?: boolean;
    /**
     * **number** of results available for *this* service
     *
     * @remarks
     *
     */
    totalCount?: number;
    /**
     * **unique numeric id** of the server that processed *this* request
     */
    vmid?: string;
}
export declare class BookingStatusResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * Success
     */
    bookingStatus200ApplicationJSONObject?: BookingStatus200ApplicationJSON;
}
