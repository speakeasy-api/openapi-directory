// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EcadAddressBuildingUseEnum - Can be one of:
//
// - `R` Residential
// - `C` Commercial
// - `B` Both
// - `U` Unknown
type EcadAddressBuildingUseEnum string

const (
	EcadAddressBuildingUseEnumR EcadAddressBuildingUseEnum = "R"
	EcadAddressBuildingUseEnumC EcadAddressBuildingUseEnum = "C"
	EcadAddressBuildingUseEnumB EcadAddressBuildingUseEnum = "B"
	EcadAddressBuildingUseEnumU EcadAddressBuildingUseEnum = "U"
)

func (e *EcadAddressBuildingUseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "R":
		fallthrough
	case "C":
		fallthrough
	case "B":
		fallthrough
	case "U":
		*e = EcadAddressBuildingUseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressBuildingUseEnum: %s", s)
	}
}

// EcadAddressCountryEnum -   Full country names (ISO 3166)
type EcadAddressCountryEnum string

const (
	EcadAddressCountryEnumIreland EcadAddressCountryEnum = "Ireland"
)

func (e *EcadAddressCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ireland":
		*e = EcadAddressCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressCountryEnum: %s", s)
	}
}

// EcadAddressCountryIsoEnum -   3 letter country code (ISO 3166-1)
type EcadAddressCountryIsoEnum string

const (
	EcadAddressCountryIsoEnumIrl EcadAddressCountryIsoEnum = "IRL"
)

func (e *EcadAddressCountryIsoEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IRL":
		*e = EcadAddressCountryIsoEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressCountryIsoEnum: %s", s)
	}
}

// EcadAddressCountryIso2Enum -  2 letter country code (ISO 3166-1)
type EcadAddressCountryIso2Enum string

const (
	EcadAddressCountryIso2EnumIe EcadAddressCountryIso2Enum = "IE"
)

func (e *EcadAddressCountryIso2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IE":
		*e = EcadAddressCountryIso2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressCountryIso2Enum: %s", s)
	}
}

type EcadAddressDatasetEnum string

const (
	EcadAddressDatasetEnumEcad EcadAddressDatasetEnum = "ecad"
)

func (e *EcadAddressDatasetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ecad":
		*e = EcadAddressDatasetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressDatasetEnum: %s", s)
	}
}

// EcadAddressHolidayHomeEnum - A Yes/No field, indicating whether or not the building is a holiday home.
type EcadAddressHolidayHomeEnum string

const (
	EcadAddressHolidayHomeEnumN       EcadAddressHolidayHomeEnum = "N"
	EcadAddressHolidayHomeEnumY       EcadAddressHolidayHomeEnum = "Y"
	EcadAddressHolidayHomeEnumUnknown EcadAddressHolidayHomeEnum = ""
)

func (e *EcadAddressHolidayHomeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "N":
		fallthrough
	case "Y":
		fallthrough
	case "":
		*e = EcadAddressHolidayHomeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressHolidayHomeEnum: %s", s)
	}
}

// EcadAddressLanguageEnum - Language represented by 2 letter ISO Code (639-1)
type EcadAddressLanguageEnum string

const (
	EcadAddressLanguageEnumEn EcadAddressLanguageEnum = "en"
	EcadAddressLanguageEnumGa EcadAddressLanguageEnum = "ga"
)

func (e *EcadAddressLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "en":
		fallthrough
	case "ga":
		*e = EcadAddressLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressLanguageEnum: %s", s)
	}
}

// EcadAddressOrgVacantEnum - A Yes/No field, indicating whether the organisation is vacant.
type EcadAddressOrgVacantEnum string

const (
	EcadAddressOrgVacantEnumY       EcadAddressOrgVacantEnum = "Y"
	EcadAddressOrgVacantEnumN       EcadAddressOrgVacantEnum = "N"
	EcadAddressOrgVacantEnumUnknown EcadAddressOrgVacantEnum = ""
)

func (e *EcadAddressOrgVacantEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Y":
		fallthrough
	case "N":
		fallthrough
	case "":
		*e = EcadAddressOrgVacantEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressOrgVacantEnum: %s", s)
	}
}

// EcadAddressUnderConstructionEnum - A Yes/No field, indicating whether or not the building is under construction.
type EcadAddressUnderConstructionEnum string

const (
	EcadAddressUnderConstructionEnumN       EcadAddressUnderConstructionEnum = "N"
	EcadAddressUnderConstructionEnumY       EcadAddressUnderConstructionEnum = "Y"
	EcadAddressUnderConstructionEnumUnknown EcadAddressUnderConstructionEnum = ""
)

func (e *EcadAddressUnderConstructionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "N":
		fallthrough
	case "Y":
		fallthrough
	case "":
		*e = EcadAddressUnderConstructionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressUnderConstructionEnum: %s", s)
	}
}

// EcadAddressVacantEnum - A Yes/No field, indicating whether the building is vacant.
type EcadAddressVacantEnum string

const (
	EcadAddressVacantEnumY       EcadAddressVacantEnum = "Y"
	EcadAddressVacantEnumN       EcadAddressVacantEnum = "N"
	EcadAddressVacantEnumUnknown EcadAddressVacantEnum = ""
)

func (e *EcadAddressVacantEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Y":
		fallthrough
	case "N":
		fallthrough
	case "":
		*e = EcadAddressVacantEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcadAddressVacantEnum: %s", s)
	}
}

// EcadAddress - The ECAD contains additional data for each ECAF address.
type EcadAddress struct {
	// Address Point ID
	AddressPointID string `json:"address_point_id"`
	// The address reference is the An Post GeoDirectory address reference identifier used by the Universal Service Provider.
	AddressReference string `json:"address_reference"`
	// Addresses points can assume one of the following values:
	//
	// - Residential Address Point. This type of address point has one residential addresses associated with it.
	// - Non-Residential Address Point. This type of address point has one or more non-residential address (business, club or other organisation) associated with it.
	// - Mixed Address Point. This is a special case where the residential and non residential addresses in the building are essentially the same address. The typical example is a farm house on an active farm. It is important to note that this is a special case. In general a building with both residential and non-residential addresses (e.g. an apartment over a shop) will receive two address points, one commercial and one residential, and hence two Eircodes.
	//
	// Buildings can contain multiple address points of type Residential and/or Non-Residential.
	AddressType string `json:"address_type"`
	// The building type can assume one of the following values:
	//
	// - Single Occupancy Residential Building. This type of building contains one residential address.
	// - Multi Occupancy Residential Building. This type of building contains multiple residential addresses.
	// - Single Occupancy Non-Residential Building. This type of building contains one non-residential address (business, club or other organisation).
	// - Multi Occupancy Non-Residential Building. This type of building contains multiple non-residential addresses (business, club or other organisation).
	// - Multi Occupancy Mixed Use Building. This type of building contains multiple residential and non- residential addresses.
	//
	// Buildings can also have a more specific address types such as a Hospital, School, Shopping Centre, etc.
	BuildingAddressType string `json:"building_address_type"`
	// A building group is a collection of buildings with a collective name, located on or near the same thoroughfare.
	BuildingGroup string `json:"building_group"`
	// The building group type can be:
	//
	// - Residential Building Group. This type of building group contains buildings with residential addresses only.
	// - Non-Residential Building Group This type of building group contains buildings with non-residential addresses (business, club or other organisation) only.
	// - Mixed Building Group. This type of building group contains buildings with residential and non-residential addresses. Can also have a more specific address type such as a Hospital, School, Shopping Centre, etc.
	//
	// Building groups can also have a more specific address type such as a Hospital, School, Shopping Centre, etc.
	BuildingGroupAddressType string `json:"building_group_address_type"`
	// Building Group ID
	BuildingGroupID string `json:"building_group_id"`
	// Building ID
	BuildingID string `json:"building_id"`
	// The name given to the building. Prepended by sub building, if any, when the sub building does not appear on a line to itself. The building name is omitted if it is the same as either the Organisation or Building Group.
	BuildingName string `json:"building_name"`
	// A number associated with the whole building. The building number may have a numeric and an alphanumeric component, which are concatenated e.g. 2A, or alternatively will have a simple building number or a complex building number. The building number always relates to the whole building and not a sub-unit within it.
	// A complex building number may be one of the following:
	//   - Dual. Two number separated by '/' e.g. 63/64 = 63, 64
	//   - Sequence. An odd or even sequence of numbers with lower and upper bound separated by an underscore '_' e.g. `1_5` = 1,3,5 and `2_6` = 2,4,6
	//   - Range. A range of consecutive numbers with lower and upper bound separated by a dash '-' e.g. `63-66` = 63, 64, 56, 66
	// The building number never appears on a line by itself and can prepend Building Group, Primary Thoroughfare or Primary Locality.
	BuildingNumber string `json:"building_number"`
	// Describes the type of building, e.g. detached, semi-detached, bungalow.
	BuildingType string `json:"building_type"`
	// Can be one of:
	//
	// - `R` Residential
	// - `C` Commercial
	// - `B` Both
	// - `U` Unknown
	BuildingUse EcadAddressBuildingUseEnum `json:"building_use"`
	//   Full country names (ISO 3166)
	//
	Country EcadAddressCountryEnum `json:"country"`
	//   3 letter country code (ISO 3166-1)
	//
	CountryIso EcadAddressCountryIsoEnum `json:"country_iso"`
	//  2 letter country code (ISO 3166-1)
	//
	CountryIso2 EcadAddressCountryIso2Enum `json:"country_iso_2"`
	Dataset     EcadAddressDatasetEnum     `json:"dataset"`
	// Unique Identifier for Electoral Divisions 2017 data.
	//
	// Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
	DedID string `json:"ded_id"`
	// The department or division within an organisation. If the department element exists, then the organisation must also exist.
	Department string `json:"department"`
	// Unique 10 digit ECAD ID
	EcadID *string `json:"ecad_id,omitempty"`
	// The seven character Eircode has an A65 F4E2 format. The Eircode is a mandatory address element. The last line of a Postal Address will contain the Eircode, displayed with a space. e.g. `A65 F4E2`.
	//
	// The Eircode is always the last line of a Postal Address generated within the state, e.g. if an address has four lines then the Eircode will be on its own on Address Line 5. For inbound international mail the country name IRELAND should be appended as the last line of the Postal Address.
	Eircode string `json:"eircode"`
	// Gaeltact refers to a district where the Irish government recognises that the Irish language is the predominant language.
	//
	// Returns `true` if address is in a Gaeltacht area and `false` if not.
	Gaeltacht bool `json:"gaeltacht"`
	// Unique Identifier for the 7 Gaeltacht areas 2017 data.
	//
	// Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
	GaeltachtID string `json:"gaeltacht_id"`
	// A Yes/No field, indicating whether or not the building is a holiday home.
	HolidayHome EcadAddressHolidayHomeEnum `json:"holiday_home"`
	// Global unique internally generated identifier for an address
	ID string `json:"id"`
	// Language represented by 2 letter ISO Code (639-1)
	//
	Language EcadAddressLanguageEnum `json:"language"`
	// The latitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. `51.5083983`.
	//
	// Returns an empty string if no location data is available.
	Latitude Latitude `json:"latitude"`
	// Address Line 1
	Line1 string `json:"line_1"`
	// Address Line 2
	Line2 string `json:"line_2"`
	// Address Line 3
	Line3 string `json:"line_3"`
	// Address Line 4
	Line4 string `json:"line_4"`
	// Address Line 5
	Line5 string `json:"line_5"`
	// Address Line 6
	Line6 string `json:"line_6"`
	// Address Line 7
	Line7 string `json:"line_7"`
	// Address Line 8
	Line8 string `json:"line_8"`
	// Address Line 9
	Line9 string `json:"line_9"`
	// Name of local authority
	LocalAuthority string `json:"local_authority"`
	// The longitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. -0.1283983
	//
	// Returns an empty string if no location data is available.
	Longitude Longitude `json:"longitude"`
	// Name of the NACE Category
	NaceCategory string `json:"nace_category"`
	// The NACE Code for the Category.
	NaceCode string `json:"nace_code"`
	// NUA means "non-unique address".
	//
	// The NUA field contains `true` when the address is a non-unique address, and `false` when it is a unique address.
	//
	// Ireland has a very high level of non-unique addresses (NUA), i.e. the address does not contain a unique building number or name. Approximately 35% of all Irish addresses are non-unique which equates to 600,000 addresses.
	//
	// The typical example of NUA addressing is where every address in a townland is the same. The way that post is delivered is by local knowledge of postal delivery personnel of which addressee lives in which house.
	//
	// N.B. For a NUA address, it is impossible to match to a unique record in the ECAD and assign an Eircode.
	Nua bool `json:"nua"`
	// A Yes/No field, indicating whether the organisation is vacant.
	OrgVacant EcadAddressOrgVacantEnum `json:"org_vacant"`
	// Organisation name
	Organisation string `json:"organisation"`
	// Organisation ID
	OrganisationID string `json:"organisation_id"`
	// One of the 26 Counties in the Republic of Ireland. These counties are sub-national divisions used for the purposes of administrative, geographical and political demarcation. Post County is the County associated with the Post Town, not the geographic county in which the building is located. The Post County is normally used as part of the Postal Address with some exceptions e.g. Dublin Postal Districts where the Post County is not used and some Post Towns (e.g. Tipperary, Kildare, etc.) that have the same name as the Post County.
	PostCounty string `json:"post_county"`
	// Post County ID
	PostCountyID string `json:"post_county_id"`
	// The post town is a significant element of the Postal Address, however it is not always populated in an address. The official post office guide, Eolaí an Phoist1, describes post towns in the following manner:
	//
	// "A provincial postal address may include the name of a town or village several miles distant, with which the addressee has little or no connection, and, in some places, especially if this residence happens to be near a county boundary, the name of the neighbouring county instead of the county in which he actually resides. The explanation is that the main mail despatches have to be sent for more detailed sub division to certain centres known as post towns, chosen because of their accessibility and convenience."
	PostTown string `json:"post_town"`
	// Post Town ID
	PostTownID string `json:"post_town_id"`
	// An Post sorting information.
	PostaimPresort152 string `json:"postaim_presort_152"`
	// An Post sorting information.
	PostaimPresort61 string `json:"postaim_presort_61"`
	// First locality elements which can refer to areas, districts, industrial estates, towns, etc.
	//
	// The primary locality refers to the specific place the address is.
	//
	// In urban areas, the primary locality can be required to distinguish between two thoroughfares of the same name in the same district or town. Industrial estates with named thoroughfares are also held as localities. In rural areas the primary locality is generally a townland name.
	PrimaryLocality string `json:"primary_locality"`
	// The locality type can be:
	//   - Rural Locality. This is generally a townland.
	//   - Industrial Estate. Industrial Estate, Industrial Park, Business Campus, etc.
	//   - Shopping District. Shopping Centre.
	//   - Housing Estate. Residential Housing Estate.
	//   - Village. Based on Census 2011 population < 1,500.
	//   - Town. Based on Census 2011 population > 1,500.
	//   - Urban Area. Wholly within a village/town/city e.g. Rathmines.
	//   - Suburban Locality. This is an area that is both rural and urban, as it is both a townland, and also an area name applied to houses in a town, as the town has extended partially into the townland.
	//
	// Where the locality is also the post town, the type can be:
	//   - Village. Based on Census 2011 population < 1,500
	//   - Town. Based on Census 2011 population > 1,500
	//   - Postal District. Dublin 1 to 24
	//   - City. Dublin, Cork, Limerick, Galway or Waterford
	PrimaryLocalityAddressType string `json:"primary_locality_address_type"`
	// Primary Locality ID
	PrimaryLocalityID string `json:"primary_locality_id"`
	// The name of the thoroughfare on which premises are located. It may appear on a line by itself or be appended to either a sub building or building number.
	//
	// Addresses with thoroughfares can sometimes have the thoroughfare excluded where a Building Group exists, such as a Retail Centre or Business Park, and the thoroughfare is not part of the Postal Address.
	PrimaryThoroughfare string `json:"primary_thoroughfare"`
	// Primary Thoroughfare ID
	PrimaryThoroughfareID string `json:"primary_thoroughfare_id"`
	// An Post publicity post zone information.
	PublicityPostZone string `json:"publicity_post_zone"`
	// Never present without a primary locality. The secondary locality has a wider geographic scope than the primary locality.
	//
	// It is the secondary locality therefore which differentiates addresses with the same primary locality name within the same county.
	//
	// Secondary localities are more likely to be required for rural addresses.
	//
	// Second locality elements which can refer to areas, districts, industrial estates, towns, etc
	//
	// The secondary locality helps identify where the primary locality is located.
	SecondaryLocality string `json:"secondary_locality"`
	// The locality type can be:
	//   - Rural Locality. This is generally a townland.
	//   - Industrial Estate. Industrial Estate, Industrial Park, Business Campus, etc.
	//   - Shopping District. Shopping Centre.
	//   - Housing Estate. Residential Housing Estate.
	//   - Village. Based on Census 2011 population < 1,500.
	//   - Town. Based on Census 2011 population > 1,500.
	//   - Urban Area. Wholly within a village/town/city e.g. Rathmines.
	//   - Suburban Locality. This is an area that is both rural and urban, as it is both a townland, and also an area name applied to houses in a town, as the town has extended partially into the townland.
	//
	// Where the locality is also the post town, the type can be:
	//   - Village. Based on Census 2011 population < 1,500
	//   - Town. Based on Census 2011 population > 1,500
	//   - Postal District. Dublin 1 to 24
	//   - City. Dublin, Cork, Limerick, Galway or Waterford
	SecondaryLocalityAddressType string `json:"secondary_locality_address_type"`
	// Secondary Locality ID
	SecondaryLocalityID string `json:"secondary_locality_id"`
	// It is never present without a primary thoroughfare. The primary thoroughfare is dependent on the secondary thoroughfare and appears before the secondary thoroughfare in any address.
	//
	// Secondary thoroughfare are generally used to assist locating a primary thoroughfare.
	SecondaryThoroughfare string `json:"secondary_thoroughfare"`
	// Secondary Thoroughfare ID
	SecondaryThoroughfareID string `json:"secondary_thoroughfare_id"`
	// Unique Identifier for the Small Area 2017 data.
	//
	// Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
	SmallAreaID string `json:"small_area_id"`
	// The sub-building refers to an apartment, flat or unit within a building.
	SubBuildingName string `json:"sub_building_name"`
	// Also known as the Post Town.
	//
	// The name of the post town associated with the premises for postal delivery purposes. This includes Dublin Postal Districts "Dublin 1" to "Dublin 24".
	//
	// The post town is a significant element of the Postal Address, however it is not always populated in an address. The official post office guide, Eolaí an Phoist4, describes post towns in the following manner:
	//
	// "A provincial postal address may include the name of a town or village several miles distant, with which the addressee has little or no connection, and, in some places, especially if this residence happens to be near a county boundary, the name of the neighbouring county instead of the county in which he actually resides. The explanation is that the main mail despatches have to be sent for more detailed sub division to certain centres known as POST TOWNS, chosen because of their accessibility and convenience."
	TertiaryLocality string `json:"tertiary_locality"`
	// Unique Identifier for townland 2017 data.
	//
	// Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
	TownlandID string `json:"townland_id"`
	// A Yes/No field, indicating whether or not the building is under construction.
	UnderConstruction EcadAddressUnderConstructionEnum `json:"under_construction"`
	// A Yes/No field, indicating whether the building is vacant.
	Vacant EcadAddressVacantEnum `json:"vacant"`
}
