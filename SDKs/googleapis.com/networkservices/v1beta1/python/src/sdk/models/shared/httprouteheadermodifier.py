"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteHeaderModifier:
    r"""The specification for modifying HTTP header in HTTP request and HTTP response."""
    
    add: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Add the headers with given map where key is the name of the header, value is the value of the header."""  
    remove: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remove'), 'exclude': lambda f: f is None }})
    r"""Remove headers (matching by header names) specified in the list."""  
    set: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('set'), 'exclude': lambda f: f is None }})
    r"""Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header."""  
    