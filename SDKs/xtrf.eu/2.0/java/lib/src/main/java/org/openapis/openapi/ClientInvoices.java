/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * To change the description use /examples/TagsDescriptions.json
 */
public class ClientInvoices {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ClientInvoices(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreatePaymentResponse createPayment(org.openapis.openapi.models.operations.CreatePaymentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePaymentPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/payments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePaymentResponse res = new org.openapis.openapi.models.operations.CreatePaymentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Creates a new invoice.
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Create1Response create1(org.openapis.openapi.models.operations.Create1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/accounting/customers/invoices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Create1Response res = new org.openapis.openapi.models.operations.Create1Response() {{
            customerInvoiceCreateResultDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceCreateResultDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceCreateResultDTO.class);
                res.customerInvoiceCreateResultDTO = out;
            }
        }

        return res;
    }

    /**
     * Removes a client invoice.
     * Removes a client invoice.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Delete1Response delete1(org.openapis.openapi.models.operations.Delete1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.Delete1PathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Delete1Response res = new org.openapis.openapi.models.operations.Delete1Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Removes a customer payment.
     * Removes a customer payment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Delete2Response delete2(org.openapis.openapi.models.operations.Delete2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.Delete2PathParams.class, baseUrl, "/accounting/customers/payments/{paymentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Delete2Response res = new org.openapis.openapi.models.operations.Delete2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Generates client invoices' documents.
     * Generates client invoices' documents.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DownloadDocumentsResponse downloadDocuments(org.openapis.openapi.models.operations.DownloadDocumentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/accounting/customers/invoices/documents");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DownloadDocumentsResponse res = new org.openapis.openapi.models.operations.DownloadDocumentsResponse() {{
            urlResultDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UrlResultDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UrlResultDTO.class);
                res.urlResultDTO = out;
            }
        }

        return res;
    }

    /**
     * Duplicate client invoice.
     * Duplicate client invoice.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DuplicateResponse duplicate(org.openapis.openapi.models.operations.DuplicateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DuplicatePathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/duplicate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DuplicateResponse res = new org.openapis.openapi.models.operations.DuplicateResponse() {{
            customerInvoiceDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceDTO.class);
                res.customerInvoiceDTO = out;
            }
        }

        return res;
    }

    /**
     * Duplicate client invoice as pro forma.
     * Duplicate client invoice as pro forma.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DuplicateAsProFormaResponse duplicateAsProForma(org.openapis.openapi.models.operations.DuplicateAsProFormaRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DuplicateAsProFormaPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/duplicate/proForma", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DuplicateAsProFormaResponse res = new org.openapis.openapi.models.operations.DuplicateAsProFormaResponse() {{
            customerInvoiceDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceDTO.class);
                res.customerInvoiceDTO = out;
            }
        }

        return res;
    }

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllResponse getAll(org.openapis.openapi.models.operations.GetAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/accounting/customers/invoices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllResponse res = new org.openapis.openapi.models.operations.GetAllResponse() {{
            customerInvoiceDTOS = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceDTO[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceDTO[].class);
                res.customerInvoiceDTOS = out;
            }
        }

        return res;
    }

    /**
     * Returns client invoices' internal identifiers.
     * Returns client invoices' internal identifiers.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllIdsResponse getAllIds(org.openapis.openapi.models.operations.GetAllIdsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/accounting/customers/invoices/ids");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAllIdsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllIdsResponse res = new org.openapis.openapi.models.operations.GetAllIdsResponse() {{
            getAllIdsDefaultApplicationVndXtrfV1PlusJsonInt32Integers = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                Integer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Integer[].class);
                res.getAllIdsDefaultApplicationVndXtrfV1PlusJsonInt32Integers = out;
            }
        }

        return res;
    }

    /**
     * Returns client invoice details.
     * Returns client invoice details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetByIdResponse getById(org.openapis.openapi.models.operations.GetByIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetByIdPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetByIdQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetByIdResponse res = new org.openapis.openapi.models.operations.GetByIdResponse() {{
            customerInvoiceDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceDTO.class);
                res.customerInvoiceDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns dates of a given client invoice.
     * Returns dates of a given client invoice.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDatesResponse getDates(org.openapis.openapi.models.operations.GetDatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDatesPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/dates", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDatesResponse res = new org.openapis.openapi.models.operations.GetDatesResponse() {{
            customerInvoiceDatesDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomerInvoiceDatesDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomerInvoiceDatesDTO.class);
                res.customerInvoiceDatesDTO = out;
            }
        }

        return res;
    }

    /**
     * Generates client invoice document (PDF).
     * Generates client invoice document (PDF).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDocumentResponse getDocument(org.openapis.openapi.models.operations.GetDocumentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDocumentPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/document", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDocumentResponse res = new org.openapis.openapi.models.operations.GetDocumentResponse() {{
            urlResultDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UrlResultDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UrlResultDTO.class);
                res.urlResultDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns payment terms of a given client invoice.
     * Returns payment terms of a given client invoice.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPaymentTermsResponse getPaymentTerms(org.openapis.openapi.models.operations.GetPaymentTermsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetPaymentTermsPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/paymentTerms", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetPaymentTermsResponse res = new org.openapis.openapi.models.operations.GetPaymentTermsResponse() {{
            paymentTermsDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaymentTermsDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaymentTermsDTO.class);
                res.paymentTermsDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns all payments for the client invoice.
     * Returns all payments for the client invoice.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPaymentsResponse getPayments(org.openapis.openapi.models.operations.GetPaymentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetPaymentsPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/payments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetPaymentsResponse res = new org.openapis.openapi.models.operations.GetPaymentsResponse() {{
            paymentDTOS = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaymentDTO[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaymentDTO[].class);
                res.paymentDTOS = out;
            }
        }

        return res;
    }

    /**
     * Sends reminder.
     * Sends reminder.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SendReminderResponse sendReminder(org.openapis.openapi.models.operations.SendReminderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SendReminderPathParams.class, baseUrl, "/accounting/customers/invoices/{invoiceId}/sendReminder", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SendReminderResponse res = new org.openapis.openapi.models.operations.SendReminderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Sends reminders. Returns number of sent e-mails.
     * Sends reminders. Returns number of sent e-mails.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SendRemindersResponse sendReminders(org.openapis.openapi.models.operations.SendRemindersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/accounting/customers/invoices/sendReminders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SendRemindersResponse res = new org.openapis.openapi.models.operations.SendRemindersResponse() {{
            sendRemindersResponseDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SendRemindersResponseDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SendRemindersResponseDTO.class);
                res.sendRemindersResponseDTO = out;
            }
        }

        return res;
    }
}