/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class AddBatchWebinarRegistrantsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  bearer?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth?: string;
}

export class AddBatchWebinarRegistrantsApplicationJSONRegistrants extends SpeakeasyBase {
  /**
   * Email address of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * First name of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  /**
   * Last name of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;
}

export class AddBatchWebinarRegistrantsApplicationJSON extends SpeakeasyBase {
  /**
   * If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`.
   *
   * @remarks
   *
   * You **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_approve" })
  autoApprove?: boolean;

  @SpeakeasyMetadata({
    elemType: AddBatchWebinarRegistrantsApplicationJSONRegistrants,
  })
  @Expose({ name: "registrants" })
  @Type(() => AddBatchWebinarRegistrantsApplicationJSONRegistrants)
  registrants?: AddBatchWebinarRegistrantsApplicationJSONRegistrants[];
}

export class AddBatchWebinarRegistrantsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: AddBatchWebinarRegistrantsApplicationJSON;

  /**
   * Unique identifier of the webinar.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class AddBatchWebinarRegistrants200ApplicationXMLRegistrants extends SpeakeasyBase {
  /**
   * Email address of the registrant.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Unique URL using which registrant can join the webinar.
   */
  @SpeakeasyMetadata()
  joinUrl?: string;

  /**
   * Unique identifier of the registrant.
   */
  @SpeakeasyMetadata()
  registrantId?: string;
}

/**
 * **HTTP Status Code:** `200` **OK** <br>
 *
 * @remarks
 * Registrants added.
 */
export class AddBatchWebinarRegistrants200ApplicationXML extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: AddBatchWebinarRegistrants200ApplicationXMLRegistrants,
  })
  registrants?: AddBatchWebinarRegistrants200ApplicationXMLRegistrants[];
}

export class AddBatchWebinarRegistrants200ApplicationJSONRegistrants extends SpeakeasyBase {
  /**
   * Email address of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Unique URL using which registrant can join the webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_url" })
  joinUrl?: string;

  /**
   * Unique identifier of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrant_id" })
  registrantId?: string;
}

/**
 * **HTTP Status Code:** `200` **OK** <br>
 *
 * @remarks
 * Registrants added.
 */
export class AddBatchWebinarRegistrants200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: AddBatchWebinarRegistrants200ApplicationJSONRegistrants,
  })
  @Expose({ name: "registrants" })
  @Type(() => AddBatchWebinarRegistrants200ApplicationJSONRegistrants)
  registrants?: AddBatchWebinarRegistrants200ApplicationJSONRegistrants[];
}

export class AddBatchWebinarRegistrantsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK** <br>
   *
   * @remarks
   * Registrants added.
   */
  @SpeakeasyMetadata()
  addBatchWebinarRegistrants200ApplicationJSONObject?: AddBatchWebinarRegistrants200ApplicationJSON;
}
