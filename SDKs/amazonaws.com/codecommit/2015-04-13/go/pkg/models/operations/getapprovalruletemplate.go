// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetApprovalRuleTemplateXAmzTargetEnum
type GetApprovalRuleTemplateXAmzTargetEnum string

const (
	GetApprovalRuleTemplateXAmzTargetEnumCodeCommit20150413GetApprovalRuleTemplate GetApprovalRuleTemplateXAmzTargetEnum = "CodeCommit_20150413.GetApprovalRuleTemplate"
)

func (e *GetApprovalRuleTemplateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.GetApprovalRuleTemplate":
		*e = GetApprovalRuleTemplateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetApprovalRuleTemplateXAmzTargetEnum: %s", s)
	}
}

type GetApprovalRuleTemplateHeaders struct {
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetApprovalRuleTemplateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetApprovalRuleTemplateRequest struct {
	Headers GetApprovalRuleTemplateHeaders
	Request shared.GetApprovalRuleTemplateInput `request:"mediaType=application/json"`
}

type GetApprovalRuleTemplateResponse struct {
	// ApprovalRuleTemplateDoesNotExistException
	ApprovalRuleTemplateDoesNotExistException interface{}
	// ApprovalRuleTemplateNameRequiredException
	ApprovalRuleTemplateNameRequiredException interface{}
	ContentType                               string
	// Success
	GetApprovalRuleTemplateOutput *shared.GetApprovalRuleTemplateOutput
	// InvalidApprovalRuleTemplateNameException
	InvalidApprovalRuleTemplateNameException interface{}
	StatusCode                               int
	RawResponse                              *http.Response
}
