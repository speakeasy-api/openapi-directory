// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AddressCurbsideEnum - Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap.
type AddressCurbsideEnum string

const (
	AddressCurbsideEnumRight AddressCurbsideEnum = "right"
	AddressCurbsideEnumLeft  AddressCurbsideEnum = "left"
	AddressCurbsideEnumAny   AddressCurbsideEnum = "any"
)

func (e AddressCurbsideEnum) ToPointer() *AddressCurbsideEnum {
	return &e
}

func (e *AddressCurbsideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "right":
		fallthrough
	case "left":
		fallthrough
	case "any":
		*e = AddressCurbsideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressCurbsideEnum: %v", v)
	}
}

type Address struct {
	// Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap.
	Curbside *AddressCurbsideEnum `json:"curbside,omitempty"`
	// Latitude of location.
	Lat float64 `json:"lat"`
	// Specifies the id of the location.
	LocationID string `json:"location_id"`
	// Longitude of location.
	Lon float64 `json:"lon"`
	// Name of location.
	Name *string `json:"name,omitempty"`
	// Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
	StreetHint *string `json:"street_hint,omitempty"`
}
