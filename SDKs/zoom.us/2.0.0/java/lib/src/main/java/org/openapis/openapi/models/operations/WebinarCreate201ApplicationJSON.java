/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WebinarCreate201ApplicationJSON - Webinar object.
 */
public class WebinarCreate201ApplicationJSON {
    /**
     * Webinar agenda.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agenda")
    public String agenda;
    public WebinarCreate201ApplicationJSON withAgenda(String agenda) {
        this.agenda = agenda;
        return this;
    }
    
    /**
     * Create time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public WebinarCreate201ApplicationJSON withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Webinar duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public WebinarCreate201ApplicationJSON withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Email address of the meeting host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_email")
    public String hostEmail;
    public WebinarCreate201ApplicationJSON withHostEmail(String hostEmail) {
        this.hostEmail = hostEmail;
        return this;
    }
    
    /**
     * ID of the user set as host of the webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_id")
    public String hostId;
    public WebinarCreate201ApplicationJSON withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public WebinarCreate201ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL to join the Webinar. This URL should only be shared with the users who should be invited to the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_url")
    public String joinUrl;
    public WebinarCreate201ApplicationJSON withJoinUrl(String joinUrl) {
        this.joinUrl = joinUrl;
        return this;
    }
    
    /**
     * Array of occurrence objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("occurrences")
    public WebinarCreate201ApplicationJSONOccurrences[] occurrences;
    public WebinarCreate201ApplicationJSON withOccurrences(WebinarCreate201ApplicationJSONOccurrences[] occurrences) {
        this.occurrences = occurrences;
        return this;
    }
    
    /**
     * Webinar passcode. 
     * 
     * If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. &lt;br&gt;&lt;br&gt;
     * **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. &lt;br&gt;&lt;br&gt;If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. 
     * 
     * 
     * 
     * 
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public WebinarCreate201ApplicationJSON withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurrence")
    public WebinarCreate201ApplicationJSONRecurrenceWebinar recurrence;
    public WebinarCreate201ApplicationJSON withRecurrence(WebinarCreate201ApplicationJSONRecurrenceWebinar recurrence) {
        this.recurrence = recurrence;
        return this;
    }
    
    /**
     * Specify whether or not registrants of this Webinar should receieve confirmation emails.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrants_confirmation_email")
    public Boolean registrantsConfirmationEmail;
    public WebinarCreate201ApplicationJSON withRegistrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
        this.registrantsConfirmationEmail = registrantsConfirmationEmail;
        return this;
    }
    
    /**
     * Webinar settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    public WebinarCreate201ApplicationJSONSettings settings;
    public WebinarCreate201ApplicationJSON withSettings(WebinarCreate201ApplicationJSONSettings settings) {
        this.settings = settings;
        return this;
    }
    
    /**
     * Webinar start time in GMT/UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public WebinarCreate201ApplicationJSON withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * &lt;br&gt;&lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a Webinar is a URL using which a host or an alternative host can start the Webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar. 
     * 
     * The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field listed in the response of [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) is two hours for all regular users. 
     * 	
     * For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.
     * 	
     * For security reasons, to retrieve the latest value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after expiry), you must call the [Retrieve a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinar) and refer to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_url")
    public String startUrl;
    public WebinarCreate201ApplicationJSON withStartUrl(String startUrl) {
        this.startUrl = startUrl;
        return this;
    }
    
    /**
     * Unique identifier of the Webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [List Webinar Templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/listwebinartemplates) API.
     * You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    public String templateId;
    public WebinarCreate201ApplicationJSON withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * Time zone to format start_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public WebinarCreate201ApplicationJSON withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Webinar topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public WebinarCreate201ApplicationJSON withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Tracking fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_fields")
    public WebinarCreate201ApplicationJSONTrackingFields[] trackingFields;
    public WebinarCreate201ApplicationJSON withTrackingFields(WebinarCreate201ApplicationJSONTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Webinar Types:&lt;br&gt;`5` - Webinar.&lt;br&gt;`6` - Recurring webinar with no fixed time.&lt;br&gt;`9` - Recurring webinar with a fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public WebinarCreate201ApplicationJSONTypeEnum type;
    public WebinarCreate201ApplicationJSON withType(WebinarCreate201ApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Unique identifier of a Webinar. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of uuid for the same webinar will be different from when it was scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public WebinarCreate201ApplicationJSON withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
