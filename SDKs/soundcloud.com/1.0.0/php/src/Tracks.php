<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tracks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdResponse
     */
	public function deleteTracksTrackId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTracksTrackIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdResponse
     */
	public function getTracksTrackId(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the comments posted on the track(track_id).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsResponse
     */
	public function getTracksTrackIdComments(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/comments', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTracksTrackIdComments200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of users who have favorited or liked the track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersResponse
     */
	public function getTracksTrackIdFavoriters(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/favoriters', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdFavoritersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersList = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UsersList>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all related tracks of track on SoundCloud.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedResponse
     */
	public function getTracksTrackIdRelated(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/related', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRelatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTracksTrackIdRelated200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a collection of track's reposters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersResponse
     */
	public function getTracksTrackIdReposters(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/reposters', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdRepostersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metaUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MetaUsers', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a track's streamable URLs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsResponse
     */
	public function getTracksTrackIdStreams(
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/streams', \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTracksTrackIdStreamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->streams = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Streams', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads a new track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TrackDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTracksResponse
     */
	public function postTracks(
        \OpenAPI\OpenAPI\Models\Shared\TrackDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the newly created comment on success
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsResponse
     */
	public function postTracksTrackIdComments(
        \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}/comments', \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTracksTrackIdCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tooManyRequests = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TooManyRequests', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a track's information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonResponse
     */
	public function putTracksTrackIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "trackMetadataRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a track's information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartResponse
     */
	public function putTracksTrackIdMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "trackDataRequest", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTracksTrackIdMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}