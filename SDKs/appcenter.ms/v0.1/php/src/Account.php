<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Account 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * usersGetUserMetadata
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetUserMetadataResponse
     */
	public function usersGetUserMetadata(
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetUserMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/metadata/optimizely');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetUserMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetUserMetadata200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGetUserMetadata200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetUserMetadataDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGetUserMetadataDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the App Api Token object with the specific ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteResponse
     */
	public function appApiTokensDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}', \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppApiTokensDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensDelete400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensDelete400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensDelete401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensDelete401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensDelete404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensDelete404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns App API tokens for the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListResponse
     */
	public function appApiTokensList(
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/api_tokens', \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppApiTokensListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppApiTokensList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensList400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensList400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensList401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensList401ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new App API token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewResponse
     */
	public function appApiTokensNew(
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/api_tokens', \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppApiTokensNewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensNew201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensNew201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensNew400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensNew400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appApiTokensNew401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppApiTokensNew401ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts a pending invitation for the specified user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptResponse
     */
	public function appInvitationsAccept(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/invitations/apps/{invitation_token}/accept', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsAcceptDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsAcceptDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invites a new or existing user to an app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateResponse
     */
	public function appInvitationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/invitations', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invites a new or existing user to an app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailResponse
     */
	public function appInvitationsCreateByEmail(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsCreateByEmailDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsCreateByEmailDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user's invitation to an app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteResponse
     */
	public function appInvitationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the pending invitations for the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListResponse
     */
	public function appInvitationsList(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/invitations', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rejects a pending invitation for the specified user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectResponse
     */
	public function appInvitationsReject(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/invitations/apps/{invitation_token}/reject', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsRejectDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsRejectDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update pending invitation permission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsResponse
     */
	public function appInvitationsUpdatePermissions(
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appInvitationsUpdatePermissionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppInvitationsUpdatePermissionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new app and returns it to the caller
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsCreateResponse
     */
	public function appsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new app for the organization and returns it to the caller
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgResponse
     */
	public function appsCreateForOrg(
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/apps', \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsCreateForOrg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrg200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsCreateForOrg201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrg201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsCreateForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsCreateForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsDeleteResponse
     */
	public function appsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}', \OpenAPI\OpenAPI\Models\Operations\AppsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the uploaded app avatar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarResponse
     */
	public function appsDeleteAvatar(
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/avatar', \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsDeleteAvatar200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatar200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsDeleteAvatarDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsDeleteAvatarDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a specific app with the given app name which belongs to the given owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetResponse
     */
	public function appsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}', \OpenAPI\OpenAPI\Models\Operations\AppsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user apps information from an organization by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserResponse
     */
	public function appsGetForOrgUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/users/{user_name}/apps', \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGetForOrgUser200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUser200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGetForOrgUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsGetForOrgUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of all teams that have access to the app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsResponse
     */
	public function appsGetTeams(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/teams', \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGetTeams200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppsGetTeams200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsGetTeamsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsGetTeamsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of apps
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListResponse
     */
	public function appsList(
        \OpenAPI\OpenAPI\Models\Operations\AppsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsList200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppsList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of apps for the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgResponse
     */
	public function appsListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/apps', \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListForOrg200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppsListForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListTestersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListTestersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListTestersResponse
     */
	public function appsListTesters(
        \OpenAPI\OpenAPI\Models\Operations\AppsListTestersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsListTestersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListTestersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/testers', \OpenAPI\OpenAPI\Models\Operations\AppsListTestersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListTestersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListTesters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppsListTesters200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListTestersDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListTestersDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the user from the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserResponse
     */
	public function appsRemoveUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsRemoveUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsRemoveUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfers ownership of an app to a different user or organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonResponse
     */
	public function appsTransferOwnershipJson(
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}', \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferOwnershipJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJSON200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferOwnershipJSONDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipJSONDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfers ownership of an app to a different user or organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawResponse
     */
	public function appsTransferOwnershipRaw(
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}', \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferOwnershipRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRaw200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferOwnershipRawDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferOwnershipRawDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfers ownership of an app to a new organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgResponse
     */
	public function appsTransferToOrg(
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org', \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferToOrg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrg200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsTransferToOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsTransferToOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partially updates a single app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsUpdateResponse
     */
	public function appsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}', \OpenAPI\OpenAPI\Models\Operations\AppsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the app avatar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarResponse
     */
	public function appsUpdateAvatar(
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/avatar', \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsUpdateAvatar200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatar200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsUpdateAvatarDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsUpdateAvatarDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update user permission for the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsResponse
     */
	public function appsUpdateUserPermissions(
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsUpdateUserPermissionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsUpdateUserPermissionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the azure subscriptions for the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppResponse
     */
	public function azureSubscriptionDeleteForApp(
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}', \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionDeleteForAppDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionDeleteForAppDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Link azure subscription to an app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppResponse
     */
	public function azureSubscriptionLinkForApp(
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionLinkForAppDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionLinkForAppDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of azure subscriptions for the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppResponse
     */
	public function azureSubscriptionListForApp(
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForApp200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForApp200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForAppDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForAppDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of azure subscriptions for the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgResponse
     */
	public function azureSubscriptionListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/azure_subscriptions', \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForOrg200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of azure subscriptions for the user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForUserResponse
     */
	public function azureSubscriptionListForUser(
    ): \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/azure_subscriptions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForUser200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForUser200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->azureSubscriptionListForUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AzureSubscriptionListForUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts all pending invitations to distribution groups for the specified user
     * 
     * @param array<string, mixed> $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllResponse
     */
	public function distributionGroupInvitationsAcceptAll(
        array $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/invitations/distribution_groups/accept');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupInvitationsAcceptAllDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupInvitationsAcceptAllDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add apps to distribution group in an org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsResponse
     */
	public function distributionGroupsAddApps(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Adds the members to the specified distribution group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserResponse
     */
	public function distributionGroupsAddUser(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsAddUser200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUser200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsAddUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts an array of user email addresses to get added to the specified group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgResponse
     */
	public function distributionGroupsAddUsersForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsAddUsersForOrg200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsAddUsersForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsAddUsersForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete apps from distribution group in an org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsResponse
     */
	public function distributionGroupsBulkDeleteApps(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete testers from distribution group in an org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersResponse
     */
	public function distributionGroupsBulkDeleteUsers(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsBulkDeleteUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Creates a new distribution group and returns it to the caller
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateResponse
     */
	public function distributionGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a disribution goup which can be shared across apps under an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgResponse
     */
	public function distributionGroupsCreateForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsCreateForOrg201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrg201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsCreateForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsCreateForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a distribution group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteResponse
     */
	public function distributionGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single distribution group from an org with a given distribution group name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgResponse
     */
	public function distributionGroupsDeleteForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsDeleteForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDeleteForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of distribution groups with details for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgResponse
     */
	public function distributionGroupsDetailsForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups_details', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsDetailsForOrg200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsDetailsForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsDetailsForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single distribution group for a given distribution group name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetResponse
     */
	public function distributionGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get apps from a distribution group in an org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsResponse
     */
	public function distributionGroupsGetApps(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsGetApps200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetApps200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single distribution group in org for a given distribution group name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgResponse
     */
	public function distributionGroupsGetForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsGetForOrg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrg200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsGetForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsGetForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of distribution groups in the app specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListResponse
     */
	public function distributionGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgResponse
     */
	public function distributionGroupsListAllTestersForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/testers', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListAllTestersForOrg200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListAllTestersForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListAllTestersForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of distribution groups in the org specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgResponse
     */
	public function distributionGroupsListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListForOrg201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrg201ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of member details in the distribution group specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersResponse
     */
	public function distributionGroupsListUsers(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsers200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListUsersDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of member in the distribution group specified
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgResponse
     */
	public function distributionGroupsListUsersForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListUsersForOrg200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsListUsersForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsListUsersForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update one given distribution group name in an org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgResponse
     */
	public function distributionGroupsPatchForOrg(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsPatchForOrg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrg200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsPatchForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsPatchForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the users from the distribution group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserResponse
     */
	public function distributionGroupsRemoveUser(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsRemoveUser200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUser200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsRemoveUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsRemoveUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resend distribution group app invite notification to previously invited testers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteResponse
     */
	public function distributionGroupsResendInvite(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsResendInviteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendInviteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resend shared distribution group invite notification to previously invited testers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteResponse
     */
	public function distributionGroupsResendSharedInvite(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsResendSharedInviteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsResendSharedInviteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the attributes of distribution group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateResponse
     */
	public function distributionGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionGroupsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DistributionGroupsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all invitations sent by the caller
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\InvitationsSentResponse
     */
	public function invitationsSent(
    ): \OpenAPI\OpenAPI\Models\Operations\InvitationsSentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/invitations/sent');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InvitationsSentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationsSent200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\InvitationsSent200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationsSentDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\InvitationsSentDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user's invitation to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsResponse
     */
	public function orgInvitations(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations/{email}/revoke', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts a pending organization invitation for the specified user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptResponse
     */
	public function orgInvitationsAccept(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/invitations/orgs/{invitation_token}/accept', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsAcceptDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsAcceptDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invites a new or existing user to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateResponse
     */
	public function orgInvitationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user's invitation to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteResponse
     */
	public function orgInvitationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the pending invitations for the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingResponse
     */
	public function orgInvitationsListPending(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsListPending200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPending200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsListPendingDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsListPendingDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rejects a pending organization invitation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectResponse
     */
	public function orgInvitationsReject(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/invitations/orgs/{invitation_token}/reject', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsRejectDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsRejectDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels an existing organization invitation for the user and sends a new one
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationResponse
     */
	public function orgInvitationsSendNewInvitation(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations/{email}/resend', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsSendNewInvitationDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsSendNewInvitationDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows the role of an invited user to be changed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateResponse
     */
	public function orgInvitationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/invitations/{email}', \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orgInvitationsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrgInvitationsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the uploaded organization avatar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarResponse
     */
	public function organizationDeleteAvatar(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/avatar', \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationDeleteAvatar200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatar200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationDeleteAvatarDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationDeleteAvatarDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the organization avatar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarResponse
     */
	public function organizationUpdateAvatar(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/avatar', \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationUpdateAvatar200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatar200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationUpdateAvatarDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationUpdateAvatarDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new organization and returns it to the caller
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateResponse
     */
	public function organizationsCreateOrUpdate(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsCreateOrUpdate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsCreateOrUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsCreateOrUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteResponse
     */
	public function organizationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}', \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of a single organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetResponse
     */
	public function organizationsGet(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}', \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of organizations the requesting user has access to
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsListResponse
     */
	public function organizationsList(
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\OrganizationsList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list organizations in which the requesting user is an admin
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsListAdministeredResponse
     */
	public function organizationsListAdministered(
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsListAdministeredResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/administeredOrgs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsListAdministeredResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsListAdministered200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsListAdministered200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsListAdministeredDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsListAdministeredDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of organizations the requesting user has access to
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateResponse
     */
	public function organizationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}', \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrganizationsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all service connections of the service type for GDPR export.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SharedconnectionConnectionsResponse
     */
	public function sharedconnectionConnections(
    ): \OpenAPI\OpenAPI\Models\Operations\SharedconnectionConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/export/serviceConnections');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SharedconnectionConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sharedconnectionConnections200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\SharedconnectionConnections200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sharedconnectionConnectionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SharedconnectionConnectionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds an app to a team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppResponse
     */
	public function teamsAddApp(
        \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/apps', \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsAddAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsAddApp201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsAddApp201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsAddAppDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsAddAppDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a new user to a team that is owned by an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserResponse
     */
	public function teamsAddUser(
        \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/users', \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsAddUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsAddUser201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsAddUser201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsAddUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsAddUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a team and returns it
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamResponse
     */
	public function teamsCreateTeam(
        \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams', \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsCreateTeam201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeam201ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsCreateTeamDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsCreateTeamDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteResponse
     */
	public function teamsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of a single team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamResponse
     */
	public function teamsGetTeam(
        \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsGetTeam200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsGetTeam200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsGetTeamDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsGetTeamDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the users of a team which is owned by an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersResponse
     */
	public function teamsGetUsers(
        \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/users', \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsGetUsers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsGetUsers200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsGetUsersDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsGetUsersDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all teams in this org
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsListAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsListAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsListAllResponse
     */
	public function teamsListAll(
        \OpenAPI\OpenAPI\Models\Operations\TeamsListAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsListAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsListAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams', \OpenAPI\OpenAPI\Models\Operations\TeamsListAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsListAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsListAll200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TeamsListAll200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsListAllDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsListAllDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the apps a team has access to
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsResponse
     */
	public function teamsListApps(
        \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/apps', \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsListAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsListApps200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\TeamsListApps200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsListAppsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsListAppsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an app from a team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppResponse
     */
	public function teamsRemoveApp(
        \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsRemoveAppDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsRemoveAppDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from a team that is owned by an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserResponse
     */
	public function teamsRemoveUser(
        \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsRemoveUserDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsRemoveUserDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a single team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateResponse
     */
	public function teamsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the permissions the team has to the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsResponse
     */
	public function teamsUpdatePermissions(
        \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsUpdatePermissions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissions200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamsUpdatePermissionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TeamsUpdatePermissionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the user api_token object with the specific id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteResponse
     */
	public function userApiTokensDelete(
        \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/api_tokens/{api_token_id}', \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UserApiTokensDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensDelete400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensDelete400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensDelete401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensDelete401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensDelete404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensDelete404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns api tokens for the authenticated user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\UserApiTokensListResponse
     */
	public function userApiTokensList(
    ): \OpenAPI\OpenAPI\Models\Operations\UserApiTokensListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/api_tokens');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UserApiTokensListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UserApiTokensList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensList400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensList400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensList401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensList401ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new User API token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewResponse
     */
	public function userApiTokensNew(
        \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/api_tokens');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UserApiTokensNewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensNew201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensNew201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensNew400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensNew400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userApiTokensNew401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UserApiTokensNew401ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the user profile data
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse
     */
	public function usersGet(
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgResponse
     */
	public function usersGetForOrg(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/users/{user_name}', \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetForOrg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGetForOrg200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersGetForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersGetForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
     */
	public function usersList(
        \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/users', \OpenAPI\OpenAPI\Models\Operations\UsersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UsersList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of users that belong to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgResponse
     */
	public function usersListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/users', \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersListForOrg200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UsersListForOrg200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersListForOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersListForOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgResponse
     */
	public function usersRemoveFromOrg(
        \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/users/{user_name}', \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersRemoveFromOrgDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersRemoveFromOrgDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the user profile and returns the updated user data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdateResponse
     */
	public function usersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the given organization user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleResponse
     */
	public function usersUpdateOrgRole(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/orgs/{org_name}/users/{user_name}', \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersUpdateOrgRole200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRole200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersUpdateOrgRoleDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UsersUpdateOrgRoleDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}