/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object defining the template for a placement.
 */
export class CreateProjectRequestBodyPlacementTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "defaultAttributes" })
  defaultAttributes?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.DeviceTemplate })
  @Expose({ name: "deviceTemplates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.DeviceTemplate> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.DeviceTemplate);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  deviceTemplates?: Record<string, shared.DeviceTemplate>;
}

export class CreateProjectRequestBody extends SpeakeasyBase {
  /**
   * An optional description for the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An object defining the template for a placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placementTemplate" })
  @Type(() => CreateProjectRequestBodyPlacementTemplate)
  placementTemplate?: CreateProjectRequestBodyPlacementTemplate;

  /**
   * The name of the project to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectName" })
  projectName: string;

  /**
   * Optional tags (metadata key/value pairs) to be associated with the project. For example, <code>{ {"key1": "value1", "key2": "value2"} }</code>. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateProjectRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateProjectRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateProjectResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createProjectResponse?: Record<string, any>;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;
}
