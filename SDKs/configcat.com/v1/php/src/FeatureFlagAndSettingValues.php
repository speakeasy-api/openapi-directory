<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FeatureFlagAndSettingValues 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get value
     * 
     * This endpoint returns the value of a Feature Flag or Setting 
     * in a specified Environment identified by the `environmentId` parameter.
     * 
     * The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
     * The `value` represents what the clients will get when the evaluation requests of our SDKs 
     * are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
     * 
     * The `rolloutRules` and `percentageRules` attributes are representing the current 
     * Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
     * in an **ordered** collection, which means the order of the returned rules is matching to the
     * evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingValueResponse
     */
	public function getSettingValue(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/environments/{environmentId}/settings/{settingId}/value', \OpenAPI\OpenAPI\Models\Operations\GetSettingValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get values
     * 
     * This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter
     * in a specified Environment identified by the `environmentId` parameter.
     * 
     * The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
     * The `value` represents what the clients will get when the evaluation requests of our SDKs 
     * are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
     * 
     * The `rolloutRules` and `percentageRules` attributes are representing the current 
     * Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
     * in an **ordered** collection, which means the order of the returned rules is matching to the
     * evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesResponse
     */
	public function getSettingValues(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/configs/{configId}/environments/{environmentId}/values', \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSettingValuesModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSettingValuesModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSettingValuesModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSettingValuesModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Post values
     * 
     * This endpoint replaces the values of a specified Config's Feature Flags or Settings identified by the `configId` parameter
     * in a specified Environment identified by the `environmentId` parameter.
     * 
     * Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
     * 
     * **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't 
     * want to change in its original state. Not listing one means that it will reset.
     * 
     * For example: We have the following resource.
     * ```
     * {
     *     "settingValues": [
     * 		{
     * 			"rolloutPercentageItems": [
     * 				{
     * 					"percentage": 30,
     * 					"value": true
     * 				},
     * 				{
     * 					"percentage": 70,
     * 					"value": false
     * 				}
     * 			],
     * 			"rolloutRules": [],
     * 			"value": false,
     * 			"settingId": 1
     * 		}
     * 	]
     * }
     * ```
     * If we send a replace request body as below:
     * ```
     * { 
     * 	"settingValues": [
     * 		{
     * 			"value": true,
     * 			"settingId": 1
     * 		}
     * 	]
     * }
     * ```
     * Then besides that the default value is set to `true`, all the Percentage Rules are deleted. 
     * So we get a response like this:
     * ```
     * {
     * 	"settingValues": [
     * 		{
     * 			"rolloutPercentageItems": [],
     * 			"rolloutRules": [],
     * 			"value": true,
     * 			"setting": 
     * 			{
     * 				"settingId": 1
     * 			}
     * 		}
     * 	]
     * }
     * ```
     * 
     * The `rolloutRules` property describes two types of rules:
     * 
     * - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
     * - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesResponse
     */
	public function postSettingValues(
        \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/configs/{configId}/environments/{environmentId}/values', \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSettingValuesWithIdModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostSettingValuesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSettingValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSettingValuesModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSettingValuesModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSettingValuesModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSettingValuesModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Replace value
     * 
     * This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.
     * 
     * Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
     * 
     * **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't 
     * want to change in its original state. Not listing one means that it will reset.
     * 
     * For example: We have the following resource.
     * ```
     * {
     * 	"rolloutPercentageItems": [
     * 		{
     * 			"percentage": 30,
     * 			"value": true
     * 		},
     * 		{
     * 			"percentage": 70,
     * 			"value": false
     * 		}
     * 	],
     * 	"rolloutRules": [],
     * 	"value": false
     * }
     * ```
     * If we send a replace request body as below:
     * ```
     * {
     * 	"value": true
     * }
     * ```
     * Then besides that the default value is set to `true`, all the Percentage Rules are deleted. 
     * So we get a response like this:
     * ```
     * {
     * 	"rolloutPercentageItems": [],
     * 	"rolloutRules": [],
     * 	"value": true
     * }
     * ```
     * 
     * The `rolloutRules` property describes two types of rules:
     * 
     * - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
     * - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueResponse
     */
	public function replaceSettingValue(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/environments/{environmentId}/settings/{settingId}/value', \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSettingValueModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceSettingValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update value
     * 
     * This endpoint updates the value of a Feature Flag or Setting 
     * with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment.
     * 
     * Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
     * 
     * The advantage of using JSON Patch is that you can describe individual update operations on a resource
     * without touching attributes that you don't want to change. It supports collection reordering, so it also 
     * can be used for reordering the targeting rules of a Feature Flag or Setting.
     * 
     * For example: We have the following resource.
     * ```
     * {
     * 	"rolloutPercentageItems": [
     * 		{
     * 			"percentage": 30,
     * 			"value": true
     * 		},
     * 		{
     * 			"percentage": 70,
     * 			"value": false
     * 		}
     * 	],
     * 	"rolloutRules": [],
     * 	"value": false
     * }
     * ```
     * If we send an update request body as below:
     * ```
     * [
     * 	{
     * 		"op": "replace",
     * 		"path": "/value",
     * 		"value": true
     * 	}
     * ]
     * ```
     * Only the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
     * So we get a response like this:
     * ```
     * {
     * 	"rolloutPercentageItems": [
     * 		{
     * 			"percentage": 30,
     * 			"value": true
     * 		},
     * 		{
     * 			"percentage": 70,
     * 			"value": false
     * 		}
     * 	],
     * 	"rolloutRules": [],
     * 	"value": true
     * }
     * ```
     * 
     * The `rolloutRules` property describes two types of rules:
     * 
     * - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
     * - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueResponse
     */
	public function updateSettingValue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/environments/{environmentId}/settings/{settingId}/value', \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jsonPatchInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSettingValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingValueModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingValueModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}