"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyApBandSettings:
    r"""Settings that will be enabled if selectionType is set to 'ap'."""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band. Can be either true or false."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(str, Enum):
    r"""Band selection can be set to either 'ssid' or 'ap'."""
    AP = 'ap'
    SSID = 'ssid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings:
    r"""Settings related to 5Ghz band"""
    
    channel_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelWidth'), 'exclude': lambda f: f is None }})
    r"""Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(str, Enum):
    r"""Minimum bitrate can be set to either 'band' or 'ssid'."""
    BAND = 'band'
    SSID = 'ssid'

class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0:
    r"""Settings for SSID 0"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1:
    r"""Settings for SSID 1"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10:
    r"""Settings for SSID 10"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11:
    r"""Settings for SSID 11"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12:
    r"""Settings for SSID 12"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13:
    r"""Settings for SSID 13"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14:
    r"""Settings for SSID 14"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2:
    r"""Settings for SSID 2"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3:
    r"""Settings for SSID 3"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4:
    r"""Settings for SSID 4"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5:
    r"""Settings for SSID 5"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6:
    r"""Settings for SSID 6"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7:
    r"""Settings for SSID 7"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8:
    r"""Settings for SSID 8"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9:
    r"""Settings for SSID 9"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings:
    r"""Per-SSID radio settings by number."""
    
    zero: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 0"""  
    one: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 1"""  
    ten: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('10'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 10"""  
    eleven: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('11'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 11"""  
    twelve: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('12'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 12"""  
    thirteen: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('13'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 13"""  
    fourteen: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('14'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 14"""  
    two: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('2'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 2"""  
    three: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('3'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 3"""  
    four: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('4'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 4"""  
    five: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('5'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 5"""  
    six: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('6'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 6"""  
    seven: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('7'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 7"""  
    eight: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('8'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 8"""  
    nine: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('9'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 9"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyTransmission:
    r"""Settings related to radio transmission."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for radio transmission. When false, radios will not transmit at all."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings:
    r"""Settings related to 2.4Ghz band"""
    
    ax_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('axEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBody:
    
    ap_band_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyApBandSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apBandSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that will be enabled if selectionType is set to 'ap'."""  
    band_selection_type: Optional[UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSelectionType'), 'exclude': lambda f: f is None }})
    r"""Band selection can be set to either 'ssid' or 'ap'."""  
    client_balancing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientBalancingEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to best available access point. Can be either true or false."""  
    five_ghz_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiveGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 5Ghz band"""  
    min_bitrate_type: Optional[UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrateType'), 'exclude': lambda f: f is None }})
    r"""Minimum bitrate can be set to either 'band' or 'ssid'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the new profile. Must be unique."""  
    per_ssid_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perSsidSettings'), 'exclude': lambda f: f is None }})
    r"""Per-SSID radio settings by number."""  
    transmission: Optional[UpdateNetworkWirelessRfProfileRequestBodyTransmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmission'), 'exclude': lambda f: f is None }})
    r"""Settings related to radio transmission."""  
    two_four_ghz_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoFourGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 2.4Ghz band"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    rf_profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'rfProfileId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessRfProfileRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONApBandSettings:
    r"""Settings that will be enabled if selectionType is set to 'ap'."""
    
    band_operation_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band. Can be either true or false. Defaults to true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONFiveGhzSettings:
    r"""Settings related to 5Ghz band"""
    
    channel_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelWidth'), 'exclude': lambda f: f is None }})
    r"""Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165]."""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0:
    r"""Settings for SSID 0"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1:
    r"""Settings for SSID 1"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10:
    r"""Settings for SSID 10"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11:
    r"""Settings for SSID 11"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12:
    r"""Settings for SSID 12"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13:
    r"""Settings for SSID 13"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14:
    r"""Settings for SSID 14"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2:
    r"""Settings for SSID 2"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3:
    r"""Settings for SSID 3"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4:
    r"""Settings for SSID 4"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5:
    r"""Settings for SSID 5"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6:
    r"""Settings for SSID 6"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7:
    r"""Settings for SSID 7"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8:
    r"""Settings for SSID 8"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9:
    r"""Settings for SSID 9"""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of SSID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings:
    r"""Per-SSID radio settings by number."""
    
    zero: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 0"""  
    one: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 1"""  
    ten: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('10'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 10"""  
    eleven: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('11'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 11"""  
    twelve: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('12'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 12"""  
    thirteen: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('13'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 13"""  
    fourteen: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('14'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 14"""  
    two: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('2'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 2"""  
    three: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('3'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 3"""  
    four: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('4'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 4"""  
    five: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('5'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 5"""  
    six: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('6'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 6"""  
    seven: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('7'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 7"""  
    eight: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('8'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 8"""  
    nine: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('9'), 'exclude': lambda f: f is None }})
    r"""Settings for SSID 9"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONTransmission:
    r"""Settings related to radio transmission."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for radio transmission. When false, radios will not transmit at all."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSONTwoFourGhzSettings:
    r"""Settings related to 2.4Ghz band"""
    
    ax_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('axEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11]."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfile200ApplicationJSON:
    r"""Successful operation"""
    
    ap_band_settings: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONApBandSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apBandSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that will be enabled if selectionType is set to 'ap'."""  
    band_selection_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSelectionType'), 'exclude': lambda f: f is None }})
    r"""Band selection can be set to either 'ssid' or 'ap'. This param is required on creation."""  
    client_balancing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientBalancingEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to best available access point. Can be either true or false. Defaults to true."""  
    five_ghz_settings: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONFiveGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiveGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 5Ghz band"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The name of the new profile. Must be unique."""  
    min_bitrate_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrateType'), 'exclude': lambda f: f is None }})
    r"""Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the new profile. Must be unique. This param is required on creation."""  
    network_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkId'), 'exclude': lambda f: f is None }})
    r"""The network ID of the RF Profile"""  
    per_ssid_settings: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perSsidSettings'), 'exclude': lambda f: f is None }})
    r"""Per-SSID radio settings by number."""  
    transmission: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONTransmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmission'), 'exclude': lambda f: f is None }})
    r"""Settings related to radio transmission."""  
    two_four_ghz_settings: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSONTwoFourGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoFourGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 2.4Ghz band"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_rf_profile_200_application_json_object: Optional[UpdateNetworkWirelessRfProfile200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    