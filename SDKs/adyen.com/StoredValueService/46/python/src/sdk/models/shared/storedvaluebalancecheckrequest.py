"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amount as shared_amount
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StoredValueBalanceCheckRequestShopperInteractionEnum(str, Enum):
    r"""Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
    For the web service API, Adyen assumes Ecommerce shopper interaction by default.
    
    This field has the following possible values:
    * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
    * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
    * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
    * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    """
    ECOMMERCE = 'Ecommerce'
    CONT_AUTH = 'ContAuth'
    MOTO = 'Moto'
    POS = 'POS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoredValueBalanceCheckRequest:
    
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""The merchant account identifier, with which you want to process the transaction."""  
    payment_method: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethod') }})
    r"""The collection that contains the type of the payment method and its specific information if available"""  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
    If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").
    Maximum length: 80 characters.
    """  
    amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    recurring_detail_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringDetailReference'), 'exclude': lambda f: f is None }})  
    shopper_interaction: Optional[StoredValueBalanceCheckRequestShopperInteractionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperInteraction'), 'exclude': lambda f: f is None }})
    r"""Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
    For the web service API, Adyen assumes Ecommerce shopper interaction by default.
    
    This field has the following possible values:
    * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
    * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
    * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
    * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    """  
    shopper_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperReference'), 'exclude': lambda f: f is None }})  
    store: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('store'), 'exclude': lambda f: f is None }})
    r"""The physical store, for which this payment is processed."""  
    