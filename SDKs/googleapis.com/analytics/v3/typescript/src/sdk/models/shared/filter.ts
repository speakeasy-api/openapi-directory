/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FilterExpression } from "./filterexpression";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Details for the filter of the type ADVANCED.
 */
export class FilterAdvancedDetails extends SpeakeasyBase {
  /**
   * Indicates if the filter expressions are case sensitive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "caseSensitive" })
  caseSensitive?: boolean;

  /**
   * Expression to extract from field A.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extractA" })
  extractA?: string;

  /**
   * Expression to extract from field B.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extractB" })
  extractB?: string;

  /**
   * Field A.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldA" })
  fieldA?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldAIndex" })
  fieldAIndex?: number;

  /**
   * Indicates if field A is required to match.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldARequired" })
  fieldARequired?: boolean;

  /**
   * Field B.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldB" })
  fieldB?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldBIndex" })
  fieldBIndex?: number;

  /**
   * Indicates if field B is required to match.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldBRequired" })
  fieldBRequired?: boolean;

  /**
   * Expression used to construct the output value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputConstructor" })
  outputConstructor?: string;

  /**
   * Output field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputToField" })
  outputToField?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputToFieldIndex" })
  outputToFieldIndex?: number;

  /**
   * Indicates if the existing value of the output field, if any, should be overridden by the output expression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overrideOutputField" })
  overrideOutputField?: boolean;
}

/**
 * Details for the filter of the type LOWER.
 */
export class FilterLowercaseDetails extends SpeakeasyBase {
  /**
   * Field to use in the filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldIndex" })
  fieldIndex?: number;
}

/**
 * Parent link for this filter. Points to the account to which this filter belongs.
 */
export class FilterParentLink extends SpeakeasyBase {
  /**
   * Link to the account to which this filter belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * Value is "analytics#account".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Details for the filter of the type SEARCH_AND_REPLACE.
 */
export class FilterSearchAndReplaceDetails extends SpeakeasyBase {
  /**
   * Determines if the filter is case sensitive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "caseSensitive" })
  caseSensitive?: boolean;

  /**
   * Field to use in the filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldIndex" })
  fieldIndex?: number;

  /**
   * Term to replace the search term with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replaceString" })
  replaceString?: string;

  /**
   * Term to search.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "searchString" })
  searchString?: string;
}

/**
 * Details for the filter of the type UPPER.
 */
export class FilterUppercaseDetails extends SpeakeasyBase {
  /**
   * Field to use in the filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldIndex" })
  fieldIndex?: number;
}

/**
 * JSON template for an Analytics account filter.
 */
export class FilterInput extends SpeakeasyBase {
  /**
   * Account ID to which this filter belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * Details for the filter of the type ADVANCED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advancedDetails" })
  @Type(() => FilterAdvancedDetails)
  advancedDetails?: FilterAdvancedDetails;

  /**
   * JSON template for an Analytics filter expression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "excludeDetails" })
  @Type(() => FilterExpression)
  excludeDetails?: FilterExpression;

  /**
   * Filter ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * JSON template for an Analytics filter expression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeDetails" })
  @Type(() => FilterExpression)
  includeDetails?: FilterExpression;

  /**
   * Details for the filter of the type LOWER.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lowercaseDetails" })
  @Type(() => FilterLowercaseDetails)
  lowercaseDetails?: FilterLowercaseDetails;

  /**
   * Name of this filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Parent link for this filter. Points to the account to which this filter belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentLink" })
  @Type(() => FilterParentLink)
  parentLink?: FilterParentLink;

  /**
   * Details for the filter of the type SEARCH_AND_REPLACE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "searchAndReplaceDetails" })
  @Type(() => FilterSearchAndReplaceDetails)
  searchAndReplaceDetails?: FilterSearchAndReplaceDetails;

  /**
   * Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Details for the filter of the type UPPER.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uppercaseDetails" })
  @Type(() => FilterUppercaseDetails)
  uppercaseDetails?: FilterUppercaseDetails;
}

/**
 * JSON template for an Analytics account filter.
 */
export class Filter extends SpeakeasyBase {
  /**
   * Account ID to which this filter belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * Details for the filter of the type ADVANCED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advancedDetails" })
  @Type(() => FilterAdvancedDetails)
  advancedDetails?: FilterAdvancedDetails;

  /**
   * Time this filter was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * JSON template for an Analytics filter expression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "excludeDetails" })
  @Type(() => FilterExpression)
  excludeDetails?: FilterExpression;

  /**
   * Filter ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * JSON template for an Analytics filter expression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeDetails" })
  @Type(() => FilterExpression)
  includeDetails?: FilterExpression;

  /**
   * Resource type for Analytics filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Details for the filter of the type LOWER.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lowercaseDetails" })
  @Type(() => FilterLowercaseDetails)
  lowercaseDetails?: FilterLowercaseDetails;

  /**
   * Name of this filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Parent link for this filter. Points to the account to which this filter belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentLink" })
  @Type(() => FilterParentLink)
  parentLink?: FilterParentLink;

  /**
   * Details for the filter of the type SEARCH_AND_REPLACE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "searchAndReplaceDetails" })
  @Type(() => FilterSearchAndReplaceDetails)
  searchAndReplaceDetails?: FilterSearchAndReplaceDetails;

  /**
   * Link for this filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Time this filter was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;

  /**
   * Details for the filter of the type UPPER.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uppercaseDetails" })
  @Type(() => FilterUppercaseDetails)
  uppercaseDetails?: FilterUppercaseDetails;
}
