"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSetUpdateInformation:
    r"""The name of the device set and the list of device IDs"""
    
    devices: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices') }})
    r"""List of device IDs"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the device set"""  
    

@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The UUID of the device set"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: TestUpdateDeviceSetOfOwnerDeviceSetUpdateInformation = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerTestCloudErrorDetails:
    r"""Details of a failed operation"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human-readable message that describes the error"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the operation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurationsImage:
    
    thumb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurationsModel:
    
    form_factor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor'), 'exclude': lambda f: f is None }})  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    release_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurations:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique id of the device configuration"""  
    image: Optional[TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurationsImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    model: Optional[TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurationsModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os'), 'exclude': lambda f: f is None }})  
    os_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSetDeviceSetOwner:
    r"""The owner of a device set"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Account ID"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the account"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of account"""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the account"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerDeviceSet:
    r"""The name and devices of the device set"""
    
    device_configurations: list[TestUpdateDeviceSetOfOwnerDeviceSetDeviceConfigurations] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceConfigurations') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Identifier of the device set"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the device set"""  
    owner: TestUpdateDeviceSetOfOwnerDeviceSetDeviceSetOwner = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""The owner of a device set"""  
    manufacturer_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturerCount'), 'exclude': lambda f: f is None }})
    r"""The number of manufacturers in the device set's device selection"""  
    os_version_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersionCount'), 'exclude': lambda f: f is None }})
    r"""The number of os versions in the device set's device selection"""  
    slug: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug'), 'exclude': lambda f: f is None }})
    r"""Slug of the device set"""  
    

@dataclasses.dataclass
class TestUpdateDeviceSetOfOwnerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    device_set: Optional[TestUpdateDeviceSetOfOwnerDeviceSet] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_cloud_error_details: Optional[TestUpdateDeviceSetOfOwnerTestCloudErrorDetails] = dataclasses.field(default=None)
    r"""Invalid list of device IDs or conflicting name"""  
    