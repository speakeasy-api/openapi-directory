/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetStoriesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Code?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Implicit?: string;
}

export class GetStoriesRequest extends SpeakeasyBase {
  /**
   * Client device pixel ratio used to determine thumbnail size (default 1.0).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=device_pixel_ratio",
  })
  devicePixelRatio?: number;

  /**
   * Find groups near the given latitude and longitude.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=latitude",
  })
  latitude?: number;

  /**
   * Find groups near the given latitude and longitude.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=longitude",
  })
  longitude?: number;

  /**
   * The page of stories to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of stories to return per page (must be >= 1 and <= 50).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * How to sort the stories that are returned.  One of: date, distance, likes, views <br /><br /> Setting sort_by to date will sort posts from newest to oldest.  Setting sort_by to distance will sort posts from nearest to farthest.  Setting sort_by to likes will sort posts with the most likes first.  Setting sort_by to views will show the posts with the most views first.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: string;
}

/**
 * The stories and paging data.
 */
export class GetStories200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Story })
  @Expose({ name: "stories" })
  @Type(() => shared.Story)
  stories?: shared.Story[];
}

export class GetStoriesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The stories and paging data.
   */
  @SpeakeasyMetadata()
  getStories200ApplicationJSONObject?: GetStories200ApplicationJSON;
}
