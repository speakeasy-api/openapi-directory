/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ViasAddress } from "./viasaddress";
import { ViasPhoneNumber } from "./viasphonenumber";
import { Expose, Type } from "class-transformer";

/**
 * The sales channel. Possible values: **Ecommerce**, **POS**.
 */
export enum StoreDetailShopperInteractionEnum {
  Ecommerce = "Ecommerce",
  Pos = "POS",
}

/**
 * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
 */
export enum StoreDetailStatusEnum {
  Active = "Active",
  Closed = "Closed",
  Inactive = "Inactive",
  InactiveWithModifications = "InactiveWithModifications",
  Pending = "Pending",
}

export class StoreDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => ViasAddress)
  address: ViasAddress;

  /**
   * The phone number of the store provided as a single string.  It will be handled as a landline phone.
   *
   * @remarks
   *
   * Examples: "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullPhoneNumber" })
  fullPhoneNumber?: string;

  /**
   * Store logo for payment method setup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logo" })
  logo?: string;

  /**
   * The merchant account to which the store belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantAccount" })
  merchantAccount: string;

  /**
   * The merchant category code (MCC) that classifies the business of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantCategoryCode" })
  merchantCategoryCode: string;

  /**
   * Merchant house number for payment method setup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantHouseNumber" })
  merchantHouseNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phoneNumber" })
  @Type(() => ViasPhoneNumber)
  phoneNumber?: ViasPhoneNumber;

  /**
   * The sales channel. Possible values: **Ecommerce**, **POS**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shopperInteraction" })
  shopperInteraction?: StoreDetailShopperInteractionEnum;

  /**
   * The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splitConfigurationUUID" })
  splitConfigurationUUID?: string;

  /**
   * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: StoreDetailStatusEnum;

  /**
   * Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "store" })
  store?: string;

  /**
   * The name of the account holder's store. This value is shown in shopper statements.
   *
   * @remarks
   *
   * * Length: Between 3 to 22 characters
   *
   * * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storeName" })
  storeName?: string;

  /**
   * Your unique identifier for the store. The Customer Area also uses this value for the store description.
   *
   * @remarks
   *
   *  * Length: Between 3 to 128 characters
   *
   * * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storeReference" })
  storeReference?: string;

  /**
   * The account holder's `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "virtualAccount" })
  virtualAccount?: string;

  /**
   * URL of the ecommerce store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webAddress" })
  webAddress?: string;
}
