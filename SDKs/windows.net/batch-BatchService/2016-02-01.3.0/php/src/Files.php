<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Files 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified task file from the compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeResponse
     */
	public function fileDeleteFromComputeNode(
        \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromComputeNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified task file from the compute node where the task ran.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskResponse
     */
	public function fileDeleteFromTask(
        \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileDeleteFromTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the content of the specified task file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeResponse
     */
	public function fileGetFromComputeNode(
        \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileGetFromComputeNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->fileGetFromComputeNode200ApplicationJSONBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the content of the specified task file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskResponse
     */
	public function fileGetFromTask(
        \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileGetFromTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->fileGetFromTask200ApplicationJSONBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the properties of the specified compute node file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeResponse
     */
	public function fileGetNodeFilePropertiesFromComputeNode(
        \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromComputeNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the properties of the specified task file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskResponse
     */
	public function fileGetNodeFilePropertiesFromTask(
        \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileGetNodeFilePropertiesFromTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the files in task directories on the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeResponse
     */
	public function fileListFromComputeNode(
        \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/files', \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileListFromComputeNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeFileListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeFileListResult', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the files in a task's directory on its compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskResponse
     */
	public function fileListFromTask(
        \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/tasks/{taskId}/files', \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FileListFromTaskRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileListFromTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeFileListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeFileListResult', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
}