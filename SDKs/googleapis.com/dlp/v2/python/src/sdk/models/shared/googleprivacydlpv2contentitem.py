"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2bytecontentitem as shared_googleprivacydlpv2bytecontentitem
from ..shared import googleprivacydlpv2table as shared_googleprivacydlpv2table
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2ContentItem:
    
    byte_item: Optional[shared_googleprivacydlpv2bytecontentitem.GooglePrivacyDlpV2ByteContentItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byteItem'), 'exclude': lambda f: f is None }})
    r"""Container for bytes to inspect or redact."""  
    table: Optional[shared_googleprivacydlpv2table.GooglePrivacyDlpV2Table] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('table'), 'exclude': lambda f: f is None }})
    r"""Structured content to inspect. Up to 50,000 `Value`s per request allowed. See https://cloud.google.com/dlp/docs/inspecting-structured-text#inspecting_a_table to learn more."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""String data to inspect or redact."""  
    