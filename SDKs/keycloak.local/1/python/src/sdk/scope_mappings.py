"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ScopeMappings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_client_scopes_id_scope_mappings_clients_client_(self, request: operations.DeleteRealmClientScopesIDScopeMappingsClientsClientRequest) -> operations.DeleteRealmClientScopesIDScopeMappingsClientsClientResponse:
        r"""Remove client-level roles from the client’s scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientScopesIDScopeMappingsClientsClientRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientScopesIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_client_scopes_id_scope_mappings_realm(self, request: operations.DeleteRealmClientScopesIDScopeMappingsRealmRequest) -> operations.DeleteRealmClientScopesIDScopeMappingsRealmResponse:
        r"""Remove a set of realm-level roles from the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientScopesIDScopeMappingsRealmRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientScopesIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_scope_mappings_clients_client_(self, request: operations.DeleteRealmClientsIDScopeMappingsClientsClientRequest) -> operations.DeleteRealmClientsIDScopeMappingsClientsClientResponse:
        r"""Remove client-level roles from the client’s scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDScopeMappingsClientsClientRequest, base_url, '/{realm}/clients/{id}/scope-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_scope_mappings_realm(self, request: operations.DeleteRealmClientsIDScopeMappingsRealmRequest) -> operations.DeleteRealmClientsIDScopeMappingsRealmResponse:
        r"""Remove a set of realm-level roles from the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDScopeMappingsRealmRequest, base_url, '/{realm}/clients/{id}/scope-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_client_scopes_id_scope_mappings(self, request: operations.GetRealmClientScopesIDScopeMappingsRequest) -> operations.GetRealmClientScopesIDScopeMappingsResponse:
        r"""Get all scope mappings for the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MappingsRepresentation])
                res.mappings_representation = out

        return res

    def get_realm_client_scopes_id_scope_mappings_clients_client_(self, request: operations.GetRealmClientScopesIDScopeMappingsClientsClientRequest) -> operations.GetRealmClientScopesIDScopeMappingsClientsClientResponse:
        r"""Get the roles associated with a client’s scope   Returns roles for the client."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsClientsClientRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_client_scopes_id_scope_mappings_clients_client_available(self, request: operations.GetRealmClientScopesIDScopeMappingsClientsClientAvailableRequest) -> operations.GetRealmClientScopesIDScopeMappingsClientsClientAvailableResponse:
        r"""The available client-level roles   Returns the roles for the client that can be associated with the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsClientsClientAvailableRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsClientsClientAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_client_scopes_id_scope_mappings_clients_client_composite(self, request: operations.GetRealmClientScopesIDScopeMappingsClientsClientCompositeRequest) -> operations.GetRealmClientScopesIDScopeMappingsClientsClientCompositeResponse:
        r"""Get effective client roles   Returns the roles for the client that are associated with the client’s scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsClientsClientCompositeRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsClientsClientCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_client_scopes_id_scope_mappings_realm(self, request: operations.GetRealmClientScopesIDScopeMappingsRealmRequest) -> operations.GetRealmClientScopesIDScopeMappingsRealmResponse:
        r"""Get realm-level roles associated with the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsRealmRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_client_scopes_id_scope_mappings_realm_available(self, request: operations.GetRealmClientScopesIDScopeMappingsRealmAvailableRequest) -> operations.GetRealmClientScopesIDScopeMappingsRealmAvailableResponse:
        r"""Get realm-level roles that are available to attach to this client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsRealmAvailableRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/realm/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsRealmAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_client_scopes_id_scope_mappings_realm_composite(self, request: operations.GetRealmClientScopesIDScopeMappingsRealmCompositeRequest) -> operations.GetRealmClientScopesIDScopeMappingsRealmCompositeResponse:
        r"""Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDScopeMappingsRealmCompositeRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/realm/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDScopeMappingsRealmCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings(self, request: operations.GetRealmClientsIDScopeMappingsRequest) -> operations.GetRealmClientsIDScopeMappingsResponse:
        r"""Get all scope mappings for the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsRequest, base_url, '/{realm}/clients/{id}/scope-mappings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MappingsRepresentation])
                res.mappings_representation = out

        return res

    def get_realm_clients_id_scope_mappings_clients_client_(self, request: operations.GetRealmClientsIDScopeMappingsClientsClientRequest) -> operations.GetRealmClientsIDScopeMappingsClientsClientResponse:
        r"""Get the roles associated with a client’s scope   Returns roles for the client."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsClientsClientRequest, base_url, '/{realm}/clients/{id}/scope-mappings/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings_clients_client_available(self, request: operations.GetRealmClientsIDScopeMappingsClientsClientAvailableRequest) -> operations.GetRealmClientsIDScopeMappingsClientsClientAvailableResponse:
        r"""The available client-level roles   Returns the roles for the client that can be associated with the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsClientsClientAvailableRequest, base_url, '/{realm}/clients/{id}/scope-mappings/clients/{client}/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsClientsClientAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings_clients_client_composite(self, request: operations.GetRealmClientsIDScopeMappingsClientsClientCompositeRequest) -> operations.GetRealmClientsIDScopeMappingsClientsClientCompositeResponse:
        r"""Get effective client roles   Returns the roles for the client that are associated with the client’s scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsClientsClientCompositeRequest, base_url, '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsClientsClientCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings_realm(self, request: operations.GetRealmClientsIDScopeMappingsRealmRequest) -> operations.GetRealmClientsIDScopeMappingsRealmResponse:
        r"""Get realm-level roles associated with the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsRealmRequest, base_url, '/{realm}/clients/{id}/scope-mappings/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings_realm_available(self, request: operations.GetRealmClientsIDScopeMappingsRealmAvailableRequest) -> operations.GetRealmClientsIDScopeMappingsRealmAvailableResponse:
        r"""Get realm-level roles that are available to attach to this client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsRealmAvailableRequest, base_url, '/{realm}/clients/{id}/scope-mappings/realm/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsRealmAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_scope_mappings_realm_composite(self, request: operations.GetRealmClientsIDScopeMappingsRealmCompositeRequest) -> operations.GetRealmClientsIDScopeMappingsRealmCompositeResponse:
        r"""Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDScopeMappingsRealmCompositeRequest, base_url, '/{realm}/clients/{id}/scope-mappings/realm/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDScopeMappingsRealmCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def post_realm_client_scopes_id_scope_mappings_clients_client_(self, request: operations.PostRealmClientScopesIDScopeMappingsClientsClientRequest) -> operations.PostRealmClientScopesIDScopeMappingsClientsClientResponse:
        r"""Add client-level roles to the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientScopesIDScopeMappingsClientsClientRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientScopesIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_client_scopes_id_scope_mappings_realm(self, request: operations.PostRealmClientScopesIDScopeMappingsRealmRequest) -> operations.PostRealmClientScopesIDScopeMappingsRealmResponse:
        r"""Add a set of realm-level roles to the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientScopesIDScopeMappingsRealmRequest, base_url, '/{realm}/client-scopes/{id}/scope-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientScopesIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_scope_mappings_clients_client_(self, request: operations.PostRealmClientsIDScopeMappingsClientsClientRequest) -> operations.PostRealmClientsIDScopeMappingsClientsClientResponse:
        r"""Add client-level roles to the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDScopeMappingsClientsClientRequest, base_url, '/{realm}/clients/{id}/scope-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDScopeMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_scope_mappings_realm(self, request: operations.PostRealmClientsIDScopeMappingsRealmRequest) -> operations.PostRealmClientsIDScopeMappingsRealmResponse:
        r"""Add a set of realm-level roles to the client’s scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDScopeMappingsRealmRequest, base_url, '/{realm}/clients/{id}/scope-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDScopeMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    