<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InventorySourceGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditResponse
     */
	public function displayvideoInventorySourceGroupsAssignedInventorySourcesBulkEdit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources:bulkEdit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditAssignedInventorySourcesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditAssignedInventorySourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditAssignedInventorySourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an assignment between an inventory source and an inventory source group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateResponse
     */
	public function displayvideoInventorySourceGroupsAssignedInventorySourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedInventorySourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedInventorySource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedInventorySource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the assignment between an inventory source and an inventory source group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteResponse
     */
	public function displayvideoInventorySourceGroupsAssignedInventorySourcesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources/{assignedInventorySourceId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists inventory sources assigned to an inventory source group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListResponse
     */
	public function displayvideoInventorySourceGroupsAssignedInventorySourcesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsAssignedInventorySourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssignedInventorySourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssignedInventorySourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new inventory source group. Returns the newly created inventory source group if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateResponse
     */
	public function displayvideoInventorySourceGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inventorySourceGroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySourceGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySourceGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an inventory source group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteResponse
     */
	public function displayvideoInventorySourceGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an inventory source group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetResponse
     */
	public function displayvideoInventorySourceGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups/{inventorySourceGroupId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySourceGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySourceGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListResponse
     */
	public function displayvideoInventorySourceGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySourceGroups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourceGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInventorySourceGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInventorySourceGroupsResponse', 'json');
            }
        }

        return $response;
    }
}