/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PageInfo } from "./pageinfo";
import { SearchResult } from "./searchresult";
import { Expose, Type } from "class-transformer";

/**
 * Successful response
 */
export class SearchListResponse extends SpeakeasyBase {
  /**
   * Etag of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * Serialized EventId of the request which produced this response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventId" })
  eventId?: string;

  /**
   * Pagination information for token pagination.
   */
  @SpeakeasyMetadata({ elemType: SearchResult })
  @Expose({ name: "items" })
  @Type(() => SearchResult)
  items?: SearchResult[];

  /**
   * Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPageToken" })
  nextPageToken?: string;

  /**
   * Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageInfo" })
  @Type(() => PageInfo)
  pageInfo?: PageInfo;

  /**
   * The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prevPageToken" })
  prevPageToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "regionCode" })
  regionCode?: string;

  /**
   * Stub token pagination template to suppress results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenPagination" })
  tokenPagination?: Record<string, any>;

  /**
   * The visitorId identifies the visitor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visitorId" })
  visitorId?: string;
}
