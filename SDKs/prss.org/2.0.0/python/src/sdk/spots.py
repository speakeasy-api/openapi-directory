"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Spots:
    r"""A spot is an audio file that is to be inserted into streams using cues."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_v2_spots_id_(self, request: operations.DeleteAPIV2SpotsIDRequest, security: operations.DeleteAPIV2SpotsIDSecurity) -> operations.DeleteAPIV2SpotsIDResponse:
        r"""Deletes the spot with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV2SpotsIDRequest, base_url, '/api/v2/spots/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV2SpotsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v2_spots(self, request: operations.GetAPIV2SpotsRequest, security: operations.GetAPIV2SpotsSecurity) -> operations.GetAPIV2SpotsResponse:
        r"""Returns the spots matching the query parameters."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/spots'
        
        query_params = utils.get_query_params(operations.GetAPIV2SpotsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2SpotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Spot]])
                res.spots = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v2_spots_id_(self, request: operations.GetAPIV2SpotsIDRequest, security: operations.GetAPIV2SpotsIDSecurity) -> operations.GetAPIV2SpotsIDResponse:
        r"""Returns the spot matching the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2SpotsIDRequest, base_url, '/api/v2/spots/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2SpotsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Spot])
                res.spot = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v2_spots(self, request: operations.PostAPIV2SpotsRequestBody, security: operations.PostAPIV2SpotsSecurity) -> operations.PostAPIV2SpotsResponse:
        r"""Creates a new spot."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/spots'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2SpotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Spot])
                res.spot = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    