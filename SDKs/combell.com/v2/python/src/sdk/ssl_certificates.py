"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SSLCertificates:
    r"""Manage your SSL certificates."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def download_certificate(self, request: operations.DownloadCertificateRequest) -> operations.DownloadCertificateResponse:
        r"""Download a SSL certificate
        Returns the certifcate as binary data with the content-type and the filename information in the response headers.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadCertificateRequest, base_url, '/sslcertificates/{sha1Fingerprint}/download', request)
        
        query_params = utils.get_query_params(operations.DownloadCertificateRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadCertificateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.download_certificate_200_application_json_binary_string = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_ssl_certificate(self, request: operations.GetSslCertificateRequest) -> operations.GetSslCertificateResponse:
        r"""Detail of a SSL certificate"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSslCertificateRequest, base_url, '/sslcertificates/{sha1Fingerprint}', request)
        
        query_params = utils.get_query_params(operations.GetSslCertificateRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSslCertificateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SslCertificateDetail])
                res.ssl_certificate_detail = out

        return res

    def get_ssl_certificates(self, request: operations.GetSslCertificatesRequest) -> operations.GetSslCertificatesResponse:
        r"""Overview of SSL certificates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sslcertificates'
        
        query_params = utils.get_query_params(operations.GetSslCertificatesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSslCertificatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SslCertificate]])
                res.ssl_certificates = out

        return res

    