"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleIdentityAccesscontextmanagerV1EgressFromIdentityTypeEnum(str, Enum):
    r"""Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access."""
    IDENTITY_TYPE_UNSPECIFIED = 'IDENTITY_TYPE_UNSPECIFIED'
    ANY_IDENTITY = 'ANY_IDENTITY'
    ANY_USER_ACCOUNT = 'ANY_USER_ACCOUNT'
    ANY_SERVICE_ACCOUNT = 'ANY_SERVICE_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleIdentityAccesscontextmanagerV1EgressFrom:
    r"""Defines the conditions under which an EgressPolicy matches a request. Conditions based on information about the source of the request. Note that if the destination of the request is also protected by a ServicePerimeter, then that ServicePerimeter must have an IngressPolicy which allows access in order for this request to succeed."""
    
    identities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identities'), 'exclude': lambda f: f is None }})
    r"""A list of identities that are allowed access through this [EgressPolicy]. Should be in the format of email address. The email address should represent individual user or service account only."""  
    identity_type: Optional[GoogleIdentityAccesscontextmanagerV1EgressFromIdentityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityType'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access."""  
    