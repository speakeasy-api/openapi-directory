"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import richlinkproperties as shared_richlinkproperties
from ..shared import suggestedtextstyle as shared_suggestedtextstyle
from ..shared import textstyle as shared_textstyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RichLink:
    r"""A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event)."""
    
    rich_link_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richLinkId'), 'exclude': lambda f: f is None }})
    r"""Output only. The ID of this link."""  
    rich_link_properties: Optional[shared_richlinkproperties.RichLinkProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richLinkProperties'), 'exclude': lambda f: f is None }})
    r"""Properties specific to a RichLink."""  
    suggested_deletion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedDeletionIds'), 'exclude': lambda f: f is None }})
    r"""IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion."""  
    suggested_insertion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedInsertionIds'), 'exclude': lambda f: f is None }})
    r"""IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion."""  
    suggested_text_style_changes: Optional[dict[str, shared_suggestedtextstyle.SuggestedTextStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedTextStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested text style changes to this RichLink, keyed by suggestion ID."""  
    text_style: Optional[shared_textstyle.TextStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textStyle'), 'exclude': lambda f: f is None }})
    r"""Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RichLinkInput:
    r"""A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event)."""
    
    suggested_deletion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedDeletionIds'), 'exclude': lambda f: f is None }})
    r"""IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion."""  
    suggested_insertion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedInsertionIds'), 'exclude': lambda f: f is None }})
    r"""IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion."""  
    suggested_text_style_changes: Optional[dict[str, shared_suggestedtextstyle.SuggestedTextStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedTextStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested text style changes to this RichLink, keyed by suggestion ID."""  
    text_style: Optional[shared_textstyle.TextStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textStyle'), 'exclude': lambda f: f is None }})
    r"""Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""  
    