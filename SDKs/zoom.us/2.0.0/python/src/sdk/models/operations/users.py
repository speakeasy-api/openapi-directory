"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class UsersSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class UsersStatusEnum(str, Enum):
    r"""User statuses:<br>`active` - Users with an active status.<br>`inactive` - Users who are deactivated.<br>`pending` - Users with a pending status."""
    ACTIVE = 'active'
    INACTIVE = 'inactive'
    PENDING = 'pending'


@dataclasses.dataclass
class UsersRequest:
    
    include_fields: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_fields', 'style': 'form', 'explode': True }})
    r"""Provide a value for this field if you would like to see the following attribute in the response of this API call:<br>
    
    `custom_attributes`: Returns custom attributes that are associated with the user.<br>`host_key`: Returns [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user.
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""The page number of the current page in the returned records."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    role_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role_id', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the role. Provide this parameter if you would like to filter the response by a specific role. You can retrieve Role IDs from [List Roles](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) API."""  
    status: Optional[UsersStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""User statuses:<br>`active` - Users with an active status.<br>`inactive` - Users who are deactivated.<br>`pending` - Users with a pending status."""  
    

@dataclasses.dataclass
class Users200ApplicationXMLUsersCustomAttributes:
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom attribute."""  
    

@dataclasses.dataclass
class Users200ApplicationXMLUsers:
    
    email: str = dataclasses.field()
    r"""User's email address."""  
    type: int = dataclasses.field()
    r"""User's plan type.<br>
    `1` - Basic.<br>
    `2` - Licensed.<br>
    `3` - On-prem.<br>
    `99` - None (this can only be set with `ssoCreate`).
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None)
    r"""The time when user's account was created."""  
    custom_attributes: Optional[list[Users200ApplicationXMLUsersCustomAttributes]] = dataclasses.field(default=None)
    r"""Custom attributes. This field is only returned if users have been assigned custom attributes and if you provided `custom_attributes` as the value of `include_fields` query parameter in the API request."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""Department, if provided by the user."""  
    first_name: Optional[str] = dataclasses.field(default=None)
    r"""User's first name."""  
    group_ids: Optional[list[str]] = dataclasses.field(default=None)
    r"""IDs of groups where the user is a member."""  
    host_key: Optional[str] = dataclasses.field(default=None)
    r"""The [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user. This field is only returned if users have been assigned a host key and if you provided `host_key` as the value of `include_fields` query parameter in the API request."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID."""  
    im_group_ids: Optional[list[str]] = dataclasses.field(default=None)
    r"""IDs of IM directory groups where the user is a member."""  
    last_client_version: Optional[str] = dataclasses.field(default=None)
    r"""The last client version that user used to login."""  
    last_login_time: Optional[datetime] = dataclasses.field(default=None)
    r"""User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period."""  
    last_name: Optional[str] = dataclasses.field(default=None)
    r"""User's last name."""  
    plan_united_type: Optional[str] = dataclasses.field(default=None)
    r"""This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""  
    pmi: Optional[int] = dataclasses.field(default=None)
    r"""Personal meeting ID of the user."""  
    role_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user."""  
    status: Optional[str] = dataclasses.field(default=None)
    r"""User's status"""  
    timezone: Optional[str] = dataclasses.field(default=None)
    r"""The time zone of the user."""  
    verified: Optional[int] = dataclasses.field(default=None)
    r"""Display whether the user's email address for the Zoom account is verified or not. <br>
    `1` - Verified user email.<br>
    `0` - User's email not verified.
    """  
    

@dataclasses.dataclass
class Users200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    User list returned.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None)
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of all the records available across pages."""  
    users: Optional[list[Users200ApplicationXMLUsers]] = dataclasses.field(default=None)
    r"""List of user objects."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Users200ApplicationJSONUsersCustomAttributes:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom attribute."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Users200ApplicationJSONUsers:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""User's email address."""  
    type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""User's plan type.<br>
    `1` - Basic.<br>
    `2` - Licensed.<br>
    `3` - On-prem.<br>
    `99` - None (this can only be set with `ssoCreate`).
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time when user's account was created."""  
    custom_attributes: Optional[list[Users200ApplicationJSONUsersCustomAttributes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attributes'), 'exclude': lambda f: f is None }})
    r"""Custom attributes. This field is only returned if users have been assigned custom attributes and if you provided `custom_attributes` as the value of `include_fields` query parameter in the API request."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""Department, if provided by the user."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""User's first name."""  
    group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_ids'), 'exclude': lambda f: f is None }})
    r"""IDs of groups where the user is a member."""  
    host_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_key'), 'exclude': lambda f: f is None }})
    r"""The [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user. This field is only returned if users have been assigned a host key and if you provided `host_key` as the value of `include_fields` query parameter in the API request."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID."""  
    im_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('im_group_ids'), 'exclude': lambda f: f is None }})
    r"""IDs of IM directory groups where the user is a member."""  
    last_client_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_client_version'), 'exclude': lambda f: f is None }})
    r"""The last client version that user used to login."""  
    last_login_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_login_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""User's last name."""  
    plan_united_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_united_type'), 'exclude': lambda f: f is None }})
    r"""This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""  
    pmi: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pmi'), 'exclude': lambda f: f is None }})
    r"""Personal meeting ID of the user."""  
    role_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""User's status"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The time zone of the user."""  
    verified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verified'), 'exclude': lambda f: f is None }})
    r"""Display whether the user's email address for the Zoom account is verified or not. <br>
    `1` - Verified user email.<br>
    `0` - User's email not verified.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Users200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    User list returned.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of all the records available across pages."""  
    users: Optional[list[Users200ApplicationJSONUsers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""List of user objects."""  
    

@dataclasses.dataclass
class UsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    users_200_application_json_object: Optional[Users200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    User list returned.
    """  
    