// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// PackageDTO - The PackageDTO Class.
// Contains relevant fields of Package DTO by masking actual Package entity's fields in application.
type PackageDTO struct {
	// Extra articles list added to the given package.
	//
	AddOns []PackageItemDTO `json:"addOns,omitempty"`
	// sum of addon fees.
	// incoming values for this filed will ignore.
	//
	AddonFee *float64 `json:"addonFee,omitempty"`
	// Boolean value to indicate wheather package is available in all the gyms.
	//
	ApplyForAllGyms *bool `json:"applyForAllGyms,omitempty"`
	// Gyms list where this package is available.
	//
	AvailableGyms []GymDTO `json:"availableGyms,omitempty"`
	// Range of period a member is bound to the contract if he/she choose this package.
	//
	BindingPeriod *int `json:"bindingPeriod,omitempty"`
	// Package created DateTime.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// Package created user.
	//
	CreatedUser *string `json:"createdUser,omitempty"`
	// Common descriptions about package.If there are more instructions
	//              can be stored as comma separated values.
	//
	Description *string `json:"description,omitempty"`
	// End date of the package.After that package is not valid for use.
	//
	EndDate *time.Time `json:"endDate,omitempty"`
	// No of months the fixed package is valid for sale
	//
	ExpireInMonths *int `json:"expireInMonths,omitempty"`
	// What are the facilities, features available for package.ex:- wifi,
	// ACm etc.Can be stored as comma seperated values.
	//
	Features *string `json:"features,omitempty"`
	// No of months gym member can come without payments.
	//
	FreeMonths *int `json:"freeMonths,omitempty"`
	// Instruction to the gym members relevant to the package.
	//              If there are more instructions can be stored as comma seperated values.
	//
	InstructionsToGymUsers *string `json:"instructionsToGymUsers,omitempty"`
	// Instruction to the MRM members relevant to the package.
	//              If there are more instructions can be stored as comma seperated values.
	//
	InstructionsToWebUsers *string `json:"instructionsToWebUsers,omitempty"`
	// Boolean value to indicate this package is still active or not.
	//
	IsActive *bool `json:"isActive,omitempty"`
	// Boolean value to indicate ATG transaction from bank is applicable or not.
	//
	IsAtg *bool `json:"isAtg,omitempty"`
	// Boolean value to indicate the contract will auto renew after expiration
	//              if this package would be chosen.
	//
	IsAutoRenew *bool `json:"isAutoRenew,omitempty"`
	// Boolean value to indicate if the first month charges is free.
	//
	IsFirstMonthFree *bool `json:"isFirstMonthFree,omitempty"`
	// Boolean value to indicate this package has registration fee or not.
	//
	IsRegistrationFee *bool `json:"isRegistrationFee,omitempty"`
	// Boolean value to indicate rest amount is applicable or not.
	//
	IsRestAmount *bool `json:"isRestAmount,omitempty"`
	// Boolean value to indicate package is visible in Mobile App or not.
	//
	IsShownInMobile *bool `json:"isShownInMobile,omitempty"`
	// Boolean value to indicate package can be sponsored or not by other party.
	//
	IsSponsorPackage *bool `json:"isSponsorPackage,omitempty"`
	// If a member join the gym middle of a month via this package,
	//              what is the maximum amount of price can be neglected from payment from the member.
	//
	MaximumGiveAwayRestAmount *float64 `json:"maximumGiveAwayRestAmount,omitempty"`
	// Boolean value to indicate member can add extra addons he wish if he choose this package.
	//
	MemberCanAddAddOns *bool `json:"memberCanAddAddOns,omitempty"`
	// Boolean value to indicate if member can leave from contract within
	//              free period if he/she choose this package.
	//
	MemberCanLeaveWithinFreePeriod *bool `json:"memberCanLeaveWithinFreePeriod,omitempty"`
	// Boolean value to indicate member can remove already added addons if he choose this package.
	//
	MemberCanRemoveAddOns *bool `json:"memberCanRemoveAddOns,omitempty"`
	// Package last modified DateTime.
	//
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Package last modified user.
	//
	ModifiedUser *string `json:"modifiedUser,omitempty"`
	// Monthly installment fee if package is not fixed visit.
	// addition of the servicefee and addon fees divided by binding period.
	//              read only
	//
	MonthlyFee *float64 `json:"monthlyFee,omitempty"`
	// Next Package the contract continue after the binding period of this package.
	//
	NextPackageNumber *int `json:"nextPackageNumber,omitempty"`
	// Maximum Number of installment a member can divide the package price/cost to pay.
	//
	NumberOfInstallments *int `json:"numberOfInstallments,omitempty"`
	// If package is fixed visit type, then how many visits are available for this package.
	//
	NumberOfVisits *int    `json:"numberOfVisits,omitempty"`
	PackageID      *int    `json:"packageId,omitempty"`
	PackageName    string  `json:"packageName"`
	PackageNumber  *string `json:"packageNumber,omitempty"`
	// Package type can be either fixed visit or unlimited.
	//
	PackageType string `json:"packageType"`
	// Cost/Price of the single visit to gym.
	//
	PerVisitPrice *float64 `json:"perVisitPrice,omitempty"`
	// Registartion fee for the package at a gym.
	//              read only
	//
	RegistrationFee float64 `json:"registrationFee"`
	// total Service charge of the package for entire period.
	//
	ServiceFee float64 `json:"serviceFee"`
	// Boolean value to show this package in MRM system or not.
	//
	ShownInWeb *bool `json:"shownInWeb,omitempty"`
	// Start date of the package.
	//
	StartDate *time.Time `json:"startDate,omitempty"`
	// Comma separated string values in case of need of maintain some labels kind of
	//              stuff relevant to the package.
	//
	Tags *string `json:"tags,omitempty"`
	// total price for the package including Addon fees, service fee and registration fee.
	// incoming values for this field will ignore.
	//
	TotalPrice *float64 `json:"totalPrice,omitempty"`
}
