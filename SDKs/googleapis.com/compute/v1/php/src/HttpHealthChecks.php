<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class HttpHealthChecks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified HttpHealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteResponse
     */
	public function computeHttpHealthChecksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks/{httpHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified HttpHealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetResponse
     */
	public function computeHttpHealthChecksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks/{httpHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpHealthCheck = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpHealthCheck1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a HttpHealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertResponse
     */
	public function computeHttpHealthChecksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of HttpHealthCheck resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListResponse
     */
	public function computeHttpHealthChecksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpHealthCheckList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpHealthCheckList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchResponse
     */
	public function computeHttpHealthChecksPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks/{httpHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HttpHealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateResponse
     */
	public function computeHttpHealthChecksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpHealthChecks/{httpHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpHealthChecksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}