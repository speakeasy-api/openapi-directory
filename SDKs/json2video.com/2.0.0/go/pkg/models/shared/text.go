// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TextChromaKey - Allows to define a color (or a range of colors) that will be converted to transparent
type TextChromaKey struct {
	// Set the color for which alpha will be set to 0 (full transparency)
	Color string `json:"color"`
	// Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas
	Tolerance *int64 `json:"tolerance,omitempty"`
}

// TextCrop - Crops the element
type TextCrop struct {
	// Sets the height of the croping
	Height int64 `json:"height"`
	// Sets the width of the croping
	Width int64 `json:"width"`
	// Sets the left point of croping
	X *int64 `json:"x,omitempty"`
	// Sets the top point of croping
	Y *int64 `json:"y,omitempty"`
}

// TextPanEnum - Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
type TextPanEnum string

const (
	TextPanEnumLeft        TextPanEnum = "left"
	TextPanEnumTop         TextPanEnum = "top"
	TextPanEnumRight       TextPanEnum = "right"
	TextPanEnumBottom      TextPanEnum = "bottom"
	TextPanEnumTopLeft     TextPanEnum = "top-left"
	TextPanEnumTopRight    TextPanEnum = "top-right"
	TextPanEnumBottomLeft  TextPanEnum = "bottom-left"
	TextPanEnumBottomRight TextPanEnum = "bottom-right"
)

func (e *TextPanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left":
		fallthrough
	case "top":
		fallthrough
	case "right":
		fallthrough
	case "bottom":
		fallthrough
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "bottom-right":
		*e = TextPanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TextPanEnum: %s", s)
	}
}

// TextPositionEnum - Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
type TextPositionEnum string

const (
	TextPositionEnumTopLeft      TextPositionEnum = "top-left"
	TextPositionEnumTopRight     TextPositionEnum = "top-right"
	TextPositionEnumBottomRight  TextPositionEnum = "bottom-right"
	TextPositionEnumBottomLeft   TextPositionEnum = "bottom-left"
	TextPositionEnumCenterCenter TextPositionEnum = "center-center"
	TextPositionEnumCustom       TextPositionEnum = "custom"
)

func (e *TextPositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "center-center":
		fallthrough
	case "custom":
		*e = TextPositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TextPositionEnum: %s", s)
	}
}

type TextRotate struct {
	// Sets the angle of rotation
	Angle float64 `json:"angle"`
	// Sets the time it takes to rotate the provided angle. A zero value means no movement
	Speed *float64 `json:"speed,omitempty"`
}

type TextScale struct {
	// Sets the height for scaling the element
	Height *int64 `json:"height,omitempty"`
	// Sets the width for scaling the element
	Width *int64 `json:"width,omitempty"`
}

type TextTypeEnum string

const (
	TextTypeEnumText TextTypeEnum = "text"
)

func (e *TextTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "text":
		*e = TextTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TextTypeEnum: %s", s)
	}
}

// Text - Creates a text element of a given style
type Text struct {
	// Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
	Cache *bool `json:"cache,omitempty"`
	// Allows to define a color (or a range of colors) that will be converted to transparent
	ChromaKey *TextChromaKey `json:"chroma-key,omitempty"`
	// Used for adding your comments
	Comment *string `json:"comment,omitempty"`
	// Crops the element
	Crop *TextCrop `json:"crop,omitempty"`
	// Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
	Duration *float32 `json:"duration,omitempty"`
	// Element's time span added after the playback.
	ExtraTime *float32 `json:"extra-time,omitempty"`
	// Adds a fade in effect to the element. Value in seconds.
	FadeIn *float32 `json:"fade-in,omitempty"`
	// Adds a fade out effect to the element. Value in seconds.
	FadeOut *float32 `json:"fade-out,omitempty"`
	// Desired text element height, but can be overriden by the style defaults. A value of <code>-1</code> means inherits scenes or movie height
	Height *int64 `json:"height,omitempty"`
	// Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
	Pan *TextPanEnum `json:"pan,omitempty"`
	// Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
	Position *TextPositionEnum `json:"position,omitempty"`
	Rotate   *TextRotate       `json:"rotate,omitempty"`
	Scale    *TextScale        `json:"scale,omitempty"`
	// Text formatting settings. In general, these are CSS properties such as <code>font-size</code>, <code>colour</code> or <code>font-weight</code>. See the styles to confirm which properties are available.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
	Start *float32 `json:"start,omitempty"`
	// Style of the text element. Check all available text style at <a href='https://json2video.com/docs/resources/text/'>https://json2video.com/resources/text/</a>
	Style *string `json:"style,omitempty"`
	// Text to be printed. The text string does not accept HTML formatting.
	Text string       `json:"text"`
	Type TextTypeEnum `json:"type"`
	// Desired text element width, but can be overriden by the style defaults. A value of <code>-1</code> means inherits scenes or movie width
	Width *int64 `json:"width,omitempty"`
	// Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
	X *float64 `json:"x,omitempty"`
	// Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
	Y *float64 `json:"y,omitempty"`
	// Element's z-index. Use this property to reorganize the layering of the elements like in HTML
	ZIndex *float64 `json:"z-index,omitempty"`
	// Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
	Zoom *int64 `json:"zoom,omitempty"`
}
