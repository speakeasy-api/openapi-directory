"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import kafkastreamingsourceoptions as shared_kafkastreamingsourceoptions
from ..shared import streamingdatapreviewoptions as shared_streamingdatapreviewoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogKafkaSource:
    r"""Specifies an Apache Kafka data store in the Data Catalog."""
    
    database: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Database') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    table: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Table') }})  
    data_preview_options: Optional[shared_streamingdatapreviewoptions.StreamingDataPreviewOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataPreviewOptions'), 'exclude': lambda f: f is None }})  
    detect_schema: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetectSchema'), 'exclude': lambda f: f is None }})  
    streaming_options: Optional[shared_kafkastreamingsourceoptions.KafkaStreamingSourceOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamingOptions'), 'exclude': lambda f: f is None }})  
    window_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindowSize'), 'exclude': lambda f: f is None }})  
    