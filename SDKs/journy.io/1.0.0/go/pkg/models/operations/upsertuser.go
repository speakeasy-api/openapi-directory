// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// UpsertUserRequestBodyIdentification - User identification requires a userId, email or both
type UpsertUserRequestBodyIdentification struct {
	// Email address of the user
	Email *string `json:"email,omitempty"`
	// Unique identifier for the user in your database
	UserID *string `json:"userId,omitempty"`
}

// UpsertUserRequestBody - Update properties of a user
type UpsertUserRequestBody struct {
	// User identification requires a userId, email or both
	Identification UpsertUserRequestBodyIdentification `json:"identification"`
	// The properties being set, possible values are strings, booleans, numbers and datetimes (ISO 8601)
	Properties map[string]interface{} `json:"properties,omitempty"`
}

type UpsertUser500ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser500ApplicationJSON - The message specifies what is done
type UpsertUser500ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    UpsertUser500ApplicationJSONMeta `json:"meta"`
}

type UpsertUser429ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser429ApplicationJSON - The message specifies what is done
type UpsertUser429ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    UpsertUser429ApplicationJSONMeta `json:"meta"`
}

type UpsertUser403ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser403ApplicationJSON - The message specifies what is done
type UpsertUser403ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    UpsertUser403ApplicationJSONMeta `json:"meta"`
}

type UpsertUser401ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser401ApplicationJSON - The message specifies what is done
type UpsertUser401ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    UpsertUser401ApplicationJSONMeta `json:"meta"`
}

// UpsertUser400ApplicationJSONErrorsParameters - All query-, header- and path- parameters that seemed incorrect
type UpsertUser400ApplicationJSONErrorsParameters struct {
	Header map[string]string `json:"header,omitempty"`
	Path   map[string]string `json:"path,omitempty"`
	Query  map[string]string `json:"query,omitempty"`
}

// UpsertUser400ApplicationJSONErrors - Map that sums up all received values that seemed incorrect
type UpsertUser400ApplicationJSONErrors struct {
	// All input fields that seemed incorrect
	Fields map[string]string `json:"fields,omitempty"`
	// All query-, header- and path- parameters that seemed incorrect
	Parameters *UpsertUser400ApplicationJSONErrorsParameters `json:"parameters,omitempty"`
}

type UpsertUser400ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser400ApplicationJSON - The message specifies what is done
type UpsertUser400ApplicationJSON struct {
	// Map that sums up all received values that seemed incorrect
	Errors  UpsertUser400ApplicationJSONErrors `json:"errors"`
	Message string                             `json:"message"`
	Meta    UpsertUser400ApplicationJSONMeta   `json:"meta"`
}

type UpsertUser201ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// UpsertUser201ApplicationJSON - Specifies if any warnings occurred when validating the properties
type UpsertUser201ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    UpsertUser201ApplicationJSONMeta `json:"meta"`
	// If validation fails, specifies property name and error description
	Rejected map[string]string `json:"rejected,omitempty"`
}

type UpsertUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// User will be created
	UpsertUser201ApplicationJSONObject *UpsertUser201ApplicationJSON
	// Bad request, some fields or parameters are incorrect
	UpsertUser400ApplicationJSONObject *UpsertUser400ApplicationJSON
	// No API Key was provided or the key is not authorised to perform the action
	UpsertUser401ApplicationJSONObject *UpsertUser401ApplicationJSON
	// The API Key provided is currently not enabled
	UpsertUser403ApplicationJSONObject *UpsertUser403ApplicationJSON
	// Too many API requests were send
	UpsertUser429ApplicationJSONObject *UpsertUser429ApplicationJSON
	// An unexpected error occurred
	UpsertUser500ApplicationJSONObject *UpsertUser500ApplicationJSON
}
