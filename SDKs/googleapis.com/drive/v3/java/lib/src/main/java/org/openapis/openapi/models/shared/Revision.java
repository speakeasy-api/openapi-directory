/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Revision - The metadata for a revision to a file.
 */
public class Revision {
    /**
     * Links for exporting Docs Editors files to specific formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exportLinks")
    public java.util.Map<String, String> exportLinks;
    public Revision withExportLinks(java.util.Map<String, String> exportLinks) {
        this.exportLinks = exportLinks;
        return this;
    }
    
    /**
     * The ID of the revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Revision withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file.
     * This field is only applicable to files with binary content in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keepForever")
    public Boolean keepForever;
    public Revision withKeepForever(Boolean keepForever) {
        this.keepForever = keepForever;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "drive#revision".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Revision withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifyingUser")
    public User lastModifyingUser;
    public Revision withLastModifyingUser(User lastModifyingUser) {
        this.lastModifyingUser = lastModifyingUser;
        return this;
    }
    
    /**
     * The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5Checksum")
    public String md5Checksum;
    public Revision withMd5Checksum(String md5Checksum) {
        this.md5Checksum = md5Checksum;
        return this;
    }
    
    /**
     * The MIME type of the revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;
    public Revision withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * The last time the revision was modified (RFC 3339 date-time).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedTime")
    public OffsetDateTime modifiedTime;
    public Revision withModifiedTime(OffsetDateTime modifiedTime) {
        this.modifiedTime = modifiedTime;
        return this;
    }
    
    /**
     * The original filename used to create this revision. This is only applicable to files with binary content in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalFilename")
    public String originalFilename;
    public Revision withOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
        return this;
    }
    
    /**
     * Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishAuto")
    public Boolean publishAuto;
    public Revision withPublishAuto(Boolean publishAuto) {
        this.publishAuto = publishAuto;
        return this;
    }
    
    /**
     * Whether this revision is published. This is only applicable to Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published")
    public Boolean published;
    public Revision withPublished(Boolean published) {
        this.published = published;
        return this;
    }
    
    /**
     * A link to the published revision. This is only populated for Google Sites files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedLink")
    public String publishedLink;
    public Revision withPublishedLink(String publishedLink) {
        this.publishedLink = publishedLink;
        return this;
    }
    
    /**
     * Whether this revision is published outside the domain. This is only applicable to Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedOutsideDomain")
    public Boolean publishedOutsideDomain;
    public Revision withPublishedOutsideDomain(Boolean publishedOutsideDomain) {
        this.publishedOutsideDomain = publishedOutsideDomain;
        return this;
    }
    
    /**
     * The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public String size;
    public Revision withSize(String size) {
        this.size = size;
        return this;
    }
    
}
