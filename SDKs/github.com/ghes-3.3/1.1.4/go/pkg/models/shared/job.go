// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// JobConclusionEnum - The outcome of the job.
type JobConclusionEnum string

const (
	JobConclusionEnumSuccess        JobConclusionEnum = "success"
	JobConclusionEnumFailure        JobConclusionEnum = "failure"
	JobConclusionEnumNeutral        JobConclusionEnum = "neutral"
	JobConclusionEnumCancelled      JobConclusionEnum = "cancelled"
	JobConclusionEnumSkipped        JobConclusionEnum = "skipped"
	JobConclusionEnumTimedOut       JobConclusionEnum = "timed_out"
	JobConclusionEnumActionRequired JobConclusionEnum = "action_required"
)

func (e JobConclusionEnum) ToPointer() *JobConclusionEnum {
	return &e
}

func (e *JobConclusionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "neutral":
		fallthrough
	case "cancelled":
		fallthrough
	case "skipped":
		fallthrough
	case "timed_out":
		fallthrough
	case "action_required":
		*e = JobConclusionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobConclusionEnum: %v", v)
	}
}

// JobStatusEnum - The phase of the lifecycle that the job is currently in.
type JobStatusEnum string

const (
	JobStatusEnumQueued     JobStatusEnum = "queued"
	JobStatusEnumInProgress JobStatusEnum = "in_progress"
	JobStatusEnumCompleted  JobStatusEnum = "completed"
)

func (e JobStatusEnum) ToPointer() *JobStatusEnum {
	return &e
}

func (e *JobStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = JobStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusEnum: %v", v)
	}
}

// JobStepsStatusEnum - The phase of the lifecycle that the job is currently in.
type JobStepsStatusEnum string

const (
	JobStepsStatusEnumQueued     JobStepsStatusEnum = "queued"
	JobStepsStatusEnumInProgress JobStepsStatusEnum = "in_progress"
	JobStepsStatusEnumCompleted  JobStepsStatusEnum = "completed"
)

func (e JobStepsStatusEnum) ToPointer() *JobStepsStatusEnum {
	return &e
}

func (e *JobStepsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = JobStepsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStepsStatusEnum: %v", v)
	}
}

type JobSteps struct {
	// The time that the job finished, in ISO 8601 format.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The outcome of the job.
	Conclusion string `json:"conclusion"`
	// The name of the job.
	Name   string `json:"name"`
	Number int64  `json:"number"`
	// The time that the step started, in ISO 8601 format.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The phase of the lifecycle that the job is currently in.
	Status JobStepsStatusEnum `json:"status"`
}

// Job - Information of a job execution in a workflow run
type Job struct {
	CheckRunURL string `json:"check_run_url"`
	// The time that the job finished, in ISO 8601 format.
	CompletedAt time.Time `json:"completed_at"`
	// The outcome of the job.
	Conclusion JobConclusionEnum `json:"conclusion"`
	// The SHA of the commit that is being run.
	HeadSha string `json:"head_sha"`
	HTMLURL string `json:"html_url"`
	// The id of the job.
	ID int64 `json:"id"`
	// Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
	Labels []string `json:"labels"`
	// The name of the job.
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	// Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
	RunAttempt *int64 `json:"run_attempt,omitempty"`
	// The id of the associated workflow run.
	RunID  int64  `json:"run_id"`
	RunURL string `json:"run_url"`
	// The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerGroupID int64 `json:"runner_group_id"`
	// The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerGroupName string `json:"runner_group_name"`
	// The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerID int64 `json:"runner_id"`
	// The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerName string `json:"runner_name"`
	// The time that the job started, in ISO 8601 format.
	StartedAt time.Time `json:"started_at"`
	// The phase of the lifecycle that the job is currently in.
	Status JobStatusEnum `json:"status"`
	// Steps in this job.
	Steps []JobSteps `json:"steps,omitempty"`
	URL   string     `json:"url"`
}
