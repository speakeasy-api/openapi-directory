"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IMGroupsIMGroupListGroupsTypeEnum(str, Enum):
    r"""IM Group types:<br>`normal` - Only members can see the other members in the group. Other people can search for members in the group.<br>`shared` - Everyone in the account can see the group and members. <br>`restricted` - No one except group members can see the group or search for other group members."""
    NORMAL = 'normal'
    SHARED = 'shared'
    RESTRICTED = 'restricted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IMGroupsIMGroupListGroups:
    r"""Group object."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""IM group ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Group name."""  
    search_by_account: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_by_account'), 'exclude': lambda f: f is None }})
    r"""Members can search for others under same account."""  
    search_by_domain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_by_domain'), 'exclude': lambda f: f is None }})
    r"""Members can search for others in the same email domain."""  
    search_by_ma_account: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_by_ma_account'), 'exclude': lambda f: f is None }})
    r"""Members can search for others under same master account - including all sub accounts."""  
    total_members: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_members'), 'exclude': lambda f: f is None }})
    r"""Total number of members in this group."""  
    type: Optional[IMGroupsIMGroupListGroupsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""IM Group types:<br>`normal` - Only members can see the other members in the group. Other people can search for members in the group.<br>`shared` - Everyone in the account can see the group and members. <br>`restricted` - No one except group members can see the group or search for other group members."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IMGroupsIMGroupList:
    r"""List of IM Groups."""
    
    groups: Optional[list[IMGroupsIMGroupListGroups]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    r"""List of group objects."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total number of records returned."""  
    

@dataclasses.dataclass
class ImGroupsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    im_group_list: Optional[IMGroupsIMGroupList] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` <br>
    List of groups returned.
    **Error Code:** `200` <br>
    List of IM groups returned.<br>
    Only available for paid account:{accountId}.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    