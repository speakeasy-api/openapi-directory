// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum - Type of authorisation flow requested.
type OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum string

const (
	OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnumAny    OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum = "Any"
	OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnumSingle OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum = "Single"
)

func (e *OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Any":
		fallthrough
	case "Single":
		*e = OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum: %s", s)
	}
}

// OBWriteDomesticStandingOrderConsentResponse6DataAuthorisation - The authorisation type request from the TPP.
type OBWriteDomesticStandingOrderConsentResponse6DataAuthorisation struct {
	// Type of authorisation flow requested.
	AuthorisationType OBWriteDomesticStandingOrderConsentResponse6DataAuthorisationAuthorisationTypeEnum `json:"AuthorisationType"`
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CompletionDateTime *time.Time `json:"CompletionDateTime,omitempty"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataCharges - Set of elements used to provide details of a charge for the payment initiation.
type OBWriteDomesticStandingOrderConsentResponse6DataCharges struct {
	// Amount of money associated with the charge type.
	Amount OBActiveOrHistoricCurrencyAndAmount `json:"Amount"`
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer OBChargeBearerType1CodeEnum `json:"ChargeBearer"`
	// Charge type, in a coded form.
	Type string `json:"Type"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount - Identification assigned by an institution to identify an account. This identification is known by the account owner.
type OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level.
	// Note, the account name is not the product name or the nickname of the account.
	// OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
	Name string `json:"Name"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount - The amount of the final Standing Order
type OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount - The amount of the first Standing Order
type OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount - The amount of the recurring Standing Order
type OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
type OBWriteDomesticStandingOrderConsentResponse6DataInitiation struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	CreditorAccount OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount `json:"CreditorAccount"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// The amount of the final Standing Order
	FinalPaymentAmount *OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount `json:"FinalPaymentAmount,omitempty"`
	// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	FinalPaymentDateTime *time.Time `json:"FinalPaymentDateTime,omitempty"`
	// The amount of the first Standing Order
	FirstPaymentAmount OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount `json:"FirstPaymentAmount"`
	// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	FirstPaymentDateTime time.Time `json:"FirstPaymentDateTime"`
	// Individual Definitions:
	// EvryDay - Every day
	// EvryWorkgDay - Every working day
	// IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
	// WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
	// IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
	// QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED).
	// ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
	// SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
	// RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
	// Individual Patterns:
	// EvryDay (ScheduleCode)
	// EvryWorkgDay (ScheduleCode)
	// IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
	// WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
	// IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
	// QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
	// The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
	// EvryDay
	// EvryWorkgDay
	// IntrvlWkDay:0[1-9]:0[1-7]
	// WkInMnthDay:0[1-5]:0[1-7]
	// IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
	// QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
	// Full Regular Expression:
	// ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
	Frequency string `json:"Frequency"`
	// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
	NumberOfPayments *string `json:"NumberOfPayments,omitempty"`
	// The amount of the recurring Standing Order
	RecurringPaymentAmount *OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount `json:"RecurringPaymentAmount,omitempty"`
	// The date on which the first recurring payment for a Standing Order schedule will be made.
	// Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RecurringPaymentDateTime *time.Time `json:"RecurringPaymentDateTime,omitempty"`
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	Reference *string `json:"Reference,omitempty"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

// OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum - Specifies the Open Banking service request types.
type OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum string

const (
	OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnumCreate OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum = "Create"
)

func (e *OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Create":
		*e = OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum: %s", s)
	}
}

// OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum - Specifies to share the refund account details with PISP
type OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum string

const (
	OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnumNo  OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum = "No"
	OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnumYes OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum = "Yes"
)

func (e *OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No":
		fallthrough
	case "Yes":
		*e = OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum: %s", s)
	}
}

// OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum - Specifies the status of consent resource in code form.
type OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum string

const (
	OBWriteDomesticStandingOrderConsentResponse6DataStatusEnumAuthorised            OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum = "Authorised"
	OBWriteDomesticStandingOrderConsentResponse6DataStatusEnumAwaitingAuthorisation OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum = "AwaitingAuthorisation"
	OBWriteDomesticStandingOrderConsentResponse6DataStatusEnumConsumed              OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum = "Consumed"
	OBWriteDomesticStandingOrderConsentResponse6DataStatusEnumRejected              OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum = "Rejected"
)

func (e *OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authorised":
		fallthrough
	case "AwaitingAuthorisation":
		fallthrough
	case "Consumed":
		fallthrough
	case "Rejected":
		*e = OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum: %s", s)
	}
}

type OBWriteDomesticStandingOrderConsentResponse6Data struct {
	// The authorisation type request from the TPP.
	Authorisation *OBWriteDomesticStandingOrderConsentResponse6DataAuthorisation `json:"Authorisation,omitempty"`
	Charges       []OBWriteDomesticStandingOrderConsentResponse6DataCharges      `json:"Charges,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	ConsentID string `json:"ConsentId"`
	// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CreationDateTime time.Time `json:"CreationDateTime"`
	// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CutOffDateTime *time.Time `json:"CutOffDateTime,omitempty"`
	// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	Debtor *OBCashAccountDebtor4 `json:"Debtor,omitempty"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
	Initiation OBWriteDomesticStandingOrderConsentResponse6DataInitiation `json:"Initiation"`
	// Specifies the Open Banking service request types.
	Permission OBWriteDomesticStandingOrderConsentResponse6DataPermissionEnum `json:"Permission"`
	// Specifies to share the refund account details with PISP
	ReadRefundAccount *OBWriteDomesticStandingOrderConsentResponse6DataReadRefundAccountEnum `json:"ReadRefundAccount,omitempty"`
	// Supporting Data provided by TPP, when requesting SCA Exemption.
	SCASupportData *OBSCASupportData1 `json:"SCASupportData,omitempty"`
	// Specifies the status of consent resource in code form.
	Status OBWriteDomesticStandingOrderConsentResponse6DataStatusEnum `json:"Status"`
	// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	StatusUpdateDateTime time.Time `json:"StatusUpdateDateTime"`
}

// OBWriteDomesticStandingOrderConsentResponse6 - Domestic Standing Order Consents Created
type OBWriteDomesticStandingOrderConsentResponse6 struct {
	Data OBWriteDomesticStandingOrderConsentResponse6Data `json:"Data"`
	// Links relevant to the payload
	Links *Links `json:"Links,omitempty"`
	// Meta Data relevant to the payload
	Meta *Meta `json:"Meta,omitempty"`
	// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
	Risk OBRisk1 `json:"Risk"`
}
