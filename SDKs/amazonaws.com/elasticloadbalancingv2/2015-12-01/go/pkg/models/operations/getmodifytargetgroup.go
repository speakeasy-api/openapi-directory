// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyTargetGroupActionEnum
type GETModifyTargetGroupActionEnum string

const (
	GETModifyTargetGroupActionEnumModifyTargetGroup GETModifyTargetGroupActionEnum = "ModifyTargetGroup"
)

func (e *GETModifyTargetGroupActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyTargetGroup":
		*e = GETModifyTargetGroupActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTargetGroupActionEnum: %s", s)
	}
}

// GETModifyTargetGroupHealthCheckProtocolEnum - The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
type GETModifyTargetGroupHealthCheckProtocolEnum string

const (
	GETModifyTargetGroupHealthCheckProtocolEnumHTTP   GETModifyTargetGroupHealthCheckProtocolEnum = "HTTP"
	GETModifyTargetGroupHealthCheckProtocolEnumHTTPS  GETModifyTargetGroupHealthCheckProtocolEnum = "HTTPS"
	GETModifyTargetGroupHealthCheckProtocolEnumTCP    GETModifyTargetGroupHealthCheckProtocolEnum = "TCP"
	GETModifyTargetGroupHealthCheckProtocolEnumTLS    GETModifyTargetGroupHealthCheckProtocolEnum = "TLS"
	GETModifyTargetGroupHealthCheckProtocolEnumUDP    GETModifyTargetGroupHealthCheckProtocolEnum = "UDP"
	GETModifyTargetGroupHealthCheckProtocolEnumTCPUDP GETModifyTargetGroupHealthCheckProtocolEnum = "TCP_UDP"
	GETModifyTargetGroupHealthCheckProtocolEnumGeneve GETModifyTargetGroupHealthCheckProtocolEnum = "GENEVE"
)

func (e *GETModifyTargetGroupHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "HTTPS":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "UDP":
		fallthrough
	case "TCP_UDP":
		fallthrough
	case "GENEVE":
		*e = GETModifyTargetGroupHealthCheckProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTargetGroupHealthCheckProtocolEnum: %s", s)
	}
}

// GETModifyTargetGroupMatcher - The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes.
type GETModifyTargetGroupMatcher struct {
	GrpcCode *string `queryParam:"name=GrpcCode"`
	HTTPCode *string `queryParam:"name=HttpCode"`
}

// GETModifyTargetGroupVersionEnum
type GETModifyTargetGroupVersionEnum string

const (
	GETModifyTargetGroupVersionEnumTwoThousandAndFifteen1201 GETModifyTargetGroupVersionEnum = "2015-12-01"
)

func (e *GETModifyTargetGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-12-01":
		*e = GETModifyTargetGroupVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTargetGroupVersionEnum: %s", s)
	}
}

type GETModifyTargetGroupQueryParams struct {
	Action GETModifyTargetGroupActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Indicates whether health checks are enabled.
	HealthCheckEnabled *bool `queryParam:"style=form,explode=true,name=HealthCheckEnabled"`
	// The approximate amount of time, in seconds, between health checks of an individual target.
	HealthCheckIntervalSeconds *int64 `queryParam:"style=form,explode=true,name=HealthCheckIntervalSeconds"`
	// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p> <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p> <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
	HealthCheckPath *string `queryParam:"style=form,explode=true,name=HealthCheckPath"`
	// The port the load balancer uses when performing health checks on targets.
	HealthCheckPort *string `queryParam:"style=form,explode=true,name=HealthCheckPort"`
	// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
	HealthCheckProtocol *GETModifyTargetGroupHealthCheckProtocolEnum `queryParam:"style=form,explode=true,name=HealthCheckProtocol"`
	// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
	HealthCheckTimeoutSeconds *int64 `queryParam:"style=form,explode=true,name=HealthCheckTimeoutSeconds"`
	// The number of consecutive health checks successes required before considering an unhealthy target healthy.
	HealthyThresholdCount *int64 `queryParam:"style=form,explode=true,name=HealthyThresholdCount"`
	// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.
	Matcher *GETModifyTargetGroupMatcher `queryParam:"style=form,explode=true,name=Matcher"`
	// The Amazon Resource Name (ARN) of the target group.
	TargetGroupArn string `queryParam:"style=form,explode=true,name=TargetGroupArn"`
	// The number of consecutive health check failures required before considering the target unhealthy.
	UnhealthyThresholdCount *int64                          `queryParam:"style=form,explode=true,name=UnhealthyThresholdCount"`
	Version                 GETModifyTargetGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETModifyTargetGroupHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyTargetGroupRequest struct {
	QueryParams GETModifyTargetGroupQueryParams
	Headers     GETModifyTargetGroupHeaders
}

type GETModifyTargetGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
