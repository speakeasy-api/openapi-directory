"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Script:
    r"""ショップページにスクリプトタグを挿入するAPIです。
    
    スクリプトタグエンドポイントを利用する場合、以下の点にご注意ください。
    - スクリプトを配信するサーバは、適切なCORSヘッダ(e.g. `Access-Control-Allow-Origin`) をレスポンスに付与する必要があります
    - 登録済みスクリプトの内容を変更した場合は、都度更新リクエストにて適切な `integrity` パラメータを送信する必要があります
    - 登録するスクリプトのURLスキームは `https` のみになります
    - 登録・更新時にカラーミーAPIがスクリプトを取得します。スクリプトが取得できない場合は登録できません
    - スクリプトタグAPIで挿入されたスクリプトタグは、アプリがアンインストールされると自動で削除されます
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_shop_script_tag(self, request: operations.CreateShopScriptTagRequestBody, security: operations.CreateShopScriptTagSecurity) -> operations.CreateShopScriptTagResponse:
        r"""スクリプトタグの作成"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appstore/v1/script_tags.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateShopScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateShopScriptTag200ApplicationJSON])
                res.create_shop_script_tag_200_application_json_object = out

        return res

    def delete_script_tag(self, request: operations.DeleteScriptTagRequest, security: operations.DeleteScriptTagSecurity) -> operations.DeleteScriptTagResponse:
        r"""スクリプトタグの削除"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteScriptTagRequest, base_url, '/appstore/v1/script_tags/{scriptTagId}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_shop_script_tag(self, request: operations.GetShopScriptTagRequest, security: operations.GetShopScriptTagSecurity) -> operations.GetShopScriptTagResponse:
        r"""スクリプトタグの取得"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShopScriptTagRequest, base_url, '/appstore/v1/script_tags/{scriptTagId}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShopScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetShopScriptTag200ApplicationJSON])
                res.get_shop_script_tag_200_application_json_object = out

        return res

    def get_shop_script_tags(self) -> operations.GetShopScriptTagsResponse:
        r"""スクリプトタグの取得"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appstore/v1/script_tags.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShopScriptTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetShopScriptTags200ApplicationJSON])
                res.get_shop_script_tags_200_application_json_object = out

        return res

    def update_shop_script_tag(self, request: operations.UpdateShopScriptTagRequest, security: operations.UpdateShopScriptTagSecurity) -> operations.UpdateShopScriptTagResponse:
        r"""スクリプトタグの更新"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateShopScriptTagRequest, base_url, '/appstore/v1/script_tags/{scriptTagId}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateShopScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateShopScriptTag200ApplicationJSON])
                res.update_shop_script_tag_200_application_json_object = out

        return res

    