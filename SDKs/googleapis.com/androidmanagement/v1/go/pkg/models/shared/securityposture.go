// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SecurityPostureDevicePostureEnum - Device's security posture value.
type SecurityPostureDevicePostureEnum string

const (
	SecurityPostureDevicePostureEnumPostureUnspecified     SecurityPostureDevicePostureEnum = "POSTURE_UNSPECIFIED"
	SecurityPostureDevicePostureEnumSecure                 SecurityPostureDevicePostureEnum = "SECURE"
	SecurityPostureDevicePostureEnumAtRisk                 SecurityPostureDevicePostureEnum = "AT_RISK"
	SecurityPostureDevicePostureEnumPotentiallyCompromised SecurityPostureDevicePostureEnum = "POTENTIALLY_COMPROMISED"
)

func (e *SecurityPostureDevicePostureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POSTURE_UNSPECIFIED":
		fallthrough
	case "SECURE":
		fallthrough
	case "AT_RISK":
		fallthrough
	case "POTENTIALLY_COMPROMISED":
		*e = SecurityPostureDevicePostureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityPostureDevicePostureEnum: %s", s)
	}
}

// SecurityPosture - The security posture of the device, as determined by the current device state and the policies applied.
type SecurityPosture struct {
	// Device's security posture value.
	DevicePosture *SecurityPostureDevicePostureEnum `json:"devicePosture,omitempty"`
	// Additional details regarding the security posture of the device.
	PostureDetails []PostureDetail `json:"postureDetails,omitempty"`
}
