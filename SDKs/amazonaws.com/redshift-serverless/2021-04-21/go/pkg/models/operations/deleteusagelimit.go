// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteUsageLimitXAmzTargetEnum
type DeleteUsageLimitXAmzTargetEnum string

const (
	DeleteUsageLimitXAmzTargetEnumRedshiftServerlessDeleteUsageLimit DeleteUsageLimitXAmzTargetEnum = "RedshiftServerless.DeleteUsageLimit"
)

func (e *DeleteUsageLimitXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RedshiftServerless.DeleteUsageLimit":
		*e = DeleteUsageLimitXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteUsageLimitXAmzTargetEnum: %s", s)
	}
}

type DeleteUsageLimitRequest struct {
	DeleteUsageLimitRequest shared.DeleteUsageLimitRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              DeleteUsageLimitXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteUsageLimitResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	DeleteUsageLimitResponse *shared.DeleteUsageLimitResponse
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ValidationException
	ValidationException interface{}
}
