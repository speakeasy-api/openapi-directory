<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Images 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add images to collections
     * 
     * This endpoint adds one or more images to a collection by image IDs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsResponse
     */
	public function addImageCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionItemRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddImageCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Run multiple image searches
     * 
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesResponse
     */
	public function bulkSearchImages(
        \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bulk_search/images');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkSearchImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkImageSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkImageSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Create image collections
     * 
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CollectionCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateImageCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageCollectionResponse
     */
	public function createImageCollection(
        \OpenAPI\OpenAPI\Models\Shared\CollectionCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateImageCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionCreateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionCreateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Delete image collections
     * 
     * This endpoint deletes an image collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionResponse
     */
	public function deleteImageCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove images from collections
     * 
     * This endpoint removes one or more images from a collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsResponse
     */
	public function deleteImageCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteImageCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Download images
     * 
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadImageResponse
     */
	public function downloadImage(
        \OpenAPI\OpenAPI\Models\Operations\DownloadImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DownloadImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/licenses/{id}/downloads', \OpenAPI\OpenAPI\Models\Operations\DownloadImageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "redownloadImage", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->url = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Url', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get the details of featured image collections
     * 
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionResponse
     */
	public function getFeaturedImageCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/featured/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeaturedCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the contents of featured image collections
     * 
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsResponse
     */
	public function getFeaturedImageCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/featured/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionItemDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionItemDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List featured image collections
     * 
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListResponse
     */
	public function getFeaturedImageCollectionList(
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/featured');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeaturedImageCollectionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredCollectionDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeaturedCollectionDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get details about images
     * 
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageResponse
     */
	public function getImage(
        \OpenAPI\OpenAPI\Models\Operations\GetImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/{id}', \OpenAPI\OpenAPI\Models\Operations\GetImageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->image = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Image', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get the details of image collections
     * 
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionResponse
     */
	public function getImageCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the contents of image collections
     * 
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsResponse
     */
	public function getImageCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionItemDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionItemDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List image collections
     * 
     * This endpoint lists your collections of images and their basic attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListResponse
     */
	public function getImageCollectionList(
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageCollectionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get keywords from text
     * 
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageKeywordSuggestionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageKeywordSuggestionsResponse
     */
	public function getImageKeywordSuggestions(
        \OpenAPI\OpenAPI\Models\Shared\SearchEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageKeywordSuggestionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageKeywordSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/search/suggestions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageKeywordSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchEntitiesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List image licenses
     * 
     * This endpoint lists existing licenses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListResponse
     */
	public function getImageLicenseList(
        \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/licenses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageLicenseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadHistoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadHistoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List images
     * 
     * This endpoint lists information about one or more images, including the available sizes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageListResponse
     */
	public function getImageList(
        \OpenAPI\OpenAPI\Models\Operations\GetImageListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List recommended images
     * 
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsResponse
     */
	public function getImageRecommendations(
        \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/recommendations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageRecommendationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recommendationDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RecommendationDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get suggestions for a search term
     * 
     * This endpoint provides autocomplete suggestions for partial search terms.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsResponse
     */
	public function getImageSuggestions(
        \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/search/suggestions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImageSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suggestions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Suggestions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List updated images
     * 
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesResponse
     */
	public function getUpdatedImages(
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/updated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUpdatedImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatedMediaDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdatedMediaDataList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * License images
     * 
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicenseImagesResponse
     */
	public function licenseImages(
        \OpenAPI\OpenAPI\Models\Operations\LicenseImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicenseImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicenseImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "licenseImageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicenseImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicenseImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseImageResultDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseImageResultDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List image categories
     * 
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesResponse
     */
	public function listImageCategories(
        \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListImageCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CategoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List similar images
     * 
     * This endpoint returns images that are visually similar to an image that you specify.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesResponse
     */
	public function listSimilarImages(
        \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/{id}/similar', \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSimilarImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Rename image collections
     * 
     * This endpoint sets a new name for an image collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionResponse
     */
	public function renameImageCollection(
        \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenameImageCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Search for images
     * 
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchImagesResponse
     */
	public function searchImages(
        \OpenAPI\OpenAPI\Models\Operations\SearchImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/images/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}