// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AmqpRuleResponseRuleTypeEnum string

const (
	AmqpRuleResponseRuleTypeEnumAmqp AmqpRuleResponseRuleTypeEnum = "amqp"
)

func (e AmqpRuleResponseRuleTypeEnum) ToPointer() *AmqpRuleResponseRuleTypeEnum {
	return &e
}

func (e *AmqpRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amqp":
		*e = AmqpRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmqpRuleResponseRuleTypeEnum: %v", v)
	}
}

type AmqpRuleResponseTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AmqpRuleResponseTarget struct {
	Enveloped *bool                           `json:"enveloped,omitempty"`
	Format    *string                         `json:"format,omitempty"`
	Headers   []AmqpRuleResponseTargetHeaders `json:"headers,omitempty"`
	QueueID   string                          `json:"queueId"`
}

type AmqpRuleResponse struct {
	Links       map[string]interface{}       `json:"_links,omitempty"`
	AppID       *string                      `json:"appId,omitempty"`
	Created     *float64                     `json:"created,omitempty"`
	ID          *string                      `json:"id,omitempty"`
	Modified    *float64                     `json:"modified,omitempty"`
	RequestMode string                       `json:"requestMode"`
	RuleType    AmqpRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                   `json:"source"`
	Status      *string                      `json:"status,omitempty"`
	Target      AmqpRuleResponseTarget       `json:"target"`
	Version     *string                      `json:"version,omitempty"`
}
