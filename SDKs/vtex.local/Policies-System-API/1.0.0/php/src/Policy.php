<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Policy 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Policy
     * 
     * Creates a new policy from scratch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateResponse
     */
	public function policyCreateOrUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "policySaveRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolicyCreateOrUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Policy by ID
     * 
     * Deletes a specific policy of the account by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteResponse
     */
	public function policyDelete(
        \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolicyDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Evaluate Policies
     * 
     * This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolicyEvaluateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolicyEvaluateResponse
     */
	public function policyEvaluate(
        \OpenAPI\OpenAPI\Models\Operations\PolicyEvaluateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolicyEvaluateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/evaluate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "evaluatePolicyRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolicyEvaluateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policyActionGetResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PolicyActionGetResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Policy by ID
     * 
     * Retrieves general information of a policy by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolicyGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolicyGetResponse
     */
	public function policyGet(
        \OpenAPI\OpenAPI\Models\Operations\PolicyGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolicyGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\PolicyGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolicyGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policyGetResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PolicyGetResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Policy List
     * 
     * Retrieves a list of all policies in the account and general information of each policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolicyListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolicyListResponse
     */
	public function policyList(
        \OpenAPI\OpenAPI\Models\Operations\PolicyListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolicyListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/policies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolicyListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policyGetResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PolicyGetResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Policy
     * 
     * Updates an existing policy at your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdResponse
     */
	public function putApiPolicyEnginePoliciesId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/policy-engine/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "policySaveRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiPolicyEnginePoliciesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}