"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class AssetsCovarianceMatrix:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_assets_covariance_matrix(self, request: Any) -> operations.PostAssetsCovarianceMatrixResponse:
        r"""Covariance Matrix
        Compute the covariance matrix of assets from either:  
        * The asset correlation matrix and their volatilities (i.e., standard deviations)
        * The asset correlation matrix and their variances
        * The asset returns
        
        References
        * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/covariance/matrix'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsCovarianceMatrixResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsCovarianceMatrix200ApplicationJSON])
                res.post_assets_covariance_matrix_200_application_json_object = out

        return res

    def post_assets_covariance_matrix_effective_rank(self, request: operations.PostAssetsCovarianceMatrixEffectiveRankRequestBody) -> operations.PostAssetsCovarianceMatrixEffectiveRankResponse:
        r"""Covariance Matrix Effective Rank
        Compute the effective rank of an asset covariance matrix.
        
        References
        * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/covariance/matrix/effective-rank'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsCovarianceMatrixEffectiveRankResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsCovarianceMatrixEffectiveRank200ApplicationJSON])
                res.post_assets_covariance_matrix_effective_rank_200_application_json_object = out

        return res

    def post_assets_covariance_matrix_exponentially_weighted(self, request: operations.PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody) -> operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse:
        r"""Exponentially Weighted Covariance Matrix
        Compute an exponentially weighted covariance matrix of assets returns.
        
        References
        * [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/covariance/matrix/exponentially-weighted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSON])
                res.post_assets_covariance_matrix_exponentially_weighted_200_application_json_object = out

        return res

    def post_assets_covariance_matrix_validation(self, request: operations.PostAssetsCovarianceMatrixValidationRequestBody) -> operations.PostAssetsCovarianceMatrixValidationResponse:
        r"""Covariance Matrix Validation
        Validate whether a matrix is a covariance matrix.
        
        References
        * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/covariance/matrix/validation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsCovarianceMatrixValidationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsCovarianceMatrixValidation200ApplicationJSON])
                res.post_assets_covariance_matrix_validation_200_application_json_object = out

        return res

    