// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListRecommendersQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListRecommendersXAmzTargetEnum
type ListRecommendersXAmzTargetEnum string

const (
	ListRecommendersXAmzTargetEnumAmazonPersonalizeListRecommenders ListRecommendersXAmzTargetEnum = "AmazonPersonalize.ListRecommenders"
)

func (e *ListRecommendersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.ListRecommenders":
		*e = ListRecommendersXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRecommendersXAmzTargetEnum: %s", s)
	}
}

type ListRecommendersHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListRecommendersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListRecommendersRequest struct {
	QueryParams ListRecommendersQueryParams
	Headers     ListRecommendersHeaders
	Request     shared.ListRecommendersRequest `request:"mediaType=application/json"`
}

type ListRecommendersResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListRecommendersResponse *shared.ListRecommendersResponse
	StatusCode               int
	RawResponse              *http.Response
}
