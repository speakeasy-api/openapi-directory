// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ObcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type ObcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// DSN No
	DSNNo string `json:"DSNNo"`
	// Father Name
	Father string `json:"Father"`
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
}

// ObcerRequestBodyFormatEnum - The format of the certificate in response.
type ObcerRequestBodyFormatEnum string

const (
	ObcerRequestBodyFormatEnumPdf ObcerRequestBodyFormatEnum = "pdf"
)

func (e *ObcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ObcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ObcerRequestBodyFormatEnum: %s", s)
	}
}

// ObcerRequestBody - Request format
type ObcerRequestBody struct {
	CertificateParameters *ObcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ObcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type ObcerRequest struct {
	// Request format
	Request  *ObcerRequestBody `request:"mediaType=application/json"`
	Security ObcerSecurity
}

type Obcer504ApplicationJSONErrorEnum string

const (
	Obcer504ApplicationJSONErrorEnumGatewayTimeout Obcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Obcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Obcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer504ApplicationJSONErrorDescriptionEnum string

const (
	Obcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Obcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Obcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Obcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer504ApplicationJSON - Gateway timeout
type Obcer504ApplicationJSON struct {
	Error            *Obcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer503ApplicationJSONErrorEnum string

const (
	Obcer503ApplicationJSONErrorEnumServiceUnavailable Obcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Obcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Obcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer503ApplicationJSONErrorDescriptionEnum string

const (
	Obcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Obcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Obcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Obcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer503ApplicationJSON - Service unavailable
type Obcer503ApplicationJSON struct {
	Error            *Obcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer502ApplicationJSONErrorEnum string

const (
	Obcer502ApplicationJSONErrorEnumBadGatewy Obcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Obcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Obcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer502ApplicationJSONErrorDescriptionEnum string

const (
	Obcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Obcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Obcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Obcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer502ApplicationJSON - Bad gateway
type Obcer502ApplicationJSON struct {
	Error            *Obcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer500ApplicationJSONErrorEnum string

const (
	Obcer500ApplicationJSONErrorEnumInternalServerError Obcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Obcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Obcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer500ApplicationJSONErrorDescriptionEnum string

const (
	Obcer500ApplicationJSONErrorDescriptionEnumInternalServerError Obcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Obcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Obcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer500ApplicationJSON - Internal server error
type Obcer500ApplicationJSON struct {
	Error            *Obcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer404ApplicationJSONErrorEnum string

const (
	Obcer404ApplicationJSONErrorEnumRecordNotFound Obcer404ApplicationJSONErrorEnum = "record_not_found"
	Obcer404ApplicationJSONErrorEnumURLNotFound    Obcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Obcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Obcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer404ApplicationJSONErrorDescriptionEnum string

const (
	Obcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Obcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Obcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Obcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Obcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Obcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer404ApplicationJSON - No record found
type Obcer404ApplicationJSON struct {
	Error            *Obcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer401ApplicationJSONErrorEnum string

const (
	Obcer401ApplicationJSONErrorEnumInvalidAuthentication Obcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Obcer401ApplicationJSONErrorEnumInvalidAuthorization  Obcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Obcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Obcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer401ApplicationJSONErrorDescriptionEnum string

const (
	Obcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Obcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Obcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Obcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Obcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Obcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer401ApplicationJSON - Unauthorized access
type Obcer401ApplicationJSON struct {
	Error            *Obcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Obcer400ApplicationJSONErrorEnum string

const (
	Obcer400ApplicationJSONErrorEnumMissingParameter Obcer400ApplicationJSONErrorEnum = "missing_parameter"
	Obcer400ApplicationJSONErrorEnumInvalidParameter Obcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Obcer400ApplicationJSONErrorEnumInvalidFormat    Obcer400ApplicationJSONErrorEnum = "invalid_format"
	Obcer400ApplicationJSONErrorEnumInvalidTxnid     Obcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Obcer400ApplicationJSONErrorEnumInvalidConsentid Obcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Obcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Obcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Obcer400ApplicationJSONErrorDescriptionEnum string

const (
	Obcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Obcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Obcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Obcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Obcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Obcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Obcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Obcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Obcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Obcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Obcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Obcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Obcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Obcer400ApplicationJSON - Bad request
type Obcer400ApplicationJSON struct {
	Error            *Obcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Obcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ObcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Obcer400ApplicationJSONObject *Obcer400ApplicationJSON
	// Unauthorized access
	Obcer401ApplicationJSONObject *Obcer401ApplicationJSON
	// No record found
	Obcer404ApplicationJSONObject *Obcer404ApplicationJSON
	// Internal server error
	Obcer500ApplicationJSONObject *Obcer500ApplicationJSON
	// Bad gateway
	Obcer502ApplicationJSONObject *Obcer502ApplicationJSON
	// Service unavailable
	Obcer503ApplicationJSONObject *Obcer503ApplicationJSON
	// Gateway timeout
	Obcer504ApplicationJSONObject *Obcer504ApplicationJSON
}
