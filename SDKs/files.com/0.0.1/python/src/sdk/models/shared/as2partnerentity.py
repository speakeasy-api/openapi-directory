"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class As2PartnerEntityServerCertificateEnum(str, Enum):
    r"""Remote server certificate security setting"""
    REQUIRE_MATCH = 'require_match'
    ALLOW_ANY = 'allow_any'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class As2PartnerEntity:
    r"""Create As2 Partner"""
    
    as2_station_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_station_id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Station associated with this partner."""  
    hex_public_certificate_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex_public_certificate_serial'), 'exclude': lambda f: f is None }})
    r"""Serial of public certificate used for message security in hex format."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Partner."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The partner's formal AS2 name."""  
    public_certificate_issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_issuer'), 'exclude': lambda f: f is None }})
    r"""Issuer of public certificate used for message security."""  
    public_certificate_md5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_md5'), 'exclude': lambda f: f is None }})
    r"""MD5 hash of public certificate used for message security."""  
    public_certificate_not_after: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_not_after'), 'exclude': lambda f: f is None }})
    r"""Not after value of public certificate used for message security."""  
    public_certificate_not_before: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_not_before'), 'exclude': lambda f: f is None }})
    r"""Not before value of public certificate used for message security."""  
    public_certificate_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_serial'), 'exclude': lambda f: f is None }})
    r"""Serial of public certificate used for message security."""  
    public_certificate_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_certificate_subject'), 'exclude': lambda f: f is None }})
    r"""Subject of public certificate used for message security."""  
    server_certificate: Optional[As2PartnerEntityServerCertificateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_certificate'), 'exclude': lambda f: f is None }})
    r"""Remote server certificate security setting"""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""Public URI for sending AS2 message to."""  
    