// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FreeListingsProgramStatusGlobalStateEnum - State of the program. `ENABLED` if there are offers for at least one region.
type FreeListingsProgramStatusGlobalStateEnum string

const (
	FreeListingsProgramStatusGlobalStateEnumProgramStateUnspecified FreeListingsProgramStatusGlobalStateEnum = "PROGRAM_STATE_UNSPECIFIED"
	FreeListingsProgramStatusGlobalStateEnumNotEnabled              FreeListingsProgramStatusGlobalStateEnum = "NOT_ENABLED"
	FreeListingsProgramStatusGlobalStateEnumNoOffersUploaded        FreeListingsProgramStatusGlobalStateEnum = "NO_OFFERS_UPLOADED"
	FreeListingsProgramStatusGlobalStateEnumEnabled                 FreeListingsProgramStatusGlobalStateEnum = "ENABLED"
)

func (e FreeListingsProgramStatusGlobalStateEnum) ToPointer() *FreeListingsProgramStatusGlobalStateEnum {
	return &e
}

func (e *FreeListingsProgramStatusGlobalStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROGRAM_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_ENABLED":
		fallthrough
	case "NO_OFFERS_UPLOADED":
		fallthrough
	case "ENABLED":
		*e = FreeListingsProgramStatusGlobalStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FreeListingsProgramStatusGlobalStateEnum: %v", v)
	}
}

// FreeListingsProgramStatus - Response message for GetFreeListingsProgramStatus.
type FreeListingsProgramStatus struct {
	// State of the program. `ENABLED` if there are offers for at least one region.
	GlobalState *FreeListingsProgramStatusGlobalStateEnum `json:"globalState,omitempty"`
	// Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.
	RegionStatuses []FreeListingsProgramStatusRegionStatus `json:"regionStatuses,omitempty"`
}
