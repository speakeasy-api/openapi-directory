<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - CFB schedules, scores, team stats, odds, weather, and news API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/cfb/scores',
		'https://azure-api.sportsdata.io/v3/cfb/scores',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Are Games In Progress
     * 
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
     */
	public function areGamesInProgress(
        \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AreAnyGamesInProgress', \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areGamesInProgress200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Conference Hierarchy (with Teams)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsResponse
     */
	public function conferenceHierarchyWithTeams(
        \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LeagueHierarchy', \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConferenceHierarchyWithTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Conference>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Current Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
     */
	public function currentSeason(
        \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeason', \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currentSeason200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Current Season Details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsResponse
     */
	public function currentSeasonDetails(
        \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeasonDetails', \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->season = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Season', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Current SeasonType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeResponse
     */
	public function currentSeasontype(
        \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeasonType', \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentSeasontypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->currentSeasontype200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Current Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentWeekResponse
     */
	public function currentWeek(
        \OpenAPI\OpenAPI\Models\Operations\CurrentWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentWeek', \OpenAPI\OpenAPI\Models\Operations\CurrentWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currentWeek200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Games by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
     */
	public function gamesByDate(
        \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GamesByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Games by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesByWeekResponse
     */
	public function gamesByWeek(
        \OpenAPI\OpenAPI\Models\Operations\GamesByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GamesByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\GamesByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injured Players
     * 
     * This endpoint provides all currently injured college football players, along with injury details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
     */
	public function injuredPlayers(
        \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/InjuredPlayers', \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details By Active
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse
     */
	public function playerDetailsByActive(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details By Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
     */
	public function playerDetailsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
     */
	public function playerDetailsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse
     */
	public function schedules(
        \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Games/{season}', \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stadiums
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
     */
	public function stadiums(
        \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Stadiums', \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stadiums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Stadium>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Logs By Season
     * 
     * Game by game log of total team statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
     */
	public function teamGameLogsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Stats by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekResponse
     */
	public function teamGameStatsByWeek(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Season Stats & Standings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsResponse
     */
	public function teamSeasonStatsStandings(
        \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsStandingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
     */
	public function teams(
        \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams', \OpenAPI\OpenAPI\Models\Operations\TeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
}