// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDExpenseReportsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                         `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                         `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 struct {
	Accounting     *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author         *string                                                             `json:"Author,omitempty"`
	BeforeVAT      *float64                                                            `json:"BeforeVAT,omitempty"`
	Code           *string                                                             `json:"Code,omitempty"`
	Comment        *string                                                             `json:"Comment,omitempty"`
	Date           *string                                                             `json:"Date,omitempty"`
	ExpenseDate    *string                                                             `json:"ExpenseDate,omitempty"`
	File           PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2File        `json:"File"`
	InclVAT        *float64                                                            `json:"InclVAT,omitempty"`
	ProcessingDate *string                                                             `json:"ProcessingDate,omitempty"`
	Title          string                                                              `json:"Title"`
	Vat            *float64                                                            `json:"VAT,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 struct {
	BeforeVAT      *float64 `json:"BeforeVAT,omitempty"`
	Date           *string  `json:"Date,omitempty"`
	DocumentID     string   `json:"DocumentId"`
	ExpenseDate    *string  `json:"ExpenseDate,omitempty"`
	InclVAT        *float64 `json:"InclVAT,omitempty"`
	ProcessingDate *string  `json:"ProcessingDate,omitempty"`
	Vat            *float64 `json:"VAT,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/expense-reports_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/expense-reports_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1
	PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONPostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1(postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1) PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON{
		PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1: &postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONPostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2(postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2) PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON{
		PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2: &postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 = postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 = postSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDExpenseReportsJSONRequest struct {
	// expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDExpenseReportsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDExpenseReportsJSON201ApplicationJSON - Id of expense report created
type PostSpacesSpaceIDFoldersIDExpenseReportsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseReportsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of expense report created
	PostSpacesSpaceIDFoldersIDExpenseReportsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDExpenseReportsJSON201ApplicationJSON
}
