// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// QueryConfigurationHistoryUpdatesSourceEnum - Source for configuration updates. Applies a filter to the configuration updates for the specified source.
type QueryConfigurationHistoryUpdatesSourceEnum string

const (
	QueryConfigurationHistoryUpdatesSourceEnumUnknown     QueryConfigurationHistoryUpdatesSourceEnum = "Unknown"
	QueryConfigurationHistoryUpdatesSourceEnumCustomerAPI QueryConfigurationHistoryUpdatesSourceEnum = "CustomerApi"
	QueryConfigurationHistoryUpdatesSourceEnumUpgrade     QueryConfigurationHistoryUpdatesSourceEnum = "Upgrade"
	QueryConfigurationHistoryUpdatesSourceEnumResetNode   QueryConfigurationHistoryUpdatesSourceEnum = "ResetNode"
	QueryConfigurationHistoryUpdatesSourceEnumSoftware    QueryConfigurationHistoryUpdatesSourceEnum = "Software"
	QueryConfigurationHistoryUpdatesSourceEnumInit        QueryConfigurationHistoryUpdatesSourceEnum = "Init"
)

func (e QueryConfigurationHistoryUpdatesSourceEnum) ToPointer() *QueryConfigurationHistoryUpdatesSourceEnum {
	return &e
}

func (e *QueryConfigurationHistoryUpdatesSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unknown":
		fallthrough
	case "CustomerApi":
		fallthrough
	case "Upgrade":
		fallthrough
	case "ResetNode":
		fallthrough
	case "Software":
		fallthrough
	case "Init":
		*e = QueryConfigurationHistoryUpdatesSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryConfigurationHistoryUpdatesSourceEnum: %v", v)
	}
}

type QueryConfigurationHistoryUpdatesRequest struct {
	// The earliest time configuration history is needed. Applies a filter that only shows configuration updates after the specified time.
	AfterTime *time.Time `queryParam:"style=form,explode=true,name=after_time"`
	// The username of the account. Applies a filter to the configuration updates performed by the specified username.
	APIUser *string `queryParam:"style=form,explode=true,name=api_user"`
	// The latest time configuration history is needed. Applies filter to display only configuration updates prior to the specified time. The default value is the current time.
	BeforeTime *time.Time `queryParam:"style=form,explode=true,name=before_time"`
	// Limit the number of matches returned.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Name of the configuration. Applies a filter to the configuration updates for the specified configuration name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The configuration namespace. Applies a filter to the configuration updates for the specified namespace.
	Namespace *string `queryParam:"style=form,explode=true,name=namespace"`
	// The node ID. Applies a filter to the configuration updates for the specified node. When no node_id is specified, the filter shows both local and cluster-wide configurations. Specify 'cluster' for filtering out cluster-wide configuration updates.
	NodeID *string `queryParam:"style=form,explode=true,name=node_id"`
	// Ignore these many matches in the beginning.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Source for configuration updates. Applies a filter to the configuration updates for the specified source.
	Source *QueryConfigurationHistoryUpdatesSourceEnum `queryParam:"style=form,explode=true,name=source"`
}

type QueryConfigurationHistoryUpdatesResponse struct {
	// A summary of configuration updates that satisfy the filters in place.
	ConfigurationUpdateSummaryListResponse *shared.ConfigurationUpdateSummaryListResponse
	ContentType                            string
	StatusCode                             int
	RawResponse                            *http.Response
}
