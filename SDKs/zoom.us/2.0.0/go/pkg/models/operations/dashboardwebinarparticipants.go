// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type DashboardWebinarParticipantsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// DashboardWebinarParticipantsIncludeFieldsEnum - Provide 'registrant_id' as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [webinar registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants).<br>
type DashboardWebinarParticipantsIncludeFieldsEnum string

const (
	DashboardWebinarParticipantsIncludeFieldsEnumRegistrantID DashboardWebinarParticipantsIncludeFieldsEnum = "registrant_id"
)

func (e *DashboardWebinarParticipantsIncludeFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "registrant_id":
		*e = DashboardWebinarParticipantsIncludeFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipantsIncludeFieldsEnum: %s", s)
	}
}

// DashboardWebinarParticipantsTypeEnum - The webinar type.
type DashboardWebinarParticipantsTypeEnum string

const (
	DashboardWebinarParticipantsTypeEnumPast DashboardWebinarParticipantsTypeEnum = "past"
	DashboardWebinarParticipantsTypeEnumLive DashboardWebinarParticipantsTypeEnum = "live"
)

func (e *DashboardWebinarParticipantsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "live":
		*e = DashboardWebinarParticipantsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipantsTypeEnum: %s", s)
	}
}

type DashboardWebinarParticipantsRequest struct {
	// Provide 'registrant_id' as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [webinar registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants).<br>
	//
	//
	IncludeFields *DashboardWebinarParticipantsIncludeFieldsEnum `queryParam:"style=form,explode=true,name=include_fields"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The webinar type.
	Type *DashboardWebinarParticipantsTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

// DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum - Audio quality of the participant.
type DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnumUnknown DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum = " "
	DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnumGood    DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnumFair    DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnumPoor    DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnumBad     DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum: %s", s)
	}
}

// DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum - Screen share quality of the participant.
type DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnumUnknown DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = " "
	DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnumGood    DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnumFair    DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnumPoor    DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnumBad     DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum: %s", s)
	}
}

// DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum - Video quality of the participant.
type DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnumUnknown DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum = " "
	DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnumGood    DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnumFair    DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnumPoor    DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnumBad     DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum: %s", s)
	}
}

type DashboardWebinarParticipants200ApplicationXMLParticipants struct {
	// Audio quality of the participant.
	AudioQuality *DashboardWebinarParticipants200ApplicationXMLParticipantsAudioQualityEnum
	// Participant connection type.
	ConnectionType *string
	// Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
	CustomerKey *string
	// Participant data center.
	DataCenter *string
	//
	// The type of device using which the participant joined the webinar. The possible values for this field are:
	// * `Phone`: Participant joined via PSTN.
	// * `H.323/SIP`: Participant joined via an H.323 or SIP device.
	// * `Windows`: Participant joined via VoIP using a Windows device.
	// * `Mac`: Participant joined via VoIP using a Mac device.
	// * `iOS`: Participant joined via VoIP using an iOS device.
	// * `Android`: Participant joined via VoIP using an Android device.
	Device *string
	// Participant domain.
	Domain *string
	// Email address of the participant.
	Email *string
	// Participant hard disk ID.
	HarddiskID *string
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string
	// Participant IP address.
	IPAddress *string
	// Participant join time.
	JoinTime *time.Time
	// Possible reasons for why a participant left the Webinar.
	//
	LeaveReason *string
	// Participant leave time.
	LeaveTime *time.Time
	// Participant location.
	Location *string
	// Participant MAC address.
	MacAddr *string
	// Participant microphone.
	Microphone *string
	// Participant network type.
	NetworkType *string
	// Participant PC name.
	PcName *string
	// Participant record?
	Recording *bool
	// Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter.
	RegistrantID *string
	// Screen share quality of the participant.
	ScreenShareQuality *DashboardWebinarParticipants200ApplicationXMLParticipantsScreenShareQualityEnum
	// Did the participant share an application?
	ShareApplication *bool
	// Did the participant share their desktop?
	ShareDesktop *bool
	// Did the participant share their whiteboard?
	ShareWhiteboard *bool
	// Participant speaker.
	Speaker *string
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string
	// Participant display name.
	UserName *string
	// Participant version.
	Version *string
	// Video quality of the participant.
	VideoQuality *DashboardWebinarParticipants200ApplicationXMLParticipantsVideoQualityEnum
}

// DashboardWebinarParticipants200ApplicationXML - Pagination object.
type DashboardWebinarParticipants200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// Array of user objects.
	Participants []DashboardWebinarParticipants200ApplicationXMLParticipants
	// The number of all records available across pages.
	TotalRecords *int64
}

// DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum - Audio quality of the participant.
type DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnumUnknown DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum = " "
	DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnumGood    DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnumFair    DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnumPoor    DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnumBad     DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum: %s", s)
	}
}

// DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum - Screen share quality of the participant.
type DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnumUnknown DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = " "
	DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnumGood    DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnumFair    DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnumPoor    DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnumBad     DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum: %s", s)
	}
}

// DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum - Video quality of the participant.
type DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum string

const (
	DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnumUnknown DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum = " "
	DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnumGood    DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum = "good"
	DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnumFair    DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum = "fair"
	DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnumPoor    DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum = "poor"
	DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnumBad     DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum = "bad"
)

func (e *DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum: %s", s)
	}
}

type DashboardWebinarParticipants200ApplicationJSONParticipants struct {
	// Audio quality of the participant.
	AudioQuality *DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum `json:"audio_quality,omitempty"`
	// Participant connection type.
	ConnectionType *string `json:"connection_type,omitempty"`
	// Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
	CustomerKey *string `json:"customer_key,omitempty"`
	// Participant data center.
	DataCenter *string `json:"data_center,omitempty"`
	//
	// The type of device using which the participant joined the webinar. The possible values for this field are:
	// * `Phone`: Participant joined via PSTN.
	// * `H.323/SIP`: Participant joined via an H.323 or SIP device.
	// * `Windows`: Participant joined via VoIP using a Windows device.
	// * `Mac`: Participant joined via VoIP using a Mac device.
	// * `iOS`: Participant joined via VoIP using an iOS device.
	// * `Android`: Participant joined via VoIP using an Android device.
	Device *string `json:"device,omitempty"`
	// Participant domain.
	Domain *string `json:"domain,omitempty"`
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Participant hard disk ID.
	HarddiskID *string `json:"harddisk_id,omitempty"`
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string `json:"id,omitempty"`
	// Participant IP address.
	IPAddress *string `json:"ip_address,omitempty"`
	// Participant join time.
	JoinTime *time.Time `json:"join_time,omitempty"`
	// Possible reasons for why a participant left the Webinar.
	//
	LeaveReason *string `json:"leave_reason,omitempty"`
	// Participant leave time.
	LeaveTime *time.Time `json:"leave_time,omitempty"`
	// Participant location.
	Location *string `json:"location,omitempty"`
	// Participant MAC address.
	MacAddr *string `json:"mac_addr,omitempty"`
	// Participant microphone.
	Microphone *string `json:"microphone,omitempty"`
	// Participant network type.
	NetworkType *string `json:"network_type,omitempty"`
	// Participant PC name.
	PcName *string `json:"pc_name,omitempty"`
	// Participant record?
	Recording *bool `json:"recording,omitempty"`
	// Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter.
	RegistrantID *string `json:"registrant_id,omitempty"`
	// Screen share quality of the participant.
	ScreenShareQuality *DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum `json:"screen_share_quality,omitempty"`
	// Did the participant share an application?
	ShareApplication *bool `json:"share_application,omitempty"`
	// Did the participant share their desktop?
	ShareDesktop *bool `json:"share_desktop,omitempty"`
	// Did the participant share their whiteboard?
	ShareWhiteboard *bool `json:"share_whiteboard,omitempty"`
	// Participant speaker.
	Speaker *string `json:"speaker,omitempty"`
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string `json:"user_id,omitempty"`
	// Participant display name.
	UserName *string `json:"user_name,omitempty"`
	// Participant version.
	Version *string `json:"version,omitempty"`
	// Video quality of the participant.
	VideoQuality *DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum `json:"video_quality,omitempty"`
}

// DashboardWebinarParticipants200ApplicationJSON - Pagination object.
type DashboardWebinarParticipants200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// Array of user objects.
	Participants []DashboardWebinarParticipants200ApplicationJSONParticipants `json:"participants,omitempty"`
	// The number of all records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DashboardWebinarParticipantsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Webinar participants returned.
	DashboardWebinarParticipants200ApplicationJSONObject *DashboardWebinarParticipants200ApplicationJSON
}
