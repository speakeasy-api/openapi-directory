"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetPotTransactionsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    
class GetPotTransactionsSortEnum(str, Enum):
    r"""Sorting order; results are sorted by creation time."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class GetPotTransactionsRequest:
    
    pot_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'pot_id', 'style': 'simple', 'explode': False }})
    r"""Pot Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""From timestamp for the query. This must be in ISO format. Eg. 2021-08-12T07:54:47.011Z. If not present the from is set to 2000-01-01T00:00:00.000Z"""  
    page_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    sort: Optional[GetPotTransactionsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sorting order; results are sorted by creation time."""  
    sub_transaction_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sub_transaction_type', 'style': 'form', 'explode': True }})
    r"""Sub transaction type of the transactions to be retrieved from the API"""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""To timestamp for the query. This must be in ISO format. Eg. 2021-08-12T07:54:47.011Z. If not present the to is set to current time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetPotTransactions200ApplicationJSONTransactionsDirectionEnum(str, Enum):
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""
    IN = 'in'
    OUT = 'out'

class GetPotTransactions200ApplicationJSONTransactionsOriginEnum(str, Enum):
    r"""Origin of the transaction"""
    API = 'api'
    ADMIN_UI = 'admin_ui'
    FILE_UPLOAD = 'file_upload'
    SYSTEM = 'system'

class GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum(str, Enum):
    r"""Primary transaction type"""
    FEES = 'Fees'
    BUY = 'Buy'
    SELL = 'Sell'
    TRANSFERS = 'Transfers'
    INCOME = 'Income'
    TAX = 'Tax'
    CONTRIBUTION = 'Contribution'
    WITHDRAWAL = 'Withdrawal'
    CORPORATE_ACTIONS = 'Corporate actions'

class GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum(str, Enum):
    r"""Sub transaction type"""
    DIVIDEND_REINVESTMENT = 'Dividend Reinvestment'
    INTEREST_REINVESTMENT = 'Interest Reinvestment'
    REINVESTMENT = 'Reinvestment'
    BUY = 'Buy'
    SELL_CANCEL = 'Sell Cancel'
    SWITCH_BUY = 'Switch Buy'
    SELL = 'Sell'
    BUY_CANCEL = 'Buy Cancel'
    SWITCH_SELL = 'Switch Sell'
    LUMP_SUM = 'Lump sum'
    EMPLOYER_CONTRIBUTION = 'Employer contribution'
    EMPLOYEE_CONTRIBUTION = 'Employee contribution'
    REGULAR_CONTRIBUTION = 'Regular contribution'
    PAYMENT_IN_FOR_FEES = 'Payment in for fees'
    INTERNAL_TRANSFER_CASH_IN = 'Internal Transfer - Cash In'
    INTERNAL_TRANSFER_STOCK_IN = 'Internal Transfer - Stock In'
    INTERNAL_TRANSFER_CASH_OUT = 'Internal Transfer - Cash Out'
    INTERNAL_TRANSFER_STOCK_OUT = 'Internal Transfer - Stock Out'
    STOCK_TRANSFER_IN = 'Stock Transfer In'
    CASH_TRANSFER_IN = 'Cash Transfer In'
    STOCK_TRANSFER_OUT = 'Stock Transfer Out'
    CASH_TRANSFER_OUT = 'Cash Transfer Out'
    COMMISSION = 'Commission'
    ANCILLARY_FEE = 'Ancillary fee'
    MANAGEMENT_FEE = 'Management fee'
    FEE_CREDIT = 'Fee credit'
    FEE_REBATE = 'Fee rebate'
    ADVISOR_ONGOING_FEE = 'Advisor ongoing fee'
    ONE_OFF_ADVISOR_FEE = 'One-off advisor fee'
    COMMISSION_REBATE = 'Commission rebate'
    CUSTODY_FEES = 'Custody fees'
    SERVICE_FEES = 'Service fees'
    PRODUCT_ADMINISTRATION_FEES = 'Product administration fees'
    PORTFOLIO_MANAGEMENT_FEES = 'Portfolio management fees'
    PLATFORM_FEES = 'Platform fees'
    DIVIDENDS = 'Dividends'
    DISTRIBUTIONS = 'Distributions'
    INTEREST = 'Interest'
    OTHER_INCOME = 'Other income'
    TAKEOVERS_MERGERS_AND_NAME_CHANGES_CREATE = 'Takeovers, Mergers & Name Changes - Create'
    TAKEOVERS_MERGERS_AND_NAME_CHANGES_EXTINGUISH = 'Takeovers, Mergers & Name Changes - Extinguish'
    RIGHTS_EXPIRY = 'Rights Expiry'
    RIGHTS_EXERCISE = 'Rights Exercise'
    WARRANT_EXERCISE = 'Warrant Exercise'
    FIXED_INCOME_MATURITY_RECEIVE_CAPITAL = 'Fixed Income Maturity - Receive Capital'
    FIXED_INCOME_MATURITY_EXTINGUISH_BOND_UNITS = 'Fixed Income Maturity - Extinguish Bond Units'
    FUND_MERGER_CREATE_NEW_FUND_UNITS = 'Fund Merger - Create New Fund Units'
    FUND_MERGER_EXTINGUISH_OLD_FUND_UNITS = 'Fund Merger - Extinguish Old Fund Units'
    RIGHTS_ISSUE = 'Rights Issue'
    STOCK_DIVIDEND = 'Stock Dividend'
    SPIN_OFF = 'Spin-Off'
    WARRANT_ISSUE = 'Warrant Issue'
    STOCK_SPLIT = 'Stock Split'
    FEE_TAX = 'Fee Tax'
    TAX_RELIEF = 'Tax Relief'
    GST = 'GST'
    HST = 'HST'
    PST = 'PST'
    QST = 'QST'
    WITHHOLDING_TAX = 'Withholding Tax'
    NON_RESIDENT_TAX = 'Non-resident Tax'
    PENALTY = 'Penalty'
    CONTRIBUTION_REFUND = 'Contribution Refund'
    INCOME_WITHDRAWAL = 'Income Withdrawal'
    REVERSAL = 'Reversal'
    WITHDRAWAL = 'Withdrawal'
    MISCELLANEOUS_CORPORATE_ACTION_EXERCISE = 'Miscellaneous Corporate Action Exercise'

class GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum(str, Enum):
    r"""Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""
    INSTRUCTED = 'instructed'
    CONFIRMED = 'confirmed'
    PRICED = 'priced'
    REJECTED = 'rejected'
    SETTLED = 'settled'
    CANCELLED = 'cancelled'
    SCHEDULED = 'scheduled'

class GetPotTransactions200ApplicationJSONTransactionsTypeEnum(str, Enum):
    r"""State of the transaction"""
    PENDING = 'pending'
    ARCHIVED = 'archived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions200ApplicationJSONTransactions:
    
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""Will indicate the date where this record was created"""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Currency of the transaction"""  
    direction: GetPotTransactions200ApplicationJSONTransactionsDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Investment product id of the transaction. Will be 'cash' for cash transaction"""  
    origin: GetPotTransactions200ApplicationJSONTransactionsOriginEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""Origin of the transaction"""  
    primary_transaction_type: GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_transaction_type') }})
    r"""Primary transaction type"""  
    sub_transaction_type: GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_transaction_type') }})
    r"""Sub transaction type"""  
    sub_type: GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_type') }})
    r"""Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""Unique ID of the transaction"""  
    type: GetPotTransactions200ApplicationJSONTransactionsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""State of the transaction"""  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})
    r"""Will indicate the date where this record was last changed"""  
    additional_external_details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_external_details'), 'exclude': lambda f: f is None }})
    r"""Additional external details of the transaction, This may be populated in reconciliation process"""  
    client_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_order_id'), 'exclude': lambda f: f is None }})
    r"""(optional) Order identifier assigned by the wealth manager"""  
    execution_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execution_price'), 'exclude': lambda f: f is None }})
    r"""Executed price of the buy, sell transaction"""  
    external_transaction_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_transaction_reference'), 'exclude': lambda f: f is None }})
    r"""External Transaction Reference"""  
    parent_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_transaction_id'), 'exclude': lambda f: f is None }})
    r"""Parent Transaction ID"""  
    settlement_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_date'), 'exclude': lambda f: f is None }})
    r"""Intended settlement date of the pending transaction or actual the settled day of the transaction"""  
    trade_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trade_date'), 'exclude': lambda f: f is None }})
    r"""Date the transaction was effected"""  
    transaction_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity of the investment product transaction. Will be empty for the cash transactions."""  
    transaction_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_value'), 'exclude': lambda f: f is None }})
    r"""Value of the transaction"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotTransactions200ApplicationJSON:
    r"""success"""
    
    next_page_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_available') }})
    r"""This indicates the availability of the next page"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    transactions: list[GetPotTransactions200ApplicationJSONTransactions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactions') }})  
    

@dataclasses.dataclass
class GetPotTransactionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_pot_transactions_200_application_json_object: Optional[GetPotTransactions200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_pot_transactions_401_application_json_object: Optional[GetPotTransactions401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_pot_transactions_403_application_json_object: Optional[GetPotTransactions403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_pot_transactions_404_application_json_object: Optional[GetPotTransactions404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_pot_transactions_429_application_json_object: Optional[GetPotTransactions429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_pot_transactions_500_application_json_object: Optional[GetPotTransactions500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    