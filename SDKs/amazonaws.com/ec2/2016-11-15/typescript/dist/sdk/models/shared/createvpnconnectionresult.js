"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateVpnConnectionResult = exports.CreateVpnConnectionResultVpnConnection = exports.CreateVpnConnectionResultVpnConnectionVgwTelemetry = exports.CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = exports.CreateVpnConnectionResultVpnConnectionTypeEnum = exports.CreateVpnConnectionResultVpnConnectionTags = exports.CreateVpnConnectionResultVpnConnectionStateEnum = exports.CreateVpnConnectionResultVpnConnectionRoutes = exports.CreateVpnConnectionResultVpnConnectionRoutesStateEnum = exports.CreateVpnConnectionResultVpnConnectionRoutesSourceEnum = exports.CreateVpnConnectionResultVpnConnectionOptions = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The current state of the gateway association.
 */
var CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum;
(function (CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum) {
    CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Associated"] = "associated";
    CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["NotAssociated"] = "not-associated";
    CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Associating"] = "associating";
    CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Disassociating"] = "disassociating";
})(CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = exports.CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum || (exports.CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = {}));
/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum;
(function (CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum) {
    CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv4"] = "ipv4";
    CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv6"] = "ipv6";
})(CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum || (exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = {}));
/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions;
/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logGroupArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logOutputFormat", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
/**
 * Options for logging VPN tunnel activity.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions.prototype, "cloudWatchLogOptions", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;
/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
/**
 * The VPN tunnel options.
 */
var CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions, _super);
    function CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideIpv6Cidr", void 0);
    return CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions = CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions;
/**
 * The VPN connection options.
 */
var CreateVpnConnectionResultVpnConnectionOptions = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionOptions, _super);
    function CreateVpnConnectionResultVpnConnectionOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "enableAcceleration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "localIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "localIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "outsideIpAddressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "remoteIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "remoteIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "staticRoutesOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "transportTransitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "tunnelInsideIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnectionOptions.prototype, "tunnelOptions", void 0);
    return CreateVpnConnectionResultVpnConnectionOptions;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionOptions = CreateVpnConnectionResultVpnConnectionOptions;
/**
 * Indicates how the routes were provided.
 */
var CreateVpnConnectionResultVpnConnectionRoutesSourceEnum;
(function (CreateVpnConnectionResultVpnConnectionRoutesSourceEnum) {
    CreateVpnConnectionResultVpnConnectionRoutesSourceEnum["Static"] = "Static";
})(CreateVpnConnectionResultVpnConnectionRoutesSourceEnum = exports.CreateVpnConnectionResultVpnConnectionRoutesSourceEnum || (exports.CreateVpnConnectionResultVpnConnectionRoutesSourceEnum = {}));
/**
 * The current state of the static route.
 */
var CreateVpnConnectionResultVpnConnectionRoutesStateEnum;
(function (CreateVpnConnectionResultVpnConnectionRoutesStateEnum) {
    CreateVpnConnectionResultVpnConnectionRoutesStateEnum["Pending"] = "pending";
    CreateVpnConnectionResultVpnConnectionRoutesStateEnum["Available"] = "available";
    CreateVpnConnectionResultVpnConnectionRoutesStateEnum["Deleting"] = "deleting";
    CreateVpnConnectionResultVpnConnectionRoutesStateEnum["Deleted"] = "deleted";
})(CreateVpnConnectionResultVpnConnectionRoutesStateEnum = exports.CreateVpnConnectionResultVpnConnectionRoutesStateEnum || (exports.CreateVpnConnectionResultVpnConnectionRoutesStateEnum = {}));
/**
 * Describes a static route for a VPN connection.
 */
var CreateVpnConnectionResultVpnConnectionRoutes = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionRoutes, _super);
    function CreateVpnConnectionResultVpnConnectionRoutes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionRoutes.prototype, "destinationCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionRoutes.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionRoutes.prototype, "state", void 0);
    return CreateVpnConnectionResultVpnConnectionRoutes;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionRoutes = CreateVpnConnectionResultVpnConnectionRoutes;
/**
 * The current state of the VPN connection.
 */
var CreateVpnConnectionResultVpnConnectionStateEnum;
(function (CreateVpnConnectionResultVpnConnectionStateEnum) {
    CreateVpnConnectionResultVpnConnectionStateEnum["Pending"] = "pending";
    CreateVpnConnectionResultVpnConnectionStateEnum["Available"] = "available";
    CreateVpnConnectionResultVpnConnectionStateEnum["Deleting"] = "deleting";
    CreateVpnConnectionResultVpnConnectionStateEnum["Deleted"] = "deleted";
})(CreateVpnConnectionResultVpnConnectionStateEnum = exports.CreateVpnConnectionResultVpnConnectionStateEnum || (exports.CreateVpnConnectionResultVpnConnectionStateEnum = {}));
/**
 * Describes a tag.
 */
var CreateVpnConnectionResultVpnConnectionTags = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionTags, _super);
    function CreateVpnConnectionResultVpnConnectionTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionTags.prototype, "value", void 0);
    return CreateVpnConnectionResultVpnConnectionTags;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionTags = CreateVpnConnectionResultVpnConnectionTags;
/**
 * The type of VPN connection.
 */
var CreateVpnConnectionResultVpnConnectionTypeEnum;
(function (CreateVpnConnectionResultVpnConnectionTypeEnum) {
    CreateVpnConnectionResultVpnConnectionTypeEnum["Ipsec1"] = "ipsec.1";
})(CreateVpnConnectionResultVpnConnectionTypeEnum = exports.CreateVpnConnectionResultVpnConnectionTypeEnum || (exports.CreateVpnConnectionResultVpnConnectionTypeEnum = {}));
/**
 * The status of the VPN tunnel.
 */
var CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum;
(function (CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum) {
    CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum["Up"] = "UP";
    CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum["Down"] = "DOWN";
})(CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = exports.CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum || (exports.CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = {}));
/**
 * Describes telemetry for a VPN tunnel.
 */
var CreateVpnConnectionResultVpnConnectionVgwTelemetry = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnectionVgwTelemetry, _super);
    function CreateVpnConnectionResultVpnConnectionVgwTelemetry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "acceptedRouteCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "certificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "lastStatusChange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "statusMessage", void 0);
    return CreateVpnConnectionResultVpnConnectionVgwTelemetry;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnectionVgwTelemetry = CreateVpnConnectionResultVpnConnectionVgwTelemetry;
/**
 * Information about the VPN connection.
 */
var CreateVpnConnectionResultVpnConnection = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResultVpnConnection, _super);
    function CreateVpnConnectionResultVpnConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "coreNetworkArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "coreNetworkAttachmentArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "customerGatewayConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "customerGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "gatewayAssociationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpnConnectionResultVpnConnectionOptions)
    ], CreateVpnConnectionResultVpnConnection.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateVpnConnectionResultVpnConnectionRoutes }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnection.prototype, "routes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateVpnConnectionResultVpnConnectionTags }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnection.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateVpnConnectionResultVpnConnectionVgwTelemetry,
        }),
        __metadata("design:type", Array)
    ], CreateVpnConnectionResultVpnConnection.prototype, "vgwTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "vpnConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateVpnConnectionResultVpnConnection.prototype, "vpnGatewayId", void 0);
    return CreateVpnConnectionResultVpnConnection;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResultVpnConnection = CreateVpnConnectionResultVpnConnection;
/**
 * Contains the output of CreateVpnConnection.
 */
var CreateVpnConnectionResult = /** @class */ (function (_super) {
    __extends(CreateVpnConnectionResult, _super);
    function CreateVpnConnectionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateVpnConnectionResultVpnConnection)
    ], CreateVpnConnectionResult.prototype, "vpnConnection", void 0);
    return CreateVpnConnectionResult;
}(utils_1.SpeakeasyBase));
exports.CreateVpnConnectionResult = CreateVpnConnectionResult;
