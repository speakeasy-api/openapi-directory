"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://insights.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def fetch_account_settings(self, request: operations.FetchAccountSettingsRequest, security: operations.FetchAccountSettingsSecurity, server_url: Optional[str] = None) -> operations.FetchAccountSettingsResponse:
        base_url = operations.FETCH_ACCOUNT_SETTINGS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Voice/Settings'
        
        query_params = utils.get_query_params(operations.FetchAccountSettingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAccountSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1AccountSettings])
                res.insights_v1_account_settings = out

        return res

    def fetch_annotation(self, request: operations.FetchAnnotationRequest, security: operations.FetchAnnotationSecurity, server_url: Optional[str] = None) -> operations.FetchAnnotationResponse:
        r"""Fetch a specific Annotation."""
        base_url = operations.FETCH_ANNOTATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAnnotationRequest, base_url, '/v1/Voice/{CallSid}/Annotation', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAnnotationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1CallAnnotation])
                res.insights_v1_call_annotation = out

        return res

    def fetch_call(self, request: operations.FetchCallRequest, security: operations.FetchCallSecurity, server_url: Optional[str] = None) -> operations.FetchCallResponse:
        base_url = operations.FETCH_CALL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCallRequest, base_url, '/v1/Voice/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1Call])
                res.insights_v1_call = out

        return res

    def fetch_conference(self, request: operations.FetchConferenceRequest, security: operations.FetchConferenceSecurity, server_url: Optional[str] = None) -> operations.FetchConferenceResponse:
        r"""Fetch a specific Conference."""
        base_url = operations.FETCH_CONFERENCE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchConferenceRequest, base_url, '/v1/Conferences/{ConferenceSid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchConferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1Conference])
                res.insights_v1_conference = out

        return res

    def fetch_conference_participant(self, request: operations.FetchConferenceParticipantRequest, security: operations.FetchConferenceParticipantSecurity, server_url: Optional[str] = None) -> operations.FetchConferenceParticipantResponse:
        r"""Fetch a specific Conference Participant Summary."""
        base_url = operations.FETCH_CONFERENCE_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchConferenceParticipantRequest, base_url, '/v1/Conferences/{ConferenceSid}/Participants/{ParticipantSid}', request)
        
        query_params = utils.get_query_params(operations.FetchConferenceParticipantRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchConferenceParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1ConferenceConferenceParticipant])
                res.insights_v1_conference_conference_participant = out

        return res

    def fetch_summary(self, request: operations.FetchSummaryRequest, security: operations.FetchSummarySecurity, server_url: Optional[str] = None) -> operations.FetchSummaryResponse:
        base_url = operations.FETCH_SUMMARY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSummaryRequest, base_url, '/v1/Voice/{CallSid}/Summary', request)
        
        query_params = utils.get_query_params(operations.FetchSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1CallSummary])
                res.insights_v1_call_summary = out

        return res

    def fetch_video_participant_summary(self, request: operations.FetchVideoParticipantSummaryRequest, security: operations.FetchVideoParticipantSummarySecurity, server_url: Optional[str] = None) -> operations.FetchVideoParticipantSummaryResponse:
        r"""Get Video Log Analyzer data for a Room Participant."""
        base_url = operations.FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchVideoParticipantSummaryRequest, base_url, '/v1/Video/Rooms/{RoomSid}/Participants/{ParticipantSid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchVideoParticipantSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1VideoRoomSummaryVideoParticipantSummary])
                res.insights_v1_video_room_summary_video_participant_summary = out

        return res

    def fetch_video_room_summary(self, request: operations.FetchVideoRoomSummaryRequest, security: operations.FetchVideoRoomSummarySecurity, server_url: Optional[str] = None) -> operations.FetchVideoRoomSummaryResponse:
        r"""Get Video Log Analyzer data for a Room."""
        base_url = operations.FETCH_VIDEO_ROOM_SUMMARY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchVideoRoomSummaryRequest, base_url, '/v1/Video/Rooms/{RoomSid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchVideoRoomSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1VideoRoomSummary])
                res.insights_v1_video_room_summary = out

        return res

    def list_call_summaries(self, request: operations.ListCallSummariesRequest, security: operations.ListCallSummariesSecurity, server_url: Optional[str] = None) -> operations.ListCallSummariesResponse:
        base_url = operations.LIST_CALL_SUMMARIES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Voice/Summaries'
        
        query_params = utils.get_query_params(operations.ListCallSummariesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCallSummariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCallSummariesListCallSummariesResponse])
                res.list_call_summaries_response = out

        return res

    def list_conference(self, request: operations.ListConferenceRequest, security: operations.ListConferenceSecurity, server_url: Optional[str] = None) -> operations.ListConferenceResponse:
        r"""Retrieve a list of Conferences."""
        base_url = operations.LIST_CONFERENCE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Conferences'
        
        query_params = utils.get_query_params(operations.ListConferenceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListConferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListConferenceListConferenceResponse])
                res.list_conference_response = out

        return res

    def list_conference_participant(self, request: operations.ListConferenceParticipantRequest, security: operations.ListConferenceParticipantSecurity, server_url: Optional[str] = None) -> operations.ListConferenceParticipantResponse:
        r"""List Conference Participants."""
        base_url = operations.LIST_CONFERENCE_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListConferenceParticipantRequest, base_url, '/v1/Conferences/{ConferenceSid}/Participants', request)
        
        query_params = utils.get_query_params(operations.ListConferenceParticipantRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListConferenceParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListConferenceParticipantListConferenceParticipantResponse])
                res.list_conference_participant_response = out

        return res

    def list_event(self, request: operations.ListEventRequest, security: operations.ListEventSecurity, server_url: Optional[str] = None) -> operations.ListEventResponse:
        base_url = operations.LIST_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListEventRequest, base_url, '/v1/Voice/{CallSid}/Events', request)
        
        query_params = utils.get_query_params(operations.ListEventRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEventListEventResponse])
                res.list_event_response = out

        return res

    def list_metric(self, request: operations.ListMetricRequest, security: operations.ListMetricSecurity, server_url: Optional[str] = None) -> operations.ListMetricResponse:
        base_url = operations.LIST_METRIC_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListMetricRequest, base_url, '/v1/Voice/{CallSid}/Metrics', request)
        
        query_params = utils.get_query_params(operations.ListMetricRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMetricListMetricResponse])
                res.list_metric_response = out

        return res

    def list_video_participant_summary(self, request: operations.ListVideoParticipantSummaryRequest, security: operations.ListVideoParticipantSummarySecurity, server_url: Optional[str] = None) -> operations.ListVideoParticipantSummaryResponse:
        r"""Get a list of room participants."""
        base_url = operations.LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListVideoParticipantSummaryRequest, base_url, '/v1/Video/Rooms/{RoomSid}/Participants', request)
        
        query_params = utils.get_query_params(operations.ListVideoParticipantSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVideoParticipantSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListVideoParticipantSummaryListVideoParticipantSummaryResponse])
                res.list_video_participant_summary_response = out

        return res

    def list_video_room_summary(self, request: operations.ListVideoRoomSummaryRequest, security: operations.ListVideoRoomSummarySecurity, server_url: Optional[str] = None) -> operations.ListVideoRoomSummaryResponse:
        r"""Get a list of Programmable Video Rooms."""
        base_url = operations.LIST_VIDEO_ROOM_SUMMARY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Video/Rooms'
        
        query_params = utils.get_query_params(operations.ListVideoRoomSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVideoRoomSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListVideoRoomSummaryListVideoRoomSummaryResponse])
                res.list_video_room_summary_response = out

        return res

    def update_account_settings(self, request: operations.UpdateAccountSettingsUpdateAccountSettingsRequest, security: operations.UpdateAccountSettingsSecurity, server_url: Optional[str] = None) -> operations.UpdateAccountSettingsResponse:
        base_url = operations.UPDATE_ACCOUNT_SETTINGS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Voice/Settings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1AccountSettings])
                res.insights_v1_account_settings = out

        return res

    def update_annotation(self, request: operations.UpdateAnnotationRequest, security: operations.UpdateAnnotationSecurity, server_url: Optional[str] = None) -> operations.UpdateAnnotationResponse:
        r"""Create/Update the annotation for the call"""
        base_url = operations.UPDATE_ANNOTATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateAnnotationRequest, base_url, '/v1/Voice/{CallSid}/Annotation', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAnnotationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InsightsV1CallAnnotation])
                res.insights_v1_call_annotation = out

        return res

    