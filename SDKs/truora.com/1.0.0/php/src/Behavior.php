<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Behavior 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Report Behavior
     * 
     * Creates a behavior item to report employee conducts that do not or might not be included in their background check. This report includes both possitive and negative behaviors and sorts them by severity.
     * 
     * ### Reasons to report a person
     * 
     * <table>
     *   <tr>
     *     <td style="width: 100px"><center><b>Very High</b><br>(Score: 1)</td>
     *     <td>Rape, Drug Dealing, Sexual Harassment</td>
     *   </tr>
     *   <tr>
     *     <td><center><b>High</b><br>(Score: 0.8)</td>
     *     <td>Theft, Fights, Aggressive Behaviour, Identity Fraud, Drunk, Drug Possession</td>
     *   </tr>
     *   <tr>
     *     <td><center><b>Medium</b><br>(Score: 0.6)</td>
     *     <td>Absences</td>
     *   </tr>
     *   <tr>
     *     <td><center><b>Low</b><br>(Score: 0.4)</td>
     *     <td>Tardiness, Confidentiality Breach</td>
     *   </tr>
     *   <tr>
     *     <td><center><b>None</b><br>(Score: 0)</td>
     *     <td>Good Reputation</td>
     *   </tr>
     *   <tr>
     *     <td><center><b>Unknown</b></td>
     *     <td>No information</td>
     *   </tr>
     * </table>
     * 
     * **NOTE:** If the reason of your report is not here, please contact Truora support team.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateBehaviorInput $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportBehaviorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReportBehaviorResponse
     */
	public function reportBehavior(
        \OpenAPI\OpenAPI\Models\Shared\CreateBehaviorInput $request,
        \OpenAPI\OpenAPI\Models\Operations\ReportBehaviorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReportBehaviorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/behavior');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReportBehaviorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->behaviourOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BehaviourOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
}