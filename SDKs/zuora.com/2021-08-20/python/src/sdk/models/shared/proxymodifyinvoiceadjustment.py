"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum(str, Enum):
    r"""Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite."""
    PROCESSING = 'Processing'
    YES = 'Yes'
    NO = 'No'
    ERROR = 'Error'
    IGNORE = 'Ignore'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyModifyInvoiceAdjustment:
    r"""Container for custom fields of an Invoice Adjustment object."""
    
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReasonCode'), 'exclude': lambda f: f is None }})
    r"""A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    **Character limit**: 32 **V****alues**: a valid reason code
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls.
    **Character limit**: 9 **Values**: `Canceled`, `Processed`
    """  
    transferred_to_accounting: Optional[ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransferredToAccounting'), 'exclude': lambda f: f is None }})
    r"""Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite."""  
    