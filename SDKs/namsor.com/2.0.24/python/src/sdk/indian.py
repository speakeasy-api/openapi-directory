"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Indian:
    r"""INDIAN special features"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def castegroup_indian_full(self, request: operations.CastegroupIndianFullRequest, security: operations.CastegroupIndianFullSecurity) -> operations.CastegroupIndianFullResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CastegroupIndianFullRequest, base_url, '/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CastegroupIndianFullResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameCastegroupOut])
                res.personal_name_castegroup_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def castegroup_indian_full_batch(self, request: shared.BatchPersonalNameSubdivisionIn, security: operations.CastegroupIndianFullBatchSecurity) -> operations.CastegroupIndianFullBatchResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/castegroupIndianFullBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CastegroupIndianFullBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameCastegroupOut])
                res.batch_personal_name_castegroup_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def religion(self, request: operations.ReligionRequest, security: operations.ReligionSecurity) -> operations.ReligionResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReligionRequest, base_url, '/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReligionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameReligionedOut])
                res.personal_name_religioned_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def religion_indian_full_batch(self, request: shared.BatchPersonalNameSubdivisionIn, security: operations.ReligionIndianFullBatchSecurity) -> operations.ReligionIndianFullBatchResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/religionIndianFullBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReligionIndianFullBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameReligionedOut])
                res.batch_personal_name_religioned_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def subclassification_indian(self, request: operations.SubclassificationIndianRequest, security: operations.SubclassificationIndianSecurity) -> operations.SubclassificationIndianResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubclassificationIndianRequest, base_url, '/api2/json/subclassificationIndian/{firstName}/{lastName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubclassificationIndianResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNameGeoSubclassificationOut])
                res.first_last_name_geo_subclassification_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def subclassification_indian_batch(self, request: shared.BatchFirstLastNameGeoIn, security: operations.SubclassificationIndianBatchSecurity) -> operations.SubclassificationIndianBatchResponse:
        r"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/subclassificationIndianBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubclassificationIndianBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchFirstLastNameGeoSubclassificationOut])
                res.batch_first_last_name_geo_subclassification_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    