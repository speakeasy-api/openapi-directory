"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def datalineage_projects_locations_batch_search_link_processes(self, request: operations.DatalineageProjectsLocationsBatchSearchLinkProcessesRequest, security: operations.DatalineageProjectsLocationsBatchSearchLinkProcessesSecurity) -> operations.DatalineageProjectsLocationsBatchSearchLinkProcessesResponse:
        r"""Retrieve information about LineageProcesses associated with specific links. LineageProcesses are transformation pipelines that result in data flowing from **source** to **target** assets. Links between assets represent this operation. If you have specific link names, you can use this method to verify which LineageProcesses contribute to creating those links. See the SearchLinks method for more information on how to retrieve link name. You can retrieve the LineageProcess information in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsBatchSearchLinkProcessesRequest, base_url, '/v1/{parent}:batchSearchLinkProcesses', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_batch_search_link_processes_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsBatchSearchLinkProcessesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsBatchSearchLinkProcessesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1BatchSearchLinkProcessesResponse])
                res.google_cloud_datacatalog_lineage_v1_batch_search_link_processes_response = out

        return res

    def datalineage_projects_locations_operations_cancel(self, request: operations.DatalineageProjectsLocationsOperationsCancelRequest, security: operations.DatalineageProjectsLocationsOperationsCancelSecurity) -> operations.DatalineageProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def datalineage_projects_locations_operations_list(self, request: operations.DatalineageProjectsLocationsOperationsListRequest, security: operations.DatalineageProjectsLocationsOperationsListSecurity) -> operations.DatalineageProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def datalineage_projects_locations_processes_create(self, request: operations.DatalineageProjectsLocationsProcessesCreateRequest, security: operations.DatalineageProjectsLocationsProcessesCreateSecurity) -> operations.DatalineageProjectsLocationsProcessesCreateResponse:
        r"""Creates a new process."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesCreateRequest, base_url, '/v1/{parent}/processes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_process", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1Process])
                res.google_cloud_datacatalog_lineage_v1_process = out

        return res

    def datalineage_projects_locations_processes_list(self, request: operations.DatalineageProjectsLocationsProcessesListRequest, security: operations.DatalineageProjectsLocationsProcessesListSecurity) -> operations.DatalineageProjectsLocationsProcessesListResponse:
        r"""List processes in the given project and location. List order is descending by insertion time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesListRequest, base_url, '/v1/{parent}/processes', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1ListProcessesResponse])
                res.google_cloud_datacatalog_lineage_v1_list_processes_response = out

        return res

    def datalineage_projects_locations_processes_runs_create(self, request: operations.DatalineageProjectsLocationsProcessesRunsCreateRequest, security: operations.DatalineageProjectsLocationsProcessesRunsCreateSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsCreateResponse:
        r"""Creates a new run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsCreateRequest, base_url, '/v1/{parent}/runs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_run", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1Run])
                res.google_cloud_datacatalog_lineage_v1_run = out

        return res

    def datalineage_projects_locations_processes_runs_lineage_events_create(self, request: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest, security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse:
        r"""Creates a new lineage event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest, base_url, '/v1/{parent}/lineageEvents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_lineage_event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1LineageEvent])
                res.google_cloud_datacatalog_lineage_v1_lineage_event = out

        return res

    def datalineage_projects_locations_processes_runs_lineage_events_delete(self, request: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest, security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse:
        r"""Deletes the lineage event with the specified name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def datalineage_projects_locations_processes_runs_lineage_events_get(self, request: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest, security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse:
        r"""Gets details of a specified lineage event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1LineageEvent])
                res.google_cloud_datacatalog_lineage_v1_lineage_event = out

        return res

    def datalineage_projects_locations_processes_runs_lineage_events_list(self, request: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest, security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse:
        r"""Lists lineage events in the given project and location. The list order is not defined."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest, base_url, '/v1/{parent}/lineageEvents', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1ListLineageEventsResponse])
                res.google_cloud_datacatalog_lineage_v1_list_lineage_events_response = out

        return res

    def datalineage_projects_locations_processes_runs_list(self, request: operations.DatalineageProjectsLocationsProcessesRunsListRequest, security: operations.DatalineageProjectsLocationsProcessesRunsListSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsListResponse:
        r"""Lists runs in the given project and location. List order is descending by `start_time`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsListRequest, base_url, '/v1/{parent}/runs', request)
        
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1ListRunsResponse])
                res.google_cloud_datacatalog_lineage_v1_list_runs_response = out

        return res

    def datalineage_projects_locations_processes_runs_patch(self, request: operations.DatalineageProjectsLocationsProcessesRunsPatchRequest, security: operations.DatalineageProjectsLocationsProcessesRunsPatchSecurity) -> operations.DatalineageProjectsLocationsProcessesRunsPatchResponse:
        r"""Updates a run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsProcessesRunsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_run", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsProcessesRunsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsProcessesRunsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1Run])
                res.google_cloud_datacatalog_lineage_v1_run = out

        return res

    def datalineage_projects_locations_search_links(self, request: operations.DatalineageProjectsLocationsSearchLinksRequest, security: operations.DatalineageProjectsLocationsSearchLinksSecurity) -> operations.DatalineageProjectsLocationsSearchLinksResponse:
        r"""Retrieve a list of links connected to a specific asset. Links represent the data flow between **source** (upstream) and **target** (downstream) assets in transformation pipelines. Links are stored in the same project as the Lineage Events that create them. You can retrieve links in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatalineageProjectsLocationsSearchLinksRequest, base_url, '/v1/{parent}:searchLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_lineage_v1_search_links_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatalineageProjectsLocationsSearchLinksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatalineageProjectsLocationsSearchLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogLineageV1SearchLinksResponse])
                res.google_cloud_datacatalog_lineage_v1_search_links_response = out

        return res

    