"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contact as shared_contact
from ..shared import criteriatargeting as shared_criteriatargeting
from ..shared import inventorysizetargeting as shared_inventorysizetargeting
from ..shared import money as shared_money
from ..shared import preferreddealterms as shared_preferreddealterms
from ..shared import programmaticguaranteedterms as shared_programmaticguaranteedterms
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendRfpRequest:
    r"""Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation."""
    
    buyer_contacts: Optional[list[shared_contact.Contact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerContacts'), 'exclude': lambda f: f is None }})
    r"""Contact information for the buyer."""  
    client: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})
    r"""If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the proposal being created by this RFP."""  
    estimated_gross_spend: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedGrossSpend'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    flight_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightEndTime'), 'exclude': lambda f: f is None }})
    r"""Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC \\"Zulu\\" format. Note that the specified value will be truncated to a granularity of one second."""  
    flight_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightStartTime'), 'exclude': lambda f: f is None }})
    r"""Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC \\"Zulu\\" format. Note that the specified value will be truncated to a granularity of one second."""  
    geo_targeting: Optional[shared_criteriatargeting.CriteriaTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoTargeting'), 'exclude': lambda f: f is None }})
    r"""Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax."""  
    inventory_size_targeting: Optional[shared_inventorysizetargeting.InventorySizeTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySizeTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents the size of an ad unit that can be targeted on a bid request."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""A message that is sent to the publisher. Maximum length is 1024 characters."""  
    preferred_deal_terms: Optional[shared_preferreddealterms.PreferredDealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredDealTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Preferred Deals."""  
    programmatic_guaranteed_terms: Optional[shared_programmaticguaranteedterms.ProgrammaticGuaranteedTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programmaticGuaranteedTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Programmatic Guaranteed Deals."""  
    publisher_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfile'), 'exclude': lambda f: f is None }})
    r"""Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`."""  
    