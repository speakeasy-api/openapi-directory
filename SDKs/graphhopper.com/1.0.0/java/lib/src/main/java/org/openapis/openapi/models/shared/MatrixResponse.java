/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MatrixResponse - Matrix API response
 */
public class MatrixResponse {
    /**
     * The distance matrix for the specified points in the same order as the time matrix. The distances are in meters. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distances")
    public Double[][] distances;

    public MatrixResponse withDistances(Double[][] distances) {
        this.distances = distances;
        return this;
    }
    
    /**
     * Optional. Additional response data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hints")
    public MatrixResponseHints[] hints;

    public MatrixResponse withHints(MatrixResponseHints[] hints) {
        this.hints = hints;
        return this;
    }
    
    /**
     * Additional information for your request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("info")
    public ResponseInfo info;

    public MatrixResponse withInfo(ResponseInfo info) {
        this.info = info;
        return this;
    }
    
    /**
     * The time matrix for the specified points in the order [[from1-&gt;to1, from1-&gt;to2, ...], [from2-&gt;to1, from2-&gt;to2, ...], ...]. The times are in seconds. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    public Double[][] times;

    public MatrixResponse withTimes(Double[][] times) {
        this.times = times;
        return this;
    }
    
    /**
     * The weight matrix for the specified points in the same order as the time matrix. The weights for different vehicles can have a different unit but the weights array is perfectly suited as input for Vehicle Routing Problems as it is currently faster to calculate. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weights")
    public Double[][] weights;

    public MatrixResponse withWeights(Double[][] weights) {
        this.weights = weights;
        return this;
    }
    
    public MatrixResponse(){}
}
