/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BankAccount - Represents a bank account. For more information about 
 * linking a bank account to a Square account, see 
 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
 */
public class BankAccount {
    /**
     * The last few digits of the account number.
     */
    @JsonProperty("account_number_suffix")
    public String accountNumberSuffix;
    public BankAccount withAccountNumberSuffix(String accountNumberSuffix) {
        this.accountNumberSuffix = accountNumberSuffix;
        return this;
    }
    
    /**
     * The financial purpose of the associated bank account.
     */
    @JsonProperty("account_type")
    public String accountType;
    public BankAccount withAccountType(String accountType) {
        this.accountType = accountType;
        return this;
    }
    
    /**
     * Read only. Name of actual financial institution. 
     * For example "Bank of America".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    public String bankName;
    public BankAccount withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     * The ISO 3166 Alpha-2 country code where the bank account is based.
     */
    @JsonProperty("country")
    public String country;
    public BankAccount withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Indicates whether it is possible for Square to send money to this bank account.
     */
    @JsonProperty("creditable")
    public Boolean creditable;
    public BankAccount withCreditable(Boolean creditable) {
        this.creditable = creditable;
        return this;
    }
    
    /**
     * The 3-character ISO 4217 currency code indicating the operating
     * currency of the bank account. For example, the currency code for US dollars
     * is `USD`.
     */
    @JsonProperty("currency")
    public String currency;
    public BankAccount withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Reference identifier that will be displayed to UK bank account owners
     * when collecting direct debit authorization. Only required for UK bank accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_mandate_reference_id")
    public String debitMandateReferenceId;
    public BankAccount withDebitMandateReferenceId(String debitMandateReferenceId) {
        this.debitMandateReferenceId = debitMandateReferenceId;
        return this;
    }
    
    /**
     * Indicates whether it is possible for Square to take money from this 
     * bank account.
     */
    @JsonProperty("debitable")
    public Boolean debitable;
    public BankAccount withDebitable(Boolean debitable) {
        this.debitable = debitable;
        return this;
    }
    
    /**
     * A Square-assigned, unique identifier for the bank account based on the
     * account information. The account fingerprint can be used to compare account
     * entries and determine if the they represent the same real-world bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public BankAccount withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * Name of the account holder. This name must match the name 
     * on the targeted bank account record.
     */
    @JsonProperty("holder_name")
    public String holderName;
    public BankAccount withHolderName(String holderName) {
        this.holderName = holderName;
        return this;
    }
    
    /**
     * The unique, Square-issued identifier for the bank account.
     */
    @JsonProperty("id")
    public String id;
    public BankAccount withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The location to which the bank account belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;
    public BankAccount withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Primary identifier for the bank. For more information, see 
     * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
     */
    @JsonProperty("primary_bank_identification_number")
    public String primaryBankIdentificationNumber;
    public BankAccount withPrimaryBankIdentificationNumber(String primaryBankIdentificationNumber) {
        this.primaryBankIdentificationNumber = primaryBankIdentificationNumber;
        return this;
    }
    
    /**
     * Client-provided identifier for linking the banking account to an entity
     * in a third-party system (for example, a bank account number or a user identifier).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public String referenceId;
    public BankAccount withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * Secondary identifier for the bank. For more information, see 
     * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_bank_identification_number")
    public String secondaryBankIdentificationNumber;
    public BankAccount withSecondaryBankIdentificationNumber(String secondaryBankIdentificationNumber) {
        this.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber;
        return this;
    }
    
    /**
     * Read-only. The current verification status of this BankAccount object.
     */
    @JsonProperty("status")
    public String status;
    public BankAccount withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The current version of the `BankAccount`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public BankAccount withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
