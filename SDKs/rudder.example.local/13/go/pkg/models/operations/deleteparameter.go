// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DeleteParameterPathParams struct {
	// Id of the parameter to manage
	ParameterID string `pathParam:"style=simple,explode=false,name=parameterId"`
}

type DeleteParameterRequest struct {
	PathParams DeleteParameterPathParams
}

// DeleteParameter500ApplicationJSONActionEnum - The id of the action
type DeleteParameter500ApplicationJSONActionEnum string

const (
	DeleteParameter500ApplicationJSONActionEnumDeleteParameter DeleteParameter500ApplicationJSONActionEnum = "deleteParameter"
)

func (e *DeleteParameter500ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deleteParameter":
		*e = DeleteParameter500ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteParameter500ApplicationJSONActionEnum: %s", s)
	}
}

// DeleteParameter500ApplicationJSONResultEnum - Result of the request
type DeleteParameter500ApplicationJSONResultEnum string

const (
	DeleteParameter500ApplicationJSONResultEnumError DeleteParameter500ApplicationJSONResultEnum = "error"
)

func (e *DeleteParameter500ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "error":
		*e = DeleteParameter500ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteParameter500ApplicationJSONResultEnum: %s", s)
	}
}

// DeleteParameter500ApplicationJSON - Non existing parameter
type DeleteParameter500ApplicationJSON struct {
	// The id of the action
	Action       DeleteParameter500ApplicationJSONActionEnum `json:"action"`
	ErrorDetails *string                                     `json:"errorDetails,omitempty"`
	// Id of the parameter
	ID string `json:"id"`
	// Result of the request
	Result DeleteParameter500ApplicationJSONResultEnum `json:"result"`
}

// DeleteParameter200ApplicationJSONActionEnum - The id of the action
type DeleteParameter200ApplicationJSONActionEnum string

const (
	DeleteParameter200ApplicationJSONActionEnumDeleteParameter DeleteParameter200ApplicationJSONActionEnum = "deleteParameter"
)

func (e *DeleteParameter200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deleteParameter":
		*e = DeleteParameter200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteParameter200ApplicationJSONActionEnum: %s", s)
	}
}

// DeleteParameter200ApplicationJSONData - Parameters
type DeleteParameter200ApplicationJSONData struct {
	Parameters []shared.Parameter `json:"parameters"`
}

// DeleteParameter200ApplicationJSONResultEnum - Result of the request
type DeleteParameter200ApplicationJSONResultEnum string

const (
	DeleteParameter200ApplicationJSONResultEnumSuccess DeleteParameter200ApplicationJSONResultEnum = "success"
	DeleteParameter200ApplicationJSONResultEnumError   DeleteParameter200ApplicationJSONResultEnum = "error"
)

func (e *DeleteParameter200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = DeleteParameter200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteParameter200ApplicationJSONResultEnum: %s", s)
	}
}

// DeleteParameter200ApplicationJSON - Settings
type DeleteParameter200ApplicationJSON struct {
	// The id of the action
	Action DeleteParameter200ApplicationJSONActionEnum `json:"action"`
	// Parameters
	Data DeleteParameter200ApplicationJSONData `json:"data"`
	// Id of the parameter
	ID string `json:"id"`
	// Result of the request
	Result DeleteParameter200ApplicationJSONResultEnum `json:"result"`
}

type DeleteParameterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	DeleteParameter200ApplicationJSONObject *DeleteParameter200ApplicationJSON
	// Non existing parameter
	DeleteParameter500ApplicationJSONObject *DeleteParameter500ApplicationJSON
}
