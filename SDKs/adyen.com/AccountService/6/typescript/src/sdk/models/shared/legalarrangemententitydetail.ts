/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BusinessDetails } from "./businessdetails";
import { IndividualDetails } from "./individualdetails";
import { ViasAddress } from "./viasaddress";
import { ViasPhoneNumber } from "./viasphonenumber";
import { Expose, Type } from "class-transformer";

export enum LegalArrangementEntityDetailLegalArrangementMembersEnum {
  Beneficiary = "Beneficiary",
  ControllingPerson = "ControllingPerson",
  Partner = "Partner",
  Protector = "Protector",
  Settlor = "Settlor",
  Shareholder = "Shareholder",
  Trustee = "Trustee",
}

/**
 * The legal entity type.
 *
 * @remarks
 *
 * Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**.
 */
export enum LegalArrangementEntityDetailLegalEntityTypeEnum {
  Business = "Business",
  Individual = "Individual",
  NonProfit = "NonProfit",
  Partnership = "Partnership",
  PublicCompany = "PublicCompany",
}

export class LegalArrangementEntityDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => ViasAddress)
  address?: ViasAddress;

  @SpeakeasyMetadata()
  @Expose({ name: "businessDetails" })
  @Type(() => BusinessDetails)
  businessDetails?: BusinessDetails;

  /**
   * The e-mail address of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
   *
   * @remarks
   * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullPhoneNumber" })
  fullPhoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "individualDetails" })
  @Type(() => IndividualDetails)
  individualDetails?: IndividualDetails;

  /**
   * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity.
   *
   * @remarks
   * Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legalArrangementEntityCode" })
  legalArrangementEntityCode?: string;

  /**
   * Your reference for the legal arrangement entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legalArrangementEntityReference" })
  legalArrangementEntityReference?: string;

  /**
   * An array containing the roles of the entity in the legal arrangement.
   *
   * @remarks
   *
   * The possible values depend on the legal arrangement `type`.
   *
   * - For `type` **Association**: **ControllingPerson** and **Shareholder**.
   *
   * - For `type` **Partnership**: **Partner** and **Shareholder**.
   *
   * - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legalArrangementMembers" })
  legalArrangementMembers?: LegalArrangementEntityDetailLegalArrangementMembersEnum[];

  /**
   * The legal entity type.
   *
   * @remarks
   *
   * Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legalEntityType" })
  legalEntityType?: LegalArrangementEntityDetailLegalEntityTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "phoneNumber" })
  @Type(() => ViasPhoneNumber)
  phoneNumber?: ViasPhoneNumber;

  /**
   * The URL of the website of the contact.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webAddress" })
  webAddress?: string;
}
