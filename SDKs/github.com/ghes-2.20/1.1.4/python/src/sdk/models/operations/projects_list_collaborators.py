"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import simple_user as shared_simple_user
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProjectsListCollaboratorsAffiliationEnum(str, Enum):
    r"""Filters the collaborators by their affiliation. Can be one of:
    \* `outside`: Outside collaborators of a project that are not a member of the project's organization.  
    \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  
    \* `all`: All collaborators the authenticated user can see.
    """
    OUTSIDE = 'outside'
    DIRECT = 'direct'
    ALL = 'all'


@dataclasses.dataclass
class ProjectsListCollaboratorsRequest:
    
    project_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'project_id', 'style': 'simple', 'explode': False }})  
    affiliation: Optional[ProjectsListCollaboratorsAffiliationEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'affiliation', 'style': 'form', 'explode': True }})
    r"""Filters the collaborators by their affiliation. Can be one of:
    \* `outside`: Outside collaborators of a project that are not a member of the project's organization.  
    \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  
    \* `all`: All collaborators the authenticated user can see.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectsListCollaborators415ApplicationJSON:
    r"""Preview header missing"""
    
    documentation_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclasses.dataclass
class ProjectsListCollaboratorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Requires authentication"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    projects_list_collaborators_415_application_json_object: Optional[ProjectsListCollaborators415ApplicationJSON] = dataclasses.field(default=None)
    r"""Preview header missing"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    simple_users: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None)
    r"""Response"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    