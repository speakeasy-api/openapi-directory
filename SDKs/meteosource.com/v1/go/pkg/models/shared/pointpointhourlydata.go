// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type PointPointHourlyData struct {
	// Convective available potential energy.
	// Unit: J/kg
	Cape       *float64                       `json:"cape,omitempty"`
	CloudCover PointPointHourlyCloudCoverData `json:"cloud_cover"`
	// Datetime in YYYY-MM-DDTHH:MM:SS format.
	Date *time.Time `json:"date,omitempty"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	DewPoint *float64 `json:"dew_point,omitempty"`
	// Evaporation of liquid water into water vapor.
	// Unit: mm/h
	Evaporation *float64 `json:"evaporation,omitempty"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	FeelsLike *float64 `json:"feels_like,omitempty"`
	// Relative humidity.
	// Unit: \%
	Humidity *int64 `json:"humidity,omitempty"`
	// Numeric identifier of the weather icon. The following values can appear:
	//
	// * 1 - Not available
	// * 2 - Sunny
	// * 3 - Mostly sunny
	// * 4 - Partly sunny
	// * 5 - Mostly cloudy
	// * 6 - Cloudy
	// * 7 - Overcast
	// * 8 - Overcast with low clouds
	// * 9 - Fog
	// * 10 - Light rain
	// * 11 - Rain
	// * 12 - Possible rain
	// * 13 - Rain shower
	// * 14 - Thunderstorm
	// * 15 - Local thunderstorms
	// * 16 - Light snow
	// * 17 - Snow
	// * 18 - Possible snow
	// * 19 - Snow shower
	// * 20 - Rain and snow
	// * 21 - Possible rain and snow
	// * 22 - Rain and snow
	// * 23 - Freezing rain
	// * 24 - Possible freezing rain
	// * 25 - Hail
	// * 26 - Clear (night)
	// * 27 - Mostly clear (night)
	// * 28 - Partly clear (night)
	// * 29 - Mostly cloudy (night)
	// * 30 - Cloudy (night)
	// * 31 - Overcast with low clouds (night)
	// * 32 - Rain shower (night)
	// * 33 - Local thunderstorms (night)
	// * 34 - Snow shower (night)
	// * 35 - Rain and snow (night)
	// * 36 - Possible freezing rain (night)
	//
	// Unit: weather_ico0_36
	Icon *int64 `json:"icon,omitempty"`
	// Global downward short-wave radiation flux.
	// Unit: W/m2
	Irradiance *float64 `json:"irradiance,omitempty"`
	// Surface lifted index.
	// Unit: K
	Lftx *float64 `json:"lftx,omitempty"`
	// Total column of ozone.
	// Unit: Dobson
	Ozone         *float64                          `json:"ozone,omitempty"`
	Precipitation PointPointHourlyPrecipitationData `json:"precipitation"`
	// Atmospheric pressure at mean sea level.
	// Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
	Pressure    *float64                 `json:"pressure,omitempty"`
	Probability PointPointHourlyProbData `json:"probability"`
	// Snow depth.
	// Units: metric = cm, us = inch, uk = cm, ca = cm
	SnowDepth *float64 `json:"snow_depth,omitempty"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	SoilTemperature *float64 `json:"soil_temperature,omitempty"`
	// Short text summary of the weather, e.g. `Light rain`.
	Summary *string `json:"summary,omitempty"`
	// Sunshine duration since start of previous hour.
	// Unit: s
	SunshineDuration *float64 `json:"sunshine_duration,omitempty"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	SurfaceTemperature *float64 `json:"surface_temperature,omitempty"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	Temperature *float64 `json:"temperature,omitempty"`
	// UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).
	// Unit: uv_index
	UvIndex *float64 `json:"uv_index,omitempty"`
	// Visibility.
	// Units: metric = km, us = mi, uk = mi, ca = km
	Visibility *float64 `json:"visibility,omitempty"`
	// String identifier of the weather icon, e.g. `light_rain`.
	Weather *string                  `json:"weather,omitempty"`
	Wind    PointPointHourlyWindData `json:"wind"`
	// Units: metric = °C, us = °F, uk = °C, ca = °C
	WindChill *float64 `json:"wind_chill,omitempty"`
}
