/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Calendar event type
 */
export enum FetchCalendarEventsFilterTypeEnum {
  PlanCheckIn = "plan-check-in",
  Reminder = "reminder",
  TelephoneCall = "telephone-call",
  OfficeVisit = "office-visit",
  VideoCall = "video-call",
}

/**
 * List of related resources to include in the response
 */
export enum FetchCalendarEventsIncludeEnum {
  Owner = "owner",
}

export class FetchCalendarEventsRequest extends SpeakeasyBase {
  /**
   * Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[attendees]",
  })
  filterAttendees?: string;

  /**
   * If not specified, return all calendar events. If set to `true` return only events marked as completed, if set to `false`, return only events not marked as completed yet.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[completed]",
  })
  filterCompleted?: boolean;

  /**
   * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events completed in November 2017 (America/New_York): `filter[completed_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[completed_at]",
  })
  filterCompletedAt?: string;

  /**
   * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[created_at]",
  })
  filterCreatedAt?: string;

  /**
   * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events ending in November 2017 (America/New_York): `filter[end_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[end_at]",
  })
  filterEndAt?: string;

  /**
   * Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[groups]",
  })
  filterGroups?: string;

  /**
   * Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[organization]",
  })
  filterOrganization?: string;

  /**
   * Patient id to fetch calendar event. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[patient]",
  })
  filterPatient?: string;

  /**
   * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events starting in November 2017 (America/New_York): `filter[start_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[start_at]",
  })
  filterStartAt?: string;

  /**
   * Calendar event type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[type]",
  })
  filterType?: FetchCalendarEventsFilterTypeEnum;

  /**
   * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter[updated_at]",
  })
  filterUpdatedAt?: string;

  /**
   * List of related resources to include in the response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include",
  })
  include?: FetchCalendarEventsIncludeEnum;

  /**
   * Page cursor
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page[cursor]",
  })
  pageCursor?: string;

  /**
   * Page limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page[limit]",
  })
  pageLimit?: number;

  /**
   * Page number
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page[number]",
  })
  pageNumber?: number;

  /**
   * Page size
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page[size]",
  })
  pageSize?: number;
}

export class FetchCalendarEventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  fetchCalendarEventsResponse?: shared.FetchCalendarEventsResponse;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  fetchErrorResponse?: shared.FetchErrorResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
