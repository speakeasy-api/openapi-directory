<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AchTransfer - ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AchTransfer
{
    /**
     * The Account to which the transfer belongs.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The destination account number.
     * 
     * @var string $accountNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountNumber;
    
    /**
     * Additional information that will be sent to the recipient.
     * 
     * @var string $addendum
     */
	#[\JMS\Serializer\Annotation\SerializedName('addendum')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addendum;
    
    /**
     * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferTransferApproval $approval
     */
	#[\JMS\Serializer\Annotation\SerializedName('approval')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AchTransferTransferApproval')]
    public AchTransferTransferApproval $approval;
    
    /**
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferTransferCancellation $cancellation
     */
	#[\JMS\Serializer\Annotation\SerializedName('cancellation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AchTransferTransferCancellation')]
    public AchTransferTransferCancellation $cancellation;
    
    /**
     * The description of the date of the transfer.
     * 
     * @var string $companyDescriptiveDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('company_descriptive_date')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $companyDescriptiveDate;
    
    /**
     * The data you chose to associate with the transfer.
     * 
     * @var string $companyDiscretionaryData
     */
	#[\JMS\Serializer\Annotation\SerializedName('company_discretionary_data')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $companyDiscretionaryData;
    
    /**
     * The description of the transfer you set to be shown to the recipient.
     * 
     * @var string $companyEntryDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('company_entry_description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $companyEntryDescription;
    
    /**
     * The name by which the recipient knows you.
     * 
     * @var string $companyName
     */
	#[\JMS\Serializer\Annotation\SerializedName('company_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $companyName;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferCurrencyEnum $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferCurrencyEnum>')]
    public AchTransferCurrencyEnum $currency;
    
    /**
     * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * 
     * @var \DateTime $effectiveDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('effective_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $effectiveDate;
    
    /**
     * The identifier of the External Account the transfer was made to, if any.
     * 
     * @var string $externalAccountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('external_account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $externalAccountId;
    
    /**
     * The type of the account to which the transfer will be sent.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferFundingEnum $funding
     */
	#[\JMS\Serializer\Annotation\SerializedName('funding')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferFundingEnum>')]
    public AchTransferFundingEnum $funding;
    
    /**
     * The ACH transfer's identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Your identifer for the transfer recipient.
     * 
     * @var string $individualId
     */
	#[\JMS\Serializer\Annotation\SerializedName('individual_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $individualId;
    
    /**
     * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
     * 
     * @var string $individualName
     */
	#[\JMS\Serializer\Annotation\SerializedName('individual_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $individualName;
    
    /**
     * The transfer's network.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferNetworkEnum $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferNetworkEnum>')]
    public AchTransferNetworkEnum $network;
    
    /**
     * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\ACHTransferACHNotificationOfChange> $notificationsOfChange
     */
	#[\JMS\Serializer\Annotation\SerializedName('notifications_of_change')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ACHTransferACHNotificationOfChange>')]
    public array $notificationsOfChange;
    
    /**
     * If your transfer is returned, this will contain details of the return.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferReturn $return
     */
	#[\JMS\Serializer\Annotation\SerializedName('return')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferReturn')]
    public ACHTransferACHTransferReturn $return;
    
    /**
     * The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * 
     * @var string $routingNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('routing_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $routingNumber;
    
    /**
     * The Standard Entry Class (SEC) code to use for the transfer.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferStandardEntryClassCodeEnum $standardEntryClassCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('standard_entry_class_code')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferStandardEntryClassCodeEnum>')]
    public AchTransferStandardEntryClassCodeEnum $standardEntryClassCode;
    
    /**
     * The descriptor that will show on the recipient's bank statement.
     * 
     * @var string $statementDescriptor
     */
	#[\JMS\Serializer\Annotation\SerializedName('statement_descriptor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $statementDescriptor;
    
    /**
     * The lifecycle status of the transfer.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferStatusEnum>')]
    public AchTransferStatusEnum $status;
    
    /**
     * After the transfer is submitted to FedACH, this will contain supplemental details.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferSubmission $submission
     */
	#[\JMS\Serializer\Annotation\SerializedName('submission')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferSubmission')]
    public ACHTransferACHTransferSubmission $submission;
    
    /**
     * The ID for the transaction funding the transfer.
     * 
     * @var string $transactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $transactionId;
    
    /**
     * A constant representing the object's type. For this resource it will always be `ach_transfer`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AchTransferTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AchTransferTypeEnum>')]
    public AchTransferTypeEnum $type;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->accountNumber = "";
		$this->addendum = "";
		$this->amount = 0;
		$this->approval = new \OpenAPI\OpenAPI\Models\Shared\AchTransferTransferApproval();
		$this->cancellation = new \OpenAPI\OpenAPI\Models\Shared\AchTransferTransferCancellation();
		$this->companyDescriptiveDate = "";
		$this->companyDiscretionaryData = "";
		$this->companyEntryDescription = "";
		$this->companyName = "";
		$this->createdAt = new \DateTime();
		$this->currency = \OpenAPI\OpenAPI\Models\Shared\AchTransferCurrencyEnum::CAD;
		$this->effectiveDate = new \DateTime();
		$this->externalAccountId = "";
		$this->funding = \OpenAPI\OpenAPI\Models\Shared\AchTransferFundingEnum::CHECKING;
		$this->id = "";
		$this->individualId = "";
		$this->individualName = "";
		$this->network = \OpenAPI\OpenAPI\Models\Shared\AchTransferNetworkEnum::ACH;
		$this->notificationsOfChange = [];
		$this->return = new \OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferReturn();
		$this->routingNumber = "";
		$this->standardEntryClassCode = \OpenAPI\OpenAPI\Models\Shared\AchTransferStandardEntryClassCodeEnum::CORPORATE_CREDIT_OR_DEBIT;
		$this->statementDescriptor = "";
		$this->status = \OpenAPI\OpenAPI\Models\Shared\AchTransferStatusEnum::PENDING_APPROVAL;
		$this->submission = new \OpenAPI\OpenAPI\Models\Shared\ACHTransferACHTransferSubmission();
		$this->transactionId = "";
		$this->type = \OpenAPI\OpenAPI\Models\Shared\AchTransferTypeEnum::ACH_TRANSFER;
	}
}
