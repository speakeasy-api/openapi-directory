/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
 */
export enum UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum {
  Balanced = "balanced",
  Connectivity = "connectivity",
  Security = "security",
}

/**
 * Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
 */
export enum UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum {
  Detection = "detection",
  Disabled = "disabled",
  Prevention = "prevention",
}

/**
 * Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
 */
export class UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks extends SpeakeasyBase {
  /**
   * list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "excludedCidr" })
  excludedCidr?: string[];

  /**
   * list of IP addresses or subnets being protected (required if 'useDefault' is false)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includedCidr" })
  includedCidr?: string[];

  /**
   * true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDefault" })
  useDefault?: boolean;
}

export class UpdateNetworkSecurityIntrusionSettingsRequestBody extends SpeakeasyBase {
  /**
   * Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idsRulesets" })
  idsRulesets?: UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum;

  /**
   * Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum;

  /**
   * Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protectedNetworks" })
  @Type(
    () => UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks
  )
  protectedNetworks?: UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks;
}

export class UpdateNetworkSecurityIntrusionSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkSecurityIntrusionSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkSecurityIntrusionSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkSecurityIntrusionSettings200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
