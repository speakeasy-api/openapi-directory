"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import networkprotocol_enum as shared_networkprotocol_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PortInfo:
    r"""Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol."""
    
    cidr_list_aliases: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidrListAliases'), 'exclude': lambda f: f is None }})  
    cidrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidrs'), 'exclude': lambda f: f is None }})  
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromPort'), 'exclude': lambda f: f is None }})  
    ipv6_cidrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6Cidrs'), 'exclude': lambda f: f is None }})  
    protocol: Optional[shared_networkprotocol_enum.NetworkProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toPort'), 'exclude': lambda f: f is None }})  
    