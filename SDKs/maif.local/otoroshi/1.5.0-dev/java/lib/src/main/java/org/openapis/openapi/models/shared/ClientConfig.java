/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ClientConfig - The configuration of the circuit breaker for a service descriptor
 */
public class ClientConfig {
    /**
     * Specify the factor to multiply the delay for each retry
     */
    @JsonProperty("backoffFactor")
    public Integer backoffFactor;

    public ClientConfig withBackoffFactor(Integer backoffFactor) {
        this.backoffFactor = backoffFactor;
        return this;
    }
    
    /**
     * Specify how long each call should last at most in milliseconds
     */
    @JsonProperty("callTimeout")
    public Integer callTimeout;

    public ClientConfig withCallTimeout(Integer callTimeout) {
        this.callTimeout = callTimeout;
        return this;
    }
    
    /**
     * Specify how long the global call (with retries) should last at most in milliseconds
     */
    @JsonProperty("globalTimeout")
    public Integer globalTimeout;

    public ClientConfig withGlobalTimeout(Integer globalTimeout) {
        this.globalTimeout = globalTimeout;
        return this;
    }
    
    /**
     * Specify how many errors can pass before opening the circuit breaker
     */
    @JsonProperty("maxErrors")
    public Integer maxErrors;

    public ClientConfig withMaxErrors(Integer maxErrors) {
        this.maxErrors = maxErrors;
        return this;
    }
    
    /**
     * Specify how many times the client will try to fetch the result of the request after an error before giving up.
     */
    @JsonProperty("retries")
    public Integer retries;

    public ClientConfig withRetries(Integer retries) {
        this.retries = retries;
        return this;
    }
    
    /**
     * Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor
     */
    @JsonProperty("retryInitialDelay")
    public Integer retryInitialDelay;

    public ClientConfig withRetryInitialDelay(Integer retryInitialDelay) {
        this.retryInitialDelay = retryInitialDelay;
        return this;
    }
    
    /**
     * Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted
     */
    @JsonProperty("sampleInterval")
    public Integer sampleInterval;

    public ClientConfig withSampleInterval(Integer sampleInterval) {
        this.sampleInterval = sampleInterval;
        return this;
    }
    
    /**
     * Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !
     */
    @JsonProperty("useCircuitBreaker")
    public Boolean useCircuitBreaker;

    public ClientConfig withUseCircuitBreaker(Boolean useCircuitBreaker) {
        this.useCircuitBreaker = useCircuitBreaker;
        return this;
    }
    
    public ClientConfig(@JsonProperty("backoffFactor") Integer backoffFactor, @JsonProperty("callTimeout") Integer callTimeout, @JsonProperty("globalTimeout") Integer globalTimeout, @JsonProperty("maxErrors") Integer maxErrors, @JsonProperty("retries") Integer retries, @JsonProperty("retryInitialDelay") Integer retryInitialDelay, @JsonProperty("sampleInterval") Integer sampleInterval, @JsonProperty("useCircuitBreaker") Boolean useCircuitBreaker) {
        this.backoffFactor = backoffFactor;
        this.callTimeout = callTimeout;
        this.globalTimeout = globalTimeout;
        this.maxErrors = maxErrors;
        this.retries = retries;
        this.retryInitialDelay = retryInitialDelay;
        this.sampleInterval = sampleInterval;
        this.useCircuitBreaker = useCircuitBreaker;
  }
}
