"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenRequest:
    
    grant_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_type') }, 'multipart_form': { 'field_name': 'grant_type' }})
    r"""OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'."""  
    scope: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope') }, 'multipart_form': { 'field_name': 'scope' }})
    r"""Authorization scope. Use 'privileged' for private endpoints."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'password' }})
    r"""MW Account password (to be used in password grant type)"""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'refresh_token' }})
    r"""Refresh token value for refresh token flow."""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'user_id' }})
    r"""Value for user_id grant type flow."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'username' }})
    r"""MW Account email (to be used in password grant type)"""  
    