// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// IdentitytoolkitRelyingpartyUploadAccountRequest - Request to upload user account in batch.
type IdentitytoolkitRelyingpartyUploadAccountRequest struct {
	// Whether allow overwrite existing account when user local_id exists.
	AllowOverwrite *bool `json:"allowOverwrite,omitempty"`
	BlockSize      *int  `json:"blockSize,omitempty"`
	// The following 4 fields are for standard scrypt algorithm.
	CPUMemCost *int `json:"cpuMemCost,omitempty"`
	// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
	DelegatedProjectNumber *string `json:"delegatedProjectNumber,omitempty"`
	DkLen                  *int    `json:"dkLen,omitempty"`
	// The password hash algorithm.
	HashAlgorithm *string `json:"hashAlgorithm,omitempty"`
	// Memory cost for hash calculation. Used by scrypt similar algorithms.
	MemoryCost      *int `json:"memoryCost,omitempty"`
	Parallelization *int `json:"parallelization,omitempty"`
	// Rounds for hash calculation. Used by scrypt and similar algorithms.
	Rounds *int `json:"rounds,omitempty"`
	// The salt separator.
	SaltSeparator *string `json:"saltSeparator,omitempty"`
	// If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
	SanityCheck *bool `json:"sanityCheck,omitempty"`
	// The key for to hash the password.
	SignerKey *string `json:"signerKey,omitempty"`
	// Specify which project (field value is actually project id) to operate. Only used when provided credential.
	TargetProjectID *string `json:"targetProjectId,omitempty"`
	// The account info to be stored.
	Users []UserInfo `json:"users,omitempty"`
}
