"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Airspace:
    r"""#### Information is available for the following types of airspace:
    * **Controlled Airspace (CAS):** Class B, C, D, E2 airspace names, boundaries, altitude information, and LAANC availability
    * **Special Use Airspace (SUA):** Names, boundaries, and altitude information for the following types of Special Use Airspace:
        - Alert Areas (AA)
        - Military Operations Areas (MOA)
        - National Security Areas (NSA)
        - Prohibited Areas (PA)
        - Restricted Areas (RA)
        - Warning Areas (WA)
    * **Miscellaneous Activity Areas (MAA):** Names and boundary information for the following types of Miscellaneous Activity Areas:
        - Aerobatic Practice Areas (AEROBATIC PRACTICE)
        - Glider Operations Areas (GLIDER)
        - Hang Glider Operations Areas (HANG GLIDER)
        - Parachute Jump Areas (PARACHUTE JUMP AREA)
        - Space Launch Activity Areas (SPACE LAUNCH ACTIVITY)
    * **Military Training Routes (MTR):** Names, route geometry, usage times, and corridor width information for both VFR and IFR Military Training Routes
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def asp_by_distance_us_v1_airspace_distance_query_post(self, request: operations.AspByDistanceUsV1AirspaceDistanceQueryPostRequest) -> operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse:
        r"""Retrieve all requested types of airspace located within given distance of location.
        Retrieve selected types of airspace existing within given distance from a point. Request body parameters are:
        * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
        * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
        * distance:  distance in meters (max allowed value is 25000)
        * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
        
        Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
        * CAS (Controlled Airspace)
            - *name*
            - *cas_class*: B, C, D, or E2
            - *floor*: integer value in ft MSL
            - *ceiling*: integer value in ft MSL
            - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
        * SUA (Special Use Airspace)
            - *name*
            - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
            - *floor*: lower limit of the airspace
            - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
            - *ceiling*: upper limit of the airspace
            - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
        * MAA (Miscellaneous Activity Area)
            - *name*
            - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
            - *use_times*: textual description of days/times when activity in the area should be expected
        * MTR (Military Training Route)
            - *name*
            - *use_times*: textual description of days/times when MTR is active/hot
            - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
            - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/airspace/distance-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "airspace_by_distance", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AirspaceDistanceResponse])
                res.airspace_distance_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def asp_by_poly_us_v1_airspace_polygon_query_post(self, request: operations.AspByPolyUsV1AirspacePolygonQueryPostRequest) -> operations.AspByPolyUsV1AirspacePolygonQueryPostResponse:
        r"""Retrieve all requested types of airspace located within given GeoJSON Polygon.
        Retrieve selected types of airspace located within given area. Request body parameters are:
        * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
        * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
        
        Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
        * CAS (Controlled Airspace)
            - *name*
            - *cas_class*: B, C, D, or E2
            - *floor*: integer value in ft MSL
            - *ceiling*: integer value in ft MSL
            - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
        * SUA (Special Use Airspace)
            - *name*
            - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
            - *floor*: lower limit of the airspace
            - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
            - *ceiling*: upper limit of the airspace
            - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
        * MAA (Miscellaneous Activity Area)
            - *name*
            - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
            - *use_times*: textual description of days/times when activity in the area should be expected
        * MTR (Military Training Route)
            - *name*
            - *use_times*: textual description of days/times when MTR is active/hot
            - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
            - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/airspace/polygon-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "airspace_by_polygon", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AspByPolyUsV1AirspacePolygonQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AirspacePolyResponse])
                res.airspace_poly_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def asp_by_route_us_v1_airspace_route_query_post(self, request: operations.AspByRouteUsV1AirspaceRouteQueryPostRequest) -> operations.AspByRouteUsV1AirspaceRouteQueryPostResponse:
        r"""Retrieve all requested types of airspace traversed by route.
        Retrieve selected types of airspace traversed by route. Request body parameters are:
        * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
        * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
        
        Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
        * CAS (Controlled Airspace)
            - *name*
            - *cas_class*: B, C, D, or E2
            - *floor*: integer value in ft MSL
            - *ceiling*: integer value in ft MSL
            - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
        * SUA (Special Use Airspace)
            - *name*
            - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
            - *floor*: lower limit of the airspace
            - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
            - *ceiling*: upper limit of the airspace
            - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
            - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
        * MAA (Miscellaneous Activity Area)
            - *name*
            - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
            - *use_times*: textual description of days/times when activity in the area should be expected
        * MTR (Military Training Route)
            - *name*
            - *use_times*: textual description of days/times when MTR is active/hot
            - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
            - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/airspace/route-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "airspace_by_route", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AspByRouteUsV1AirspaceRouteQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AirspaceRouteResponse])
                res.airspace_route_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    