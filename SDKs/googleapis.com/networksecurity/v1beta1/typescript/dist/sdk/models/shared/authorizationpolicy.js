"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationPolicyInput = exports.AuthorizationPolicy = exports.AuthorizationPolicyActionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var rule_1 = require("./rule");
var class_transformer_1 = require("class-transformer");
/**
 * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
 */
var AuthorizationPolicyActionEnum;
(function (AuthorizationPolicyActionEnum) {
    AuthorizationPolicyActionEnum["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    AuthorizationPolicyActionEnum["Allow"] = "ALLOW";
    AuthorizationPolicyActionEnum["Deny"] = "DENY";
})(AuthorizationPolicyActionEnum = exports.AuthorizationPolicyActionEnum || (exports.AuthorizationPolicyActionEnum = {}));
/**
 * AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
 */
var AuthorizationPolicy = /** @class */ (function (_super) {
    __extends(AuthorizationPolicy, _super);
    function AuthorizationPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "action" }),
        __metadata("design:type", String)
    ], AuthorizationPolicy.prototype, "action", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createTime" }),
        __metadata("design:type", String)
    ], AuthorizationPolicy.prototype, "createTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], AuthorizationPolicy.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], AuthorizationPolicy.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AuthorizationPolicy.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: rule_1.Rule }),
        (0, class_transformer_1.Expose)({ name: "rules" }),
        (0, class_transformer_1.Type)(function () { return rule_1.Rule; }),
        __metadata("design:type", Array)
    ], AuthorizationPolicy.prototype, "rules", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updateTime" }),
        __metadata("design:type", String)
    ], AuthorizationPolicy.prototype, "updateTime", void 0);
    return AuthorizationPolicy;
}(utils_1.SpeakeasyBase));
exports.AuthorizationPolicy = AuthorizationPolicy;
/**
 * AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
 */
var AuthorizationPolicyInput = /** @class */ (function (_super) {
    __extends(AuthorizationPolicyInput, _super);
    function AuthorizationPolicyInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "action" }),
        __metadata("design:type", String)
    ], AuthorizationPolicyInput.prototype, "action", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], AuthorizationPolicyInput.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], AuthorizationPolicyInput.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AuthorizationPolicyInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: rule_1.Rule }),
        (0, class_transformer_1.Expose)({ name: "rules" }),
        (0, class_transformer_1.Type)(function () { return rule_1.Rule; }),
        __metadata("design:type", Array)
    ], AuthorizationPolicyInput.prototype, "rules", void 0);
    return AuthorizationPolicyInput;
}(utils_1.SpeakeasyBase));
exports.AuthorizationPolicyInput = AuthorizationPolicyInput;
