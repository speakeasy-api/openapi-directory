// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateUploadRequestBodyTypeEnum string

const (
	CreateUploadRequestBodyTypeEnumAvatar            CreateUploadRequestBodyTypeEnum = "avatar"
	CreateUploadRequestBodyTypeEnumProfileBackground CreateUploadRequestBodyTypeEnum = "profile_background"
	CreateUploadRequestBodyTypeEnumCardBackground    CreateUploadRequestBodyTypeEnum = "card_background"
	CreateUploadRequestBodyTypeEnumCustomEmoji       CreateUploadRequestBodyTypeEnum = "custom_emoji"
	CreateUploadRequestBodyTypeEnumComposer          CreateUploadRequestBodyTypeEnum = "composer"
)

func (e *CreateUploadRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "avatar":
		fallthrough
	case "profile_background":
		fallthrough
	case "card_background":
		fallthrough
	case "custom_emoji":
		fallthrough
	case "composer":
		*e = CreateUploadRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUploadRequestBodyTypeEnum: %s", s)
	}
}

type CreateUploadRequestBody struct {
	File interface{} `multipartForm:"name=file"`
	// Use this flag to return an id and url
	Synchronous *bool                           `multipartForm:"name=synchronous"`
	Type        CreateUploadRequestBodyTypeEnum `multipartForm:"name=type"`
	// required if uploading an avatar
	UserID *int64 `multipartForm:"name=user_id"`
}

// CreateUpload200ApplicationJSON - file uploaded
type CreateUpload200ApplicationJSON struct {
	DominantColor    *string `json:"dominant_color,omitempty"`
	Extension        string  `json:"extension"`
	Filesize         int64   `json:"filesize"`
	Height           int64   `json:"height"`
	HumanFilesize    string  `json:"human_filesize"`
	ID               int64   `json:"id"`
	OriginalFilename string  `json:"original_filename"`
	RetainHours      string  `json:"retain_hours"`
	ShortPath        string  `json:"short_path"`
	ShortURL         string  `json:"short_url"`
	ThumbnailHeight  int64   `json:"thumbnail_height"`
	ThumbnailWidth   int64   `json:"thumbnail_width"`
	URL              string  `json:"url"`
	Width            int64   `json:"width"`
}

type CreateUploadResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// file uploaded
	CreateUpload200ApplicationJSONObject *CreateUpload200ApplicationJSON
}
