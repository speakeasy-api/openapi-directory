"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheck = exports.HealthCheckTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var grpchealthcheck_1 = require("./grpchealthcheck");
var healthchecklogconfig_1 = require("./healthchecklogconfig");
var http2healthcheck_1 = require("./http2healthcheck");
var httphealthcheck_1 = require("./httphealthcheck");
var httpshealthcheck_1 = require("./httpshealthcheck");
var sslhealthcheck_1 = require("./sslhealthcheck");
var tcphealthcheck_1 = require("./tcphealthcheck");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
 */
var HealthCheckTypeEnum;
(function (HealthCheckTypeEnum) {
    HealthCheckTypeEnum["Grpc"] = "GRPC";
    HealthCheckTypeEnum["Http"] = "HTTP";
    HealthCheckTypeEnum["Http2"] = "HTTP2";
    HealthCheckTypeEnum["Https"] = "HTTPS";
    HealthCheckTypeEnum["Invalid"] = "INVALID";
    HealthCheckTypeEnum["Ssl"] = "SSL";
    HealthCheckTypeEnum["Tcp"] = "TCP";
})(HealthCheckTypeEnum = exports.HealthCheckTypeEnum || (exports.HealthCheckTypeEnum = {}));
/**
 * Represents a Health Check resource. Google Compute Engine has two Health Check resources: * [Global](/compute/docs/reference/rest/beta/healthChecks) * [Regional](/compute/docs/reference/rest/beta/regionHealthChecks) Internal HTTP(S) load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Traffic Director must use global health checks (`compute.v1.HealthChecks`). Internal TCP/UDP load balancers can use either regional or global health checks (`compute.v1.regionHealthChecks` or `compute.v1.HealthChecks`). External HTTP(S), TCP proxy, and SSL proxy load balancers as well as managed instance group auto-healing must use global health checks (`compute.v1.HealthChecks`). Backend service-based network load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Target pool-based network load balancers must use legacy HTTP health checks (`compute.v1.httpHealthChecks`). For more information, see Health checks overview.
 */
var HealthCheck = /** @class */ (function (_super) {
    __extends(HealthCheck, _super);
    function HealthCheck() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "checkIntervalSec" }),
        __metadata("design:type", Number)
    ], HealthCheck.prototype, "checkIntervalSec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "grpcHealthCheck" }),
        (0, class_transformer_1.Type)(function () { return grpchealthcheck_1.GRPCHealthCheck; }),
        __metadata("design:type", grpchealthcheck_1.GRPCHealthCheck)
    ], HealthCheck.prototype, "grpcHealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "healthyThreshold" }),
        __metadata("design:type", Number)
    ], HealthCheck.prototype, "healthyThreshold", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "http2HealthCheck" }),
        (0, class_transformer_1.Type)(function () { return http2healthcheck_1.Http2HealthCheck; }),
        __metadata("design:type", http2healthcheck_1.Http2HealthCheck)
    ], HealthCheck.prototype, "http2HealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpHealthCheck" }),
        (0, class_transformer_1.Type)(function () { return httphealthcheck_1.HTTPHealthCheck; }),
        __metadata("design:type", httphealthcheck_1.HTTPHealthCheck)
    ], HealthCheck.prototype, "httpHealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpsHealthCheck" }),
        (0, class_transformer_1.Type)(function () { return httpshealthcheck_1.HTTPSHealthCheck; }),
        __metadata("design:type", httpshealthcheck_1.HTTPSHealthCheck)
    ], HealthCheck.prototype, "httpsHealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "logConfig" }),
        (0, class_transformer_1.Type)(function () { return healthchecklogconfig_1.HealthCheckLogConfig; }),
        __metadata("design:type", healthchecklogconfig_1.HealthCheckLogConfig)
    ], HealthCheck.prototype, "logConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sslHealthCheck" }),
        (0, class_transformer_1.Type)(function () { return sslhealthcheck_1.SSLHealthCheck; }),
        __metadata("design:type", sslhealthcheck_1.SSLHealthCheck)
    ], HealthCheck.prototype, "sslHealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tcpHealthCheck" }),
        (0, class_transformer_1.Type)(function () { return tcphealthcheck_1.TCPHealthCheck; }),
        __metadata("design:type", tcphealthcheck_1.TCPHealthCheck)
    ], HealthCheck.prototype, "tcpHealthCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeoutSec" }),
        __metadata("design:type", Number)
    ], HealthCheck.prototype, "timeoutSec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], HealthCheck.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unhealthyThreshold" }),
        __metadata("design:type", Number)
    ], HealthCheck.prototype, "unhealthyThreshold", void 0);
    return HealthCheck;
}(utils_1.SpeakeasyBase));
exports.HealthCheck = HealthCheck;
