"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class APIV2010AccountSipSipDomainVoiceFallbackMethodEnum(str, Enum):
    r"""The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class APIV2010AccountSipSipDomainVoiceMethodEnum(str, Enum):
    r"""The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class APIV2010AccountSipSipDomainVoiceStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we use to call `voice_status_callback_url`. Either `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIV2010AccountSipSipDomain:
    r"""Created"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource."""  
    api_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_version'), 'exclude': lambda f: f is None }})
    r"""The API version used to process the call."""  
    auth_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    r"""The types of authentication you have mapped to your domain. Can be: `IP_ACL` and `CREDENTIAL_LIST`. If you have both defined for your domain, both will be returned in a comma delimited string. If `auth_type` is not defined, the domain will not be able to receive any traffic."""  
    byoc_trunk_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byoc_trunk_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with."""  
    date_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format."""  
    date_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_updated'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format."""  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_name'), 'exclude': lambda f: f is None }})
    r"""The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\"-\\" and must end with `sip.twilio.com`."""  
    emergency_caller_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergency_caller_sid'), 'exclude': lambda f: f is None }})
    r"""Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call."""  
    emergency_calling_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergency_calling_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendly_name'), 'exclude': lambda f: f is None }})
    r"""The string that you assigned to describe the resource."""  
    secure: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secure'), 'exclude': lambda f: f is None }})
    r"""Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain."""  
    sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sid'), 'exclude': lambda f: f is None }})
    r"""The unique string that that we created to identify the SipDomain resource."""  
    sip_registration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sip_registration'), 'exclude': lambda f: f is None }})
    r"""Whether to allow SIP Endpoints to register with the domain to receive calls."""  
    subresource_uris: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subresource_uris'), 'exclude': lambda f: f is None }})
    r"""A list of mapping resources associated with the SIP Domain resource identified by their relative URIs."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The URI of the resource, relative to `https://api.twilio.com`."""  
    voice_fallback_method: Optional[APIV2010AccountSipSipDomainVoiceFallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_fallback_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`."""  
    voice_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_fallback_url'), 'exclude': lambda f: f is None }})
    r"""The URL that we call when an error occurs while retrieving or executing the TwiML requested from `voice_url`."""  
    voice_method: Optional[APIV2010AccountSipSipDomainVoiceMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`."""  
    voice_status_callback_method: Optional[APIV2010AccountSipSipDomainVoiceStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_status_callback_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `voice_status_callback_url`. Either `GET` or `POST`."""  
    voice_status_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_status_callback_url'), 'exclude': lambda f: f is None }})
    r"""The URL that we call to pass status parameters (such as call ended) to your application."""  
    voice_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_url'), 'exclude': lambda f: f is None }})
    r"""The URL we call using the `voice_method` when the domain receives a call."""  
    