<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MerakiAuthUsers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * 
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse
     */
	public function createNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkMerakiAuthUser201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUser201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deauthorize a user
     * 
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse
     */
	public function deleteNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * 
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse
     */
	public function getNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMerakiAuthUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * 
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse
     */
	public function getNetworkMerakiAuthUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMerakiAuthUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * 
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse
     */
	public function updateNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkMerakiAuthUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}