/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CurrencyEnum } from "./currencyenum";
import { Expose, Transform, Type } from "class-transformer";

export class ModifierGroupModifiers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alternate_name" })
  alternateName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available?: boolean;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "price_amount" })
  priceAmount?: number;
}

export enum ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum {
  Single = "single",
  Multiple = "multiple",
}

export class ModifierGroupInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alternate_name" })
  alternateName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maximum_allowed" })
  maximumAllowed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "minimum_required" })
  minimumRequired?: number;

  @SpeakeasyMetadata({ elemType: ModifierGroupModifiers })
  @Expose({ name: "modifiers" })
  @Type(() => ModifierGroupModifiers)
  modifiers?: ModifierGroupModifiers[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "present_at_all_locations" })
  presentAtAllLocations?: boolean;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "selection_type" })
  selectionType?: ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum;
}

export class ModifierGroup extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alternate_name" })
  alternateName?: string;

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "maximum_allowed" })
  maximumAllowed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "minimum_required" })
  minimumRequired?: number;

  @SpeakeasyMetadata({ elemType: ModifierGroupModifiers })
  @Expose({ name: "modifiers" })
  @Type(() => ModifierGroupModifiers)
  modifiers?: ModifierGroupModifiers[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "present_at_all_locations" })
  presentAtAllLocations?: boolean;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "selection_type" })
  selectionType?: ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;
}
