<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DomainVerificationDetail - Retrieve detailed information for supplied domain, including domain verification details and Certificate Authority Authorization (CAA) verification details.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DomainVerificationDetail
{
    /**
     * Contains information about the last Certificate Authority Authorization (CAA) Lookup details for the specified domain.
     * 
     * 
     * In order for a domain to be eligible to be included in the certificate, the entire domain hierarchy must be scanned for DNS CAA records, as outlined by RFC 6844.
     * 
     * The absence of any CAA records found in the domain hierarchy indicates that the domain may be included in the certificate. Alternatively, if CAA records are found when scanning the domain hierarchy, the domain may be included in the certificate as long as `godaddy.com` or `starfieldtech.com` is found in the DNS record value. However, if CAA records are found, yet `godaddy.com` or `starfieldtech.com` is not found in any CAA record's value, then we must drop the domain from the certificate request.
     * 
     * In the case where there are repeated DNS errors when scanning the domain hierarchy for CAA records, thus ending in an unsuccessful scan, then the domain can still be included in the certificate provided the primary domain is not setup with DNSSEC. Conversely, if DNSSEC is found to be setup on the primary domain when scanning following repeated CAA failures, the domain must be dropped from the certificate request. Finally, if DNS errors persist to the point where a successful DNSSEC query could not be obtained, then the domain must be dropped from the certificate request.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailCertificateAuthorityAuthorization $certificateAuthorityAuthorization
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateAuthorityAuthorization')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailCertificateAuthorityAuthorization')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DomainVerificationDetailCertificateAuthorityAuthorization $certificateAuthorityAuthorization = null;
    
    /**
     * Timestamp indicating when the domain verification process was started
     * 
     * @var string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('createdAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $createdAt;
    
    /**
     * DCE verification type token (if DCE verification type).
     * 
     * @var ?string $dceToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('dceToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dceToken = null;
    
    /**
     * Domain name
     * 
     * @var string $domain
     */
	#[\JMS\Serializer\Annotation\SerializedName('domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $domain;
    
    /**
     * A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request
     * 
     * @var int $domainEntityId
     */
	#[\JMS\Serializer\Annotation\SerializedName('domainEntityId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $domainEntityId;
    
    /**
     * Timestamp indicating when the domain verification process was last updated
     * 
     * @var string $modifiedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $modifiedAt;
    
    /**
     * Domain verification status: 
     * 
     *   * `AWAITING` - Verification pending customer input
     *   * `INVALID` - SAN connected to a cancelled request
     *   * `COMPLETED` - Verification completed
     *   * `FAILED_VERIFICATION` - Verification failed
     *   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review
     *   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified
     *   * `DROPPED` - SAN dropped from request
     *   * `REVOKED_CERT` - Certificate revoked
     *   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check
     *   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailStatusEnum>')]
    public DomainVerificationDetailStatusEnum $status;
    
    /**
     * Domain verification type: 
     * 
     *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>
     *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>
     *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>
     *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>
     *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>
     *   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email
     *   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification
     *   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value
     *   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification
     *   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep
     *   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification
     *   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain
     *   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check
     *   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods
     *   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check
     *   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification
     *   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailTypeEnum>')]
    public DomainVerificationDetailTypeEnum $type;
    
    /**
     * Type of domain name used for domain verification
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailUsageEnum $usage
     */
	#[\JMS\Serializer\Annotation\SerializedName('usage')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailUsageEnum>')]
    public DomainVerificationDetailUsageEnum $usage;
    
	public function __construct()
	{
		$this->certificateAuthorityAuthorization = null;
		$this->createdAt = "";
		$this->dceToken = null;
		$this->domain = "";
		$this->domainEntityId = 0;
		$this->modifiedAt = "";
		$this->status = \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailStatusEnum::COMPLETED;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailTypeEnum::DOMAIN_CONTROL_EMAIL;
		$this->usage = \OpenAPI\OpenAPI\Models\Shared\DomainVerificationDetailUsageEnum::COMMON_NAME;
	}
}
