/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EcadAddress - The ECAD contains additional data for each ECAF address.
 */
public class EcadAddress {
    /**
     * Address Point ID
     */
    @JsonProperty("address_point_id")
    public String addressPointId;
    public EcadAddress withAddressPointId(String addressPointId) {
        this.addressPointId = addressPointId;
        return this;
    }
    
    /**
     * The address reference is the An Post GeoDirectory address reference identifier used by the Universal Service Provider.
     */
    @JsonProperty("address_reference")
    public String addressReference;
    public EcadAddress withAddressReference(String addressReference) {
        this.addressReference = addressReference;
        return this;
    }
    
    /**
     * Addresses points can assume one of the following values:
     * 
     * - Residential Address Point. This type of address point has one residential addresses associated with it.
     * - Non-Residential Address Point. This type of address point has one or more non-residential address (business, club or other organisation) associated with it.
     * - Mixed Address Point. This is a special case where the residential and non residential addresses in the building are essentially the same address. The typical example is a farm house on an active farm. It is important to note that this is a special case. In general a building with both residential and non-residential addresses (e.g. an apartment over a shop) will receive two address points, one commercial and one residential, and hence two Eircodes.
     * 
     * Buildings can contain multiple address points of type Residential and/or Non-Residential.
     */
    @JsonProperty("address_type")
    public String addressType;
    public EcadAddress withAddressType(String addressType) {
        this.addressType = addressType;
        return this;
    }
    
    /**
     * The building type can assume one of the following values:
     * 
     * - Single Occupancy Residential Building. This type of building contains one residential address.
     * - Multi Occupancy Residential Building. This type of building contains multiple residential addresses.
     * - Single Occupancy Non-Residential Building. This type of building contains one non-residential address (business, club or other organisation).
     * - Multi Occupancy Non-Residential Building. This type of building contains multiple non-residential addresses (business, club or other organisation).
     * - Multi Occupancy Mixed Use Building. This type of building contains multiple residential and non- residential addresses.
     * 
     * Buildings can also have a more specific address types such as a Hospital, School, Shopping Centre, etc.
     */
    @JsonProperty("building_address_type")
    public String buildingAddressType;
    public EcadAddress withBuildingAddressType(String buildingAddressType) {
        this.buildingAddressType = buildingAddressType;
        return this;
    }
    
    /**
     * A building group is a collection of buildings with a collective name, located on or near the same thoroughfare.
     */
    @JsonProperty("building_group")
    public String buildingGroup;
    public EcadAddress withBuildingGroup(String buildingGroup) {
        this.buildingGroup = buildingGroup;
        return this;
    }
    
    /**
     * The building group type can be:
     * 
     * - Residential Building Group. This type of building group contains buildings with residential addresses only.
     * - Non-Residential Building Group This type of building group contains buildings with non-residential addresses (business, club or other organisation) only.
     * - Mixed Building Group. This type of building group contains buildings with residential and non-residential addresses. Can also have a more specific address type such as a Hospital, School, Shopping Centre, etc.
     * 
     * Building groups can also have a more specific address type such as a Hospital, School, Shopping Centre, etc.
     */
    @JsonProperty("building_group_address_type")
    public String buildingGroupAddressType;
    public EcadAddress withBuildingGroupAddressType(String buildingGroupAddressType) {
        this.buildingGroupAddressType = buildingGroupAddressType;
        return this;
    }
    
    /**
     * Building Group ID
     */
    @JsonProperty("building_group_id")
    public String buildingGroupId;
    public EcadAddress withBuildingGroupId(String buildingGroupId) {
        this.buildingGroupId = buildingGroupId;
        return this;
    }
    
    /**
     * Building ID
     */
    @JsonProperty("building_id")
    public String buildingId;
    public EcadAddress withBuildingId(String buildingId) {
        this.buildingId = buildingId;
        return this;
    }
    
    /**
     * The name given to the building. Prepended by sub building, if any, when the sub building does not appear on a line to itself. The building name is omitted if it is the same as either the Organisation or Building Group.
     */
    @JsonProperty("building_name")
    public String buildingName;
    public EcadAddress withBuildingName(String buildingName) {
        this.buildingName = buildingName;
        return this;
    }
    
    /**
     * A number associated with the whole building. The building number may have a numeric and an alphanumeric component, which are concatenated e.g. 2A, or alternatively will have a simple building number or a complex building number. The building number always relates to the whole building and not a sub-unit within it.
     * A complex building number may be one of the following:
     *   - Dual. Two number separated by '/' e.g. 63/64 = 63, 64
     *   - Sequence. An odd or even sequence of numbers with lower and upper bound separated by an underscore '_' e.g. `1_5` = 1,3,5 and `2_6` = 2,4,6 
     *   - Range. A range of consecutive numbers with lower and upper bound separated by a dash '-' e.g. `63-66` = 63, 64, 56, 66
     * The building number never appears on a line by itself and can prepend Building Group, Primary Thoroughfare or Primary Locality.
     */
    @JsonProperty("building_number")
    public String buildingNumber;
    public EcadAddress withBuildingNumber(String buildingNumber) {
        this.buildingNumber = buildingNumber;
        return this;
    }
    
    /**
     * Describes the type of building, e.g. detached, semi-detached, bungalow.
     */
    @JsonProperty("building_type")
    public String buildingType;
    public EcadAddress withBuildingType(String buildingType) {
        this.buildingType = buildingType;
        return this;
    }
    
    /**
     * Can be one of:
     * 
     * - `R` Residential 
     * - `C` Commercial
     * - `B` Both 
     * - `U` Unknown
     */
    @JsonProperty("building_use")
    public EcadAddressBuildingUseEnum buildingUse;
    public EcadAddress withBuildingUse(EcadAddressBuildingUseEnum buildingUse) {
        this.buildingUse = buildingUse;
        return this;
    }
    
    /**
     *   Full country names (ISO 3166)
     * 
     */
    @JsonProperty("country")
    public EcadAddressCountryEnum country;
    public EcadAddress withCountry(EcadAddressCountryEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     *   3 letter country code (ISO 3166-1)
     * 
     */
    @JsonProperty("country_iso")
    public EcadAddressCountryIsoEnum countryIso;
    public EcadAddress withCountryIso(EcadAddressCountryIsoEnum countryIso) {
        this.countryIso = countryIso;
        return this;
    }
    
    /**
     *  2 letter country code (ISO 3166-1)
     * 
     */
    @JsonProperty("country_iso_2")
    public EcadAddressCountryIso2Enum countryIso2;
    public EcadAddress withCountryIso2(EcadAddressCountryIso2Enum countryIso2) {
        this.countryIso2 = countryIso2;
        return this;
    }
    
    @JsonProperty("dataset")
    public EcadAddressDatasetEnum dataset;
    public EcadAddress withDataset(EcadAddressDatasetEnum dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Unique Identifier for Electoral Divisions 2017 data.
     * 
     * Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
     */
    @JsonProperty("ded_id")
    public String dedId;
    public EcadAddress withDedId(String dedId) {
        this.dedId = dedId;
        return this;
    }
    
    /**
     * The department or division within an organisation. If the department element exists, then the organisation must also exist.
     */
    @JsonProperty("department")
    public String department;
    public EcadAddress withDepartment(String department) {
        this.department = department;
        return this;
    }
    
    /**
     * Unique 10 digit ECAD ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ecad_id")
    public String ecadId;
    public EcadAddress withEcadId(String ecadId) {
        this.ecadId = ecadId;
        return this;
    }
    
    /**
     * The seven character Eircode has an A65 F4E2 format. The Eircode is a mandatory address element. The last line of a Postal Address will contain the Eircode, displayed with a space. e.g. `A65 F4E2`.
     * 
     * The Eircode is always the last line of a Postal Address generated within the state, e.g. if an address has four lines then the Eircode will be on its own on Address Line 5. For inbound international mail the country name IRELAND should be appended as the last line of the Postal Address.
     */
    @JsonProperty("eircode")
    public String eircode;
    public EcadAddress withEircode(String eircode) {
        this.eircode = eircode;
        return this;
    }
    
    /**
     * Gaeltact refers to a district where the Irish government recognises that the Irish language is the predominant language.
     * 
     * Returns `true` if address is in a Gaeltacht area and `false` if not.
     */
    @JsonProperty("gaeltacht")
    public Boolean gaeltacht;
    public EcadAddress withGaeltacht(Boolean gaeltacht) {
        this.gaeltacht = gaeltacht;
        return this;
    }
    
    /**
     * Unique Identifier for the 7 Gaeltacht areas 2017 data.
     * 
     * Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
     */
    @JsonProperty("gaeltacht_id")
    public String gaeltachtId;
    public EcadAddress withGaeltachtId(String gaeltachtId) {
        this.gaeltachtId = gaeltachtId;
        return this;
    }
    
    /**
     * A Yes/No field, indicating whether or not the building is a holiday home.
     */
    @JsonProperty("holiday_home")
    public EcadAddressHolidayHomeEnum holidayHome;
    public EcadAddress withHolidayHome(EcadAddressHolidayHomeEnum holidayHome) {
        this.holidayHome = holidayHome;
        return this;
    }
    
    /**
     * Global unique internally generated identifier for an address
     */
    @JsonProperty("id")
    public String id;
    public EcadAddress withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Language represented by 2 letter ISO Code (639-1)
     * 
     */
    @JsonProperty("language")
    public EcadAddressLanguageEnum language;
    public EcadAddress withLanguage(EcadAddressLanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * The latitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. `51.5083983`.
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("latitude")
    public Object latitude;
    public EcadAddress withLatitude(Object latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * Address Line 1
     */
    @JsonProperty("line_1")
    public String line1;
    public EcadAddress withLine1(String line1) {
        this.line1 = line1;
        return this;
    }
    
    /**
     * Address Line 2
     */
    @JsonProperty("line_2")
    public String line2;
    public EcadAddress withLine2(String line2) {
        this.line2 = line2;
        return this;
    }
    
    /**
     * Address Line 3
     */
    @JsonProperty("line_3")
    public String line3;
    public EcadAddress withLine3(String line3) {
        this.line3 = line3;
        return this;
    }
    
    /**
     * Address Line 4
     */
    @JsonProperty("line_4")
    public String line4;
    public EcadAddress withLine4(String line4) {
        this.line4 = line4;
        return this;
    }
    
    /**
     * Address Line 5
     */
    @JsonProperty("line_5")
    public String line5;
    public EcadAddress withLine5(String line5) {
        this.line5 = line5;
        return this;
    }
    
    /**
     * Address Line 6
     */
    @JsonProperty("line_6")
    public String line6;
    public EcadAddress withLine6(String line6) {
        this.line6 = line6;
        return this;
    }
    
    /**
     * Address Line 7
     */
    @JsonProperty("line_7")
    public String line7;
    public EcadAddress withLine7(String line7) {
        this.line7 = line7;
        return this;
    }
    
    /**
     * Address Line 8
     */
    @JsonProperty("line_8")
    public String line8;
    public EcadAddress withLine8(String line8) {
        this.line8 = line8;
        return this;
    }
    
    /**
     * Address Line 9
     */
    @JsonProperty("line_9")
    public String line9;
    public EcadAddress withLine9(String line9) {
        this.line9 = line9;
        return this;
    }
    
    /**
     * Name of local authority
     */
    @JsonProperty("local_authority")
    public String localAuthority;
    public EcadAddress withLocalAuthority(String localAuthority) {
        this.localAuthority = localAuthority;
        return this;
    }
    
    /**
     * The longitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. -0.1283983
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("longitude")
    public Object longitude;
    public EcadAddress withLongitude(Object longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * Name of the NACE Category
     */
    @JsonProperty("nace_category")
    public String naceCategory;
    public EcadAddress withNaceCategory(String naceCategory) {
        this.naceCategory = naceCategory;
        return this;
    }
    
    /**
     * The NACE Code for the Category.
     */
    @JsonProperty("nace_code")
    public String naceCode;
    public EcadAddress withNaceCode(String naceCode) {
        this.naceCode = naceCode;
        return this;
    }
    
    /**
     * NUA means "non-unique address".
     * 
     * The NUA field contains `true` when the address is a non-unique address, and `false` when it is a unique address.
     * 
     * Ireland has a very high level of non-unique addresses (NUA), i.e. the address does not contain a unique building number or name. Approximately 35% of all Irish addresses are non-unique which equates to 600,000 addresses.
     * 
     * The typical example of NUA addressing is where every address in a townland is the same. The way that post is delivered is by local knowledge of postal delivery personnel of which addressee lives in which house.
     * 
     * N.B. For a NUA address, it is impossible to match to a unique record in the ECAD and assign an Eircode.
     */
    @JsonProperty("nua")
    public Boolean nua;
    public EcadAddress withNua(Boolean nua) {
        this.nua = nua;
        return this;
    }
    
    /**
     * A Yes/No field, indicating whether the organisation is vacant.
     */
    @JsonProperty("org_vacant")
    public EcadAddressOrgVacantEnum orgVacant;
    public EcadAddress withOrgVacant(EcadAddressOrgVacantEnum orgVacant) {
        this.orgVacant = orgVacant;
        return this;
    }
    
    /**
     * Organisation name
     */
    @JsonProperty("organisation")
    public String organisation;
    public EcadAddress withOrganisation(String organisation) {
        this.organisation = organisation;
        return this;
    }
    
    /**
     * Organisation ID
     */
    @JsonProperty("organisation_id")
    public String organisationId;
    public EcadAddress withOrganisationId(String organisationId) {
        this.organisationId = organisationId;
        return this;
    }
    
    /**
     * One of the 26 Counties in the Republic of Ireland. These counties are sub-national divisions used for the purposes of administrative, geographical and political demarcation. Post County is the County associated with the Post Town, not the geographic county in which the building is located. The Post County is normally used as part of the Postal Address with some exceptions e.g. Dublin Postal Districts where the Post County is not used and some Post Towns (e.g. Tipperary, Kildare, etc.) that have the same name as the Post County.
     */
    @JsonProperty("post_county")
    public String postCounty;
    public EcadAddress withPostCounty(String postCounty) {
        this.postCounty = postCounty;
        return this;
    }
    
    /**
     * Post County ID
     */
    @JsonProperty("post_county_id")
    public String postCountyId;
    public EcadAddress withPostCountyId(String postCountyId) {
        this.postCountyId = postCountyId;
        return this;
    }
    
    /**
     * The post town is a significant element of the Postal Address, however it is not always populated in an address. The official post office guide, Eola\u00ed an Phoist1, describes post towns in the following manner:
     * 
     * "A provincial postal address may include the name of a town or village several miles distant, with which the addressee has little or no connection, and, in some places, especially if this residence happens to be near a county boundary, the name of the neighbouring county instead of the county in which he actually resides. The explanation is that the main mail despatches have to be sent for more detailed sub division to certain centres known as post towns, chosen because of their accessibility and convenience."
     */
    @JsonProperty("post_town")
    public String postTown;
    public EcadAddress withPostTown(String postTown) {
        this.postTown = postTown;
        return this;
    }
    
    /**
     * Post Town ID
     */
    @JsonProperty("post_town_id")
    public String postTownId;
    public EcadAddress withPostTownId(String postTownId) {
        this.postTownId = postTownId;
        return this;
    }
    
    /**
     * An Post sorting information.
     */
    @JsonProperty("postaim_presort_152")
    public String postaimPresort152;
    public EcadAddress withPostaimPresort152(String postaimPresort152) {
        this.postaimPresort152 = postaimPresort152;
        return this;
    }
    
    /**
     * An Post sorting information.
     */
    @JsonProperty("postaim_presort_61")
    public String postaimPresort61;
    public EcadAddress withPostaimPresort61(String postaimPresort61) {
        this.postaimPresort61 = postaimPresort61;
        return this;
    }
    
    /**
     * First locality elements which can refer to areas, districts, industrial estates, towns, etc.
     * 
     * The primary locality refers to the specific place the address is.
     * 
     * In urban areas, the primary locality can be required to distinguish between two thoroughfares of the same name in the same district or town. Industrial estates with named thoroughfares are also held as localities. In rural areas the primary locality is generally a townland name.
     */
    @JsonProperty("primary_locality")
    public String primaryLocality;
    public EcadAddress withPrimaryLocality(String primaryLocality) {
        this.primaryLocality = primaryLocality;
        return this;
    }
    
    /**
     * The locality type can be:
     *   - Rural Locality. This is generally a townland.
     *   - Industrial Estate. Industrial Estate, Industrial Park, Business Campus, etc.
     *   - Shopping District. Shopping Centre.
     *   - Housing Estate. Residential Housing Estate.
     *   - Village. Based on Census 2011 population &lt; 1,500.
     *   - Town. Based on Census 2011 population &gt; 1,500.
     *   - Urban Area. Wholly within a village/town/city e.g. Rathmines.
     *   - Suburban Locality. This is an area that is both rural and urban, as it is both a townland, and also an area name applied to houses in a town, as the town has extended partially into the townland.
     * 
     * Where the locality is also the post town, the type can be:
     *   - Village. Based on Census 2011 population &lt; 1,500
     *   - Town. Based on Census 2011 population &gt; 1,500
     *   - Postal District. Dublin 1 to 24
     *   - City. Dublin, Cork, Limerick, Galway or Waterford
     */
    @JsonProperty("primary_locality_address_type")
    public String primaryLocalityAddressType;
    public EcadAddress withPrimaryLocalityAddressType(String primaryLocalityAddressType) {
        this.primaryLocalityAddressType = primaryLocalityAddressType;
        return this;
    }
    
    /**
     * Primary Locality ID
     */
    @JsonProperty("primary_locality_id")
    public String primaryLocalityId;
    public EcadAddress withPrimaryLocalityId(String primaryLocalityId) {
        this.primaryLocalityId = primaryLocalityId;
        return this;
    }
    
    /**
     * The name of the thoroughfare on which premises are located. It may appear on a line by itself or be appended to either a sub building or building number.
     * 
     * Addresses with thoroughfares can sometimes have the thoroughfare excluded where a Building Group exists, such as a Retail Centre or Business Park, and the thoroughfare is not part of the Postal Address.
     */
    @JsonProperty("primary_thoroughfare")
    public String primaryThoroughfare;
    public EcadAddress withPrimaryThoroughfare(String primaryThoroughfare) {
        this.primaryThoroughfare = primaryThoroughfare;
        return this;
    }
    
    /**
     * Primary Thoroughfare ID
     */
    @JsonProperty("primary_thoroughfare_id")
    public String primaryThoroughfareId;
    public EcadAddress withPrimaryThoroughfareId(String primaryThoroughfareId) {
        this.primaryThoroughfareId = primaryThoroughfareId;
        return this;
    }
    
    /**
     * An Post publicity post zone information.
     */
    @JsonProperty("publicity_post_zone")
    public String publicityPostZone;
    public EcadAddress withPublicityPostZone(String publicityPostZone) {
        this.publicityPostZone = publicityPostZone;
        return this;
    }
    
    /**
     * Never present without a primary locality. The secondary locality has a wider geographic scope than the primary locality.
     * 
     * It is the secondary locality therefore which differentiates addresses with the same primary locality name within the same county.
     * 
     * Secondary localities are more likely to be required for rural addresses.
     * 
     * Second locality elements which can refer to areas, districts, industrial estates, towns, etc
     * 
     * The secondary locality helps identify where the primary locality is located.
     */
    @JsonProperty("secondary_locality")
    public String secondaryLocality;
    public EcadAddress withSecondaryLocality(String secondaryLocality) {
        this.secondaryLocality = secondaryLocality;
        return this;
    }
    
    /**
     * The locality type can be:
     *   - Rural Locality. This is generally a townland.
     *   - Industrial Estate. Industrial Estate, Industrial Park, Business Campus, etc.
     *   - Shopping District. Shopping Centre.
     *   - Housing Estate. Residential Housing Estate.
     *   - Village. Based on Census 2011 population &lt; 1,500.
     *   - Town. Based on Census 2011 population &gt; 1,500.
     *   - Urban Area. Wholly within a village/town/city e.g. Rathmines.
     *   - Suburban Locality. This is an area that is both rural and urban, as it is both a townland, and also an area name applied to houses in a town, as the town has extended partially into the townland.
     * 
     * Where the locality is also the post town, the type can be:
     *   - Village. Based on Census 2011 population &lt; 1,500
     *   - Town. Based on Census 2011 population &gt; 1,500
     *   - Postal District. Dublin 1 to 24
     *   - City. Dublin, Cork, Limerick, Galway or Waterford
     */
    @JsonProperty("secondary_locality_address_type")
    public String secondaryLocalityAddressType;
    public EcadAddress withSecondaryLocalityAddressType(String secondaryLocalityAddressType) {
        this.secondaryLocalityAddressType = secondaryLocalityAddressType;
        return this;
    }
    
    /**
     * Secondary Locality ID
     */
    @JsonProperty("secondary_locality_id")
    public String secondaryLocalityId;
    public EcadAddress withSecondaryLocalityId(String secondaryLocalityId) {
        this.secondaryLocalityId = secondaryLocalityId;
        return this;
    }
    
    /**
     * It is never present without a primary thoroughfare. The primary thoroughfare is dependent on the secondary thoroughfare and appears before the secondary thoroughfare in any address.
     * 
     * Secondary thoroughfare are generally used to assist locating a primary thoroughfare.
     */
    @JsonProperty("secondary_thoroughfare")
    public String secondaryThoroughfare;
    public EcadAddress withSecondaryThoroughfare(String secondaryThoroughfare) {
        this.secondaryThoroughfare = secondaryThoroughfare;
        return this;
    }
    
    /**
     * Secondary Thoroughfare ID
     */
    @JsonProperty("secondary_thoroughfare_id")
    public String secondaryThoroughfareId;
    public EcadAddress withSecondaryThoroughfareId(String secondaryThoroughfareId) {
        this.secondaryThoroughfareId = secondaryThoroughfareId;
        return this;
    }
    
    /**
     * Unique Identifier for the Small Area 2017 data.
     * 
     * Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
     */
    @JsonProperty("small_area_id")
    public String smallAreaId;
    public EcadAddress withSmallAreaId(String smallAreaId) {
        this.smallAreaId = smallAreaId;
        return this;
    }
    
    /**
     * The sub-building refers to an apartment, flat or unit within a building.
     */
    @JsonProperty("sub_building_name")
    public String subBuildingName;
    public EcadAddress withSubBuildingName(String subBuildingName) {
        this.subBuildingName = subBuildingName;
        return this;
    }
    
    /**
     * Also known as the Post Town.
     * 
     * The name of the post town associated with the premises for postal delivery purposes. This includes Dublin Postal Districts "Dublin 1" to "Dublin 24".
     * 
     * The post town is a significant element of the Postal Address, however it is not always populated in an address. The official post office guide, Eola\u00ed an Phoist4, describes post towns in the following manner:
     * 
     * "A provincial postal address may include the name of a town or village several miles distant, with which the addressee has little or no connection, and, in some places, especially if this residence happens to be near a county boundary, the name of the neighbouring county instead of the county in which he actually resides. The explanation is that the main mail despatches have to be sent for more detailed sub division to certain centres known as POST TOWNS, chosen because of their accessibility and convenience."
     */
    @JsonProperty("tertiary_locality")
    public String tertiaryLocality;
    public EcadAddress withTertiaryLocality(String tertiaryLocality) {
        this.tertiaryLocality = tertiaryLocality;
        return this;
    }
    
    /**
     * Unique Identifier for townland 2017 data.
     * 
     * Note that this field is subject to breaking changes if a new generation of government data IDs is released. Currently this uses 2017 IDs. Contact us to be notified ahead of his change.
     */
    @JsonProperty("townland_id")
    public String townlandId;
    public EcadAddress withTownlandId(String townlandId) {
        this.townlandId = townlandId;
        return this;
    }
    
    /**
     * A Yes/No field, indicating whether or not the building is under construction.
     */
    @JsonProperty("under_construction")
    public EcadAddressUnderConstructionEnum underConstruction;
    public EcadAddress withUnderConstruction(EcadAddressUnderConstructionEnum underConstruction) {
        this.underConstruction = underConstruction;
        return this;
    }
    
    /**
     * A Yes/No field, indicating whether the building is vacant.
     */
    @JsonProperty("vacant")
    public EcadAddressVacantEnum vacant;
    public EcadAddress withVacant(EcadAddressVacantEnum vacant) {
        this.vacant = vacant;
        return this;
    }
    
}
