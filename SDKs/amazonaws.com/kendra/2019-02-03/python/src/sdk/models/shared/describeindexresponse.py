"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import capacityunitsconfiguration as shared_capacityunitsconfiguration
from ..shared import documentmetadataconfiguration as shared_documentmetadataconfiguration
from ..shared import indexedition_enum as shared_indexedition_enum
from ..shared import indexstatistics as shared_indexstatistics
from ..shared import indexstatus_enum as shared_indexstatus_enum
from ..shared import serversideencryptionconfiguration as shared_serversideencryptionconfiguration
from ..shared import usercontextpolicy_enum as shared_usercontextpolicy_enum
from ..shared import usergroupresolutionconfiguration as shared_usergroupresolutionconfiguration
from ..shared import usertokenconfiguration as shared_usertokenconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeIndexResponse:
    r"""Success"""
    
    capacity_units: Optional[shared_capacityunitsconfiguration.CapacityUnitsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CapacityUnits'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    document_metadata_configurations: Optional[list[shared_documentmetadataconfiguration.DocumentMetadataConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentMetadataConfigurations'), 'exclude': lambda f: f is None }})  
    edition: Optional[shared_indexedition_enum.IndexEditionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Edition'), 'exclude': lambda f: f is None }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorMessage'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    index_statistics: Optional[shared_indexstatistics.IndexStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexStatistics'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    server_side_encryption_configuration: Optional[shared_serversideencryptionconfiguration.ServerSideEncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerSideEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_indexstatus_enum.IndexStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    user_context_policy: Optional[shared_usercontextpolicy_enum.UserContextPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserContextPolicy'), 'exclude': lambda f: f is None }})  
    user_group_resolution_configuration: Optional[shared_usergroupresolutionconfiguration.UserGroupResolutionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserGroupResolutionConfiguration'), 'exclude': lambda f: f is None }})  
    user_token_configurations: Optional[list[shared_usertokenconfiguration.UserTokenConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserTokenConfigurations'), 'exclude': lambda f: f is None }})  
    