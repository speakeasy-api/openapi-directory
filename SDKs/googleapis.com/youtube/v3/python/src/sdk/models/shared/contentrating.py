"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ContentRatingAcbRatingEnum(str, Enum):
    r"""The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming."""
    ACB_UNSPECIFIED = 'acbUnspecified'
    ACB_E = 'acbE'
    ACB_P = 'acbP'
    ACB_C = 'acbC'
    ACB_G = 'acbG'
    ACB_PG = 'acbPg'
    ACB_M = 'acbM'
    ACB_MA15PLUS = 'acbMa15plus'
    ACB_R18PLUS = 'acbR18plus'
    ACB_UNRATED = 'acbUnrated'

class ContentRatingAgcomRatingEnum(str, Enum):
    r"""The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM)."""
    AGCOM_UNSPECIFIED = 'agcomUnspecified'
    AGCOM_T = 'agcomT'
    AGCOM_VM14 = 'agcomVm14'
    AGCOM_VM18 = 'agcomVm18'
    AGCOM_UNRATED = 'agcomUnrated'

class ContentRatingAnatelRatingEnum(str, Enum):
    r"""The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television."""
    ANATEL_UNSPECIFIED = 'anatelUnspecified'
    ANATEL_F = 'anatelF'
    ANATEL_I = 'anatelI'
    ANATEL_I7 = 'anatelI7'
    ANATEL_I10 = 'anatelI10'
    ANATEL_I12 = 'anatelI12'
    ANATEL_R = 'anatelR'
    ANATEL_A = 'anatelA'
    ANATEL_UNRATED = 'anatelUnrated'

class ContentRatingBbfcRatingEnum(str, Enum):
    r"""The video's British Board of Film Classification (BBFC) rating."""
    BBFC_UNSPECIFIED = 'bbfcUnspecified'
    BBFC_U = 'bbfcU'
    BBFC_PG = 'bbfcPg'
    BBFC12A = 'bbfc12a'
    BBFC12 = 'bbfc12'
    BBFC15 = 'bbfc15'
    BBFC18 = 'bbfc18'
    BBFC_R18 = 'bbfcR18'
    BBFC_UNRATED = 'bbfcUnrated'

class ContentRatingBfvcRatingEnum(str, Enum):
    r"""The video's rating from Thailand's Board of Film and Video Censors."""
    BFVC_UNSPECIFIED = 'bfvcUnspecified'
    BFVC_G = 'bfvcG'
    BFVC_E = 'bfvcE'
    BFVC13 = 'bfvc13'
    BFVC15 = 'bfvc15'
    BFVC18 = 'bfvc18'
    BFVC20 = 'bfvc20'
    BFVC_B = 'bfvcB'
    BFVC_UNRATED = 'bfvcUnrated'

class ContentRatingBmukkRatingEnum(str, Enum):
    r"""The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur)."""
    BMUKK_UNSPECIFIED = 'bmukkUnspecified'
    BMUKK_AA = 'bmukkAa'
    BMUKK6 = 'bmukk6'
    BMUKK8 = 'bmukk8'
    BMUKK10 = 'bmukk10'
    BMUKK12 = 'bmukk12'
    BMUKK14 = 'bmukk14'
    BMUKK16 = 'bmukk16'
    BMUKK_UNRATED = 'bmukkUnrated'

class ContentRatingCatvRatingEnum(str, Enum):
    r"""Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."""
    CATV_UNSPECIFIED = 'catvUnspecified'
    CATV_C = 'catvC'
    CATV_C8 = 'catvC8'
    CATV_G = 'catvG'
    CATV_PG = 'catvPg'
    CATV14PLUS = 'catv14plus'
    CATV18PLUS = 'catv18plus'
    CATV_UNRATED = 'catvUnrated'
    CATV_E = 'catvE'

class ContentRatingCatvfrRatingEnum(str, Enum):
    r"""The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."""
    CATVFR_UNSPECIFIED = 'catvfrUnspecified'
    CATVFR_G = 'catvfrG'
    CATVFR8PLUS = 'catvfr8plus'
    CATVFR13PLUS = 'catvfr13plus'
    CATVFR16PLUS = 'catvfr16plus'
    CATVFR18PLUS = 'catvfr18plus'
    CATVFR_UNRATED = 'catvfrUnrated'
    CATVFR_E = 'catvfrE'

class ContentRatingCbfcRatingEnum(str, Enum):
    r"""The video's Central Board of Film Certification (CBFC - India) rating."""
    CBFC_UNSPECIFIED = 'cbfcUnspecified'
    CBFC_U = 'cbfcU'
    CBFC_UA = 'cbfcUA'
    CBFC_UA7PLUS = 'cbfcUA7plus'
    CBFC_UA13PLUS = 'cbfcUA13plus'
    CBFC_UA16PLUS = 'cbfcUA16plus'
    CBFC_A = 'cbfcA'
    CBFC_S = 'cbfcS'
    CBFC_UNRATED = 'cbfcUnrated'

class ContentRatingCccRatingEnum(str, Enum):
    r"""The video's Consejo de Calificación Cinematográfica (Chile) rating."""
    CCC_UNSPECIFIED = 'cccUnspecified'
    CCC_TE = 'cccTe'
    CCC6 = 'ccc6'
    CCC14 = 'ccc14'
    CCC18 = 'ccc18'
    CCC18V = 'ccc18v'
    CCC18S = 'ccc18s'
    CCC_UNRATED = 'cccUnrated'

class ContentRatingCceRatingEnum(str, Enum):
    r"""The video's rating from Portugal's Comissão de Classificação de Espect´culos."""
    CCE_UNSPECIFIED = 'cceUnspecified'
    CCE_M4 = 'cceM4'
    CCE_M6 = 'cceM6'
    CCE_M12 = 'cceM12'
    CCE_M16 = 'cceM16'
    CCE_M18 = 'cceM18'
    CCE_UNRATED = 'cceUnrated'
    CCE_M14 = 'cceM14'

class ContentRatingChfilmRatingEnum(str, Enum):
    r"""The video's rating in Switzerland."""
    CHFILM_UNSPECIFIED = 'chfilmUnspecified'
    CHFILM0 = 'chfilm0'
    CHFILM6 = 'chfilm6'
    CHFILM12 = 'chfilm12'
    CHFILM16 = 'chfilm16'
    CHFILM18 = 'chfilm18'
    CHFILM_UNRATED = 'chfilmUnrated'

class ContentRatingChvrsRatingEnum(str, Enum):
    r"""The video's Canadian Home Video Rating System (CHVRS) rating."""
    CHVRS_UNSPECIFIED = 'chvrsUnspecified'
    CHVRS_G = 'chvrsG'
    CHVRS_PG = 'chvrsPg'
    CHVRS14A = 'chvrs14a'
    CHVRS18A = 'chvrs18a'
    CHVRS_R = 'chvrsR'
    CHVRS_E = 'chvrsE'
    CHVRS_UNRATED = 'chvrsUnrated'

class ContentRatingCicfRatingEnum(str, Enum):
    r"""The video's rating from the Commission de Contrôle des Films (Belgium)."""
    CICF_UNSPECIFIED = 'cicfUnspecified'
    CICF_E = 'cicfE'
    CICF_KT_EA = 'cicfKtEa'
    CICF_KNT_ENA = 'cicfKntEna'
    CICF_UNRATED = 'cicfUnrated'

class ContentRatingCnaRatingEnum(str, Enum):
    r"""The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA)."""
    CNA_UNSPECIFIED = 'cnaUnspecified'
    CNA_AP = 'cnaAp'
    CNA12 = 'cna12'
    CNA15 = 'cna15'
    CNA18 = 'cna18'
    CNA18PLUS = 'cna18plus'
    CNA_UNRATED = 'cnaUnrated'

class ContentRatingCncRatingEnum(str, Enum):
    r"""Rating system in France - Commission de classification cinematographique"""
    CNC_UNSPECIFIED = 'cncUnspecified'
    CNC_T = 'cncT'
    CNC10 = 'cnc10'
    CNC12 = 'cnc12'
    CNC16 = 'cnc16'
    CNC18 = 'cnc18'
    CNC_E = 'cncE'
    CNC_INTERDICTION = 'cncInterdiction'
    CNC_UNRATED = 'cncUnrated'

class ContentRatingCsaRatingEnum(str, Enum):
    r"""The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content."""
    CSA_UNSPECIFIED = 'csaUnspecified'
    CSA_T = 'csaT'
    CSA10 = 'csa10'
    CSA12 = 'csa12'
    CSA16 = 'csa16'
    CSA18 = 'csa18'
    CSA_INTERDICTION = 'csaInterdiction'
    CSA_UNRATED = 'csaUnrated'

class ContentRatingCscfRatingEnum(str, Enum):
    r"""The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF)."""
    CSCF_UNSPECIFIED = 'cscfUnspecified'
    CSCF_AL = 'cscfAl'
    CSCF_A = 'cscfA'
    CSCF6 = 'cscf6'
    CSCF9 = 'cscf9'
    CSCF12 = 'cscf12'
    CSCF16 = 'cscf16'
    CSCF18 = 'cscf18'
    CSCF_UNRATED = 'cscfUnrated'

class ContentRatingCzfilmRatingEnum(str, Enum):
    r"""The video's rating in the Czech Republic."""
    CZFILM_UNSPECIFIED = 'czfilmUnspecified'
    CZFILM_U = 'czfilmU'
    CZFILM12 = 'czfilm12'
    CZFILM14 = 'czfilm14'
    CZFILM18 = 'czfilm18'
    CZFILM_UNRATED = 'czfilmUnrated'

class ContentRatingDjctqRatingEnum(str, Enum):
    r"""The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating."""
    DJCTQ_UNSPECIFIED = 'djctqUnspecified'
    DJCTQ_L = 'djctqL'
    DJCTQ10 = 'djctq10'
    DJCTQ12 = 'djctq12'
    DJCTQ14 = 'djctq14'
    DJCTQ16 = 'djctq16'
    DJCTQ18 = 'djctq18'
    DJCTQ_ER = 'djctqEr'
    DJCTQ_L10 = 'djctqL10'
    DJCTQ_L12 = 'djctqL12'
    DJCTQ_L14 = 'djctqL14'
    DJCTQ_L16 = 'djctqL16'
    DJCTQ_L18 = 'djctqL18'
    DJCTQ1012 = 'djctq1012'
    DJCTQ1014 = 'djctq1014'
    DJCTQ1016 = 'djctq1016'
    DJCTQ1018 = 'djctq1018'
    DJCTQ1214 = 'djctq1214'
    DJCTQ1216 = 'djctq1216'
    DJCTQ1218 = 'djctq1218'
    DJCTQ1416 = 'djctq1416'
    DJCTQ1418 = 'djctq1418'
    DJCTQ1618 = 'djctq1618'
    DJCTQ_UNRATED = 'djctqUnrated'

class ContentRatingDjctqRatingReasonsEnum(str, Enum):
    DJCTQ_RATING_REASON_UNSPECIFIED = 'djctqRatingReasonUnspecified'
    DJCTQ_VIOLENCE = 'djctqViolence'
    DJCTQ_EXTREME_VIOLENCE = 'djctqExtremeViolence'
    DJCTQ_SEXUAL_CONTENT = 'djctqSexualContent'
    DJCTQ_NUDITY = 'djctqNudity'
    DJCTQ_SEX = 'djctqSex'
    DJCTQ_EXPLICIT_SEX = 'djctqExplicitSex'
    DJCTQ_DRUGS = 'djctqDrugs'
    DJCTQ_LEGAL_DRUGS = 'djctqLegalDrugs'
    DJCTQ_ILLEGAL_DRUGS = 'djctqIllegalDrugs'
    DJCTQ_INAPPROPRIATE_LANGUAGE = 'djctqInappropriateLanguage'
    DJCTQ_CRIMINAL_ACTS = 'djctqCriminalActs'
    DJCTQ_IMPACTING_CONTENT = 'djctqImpactingContent'

class ContentRatingEcbmctRatingEnum(str, Enum):
    r"""Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism"""
    ECBMCT_UNSPECIFIED = 'ecbmctUnspecified'
    ECBMCT_G = 'ecbmctG'
    ECBMCT7A = 'ecbmct7a'
    ECBMCT7PLUS = 'ecbmct7plus'
    ECBMCT13A = 'ecbmct13a'
    ECBMCT13PLUS = 'ecbmct13plus'
    ECBMCT15A = 'ecbmct15a'
    ECBMCT15PLUS = 'ecbmct15plus'
    ECBMCT18PLUS = 'ecbmct18plus'
    ECBMCT_UNRATED = 'ecbmctUnrated'

class ContentRatingEefilmRatingEnum(str, Enum):
    r"""The video's rating in Estonia."""
    EEFILM_UNSPECIFIED = 'eefilmUnspecified'
    EEFILM_PERE = 'eefilmPere'
    EEFILM_L = 'eefilmL'
    EEFILM_MS6 = 'eefilmMs6'
    EEFILM_K6 = 'eefilmK6'
    EEFILM_MS12 = 'eefilmMs12'
    EEFILM_K12 = 'eefilmK12'
    EEFILM_K14 = 'eefilmK14'
    EEFILM_K16 = 'eefilmK16'
    EEFILM_UNRATED = 'eefilmUnrated'

class ContentRatingEgfilmRatingEnum(str, Enum):
    r"""The video's rating in Egypt."""
    EGFILM_UNSPECIFIED = 'egfilmUnspecified'
    EGFILM_GN = 'egfilmGn'
    EGFILM18 = 'egfilm18'
    EGFILM_BN = 'egfilmBn'
    EGFILM_UNRATED = 'egfilmUnrated'

class ContentRatingEirinRatingEnum(str, Enum):
    r"""The video's Eirin (映倫) rating. Eirin is the Japanese rating system."""
    EIRIN_UNSPECIFIED = 'eirinUnspecified'
    EIRIN_G = 'eirinG'
    EIRIN_PG12 = 'eirinPg12'
    EIRIN_R15PLUS = 'eirinR15plus'
    EIRIN_R18PLUS = 'eirinR18plus'
    EIRIN_UNRATED = 'eirinUnrated'

class ContentRatingFcbmRatingEnum(str, Enum):
    r"""The video's rating from Malaysia's Film Censorship Board."""
    FCBM_UNSPECIFIED = 'fcbmUnspecified'
    FCBM_U = 'fcbmU'
    FCBM_PG13 = 'fcbmPg13'
    FCBM_P13 = 'fcbmP13'
    FCBM18 = 'fcbm18'
    FCBM18SX = 'fcbm18sx'
    FCBM18PA = 'fcbm18pa'
    FCBM18SG = 'fcbm18sg'
    FCBM18PL = 'fcbm18pl'
    FCBM_UNRATED = 'fcbmUnrated'

class ContentRatingFcoRatingEnum(str, Enum):
    r"""The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration."""
    FCO_UNSPECIFIED = 'fcoUnspecified'
    FCO_I = 'fcoI'
    FCO_IIA = 'fcoIia'
    FCO_IIB = 'fcoIib'
    FCO_II = 'fcoIi'
    FCO_III = 'fcoIii'
    FCO_UNRATED = 'fcoUnrated'

class ContentRatingFmocRatingEnum(str, Enum):
    r"""This property has been deprecated. Use the contentDetails.contentRating.cncRating instead."""
    FMOC_UNSPECIFIED = 'fmocUnspecified'
    FMOC_U = 'fmocU'
    FMOC10 = 'fmoc10'
    FMOC12 = 'fmoc12'
    FMOC16 = 'fmoc16'
    FMOC18 = 'fmoc18'
    FMOC_E = 'fmocE'
    FMOC_UNRATED = 'fmocUnrated'

class ContentRatingFpbRatingEnum(str, Enum):
    r"""The video's rating from South Africa's Film and Publication Board."""
    FPB_UNSPECIFIED = 'fpbUnspecified'
    FPB_A = 'fpbA'
    FPB_PG = 'fpbPg'
    FPB79_PG = 'fpb79Pg'
    FPB1012_PG = 'fpb1012Pg'
    FPB13 = 'fpb13'
    FPB16 = 'fpb16'
    FPB18 = 'fpb18'
    FPB_X18 = 'fpbX18'
    FPB_XX = 'fpbXx'
    FPB_UNRATED = 'fpbUnrated'
    FPB10 = 'fpb10'

class ContentRatingFpbRatingReasonsEnum(str, Enum):
    FPB_RATING_REASON_UNSPECIFIED = 'fpbRatingReasonUnspecified'
    FPB_BLASPHEMY = 'fpbBlasphemy'
    FPB_LANGUAGE = 'fpbLanguage'
    FPB_NUDITY = 'fpbNudity'
    FPB_PREJUDICE = 'fpbPrejudice'
    FPB_SEX = 'fpbSex'
    FPB_VIOLENCE = 'fpbViolence'
    FPB_DRUGS = 'fpbDrugs'
    FPB_SEXUAL_VIOLENCE = 'fpbSexualViolence'
    FPB_HORROR = 'fpbHorror'
    FPB_CRIMINAL_TECHNIQUES = 'fpbCriminalTechniques'
    FPB_IMITATIVE_ACTS_TECHNIQUES = 'fpbImitativeActsTechniques'

class ContentRatingFskRatingEnum(str, Enum):
    r"""The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating."""
    FSK_UNSPECIFIED = 'fskUnspecified'
    FSK0 = 'fsk0'
    FSK6 = 'fsk6'
    FSK12 = 'fsk12'
    FSK16 = 'fsk16'
    FSK18 = 'fsk18'
    FSK_UNRATED = 'fskUnrated'

class ContentRatingGrfilmRatingEnum(str, Enum):
    r"""The video's rating in Greece."""
    GRFILM_UNSPECIFIED = 'grfilmUnspecified'
    GRFILM_K = 'grfilmK'
    GRFILM_E = 'grfilmE'
    GRFILM_K12 = 'grfilmK12'
    GRFILM_K13 = 'grfilmK13'
    GRFILM_K15 = 'grfilmK15'
    GRFILM_K17 = 'grfilmK17'
    GRFILM_K18 = 'grfilmK18'
    GRFILM_UNRATED = 'grfilmUnrated'

class ContentRatingIcaaRatingEnum(str, Enum):
    r"""The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating."""
    ICAA_UNSPECIFIED = 'icaaUnspecified'
    ICAA_APTA = 'icaaApta'
    ICAA7 = 'icaa7'
    ICAA12 = 'icaa12'
    ICAA13 = 'icaa13'
    ICAA16 = 'icaa16'
    ICAA18 = 'icaa18'
    ICAA_X = 'icaaX'
    ICAA_UNRATED = 'icaaUnrated'

class ContentRatingIfcoRatingEnum(str, Enum):
    r"""The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information."""
    IFCO_UNSPECIFIED = 'ifcoUnspecified'
    IFCO_G = 'ifcoG'
    IFCO_PG = 'ifcoPg'
    IFCO12 = 'ifco12'
    IFCO12A = 'ifco12a'
    IFCO15 = 'ifco15'
    IFCO15A = 'ifco15a'
    IFCO16 = 'ifco16'
    IFCO18 = 'ifco18'
    IFCO_UNRATED = 'ifcoUnrated'

class ContentRatingIlfilmRatingEnum(str, Enum):
    r"""The video's rating in Israel."""
    ILFILM_UNSPECIFIED = 'ilfilmUnspecified'
    ILFILM_AA = 'ilfilmAa'
    ILFILM12 = 'ilfilm12'
    ILFILM14 = 'ilfilm14'
    ILFILM16 = 'ilfilm16'
    ILFILM18 = 'ilfilm18'
    ILFILM_UNRATED = 'ilfilmUnrated'

class ContentRatingIncaaRatingEnum(str, Enum):
    r"""The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating."""
    INCAA_UNSPECIFIED = 'incaaUnspecified'
    INCAA_ATP = 'incaaAtp'
    INCAA_SAM13 = 'incaaSam13'
    INCAA_SAM16 = 'incaaSam16'
    INCAA_SAM18 = 'incaaSam18'
    INCAA_C = 'incaaC'
    INCAA_UNRATED = 'incaaUnrated'

class ContentRatingKfcbRatingEnum(str, Enum):
    r"""The video's rating from the Kenya Film Classification Board."""
    KFCB_UNSPECIFIED = 'kfcbUnspecified'
    KFCB_G = 'kfcbG'
    KFCB_PG = 'kfcbPg'
    KFCB16PLUS = 'kfcb16plus'
    KFCB_R = 'kfcbR'
    KFCB_UNRATED = 'kfcbUnrated'

class ContentRatingKijkwijzerRatingEnum(str, Enum):
    r"""The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands)."""
    KIJKWIJZER_UNSPECIFIED = 'kijkwijzerUnspecified'
    KIJKWIJZER_AL = 'kijkwijzerAl'
    KIJKWIJZER6 = 'kijkwijzer6'
    KIJKWIJZER9 = 'kijkwijzer9'
    KIJKWIJZER12 = 'kijkwijzer12'
    KIJKWIJZER16 = 'kijkwijzer16'
    KIJKWIJZER18 = 'kijkwijzer18'
    KIJKWIJZER_UNRATED = 'kijkwijzerUnrated'

class ContentRatingKmrbRatingEnum(str, Enum):
    r"""The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea."""
    KMRB_UNSPECIFIED = 'kmrbUnspecified'
    KMRB_ALL = 'kmrbAll'
    KMRB12PLUS = 'kmrb12plus'
    KMRB15PLUS = 'kmrb15plus'
    KMRB_TEENR = 'kmrbTeenr'
    KMRB_R = 'kmrbR'
    KMRB_UNRATED = 'kmrbUnrated'

class ContentRatingLsfRatingEnum(str, Enum):
    r"""The video's rating from Indonesia's Lembaga Sensor Film."""
    LSF_UNSPECIFIED = 'lsfUnspecified'
    LSF_SU = 'lsfSu'
    LSF_A = 'lsfA'
    LSF_BO = 'lsfBo'
    LSF13 = 'lsf13'
    LSF_R = 'lsfR'
    LSF17 = 'lsf17'
    LSF_D = 'lsfD'
    LSF21 = 'lsf21'
    LSF_UNRATED = 'lsfUnrated'

class ContentRatingMccaaRatingEnum(str, Enum):
    r"""The video's rating from Malta's Film Age-Classification Board."""
    MCCAA_UNSPECIFIED = 'mccaaUnspecified'
    MCCAA_U = 'mccaaU'
    MCCAA_PG = 'mccaaPg'
    MCCAA12A = 'mccaa12a'
    MCCAA12 = 'mccaa12'
    MCCAA14 = 'mccaa14'
    MCCAA15 = 'mccaa15'
    MCCAA16 = 'mccaa16'
    MCCAA18 = 'mccaa18'
    MCCAA_UNRATED = 'mccaaUnrated'

class ContentRatingMccypRatingEnum(str, Enum):
    r"""The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People."""
    MCCYP_UNSPECIFIED = 'mccypUnspecified'
    MCCYP_A = 'mccypA'
    MCCYP7 = 'mccyp7'
    MCCYP11 = 'mccyp11'
    MCCYP15 = 'mccyp15'
    MCCYP_UNRATED = 'mccypUnrated'

class ContentRatingMcstRatingEnum(str, Enum):
    r"""The video's rating system for Vietnam - MCST"""
    MCST_UNSPECIFIED = 'mcstUnspecified'
    MCST_P = 'mcstP'
    MCST0 = 'mcst0'
    MCST_C13 = 'mcstC13'
    MCST_C16 = 'mcstC16'
    MCST16PLUS = 'mcst16plus'
    MCST_C18 = 'mcstC18'
    MCST_G_PG = 'mcstGPg'
    MCST_UNRATED = 'mcstUnrated'

class ContentRatingMdaRatingEnum(str, Enum):
    r"""The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC)."""
    MDA_UNSPECIFIED = 'mdaUnspecified'
    MDA_G = 'mdaG'
    MDA_PG = 'mdaPg'
    MDA_PG13 = 'mdaPg13'
    MDA_NC16 = 'mdaNc16'
    MDA_M18 = 'mdaM18'
    MDA_R21 = 'mdaR21'
    MDA_UNRATED = 'mdaUnrated'

class ContentRatingMedietilsynetRatingEnum(str, Enum):
    r"""The video's rating from Medietilsynet, the Norwegian Media Authority."""
    MEDIETILSYNET_UNSPECIFIED = 'medietilsynetUnspecified'
    MEDIETILSYNET_A = 'medietilsynetA'
    MEDIETILSYNET6 = 'medietilsynet6'
    MEDIETILSYNET7 = 'medietilsynet7'
    MEDIETILSYNET9 = 'medietilsynet9'
    MEDIETILSYNET11 = 'medietilsynet11'
    MEDIETILSYNET12 = 'medietilsynet12'
    MEDIETILSYNET15 = 'medietilsynet15'
    MEDIETILSYNET18 = 'medietilsynet18'
    MEDIETILSYNET_UNRATED = 'medietilsynetUnrated'

class ContentRatingMekuRatingEnum(str, Enum):
    r"""The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute)."""
    MEKU_UNSPECIFIED = 'mekuUnspecified'
    MEKU_S = 'mekuS'
    MEKU7 = 'meku7'
    MEKU12 = 'meku12'
    MEKU16 = 'meku16'
    MEKU18 = 'meku18'
    MEKU_UNRATED = 'mekuUnrated'

class ContentRatingMenaMpaaRatingEnum(str, Enum):
    r"""The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details."""
    MENA_MPAA_UNSPECIFIED = 'menaMpaaUnspecified'
    MENA_MPAA_G = 'menaMpaaG'
    MENA_MPAA_PG = 'menaMpaaPg'
    MENA_MPAA_PG13 = 'menaMpaaPg13'
    MENA_MPAA_R = 'menaMpaaR'
    MENA_MPAA_UNRATED = 'menaMpaaUnrated'

class ContentRatingMibacRatingEnum(str, Enum):
    r"""The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy)."""
    MIBAC_UNSPECIFIED = 'mibacUnspecified'
    MIBAC_T = 'mibacT'
    MIBAC_VAP = 'mibacVap'
    MIBAC_VM6 = 'mibacVm6'
    MIBAC_VM12 = 'mibacVm12'
    MIBAC_VM14 = 'mibacVm14'
    MIBAC_VM16 = 'mibacVm16'
    MIBAC_VM18 = 'mibacVm18'
    MIBAC_UNRATED = 'mibacUnrated'

class ContentRatingMocRatingEnum(str, Enum):
    r"""The video's Ministerio de Cultura (Colombia) rating."""
    MOC_UNSPECIFIED = 'mocUnspecified'
    MOC_E = 'mocE'
    MOC_T = 'mocT'
    MOC7 = 'moc7'
    MOC12 = 'moc12'
    MOC15 = 'moc15'
    MOC18 = 'moc18'
    MOC_X = 'mocX'
    MOC_BANNED = 'mocBanned'
    MOC_UNRATED = 'mocUnrated'

class ContentRatingMoctwRatingEnum(str, Enum):
    r"""The video's rating from Taiwan's Ministry of Culture (文化部)."""
    MOCTW_UNSPECIFIED = 'moctwUnspecified'
    MOCTW_G = 'moctwG'
    MOCTW_P = 'moctwP'
    MOCTW_PG = 'moctwPg'
    MOCTW_R = 'moctwR'
    MOCTW_UNRATED = 'moctwUnrated'
    MOCTW_R12 = 'moctwR12'
    MOCTW_R15 = 'moctwR15'

class ContentRatingMpaaRatingEnum(str, Enum):
    r"""The video's Motion Picture Association of America (MPAA) rating."""
    MPAA_UNSPECIFIED = 'mpaaUnspecified'
    MPAA_G = 'mpaaG'
    MPAA_PG = 'mpaaPg'
    MPAA_PG13 = 'mpaaPg13'
    MPAA_R = 'mpaaR'
    MPAA_NC17 = 'mpaaNc17'
    MPAA_X = 'mpaaX'
    MPAA_UNRATED = 'mpaaUnrated'

class ContentRatingMpaatRatingEnum(str, Enum):
    r"""The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html."""
    MPAAT_UNSPECIFIED = 'mpaatUnspecified'
    MPAAT_GB = 'mpaatGb'
    MPAAT_RB = 'mpaatRb'

class ContentRatingMtrcbRatingEnum(str, Enum):
    r"""The video's rating from the Movie and Television Review and Classification Board (Philippines)."""
    MTRCB_UNSPECIFIED = 'mtrcbUnspecified'
    MTRCB_G = 'mtrcbG'
    MTRCB_PG = 'mtrcbPg'
    MTRCB_R13 = 'mtrcbR13'
    MTRCB_R16 = 'mtrcbR16'
    MTRCB_R18 = 'mtrcbR18'
    MTRCB_X = 'mtrcbX'
    MTRCB_UNRATED = 'mtrcbUnrated'

class ContentRatingNbcRatingEnum(str, Enum):
    r"""The video's rating from the Maldives National Bureau of Classification."""
    NBC_UNSPECIFIED = 'nbcUnspecified'
    NBC_G = 'nbcG'
    NBC_PG = 'nbcPg'
    NBC12PLUS = 'nbc12plus'
    NBC15PLUS = 'nbc15plus'
    NBC18PLUS = 'nbc18plus'
    NBC18PLUSR = 'nbc18plusr'
    NBC_PU = 'nbcPu'
    NBC_UNRATED = 'nbcUnrated'

class ContentRatingNbcplRatingEnum(str, Enum):
    r"""The video's rating in Poland."""
    NBCPL_UNSPECIFIED = 'nbcplUnspecified'
    NBCPL_I = 'nbcplI'
    NBCPL_II = 'nbcplIi'
    NBCPL_III = 'nbcplIii'
    NBCPL_IV = 'nbcplIv'
    NBCPL18PLUS = 'nbcpl18plus'
    NBCPL_UNRATED = 'nbcplUnrated'

class ContentRatingNfrcRatingEnum(str, Enum):
    r"""The video's rating from the Bulgarian National Film Center."""
    NFRC_UNSPECIFIED = 'nfrcUnspecified'
    NFRC_A = 'nfrcA'
    NFRC_B = 'nfrcB'
    NFRC_C = 'nfrcC'
    NFRC_D = 'nfrcD'
    NFRC_X = 'nfrcX'
    NFRC_UNRATED = 'nfrcUnrated'

class ContentRatingNfvcbRatingEnum(str, Enum):
    r"""The video's rating from Nigeria's National Film and Video Censors Board."""
    NFVCB_UNSPECIFIED = 'nfvcbUnspecified'
    NFVCB_G = 'nfvcbG'
    NFVCB_PG = 'nfvcbPg'
    NFVCB12 = 'nfvcb12'
    NFVCB12A = 'nfvcb12a'
    NFVCB15 = 'nfvcb15'
    NFVCB18 = 'nfvcb18'
    NFVCB_RE = 'nfvcbRe'
    NFVCB_UNRATED = 'nfvcbUnrated'

class ContentRatingNkclvRatingEnum(str, Enum):
    r"""The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia)."""
    NKCLV_UNSPECIFIED = 'nkclvUnspecified'
    NKCLV_U = 'nkclvU'
    NKCLV7PLUS = 'nkclv7plus'
    NKCLV12PLUS = 'nkclv12plus'
    NKCLV16PLUS = 'nkclv16plus'
    NKCLV18PLUS = 'nkclv18plus'
    NKCLV_UNRATED = 'nkclvUnrated'

class ContentRatingNmcRatingEnum(str, Enum):
    r"""The National Media Council ratings system for United Arab Emirates."""
    NMC_UNSPECIFIED = 'nmcUnspecified'
    NMC_G = 'nmcG'
    NMC_PG = 'nmcPg'
    NMC_PG13 = 'nmcPg13'
    NMC_PG15 = 'nmcPg15'
    NMC15PLUS = 'nmc15plus'
    NMC18PLUS = 'nmc18plus'
    NMC18TC = 'nmc18tc'
    NMC_UNRATED = 'nmcUnrated'

class ContentRatingOflcRatingEnum(str, Enum):
    r"""The video's Office of Film and Literature Classification (OFLC - New Zealand) rating."""
    OFLC_UNSPECIFIED = 'oflcUnspecified'
    OFLC_G = 'oflcG'
    OFLC_PG = 'oflcPg'
    OFLC_M = 'oflcM'
    OFLC_R13 = 'oflcR13'
    OFLC_R15 = 'oflcR15'
    OFLC_R16 = 'oflcR16'
    OFLC_R18 = 'oflcR18'
    OFLC_UNRATED = 'oflcUnrated'
    OFLC_RP13 = 'oflcRp13'
    OFLC_RP16 = 'oflcRp16'
    OFLC_RP18 = 'oflcRp18'

class ContentRatingPefilmRatingEnum(str, Enum):
    r"""The video's rating in Peru."""
    PEFILM_UNSPECIFIED = 'pefilmUnspecified'
    PEFILM_PT = 'pefilmPt'
    PEFILM_PG = 'pefilmPg'
    PEFILM14 = 'pefilm14'
    PEFILM18 = 'pefilm18'
    PEFILM_UNRATED = 'pefilmUnrated'

class ContentRatingRcnofRatingEnum(str, Enum):
    r"""The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film."""
    RCNOF_UNSPECIFIED = 'rcnofUnspecified'
    RCNOF_I = 'rcnofI'
    RCNOF_II = 'rcnofIi'
    RCNOF_III = 'rcnofIii'
    RCNOF_IV = 'rcnofIv'
    RCNOF_V = 'rcnofV'
    RCNOF_VI = 'rcnofVi'
    RCNOF_UNRATED = 'rcnofUnrated'

class ContentRatingResorteviolenciaRatingEnum(str, Enum):
    r"""The video's rating in Venezuela."""
    RESORTEVIOLENCIA_UNSPECIFIED = 'resorteviolenciaUnspecified'
    RESORTEVIOLENCIA_A = 'resorteviolenciaA'
    RESORTEVIOLENCIA_B = 'resorteviolenciaB'
    RESORTEVIOLENCIA_C = 'resorteviolenciaC'
    RESORTEVIOLENCIA_D = 'resorteviolenciaD'
    RESORTEVIOLENCIA_E = 'resorteviolenciaE'
    RESORTEVIOLENCIA_UNRATED = 'resorteviolenciaUnrated'

class ContentRatingRtcRatingEnum(str, Enum):
    r"""The video's General Directorate of Radio, Television and Cinematography (Mexico) rating."""
    RTC_UNSPECIFIED = 'rtcUnspecified'
    RTC_AA = 'rtcAa'
    RTC_A = 'rtcA'
    RTC_B = 'rtcB'
    RTC_B15 = 'rtcB15'
    RTC_C = 'rtcC'
    RTC_D = 'rtcD'
    RTC_UNRATED = 'rtcUnrated'

class ContentRatingRteRatingEnum(str, Enum):
    r"""The video's rating from Ireland's Raidió Teilifís Éireann."""
    RTE_UNSPECIFIED = 'rteUnspecified'
    RTE_GA = 'rteGa'
    RTE_CH = 'rteCh'
    RTE_PS = 'rtePs'
    RTE_MA = 'rteMa'
    RTE_UNRATED = 'rteUnrated'

class ContentRatingRussiaRatingEnum(str, Enum):
    r"""The video's National Film Registry of the Russian Federation (MKRF - Russia) rating."""
    RUSSIA_UNSPECIFIED = 'russiaUnspecified'
    RUSSIA0 = 'russia0'
    RUSSIA6 = 'russia6'
    RUSSIA12 = 'russia12'
    RUSSIA16 = 'russia16'
    RUSSIA18 = 'russia18'
    RUSSIA_UNRATED = 'russiaUnrated'

class ContentRatingSkfilmRatingEnum(str, Enum):
    r"""The video's rating in Slovakia."""
    SKFILM_UNSPECIFIED = 'skfilmUnspecified'
    SKFILM_G = 'skfilmG'
    SKFILM_P2 = 'skfilmP2'
    SKFILM_P5 = 'skfilmP5'
    SKFILM_P8 = 'skfilmP8'
    SKFILM_UNRATED = 'skfilmUnrated'

class ContentRatingSmaisRatingEnum(str, Enum):
    r"""The video's rating in Iceland."""
    SMAIS_UNSPECIFIED = 'smaisUnspecified'
    SMAIS_L = 'smaisL'
    SMAIS7 = 'smais7'
    SMAIS12 = 'smais12'
    SMAIS14 = 'smais14'
    SMAIS16 = 'smais16'
    SMAIS18 = 'smais18'
    SMAIS_UNRATED = 'smaisUnrated'

class ContentRatingSmsaRatingEnum(str, Enum):
    r"""The video's rating from Statens medieråd (Sweden's National Media Council)."""
    SMSA_UNSPECIFIED = 'smsaUnspecified'
    SMSA_A = 'smsaA'
    SMSA7 = 'smsa7'
    SMSA11 = 'smsa11'
    SMSA15 = 'smsa15'
    SMSA_UNRATED = 'smsaUnrated'

class ContentRatingTvpgRatingEnum(str, Enum):
    r"""The video's TV Parental Guidelines (TVPG) rating."""
    TVPG_UNSPECIFIED = 'tvpgUnspecified'
    TVPG_Y = 'tvpgY'
    TVPG_Y7 = 'tvpgY7'
    TVPG_Y7_FV = 'tvpgY7Fv'
    TVPG_G = 'tvpgG'
    TVPG_PG = 'tvpgPg'
    PG14 = 'pg14'
    TVPG_MA = 'tvpgMa'
    TVPG_UNRATED = 'tvpgUnrated'

class ContentRatingYtRatingEnum(str, Enum):
    r"""A rating that YouTube uses to identify age-restricted content."""
    YT_UNSPECIFIED = 'ytUnspecified'
    YT_AGE_RESTRICTED = 'ytAgeRestricted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContentRating:
    r"""Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange"""
    
    acb_rating: Optional[ContentRatingAcbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acbRating'), 'exclude': lambda f: f is None }})
    r"""The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming."""  
    agcom_rating: Optional[ContentRatingAgcomRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agcomRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM)."""  
    anatel_rating: Optional[ContentRatingAnatelRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anatelRating'), 'exclude': lambda f: f is None }})
    r"""The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television."""  
    bbfc_rating: Optional[ContentRatingBbfcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bbfcRating'), 'exclude': lambda f: f is None }})
    r"""The video's British Board of Film Classification (BBFC) rating."""  
    bfvc_rating: Optional[ContentRatingBfvcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bfvcRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Thailand's Board of Film and Video Censors."""  
    bmukk_rating: Optional[ContentRatingBmukkRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bmukkRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur)."""  
    catvfr_rating: Optional[ContentRatingCatvfrRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catvfrRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."""  
    catv_rating: Optional[ContentRatingCatvRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catvRating'), 'exclude': lambda f: f is None }})
    r"""Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."""  
    cbfc_rating: Optional[ContentRatingCbfcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cbfcRating'), 'exclude': lambda f: f is None }})
    r"""The video's Central Board of Film Certification (CBFC - India) rating."""  
    ccc_rating: Optional[ContentRatingCccRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cccRating'), 'exclude': lambda f: f is None }})
    r"""The video's Consejo de Calificación Cinematográfica (Chile) rating."""  
    cce_rating: Optional[ContentRatingCceRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cceRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Portugal's Comissão de Classificação de Espect´culos."""  
    chfilm_rating: Optional[ContentRatingChfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Switzerland."""  
    chvrs_rating: Optional[ContentRatingChvrsRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chvrsRating'), 'exclude': lambda f: f is None }})
    r"""The video's Canadian Home Video Rating System (CHVRS) rating."""  
    cicf_rating: Optional[ContentRatingCicfRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cicfRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Commission de Contrôle des Films (Belgium)."""  
    cna_rating: Optional[ContentRatingCnaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cnaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA)."""  
    cnc_rating: Optional[ContentRatingCncRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cncRating'), 'exclude': lambda f: f is None }})
    r"""Rating system in France - Commission de classification cinematographique"""  
    csa_rating: Optional[ContentRatingCsaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content."""  
    cscf_rating: Optional[ContentRatingCscfRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cscfRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF)."""  
    czfilm_rating: Optional[ContentRatingCzfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('czfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in the Czech Republic."""  
    djctq_rating: Optional[ContentRatingDjctqRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('djctqRating'), 'exclude': lambda f: f is None }})
    r"""The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating."""  
    djctq_rating_reasons: Optional[list[ContentRatingDjctqRatingReasonsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('djctqRatingReasons'), 'exclude': lambda f: f is None }})
    r"""Reasons that explain why the video received its DJCQT (Brazil) rating."""  
    ecbmct_rating: Optional[ContentRatingEcbmctRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecbmctRating'), 'exclude': lambda f: f is None }})
    r"""Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism"""  
    eefilm_rating: Optional[ContentRatingEefilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eefilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Estonia."""  
    egfilm_rating: Optional[ContentRatingEgfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('egfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Egypt."""  
    eirin_rating: Optional[ContentRatingEirinRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eirinRating'), 'exclude': lambda f: f is None }})
    r"""The video's Eirin (映倫) rating. Eirin is the Japanese rating system."""  
    fcbm_rating: Optional[ContentRatingFcbmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fcbmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Malaysia's Film Censorship Board."""  
    fco_rating: Optional[ContentRatingFcoRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fcoRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration."""  
    fmoc_rating: Optional[ContentRatingFmocRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fmocRating'), 'exclude': lambda f: f is None }})
    r"""This property has been deprecated. Use the contentDetails.contentRating.cncRating instead."""  
    fpb_rating: Optional[ContentRatingFpbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fpbRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from South Africa's Film and Publication Board."""  
    fpb_rating_reasons: Optional[list[ContentRatingFpbRatingReasonsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fpbRatingReasons'), 'exclude': lambda f: f is None }})
    r"""Reasons that explain why the video received its FPB (South Africa) rating."""  
    fsk_rating: Optional[ContentRatingFskRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fskRating'), 'exclude': lambda f: f is None }})
    r"""The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating."""  
    grfilm_rating: Optional[ContentRatingGrfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Greece."""  
    icaa_rating: Optional[ContentRatingIcaaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icaaRating'), 'exclude': lambda f: f is None }})
    r"""The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating."""  
    ifco_rating: Optional[ContentRatingIfcoRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ifcoRating'), 'exclude': lambda f: f is None }})
    r"""The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information."""  
    ilfilm_rating: Optional[ContentRatingIlfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ilfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Israel."""  
    incaa_rating: Optional[ContentRatingIncaaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incaaRating'), 'exclude': lambda f: f is None }})
    r"""The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating."""  
    kfcb_rating: Optional[ContentRatingKfcbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kfcbRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Kenya Film Classification Board."""  
    kijkwijzer_rating: Optional[ContentRatingKijkwijzerRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kijkwijzerRating'), 'exclude': lambda f: f is None }})
    r"""The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands)."""  
    kmrb_rating: Optional[ContentRatingKmrbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmrbRating'), 'exclude': lambda f: f is None }})
    r"""The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea."""  
    lsf_rating: Optional[ContentRatingLsfRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lsfRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Indonesia's Lembaga Sensor Film."""  
    mccaa_rating: Optional[ContentRatingMccaaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mccaaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Malta's Film Age-Classification Board."""  
    mccyp_rating: Optional[ContentRatingMccypRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mccypRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People."""  
    mcst_rating: Optional[ContentRatingMcstRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mcstRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating system for Vietnam - MCST"""  
    mda_rating: Optional[ContentRatingMdaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC)."""  
    medietilsynet_rating: Optional[ContentRatingMedietilsynetRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('medietilsynetRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Medietilsynet, the Norwegian Media Authority."""  
    meku_rating: Optional[ContentRatingMekuRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mekuRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute)."""  
    mena_mpaa_rating: Optional[ContentRatingMenaMpaaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('menaMpaaRating'), 'exclude': lambda f: f is None }})
    r"""The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details."""  
    mibac_rating: Optional[ContentRatingMibacRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mibacRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy)."""  
    moc_rating: Optional[ContentRatingMocRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mocRating'), 'exclude': lambda f: f is None }})
    r"""The video's Ministerio de Cultura (Colombia) rating."""  
    moctw_rating: Optional[ContentRatingMoctwRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moctwRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Taiwan's Ministry of Culture (文化部)."""  
    mpaa_rating: Optional[ContentRatingMpaaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mpaaRating'), 'exclude': lambda f: f is None }})
    r"""The video's Motion Picture Association of America (MPAA) rating."""  
    mpaat_rating: Optional[ContentRatingMpaatRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mpaatRating'), 'exclude': lambda f: f is None }})
    r"""The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html."""  
    mtrcb_rating: Optional[ContentRatingMtrcbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mtrcbRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Movie and Television Review and Classification Board (Philippines)."""  
    nbcpl_rating: Optional[ContentRatingNbcplRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nbcplRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Poland."""  
    nbc_rating: Optional[ContentRatingNbcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nbcRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Maldives National Bureau of Classification."""  
    nfrc_rating: Optional[ContentRatingNfrcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfrcRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Bulgarian National Film Center."""  
    nfvcb_rating: Optional[ContentRatingNfvcbRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfvcbRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Nigeria's National Film and Video Censors Board."""  
    nkclv_rating: Optional[ContentRatingNkclvRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nkclvRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia)."""  
    nmc_rating: Optional[ContentRatingNmcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nmcRating'), 'exclude': lambda f: f is None }})
    r"""The National Media Council ratings system for United Arab Emirates."""  
    oflc_rating: Optional[ContentRatingOflcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oflcRating'), 'exclude': lambda f: f is None }})
    r"""The video's Office of Film and Literature Classification (OFLC - New Zealand) rating."""  
    pefilm_rating: Optional[ContentRatingPefilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pefilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Peru."""  
    rcnof_rating: Optional[ContentRatingRcnofRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rcnofRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film."""  
    resorteviolencia_rating: Optional[ContentRatingResorteviolenciaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resorteviolenciaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Venezuela."""  
    rtc_rating: Optional[ContentRatingRtcRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rtcRating'), 'exclude': lambda f: f is None }})
    r"""The video's General Directorate of Radio, Television and Cinematography (Mexico) rating."""  
    rte_rating: Optional[ContentRatingRteRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rteRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Ireland's Raidió Teilifís Éireann."""  
    russia_rating: Optional[ContentRatingRussiaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('russiaRating'), 'exclude': lambda f: f is None }})
    r"""The video's National Film Registry of the Russian Federation (MKRF - Russia) rating."""  
    skfilm_rating: Optional[ContentRatingSkfilmRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skfilmRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Slovakia."""  
    smais_rating: Optional[ContentRatingSmaisRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smaisRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating in Iceland."""  
    smsa_rating: Optional[ContentRatingSmsaRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsaRating'), 'exclude': lambda f: f is None }})
    r"""The video's rating from Statens medieråd (Sweden's National Media Council)."""  
    tvpg_rating: Optional[ContentRatingTvpgRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvpgRating'), 'exclude': lambda f: f is None }})
    r"""The video's TV Parental Guidelines (TVPG) rating."""  
    yt_rating: Optional[ContentRatingYtRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ytRating'), 'exclude': lambda f: f is None }})
    r"""A rating that YouTube uses to identify age-restricted content."""  
    