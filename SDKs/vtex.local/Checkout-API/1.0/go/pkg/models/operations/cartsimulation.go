// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type CartSimulationQueryParams struct {
	// This parameter defines which promotions apply to the simulation. Use `0` for simulations at cart stage, which means all promotions apply. In case of window simulation use `1`, which indicates promotions that apply nominal discounts over the total purchase value shouldn't be considered on the simulation.
	//
	// Note that if this not sent, the parameter is `1`.
	RnbBehavior *int64 `queryParam:"style=form,explode=true,name=RnbBehavior"`
	// Trade Policy (Sales Channel) identification.
	Sc *int64 `queryParam:"style=form,explode=true,name=sc"`
}

type CartSimulationHeaders struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type CartSimulationRequestBodyItems struct {
	// The SKU ID.
	ID *string `json:"id,omitempty"`
	// The quantity of items of this specific SKU in the cart to be simulated.
	Quantity *int `json:"quantity,omitempty"`
	// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
	Seller *string `json:"seller,omitempty"`
}

type CartSimulationRequestBody struct {
	// Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Array containing information about the SKUs inside the cart to be simulated.
	Items []CartSimulationRequestBodyItems `json:"items,omitempty"`
	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`
}

type CartSimulationRequest struct {
	QueryParams CartSimulationQueryParams
	Headers     CartSimulationHeaders
	Request     *CartSimulationRequestBody `request:"mediaType=application/json"`
}

type CartSimulation200ApplicationJSONItemsPriceDefinitionSellingPrices struct {
	// Rounding quantity, meaning how many items are rounded to this value.
	Quantity *int64 `json:"quantity,omitempty"`
	// Value in cents for that specific rounding.
	Value *int64 `json:"value,omitempty"`
}

// CartSimulation200ApplicationJSONItemsPriceDefinition - Price information for all units of a specific item.
type CartSimulation200ApplicationJSONItemsPriceDefinition struct {
	// Item's calculated unitary selling price in cents.
	CalculatedSellingPrice *int64 `json:"calculatedSellingPrice,omitempty"`
	// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
	SellingPrices []CartSimulation200ApplicationJSONItemsPriceDefinitionSellingPrices `json:"sellingPrices,omitempty"`
	// Total value for all units of the item in cents.
	Total *int64 `json:"total,omitempty"`
}

type CartSimulation200ApplicationJSONItemsPriceTags struct {
	// Price tag identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Indicates whether price tag value is applied through a percentage.
	IsPercentual *bool `json:"isPercentual,omitempty"`
	// Price tag name.
	Name *string `json:"name,omitempty"`
	// Identification of the responsible for the price tag.
	Owner *string `json:"owner,omitempty"`
	// Price tag raw value.
	RawValue *int64 `json:"rawValue,omitempty"`
	// Price tag value.
	Value *int64 `json:"value,omitempty"`
}

type CartSimulation200ApplicationJSONItems struct {
	// Availability.
	Availability *string `json:"availability,omitempty"`
	// ID of the item.
	ID *string `json:"id,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Measurement unit.
	MeasurementUnit *string `json:"measurementUnit,omitempty"`
	// Array containing offering information.
	Offerings []interface{} `json:"offerings,omitempty"`
	// Parent assembly binding.
	ParentAssemblyBinding *string `json:"parentAssemblyBinding,omitempty"`
	// Parent item index.
	ParentItemIndex *int64 `json:"parentItemIndex,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Price information for all units of a specific item.
	PriceDefinition *CartSimulation200ApplicationJSONItemsPriceDefinition `json:"priceDefinition,omitempty"`
	// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
	PriceTags []CartSimulation200ApplicationJSONItemsPriceTags `json:"priceTags,omitempty"`
	// Price expiration date and time.
	PriceValidUntil *string `json:"priceValidUntil,omitempty"`
	// The quantity of the item the cart.
	Quantity *int64 `json:"quantity,omitempty"`
	// Request index information.
	RequestIndex *int64 `json:"requestIndex,omitempty"`
	// Reward value in cents.
	RewardValue *int64 `json:"rewardValue,omitempty"`
	// The seller responsible for the SKU.
	Seller *string `json:"seller,omitempty"`
	// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
	SellerChain []string `json:"sellerChain,omitempty"`
	// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
	SellingPrice *int64 `json:"sellingPrice,omitempty"`
	// Tax value in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Unit multiplier.
	UnitMultiplier *int64 `json:"unitMultiplier,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoDeliveryChannels struct {
	// Delivery channel ID.
	ID *string `json:"id,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoItemMetadataItems struct {
	// Assembly options information.
	AssemblyOptions []interface{} `json:"assemblyOptions,omitempty"`
	// Item ID.
	ID *string `json:"id,omitempty"`
	// Seller.
	Seller *string `json:"seller,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoItemMetadata - Item metadata.
type CartSimulation200ApplicationJSONLogisticsInfoItemMetadata struct {
	// List of objects containing metadata on each item in the order.
	Items []CartSimulation200ApplicationJSONLogisticsInfoItemMetadataItems `json:"items,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows - This object contains information about the delivery window available to the shopper.
type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows struct {
	// Delivery window ending day and time in UTC.
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Delivery window list price.
	LisPrice *int64 `json:"lisPrice,omitempty"`
	// Delivery window price.
	Price *int64 `json:"price,omitempty"`
	// Delivery window starting day and time in UTC.
	StartDateUtc *string `json:"startDateUtc,omitempty"`
	// Delivery window tax.
	Tax *int64 `json:"tax,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds struct {
	// Courier ID.
	CourierID *string `json:"courierId,omitempty"`
	// Courier name.
	CourierName *string `json:"courierName,omitempty"`
	// Warehouse ID.
	DockID *string `json:"dockId,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Warehouse ID.
	WarehouseID *string `json:"warehouseId,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow - In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow struct {
	// Delivery window ending day and time in UTC.
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Delivery window list price.
	LisPrice *int64 `json:"lisPrice,omitempty"`
	// Delivery window price.
	Price *int64 `json:"price,omitempty"`
	// Delivery window starting day and time in UTC.
	StartDateUtc *string `json:"startDateUtc,omitempty"`
	// Delivery window tax.
	Tax *int64 `json:"tax,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo - Information on the pickup store.
type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo struct {
	// Additional information.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	// Address information.
	Address map[string]interface{} `json:"address,omitempty"`
	// Corresponding dock ID.
	DockID *string `json:"dockId,omitempty"`
	// Friendly name.
	FriendlyName *string `json:"friendlyName,omitempty"`
	// Indicates whether it is the pickup store.
	IsPickupStore *bool `json:"isPickupStore,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas struct {
	// This object contains information about the delivery window available to the shopper.
	AvailableDeliveryWindows *CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows `json:"availableDeliveryWindows,omitempty"`
	// Delivery channel.
	DeliveryChannel *string `json:"deliveryChannel,omitempty"`
	// Information on each delivery ID.
	DeliveryIds []CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds `json:"deliveryIds,omitempty"`
	// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
	DeliveryWindow *CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow `json:"deliveryWindow,omitempty"`
	// SLA ID.
	ID *string `json:"id,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Estimate date of delivery.
	LockTTL *string `json:"lockTTL,omitempty"`
	// SLA name.
	Name *string `json:"name,omitempty"`
	// Pickup point distance.
	PickupDistance *int64 `json:"pickupDistance,omitempty"`
	// Pickup point ID.
	PickupPointID *string `json:"pickupPointId,omitempty"`
	// Information on the pickup store.
	PickupStoreInfo *CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo `json:"pickupStoreInfo,omitempty"`
	// Polygon name.
	PolygonName *string `json:"polygonName,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
	ShippingEstimate *string `json:"shippingEstimate,omitempty"`
	// Shipping estimate date.
	ShippingEstimateDate *string `json:"shippingEstimateDate,omitempty"`
	// Tax in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Transit time. For instance, "three business days" is represented as `3bd`.
	TransitTime *string `json:"transitTime,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditions struct {
	// Item ID.
	ID *string `json:"id,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Seller.
	Seller *string `json:"seller,omitempty"`
	// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
	SellerChain []interface{} `json:"sellerChain,omitempty"`
	// Information on available SLAs.
	Slas []CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas `json:"slas,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditions - Purchase conditions information.
type CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditions struct {
	// List of objects containing purchase condition information on each item in the order.
	ItemPurchaseConditions []CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditions `json:"itemPurchaseConditions,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoSlasAvailableDeliveryWindows - This object contains information about the delivery window available to the shopper.
type CartSimulation200ApplicationJSONLogisticsInfoSlasAvailableDeliveryWindows struct {
	// Delivery window ending day and time in UTC.
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Delivery window list price.
	LisPrice *int64 `json:"lisPrice,omitempty"`
	// Delivery window price.
	Price *int64 `json:"price,omitempty"`
	// Delivery window starting day and time in UTC.
	StartDateUtc *string `json:"startDateUtc,omitempty"`
	// Delivery window tax.
	Tax *int64 `json:"tax,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryIds struct {
	// Courier ID.
	CourierID *string `json:"courierId,omitempty"`
	// Courier name.
	CourierName *string `json:"courierName,omitempty"`
	// Warehouse ID.
	DockID *string `json:"dockId,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Warehouse ID.
	WarehouseID *string `json:"warehouseId,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryWindow - In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
type CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryWindow struct {
	// Delivery window ending day and time in UTC.
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Delivery window list price.
	LisPrice *int64 `json:"lisPrice,omitempty"`
	// Delivery window price.
	Price *int64 `json:"price,omitempty"`
	// Delivery window starting day and time in UTC.
	StartDateUtc *string `json:"startDateUtc,omitempty"`
	// Delivery window tax.
	Tax *int64 `json:"tax,omitempty"`
}

// CartSimulation200ApplicationJSONLogisticsInfoSlasPickupStoreInfo - Information on the pickup store.
type CartSimulation200ApplicationJSONLogisticsInfoSlasPickupStoreInfo struct {
	// Additional information.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	// Address information.
	Address map[string]interface{} `json:"address,omitempty"`
	// Corresponding dock ID.
	DockID *string `json:"dockId,omitempty"`
	// Friendly name.
	FriendlyName *string `json:"friendlyName,omitempty"`
	// Indicates whether it is the pickup store.
	IsPickupStore *bool `json:"isPickupStore,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoSlas struct {
	// This object contains information about the delivery window available to the shopper.
	AvailableDeliveryWindows *CartSimulation200ApplicationJSONLogisticsInfoSlasAvailableDeliveryWindows `json:"availableDeliveryWindows,omitempty"`
	// Delivery channel.
	DeliveryChannel *string `json:"deliveryChannel,omitempty"`
	// Information on each delivery ID.
	DeliveryIds []CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryIds `json:"deliveryIds,omitempty"`
	// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
	DeliveryWindow *CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryWindow `json:"deliveryWindow,omitempty"`
	// SLA ID.
	ID *string `json:"id,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Estimate date of delivery.
	LockTTL *string `json:"lockTTL,omitempty"`
	// SLA name.
	Name *string `json:"name,omitempty"`
	// Pickup point distance.
	PickupDistance *int64 `json:"pickupDistance,omitempty"`
	// Pickup point ID.
	PickupPointID *string `json:"pickupPointId,omitempty"`
	// Information on the pickup store.
	PickupStoreInfo *CartSimulation200ApplicationJSONLogisticsInfoSlasPickupStoreInfo `json:"pickupStoreInfo,omitempty"`
	// Polygon name.
	PolygonName *string `json:"polygonName,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
	ShippingEstimate *string `json:"shippingEstimate,omitempty"`
	// Shipping estimate date.
	ShippingEstimateDate *string `json:"shippingEstimateDate,omitempty"`
	// Tax in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Transit time. For instance, "three business days" is represented as `3bd`.
	TransitTime *string `json:"transitTime,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfoTotals struct {
	// Total ID.
	ID *string `json:"id,omitempty"`
	// Total name.
	Name *string `json:"name,omitempty"`
	// Total value.
	Value *int64 `json:"value,omitempty"`
}

type CartSimulation200ApplicationJSONLogisticsInfo struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// List of available delivery channels.
	DeliveryChannels []CartSimulation200ApplicationJSONLogisticsInfoDeliveryChannels `json:"deliveryChannels,omitempty"`
	// Index of item in items array.
	ItemIndex *int64 `json:"itemIndex,omitempty"`
	// Item metadata.
	ItemMetadata *CartSimulation200ApplicationJSONLogisticsInfoItemMetadata `json:"itemMetadata,omitempty"`
	// Array containing an object for each message generated by our servers while processing the request.
	Messages []interface{} `json:"messages,omitempty"`
	// Array containing pickup points information.
	PickupPoints []interface{} `json:"pickupPoints,omitempty"`
	// Purchase conditions information.
	PurchaseConditions *CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditions `json:"purchaseConditions,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
	SelectedDeliveryChannel *string `json:"selectedDeliveryChannel,omitempty"`
	// Selected SLA. For example, `"normal"` or `"express"`.
	SelectedSLA *string `json:"selectedSla,omitempty"`
	// List of countries that the item may be shipped to.
	ShipsTo []interface{} `json:"shipsTo,omitempty"`
	// Information on available SLAs.
	Slas []CartSimulation200ApplicationJSONLogisticsInfoSlas `json:"slas,omitempty"`
	// Subscription information.
	SubscriptionData map[string]interface{} `json:"subscriptionData,omitempty"`
	// Information on order totals.
	Totals []CartSimulation200ApplicationJSONLogisticsInfoTotals `json:"totals,omitempty"`
}

type CartSimulation200ApplicationJSONPaymentDataPaymentSystems struct {
	// Availability of payment.
	AvailablePayments *string `json:"availablePayments,omitempty"`
	// Description.
	Description *string `json:"description,omitempty"`
	// Indicates whether a document is shown.
	DisplayDocument *bool `json:"displayDocument,omitempty"`
	// Payment due date.
	DueDate *string `json:"dueDate,omitempty"`
	// Payment group name.
	GroupName *string `json:"groupName,omitempty"`
	// Payment system ID.
	ID *int64 `json:"id,omitempty"`
	// Indicates whether it is custom.
	IsCustom *bool `json:"isCustom,omitempty"`
	// Payment system name.
	Name *string `json:"name,omitempty"`
	// Indicates whether a authentication is required.
	RequiresAuthentication *bool `json:"requiresAuthentication,omitempty"`
	// Indicates whether a document is required.
	RequiresDocument *bool `json:"requiresDocument,omitempty"`
	// String ID.
	StringID *string `json:"stringId,omitempty"`
	// Template.
	Template *string `json:"template,omitempty"`
	// Payment system validator.
	Validator map[string]interface{} `json:"validator,omitempty"`
}

// CartSimulation200ApplicationJSONPaymentData - Payment data information.
type CartSimulation200ApplicationJSONPaymentData struct {
	// Available accounts.
	AvailableAccounts []interface{} `json:"availableAccounts,omitempty"`
	// Available associations.
	AvailableAssociations map[string]interface{} `json:"availableAssociations,omitempty"`
	// Available tokens.
	AvailableTokens []interface{} `json:"availableTokens,omitempty"`
	// Array of gift card messages.
	GiftCardMessages []interface{} `json:"giftCardMessages,omitempty"`
	// Gift card information, if it applies to the order.
	GiftCards []interface{} `json:"giftCards,omitempty"`
	// Installment options information.
	InstallmentOptions []interface{} `json:"installmentOptions,omitempty"`
	// Information on payment systems.
	PaymentSystems []CartSimulation200ApplicationJSONPaymentDataPaymentSystems `json:"paymentSystems,omitempty"`
	// Information on each payment.
	Payments []interface{} `json:"payments,omitempty"`
}

// CartSimulation200ApplicationJSONRatesAndBenefitsData - Information on rates and benefits that apply to the order.
type CartSimulation200ApplicationJSONRatesAndBenefitsData struct {
	// List with rates and benefits identifiers.
	RateAndBenefitsIdentifiers []interface{} `json:"rateAndBenefitsIdentifiers,omitempty"`
	// List with rates and benefits teasers.
	Teaser []interface{} `json:"teaser,omitempty"`
}

// CartSimulation200ApplicationJSON - OK
type CartSimulation200ApplicationJSON struct {
	// Three letter ISO code of the country of the shipping address.
	Country *string `json:"country,omitempty"`
	// Information on each item in the cart.
	Items []CartSimulation200ApplicationJSONItems `json:"items,omitempty"`
	// Array with logistics information on each item of the `items` array in the `orderForm`.
	LogisticsInfo []CartSimulation200ApplicationJSONLogisticsInfo `json:"logisticsInfo,omitempty"`
	// Object containing promotion data such as coupon tracking information and internal or external UTMs.
	MarketingData map[string]interface{} `json:"marketingData,omitempty"`
	// Payment data information.
	PaymentData *CartSimulation200ApplicationJSONPaymentData `json:"paymentData,omitempty"`
	// Postal Code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Information on rates and benefits that apply to the order.
	RatesAndBenefitsData *CartSimulation200ApplicationJSONRatesAndBenefitsData `json:"ratesAndBenefitsData,omitempty"`
	// Array containing the data of the item selected as a gift.
	SelectableGifts []interface{} `json:"selectableGifts,omitempty"`
}

type CartSimulationResponse struct {
	// OK
	CartSimulation200ApplicationJSONObject *CartSimulation200ApplicationJSON
	ContentType                            string
	StatusCode                             int
	RawResponse                            *http.Response
}
