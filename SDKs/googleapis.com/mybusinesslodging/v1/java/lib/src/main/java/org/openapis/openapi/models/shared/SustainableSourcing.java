/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SustainableSourcing - Sustainable sourcing practices implemented at the hotel.
 */
public class SustainableSourcing {
    /**
     * Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ecoFriendlyToiletries")
    public Boolean ecoFriendlyToiletries;

    public SustainableSourcing withEcoFriendlyToiletries(Boolean ecoFriendlyToiletries) {
        this.ecoFriendlyToiletries = ecoFriendlyToiletries;
        return this;
    }
    
    /**
     * Eco friendly toiletries exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ecoFriendlyToiletriesException")
    public SustainableSourcingEcoFriendlyToiletriesExceptionEnum ecoFriendlyToiletriesException;

    public SustainableSourcing withEcoFriendlyToiletriesException(SustainableSourcingEcoFriendlyToiletriesExceptionEnum ecoFriendlyToiletriesException) {
        this.ecoFriendlyToiletriesException = ecoFriendlyToiletriesException;
        return this;
    }
    
    /**
     * Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locallySourcedFoodAndBeverages")
    public Boolean locallySourcedFoodAndBeverages;

    public SustainableSourcing withLocallySourcedFoodAndBeverages(Boolean locallySourcedFoodAndBeverages) {
        this.locallySourcedFoodAndBeverages = locallySourcedFoodAndBeverages;
        return this;
    }
    
    /**
     * Locally sourced food and beverages exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locallySourcedFoodAndBeveragesException")
    public SustainableSourcingLocallySourcedFoodAndBeveragesExceptionEnum locallySourcedFoodAndBeveragesException;

    public SustainableSourcing withLocallySourcedFoodAndBeveragesException(SustainableSourcingLocallySourcedFoodAndBeveragesExceptionEnum locallySourcedFoodAndBeveragesException) {
        this.locallySourcedFoodAndBeveragesException = locallySourcedFoodAndBeveragesException;
        return this;
    }
    
    /**
     * Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organicCageFreeEggs")
    public Boolean organicCageFreeEggs;

    public SustainableSourcing withOrganicCageFreeEggs(Boolean organicCageFreeEggs) {
        this.organicCageFreeEggs = organicCageFreeEggs;
        return this;
    }
    
    /**
     * Organic cage free eggs exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organicCageFreeEggsException")
    public SustainableSourcingOrganicCageFreeEggsExceptionEnum organicCageFreeEggsException;

    public SustainableSourcing withOrganicCageFreeEggsException(SustainableSourcingOrganicCageFreeEggsExceptionEnum organicCageFreeEggsException) {
        this.organicCageFreeEggsException = organicCageFreeEggsException;
        return this;
    }
    
    /**
     * Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organicFoodAndBeverages")
    public Boolean organicFoodAndBeverages;

    public SustainableSourcing withOrganicFoodAndBeverages(Boolean organicFoodAndBeverages) {
        this.organicFoodAndBeverages = organicFoodAndBeverages;
        return this;
    }
    
    /**
     * Organic food and beverages exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organicFoodAndBeveragesException")
    public SustainableSourcingOrganicFoodAndBeveragesExceptionEnum organicFoodAndBeveragesException;

    public SustainableSourcing withOrganicFoodAndBeveragesException(SustainableSourcingOrganicFoodAndBeveragesExceptionEnum organicFoodAndBeveragesException) {
        this.organicFoodAndBeveragesException = organicFoodAndBeveragesException;
        return this;
    }
    
    /**
     * Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsiblePurchasingPolicy")
    public Boolean responsiblePurchasingPolicy;

    public SustainableSourcing withResponsiblePurchasingPolicy(Boolean responsiblePurchasingPolicy) {
        this.responsiblePurchasingPolicy = responsiblePurchasingPolicy;
        return this;
    }
    
    /**
     * Responsible purchasing policy exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsiblePurchasingPolicyException")
    public SustainableSourcingResponsiblePurchasingPolicyExceptionEnum responsiblePurchasingPolicyException;

    public SustainableSourcing withResponsiblePurchasingPolicyException(SustainableSourcingResponsiblePurchasingPolicyExceptionEnum responsiblePurchasingPolicyException) {
        this.responsiblePurchasingPolicyException = responsiblePurchasingPolicyException;
        return this;
    }
    
    /**
     * Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch "avoid" list, and must sustainably source seafood listed as "good alternative," "eco-certified," and "best choice". The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsiblySourcesSeafood")
    public Boolean responsiblySourcesSeafood;

    public SustainableSourcing withResponsiblySourcesSeafood(Boolean responsiblySourcesSeafood) {
        this.responsiblySourcesSeafood = responsiblySourcesSeafood;
        return this;
    }
    
    /**
     * Responsibly sources seafood exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsiblySourcesSeafoodException")
    public SustainableSourcingResponsiblySourcesSeafoodExceptionEnum responsiblySourcesSeafoodException;

    public SustainableSourcing withResponsiblySourcesSeafoodException(SustainableSourcingResponsiblySourcesSeafoodExceptionEnum responsiblySourcesSeafoodException) {
        this.responsiblySourcesSeafoodException = responsiblySourcesSeafoodException;
        return this;
    }
    
    /**
     * Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("veganMeals")
    public Boolean veganMeals;

    public SustainableSourcing withVeganMeals(Boolean veganMeals) {
        this.veganMeals = veganMeals;
        return this;
    }
    
    /**
     * Vegan meals exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("veganMealsException")
    public SustainableSourcingVeganMealsExceptionEnum veganMealsException;

    public SustainableSourcing withVeganMealsException(SustainableSourcingVeganMealsExceptionEnum veganMealsException) {
        this.veganMealsException = veganMealsException;
        return this;
    }
    
    /**
     * Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vegetarianMeals")
    public Boolean vegetarianMeals;

    public SustainableSourcing withVegetarianMeals(Boolean vegetarianMeals) {
        this.vegetarianMeals = vegetarianMeals;
        return this;
    }
    
    /**
     * Vegetarian meals exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vegetarianMealsException")
    public SustainableSourcingVegetarianMealsExceptionEnum vegetarianMealsException;

    public SustainableSourcing withVegetarianMealsException(SustainableSourcingVegetarianMealsExceptionEnum vegetarianMealsException) {
        this.vegetarianMealsException = vegetarianMealsException;
        return this;
    }
    
    public SustainableSourcing(){}
}
