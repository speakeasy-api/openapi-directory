// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IftttRulePostRuleTypeEnum string

const (
	IftttRulePostRuleTypeEnumHTTPIfttt IftttRulePostRuleTypeEnum = "http/ifttt"
)

func (e IftttRulePostRuleTypeEnum) ToPointer() *IftttRulePostRuleTypeEnum {
	return &e
}

func (e *IftttRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/ifttt":
		*e = IftttRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IftttRulePostRuleTypeEnum: %v", v)
	}
}

type IftttRulePostTarget struct {
	EventName  string `json:"eventName"`
	WebhookKey string `json:"webhookKey"`
}

type IftttRulePost struct {
	RequestMode string                    `json:"requestMode"`
	RuleType    IftttRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                `json:"source"`
	Status      *string                   `json:"status,omitempty"`
	Target      IftttRulePostTarget       `json:"target"`
}
