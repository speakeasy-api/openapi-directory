"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBodyGroupsEnum(str, Enum):
    TAX = 'tax'
    WEALTH_MANAGEMENT = 'wealth management'
    SOCIAL = 'social'
    SOCIAL_MANAGER = 'social manager'
    PURCHASES = 'purchases'
    SALES = 'sales'
    LEGAL = 'legal'
    ACCOUNTING = 'accounting'

class PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBodyRoleEnum(str, Enum):
    COLLABORATOR = 'collaborator'
    ASSISTANT = 'assistant'
    EMPTY = 'empty'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBody:
    r"""Portfolio to modify"""
    
    apply: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Apply'), 'exclude': lambda f: f is None }})  
    groups: Optional[PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBodyGroupsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Groups'), 'exclude': lambda f: f is None }})  
    is_admin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAdmin'), 'exclude': lambda f: f is None }})  
    role: Optional[PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBodyRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    member_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'memberId', 'style': 'simple', 'explode': False }})
    r"""memberId of the person"""  
    portfolio_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'portfolioId', 'style': 'simple', 'explode': False }})
    r"""id of the portfolio"""  
    request_body: PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Portfolio to modify"""  
    

@dataclasses.dataclass
class PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    