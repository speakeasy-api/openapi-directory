"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_streetsegment as shared_tfl_api_presentation_entities_streetsegment
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesStreet:
    
    closure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closure'), 'exclude': lambda f: f is None }})
    r"""Type of road closure. Some example values:
                Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
                Partial Closure = road is partially blocked, closed or restricted. 
                Full Closure = road is fully blocked or closed.
    """  
    directions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directions'), 'exclude': lambda f: f is None }})
    r"""The direction of the disruption on the street. Some example values:
                All Directions
                All Approaches
                Clockwise
                Anti-Clockwise
                Northbound
                Eastbound
                Southbound
                Westbound
                Both Directions
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Street name"""  
    segments: Optional[list[shared_tfl_api_presentation_entities_streetsegment.TflAPIPresentationEntitiesStreetSegment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segments'), 'exclude': lambda f: f is None }})
    r"""Geographic description of the sections of this street that are affected."""  
    source_system_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceSystemId'), 'exclude': lambda f: f is None }})
    r"""The ID from the source system of the disruption that this street belongs to."""  
    source_system_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceSystemKey'), 'exclude': lambda f: f is None }})
    r"""The key of the source system of the disruption that this street belongs to."""  
    