/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class VcdVappSnapshotSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archivalLocationIds")
    public String[] archivalLocationIds;

    public VcdVappSnapshotSummary withArchivalLocationIds(String[] archivalLocationIds) {
        this.archivalLocationIds = archivalLocationIds;
        return this;
    }
    
    /**
     * Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudState")
    public Long cloudState;

    public VcdVappSnapshotSummary withCloudState(Long cloudState) {
        this.cloudState = cloudState;
        return this;
    }
    
    /**
     * The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudStorageTier")
    public SnapshotCloudStorageTierEnum cloudStorageTier;

    public VcdVappSnapshotSummary withCloudStorageTier(SnapshotCloudStorageTierEnum cloudStorageTier) {
        this.cloudStorageTier = cloudStorageTier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consistencyLevel")
    public String consistencyLevel;

    public VcdVappSnapshotSummary withConsistencyLevel(String consistencyLevel) {
        this.consistencyLevel = consistencyLevel;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;

    public VcdVappSnapshotSummary withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationDate")
    public OffsetDateTime expirationDate;

    public VcdVappSnapshotSummary withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public VcdVappSnapshotSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexState")
    public Long indexState;

    public VcdVappSnapshotSummary withIndexState(Long indexState) {
        this.indexState = indexState;
        return this;
    }
    
    /**
     * A Boolean that indicates whether or not custom retention is applied to the snapshot.
     * 
     */
    @JsonProperty("isCustomRetentionApplied")
    public Boolean isCustomRetentionApplied;

    public VcdVappSnapshotSummary withIsCustomRetentionApplied(Boolean isCustomRetentionApplied) {
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        return this;
    }
    
    @JsonProperty("isOnDemandSnapshot")
    public Boolean isOnDemandSnapshot;

    public VcdVappSnapshotSummary withIsOnDemandSnapshot(Boolean isOnDemandSnapshot) {
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPlacedOnLegalHold")
    public Boolean isPlacedOnLegalHold;

    public VcdVappSnapshotSummary withIsPlacedOnLegalHold(Boolean isPlacedOnLegalHold) {
        this.isPlacedOnLegalHold = isPlacedOnLegalHold;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRetainedByRetentionLockSla")
    public Boolean isRetainedByRetentionLockSla;

    public VcdVappSnapshotSummary withIsRetainedByRetentionLockSla(Boolean isRetainedByRetentionLockSla) {
        this.isRetainedByRetentionLockSla = isRetainedByRetentionLockSla;
        return this;
    }
    
    /**
     * Boolean value that indicates whether a vApp snapshot is synchronized with the source vApp. Set to 'true' when the vApp snapshot is synchronized, and set to 'false' when it is not synchronized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSynchronized")
    public Boolean isSynchronized;

    public VcdVappSnapshotSummary withIsSynchronized(Boolean isSynchronized) {
        this.isSynchronized = isSynchronized;
        return this;
    }
    
    /**
     * ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentSnapshotId")
    public String parentSnapshotId;

    public VcdVappSnapshotSummary withParentSnapshotId(String parentSnapshotId) {
        this.parentSnapshotId = parentSnapshotId;
        return this;
    }
    
    @JsonProperty("replicationLocationIds")
    public String[] replicationLocationIds;

    public VcdVappSnapshotSummary withReplicationLocationIds(String[] replicationLocationIds) {
        this.replicationLocationIds = replicationLocationIds;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaId")
    public String slaId;

    public VcdVappSnapshotSummary withSlaId(String slaId) {
        this.slaId = slaId;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaName")
    public String slaName;

    public VcdVappSnapshotSummary withSlaName(String slaName) {
        this.slaName = slaName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotRetentionInfo")
    public SnapshotRetentionInfo snapshotRetentionInfo;

    public VcdVappSnapshotSummary withSnapshotRetentionInfo(SnapshotRetentionInfo snapshotRetentionInfo) {
        this.snapshotRetentionInfo = snapshotRetentionInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceObjectType")
    public String sourceObjectType;

    public VcdVappSnapshotSummary withSourceObjectType(String sourceObjectType) {
        this.sourceObjectType = sourceObjectType;
        return this;
    }
    
    /**
     * ID assigned to the vApp object that is the source of the specified snapshot object.
     */
    @JsonProperty("vappName")
    public String vappName;

    public VcdVappSnapshotSummary withVappName(String vappName) {
        this.vappName = vappName;
        return this;
    }
    
    @JsonProperty("vmSnapshots")
    public VcdVmSnapshotSummary[] vmSnapshots;

    public VcdVappSnapshotSummary withVmSnapshots(VcdVmSnapshotSummary[] vmSnapshots) {
        this.vmSnapshots = vmSnapshots;
        return this;
    }
    
    public VcdVappSnapshotSummary(@JsonProperty("date") OffsetDateTime date, @JsonProperty("id") String id, @JsonProperty("isCustomRetentionApplied") Boolean isCustomRetentionApplied, @JsonProperty("isOnDemandSnapshot") Boolean isOnDemandSnapshot, @JsonProperty("replicationLocationIds") String[] replicationLocationIds, @JsonProperty("slaId") String slaId, @JsonProperty("slaName") String slaName, @JsonProperty("vappName") String vappName, @JsonProperty("vmSnapshots") VcdVmSnapshotSummary[] vmSnapshots) {
        this.date = date;
        this.id = id;
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        this.replicationLocationIds = replicationLocationIds;
        this.slaId = slaId;
        this.slaName = slaName;
        this.vappName = vappName;
        this.vmSnapshots = vmSnapshots;
  }
}
