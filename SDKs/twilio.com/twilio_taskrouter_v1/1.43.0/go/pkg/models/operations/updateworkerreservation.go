// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateWorkerReservationServerList = []string{
	"https://taskrouter.twilio.com",
}

type UpdateWorkerReservationSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum - The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum string

const (
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumHead   UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "HEAD"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumGet    UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "GET"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumPost   UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "POST"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumPatch  UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "PATCH"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumPut    UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "PUT"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnumDelete UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum = "DELETE"
)

func (e UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum) ToPointer() *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum {
	return &e
}

func (e *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum: %v", v)
	}
}

// UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum - The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum string

const (
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumHead   UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "HEAD"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumGet    UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "GET"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumPost   UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "POST"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumPatch  UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "PATCH"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumPut    UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "PUT"
	UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnumDelete UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum = "DELETE"
)

func (e UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum) ToPointer() *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum {
	return &e
}

func (e *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum: %v", v)
	}
}

// UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum - The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum string

const (
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumHead   UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "HEAD"
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumGet    UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "GET"
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumPost   UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "POST"
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumPatch  UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "PATCH"
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumPut    UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "PUT"
	UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnumDelete UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum = "DELETE"
)

func (e UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum) ToPointer() *UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum {
	return &e
}

func (e *UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum: %v", v)
	}
}

// UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
type UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum string

const (
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumHead   UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "HEAD"
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumGet    UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "GET"
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumPost   UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "POST"
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumPatch  UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "PATCH"
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumPut    UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "PUT"
	UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnumDelete UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum = "DELETE"
)

func (e UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum) ToPointer() *UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum {
	return &e
}

func (e *UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum: %v", v)
	}
}

// UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
type UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum string

const (
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumHead   UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "HEAD"
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumGet    UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "GET"
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumPost   UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "POST"
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumPatch  UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "PATCH"
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumPut    UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "PUT"
	UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnumDelete UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum = "DELETE"
)

func (e UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum) ToPointer() *UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum {
	return &e
}

func (e *UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum: %v", v)
	}
}

type UpdateWorkerReservationUpdateWorkerReservationRequest struct {
	// Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
	Beep *string `form:"name=Beep"`
	// Whether to play a notification beep when the customer joins.
	BeepOnCustomerEntrance *bool `form:"name=BeepOnCustomerEntrance"`
	// Whether to accept a reservation when executing a Call instruction.
	CallAccept *bool `form:"name=CallAccept"`
	// The Caller ID of the outbound call when executing a Call instruction.
	CallFrom *string `form:"name=CallFrom"`
	// Whether to record both legs of a call when executing a Call instruction.
	CallRecord *string `form:"name=CallRecord"`
	// The URL to call for the completed call event when executing a Call instruction.
	CallStatusCallbackURL *string `form:"name=CallStatusCallbackUrl"`
	// The timeout for a call when executing a Call instruction.
	CallTimeout *int64 `form:"name=CallTimeout"`
	// The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	CallTo *string `form:"name=CallTo"`
	// TwiML URI executed on answering the worker's leg as a result of the Call instruction.
	CallURL *string `form:"name=CallUrl"`
	// Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
	ConferenceRecord *string `form:"name=ConferenceRecord"`
	// The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
	ConferenceRecordingStatusCallback *string `form:"name=ConferenceRecordingStatusCallback"`
	// The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceRecordingStatusCallbackMethod *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum `form:"name=ConferenceRecordingStatusCallbackMethod"`
	// The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
	ConferenceStatusCallback *string `form:"name=ConferenceStatusCallback"`
	// The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
	ConferenceStatusCallbackEvent []shared.WorkerReservationEnumConferenceEventEnum `form:"name=ConferenceStatusCallbackEvent"`
	// The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceStatusCallbackMethod *UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum `form:"name=ConferenceStatusCallbackMethod"`
	// Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
	ConferenceTrim *string `form:"name=ConferenceTrim"`
	// The caller ID of the call to the worker when executing a Dequeue instruction.
	DequeueFrom *string `form:"name=DequeueFrom"`
	// The SID of the Activity resource to start after executing a Dequeue instruction.
	DequeuePostWorkActivitySid *string `form:"name=DequeuePostWorkActivitySid"`
	// Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
	DequeueRecord *string `form:"name=DequeueRecord"`
	// The call progress events sent via webhooks as a result of a Dequeue instruction.
	DequeueStatusCallbackEvent []string `form:"name=DequeueStatusCallbackEvent"`
	// The callback URL for completed call event when executing a Dequeue instruction.
	DequeueStatusCallbackURL *string `form:"name=DequeueStatusCallbackUrl"`
	// The timeout for call when executing a Dequeue instruction.
	DequeueTimeout *int64 `form:"name=DequeueTimeout"`
	// The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	DequeueTo *string `form:"name=DequeueTo"`
	// Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
	EarlyMedia *bool `form:"name=EarlyMedia"`
	// Whether to end the conference when the customer leaves.
	EndConferenceOnCustomerExit *bool `form:"name=EndConferenceOnCustomerExit"`
	// Whether to end the conference when the agent leaves.
	EndConferenceOnExit *bool `form:"name=EndConferenceOnExit"`
	// The caller ID of the call to the worker when executing a Conference instruction.
	From *string `form:"name=From"`
	// The assignment instruction for the reservation.
	Instruction *string `form:"name=Instruction"`
	// The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
	MaxParticipants *int64 `form:"name=MaxParticipants"`
	// Whether the agent is muted in the conference. Defaults to `false`.
	Muted *bool `form:"name=Muted"`
	// The new worker activity SID after executing a Conference instruction.
	PostWorkActivitySid *string `form:"name=PostWorkActivitySid"`
	// Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
	Record *bool `form:"name=Record"`
	// The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
	RecordingChannels *string `form:"name=RecordingChannels"`
	// The URL that we should call using the `recording_status_callback_method` when the recording status changes.
	RecordingStatusCallback *string `form:"name=RecordingStatusCallback"`
	// The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	RecordingStatusCallbackMethod *UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum `form:"name=RecordingStatusCallbackMethod"`
	// Whether the reservation should be accepted when executing a Redirect instruction.
	RedirectAccept *bool `form:"name=RedirectAccept"`
	// The Call SID of the call parked in the queue when executing a Redirect instruction.
	RedirectCallSid *string `form:"name=RedirectCallSid"`
	// TwiML URI to redirect the call to when executing the Redirect instruction.
	RedirectURL *string `form:"name=RedirectUrl"`
	// The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
	Region            *string                                 `form:"name=Region"`
	ReservationStatus *shared.WorkerReservationEnumStatusEnum `form:"name=ReservationStatus"`
	// The SIP password for authentication.
	SipAuthPassword *string `form:"name=SipAuthPassword"`
	// The SIP username used for authentication.
	SipAuthUsername *string `form:"name=SipAuthUsername"`
	// Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
	StartConferenceOnEnter *bool `form:"name=StartConferenceOnEnter"`
	// The URL we should call using the `status_callback_method` to send status information to your application.
	StatusCallback *string `form:"name=StatusCallback"`
	// The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
	StatusCallbackEvent []shared.WorkerReservationEnumCallStatusEnum `form:"name=StatusCallbackEvent"`
	// The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
	StatusCallbackMethod *UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum `form:"name=StatusCallbackMethod"`
	// The timeout for a call when executing a Conference instruction.
	Timeout *int64 `form:"name=Timeout"`
	// The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	To *string `form:"name=To"`
	// The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
	WaitMethod *UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum `form:"name=WaitMethod"`
	// The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
	WaitURL *string `form:"name=WaitUrl"`
	// The new worker activity SID if rejecting a reservation.
	WorkerActivitySid *string `form:"name=WorkerActivitySid"`
}

type UpdateWorkerReservationRequest struct {
	// The If-Match HTTP request header
	IfMatch     *string                                                `header:"style=simple,explode=false,name=If-Match"`
	RequestBody *UpdateWorkerReservationUpdateWorkerReservationRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The SID of the WorkerReservation resource to update.
	Sid string `pathParam:"style=simple,explode=false,name=Sid"`
	// The SID of the reserved Worker resource with the WorkerReservation resources to update.
	WorkerSid string `pathParam:"style=simple,explode=false,name=WorkerSid"`
	// The SID of the Workspace with the WorkerReservation resources to update.
	WorkspaceSid string `pathParam:"style=simple,explode=false,name=WorkspaceSid"`
}

type UpdateWorkerReservationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TaskrouterV1WorkspaceWorkerWorkerReservation *shared.TaskrouterV1WorkspaceWorkerWorkerReservation
}
