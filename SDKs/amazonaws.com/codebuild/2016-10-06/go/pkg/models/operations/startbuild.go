// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartBuildXAmzTargetEnum
type StartBuildXAmzTargetEnum string

const (
	StartBuildXAmzTargetEnumCodeBuild20161006StartBuild StartBuildXAmzTargetEnum = "CodeBuild_20161006.StartBuild"
)

func (e StartBuildXAmzTargetEnum) ToPointer() *StartBuildXAmzTargetEnum {
	return &e
}

func (e *StartBuildXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeBuild_20161006.StartBuild":
		*e = StartBuildXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartBuildXAmzTargetEnum: %v", v)
	}
}

type StartBuildRequest struct {
	StartBuildInput   shared.StartBuildInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartBuildXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartBuildResponse struct {
	// AccountLimitExceededException
	AccountLimitExceededException interface{}
	ContentType                   string
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StartBuildOutput *shared.StartBuildOutput
	StatusCode       int
	RawResponse      *http.Response
}
