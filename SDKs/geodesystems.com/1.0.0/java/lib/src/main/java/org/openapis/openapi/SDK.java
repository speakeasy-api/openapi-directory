/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * Search for data in lots of places - manage your documents, photos and critical business knowledge - communicate and coordinate with blogs, interactive wikis, and data integration dashboards.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://geodesystems.com:443/",
	};
  	
    /**
     *  API for Extract sheets
     */
    public ServiceMediaTabularExtractsheet serviceMediaTabularExtractsheet;
    /**
     * Search API for '2017 Boulder Election Expenditures' entry type
     */
    public Type2017BoulderElectionExpenditures type2017BoulderElectionExpenditures;
    /**
     * Search API for 'Any file type' entry type
     */
    public TypeAny typeAny;
    /**
     * Search API for 'Before and After Images' entry type
     */
    public TypeBeforeafter typeBeforeafter;
    /**
     * Search API for 'Bibliographic Entry' entry type
     */
    public TypeBiblio typeBiblio;
    /**
     * Search API for 'DICOM File' entry type
     */
    public TypeBioDicom typeBioDicom;
    /**
     * Search API for 'DICOM Test File' entry type
     */
    public TypeBioDicomTest typeBioDicomTest;
    /**
     * Search API for 'FASTA File' entry type
     */
    public TypeBioFasta typeBioFasta;
    /**
     * Search API for 'FASTQ File' entry type
     */
    public TypeBioFastq typeBioFastq;
    /**
     * Search API for 'HMMER Index File' entry type
     */
    public TypeBioHmmerIndex typeBioHmmerIndex;
    /**
     * Search API for 'OME TIFF File' entry type
     */
    public TypeBioOmeTiff typeBioOmeTiff;
    /**
     * Search API for 'Assay' entry type
     */
    public TypeBioOntologyAssay typeBioOntologyAssay;
    /**
     * Search API for 'Cohort' entry type
     */
    public TypeBioOntologyCohort typeBioOntologyCohort;
    /**
     * Search API for 'Person' entry type
     */
    public TypeBioOntologyPerson typeBioOntologyPerson;
    /**
     * Search API for 'Sample' entry type
     */
    public TypeBioOntologySample typeBioOntologySample;
    /**
     * Search API for 'Series' entry type
     */
    public TypeBioOntologySeries typeBioOntologySeries;
    /**
     * Search API for 'Study' entry type
     */
    public TypeBioOntologyStudy typeBioOntologyStudy;
    /**
     * Search API for 'SAM Data' entry type
     */
    public TypeBioSam typeBioSam;
    /**
     * Search API for 'PDB Protein File' entry type
     */
    public TypeBioSfPdb typeBioSfPdb;
    /**
     * Search API for 'Sequence Read Archive' entry type
     */
    public TypeBioSra typeBioSra;
    /**
     * Search API for 'Stockholm File' entry type
     */
    public TypeBioStockholm typeBioStockholm;
    /**
     * Search API for 'Taxonomic Entry' entry type
     */
    public TypeBioTaxonomy typeBioTaxonomy;
    /**
     * Search API for 'Weblog Entry' entry type
     */
    public TypeBlogentry typeBlogentry;
    /**
     * Search API for 'Boulder Rental Housing' entry type
     */
    public TypeBolderRentalHousing typeBolderRentalHousing;
    /**
     * Search API for 'Bookmarks' entry type
     */
    public TypeBookmarks typeBookmarks;
    /**
     * Search API for 'Boston Crime' entry type
     */
    public TypeBostonCrime typeBostonCrime;
    /**
     * Search API for 'Boulder 2017 Election Contributions' entry type
     */
    public TypeBoulder2017ElectionContributions typeBoulder2017ElectionContributions;
    /**
     * Search API for 'Boulder Campaign Contributions' entry type
     */
    public TypeBoulderCampaignContributions typeBoulderCampaignContributions;
    /**
     * Search API for 'Boulder Consulting Services Database' entry type
     */
    public TypeBoulderConsultingServices typeBoulderConsultingServices;
    /**
     * Search API for 'Boulder County Voter Details' entry type
     */
    public TypeBoulderCountyVoterDetails typeBoulderCountyVoterDetails;
    /**
     * Search API for 'Boulder Crime Reports' entry type
     */
    public TypeBoulderCrimes typeBoulderCrimes;
    /**
     * Search API for 'Boulder Council Emails' entry type
     */
    public TypeBoulderEmails typeBoulderEmails;
    /**
     * Search API for 'Boulder Employee Salaries' entry type
     */
    public TypeBoulderEmployeeSalaries typeBoulderEmployeeSalaries;
    /**
     * Search API for 'Calendar' entry type
     */
    public TypeCalendar typeCalendar;
    /**
     * Search API for 'Campaign Donors' entry type
     */
    public TypeCampaignDonors typeCampaignDonors;
    /**
     * Search API for 'Campaign Expenditures' entry type
     */
    public TypeCampaignExpenditures typeCampaignExpenditures;
    /**
     * Search API for 'Catalog Link' entry type
     */
    public TypeCataloglink typeCataloglink;
    /**
     * Search API for 'Gridded Data File' entry type
     */
    public TypeCdmGrid typeCdmGrid;
    /**
     * Search API for 'Chat Room' entry type
     */
    public TypeChatroom typeChatroom;
    /**
     * Search API for 'Colorado Water Rights' entry type
     */
    public TypeColoradoWaterRights typeColoradoWaterRights;
    /**
     * Search API for 'Committee Donations' entry type
     */
    public TypeCommitteeDonations typeCommitteeDonations;
    /**
     * Search API for 'Data Hub' entry type
     */
    public TypeCommunityDatahub typeCommunityDatahub;
    /**
     * Search API for 'Facility' entry type
     */
    public TypeCommunityResource typeCommunityResource;
    /**
     * Search API for 'Construction Permits' entry type
     */
    public TypeConstructionPermits typeConstructionPermits;
    /**
     * Search API for 'Contact List' entry type
     */
    public TypeContact typeContact;
    /**
     * Search API for 'Colorado Health Indicators' entry type
     */
    public TypeDbCoIndicators typeDbCoIndicators;
    /**
     * Search API for 'Landsat Satellite Data' entry type
     */
    public TypeEarthSatelliteLandsat typeEarthSatelliteLandsat;
    /**
     * Search API for 'FAQ' entry type
     */
    public TypeFaq typeFaq;
    /**
     * Search API for 'FEC PACs' entry type
     */
    public TypeFecPacs typeFecPacs;
    /**
     * Search API for 'Candidates' entry type
     */
    public TypeFeccandidates typeFeccandidates;
    /**
     * Search API for 'RSS/ATOM Feed' entry type
     */
    public TypeFeed typeFeed;
    /**
     * Search API for 'File' entry type
     */
    public TypeFile typeFile;
    /**
     * Search API for 'FITS Data File' entry type
     */
    public TypeFitsData typeFitsData;
    /**
     * Search API for 'Remote FTP File View' entry type
     */
    public TypeFtp typeFtp;
    /**
     * Search API for 'Countdown' entry type
     */
    public TypeGadgetsCountdown typeGadgetsCountdown;
    /**
     * Search API for 'Stock Ticker' entry type
     */
    public TypeGadgetsStock typeGadgetsStock;
    /**
     * Search API for 'Weather' entry type
     */
    public TypeGadgetsWeather typeGadgetsWeather;
    /**
     * Search API for 'Census Tracts' entry type
     */
    public TypeGazeteerCensusTracts typeGazeteerCensusTracts;
    /**
     * Search API for 'Census Gazeteer Counties' entry type
     */
    public TypeGazeteerCounties typeGazeteerCounties;
    /**
     * Search API for 'GeoJson File' entry type
     */
    public TypeGeoGe typeGeoGe;
    /**
     * Search API for 'GeoTIFF' entry type
     */
    public TypeGeoGeotiff typeGeoGeotiff;
    /**
     * Search API for 'GPX GPS File' entry type
     */
    public TypeGeoGpx typeGeoGpx;
    /**
     * Search API for 'HDF5 File' entry type
     */
    public TypeGeoHdf5 typeGeoHdf5;
    /**
     * Search API for 'KML/KMZ File' entry type
     */
    public TypeGeoKml typeGeoKml;
    /**
     * Search API for 'Shapefile' entry type
     */
    public TypeGeoShapefile typeGeoShapefile;
    /**
     * Search API for 'Shapefile with FIPS Code' entry type
     */
    public TypeGeoShapefileFips typeGeoShapefileFips;
    /**
     * Search API for 'Glossary' entry type
     */
    public TypeGlossary typeGlossary;
    /**
     * Search API for 'Grid Aggregation' entry type
     */
    public TypeGridaggregation typeGridaggregation;
    /**
     * Search API for 'Folder' entry type
     */
    public TypeGroup typeGroup;
    /**
     * Search API for 'HipChat Group' entry type
     */
    public TypeHipchatGroup typeHipchatGroup;
    /**
     * Search API for 'Home Page' entry type
     */
    public TypeHomepage typeHomepage;
    /**
     * Search API for 'Incident' entry type
     */
    public TypeIncident typeIncident;
    /**
     * Search API for 'Jeopardy' entry type
     */
    public TypeJeopardy typeJeopardy;
    /**
     * Search API for 'Lat-Lon Image' entry type
     */
    public TypeLatlonimage typeLatlonimage;
    /**
     * Search API for 'LiDAR Collection' entry type
     */
    public TypeLidarCollection typeLidarCollection;
    /**
     * Search API for 'LAS Lidar Data' entry type
     */
    public TypeLidarLas typeLidarLas;
    /**
     * Search API for 'LVIS Lidar Data' entry type
     */
    public TypeLidarLvis typeLidarLvis;
    /**
     * Search API for 'Link' entry type
     */
    public TypeLink typeLink;
    /**
     * Search API for 'Server Side Files' entry type
     */
    public TypeLocalfiles typeLocalfiles;
    /**
     * Search API for 'Locations' entry type
     */
    public TypeLocations typeLocations;
    /**
     * Search API for 'Google Map URL' entry type
     */
    public TypeMapGooglemap typeMapGooglemap;
    /**
     * Search API for 'Audio File' entry type
     */
    public TypeMediaAudiofile typeMediaAudiofile;
    /**
     * Search API for 'Image Loop' entry type
     */
    public TypeMediaImageloop typeMediaImageloop;
    /**
     * Search API for 'Photo Album' entry type
     */
    public TypeMediaPhotoalbum typeMediaPhotoalbum;
    /**
     * Search API for 'Video Channel' entry type
     */
    public TypeMediaVideoChannel typeMediaVideoChannel;
    /**
     * Search API for 'Quicktime Video' entry type
     */
    public TypeMediaVideoQuicktime typeMediaVideoQuicktime;
    /**
     * Search API for 'YouTube Video' entry type
     */
    public TypeMediaYoutubevideo typeMediaYoutubevideo;
    /**
     * Search API for 'Notes' entry type
     */
    public TypeNotes typeNotes;
    /**
     * Search API for 'Json File' entry type
     */
    public TypeNotesJsonfile typeNotesJsonfile;
    /**
     * Search API for 'Note' entry type
     */
    public TypeNotesNote typeNotesNote;
    /**
     * Search API for 'Notebook' entry type
     */
    public TypeNotesNotebook typeNotesNotebook;
    /**
     * Search API for 'NWS Forecast Feed' entry type
     */
    public TypeNwsfeed typeNwsfeed;
    /**
     * Search API for 'OPeNDAP Link' entry type
     */
    public TypeOpendaplink typeOpendaplink;
    /**
     * Search API for 'OWL Class' entry type
     */
    public TypeOwlClass typeOwlClass;
    /**
     * Search API for 'OWL Ontology' entry type
     */
    public TypeOwlOntology typeOwlOntology;
    /**
     * Search API for 'Paste Text Entry' entry type
     */
    public TypePasteitentry typePasteitentry;
    /**
     * Search API for 'Text Point Data' entry type
     */
    public TypePointText typePointText;
    /**
     * Search API for 'Police Stop Data' entry type
     */
    public TypePoliceStopData typePoliceStopData;
    /**
     * Search API for 'Poll' entry type
     */
    public TypePoll typePoll;
    /**
     * Search API for 'Campaign' entry type
     */
    public TypeProjectCampaign typeProjectCampaign;
    /**
     * Search API for 'Case Study' entry type
     */
    public TypeProjectCasestudy typeProjectCasestudy;
    /**
     * Search API for 'Research Contribution' entry type
     */
    public TypeProjectContribution typeProjectContribution;
    /**
     * Search API for 'Data Format' entry type
     */
    public TypeProjectDataformat typeProjectDataformat;
    /**
     * Search API for 'Dataset' entry type
     */
    public TypeProjectDataset typeProjectDataset;
    /**
     * Search API for 'Deployment' entry type
     */
    public TypeProjectDeployment typeProjectDeployment;
    /**
     * Search API for 'Experiment' entry type
     */
    public TypeProjectExperiment typeProjectExperiment;
    /**
     * Search API for 'Field Note' entry type
     */
    public TypeProjectFieldnote typeProjectFieldnote;
    /**
     * Search API for 'Control Points File' entry type
     */
    public TypeProjectGpsControlpoints typeProjectGpsControlpoints;
    /**
     * Search API for 'Raw GPS File' entry type
     */
    public TypeProjectGpsRaw typeProjectGpsRaw;
    /**
     * Search API for 'RINEX File' entry type
     */
    public TypeProjectGpsRinex typeProjectGpsRinex;
    /**
     * Search API for 'Instrument Data Collection' entry type
     */
    public TypeProjectInstrument typeProjectInstrument;
    /**
     * Search API for 'Teaching Resource' entry type
     */
    public TypeProjectLearningResource typeProjectLearningResource;
    /**
     * Search API for 'Meeting' entry type
     */
    public TypeProjectMeeting typeProjectMeeting;
    /**
     * Search API for 'Organization' entry type
     */
    public TypeProjectOrganization typeProjectOrganization;
    /**
     * Search API for 'Program' entry type
     */
    public TypeProjectProgram typeProjectProgram;
    /**
     * Search API for 'Project' entry type
     */
    public TypeProjectProject typeProjectProject;
    /**
     * Search API for 'Data Access Service' entry type
     */
    public TypeProjectService typeProjectService;
    /**
     * Search API for 'Site' entry type
     */
    public TypeProjectSite typeProjectSite;
    /**
     * Search API for 'Software Tool' entry type
     */
    public TypeProjectSoftwarepackage typeProjectSoftwarepackage;
    /**
     * Search API for 'Standard Parameter Name' entry type
     */
    public TypeProjectStandardName typeProjectStandardName;
    /**
     * Search API for 'Survey Location' entry type
     */
    public TypeProjectSurveylocation typeProjectSurveylocation;
    /**
     * Search API for 'Vocabulary Term' entry type
     */
    public TypeProjectTerm typeProjectTerm;
    /**
     * Search API for 'Site Visit' entry type
     */
    public TypeProjectVisit typeProjectVisit;
    /**
     * Search API for 'Vocabulary' entry type
     */
    public TypeProjectVocabulary typeProjectVocabulary;
    /**
     * Search API for 'Property Sales' entry type
     */
    public TypePropertySales typePropertySales;
    /**
     * Search API for 'Property Database' entry type
     */
    public TypePropertydb typePropertydb;
    /**
     * Search API for 'IPython Notebook file' entry type
     */
    public TypePythonNotebook typePythonNotebook;
    /**
     * Search API for 'Slack Team' entry type
     */
    public TypeSlackTeam typeSlackTeam;
    /**
     * Search API for 'Status Board' entry type
     */
    public TypeStatusboard typeStatusboard;
    /**
     * Search API for 'Sunrise/Sunset Display' entry type
     */
    public TypeSunrisesunset typeSunrisesunset;
    /**
     * Search API for 'Tasks' entry type
     */
    public TypeTasks typeTasks;
    /**
     * Search API for 'Tmdb Movies' entry type
     */
    public TypeTmdbmovies typeTmdbmovies;
    /**
     * Search API for 'Todo' entry type
     */
    public TypeTodo typeTodo;
    /**
     * Search API for 'Event' entry type
     */
    public TypeTripEvent typeTripEvent;
    /**
     * Search API for 'Flight Leg' entry type
     */
    public TypeTripFlight typeTripFlight;
    /**
     * Search API for 'Lodging' entry type
     */
    public TypeTripHotel typeTripHotel;
    /**
     * Search API for 'Trip Report' entry type
     */
    public TypeTripReport typeTripReport;
    /**
     * Search API for 'Trip' entry type
     */
    public TypeTripTrip typeTripTrip;
    /**
     * Search API for 'AWC Weather Observations' entry type
     */
    public TypeTypeAwcMetar typeTypeAwcMetar;
    /**
     * Search API for 'Stock Ticker Data' entry type
     */
    public TypeTypeBizStockseries typeTypeBizStockseries;
    /**
     * Search API for 'BLS Series' entry type
     */
    public TypeTypeBlsSeries typeTypeBlsSeries;
    /**
     * Search API for 'BLS Survey' entry type
     */
    public TypeTypeBlsSurvey typeTypeBlsSurvey;
    /**
     * Search API for 'US Census ACS Data' entry type
     */
    public TypeTypeCensusAcs typeTypeCensusAcs;
    /**
     * Search API for 'Daymet Daily Weather' entry type
     */
    public TypeTypeDaymet typeTypeDaymet;
    /**
     * Search API for 'Database Table' entry type
     */
    public TypeTypeDbTable typeTypeDbTable;
    /**
     * Search API for 'CSV File' entry type
     */
    public TypeTypeDocumentCsv typeTypeDocumentCsv;
    /**
     * Search API for 'Word File' entry type
     */
    public TypeTypeDocumentDoc typeTypeDocumentDoc;
    /**
     * Search API for 'HTML File' entry type
     */
    public TypeTypeDocumentHtml typeTypeDocumentHtml;
    /**
     * Search API for 'PDF File' entry type
     */
    public TypeTypeDocumentPdf typeTypeDocumentPdf;
    /**
     * Search API for 'Powerpoint File' entry type
     */
    public TypeTypeDocumentPpt typeTypeDocumentPpt;
    /**
     * Search API for 'Excel File' entry type
     */
    public TypeTypeDocumentXls typeTypeDocumentXls;
    /**
     * Search API for 'Drilsdown Case Study' entry type
     */
    public TypeTypeDrilsdownCasestudy typeTypeDrilsdownCasestudy;
    /**
     * Search API for 'SEC EDGAR Filing' entry type
     */
    public TypeTypeEdgarFiling typeTypeEdgarFiling;
    /**
     * Search API for 'EIA Category' entry type
     */
    public TypeTypeEiaCategory typeTypeEiaCategory;
    /**
     * Search API for 'EIA Series' entry type
     */
    public TypeTypeEiaSeries typeTypeEiaSeries;
    /**
     * Search API for 'ESRI Feature Server' entry type
     */
    public TypeTypeEsriFeatureserver typeTypeEsriFeatureserver;
    /**
     * Search API for 'ESRI Geometry Server' entry type
     */
    public TypeTypeEsriGeometryserver typeTypeEsriGeometryserver;
    /**
     * Search API for 'ESRI GP Server' entry type
     */
    public TypeTypeEsriGpserver typeTypeEsriGpserver;
    /**
     * Search API for 'ESRI Image Server' entry type
     */
    public TypeTypeEsriImageserver typeTypeEsriImageserver;
    /**
     * Search API for 'ESRI Layer' entry type
     */
    public TypeTypeEsriLayer typeTypeEsriLayer;
    /**
     * Search API for 'ESRI Map Server' entry type
     */
    public TypeTypeEsriMapserver typeTypeEsriMapserver;
    /**
     * Search API for 'ESRI Services Folder' entry type
     */
    public TypeTypeEsriRestfolder typeTypeEsriRestfolder;
    /**
     * Search API for 'ESRI Web Server' entry type
     */
    public TypeTypeEsriRestserver typeTypeEsriRestserver;
    /**
     * Search API for 'ESRI Rest Service' entry type
     */
    public TypeTypeEsriRestservice typeTypeEsriRestservice;
    /**
     * Search API for 'NOAA Extremes Data' entry type
     */
    public TypeTypeExtremes typeTypeExtremes;
    /**
     * Search API for 'FRED Category' entry type
     */
    public TypeTypeFredCategory typeTypeFredCategory;
    /**
     * Search API for 'FRED Series' entry type
     */
    public TypeTypeFredSeries typeTypeFredSeries;
    /**
     * Search API for 'Transit Agency' entry type
     */
    public TypeTypeGtfsAgency typeTypeGtfsAgency;
    /**
     * Search API for 'Transit Route' entry type
     */
    public TypeTypeGtfsRoute typeTypeGtfsRoute;
    /**
     * Search API for 'Transit Route Collection' entry type
     */
    public TypeTypeGtfsRoutes typeTypeGtfsRoutes;
    /**
     * Search API for 'Transit Stop' entry type
     */
    public TypeTypeGtfsStop typeTypeGtfsStop;
    /**
     * Search API for 'Transit Stop Collection' entry type
     */
    public TypeTypeGtfsStops typeTypeGtfsStops;
    /**
     * Search API for 'Transit Trip' entry type
     */
    public TypeTypeGtfsTrip typeTypeGtfsTrip;
    /**
     * Search API for 'Hazard Data' entry type
     */
    public TypeTypeHazarddata typeTypeHazarddata;
    /**
     * Search API for 'Colorado DNR Stream Gage' entry type
     */
    public TypeTypeHydroColorado typeTypeHydroColorado;
    /**
     * Search API for 'IDV Bundle' entry type
     */
    public TypeTypeIdvBundle typeTypeIdvBundle;
    /**
     * Search API for 'Image' entry type
     */
    public TypeTypeImage typeTypeImage;
    /**
     * Search API for 'Airport Image' entry type
     */
    public TypeTypeImageAirport typeTypeImageAirport;
    /**
     * Search API for 'Webcam' entry type
     */
    public TypeTypeImageWebcam typeTypeImageWebcam;
    /**
     * Search API for 'MB Bathymetry' entry type
     */
    public TypeTypeMb typeTypeMb;
    /**
     * Search API for 'Bathymetry Collection' entry type
     */
    public TypeTypeMbCollection typeTypeMbCollection;
    /**
     * Search API for 'Basic MB point file' entry type
     */
    public TypeTypeMbPointBasic typeTypeMbPointBasic;
    /**
     * Search API for 'Metadata Dictionary' entry type
     */
    public TypeTypeMetametaDictionary typeTypeMetametaDictionary;
    /**
     * Search API for 'Metadata Field' entry type
     */
    public TypeTypeMetametaField typeTypeMetametaField;
    /**
     * Search API for 'NASA AMES File' entry type
     */
    public TypeTypeNasaames typeTypeNasaames;
    /**
     * Search API for 'NetCDF Point Subset' entry type
     */
    public TypeTypeNcss typeTypeNcss;
    /**
     * Search API for 'NITF File' entry type
     */
    public TypeTypeNitf typeTypeNitf;
    /**
     * Search API for 'Ameriflux Level 2 CSV File' entry type
     */
    public TypeTypePointAmerifluxLevel2 typeTypePointAmerifluxLevel2;
    /**
     * Search API for 'AMRC Final QC Data' entry type
     */
    public TypeTypePointAmrcFinal typeTypePointAmrcFinal;
    /**
     * Search API for 'AMRC Freewave  Data' entry type
     */
    public TypeTypePointAmrcFreewave typeTypePointAmrcFreewave;
    /**
     * Search API for 'CZO Display File Format' entry type
     */
    public TypeTypePointCzo typeTypePointCzo;
    /**
     * Search API for 'GC-Net Point Data' entry type
     */
    public TypeTypePointGcnet typeTypePointGcnet;
    /**
     * Search API for 'IAGA 2002 Geomagnetism Data' entry type
     */
    public TypeTypePointGeomagIaga2002 typeTypePointGeomagIaga2002;
    /**
     * Search API for 'WaterML' entry type
     */
    public TypeTypePointHydroWaterml typeTypePointHydroWaterml;
    /**
     * Search API for 'ATM Ice SSN Data' entry type
     */
    public TypeTypePointIcebridgeAtmIcessn typeTypePointIcebridgeAtmIcessn;
    /**
     * Search API for 'ATM QFIT Data' entry type
     */
    public TypeTypePointIcebridgeAtmQfit typeTypePointIcebridgeAtmQfit;
    /**
     * Search API for 'McCords Irmcr2 Data' entry type
     */
    public TypeTypePointIcebridgeMccordsIrmcr2 typeTypePointIcebridgeMccordsIrmcr2;
    /**
     * Search API for 'McCords Irmcr3 Data' entry type
     */
    public TypeTypePointIcebridgeMccordsIrmcr3 typeTypePointIcebridgeMccordsIrmcr3;
    /**
     * Search API for 'Paris Data' entry type
     */
    public TypeTypePointIcebridgeParis typeTypePointIcebridgeParis;
    /**
     * Search API for 'IDV Point File' entry type
     */
    public TypeTypePointIdv typeTypePointIdv;
    /**
     * Search API for 'Inline Point File' entry type
     */
    public TypeTypePointInline typeTypePointInline;
    /**
     * Search API for 'NC  DC Climate Data' entry type
     */
    public TypeTypePointNcdcClimate typeTypePointNcdcClimate;
    /**
     * Search API for 'NetCDF Point File' entry type
     */
    public TypeTypePointNetcdf typeTypePointNetcdf;
    /**
     * Search API for 'NOAA Carbon Measurements' entry type
     */
    public TypeTypePointNoaaCarbon typeTypePointNoaaCarbon;
    /**
     * Search API for 'NOAA Flask Event Measurements' entry type
     */
    public TypeTypePointNoaaFlaskEvent typeTypePointNoaaFlaskEvent;
    /**
     * Search API for 'NOAA Flask Month Measurements' entry type
     */
    public TypeTypePointNoaaFlaskMonth typeTypePointNoaaFlaskMonth;
    /**
     * Search API for 'NOAA MADIS Point Data' entry type
     */
    public TypeTypePointNoaaMadis typeTypePointNoaaMadis;
    /**
     * Search API for 'NOAA Tower Network' entry type
     */
    public TypeTypePointNoaaTower typeTypePointNoaaTower;
    /**
     * Search API for 'SeaBird CNV Data' entry type
     */
    public TypeTypePointOceanCnv typeTypePointOceanCnv;
    /**
     * Search API for 'SADO TTS Data' entry type
     */
    public TypeTypePointOceanCsvSadoTTS typeTypePointOceanCsvSadoTTS;
    /**
     * Search API for 'SADO Meteo Data' entry type
     */
    public TypeTypePointOceanCsvSadoMeteo typeTypePointOceanCsvSadoMeteo;
    /**
     * Search API for 'SADO Position Data' entry type
     */
    public TypeTypePointOceanCsvSadoPosition typeTypePointOceanCsvSadoPosition;
    /**
     * Search API for 'NetCDF Glider Data' entry type
     */
    public TypeTypePointOceanNetcdfGlider typeTypePointOceanNetcdfGlider;
    /**
     * Search API for 'NetCDF Track Data' entry type
     */
    public TypeTypePointOceanNetcdfTrack typeTypePointOceanNetcdfTrack;
    /**
     * Search API for 'OOI Data' entry type
     */
    public TypeTypePointOceanOoiDmgx typeTypePointOceanOoiDmgx;
    /**
     * Search API for 'Open AQ Air Quality' entry type
     */
    public TypeTypePointOpenaq typeTypePointOpenaq;
    /**
     * Search API for 'PBO Position Time Series' entry type
     */
    public TypeTypePointPboPositionTimeSeries typeTypePointPboPositionTimeSeries;
    /**
     * Search API for 'Simple Records' entry type
     */
    public TypeTypePointSimpleRecords typeTypePointSimpleRecords;
    /**
     * Search API for 'SNOTEL Snow Data' entry type
     */
    public TypeTypePointSnotel typeTypePointSnotel;
    /**
     * Search API for 'Record Text File' entry type
     */
    public TypeTypePointText typeTypePointText;
    /**
     * Search API for 'Global Geodynamics GGP Format' entry type
     */
    public TypeTypePointWsbbGgp typeTypePointWsbbGgp;
    /**
     * Search API for 'NOAA-ESRL-PSD Monthly Climate Index' entry type
     */
    public TypeTypePsdMonthlyClimateIndex typeTypePsdMonthlyClimateIndex;
    /**
     * Search API for 'QUANDL Series' entry type
     */
    public TypeTypeQuandlSeries typeTypeQuandlSeries;
    /**
     * Search API for 'Service Group' entry type
     */
    public TypeTypeServiceGroup typeTypeServiceGroup;
    /**
     * Search API for 'Service Link' entry type
     */
    public TypeTypeServiceLink typeTypeServiceLink;
    /**
     * Search API for 'SOCRATA Series' entry type
     */
    public TypeTypeSocrataSeries typeTypeSocrataSeries;
    /**
     * Search API for 'COD Sounding' entry type
     */
    public TypeTypeSoundingCod typeTypeSoundingCod;
    /**
     * Search API for 'FRD Sounding' entry type
     */
    public TypeTypeSoundingFrd typeTypeSoundingFrd;
    /**
     * Search API for 'GSD Sounding' entry type
     */
    public TypeTypeSoundingGsd typeTypeSoundingGsd;
    /**
     * Search API for 'UW Sounding' entry type
     */
    public TypeTypeSoundingWyoming typeTypeSoundingWyoming;
    /**
     * Search API for 'NREL TMY Data' entry type
     */
    public TypeTypeTmy typeTypeTmy;
    /**
     * Search API for 'Tweet' entry type
     */
    public TypeTypeTweet typeTypeTweet;
    /**
     * Search API for 'USGS Stream Gauge' entry type
     */
    public TypeTypeUsgsGauge typeTypeUsgsGauge;
    /**
     * Search API for 'Virtual Group' entry type
     */
    public TypeTypeVirtual typeTypeVirtual;
    /**
     * Search API for 'WMS Capabilities' entry type
     */
    public TypeTypeWmsCapabilities typeTypeWmsCapabilities;
    /**
     * Search API for 'WMS Layer' entry type
     */
    public TypeTypeWmsLayer typeTypeWmsLayer;
    /**
     * Search API for 'Ufo Sightings' entry type
     */
    public TypeUfoSightings typeUfoSightings;
    /**
     * Search API for 'US Places' entry type
     */
    public TypeUsPlaces typeUsPlaces;
    /**
     * Search API for 'Simple Yes-No Vote' entry type
     */
    public TypeVoteYesno typeVoteYesno;
    /**
     * Search API for 'Weblog' entry type
     */
    public TypeWeblog typeWeblog;
    /**
     * Search API for 'Wiki Page' entry type
     */
    public TypeWikipage typeWikipage;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.serviceMediaTabularExtractsheet = new ServiceMediaTabularExtractsheet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.type2017BoulderElectionExpenditures = new Type2017BoulderElectionExpenditures(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeAny = new TypeAny(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBeforeafter = new TypeBeforeafter(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBiblio = new TypeBiblio(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioDicom = new TypeBioDicom(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioDicomTest = new TypeBioDicomTest(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioFasta = new TypeBioFasta(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioFastq = new TypeBioFastq(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioHmmerIndex = new TypeBioHmmerIndex(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOmeTiff = new TypeBioOmeTiff(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologyAssay = new TypeBioOntologyAssay(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologyCohort = new TypeBioOntologyCohort(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologyPerson = new TypeBioOntologyPerson(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologySample = new TypeBioOntologySample(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologySeries = new TypeBioOntologySeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioOntologyStudy = new TypeBioOntologyStudy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioSam = new TypeBioSam(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioSfPdb = new TypeBioSfPdb(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioSra = new TypeBioSra(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioStockholm = new TypeBioStockholm(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBioTaxonomy = new TypeBioTaxonomy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBlogentry = new TypeBlogentry(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBolderRentalHousing = new TypeBolderRentalHousing(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBookmarks = new TypeBookmarks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBostonCrime = new TypeBostonCrime(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulder2017ElectionContributions = new TypeBoulder2017ElectionContributions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderCampaignContributions = new TypeBoulderCampaignContributions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderConsultingServices = new TypeBoulderConsultingServices(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderCountyVoterDetails = new TypeBoulderCountyVoterDetails(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderCrimes = new TypeBoulderCrimes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderEmails = new TypeBoulderEmails(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeBoulderEmployeeSalaries = new TypeBoulderEmployeeSalaries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCalendar = new TypeCalendar(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCampaignDonors = new TypeCampaignDonors(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCampaignExpenditures = new TypeCampaignExpenditures(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCataloglink = new TypeCataloglink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCdmGrid = new TypeCdmGrid(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeChatroom = new TypeChatroom(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeColoradoWaterRights = new TypeColoradoWaterRights(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCommitteeDonations = new TypeCommitteeDonations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCommunityDatahub = new TypeCommunityDatahub(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeCommunityResource = new TypeCommunityResource(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeConstructionPermits = new TypeConstructionPermits(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeContact = new TypeContact(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeDbCoIndicators = new TypeDbCoIndicators(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeEarthSatelliteLandsat = new TypeEarthSatelliteLandsat(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFaq = new TypeFaq(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFecPacs = new TypeFecPacs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFeccandidates = new TypeFeccandidates(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFeed = new TypeFeed(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFile = new TypeFile(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFitsData = new TypeFitsData(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeFtp = new TypeFtp(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGadgetsCountdown = new TypeGadgetsCountdown(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGadgetsStock = new TypeGadgetsStock(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGadgetsWeather = new TypeGadgetsWeather(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGazeteerCensusTracts = new TypeGazeteerCensusTracts(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGazeteerCounties = new TypeGazeteerCounties(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoGe = new TypeGeoGe(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoGeotiff = new TypeGeoGeotiff(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoGpx = new TypeGeoGpx(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoHdf5 = new TypeGeoHdf5(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoKml = new TypeGeoKml(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoShapefile = new TypeGeoShapefile(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGeoShapefileFips = new TypeGeoShapefileFips(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGlossary = new TypeGlossary(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGridaggregation = new TypeGridaggregation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeGroup = new TypeGroup(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeHipchatGroup = new TypeHipchatGroup(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeHomepage = new TypeHomepage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeIncident = new TypeIncident(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeJeopardy = new TypeJeopardy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLatlonimage = new TypeLatlonimage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLidarCollection = new TypeLidarCollection(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLidarLas = new TypeLidarLas(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLidarLvis = new TypeLidarLvis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLink = new TypeLink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLocalfiles = new TypeLocalfiles(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeLocations = new TypeLocations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMapGooglemap = new TypeMapGooglemap(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaAudiofile = new TypeMediaAudiofile(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaImageloop = new TypeMediaImageloop(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaPhotoalbum = new TypeMediaPhotoalbum(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaVideoChannel = new TypeMediaVideoChannel(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaVideoQuicktime = new TypeMediaVideoQuicktime(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeMediaYoutubevideo = new TypeMediaYoutubevideo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeNotes = new TypeNotes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeNotesJsonfile = new TypeNotesJsonfile(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeNotesNote = new TypeNotesNote(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeNotesNotebook = new TypeNotesNotebook(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeNwsfeed = new TypeNwsfeed(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeOpendaplink = new TypeOpendaplink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeOwlClass = new TypeOwlClass(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeOwlOntology = new TypeOwlOntology(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePasteitentry = new TypePasteitentry(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePointText = new TypePointText(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePoliceStopData = new TypePoliceStopData(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePoll = new TypePoll(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectCampaign = new TypeProjectCampaign(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectCasestudy = new TypeProjectCasestudy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectContribution = new TypeProjectContribution(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectDataformat = new TypeProjectDataformat(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectDataset = new TypeProjectDataset(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectDeployment = new TypeProjectDeployment(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectExperiment = new TypeProjectExperiment(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectFieldnote = new TypeProjectFieldnote(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectGpsControlpoints = new TypeProjectGpsControlpoints(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectGpsRaw = new TypeProjectGpsRaw(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectGpsRinex = new TypeProjectGpsRinex(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectInstrument = new TypeProjectInstrument(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectLearningResource = new TypeProjectLearningResource(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectMeeting = new TypeProjectMeeting(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectOrganization = new TypeProjectOrganization(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectProgram = new TypeProjectProgram(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectProject = new TypeProjectProject(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectService = new TypeProjectService(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectSite = new TypeProjectSite(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectSoftwarepackage = new TypeProjectSoftwarepackage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectStandardName = new TypeProjectStandardName(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectSurveylocation = new TypeProjectSurveylocation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectTerm = new TypeProjectTerm(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectVisit = new TypeProjectVisit(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeProjectVocabulary = new TypeProjectVocabulary(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePropertySales = new TypePropertySales(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePropertydb = new TypePropertydb(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typePythonNotebook = new TypePythonNotebook(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeSlackTeam = new TypeSlackTeam(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeStatusboard = new TypeStatusboard(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeSunrisesunset = new TypeSunrisesunset(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTasks = new TypeTasks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTmdbmovies = new TypeTmdbmovies(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTodo = new TypeTodo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTripEvent = new TypeTripEvent(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTripFlight = new TypeTripFlight(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTripHotel = new TypeTripHotel(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTripReport = new TypeTripReport(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTripTrip = new TypeTripTrip(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeAwcMetar = new TypeTypeAwcMetar(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeBizStockseries = new TypeTypeBizStockseries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeBlsSeries = new TypeTypeBlsSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeBlsSurvey = new TypeTypeBlsSurvey(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeCensusAcs = new TypeTypeCensusAcs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDaymet = new TypeTypeDaymet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDbTable = new TypeTypeDbTable(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentCsv = new TypeTypeDocumentCsv(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentDoc = new TypeTypeDocumentDoc(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentHtml = new TypeTypeDocumentHtml(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentPdf = new TypeTypeDocumentPdf(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentPpt = new TypeTypeDocumentPpt(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDocumentXls = new TypeTypeDocumentXls(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeDrilsdownCasestudy = new TypeTypeDrilsdownCasestudy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEdgarFiling = new TypeTypeEdgarFiling(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEiaCategory = new TypeTypeEiaCategory(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEiaSeries = new TypeTypeEiaSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriFeatureserver = new TypeTypeEsriFeatureserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriGeometryserver = new TypeTypeEsriGeometryserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriGpserver = new TypeTypeEsriGpserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriImageserver = new TypeTypeEsriImageserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriLayer = new TypeTypeEsriLayer(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriMapserver = new TypeTypeEsriMapserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriRestfolder = new TypeTypeEsriRestfolder(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriRestserver = new TypeTypeEsriRestserver(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeEsriRestservice = new TypeTypeEsriRestservice(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeExtremes = new TypeTypeExtremes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeFredCategory = new TypeTypeFredCategory(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeFredSeries = new TypeTypeFredSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsAgency = new TypeTypeGtfsAgency(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsRoute = new TypeTypeGtfsRoute(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsRoutes = new TypeTypeGtfsRoutes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsStop = new TypeTypeGtfsStop(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsStops = new TypeTypeGtfsStops(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeGtfsTrip = new TypeTypeGtfsTrip(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeHazarddata = new TypeTypeHazarddata(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeHydroColorado = new TypeTypeHydroColorado(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeIdvBundle = new TypeTypeIdvBundle(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeImage = new TypeTypeImage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeImageAirport = new TypeTypeImageAirport(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeImageWebcam = new TypeTypeImageWebcam(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeMb = new TypeTypeMb(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeMbCollection = new TypeTypeMbCollection(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeMbPointBasic = new TypeTypeMbPointBasic(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeMetametaDictionary = new TypeTypeMetametaDictionary(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeMetametaField = new TypeTypeMetametaField(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeNasaames = new TypeTypeNasaames(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeNcss = new TypeTypeNcss(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeNitf = new TypeTypeNitf(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointAmerifluxLevel2 = new TypeTypePointAmerifluxLevel2(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointAmrcFinal = new TypeTypePointAmrcFinal(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointAmrcFreewave = new TypeTypePointAmrcFreewave(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointCzo = new TypeTypePointCzo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointGcnet = new TypeTypePointGcnet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointGeomagIaga2002 = new TypeTypePointGeomagIaga2002(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointHydroWaterml = new TypeTypePointHydroWaterml(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIcebridgeAtmIcessn = new TypeTypePointIcebridgeAtmIcessn(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIcebridgeAtmQfit = new TypeTypePointIcebridgeAtmQfit(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIcebridgeMccordsIrmcr2 = new TypeTypePointIcebridgeMccordsIrmcr2(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIcebridgeMccordsIrmcr3 = new TypeTypePointIcebridgeMccordsIrmcr3(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIcebridgeParis = new TypeTypePointIcebridgeParis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointIdv = new TypeTypePointIdv(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointInline = new TypeTypePointInline(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNcdcClimate = new TypeTypePointNcdcClimate(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNetcdf = new TypeTypePointNetcdf(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNoaaCarbon = new TypeTypePointNoaaCarbon(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNoaaFlaskEvent = new TypeTypePointNoaaFlaskEvent(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNoaaFlaskMonth = new TypeTypePointNoaaFlaskMonth(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNoaaMadis = new TypeTypePointNoaaMadis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointNoaaTower = new TypeTypePointNoaaTower(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanCnv = new TypeTypePointOceanCnv(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanCsvSadoTTS = new TypeTypePointOceanCsvSadoTTS(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanCsvSadoMeteo = new TypeTypePointOceanCsvSadoMeteo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanCsvSadoPosition = new TypeTypePointOceanCsvSadoPosition(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanNetcdfGlider = new TypeTypePointOceanNetcdfGlider(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanNetcdfTrack = new TypeTypePointOceanNetcdfTrack(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOceanOoiDmgx = new TypeTypePointOceanOoiDmgx(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointOpenaq = new TypeTypePointOpenaq(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointPboPositionTimeSeries = new TypeTypePointPboPositionTimeSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointSimpleRecords = new TypeTypePointSimpleRecords(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointSnotel = new TypeTypePointSnotel(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointText = new TypeTypePointText(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePointWsbbGgp = new TypeTypePointWsbbGgp(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypePsdMonthlyClimateIndex = new TypeTypePsdMonthlyClimateIndex(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeQuandlSeries = new TypeTypeQuandlSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeServiceGroup = new TypeTypeServiceGroup(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeServiceLink = new TypeTypeServiceLink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeSocrataSeries = new TypeTypeSocrataSeries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeSoundingCod = new TypeTypeSoundingCod(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeSoundingFrd = new TypeTypeSoundingFrd(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeSoundingGsd = new TypeTypeSoundingGsd(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeSoundingWyoming = new TypeTypeSoundingWyoming(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeTmy = new TypeTypeTmy(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeTweet = new TypeTypeTweet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeUsgsGauge = new TypeTypeUsgsGauge(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeVirtual = new TypeTypeVirtual(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeWmsCapabilities = new TypeTypeWmsCapabilities(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeTypeWmsLayer = new TypeTypeWmsLayer(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeUfoSightings = new TypeUfoSightings(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeUsPlaces = new TypeUsPlaces(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeVoteYesno = new TypeVoteYesno(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeWeblog = new TypeWeblog(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.typeWikipage = new TypeWikipage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}