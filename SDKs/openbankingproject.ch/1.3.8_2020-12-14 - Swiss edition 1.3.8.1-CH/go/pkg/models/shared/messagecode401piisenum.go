// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageCode401PIISEnum - Message codes defined for PIIS for HTTP Error code 401 (UNAUTHORIZED).
type MessageCode401PIISEnum string

const (
	MessageCode401PIISEnumCertificateInvalid    MessageCode401PIISEnum = "CERTIFICATE_INVALID"
	MessageCode401PIISEnumRoleInvalid           MessageCode401PIISEnum = "ROLE_INVALID"
	MessageCode401PIISEnumCertificateExpired    MessageCode401PIISEnum = "CERTIFICATE_EXPIRED"
	MessageCode401PIISEnumCertificateBlocked    MessageCode401PIISEnum = "CERTIFICATE_BLOCKED"
	MessageCode401PIISEnumCertificateRevoke     MessageCode401PIISEnum = "CERTIFICATE_REVOKE"
	MessageCode401PIISEnumCertificateMissing    MessageCode401PIISEnum = "CERTIFICATE_MISSING"
	MessageCode401PIISEnumSignatureInvalid      MessageCode401PIISEnum = "SIGNATURE_INVALID"
	MessageCode401PIISEnumSignatureMissing      MessageCode401PIISEnum = "SIGNATURE_MISSING"
	MessageCode401PIISEnumCorporateIDInvalid    MessageCode401PIISEnum = "CORPORATE_ID_INVALID"
	MessageCode401PIISEnumPsuCredentialsInvalid MessageCode401PIISEnum = "PSU_CREDENTIALS_INVALID"
	MessageCode401PIISEnumConsentInvalid        MessageCode401PIISEnum = "CONSENT_INVALID"
	MessageCode401PIISEnumConsentExpired        MessageCode401PIISEnum = "CONSENT_EXPIRED"
	MessageCode401PIISEnumTokenUnknown          MessageCode401PIISEnum = "TOKEN_UNKNOWN"
	MessageCode401PIISEnumTokenInvalid          MessageCode401PIISEnum = "TOKEN_INVALID"
	MessageCode401PIISEnumTokenExpired          MessageCode401PIISEnum = "TOKEN_EXPIRED"
)

func (e *MessageCode401PIISEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERTIFICATE_INVALID":
		fallthrough
	case "ROLE_INVALID":
		fallthrough
	case "CERTIFICATE_EXPIRED":
		fallthrough
	case "CERTIFICATE_BLOCKED":
		fallthrough
	case "CERTIFICATE_REVOKE":
		fallthrough
	case "CERTIFICATE_MISSING":
		fallthrough
	case "SIGNATURE_INVALID":
		fallthrough
	case "SIGNATURE_MISSING":
		fallthrough
	case "CORPORATE_ID_INVALID":
		fallthrough
	case "PSU_CREDENTIALS_INVALID":
		fallthrough
	case "CONSENT_INVALID":
		fallthrough
	case "CONSENT_EXPIRED":
		fallthrough
	case "TOKEN_UNKNOWN":
		fallthrough
	case "TOKEN_INVALID":
		fallthrough
	case "TOKEN_EXPIRED":
		*e = MessageCode401PIISEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageCode401PIISEnum: %s", s)
	}
}
