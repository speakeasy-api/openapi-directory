/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GqlQueryParameter } from "./gqlqueryparameter";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 */
export class GqlQuery extends SpeakeasyBase {
  /**
   * When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowLiterals" })
  allowLiterals?: boolean;

  /**
   * For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `""`.
   */
  @SpeakeasyMetadata({ elemType: GqlQueryParameter })
  @Expose({ name: "namedBindings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GqlQueryParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], GqlQueryParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  namedBindings?: Record<string, GqlQueryParameter>;

  /**
   * Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.
   */
  @SpeakeasyMetadata({ elemType: GqlQueryParameter })
  @Expose({ name: "positionalBindings" })
  @Type(() => GqlQueryParameter)
  positionalBindings?: GqlQueryParameter[];

  /**
   * A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryString" })
  queryString?: string;
}
