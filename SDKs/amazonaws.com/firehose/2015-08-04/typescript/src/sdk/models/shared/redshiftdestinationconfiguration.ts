/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CloudWatchLoggingOptions } from "./cloudwatchloggingoptions";
import { CopyCommand } from "./copycommand";
import { ProcessingConfiguration } from "./processingconfiguration";
import { RedshiftRetryOptions } from "./redshiftretryoptions";
import { RedshiftS3BackupModeEnum } from "./redshifts3backupmodeenum";
import { S3DestinationConfiguration } from "./s3destinationconfiguration";
import { Expose, Type } from "class-transformer";

/**
 * Describes the configuration of a destination in Amazon Redshift.
 */
export class RedshiftDestinationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchLoggingOptions" })
  @Type(() => CloudWatchLoggingOptions)
  cloudWatchLoggingOptions?: CloudWatchLoggingOptions;

  @SpeakeasyMetadata()
  @Expose({ name: "ClusterJDBCURL" })
  clusterJDBCURL: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CopyCommand" })
  @Type(() => CopyCommand)
  copyCommand: CopyCommand;

  @SpeakeasyMetadata()
  @Expose({ name: "Password" })
  password: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProcessingConfiguration" })
  @Type(() => ProcessingConfiguration)
  processingConfiguration?: ProcessingConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "RetryOptions" })
  @Type(() => RedshiftRetryOptions)
  retryOptions?: RedshiftRetryOptions;

  @SpeakeasyMetadata()
  @Expose({ name: "RoleARN" })
  roleARN: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3BackupConfiguration" })
  @Type(() => S3DestinationConfiguration)
  s3BackupConfiguration?: S3DestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "S3BackupMode" })
  s3BackupMode?: RedshiftS3BackupModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "S3Configuration" })
  @Type(() => S3DestinationConfiguration)
  s3Configuration: S3DestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Username" })
  username: string;
}
