/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LinkedPropertiesModel } from "./linkedpropertiesmodel";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.
 */
export enum DiaryAppointmentModelRemindBeforeEnum {
  Min = "Min",
  Min2 = "Min2",
  Min5 = "Min5",
  Min10 = "Min10",
  Min15 = "Min15",
  Min30 = "Min30",
  Min45 = "Min45",
  Hour = "Hour",
  Hour2 = "Hour2",
  Hour3 = "Hour3",
  Hour6 = "Hour6",
  Hour12 = "Hour12",
  Day = "Day",
  Day2 = "Day2",
  Day3 = "Day3",
  Week = "Week",
  NoReminder = "NoReminder",
}

/**
 * Represents a single diary appointment for a staff member.
 */
export class DiaryAppointmentModel extends SpeakeasyBase {
  /**
   * The diary appointment type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AppointmentType" })
  appointmentType?: string;

  /**
   * Whether the appointment has been cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Cancelled" })
  cancelled?: boolean;

  /**
   * The appointment comments text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Comment" })
  comment?: string;

  /**
   * The date/time this appointment was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The staff member that created this appointment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBy" })
  createdBy?: string;

  /**
   * A unique identifier defining the object and change revision.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ETag" })
  eTag?: string;

  /**
   * The end date/time of this appointment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "End" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  end?: Date;

  /**
   * A collection of properties linked to the appointment:-
   */
  @SpeakeasyMetadata({ elemType: LinkedPropertiesModel })
  @Expose({ name: "LinkedProperties" })
  @Type(() => LinkedPropertiesModel)
  linkedProperties?: LinkedPropertiesModel[];

  /**
   * Date appointment next repeats:-
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextRecurringDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nextRecurringDate?: Date;

  /**
   * The unique Object ID (OID).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OID" })
  oid?: string;

  /**
   * The reccurrence interval for the appointment:-
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Recurrence" })
  recurrence?: number;

  /**
   * The type of recurrence:-
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecurrenceType" })
  recurrenceType?: string;

  /**
   * The date/time to remind the staff member of this appointment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RemindAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  remindAt?: Date;

  /**
   * The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RemindBefore" })
  remindBefore?: DiaryAppointmentModelRemindBeforeEnum;

  /**
   * The staff member holding this appointment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Staff" })
  staff?: string;

  /**
   * The start date/time of this appointment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Start" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  start?: Date;

  /**
   * The appointment subject text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Subject" })
  subject?: string;
}
