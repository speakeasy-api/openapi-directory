// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// CompanyInfoTheStartMonthOfFiscalYearEnum - The start month of fiscal year.
type CompanyInfoTheStartMonthOfFiscalYearEnum string

const (
	CompanyInfoTheStartMonthOfFiscalYearEnumJanuary   CompanyInfoTheStartMonthOfFiscalYearEnum = "January"
	CompanyInfoTheStartMonthOfFiscalYearEnumFebruary  CompanyInfoTheStartMonthOfFiscalYearEnum = "February"
	CompanyInfoTheStartMonthOfFiscalYearEnumMarch     CompanyInfoTheStartMonthOfFiscalYearEnum = "March"
	CompanyInfoTheStartMonthOfFiscalYearEnumApril     CompanyInfoTheStartMonthOfFiscalYearEnum = "April"
	CompanyInfoTheStartMonthOfFiscalYearEnumMay       CompanyInfoTheStartMonthOfFiscalYearEnum = "May"
	CompanyInfoTheStartMonthOfFiscalYearEnumJune      CompanyInfoTheStartMonthOfFiscalYearEnum = "June"
	CompanyInfoTheStartMonthOfFiscalYearEnumJuly      CompanyInfoTheStartMonthOfFiscalYearEnum = "July"
	CompanyInfoTheStartMonthOfFiscalYearEnumAugust    CompanyInfoTheStartMonthOfFiscalYearEnum = "August"
	CompanyInfoTheStartMonthOfFiscalYearEnumSeptember CompanyInfoTheStartMonthOfFiscalYearEnum = "September"
	CompanyInfoTheStartMonthOfFiscalYearEnumOctober   CompanyInfoTheStartMonthOfFiscalYearEnum = "October"
	CompanyInfoTheStartMonthOfFiscalYearEnumNovember  CompanyInfoTheStartMonthOfFiscalYearEnum = "November"
	CompanyInfoTheStartMonthOfFiscalYearEnumDecember  CompanyInfoTheStartMonthOfFiscalYearEnum = "December"
)

func (e *CompanyInfoTheStartMonthOfFiscalYearEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "January":
		fallthrough
	case "February":
		fallthrough
	case "March":
		fallthrough
	case "April":
		fallthrough
	case "May":
		fallthrough
	case "June":
		fallthrough
	case "July":
		fallthrough
	case "August":
		fallthrough
	case "September":
		fallthrough
	case "October":
		fallthrough
	case "November":
		fallthrough
	case "December":
		*e = CompanyInfoTheStartMonthOfFiscalYearEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompanyInfoTheStartMonthOfFiscalYearEnum: %s", s)
	}
}

// CompanyInfoCompanyStatusEnum - Based on the status some functionality is enabled or disabled.
type CompanyInfoCompanyStatusEnum string

const (
	CompanyInfoCompanyStatusEnumActive   CompanyInfoCompanyStatusEnum = "active"
	CompanyInfoCompanyStatusEnumInactive CompanyInfoCompanyStatusEnum = "inactive"
)

func (e *CompanyInfoCompanyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = CompanyInfoCompanyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompanyInfoCompanyStatusEnum: %s", s)
	}
}

type CompanyInfo struct {
	Addresses []Address `json:"addresses,omitempty"`
	// Whether sales tax is calculated automatically for the company
	AutomatedSalesTax *bool `json:"automated_sales_tax,omitempty"`
	// The name of the company.
	CompanyName *string `json:"company_name,omitempty"`
	// Date when company file was created
	CompanyStartDate *types.Date `json:"company_start_date,omitempty"`
	// country code according to ISO 3166-1 alpha-2.
	Country *string `json:"country,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency        *CurrencyEnum  `json:"currency,omitempty"`
	DefaultSalesTax *LinkedTaxRate `json:"default_sales_tax,omitempty"`
	Emails          []Email        `json:"emails,omitempty"`
	// The start month of fiscal year.
	FiscalYearStartMonth *CompanyInfoTheStartMonthOfFiscalYearEnum `json:"fiscal_year_start_month,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language *string `json:"language,omitempty"`
	// The legal name of the company
	LegalName    *string       `json:"legal_name,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Whether sales tax is enabled for the company
	SalesTaxEnabled *bool   `json:"sales_tax_enabled,omitempty"`
	SalesTaxNumber  *string `json:"sales_tax_number,omitempty"`
	// Based on the status some functionality is enabled or disabled.
	Status *CompanyInfoCompanyStatusEnum `json:"status,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}
