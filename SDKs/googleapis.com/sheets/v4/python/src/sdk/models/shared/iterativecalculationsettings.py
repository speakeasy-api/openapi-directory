"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IterativeCalculationSettings:
    r"""Settings to control how circular dependencies are resolved with iterative calculation."""
    
    convergence_threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convergenceThreshold'), 'exclude': lambda f: f is None }})
    r"""When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop."""  
    max_iterations: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxIterations'), 'exclude': lambda f: f is None }})
    r"""When iterative calculation is enabled, the maximum number of calculation rounds to perform."""  
    