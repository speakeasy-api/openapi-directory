"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class MerakiAuthUsers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_meraki_auth_user(self, request: operations.CreateNetworkMerakiAuthUserRequest) -> operations.CreateNetworkMerakiAuthUserResponse:
        r"""Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
        Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkMerakiAuthUserRequest, base_url, '/networks/{networkId}/merakiAuthUsers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkMerakiAuthUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkMerakiAuthUser201ApplicationJSON])
                res.create_network_meraki_auth_user_201_application_json_object = out

        return res

    def delete_network_meraki_auth_user(self, request: operations.DeleteNetworkMerakiAuthUserRequest) -> operations.DeleteNetworkMerakiAuthUserResponse:
        r"""Deauthorize a user
        Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkMerakiAuthUserRequest, base_url, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkMerakiAuthUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_meraki_auth_user(self, request: operations.GetNetworkMerakiAuthUserRequest) -> operations.GetNetworkMerakiAuthUserResponse:
        r"""Return the Meraki Auth splash guest, RADIUS, or client VPN user
        Return the Meraki Auth splash guest, RADIUS, or client VPN user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkMerakiAuthUserRequest, base_url, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkMerakiAuthUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkMerakiAuthUser200ApplicationJSON])
                res.get_network_meraki_auth_user_200_application_json_object = out

        return res

    def get_network_meraki_auth_users(self, request: operations.GetNetworkMerakiAuthUsersRequest) -> operations.GetNetworkMerakiAuthUsersResponse:
        r"""List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
        List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkMerakiAuthUsersRequest, base_url, '/networks/{networkId}/merakiAuthUsers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkMerakiAuthUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkMerakiAuthUsers200ApplicationJSON]])
                res.get_network_meraki_auth_users_200_application_json_objects = out

        return res

    def update_network_meraki_auth_user(self, request: operations.UpdateNetworkMerakiAuthUserRequest) -> operations.UpdateNetworkMerakiAuthUserResponse:
        r"""Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
        Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkMerakiAuthUserRequest, base_url, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkMerakiAuthUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkMerakiAuthUser200ApplicationJSON])
                res.update_network_meraki_auth_user_200_application_json_object = out

        return res

    