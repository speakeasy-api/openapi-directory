// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PlayMediaIntentHandlingInvocationResponseType string

const (
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingHandle                       PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.handle"
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveMediaItems            PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.resolveMediaItems"
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlayShuffled          PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.resolvePlayShuffled"
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackQueueLocation PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.resolvePlaybackQueueLocation"
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackRepeatMode    PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.resolvePlaybackRepeatMode"
	PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveResumePlayback        PlayMediaIntentHandlingInvocationResponseType = "PlayMediaIntentHandling.resolveResumePlayback"
	PlayMediaIntentHandlingInvocationResponseTypeProtocolException                                   PlayMediaIntentHandlingInvocationResponseType = "ProtocolException"
)

type PlayMediaIntentHandlingInvocationResponse struct {
	PlayMediaIntentHandlingResolveMediaItemsInvocationResponse            *PlayMediaIntentHandlingResolveMediaItemsInvocationResponse
	PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse          *PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse
	PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse *PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse
	PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse    *PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse
	PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse        *PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse
	PlayMediaIntentHandlingHandleInvocationResponse                       *PlayMediaIntentHandlingHandleInvocationResponse
	ProtocolExceptionInvocationResponse                                   *ProtocolExceptionInvocationResponse

	Type PlayMediaIntentHandlingInvocationResponseType
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingHandle(playMediaIntentHandlingHandle PlayMediaIntentHandlingHandleInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingHandle
	typStr := string(typ)
	playMediaIntentHandlingHandle.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingHandleInvocationResponse: &playMediaIntentHandlingHandle,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingResolveMediaItems(playMediaIntentHandlingResolveMediaItems PlayMediaIntentHandlingResolveMediaItemsInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveMediaItems
	typStr := string(typ)
	playMediaIntentHandlingResolveMediaItems.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingResolveMediaItemsInvocationResponse: &playMediaIntentHandlingResolveMediaItems,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingResolvePlayShuffled(playMediaIntentHandlingResolvePlayShuffled PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlayShuffled
	typStr := string(typ)
	playMediaIntentHandlingResolvePlayShuffled.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse: &playMediaIntentHandlingResolvePlayShuffled,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingResolvePlaybackQueueLocation(playMediaIntentHandlingResolvePlaybackQueueLocation PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackQueueLocation
	typStr := string(typ)
	playMediaIntentHandlingResolvePlaybackQueueLocation.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse: &playMediaIntentHandlingResolvePlaybackQueueLocation,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingResolvePlaybackRepeatMode(playMediaIntentHandlingResolvePlaybackRepeatMode PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackRepeatMode
	typStr := string(typ)
	playMediaIntentHandlingResolvePlaybackRepeatMode.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse: &playMediaIntentHandlingResolvePlaybackRepeatMode,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponsePlayMediaIntentHandlingResolveResumePlayback(playMediaIntentHandlingResolveResumePlayback PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveResumePlayback
	typStr := string(typ)
	playMediaIntentHandlingResolveResumePlayback.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse: &playMediaIntentHandlingResolveResumePlayback,
		Type: typ,
	}
}

func CreatePlayMediaIntentHandlingInvocationResponseProtocolException(protocolException ProtocolExceptionInvocationResponse) PlayMediaIntentHandlingInvocationResponse {
	typ := PlayMediaIntentHandlingInvocationResponseTypeProtocolException
	typStr := string(typ)
	protocolException.Method = typStr

	return PlayMediaIntentHandlingInvocationResponse{
		ProtocolExceptionInvocationResponse: &protocolException,
		Type:                                typ,
	}
}

func (u *PlayMediaIntentHandlingInvocationResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Method string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Method {
	case "PlayMediaIntentHandling.handle":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingHandleInvocationResponse := new(PlayMediaIntentHandlingHandleInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingHandleInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingHandleInvocationResponse = playMediaIntentHandlingHandleInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingHandle
		return nil
	case "PlayMediaIntentHandling.resolveMediaItems":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingResolveMediaItemsInvocationResponse := new(PlayMediaIntentHandlingResolveMediaItemsInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingResolveMediaItemsInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingResolveMediaItemsInvocationResponse = playMediaIntentHandlingResolveMediaItemsInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveMediaItems
		return nil
	case "PlayMediaIntentHandling.resolvePlayShuffled":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingResolvePlayShuffledInvocationResponse := new(PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingResolvePlayShuffledInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse = playMediaIntentHandlingResolvePlayShuffledInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlayShuffled
		return nil
	case "PlayMediaIntentHandling.resolvePlaybackQueueLocation":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse := new(PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse = playMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackQueueLocation
		return nil
	case "PlayMediaIntentHandling.resolvePlaybackRepeatMode":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse := new(PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse = playMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolvePlaybackRepeatMode
		return nil
	case "PlayMediaIntentHandling.resolveResumePlayback":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		playMediaIntentHandlingResolveResumePlaybackInvocationResponse := new(PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse)
		if err := d.Decode(&playMediaIntentHandlingResolveResumePlaybackInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse = playMediaIntentHandlingResolveResumePlaybackInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypePlayMediaIntentHandlingResolveResumePlayback
		return nil
	case "ProtocolException":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		protocolExceptionInvocationResponse := new(ProtocolExceptionInvocationResponse)
		if err := d.Decode(&protocolExceptionInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ProtocolExceptionInvocationResponse = protocolExceptionInvocationResponse
		u.Type = PlayMediaIntentHandlingInvocationResponseTypeProtocolException
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlayMediaIntentHandlingInvocationResponse) MarshalJSON() ([]byte, error) {
	if u.PlayMediaIntentHandlingResolveMediaItemsInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingResolveMediaItemsInvocationResponse)
	}

	if u.PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse)
	}

	if u.PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse)
	}

	if u.PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse)
	}

	if u.PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse)
	}

	if u.PlayMediaIntentHandlingHandleInvocationResponse != nil {
		return json.Marshal(u.PlayMediaIntentHandlingHandleInvocationResponse)
	}

	if u.ProtocolExceptionInvocationResponse != nil {
		return json.Marshal(u.ProtocolExceptionInvocationResponse)
	}

	return nil, nil
}
