"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import icmptypecode as shared_icmptypecode
from ..shared import portrangefromto as shared_portrangefromto
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2NetworkACLEntry:
    r"""A rule for the network ACL. Each rule allows or denies access based on the IP address, traffic direction, port, and protocol."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CidrBlock'), 'exclude': lambda f: f is None }})  
    egress: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Egress'), 'exclude': lambda f: f is None }})  
    icmp_type_code: Optional[shared_icmptypecode.IcmpTypeCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IcmpTypeCode'), 'exclude': lambda f: f is None }})  
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6CidrBlock'), 'exclude': lambda f: f is None }})  
    port_range: Optional[shared_portrangefromto.PortRangeFromTo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PortRange'), 'exclude': lambda f: f is None }})  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Protocol'), 'exclude': lambda f: f is None }})  
    rule_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleAction'), 'exclude': lambda f: f is None }})  
    rule_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleNumber'), 'exclude': lambda f: f is None }})  
    