/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://worldtimeapi.org/api/"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * A simple API to get the current time based on a request with a timezone.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
   */
  getIp(config?: AxiosRequestConfig): Promise<operations.GetIpResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ip";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIpResponse = new operations.GetIpResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dateTimeJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.DateTimeJsonResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorJsonResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
   */
  getIpTxt(config?: AxiosRequestConfig): Promise<operations.GetIpTxtResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ip.txt";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIpTxtResponse = new operations.GetIpTxtResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.dateTimeTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.errorTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
   */
  getIpIpv4(
    req: operations.GetIpIpv4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIpIpv4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIpIpv4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/ip/{ipv4}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIpIpv4Response =
        new operations.GetIpIpv4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dateTimeJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.DateTimeJsonResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorJsonResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
   */
  getIpIpv4Txt(
    req: operations.GetIpIpv4TxtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIpIpv4TxtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIpIpv4TxtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/ip/{ipv4}.txt", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIpIpv4TxtResponse =
        new operations.GetIpIpv4TxtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.dateTimeTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.errorTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * a listing of all timezones.
   */
  getTimezone(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/timezone";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneResponse =
        new operations.GetTimezoneResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJsonResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * a listing of all timezones.
   */
  getTimezoneTxt(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneTxtResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/timezone.txt";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneTxtResponse =
        new operations.GetTimezoneTxtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.listTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * a listing of all timezones available for that area.
   */
  getTimezoneArea(
    req: operations.GetTimezoneAreaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/timezone/{area}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaResponse =
        new operations.GetTimezoneAreaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJsonResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorJsonResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * a listing of all timezones available for that area.
   */
  getTimezoneAreaTxt(
    req: operations.GetTimezoneAreaTxtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaTxtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaTxtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/timezone/{area}.txt", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaTxtResponse =
        new operations.GetTimezoneAreaTxtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.listTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.errorTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time for a timezone.
   */
  getTimezoneAreaLocation(
    req: operations.GetTimezoneAreaLocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaLocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaLocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/timezone/{area}/{location}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaLocationResponse =
        new operations.GetTimezoneAreaLocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dateTimeJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.DateTimeJsonResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorJsonResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time for a timezone.
   */
  getTimezoneAreaLocationTxt(
    req: operations.GetTimezoneAreaLocationTxtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaLocationTxtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaLocationTxtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/timezone/{area}/{location}.txt",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaLocationTxtResponse =
        new operations.GetTimezoneAreaLocationTxtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.dateTimeTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.errorTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time for a timezone.
   */
  getTimezoneAreaLocationRegion(
    req: operations.GetTimezoneAreaLocationRegionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaLocationRegionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaLocationRegionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/timezone/{area}/{location}/{region}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaLocationRegionResponse =
        new operations.GetTimezoneAreaLocationRegionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dateTimeJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.DateTimeJsonResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorJsonResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * request the current time for a timezone.
   */
  getTimezoneAreaLocationRegionTxt(
    req: operations.GetTimezoneAreaLocationRegionTxtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTimezoneAreaLocationRegionTxtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTimezoneAreaLocationRegionTxtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/timezone/{area}/{location}/{region}.txt",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTimezoneAreaLocationRegionTxtResponse =
        new operations.GetTimezoneAreaLocationRegionTxtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.dateTimeTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.errorTextResponse = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
