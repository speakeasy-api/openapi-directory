/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TextAnalysis {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Communication & Tonality
   *
   * @remarks
   * Identify the purpose and writing style of a written text.
   *
   * Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]
   *
   * Returned labels:
   * * action-seeking
   * * fact-oriented
   * * information-seeking
   * * self-revealing
   */
  communication(
    req: operations.CommunicationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CommunicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CommunicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/communication";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CommunicationResponse =
        new operations.CommunicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictionResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictionResults = utils.objectToClass(
              httpRes?.data,
              shared.PostPredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Emotion Analysis
   *
   * @remarks
   * Detect the emotions of the text based on Ekman.
   *
   * Supported Langauges: [`en`, `de`, `es`]
   *
   * Returned labels:
   * * anger
   * * disgust
   * * fear
   * * joy
   * * sadness
   * * surprise
   * * no-emotion
   */
  ekmanEmotion(
    req: operations.EkmanEmotionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EkmanEmotionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EkmanEmotionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ekman-emotion";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EkmanEmotionResponse =
        new operations.EkmanEmotionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictionResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictionResults = utils.objectToClass(
              httpRes?.data,
              shared.PostPredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Emotion Analysis
   *
   * @remarks
   * Detect the emotions of the text.
   *
   * Supported Langauges: [`en`, `de`, `es`]
   *
   * Returned labels:
   * * anger
   * * joy
   * * love
   * * sadness
   * * surprise
   * * uncategorized
   */
  emotion(
    req: operations.EmotionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EmotionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EmotionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/emotion";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EmotionResponse = new operations.EmotionResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictionResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictionResults = utils.objectToClass(
              httpRes?.data,
              shared.PostPredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Language Detection
   *
   * @remarks
   * Identifies what language a text is written in. Only languages that our API supports can be analyzed.
   *
   * Returned labels:
   * * language_code of the detected language
   */
  languageDetection(
    req: shared.LanguageDetection[],
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDetectionResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/language-detection";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDetectionResponse =
        new operations.LanguageDetectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.languageDetectionResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.languageDetectionResponse = utils.objectToClass(
              httpRes?.data,
              shared.LanguagePredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Personality Traits
   *
   * @remarks
   * Predict the personality trait of author of any written text.
   *
   * Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]
   *
   * Returned labels:
   *
   * * emotional
   * * rational
   */
  personality(
    req: operations.PersonalityRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PersonalityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PersonalityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/personality";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PersonalityResponse =
        new operations.PersonalityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictionResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictionResults = utils.objectToClass(
              httpRes?.data,
              shared.PostPredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sentiment Analysis
   *
   * @remarks
   * Evaluate the overall tonality of the text.
   *
   * Supported Languages: [`en`, `de`, `es`]
   *
   * Returned labels:
   * * positive
   * * negative
   */
  sentiment(
    req: operations.SentimentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SentimentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SentimentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sentiment";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SentimentResponse =
        new operations.SentimentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictionResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictionResults = utils.objectToClass(
              httpRes?.data,
              shared.PostPredicted,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrors = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Extracts topics and sentiments and relates them.
   */
  topicSentiment(
    req: operations.TopicSentimentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TopicSentimentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TopicSentimentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/topic-sentiment";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TopicSentimentResponse =
        new operations.TopicSentimentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.topicSentimentResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.topicSentimentResponse = utils.objectToClass(
              httpRes?.data,
              shared.TopicSentimentOutput,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
