<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Media 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get MediaItems
     * 
     * Media Items Listings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonResponse
     */
	public function getResourcesMediaJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get the list of featured content in the syndication system
     * 
     * Get the list of featured content in the syndication system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonResponse
     */
	public function getResourcesMediaFeaturedJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/featured.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaFeaturedJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItem>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItems by popularity
     * 
     * Get the media with the highest ratings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatResponse
     */
	public function getResourcesMediaMostPopularMediaFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/mostPopularMedia.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaMostPopularMediaFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItems by search query
     * 
     * Full search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonResponse
     */
	public function getResourcesMediaSearchResultsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/searchResults.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaSearchResultsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItem by ID
     * 
     * Information about a specific media item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonResponse
     */
	public function getResourcesMediaIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get content for MediaItem
     * 
     * The actual media content (html, image, etc...)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentResponse
     */
	public function getResourcesMediaIdContent(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/content', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getResourcesMediaIdContent200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get embed code for MediaItem
     * 
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonResponse
     */
	public function getResourcesMediaIdEmbedJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/embed.json', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdEmbedJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getResourcesMediaIdEmbedJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Tag by ID
     * 
     * Get the jpg preview of the content item where applicable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgResponse
     */
	public function getResourcesMediaIdPreviewJpg(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/preview.jpg', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdPreviewJpgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getResourcesMediaIdPreviewJpg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get related MediaItems by ID
     * 
     * Get the media related to the current media item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatResponse
     */
	public function getResourcesMediaIdRelatedMediaFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/relatedMedia.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdRelatedMediaFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get syndicated content for MediaItem
     * 
     * Get syndicated content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatResponse
     */
	public function getResourcesMediaIdSyndicateFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/syndicate.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdSyndicateFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syndicateMarshallerWrapped = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyndicateMarshallerWrapped', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get JPG thumbnail for MediaItem
     * 
     * Get the jpg thumbnail of the content item where applicable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgResponse
     */
	public function getResourcesMediaIdThumbnailJpg(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/thumbnail.jpg', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdThumbnailJpgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getResourcesMediaIdThumbnailJpg200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Youtube metadata for MediaItem
     * 
     * Youtube meta-data for a video item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonResponse
     */
	public function getResourcesMediaIdYoutubeMetaDataJson(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/media/{id}/youtubeMetaData.json', \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getResourcesMediaIdYoutubeMetaDataJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetResourcesMediaIdYoutubeMetaDataJSON200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}