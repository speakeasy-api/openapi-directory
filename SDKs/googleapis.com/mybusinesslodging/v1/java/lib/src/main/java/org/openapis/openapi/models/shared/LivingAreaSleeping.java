/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivingAreaSleeping - Information about sleeping features in the living area.
 */
public class LivingAreaSleeping {
    /**
     * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bedsCount")
    public Integer bedsCount;

    public LivingAreaSleeping withBedsCount(Integer bedsCount) {
        this.bedsCount = bedsCount;
        return this;
    }
    
    /**
     * Beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bedsCountException")
    public LivingAreaSleepingBedsCountExceptionEnum bedsCountException;

    public LivingAreaSleeping withBedsCountException(LivingAreaSleepingBedsCountExceptionEnum bedsCountException) {
        this.bedsCountException = bedsCountException;
        return this;
    }
    
    /**
     * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bunkBedsCount")
    public Integer bunkBedsCount;

    public LivingAreaSleeping withBunkBedsCount(Integer bunkBedsCount) {
        this.bunkBedsCount = bunkBedsCount;
        return this;
    }
    
    /**
     * Bunk beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bunkBedsCountException")
    public LivingAreaSleepingBunkBedsCountExceptionEnum bunkBedsCountException;

    public LivingAreaSleeping withBunkBedsCountException(LivingAreaSleepingBunkBedsCountExceptionEnum bunkBedsCountException) {
        this.bunkBedsCountException = bunkBedsCountException;
        return this;
    }
    
    /**
     * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cribsCount")
    public Integer cribsCount;

    public LivingAreaSleeping withCribsCount(Integer cribsCount) {
        this.cribsCount = cribsCount;
        return this;
    }
    
    /**
     * Cribs count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cribsCountException")
    public LivingAreaSleepingCribsCountExceptionEnum cribsCountException;

    public LivingAreaSleeping withCribsCountException(LivingAreaSleepingCribsCountExceptionEnum cribsCountException) {
        this.cribsCountException = cribsCountException;
        return this;
    }
    
    /**
     * Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known as full size bed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doubleBedsCount")
    public Integer doubleBedsCount;

    public LivingAreaSleeping withDoubleBedsCount(Integer doubleBedsCount) {
        this.doubleBedsCount = doubleBedsCount;
        return this;
    }
    
    /**
     * Double beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doubleBedsCountException")
    public LivingAreaSleepingDoubleBedsCountExceptionEnum doubleBedsCountException;

    public LivingAreaSleeping withDoubleBedsCountException(LivingAreaSleepingDoubleBedsCountExceptionEnum doubleBedsCountException) {
        this.doubleBedsCountException = doubleBedsCountException;
        return this;
    }
    
    /**
     * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featherPillows")
    public Boolean featherPillows;

    public LivingAreaSleeping withFeatherPillows(Boolean featherPillows) {
        this.featherPillows = featherPillows;
        return this;
    }
    
    /**
     * Feather pillows exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featherPillowsException")
    public LivingAreaSleepingFeatherPillowsExceptionEnum featherPillowsException;

    public LivingAreaSleeping withFeatherPillowsException(LivingAreaSleepingFeatherPillowsExceptionEnum featherPillowsException) {
        this.featherPillowsException = featherPillowsException;
        return this;
    }
    
    /**
     * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hypoallergenicBedding")
    public Boolean hypoallergenicBedding;

    public LivingAreaSleeping withHypoallergenicBedding(Boolean hypoallergenicBedding) {
        this.hypoallergenicBedding = hypoallergenicBedding;
        return this;
    }
    
    /**
     * Hypoallergenic bedding exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hypoallergenicBeddingException")
    public LivingAreaSleepingHypoallergenicBeddingExceptionEnum hypoallergenicBeddingException;

    public LivingAreaSleeping withHypoallergenicBeddingException(LivingAreaSleepingHypoallergenicBeddingExceptionEnum hypoallergenicBeddingException) {
        this.hypoallergenicBeddingException = hypoallergenicBeddingException;
        return this;
    }
    
    /**
     * King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kingBedsCount")
    public Integer kingBedsCount;

    public LivingAreaSleeping withKingBedsCount(Integer kingBedsCount) {
        this.kingBedsCount = kingBedsCount;
        return this;
    }
    
    /**
     * King beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kingBedsCountException")
    public LivingAreaSleepingKingBedsCountExceptionEnum kingBedsCountException;

    public LivingAreaSleeping withKingBedsCountException(LivingAreaSleepingKingBedsCountExceptionEnum kingBedsCountException) {
        this.kingBedsCountException = kingBedsCountException;
        return this;
    }
    
    /**
     * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryFoamPillows")
    public Boolean memoryFoamPillows;

    public LivingAreaSleeping withMemoryFoamPillows(Boolean memoryFoamPillows) {
        this.memoryFoamPillows = memoryFoamPillows;
        return this;
    }
    
    /**
     * Memory foam pillows exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryFoamPillowsException")
    public LivingAreaSleepingMemoryFoamPillowsExceptionEnum memoryFoamPillowsException;

    public LivingAreaSleeping withMemoryFoamPillowsException(LivingAreaSleepingMemoryFoamPillowsExceptionEnum memoryFoamPillowsException) {
        this.memoryFoamPillowsException = memoryFoamPillowsException;
        return this;
    }
    
    /**
     * Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherBedsCount")
    public Integer otherBedsCount;

    public LivingAreaSleeping withOtherBedsCount(Integer otherBedsCount) {
        this.otherBedsCount = otherBedsCount;
        return this;
    }
    
    /**
     * Other beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherBedsCountException")
    public LivingAreaSleepingOtherBedsCountExceptionEnum otherBedsCountException;

    public LivingAreaSleeping withOtherBedsCountException(LivingAreaSleepingOtherBedsCountExceptionEnum otherBedsCountException) {
        this.otherBedsCountException = otherBedsCountException;
        return this;
    }
    
    /**
     * Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queenBedsCount")
    public Integer queenBedsCount;

    public LivingAreaSleeping withQueenBedsCount(Integer queenBedsCount) {
        this.queenBedsCount = queenBedsCount;
        return this;
    }
    
    /**
     * Queen beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queenBedsCountException")
    public LivingAreaSleepingQueenBedsCountExceptionEnum queenBedsCountException;

    public LivingAreaSleeping withQueenBedsCountException(LivingAreaSleepingQueenBedsCountExceptionEnum queenBedsCountException) {
        this.queenBedsCountException = queenBedsCountException;
        return this;
    }
    
    /**
     * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollAwayBedsCount")
    public Integer rollAwayBedsCount;

    public LivingAreaSleeping withRollAwayBedsCount(Integer rollAwayBedsCount) {
        this.rollAwayBedsCount = rollAwayBedsCount;
        return this;
    }
    
    /**
     * Roll away beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollAwayBedsCountException")
    public LivingAreaSleepingRollAwayBedsCountExceptionEnum rollAwayBedsCountException;

    public LivingAreaSleeping withRollAwayBedsCountException(LivingAreaSleepingRollAwayBedsCountExceptionEnum rollAwayBedsCountException) {
        this.rollAwayBedsCountException = rollAwayBedsCountException;
        return this;
    }
    
    /**
     * Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that can accommodate one adult.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleOrTwinBedsCount")
    public Integer singleOrTwinBedsCount;

    public LivingAreaSleeping withSingleOrTwinBedsCount(Integer singleOrTwinBedsCount) {
        this.singleOrTwinBedsCount = singleOrTwinBedsCount;
        return this;
    }
    
    /**
     * Single or twin beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleOrTwinBedsCountException")
    public LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum singleOrTwinBedsCountException;

    public LivingAreaSleeping withSingleOrTwinBedsCountException(LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum singleOrTwinBedsCountException) {
        this.singleOrTwinBedsCountException = singleOrTwinBedsCountException;
        return this;
    }
    
    /**
     * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sofaBedsCount")
    public Integer sofaBedsCount;

    public LivingAreaSleeping withSofaBedsCount(Integer sofaBedsCount) {
        this.sofaBedsCount = sofaBedsCount;
        return this;
    }
    
    /**
     * Sofa beds count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sofaBedsCountException")
    public LivingAreaSleepingSofaBedsCountExceptionEnum sofaBedsCountException;

    public LivingAreaSleeping withSofaBedsCountException(LivingAreaSleepingSofaBedsCountExceptionEnum sofaBedsCountException) {
        this.sofaBedsCountException = sofaBedsCountException;
        return this;
    }
    
    /**
     * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syntheticPillows")
    public Boolean syntheticPillows;

    public LivingAreaSleeping withSyntheticPillows(Boolean syntheticPillows) {
        this.syntheticPillows = syntheticPillows;
        return this;
    }
    
    /**
     * Synthetic pillows exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syntheticPillowsException")
    public LivingAreaSleepingSyntheticPillowsExceptionEnum syntheticPillowsException;

    public LivingAreaSleeping withSyntheticPillowsException(LivingAreaSleepingSyntheticPillowsExceptionEnum syntheticPillowsException) {
        this.syntheticPillowsException = syntheticPillowsException;
        return this;
    }
    
    public LivingAreaSleeping(){}
}
