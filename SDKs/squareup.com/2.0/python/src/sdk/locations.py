"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Locations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_location(self, request: shared.CreateLocationRequest, security: operations.CreateLocationSecurity) -> operations.CreateLocationResponse:
        r"""CreateLocation
        Creates a location.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationResponse])
                res.create_location_response = out

        return res

    def list_locations(self) -> operations.ListLocationsResponse:
        r"""ListLocations
        Provides information of all locations of a business.
        
        Many Square API endpoints require a `location_id` parameter.
        The `id` field of the [`Location`](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) objects returned by this
        endpoint correspond to that `location_id` parameter.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def retrieve_location(self, request: operations.RetrieveLocationRequest, security: operations.RetrieveLocationSecurity) -> operations.RetrieveLocationResponse:
        r"""RetrieveLocation
        Retrieves details of a location. You can specify \"main\" 
        as the location ID to retrieve details of the 
        main location.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveLocationRequest, base_url, '/v2/locations/{location_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveLocationResponse])
                res.retrieve_location_response = out

        return res

    def update_location(self, request: operations.UpdateLocationRequest, security: operations.UpdateLocationSecurity) -> operations.UpdateLocationResponse:
        r"""UpdateLocation
        Updates a location.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateLocationRequest, base_url, '/v2/locations/{location_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_location_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateLocationResponse])
                res.update_location_response = out

        return res

    