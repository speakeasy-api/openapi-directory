/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class User {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ActionNotificationsLastReadOn")
    public OffsetDateTime actionNotificationsLastReadOn;
    public User withActionNotificationsLastReadOn(OffsetDateTime actionNotificationsLastReadOn) {
        this.actionNotificationsLastReadOn = actionNotificationsLastReadOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Email")
    public String email;
    public User withEmail(String email) {
        this.email = email;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExternalConnections")
    public ExternalConnection[] externalConnections;
    public User withExternalConnections(ExternalConnection[] externalConnections) {
        this.externalConnections = externalConnections;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HasBeenOnboarded")
    public Boolean hasBeenOnboarded;
    public User withHasBeenOnboarded(Boolean hasBeenOnboarded) {
        this.hasBeenOnboarded = hasBeenOnboarded;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public Integer id;
    public User withId(Integer id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsLocked")
    public Boolean isLocked;
    public User withIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsVerified")
    public Boolean isVerified;
    public User withIsVerified(Boolean isVerified) {
        this.isVerified = isVerified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("KnowledgeNotificationsLastReadOn")
    public OffsetDateTime knowledgeNotificationsLastReadOn;
    public User withKnowledgeNotificationsLastReadOn(OffsetDateTime knowledgeNotificationsLastReadOn) {
        this.knowledgeNotificationsLastReadOn = knowledgeNotificationsLastReadOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastSeenOn")
    public OffsetDateTime lastSeenOn;
    public User withLastSeenOn(OffsetDateTime lastSeenOn) {
        this.lastSeenOn = lastSeenOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public User withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Password")
    public String password;
    public User withPassword(String password) {
        this.password = password;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PasswordSalt")
    public String passwordSalt;
    public User withPasswordSalt(String passwordSalt) {
        this.passwordSalt = passwordSalt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferralPath")
    public String referralPath;
    public User withReferralPath(String referralPath) {
        this.referralPath = referralPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferredUsers")
    public Integer referredUsers;
    public User withReferredUsers(Integer referredUsers) {
        this.referredUsers = referredUsers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferrerKey")
    public String referrerKey;
    public User withReferrerKey(String referrerKey) {
        this.referrerKey = referrerKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Settings")
    public UserSettings settings;
    public User withSettings(UserSettings settings) {
        this.settings = settings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public UserStatusEnum status;
    public User withStatus(UserStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscriptionPlan")
    public SubscriptionPlan subscriptionPlan;
    public User withSubscriptionPlan(SubscriptionPlan subscriptionPlan) {
        this.subscriptionPlan = subscriptionPlan;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public UserTypeEnum type;
    public User withType(UserTypeEnum type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Username")
    public String username;
    public User withUsername(String username) {
        this.username = username;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("VerifiedOn")
    public OffsetDateTime verifiedOn;
    public User withVerifiedOn(OffsetDateTime verifiedOn) {
        this.verifiedOn = verifiedOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("YearsOfExperience")
    public UserYearsOfExperienceEnum yearsOfExperience;
    public User withYearsOfExperience(UserYearsOfExperienceEnum yearsOfExperience) {
        this.yearsOfExperience = yearsOfExperience;
        return this;
    }
    
}
