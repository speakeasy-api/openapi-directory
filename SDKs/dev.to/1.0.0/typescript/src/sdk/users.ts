/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Users {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Organization's users
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of users belonging to the organization
   *
   * It supports pagination, each page will contain `30` users by default.
   */
  getOrgUsers(
    req: operations.GetOrgUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/organizations/{username}/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrgUsersResponse =
        new operations.GetOrgUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * A User
   *
   * @remarks
   * This endpoint allows the client to retrieve a single user, either by id
   * or by the user's username.
   *
   * For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
   */
  getUser(
    req: operations.GetUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/users/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserResponse = new operations.GetUserResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUser200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * User's all articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * It will return both published and unpublished articles with pagination.
   *
   * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
   *
   * By default a page will contain 30 articles.
   */
  getUserAllArticles(
    req: operations.GetUserAllArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserAllArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserAllArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles/me/all";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserAllArticlesResponse =
        new operations.GetUserAllArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserArticles(
    req: operations.GetUserArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles/me";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserArticlesResponse =
        new operations.GetUserArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * The authenticated user
   *
   * @remarks
   * This endpoint allows the client to retrieve information about the authenticated user
   */
  getUserMe(
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserMeResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/users/me";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserMeResponse =
        new operations.GetUserMeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserMe200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's published articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserPublishedArticles(
    req: operations.GetUserPublishedArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserPublishedArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserPublishedArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/articles/me/published";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserPublishedArticlesResponse =
        new operations.GetUserPublishedArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's unpublished articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Unpublished articles will be in reverse chronological creation order.
   *
   * It will return unpublished articles with pagination. By default a page will contain 30 articles.
   */
  getUserUnpublishedArticles(
    req: operations.GetUserUnpublishedArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserUnpublishedArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserUnpublishedArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/articles/me/unpublished";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserUnpublishedArticlesResponse =
        new operations.GetUserUnpublishedArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Invite a User
   *
   * @remarks
   * This endpoint allows the client to trigger an invitation to the provided email address.
   *
   *         It requires a token from a user with `super_admin` privileges.
   */
  postAdminUsersCreate(
    req: shared.UserInviteParam,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAdminUsersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UserInviteParam(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/admin/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAdminUsersCreateResponse =
        new operations.PostAdminUsersCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Suspend a User
   *
   * @remarks
   * This endpoint allows the client to suspend a user.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * This specified user will be assigned the 'suspended' role. Suspending a user will stop the
   * user from posting new posts and comments. It doesn't delete any of the user's content, just
   * prevents them from creating new content while suspended. Users are not notified of their suspension
   * in the UI, so if you want them to know about this, you must notify them.
   */
  suspendUser(
    req: operations.SuspendUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuspendUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuspendUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/users/{id}/suspend",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuspendUserResponse =
        new operations.SuspendUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Unpublish a User's Articles and Comments
   *
   * @remarks
   * This endpoint allows the client to unpublish all of the articles and
   * comments created by a user.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * This specified user's articles and comments will be unpublished and will no longer be
   * visible to the public. They will remain in the database and will set back to draft status
   * on the specified user's  dashboard. Any notifications associated with the specified user's
   * articles and comments will be deleted.
   *
   * Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT
   * status code immediately, but the articles and comments will not be unpublished until the
   * request is completed on the server.
   */
  unpublishUser(
    req: operations.UnpublishUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnpublishUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnpublishUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/users/{id}/unpublish",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnpublishUserResponse =
        new operations.UnpublishUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
