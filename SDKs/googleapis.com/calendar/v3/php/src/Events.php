<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Events 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteResponse
     */
	public function calendarEventsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetResponse
     */
	public function calendarEventsGet(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportResponse
     */
	public function calendarEventsImport(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/import', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "event", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertResponse
     */
	public function calendarEventsInsert(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "event", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns instances of the specified recurring event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesResponse
     */
	public function calendarEventsInstances(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}/instances', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Events', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns events on the specified calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListResponse
     */
	public function calendarEventsList(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Events', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves an event to another calendar, i.e. changes an event's organizer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveResponse
     */
	public function calendarEventsMove(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}/move', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an event. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchResponse
     */
	public function calendarEventsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "event", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an event based on a simple text string.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddResponse
     */
	public function calendarEventsQuickAdd(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/quickAdd', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsQuickAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateResponse
     */
	public function calendarEventsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/{eventId}', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "event", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->event = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Event', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watch for changes to Events resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchResponse
     */
	public function calendarEventsWatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/events/watch', \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarEventsWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}