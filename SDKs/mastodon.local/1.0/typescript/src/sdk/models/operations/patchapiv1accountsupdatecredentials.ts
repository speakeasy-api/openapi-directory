/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PatchApiV1AccountsUpdateCredentialsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

export class PatchApiV1AccountsUpdateCredentialsRequestBodySource extends SpeakeasyBase {
  /**
   * Default language to use for authored statuses. (ISO 6391)
   */
  @SpeakeasyMetadata()
  language?: string;

  /**
   * Default post privacy for authored statuses.
   */
  @SpeakeasyMetadata()
  privacy?: string;

  /**
   * Whether to mark authored statuses as sensitive by default.
   */
  @SpeakeasyMetadata()
  sensitive?: boolean;
}

export class PatchApiV1AccountsUpdateCredentialsRequestBody extends SpeakeasyBase {
  /**
   * Avatar image encoded using multipart/form-data
   */
  @SpeakeasyMetadata()
  avatar?: string;

  /**
   * Whether the account has a bot flag.
   */
  @SpeakeasyMetadata()
  bot?: boolean;

  /**
   * Whether the account should be shown in the profile directory.
   */
  @SpeakeasyMetadata()
  discoverable?: string;

  /**
   * The display name to use for the profile.
   */
  @SpeakeasyMetadata()
  displayName?: string;

  /**
   * Profile metadata `name` and `value`. (By default, max 4 fields and 255 characters per property/value)
   */
  @SpeakeasyMetadata()
  fieldsAttributes?: Record<string, any>;

  /**
   * Header image encoded using multipart/form-data
   */
  @SpeakeasyMetadata()
  header?: string;

  /**
   * Whether manual approval of follow requests is required.
   */
  @SpeakeasyMetadata()
  locked?: boolean;

  /**
   * The account bio.
   */
  @SpeakeasyMetadata()
  note?: string;

  @SpeakeasyMetadata()
  source?: PatchApiV1AccountsUpdateCredentialsRequestBodySource;
}

export class PatchApiV1AccountsUpdateCredentialsResponse extends SpeakeasyBase {
  /**
   * You should use `accounts/verify_credentials` to first obtain plaintext representations from within the `source` parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.
   */
  @SpeakeasyMetadata()
  account?: shared.Account;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
