// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETVpnConnectionDeviceSampleConfigurationActionEnum
type GETGETVpnConnectionDeviceSampleConfigurationActionEnum string

const (
	GETGETVpnConnectionDeviceSampleConfigurationActionEnumGetVpnConnectionDeviceSampleConfiguration GETGETVpnConnectionDeviceSampleConfigurationActionEnum = "GetVpnConnectionDeviceSampleConfiguration"
)

func (e GETGETVpnConnectionDeviceSampleConfigurationActionEnum) ToPointer() *GETGETVpnConnectionDeviceSampleConfigurationActionEnum {
	return &e
}

func (e *GETGETVpnConnectionDeviceSampleConfigurationActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetVpnConnectionDeviceSampleConfiguration":
		*e = GETGETVpnConnectionDeviceSampleConfigurationActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVpnConnectionDeviceSampleConfigurationActionEnum: %v", v)
	}
}

// GETGETVpnConnectionDeviceSampleConfigurationVersionEnum
type GETGETVpnConnectionDeviceSampleConfigurationVersionEnum string

const (
	GETGETVpnConnectionDeviceSampleConfigurationVersionEnumTwoThousandAndSixteen1115 GETGETVpnConnectionDeviceSampleConfigurationVersionEnum = "2016-11-15"
)

func (e GETGETVpnConnectionDeviceSampleConfigurationVersionEnum) ToPointer() *GETGETVpnConnectionDeviceSampleConfigurationVersionEnum {
	return &e
}

func (e *GETGETVpnConnectionDeviceSampleConfigurationVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETGETVpnConnectionDeviceSampleConfigurationVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVpnConnectionDeviceSampleConfigurationVersionEnum: %v", v)
	}
}

type GETGETVpnConnectionDeviceSampleConfigurationRequest struct {
	Action GETGETVpnConnectionDeviceSampleConfigurationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IKE version to be used in the sample configuration file for your customer gateway device. You can specify one of the following versions: <code>ikev1</code> or <code>ikev2</code>.
	InternetKeyExchangeVersion *string                                                 `queryParam:"style=form,explode=true,name=InternetKeyExchangeVersion"`
	Version                    GETGETVpnConnectionDeviceSampleConfigurationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// Device identifier provided by the <code>GetVpnConnectionDeviceTypes</code> API.
	VpnConnectionDeviceTypeID string `queryParam:"style=form,explode=true,name=VpnConnectionDeviceTypeId"`
	// The <code>VpnConnectionId</code> specifies the Site-to-Site VPN connection used for the sample configuration.
	VpnConnectionID   string  `queryParam:"style=form,explode=true,name=VpnConnectionId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETVpnConnectionDeviceSampleConfigurationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
