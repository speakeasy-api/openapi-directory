"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import team_full as shared_team_full
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamsUpdateLegacyRequestBodyPermissionEnum(str, Enum):
    r"""**Deprecated**. The permission that new repositories will be added to the team with when none is specified."""
    PULL = 'pull'
    PUSH = 'push'
    ADMIN = 'admin'

class TeamsUpdateLegacyRequestBodyPrivacyEnum(str, Enum):
    r"""The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
    **For a non-nested team:**  
    \* `secret` - only visible to organization owners and members of this team.  
    \* `closed` - visible to all members of this organization.  
    **For a parent or child team:**  
    \* `closed` - visible to all members of this organization.
    """
    SECRET = 'secret'
    CLOSED = 'closed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsUpdateLegacyRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the team."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the team."""  
    parent_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_team_id'), 'exclude': lambda f: f is None }})
    r"""The ID of a team to set as the parent team."""  
    permission: Optional[TeamsUpdateLegacyRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""**Deprecated**. The permission that new repositories will be added to the team with when none is specified."""  
    privacy: Optional[TeamsUpdateLegacyRequestBodyPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
    **For a non-nested team:**  
    \* `secret` - only visible to organization owners and members of this team.  
    \* `closed` - visible to all members of this organization.  
    **For a parent or child team:**  
    \* `closed` - visible to all members of this organization.
    """  
    

@dataclasses.dataclass
class TeamsUpdateLegacyRequest:
    
    request_body: TeamsUpdateLegacyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    team_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'team_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the team."""  
    

@dataclasses.dataclass
class TeamsUpdateLegacyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    team_full: Optional[shared_team_full.TeamFull] = dataclasses.field(default=None)
    r"""Response when the updated information already exists"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    