"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import payoraddressv2 as shared_payoraddressv2
from ..shared import transmissiontypes_2 as shared_transmissiontypes_2
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayorV2:
    r"""Get Payor Details"""
    
    payor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId') }})  
    payor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorName') }})
    r"""The name of the payor."""  
    address: Optional[shared_payoraddressv2.PayorAddressV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    allows_language_choice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowsLanguageChoice'), 'exclude': lambda f: f is None }})
    r"""Whether or not the payor allows language choice in the UI."""  
    collective_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectiveAlias'), 'exclude': lambda f: f is None }})
    r"""How the payor has chosen to refer to payees."""  
    dba_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dbaName'), 'exclude': lambda f: f is None }})
    r"""The payor’s 'Doing Business As' name."""  
    includes_reports: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includesReports'), 'exclude': lambda f: f is None }})  
    kyc_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kycState'), 'exclude': lambda f: f is None }})
    r"""The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""The payor’s language preference. Must be one of [EN, FR]"""  
    managing_payees: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managingPayees'), 'exclude': lambda f: f is None }})  
    manual_lockout: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualLockout'), 'exclude': lambda f: f is None }})
    r"""Whether or not the payor has been manually locked by the backoffice."""  
    max_master_payor_admins: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxMasterPayorAdmins'), 'exclude': lambda f: f is None }})  
    open_banking_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openBankingEnabled'), 'exclude': lambda f: f is None }})
    r"""Is Open Banking supported for this payor"""  
    payee_grace_period_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeGracePeriodDays'), 'exclude': lambda f: f is None }})
    r"""The grace period for paying payees in days."""  
    payee_grace_period_processing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeGracePeriodProcessingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether grace period processing is enabled."""  
    payment_rails: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentRails'), 'exclude': lambda f: f is None }})
    r"""The id of the payment rails"""  
    payor_xid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorXid'), 'exclude': lambda f: f is None }})
    r"""A unique identifier that an external system uses to reference the payor in their system"""  
    primary_contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactEmail'), 'exclude': lambda f: f is None }})
    r"""Primary contact email for the payor."""  
    primary_contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactName'), 'exclude': lambda f: f is None }})
    r"""Name of primary contact for the payor."""  
    primary_contact_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactPhone'), 'exclude': lambda f: f is None }})
    r"""Primary contact phone number for the payor."""  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""The source of the payorXid, default is null which means Velo"""  
    reminder_emails_opt_out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminderEmailsOptOut'), 'exclude': lambda f: f is None }})
    r"""Whether or not the payor has opted-out of reminder emails being sent."""  
    remote_system_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteSystemIds'), 'exclude': lambda f: f is None }})
    r"""The payor’s supported remote systems by id"""  
    support_contact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportContact'), 'exclude': lambda f: f is None }})
    r"""The payor’s support contact email address."""  
    transmission_types: Optional[shared_transmissiontypes_2.TransmissionTypes2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissionTypes'), 'exclude': lambda f: f is None }})  
    usd_txn_value_reporting_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usdTxnValueReportingThreshold'), 'exclude': lambda f: f is None }})
    r"""USD in minor units"""  
    wu_customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wuCustomerId'), 'exclude': lambda f: f is None }})  
    