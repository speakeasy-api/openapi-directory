// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SoleProprietorshipVatAbsenceReasonEnum - The reason for not providing a VAT number.
//
// Possible values: **industryExemption**, **belowTaxThreshold**.
type SoleProprietorshipVatAbsenceReasonEnum string

const (
	SoleProprietorshipVatAbsenceReasonEnumIndustryExemption SoleProprietorshipVatAbsenceReasonEnum = "industryExemption"
	SoleProprietorshipVatAbsenceReasonEnumBelowTaxThreshold SoleProprietorshipVatAbsenceReasonEnum = "belowTaxThreshold"
)

func (e SoleProprietorshipVatAbsenceReasonEnum) ToPointer() *SoleProprietorshipVatAbsenceReasonEnum {
	return &e
}

func (e *SoleProprietorshipVatAbsenceReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "industryExemption":
		fallthrough
	case "belowTaxThreshold":
		*e = SoleProprietorshipVatAbsenceReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SoleProprietorshipVatAbsenceReasonEnum: %v", v)
	}
}

type SoleProprietorship struct {
	// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
	CountryOfGoverningLaw string `json:"countryOfGoverningLaw"`
	// The date when the legal arrangement was incorporated in YYYY-MM-DD format.
	DateOfIncorporation *string `json:"dateOfIncorporation,omitempty"`
	// The registered name, if different from the `name`.
	DoingBusinessAs *string `json:"doingBusinessAs,omitempty"`
	// The legal name.
	Name                     string   `json:"name"`
	PrincipalPlaceOfBusiness *Address `json:"principalPlaceOfBusiness,omitempty"`
	RegisteredAddress        Address  `json:"registeredAddress"`
	// The registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The reason for not providing a VAT number.
	//
	// Possible values: **industryExemption**, **belowTaxThreshold**.
	VatAbsenceReason *SoleProprietorshipVatAbsenceReasonEnum `json:"vatAbsenceReason,omitempty"`
	// The VAT number.
	VatNumber *string `json:"vatNumber,omitempty"`
}
