// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePresignedNotebookInstanceURLXAmzTargetEnum
type CreatePresignedNotebookInstanceURLXAmzTargetEnum string

const (
	CreatePresignedNotebookInstanceURLXAmzTargetEnumSageMakerCreatePresignedNotebookInstanceURL CreatePresignedNotebookInstanceURLXAmzTargetEnum = "SageMaker.CreatePresignedNotebookInstanceUrl"
)

func (e CreatePresignedNotebookInstanceURLXAmzTargetEnum) ToPointer() *CreatePresignedNotebookInstanceURLXAmzTargetEnum {
	return &e
}

func (e *CreatePresignedNotebookInstanceURLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.CreatePresignedNotebookInstanceUrl":
		*e = CreatePresignedNotebookInstanceURLXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePresignedNotebookInstanceURLXAmzTargetEnum: %v", v)
	}
}

type CreatePresignedNotebookInstanceURLRequest struct {
	CreatePresignedNotebookInstanceURLInput shared.CreatePresignedNotebookInstanceURLInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                           *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                       *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                          *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                       *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                           *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                       *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                              CreatePresignedNotebookInstanceURLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePresignedNotebookInstanceURLResponse struct {
	ContentType string
	// Success
	CreatePresignedNotebookInstanceURLOutput *shared.CreatePresignedNotebookInstanceURLOutput
	StatusCode                               int
	RawResponse                              *http.Response
}
