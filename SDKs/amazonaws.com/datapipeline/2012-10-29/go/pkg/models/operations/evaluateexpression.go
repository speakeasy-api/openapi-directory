// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// EvaluateExpressionXAmzTargetEnum
type EvaluateExpressionXAmzTargetEnum string

const (
	EvaluateExpressionXAmzTargetEnumDataPipelineEvaluateExpression EvaluateExpressionXAmzTargetEnum = "DataPipeline.EvaluateExpression"
)

func (e EvaluateExpressionXAmzTargetEnum) ToPointer() *EvaluateExpressionXAmzTargetEnum {
	return &e
}

func (e *EvaluateExpressionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DataPipeline.EvaluateExpression":
		*e = EvaluateExpressionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EvaluateExpressionXAmzTargetEnum: %v", v)
	}
}

type EvaluateExpressionRequest struct {
	EvaluateExpressionInput shared.EvaluateExpressionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              EvaluateExpressionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type EvaluateExpressionResponse struct {
	ContentType string
	// Success
	EvaluateExpressionOutput *shared.EvaluateExpressionOutput
	// InternalServiceError
	InternalServiceError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// PipelineDeletedException
	PipelineDeletedException interface{}
	// PipelineNotFoundException
	PipelineNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// TaskNotFoundException
	TaskNotFoundException interface{}
}
