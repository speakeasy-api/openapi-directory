"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import objects as shared_objects
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class StorageObjectsListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageObjectsListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageObjectsListSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageObjectsListSecurity:
    
    option1: Optional[StorageObjectsListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[StorageObjectsListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[StorageObjectsListSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class StorageObjectsListProjectionEnum(str, Enum):
    r"""Set of properties to return. Defaults to noAcl."""
    FULL = 'full'
    NO_ACL = 'noAcl'


@dataclasses.dataclass
class StorageObjectsListRequest:
    
    bucket: str = dataclasses.field(metadata={'path_param': { 'field_name': 'bucket', 'style': 'simple', 'explode': False }})
    r"""Name of the bucket in which to look for objects."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    delimiter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'delimiter', 'style': 'form', 'explode': True }})
    r"""Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of items plus prefixes to return. As duplicate prefixes are omitted, fewer total results may be returned than requested."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""A previously-returned page token representing part of the larger set of results to view."""  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prefix', 'style': 'form', 'explode': True }})
    r"""Filter results to objects whose names begin with this prefix."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    projection: Optional[StorageObjectsListProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""Set of properties to return. Defaults to noAcl."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    versions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'versions', 'style': 'form', 'explode': True }})
    r"""If true, lists all versions of a file as distinct results."""  
    

@dataclasses.dataclass
class StorageObjectsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    objects: Optional[shared_objects.Objects] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    