// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TriggerEventEnum string

const (
	TriggerEventEnumPerson   TriggerEventEnum = "person"
	TriggerEventEnumCollect  TriggerEventEnum = "collect"
	TriggerEventEnumDocument TriggerEventEnum = "document"
)

func (e TriggerEventEnum) ToPointer() *TriggerEventEnum {
	return &e
}

func (e *TriggerEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "person":
		fallthrough
	case "collect":
		fallthrough
	case "document":
		*e = TriggerEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerEventEnum: %v", v)
	}
}

type Trigger struct {
	Date  *string           `json:"Date,omitempty"`
	Event *TriggerEventEnum `json:"Event,omitempty"`
}
