/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FormFieldDefinition - Definition of a form field for OCR data extraction from images
 */
public class FormFieldDefinition {
    /**
     * Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllowNumericDigits")
    public Boolean allowNumericDigits;
    public FormFieldDefinition withAllowNumericDigits(Boolean allowNumericDigits) {
        this.allowNumericDigits = allowNumericDigits;
        return this;
    }
    
    /**
     * Optional - alterate match text for the specified anchor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AlternateAnchor")
    public String alternateAnchor;
    public FormFieldDefinition withAlternateAnchor(String alternateAnchor) {
        this.alternateAnchor = alternateAnchor;
        return this;
    }
    
    /**
     * Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnchorMode")
    public String anchorMode;
    public FormFieldDefinition withAnchorMode(String anchorMode) {
        this.anchorMode = anchorMode;
        return this;
    }
    
    /**
     * Optional - the bottom anchor of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BottomAnchor")
    public String bottomAnchor;
    public FormFieldDefinition withBottomAnchor(String bottomAnchor) {
        this.bottomAnchor = bottomAnchor;
        return this;
    }
    
    /**
     * The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataType")
    public String dataType;
    public FormFieldDefinition withDataType(String dataType) {
        this.dataType = dataType;
        return this;
    }
    
    /**
     * The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FieldID")
    public String fieldID;
    public FormFieldDefinition withFieldID(String fieldID) {
        this.fieldID = fieldID;
        return this;
    }
    
    /**
     * Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HorizontalAlignmentType")
    public String horizontalAlignmentType;
    public FormFieldDefinition withHorizontalAlignmentType(String horizontalAlignmentType) {
        this.horizontalAlignmentType = horizontalAlignmentType;
        return this;
    }
    
    /**
     * Optional - Ignore any result items that contain a partial or complete match with these text strings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ignore")
    public String[] ignore;
    public FormFieldDefinition withIgnore(String[] ignore) {
        this.ignore = ignore;
        return this;
    }
    
    /**
     * Optional - the left-hand anchor of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LeftAnchor")
    public String leftAnchor;
    public FormFieldDefinition withLeftAnchor(String leftAnchor) {
        this.leftAnchor = leftAnchor;
        return this;
    }
    
    /**
     * Optional - the target number of digits in the field; useful for fixed-length fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinimumCharacterCount")
    public Integer minimumCharacterCount;
    public FormFieldDefinition withMinimumCharacterCount(Integer minimumCharacterCount) {
        this.minimumCharacterCount = minimumCharacterCount;
        return this;
    }
    
    /**
     * Optional - additional options that can be set for this field definition, separated by commas.  Possible values are AllowMultiMatch (allow the same anchor to be matched to multiple fields)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Options")
    public String options;
    public FormFieldDefinition withOptions(String options) {
        this.options = options;
        return this;
    }
    
    /**
     * Optional - the target number of digits in the field; useful for fixed-length fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetDigitCount")
    public Integer targetDigitCount;
    public FormFieldDefinition withTargetDigitCount(Integer targetDigitCount) {
        this.targetDigitCount = targetDigitCount;
        return this;
    }
    
    /**
     * Optional - scale factor for target field height - relative to height of field title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetFieldHeight_Relative")
    public Double targetFieldHeightRelative;
    public FormFieldDefinition withTargetFieldHeightRelative(Double targetFieldHeightRelative) {
        this.targetFieldHeightRelative = targetFieldHeightRelative;
        return this;
    }
    
    /**
     * Optional - horizontal adjestment in relative width of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetFieldHorizontalAdjustment")
    public Double targetFieldHorizontalAdjustment;
    public FormFieldDefinition withTargetFieldHorizontalAdjustment(Double targetFieldHorizontalAdjustment) {
        this.targetFieldHorizontalAdjustment = targetFieldHorizontalAdjustment;
        return this;
    }
    
    /**
     * Optional - vertical adjestment in relative height of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetFieldVerticalAdjustment")
    public Double targetFieldVerticalAdjustment;
    public FormFieldDefinition withTargetFieldVerticalAdjustment(Double targetFieldVerticalAdjustment) {
        this.targetFieldVerticalAdjustment = targetFieldVerticalAdjustment;
        return this;
    }
    
    /**
     * Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetFieldWidth_Relative")
    public Double targetFieldWidthRelative;
    public FormFieldDefinition withTargetFieldWidthRelative(Double targetFieldWidthRelative) {
        this.targetFieldWidthRelative = targetFieldWidthRelative;
        return this;
    }
    
    /**
     * Optional - the top anchor of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TopAnchor")
    public String topAnchor;
    public FormFieldDefinition withTopAnchor(String topAnchor) {
        this.topAnchor = topAnchor;
        return this;
    }
    
    /**
     * Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VerticalAlignmentType")
    public String verticalAlignmentType;
    public FormFieldDefinition withVerticalAlignmentType(String verticalAlignmentType) {
        this.verticalAlignmentType = verticalAlignmentType;
        return this;
    }
    
}
