/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VideoUpload - The upload information for this video.
 */
public class VideoUpload {
    /**
     * The approach for uploading the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approach")
    public VideoUploadApproachEnum approach;
    public VideoUpload withApproach(VideoUploadApproachEnum approach) {
        this.approach = approach;
        return this;
    }
    
    /**
     * The URI for completing the upload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complete_uri")
    public String completeUri;
    public VideoUpload withCompleteUri(String completeUri) {
        this.completeUri = completeUri;
        return this;
    }
    
    /**
     * The HTML form for uploading a video through the post approach.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form")
    public String form;
    public VideoUpload withForm(String form) {
        this.form = form;
        return this;
    }
    
    /**
     * The link of the video to capture through the pull approach.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    public String link;
    public VideoUpload withLink(String link) {
        this.link = link;
        return this;
    }
    
    /**
     * The redirect URL for the upload app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    public String redirectUrl;
    public VideoUpload withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * The file size in bytes of the uploaded video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Double size;
    public VideoUpload withSize(Double size) {
        this.size = size;
        return this;
    }
    
    /**
     * The status code for the availability of the uploaded video:
     * 
     * Option descriptions:
     *  * `complete` - The upload is complete.
     *  * `error` - The upload ended with an error.
     *  * `in_progress` - The upload is underway.
     * 
     */
    @JsonProperty("status")
    public VideoUploadStatusEnum status;
    public VideoUpload withStatus(VideoUploadStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The link for sending video file data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upload_link")
    public String uploadLink;
    public VideoUpload withUploadLink(String uploadLink) {
        this.uploadLink = uploadLink;
        return this;
    }
    
}
