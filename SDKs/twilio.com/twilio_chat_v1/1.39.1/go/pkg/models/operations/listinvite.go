// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListInviteServerList = []string{
	"https://chat.twilio.com",
}

type ListInviteSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListInvitePathParams struct {
	// The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resources to read belong to.
	ChannelSid string `pathParam:"style=simple,explode=false,name=ChannelSid"`
	// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
	ServiceSid string `pathParam:"style=simple,explode=false,name=ServiceSid"`
}

type ListInviteQueryParams struct {
	// The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.
	Identity []string `queryParam:"style=form,explode=true,name=Identity"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
}

type ListInviteRequest struct {
	PathParams  ListInvitePathParams
	QueryParams ListInviteQueryParams
	Security    ListInviteSecurity
	ServerURL   *string
}

type ListInviteListInviteResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListInviteListInviteResponse - OK
type ListInviteListInviteResponse struct {
	Invites []shared.ChatV1ServiceChannelInvite `json:"invites,omitempty"`
	Meta    *ListInviteListInviteResponseMeta   `json:"meta,omitempty"`
}

type ListInviteResponse struct {
	ContentType string
	// OK
	ListInviteResponse *ListInviteListInviteResponse
	StatusCode         int
	RawResponse        *http.Response
}
