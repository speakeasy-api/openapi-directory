"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def youtube_analytics_groups_delete(self, request: operations.YoutubeAnalyticsGroupsDeleteRequest, security: operations.YoutubeAnalyticsGroupsDeleteSecurity) -> operations.YoutubeAnalyticsGroupsDeleteResponse:
        r"""Deletes a group."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/groups'
        
        query_params = utils.get_query_params(operations.YoutubeAnalyticsGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeAnalyticsGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmptyResponse])
                res.empty_response = out

        return res

    def youtube_analytics_groups_insert(self, request: operations.YoutubeAnalyticsGroupsInsertRequest, security: operations.YoutubeAnalyticsGroupsInsertSecurity) -> operations.YoutubeAnalyticsGroupsInsertResponse:
        r"""Creates a group."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeAnalyticsGroupsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeAnalyticsGroupsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    def youtube_analytics_groups_list(self, request: operations.YoutubeAnalyticsGroupsListRequest, security: operations.YoutubeAnalyticsGroupsListSecurity) -> operations.YoutubeAnalyticsGroupsListResponse:
        r"""Returns a collection of groups that match the API request parameters. For example, you can retrieve all groups that the authenticated user owns, or you can retrieve one or more groups by their unique IDs."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/groups'
        
        query_params = utils.get_query_params(operations.YoutubeAnalyticsGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeAnalyticsGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGroupsResponse])
                res.list_groups_response = out

        return res

    def youtube_analytics_groups_update(self, request: operations.YoutubeAnalyticsGroupsUpdateRequest, security: operations.YoutubeAnalyticsGroupsUpdateSecurity) -> operations.YoutubeAnalyticsGroupsUpdateResponse:
        r"""Modifies a group. For example, you could change a group's title."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeAnalyticsGroupsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeAnalyticsGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    