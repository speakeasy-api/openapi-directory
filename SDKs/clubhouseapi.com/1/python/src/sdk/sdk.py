"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any

SERVERS = [
    "https://www.clubhouseapi.com/api/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Clubhouse API"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_check_for_update(self, request: operations.GetCheckForUpdateRequest) -> operations.GetCheckForUpdateResponse:
        r"""Clubhouse uses this to check for updates when app is not installed from App Store (eg TestFlight)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/check_for_update'
        
        query_params = utils.get_query_params(operations.GetCheckForUpdateRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCheckForUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_actionable_notifications(self) -> operations.GetGetActionableNotificationsResponse:
        r"""get actionable notifications (the bell again)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_actionable_notifications'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetActionableNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_all_topics(self) -> operations.GetGetAllTopicsResponse:
        r"""gets all topics."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_all_topics'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetAllTopicsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_channels(self) -> operations.GetGetChannelsResponse:
        r"""get all channels"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_channels'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_events(self, request: operations.GetGetEventsRequest) -> operations.GetGetEventsResponse:
        r"""the Upcoming for You page"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_events'
        
        query_params = utils.get_query_params(operations.GetGetEventsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_notifications(self, request: operations.GetGetNotificationsRequest) -> operations.GetGetNotificationsResponse:
        r"""get notifications (the bell icon)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_notifications'
        
        query_params = utils.get_query_params(operations.GetGetNotificationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_settings(self) -> operations.GetGetSettingsResponse:
        r"""get notification settings"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_settings'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_suggested_follows_all(self, request: operations.GetGetSuggestedFollowsAllRequest) -> operations.GetGetSuggestedFollowsAllResponse:
        r"""gets suggested follows during signup"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_follows_all'
        
        query_params = utils.get_query_params(operations.GetGetSuggestedFollowsAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetSuggestedFollowsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_users_for_topic(self, request: operations.GetGetUsersForTopicRequest) -> operations.GetGetUsersForTopicResponse:
        r"""looks up users by topic."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_users_for_topic'
        
        query_params = utils.get_query_params(operations.GetGetUsersForTopicRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetUsersForTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_get_welcome_channel(self) -> operations.GetGetWelcomeChannelResponse:
        r"""called during signup"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_welcome_channel'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGetWelcomeChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_call_phone_number_auth(self, request: dict[str, Any]) -> operations.PostCallPhoneNumberAuthResponse:
        r"""Call phone number auth."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/call_phone_number_auth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCallPhoneNumberAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_check_waitlist_status(self) -> operations.PostCheckWaitlistStatusResponse:
        r"""checks waitlist status."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/check_waitlist_status'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCheckWaitlistStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_complete_phone_number_auth(self, request: dict[str, Any]) -> operations.PostCompletePhoneNumberAuthResponse:
        r"""Call phone number auth."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/complete_phone_number_auth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompletePhoneNumberAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_create_channel(self, request: dict[str, Any]) -> operations.PostCreateChannelResponse:
        r"""creates a channel"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/create_channel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCreateChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_follow(self, request: dict[str, Any]) -> operations.PostFollowResponse:
        r"""follows a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/follow'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFollowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_club(self, request: dict[str, Any]) -> operations.PostGetClubResponse:
        r"""gets club by id"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_club'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetClubResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_clubs_for_topic(self, request: dict[str, Any]) -> operations.PostGetClubsForTopicResponse:
        r"""looks up clubs by topic."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_clubs_for_topic'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetClubsForTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_create_channel_targets(self, request: dict[str, Any]) -> operations.PostGetCreateChannelTargetsResponse:
        r"""is fetched when you tap Create Room"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_create_channel_targets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetCreateChannelTargetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_following(self, request: dict[str, Any]) -> operations.PostGetFollowingResponse:
        r"""get a list of the users and clubs that this user is following. Returned users have bios truncated to ~80 characters."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_following'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetFollowingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_online_friends(self, request: dict[str, Any]) -> operations.PostGetOnlineFriendsResponse:
        r"""gets online friends on the app homepage."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_online_friends'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetOnlineFriendsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_profile(self, request: dict[str, Any]) -> operations.PostGetProfileResponse:
        r"""looks up user profile by ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_release_notes(self) -> operations.PostGetReleaseNotesResponse:
        r"""gets release notes."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_release_notes'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetReleaseNotesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_suggested_club_invites(self, request: dict[str, Any]) -> operations.PostGetSuggestedClubInvitesResponse:
        r"""find users to invite to clubs based on phone number"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_club_invites'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetSuggestedClubInvitesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_suggested_follows_friends_only(self, request: dict[str, Any]) -> operations.PostGetSuggestedFollowsFriendsOnlyResponse:
        r"""find people to follow by uploading contacts during signup"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_follows_friends_only'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetSuggestedFollowsFriendsOnlyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_suggested_follows_similar(self, request: dict[str, Any]) -> operations.PostGetSuggestedFollowsSimilarResponse:
        r"""find similar users. (The Sparkles button on Clubhouse's profile page)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_follows_similar'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetSuggestedFollowsSimilarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_suggested_invites(self, request: dict[str, Any]) -> operations.PostGetSuggestedInvitesResponse:
        r"""find users to invite based on phone number.
        (also see https://zerforschung.org/posts/clubhouse-telefonnummern-en/ for @zerforschung's analysis of the privacy implications of this API)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_invites'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetSuggestedInvitesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_suggested_speakers(self, request: dict[str, Any]) -> operations.PostGetSuggestedSpeakersResponse:
        r"""gets suggested users when you start a private room"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_suggested_speakers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetSuggestedSpeakersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_get_topic(self, request: dict[str, Any]) -> operations.PostGetTopicResponse:
        r"""looks up topic by ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/get_topic'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGetTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_invite_from_waitlist(self, request: dict[str, Any]) -> operations.PostInviteFromWaitlistResponse:
        r"""wave to another user on the waitlist to give them access"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/invite_from_waitlist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostInviteFromWaitlistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_invite_to_app(self, request: dict[str, Any]) -> operations.PostInviteToAppResponse:
        r"""invite a user to the app, using one of your invites"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/invite_to_app'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostInviteToAppResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_join_channel(self, request: dict[str, Any]) -> operations.PostJoinChannelResponse:
        r"""join a channel."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/join_channel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostJoinChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_leave_channel(self, request: dict[str, Any]) -> operations.PostLeaveChannelResponse:
        r"""leave a channel."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/leave_channel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLeaveChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_me(self, request: dict[str, Any]) -> operations.PostMeResponse:
        r"""gets user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_record_action_trails(self, request: dict[str, Any]) -> operations.PostRecordActionTrailsResponse:
        r"""analytics"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/record_action_trails'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRecordActionTrailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_refresh_token(self, request: dict[str, Any]) -> operations.PostRefreshTokenResponse:
        r"""gets an access_token from a refresh_token."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/refresh_token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRefreshTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_resend_phone_number_auth(self, request: dict[str, Any]) -> operations.PostResendPhoneNumberAuthResponse:
        r"""Resend phone number auth."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/resend_phone_number_auth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostResendPhoneNumberAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_search_clubs(self, request: dict[str, Any]) -> operations.PostSearchClubsResponse:
        r"""search clubs."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search_clubs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSearchClubsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_search_users(self, request: dict[str, Any]) -> operations.PostSearchUsersResponse:
        r"""search for users"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search_users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSearchUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_start_phone_number_auth(self, request: dict[str, Any]) -> operations.PostStartPhoneNumberAuthResponse:
        r"""Starts phone number auth."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/start_phone_number_auth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostStartPhoneNumberAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_update_notifications(self, request: dict[str, Any]) -> operations.PostUpdateNotificationsResponse:
        r"""updates notification during signup."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/update_notifications'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUpdateNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_update_username(self, request: dict[str, Any]) -> operations.PostUpdateUsernameResponse:
        r"""edits username."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/update_username'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUpdateUsernameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    