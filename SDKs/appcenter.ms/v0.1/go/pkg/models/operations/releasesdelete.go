// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesDeleteSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ReleasesDeleteRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

type ReleasesDelete500ApplicationJSONCodeEnum string

const (
	ReleasesDelete500ApplicationJSONCodeEnumBadRequest          ReleasesDelete500ApplicationJSONCodeEnum = "BadRequest"
	ReleasesDelete500ApplicationJSONCodeEnumConflict            ReleasesDelete500ApplicationJSONCodeEnum = "Conflict"
	ReleasesDelete500ApplicationJSONCodeEnumNotAcceptable       ReleasesDelete500ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesDelete500ApplicationJSONCodeEnumNotFound            ReleasesDelete500ApplicationJSONCodeEnum = "NotFound"
	ReleasesDelete500ApplicationJSONCodeEnumInternalServerError ReleasesDelete500ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesDelete500ApplicationJSONCodeEnumUnauthorized        ReleasesDelete500ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesDelete500ApplicationJSONCodeEnumTooManyRequests     ReleasesDelete500ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesDelete500ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesDelete500ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesDelete500ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesDelete500ApplicationJSON - An internal error. if delete has partially failed **partially_deleted** error_code will be returned.
// - `partially_deleted`: Release was removed from all distribution groups, but couldn't be deleted from App Center.
type ReleasesDelete500ApplicationJSON struct {
	Code    ReleasesDelete500ApplicationJSONCodeEnum `json:"code"`
	Message string                                   `json:"message"`
}

type ReleasesDelete404ApplicationJSONCodeEnum string

const (
	ReleasesDelete404ApplicationJSONCodeEnumBadRequest          ReleasesDelete404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesDelete404ApplicationJSONCodeEnumConflict            ReleasesDelete404ApplicationJSONCodeEnum = "Conflict"
	ReleasesDelete404ApplicationJSONCodeEnumNotAcceptable       ReleasesDelete404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesDelete404ApplicationJSONCodeEnumNotFound            ReleasesDelete404ApplicationJSONCodeEnum = "NotFound"
	ReleasesDelete404ApplicationJSONCodeEnumInternalServerError ReleasesDelete404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesDelete404ApplicationJSONCodeEnumUnauthorized        ReleasesDelete404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesDelete404ApplicationJSONCodeEnumTooManyRequests     ReleasesDelete404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesDelete404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesDelete404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesDelete404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesDelete404ApplicationJSON - An app or a release couldn't be found
type ReleasesDelete404ApplicationJSON struct {
	Code    ReleasesDelete404ApplicationJSONCodeEnum `json:"code"`
	Message string                                   `json:"message"`
}

type ReleasesDeleteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An app or a release couldn't be found
	//
	ReleasesDelete404ApplicationJSONObject *ReleasesDelete404ApplicationJSON
	// An internal error. if delete has partially failed **partially_deleted** error_code will be returned.
	// - `partially_deleted`: Release was removed from all distribution groups, but couldn't be deleted from App Center.
	//
	ReleasesDelete500ApplicationJSONObject *ReleasesDelete500ApplicationJSON
}
