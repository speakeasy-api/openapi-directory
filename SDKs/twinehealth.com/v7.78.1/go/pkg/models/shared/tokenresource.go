// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TokenResourceAttributesTokenTypeEnum string

const (
	TokenResourceAttributesTokenTypeEnumBearer TokenResourceAttributesTokenTypeEnum = "bearer"
)

func (e TokenResourceAttributesTokenTypeEnum) ToPointer() *TokenResourceAttributesTokenTypeEnum {
	return &e
}

func (e *TokenResourceAttributesTokenTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bearer":
		*e = TokenResourceAttributesTokenTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenResourceAttributesTokenTypeEnum: %v", v)
	}
}

type TokenResourceAttributes struct {
	AccessToken  string                               `json:"access_token"`
	ExpiresIn    int64                                `json:"expires_in"`
	RefreshToken string                               `json:"refresh_token"`
	TokenType    TokenResourceAttributesTokenTypeEnum `json:"token_type"`
}

type TokenResourceRelationshipsGroupsDataTypeEnum string

const (
	TokenResourceRelationshipsGroupsDataTypeEnumGroup TokenResourceRelationshipsGroupsDataTypeEnum = "group"
)

func (e TokenResourceRelationshipsGroupsDataTypeEnum) ToPointer() *TokenResourceRelationshipsGroupsDataTypeEnum {
	return &e
}

func (e *TokenResourceRelationshipsGroupsDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "group":
		*e = TokenResourceRelationshipsGroupsDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenResourceRelationshipsGroupsDataTypeEnum: %v", v)
	}
}

type TokenResourceRelationshipsGroupsData struct {
	ID   string                                       `json:"id"`
	Type TokenResourceRelationshipsGroupsDataTypeEnum `json:"type"`
}

type TokenResourceRelationshipsGroupsLinks struct {
	Related string `json:"related"`
}

type TokenResourceRelationshipsGroups struct {
	Data  []TokenResourceRelationshipsGroupsData `json:"data"`
	Links TokenResourceRelationshipsGroupsLinks  `json:"links"`
}

type TokenResourceRelationshipsOrganizationDataTypeEnum string

const (
	TokenResourceRelationshipsOrganizationDataTypeEnumOrganization TokenResourceRelationshipsOrganizationDataTypeEnum = "organization"
)

func (e TokenResourceRelationshipsOrganizationDataTypeEnum) ToPointer() *TokenResourceRelationshipsOrganizationDataTypeEnum {
	return &e
}

func (e *TokenResourceRelationshipsOrganizationDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = TokenResourceRelationshipsOrganizationDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenResourceRelationshipsOrganizationDataTypeEnum: %v", v)
	}
}

type TokenResourceRelationshipsOrganizationData struct {
	ID   string                                             `json:"id"`
	Type TokenResourceRelationshipsOrganizationDataTypeEnum `json:"type"`
}

type TokenResourceRelationshipsOrganizationLinks struct {
	Related string `json:"related"`
}

type TokenResourceRelationshipsOrganization struct {
	Data  TokenResourceRelationshipsOrganizationData  `json:"data"`
	Links TokenResourceRelationshipsOrganizationLinks `json:"links"`
}

type TokenResourceRelationships struct {
	Groups       *TokenResourceRelationshipsGroups       `json:"groups,omitempty"`
	Organization *TokenResourceRelationshipsOrganization `json:"organization,omitempty"`
}

type TokenResourceTypeEnum string

const (
	TokenResourceTypeEnumToken TokenResourceTypeEnum = "token"
)

func (e TokenResourceTypeEnum) ToPointer() *TokenResourceTypeEnum {
	return &e
}

func (e *TokenResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = TokenResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenResourceTypeEnum: %v", v)
	}
}

type TokenResource struct {
	Attributes    *TokenResourceAttributes    `json:"attributes,omitempty"`
	ID            string                      `json:"id"`
	Relationships *TokenResourceRelationships `json:"relationships,omitempty"`
	Type          TokenResourceTypeEnum       `json:"type"`
}
