// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SicrdSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SicrdRequestBodyCertificateParameters struct {
	// Certificate No
	Certno string `json:"CERTNO"`
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
}

// SicrdRequestBodyFormatEnum - The format of the certificate in response.
type SicrdRequestBodyFormatEnum string

const (
	SicrdRequestBodyFormatEnumPdf SicrdRequestBodyFormatEnum = "pdf"
)

func (e SicrdRequestBodyFormatEnum) ToPointer() *SicrdRequestBodyFormatEnum {
	return &e
}

func (e *SicrdRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SicrdRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SicrdRequestBodyFormatEnum: %v", v)
	}
}

// SicrdRequestBody - Request format
type SicrdRequestBody struct {
	CertificateParameters *SicrdRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SicrdRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Sicrd504ApplicationJSONErrorEnum string

const (
	Sicrd504ApplicationJSONErrorEnumGatewayTimeout Sicrd504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Sicrd504ApplicationJSONErrorEnum) ToPointer() *Sicrd504ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Sicrd504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd504ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd504ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sicrd504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Sicrd504ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Sicrd504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd504ApplicationJSON - Gateway timeout
type Sicrd504ApplicationJSON struct {
	Error            *Sicrd504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd503ApplicationJSONErrorEnum string

const (
	Sicrd503ApplicationJSONErrorEnumServiceUnavailable Sicrd503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Sicrd503ApplicationJSONErrorEnum) ToPointer() *Sicrd503ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Sicrd503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd503ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd503ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sicrd503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Sicrd503ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Sicrd503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd503ApplicationJSON - Service unavailable
type Sicrd503ApplicationJSON struct {
	Error            *Sicrd503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd502ApplicationJSONErrorEnum string

const (
	Sicrd502ApplicationJSONErrorEnumBadGatewy Sicrd502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Sicrd502ApplicationJSONErrorEnum) ToPointer() *Sicrd502ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Sicrd502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd502ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd502ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sicrd502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Sicrd502ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Sicrd502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd502ApplicationJSON - Bad gateway
type Sicrd502ApplicationJSON struct {
	Error            *Sicrd502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd500ApplicationJSONErrorEnum string

const (
	Sicrd500ApplicationJSONErrorEnumInternalServerError Sicrd500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Sicrd500ApplicationJSONErrorEnum) ToPointer() *Sicrd500ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Sicrd500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd500ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd500ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd500ApplicationJSONErrorDescriptionEnumInternalServerError Sicrd500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Sicrd500ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Sicrd500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd500ApplicationJSON - Internal server error
type Sicrd500ApplicationJSON struct {
	Error            *Sicrd500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd404ApplicationJSONErrorEnum string

const (
	Sicrd404ApplicationJSONErrorEnumRecordNotFound Sicrd404ApplicationJSONErrorEnum = "record_not_found"
	Sicrd404ApplicationJSONErrorEnumURLNotFound    Sicrd404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Sicrd404ApplicationJSONErrorEnum) ToPointer() *Sicrd404ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sicrd404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd404ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd404ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sicrd404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sicrd404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sicrd404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Sicrd404ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sicrd404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd404ApplicationJSON - No record found
type Sicrd404ApplicationJSON struct {
	Error            *Sicrd404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd401ApplicationJSONErrorEnum string

const (
	Sicrd401ApplicationJSONErrorEnumInvalidAuthentication Sicrd401ApplicationJSONErrorEnum = "invalid_authentication"
	Sicrd401ApplicationJSONErrorEnumInvalidAuthorization  Sicrd401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Sicrd401ApplicationJSONErrorEnum) ToPointer() *Sicrd401ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sicrd401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd401ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd401ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sicrd401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sicrd401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sicrd401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Sicrd401ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sicrd401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd401ApplicationJSON - Unauthorized access
type Sicrd401ApplicationJSON struct {
	Error            *Sicrd401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicrd400ApplicationJSONErrorEnum string

const (
	Sicrd400ApplicationJSONErrorEnumMissingParameter Sicrd400ApplicationJSONErrorEnum = "missing_parameter"
	Sicrd400ApplicationJSONErrorEnumInvalidParameter Sicrd400ApplicationJSONErrorEnum = "invalid_parameter"
	Sicrd400ApplicationJSONErrorEnumInvalidFormat    Sicrd400ApplicationJSONErrorEnum = "invalid_format"
	Sicrd400ApplicationJSONErrorEnumInvalidTxnid     Sicrd400ApplicationJSONErrorEnum = "invalid_txnid"
	Sicrd400ApplicationJSONErrorEnumInvalidConsentid Sicrd400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Sicrd400ApplicationJSONErrorEnum) ToPointer() *Sicrd400ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicrd400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sicrd400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd400ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicrd400ApplicationJSONErrorDescriptionEnum string

const (
	Sicrd400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sicrd400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sicrd400ApplicationJSONErrorDescriptionEnumBadRequest                              Sicrd400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sicrd400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sicrd400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sicrd400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sicrd400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sicrd400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sicrd400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Sicrd400ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicrd400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicrd400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sicrd400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicrd400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicrd400ApplicationJSON - Bad request
type Sicrd400ApplicationJSON struct {
	Error            *Sicrd400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicrd400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SicrdResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sicrd400ApplicationJSONObject *Sicrd400ApplicationJSON
	// Unauthorized access
	Sicrd401ApplicationJSONObject *Sicrd401ApplicationJSON
	// No record found
	Sicrd404ApplicationJSONObject *Sicrd404ApplicationJSON
	// Internal server error
	Sicrd500ApplicationJSONObject *Sicrd500ApplicationJSON
	// Bad gateway
	Sicrd502ApplicationJSONObject *Sicrd502ApplicationJSON
	// Service unavailable
	Sicrd503ApplicationJSONObject *Sicrd503ApplicationJSON
	// Gateway timeout
	Sicrd504ApplicationJSONObject *Sicrd504ApplicationJSON
}
