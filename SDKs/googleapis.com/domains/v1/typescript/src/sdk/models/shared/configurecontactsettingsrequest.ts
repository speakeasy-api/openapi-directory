/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContactSettings } from "./contactsettings";
import { Expose, Type } from "class-transformer";

export enum ConfigureContactSettingsRequestContactNoticesEnum {
  ContactNoticeUnspecified = "CONTACT_NOTICE_UNSPECIFIED",
  PublicContactDataAcknowledgement = "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT",
}

/**
 * Request for the `ConfigureContactSettings` method.
 */
export class ConfigureContactSettingsRequest extends SpeakeasyBase {
  /**
   * The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `contact_settings`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contactNotices" })
  contactNotices?: ConfigureContactSettingsRequestContactNoticesEnum[];

  /**
   * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contactSettings" })
  @Type(() => ContactSettings)
  contactSettings?: ContactSettings;

  /**
   * Required. The field mask describing which fields to update as a comma-separated list. For example, if only the registrant contact is being updated, the `update_mask` is `"registrant_contact"`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateMask" })
  updateMask?: string;

  /**
   * Validate the request without actually updating the contact settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validateOnly" })
  validateOnly?: boolean;
}
