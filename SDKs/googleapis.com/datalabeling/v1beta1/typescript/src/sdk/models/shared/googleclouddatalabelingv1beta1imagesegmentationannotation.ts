/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GoogleCloudDatalabelingV1beta1AnnotationSpec } from "./googleclouddatalabelingv1beta1annotationspec";
import { Expose, Transform } from "class-transformer";

/**
 * Image segmentation annotation.
 */
export class GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation extends SpeakeasyBase {
  /**
   * The mapping between rgb color and annotation spec. The key is the rgb color represented in format of rgb(0, 0, 0). The value is the AnnotationSpec.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudDatalabelingV1beta1AnnotationSpec })
  @Expose({ name: "annotationColors" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudDatalabelingV1beta1AnnotationSpec> =
        {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudDatalabelingV1beta1AnnotationSpec
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  annotationColors?: Record<
    string,
    GoogleCloudDatalabelingV1beta1AnnotationSpec
  >;

  /**
   * A byte string of a full image's color map.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageBytes" })
  imageBytes?: string;

  /**
   * Image format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mimeType" })
  mimeType?: string;
}
