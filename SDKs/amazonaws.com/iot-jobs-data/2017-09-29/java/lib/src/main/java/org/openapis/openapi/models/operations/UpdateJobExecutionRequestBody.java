/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateJobExecutionRequestBody {
    /**
     * Optional. A number that identifies a particular job execution on a particular device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionNumber")
    public Long executionNumber;
    public UpdateJobExecutionRequestBody withExecutionNumber(Long executionNumber) {
        this.executionNumber = executionNumber;
        return this;
    }
    
    /**
     * Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedVersion")
    public Long expectedVersion;
    public UpdateJobExecutionRequestBody withExpectedVersion(Long expectedVersion) {
        this.expectedVersion = expectedVersion;
        return this;
    }
    
    /**
     * Optional. When set to true, the response contains the job document. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeJobDocument")
    public Boolean includeJobDocument;
    public UpdateJobExecutionRequestBody withIncludeJobDocument(Boolean includeJobDocument) {
        this.includeJobDocument = includeJobDocument;
        return this;
    }
    
    /**
     * Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeJobExecutionState")
    public Boolean includeJobExecutionState;
    public UpdateJobExecutionRequestBody withIncludeJobExecutionState(Boolean includeJobExecutionState) {
        this.includeJobExecutionState = includeJobExecutionState;
        return this;
    }
    
    /**
     * The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
     */
    @JsonProperty("status")
    public UpdateJobExecutionRequestBodyStatusEnum status;
    public UpdateJobExecutionRequestBody withStatus(UpdateJobExecutionRequestBodyStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     *  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusDetails")
    public java.util.Map<String, String> statusDetails;
    public UpdateJobExecutionRequestBody withStatusDetails(java.util.Map<String, String> statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }
    
    /**
     * Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling &lt;code&gt;UpdateJobExecution&lt;/code&gt;, setting the status to &lt;code&gt;IN_PROGRESS&lt;/code&gt; and specifying a new timeout value in this field) the job execution status will be automatically set to &lt;code&gt;TIMED_OUT&lt;/code&gt;. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (&lt;code&gt;CreateJob&lt;/code&gt; using field &lt;code&gt;timeoutConfig&lt;/code&gt;).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stepTimeoutInMinutes")
    public Long stepTimeoutInMinutes;
    public UpdateJobExecutionRequestBody withStepTimeoutInMinutes(Long stepTimeoutInMinutes) {
        this.stepTimeoutInMinutes = stepTimeoutInMinutes;
        return this;
    }
    
}
