"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Teams:
    r"""A team is used to group related projects and people together within an organization. Each project in an organization is associated with a team."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_user_for_team(self, request: operations.AddUserForTeamRequest) -> operations.AddUserForTeamResponse:
        r"""Add a user to a team
        The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.
        
        Returns the complete team membership record for the newly added user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddUserForTeamRequest, base_url, '/teams/{team_gid}/addUser', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.AddUserForTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddUserForTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserForTeam200ApplicationJSON])
                res.add_user_for_team_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def create_team(self, request: operations.CreateTeamRequest) -> operations.CreateTeamResponse:
        r"""Create a team
        Creates a team within the current workspace.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teams'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateTeam201ApplicationJSON])
                res.create_team_201_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_team(self, request: operations.GetTeamRequest) -> operations.GetTeamResponse:
        r"""Get a team
        Returns the full record for a single team.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamRequest, base_url, '/teams/{team_gid}', request)
        
        query_params = utils.get_query_params(operations.GetTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeam200ApplicationJSON])
                res.get_team_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_teams_for_user(self, request: operations.GetTeamsForUserRequest) -> operations.GetTeamsForUserResponse:
        r"""Get teams for a user
        Returns the compact records for all teams to which the given user is assigned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsForUserRequest, base_url, '/users/{user_gid}/teams', request)
        
        query_params = utils.get_query_params(operations.GetTeamsForUserRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamsForUser200ApplicationJSON])
                res.get_teams_for_user_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_teams_for_workspace(self, request: operations.GetTeamsForWorkspaceRequest) -> operations.GetTeamsForWorkspaceResponse:
        r"""Get teams in a workspace
        Returns the compact records for all teams in the workspace visible to the authorized user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamsForWorkspaceRequest, base_url, '/workspaces/{workspace_gid}/teams', request)
        
        query_params = utils.get_query_params(operations.GetTeamsForWorkspaceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsForWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamsForWorkspace200ApplicationJSON])
                res.get_teams_for_workspace_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def remove_user_for_team(self, request: operations.RemoveUserForTeamRequest) -> operations.RemoveUserForTeamResponse:
        r"""Remove a user from a team
        The user making this call must be a member of the team in order to remove themselves or others.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveUserForTeamRequest, base_url, '/teams/{team_gid}/removeUser', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RemoveUserForTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveUserForTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserForTeam204ApplicationJSON])
                res.remove_user_for_team_204_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_team(self, request: operations.UpdateTeamRequest) -> operations.UpdateTeamResponse:
        r"""Update a team
        Updates a team within the current workspace.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teams'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdateTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateTeam200ApplicationJSON])
                res.update_team_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    