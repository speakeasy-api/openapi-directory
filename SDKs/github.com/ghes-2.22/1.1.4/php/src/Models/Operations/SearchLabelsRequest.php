<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class SearchLabelsRequest
{
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderEnum $order
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=order')]
    public ?\OpenAPI\OpenAPI\Models\Shared\OrderEnum $order = null;
    
    /**
     * Page number of the results to fetch.
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * Results per page (max 100)
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@2.22/rest/reference/search#constructing-a-search-query).
     * 
     * @var string $q
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=q')]
    public string $q;
    
    /**
     * The id of the repository.
     * 
     * @var int $repositoryId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=repository_id')]
    public int $repositoryId;
    
    /**
     * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@2.22/rest/reference/search#ranking-search-results)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\SearchLabelsSortEnum $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?SearchLabelsSortEnum $sort = null;
    
	public function __construct()
	{
		$this->order = null;
		$this->page = null;
		$this->perPage = null;
		$this->q = "";
		$this->repositoryId = 0;
		$this->sort = null;
	}
}
