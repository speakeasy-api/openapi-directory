// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CommentAPIPostEditCommentFormEntryTypeEnum - Entry type.
type CommentAPIPostEditCommentFormEntryTypeEnum string

const (
	CommentAPIPostEditCommentFormEntryTypeEnumUndefined          CommentAPIPostEditCommentFormEntryTypeEnum = "Undefined"
	CommentAPIPostEditCommentFormEntryTypeEnumAlbum              CommentAPIPostEditCommentFormEntryTypeEnum = "Album"
	CommentAPIPostEditCommentFormEntryTypeEnumArtist             CommentAPIPostEditCommentFormEntryTypeEnum = "Artist"
	CommentAPIPostEditCommentFormEntryTypeEnumDiscussionTopic    CommentAPIPostEditCommentFormEntryTypeEnum = "DiscussionTopic"
	CommentAPIPostEditCommentFormEntryTypeEnumPv                 CommentAPIPostEditCommentFormEntryTypeEnum = "PV"
	CommentAPIPostEditCommentFormEntryTypeEnumReleaseEvent       CommentAPIPostEditCommentFormEntryTypeEnum = "ReleaseEvent"
	CommentAPIPostEditCommentFormEntryTypeEnumReleaseEventSeries CommentAPIPostEditCommentFormEntryTypeEnum = "ReleaseEventSeries"
	CommentAPIPostEditCommentFormEntryTypeEnumSong               CommentAPIPostEditCommentFormEntryTypeEnum = "Song"
	CommentAPIPostEditCommentFormEntryTypeEnumSongList           CommentAPIPostEditCommentFormEntryTypeEnum = "SongList"
	CommentAPIPostEditCommentFormEntryTypeEnumTag                CommentAPIPostEditCommentFormEntryTypeEnum = "Tag"
	CommentAPIPostEditCommentFormEntryTypeEnumUser               CommentAPIPostEditCommentFormEntryTypeEnum = "User"
	CommentAPIPostEditCommentFormEntryTypeEnumVenue              CommentAPIPostEditCommentFormEntryTypeEnum = "Venue"
)

func (e *CommentAPIPostEditCommentFormEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Undefined":
		fallthrough
	case "Album":
		fallthrough
	case "Artist":
		fallthrough
	case "DiscussionTopic":
		fallthrough
	case "PV":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "ReleaseEventSeries":
		fallthrough
	case "Song":
		fallthrough
	case "SongList":
		fallthrough
	case "Tag":
		fallthrough
	case "User":
		fallthrough
	case "Venue":
		*e = CommentAPIPostEditCommentFormEntryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentAPIPostEditCommentFormEntryTypeEnum: %s", s)
	}
}

type CommentAPIPostEditCommentFormPathParams struct {
	// ID of the comment to be edited.
	CommentID int `pathParam:"style=simple,explode=false,name=commentId"`
	// Entry type.
	EntryType CommentAPIPostEditCommentFormEntryTypeEnum `pathParam:"style=simple,explode=false,name=entryType"`
}

type CommentAPIPostEditCommentFormRequest struct {
	PathParams CommentAPIPostEditCommentFormPathParams
	// New comment data. Only message can be edited.
	Request shared.CommentForAPIContract `request:"mediaType=application/x-www-form-urlencoded"`
}

type CommentAPIPostEditCommentFormResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
