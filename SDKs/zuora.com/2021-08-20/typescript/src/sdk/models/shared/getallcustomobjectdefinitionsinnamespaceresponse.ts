/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CustomObjectDefinition } from "./customobjectdefinition";
import { Expose, Transform } from "class-transformer";

/**
 * OK
 */
export class GETAllCustomObjectDefinitionsInNamespaceResponse extends SpeakeasyBase {
  /**
   * The number of objects in the `definitions` object. The value of this field is the number of custom object definitions in the namespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * The custom object definitions. This object maps types to custom object definitions.
   */
  @SpeakeasyMetadata({ elemType: CustomObjectDefinition })
  @Expose({ name: "definitions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, CustomObjectDefinition> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], CustomObjectDefinition);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  definitions?: Record<string, CustomObjectDefinition>;
}
