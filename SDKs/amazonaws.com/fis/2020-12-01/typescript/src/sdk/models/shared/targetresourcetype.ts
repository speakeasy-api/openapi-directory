/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { TargetResourceTypeParameter } from "./targetresourcetypeparameter";
import { Expose, Transform } from "class-transformer";

/**
 * Describes a resource type.
 */
export class TargetResourceType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata({ elemType: TargetResourceTypeParameter })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TargetResourceTypeParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TargetResourceTypeParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, TargetResourceTypeParameter>;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceType" })
  resourceType?: string;
}
