// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// OrderLineItem - Represents a line item in an order. Each line item describes a different
// product to purchase, with its own quantity and price details.
type OrderLineItem struct {
	// The list of references to discounts applied to this line item. Each
	// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
	// `OrderLineItemDiscounts` applied to the line item. On reads, the amount
	// applied is populated.
	//
	// An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
	// `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
	// for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
	// line items.
	//
	// To change the amount of a discount, modify the referenced top-level discount.
	AppliedDiscounts []OrderLineItemAppliedDiscount `json:"applied_discounts,omitempty"`
	// The list of references to taxes applied to this line item. Each
	// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
	// top-level `OrderLineItemTax` applied to the line item. On reads, the
	// amount applied is populated.
	//
	// An `OrderLineItemAppliedTax` is automatically created on every line
	// item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
	// records for `LINE_ITEM` scoped taxes must be added in requests for the tax
	// to apply to any line items.
	//
	// To change the amount of a tax, modify the referenced top-level tax.
	AppliedTaxes []OrderLineItemAppliedTax `json:"applied_taxes,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	BasePriceMoney *Money `json:"base_price_money,omitempty"`
	// The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
	CatalogObjectID *string `json:"catalog_object_id,omitempty"`
	// The version of the catalog object that this line item references.
	CatalogVersion *int64 `json:"catalog_version,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	GrossSalesMoney *Money `json:"gross_sales_money,omitempty"`
	// The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
	// activation or reloading of a gift card.
	ItemType *string `json:"item_type,omitempty"`
	// Application-defined data attached to this line item. Metadata fields are intended
	// to store descriptive references or associations with an entity in another system or store brief
	// information about the object. Square does not process this field; it only stores and returns it
	// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
	// identifiable information or card details).
	//
	// Keys written by applications must be 60 characters or less and must be in the character set
	// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
	// with a namespace, separated from the key with a ':' character.
	//
	// Values have a maximum length of 255 characters.
	//
	// An application can have up to 10 entries per metadata field.
	//
	// Entries written by applications are private and can only be read or modified by the same
	// application.
	//
	// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
	Metadata map[string]string `json:"metadata,omitempty"`
	// The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
	Modifiers []OrderLineItemModifier `json:"modifiers,omitempty"`
	// The name of the line item.
	Name *string `json:"name,omitempty"`
	// The note of the line item.
	Note *string `json:"note,omitempty"`
	// Describes pricing adjustments that are blocked from manual and
	// automatic application to a line item. For more information, see
	// [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
	PricingBlocklists *OrderLineItemPricingBlocklists `json:"pricing_blocklists,omitempty"`
	// The quantity purchased, formatted as a decimal number.
	// For example, `"3"`.
	//
	// Line items with a quantity of `"0"` are automatically removed
	// when paying for or otherwise completing the order.
	//
	// Line items with a `quantity_unit` can have non-integer quantities.
	// For example, `"1.70000"`.
	Quantity string `json:"quantity"`
	// Contains the measurement unit for a quantity and a precision that
	// specifies the number of digits after the decimal point for decimal quantities.
	QuantityUnit *OrderQuantityUnit `json:"quantity_unit,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalDiscountMoney *Money `json:"total_discount_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalMoney *Money `json:"total_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`
	// A unique ID that identifies the line item only within this order.
	UID *string `json:"uid,omitempty"`
	// The name of the variation applied to this line item.
	VariationName *string `json:"variation_name,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	VariationTotalPriceMoney *Money `json:"variation_total_price_money,omitempty"`
}
