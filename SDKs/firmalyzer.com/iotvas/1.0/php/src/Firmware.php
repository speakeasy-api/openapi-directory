<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Firmware 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get default accounts and password hashes of a firmware
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountsResponse
     */
	public function getAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/accounts', \OpenAPI\OpenAPI\Models\Operations\GetAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DefaultAccount>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get default OS configuration issues of a device firmware
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesResponse
     */
	public function getConfigIssues(
        \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/config-issues', \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConfigIssuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configIssues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ConfigIssue>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get expired digital certificates embedded in a device firmware
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsResponse
     */
	public function getExpiredCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/expired-certs', \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExpiredCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expiredCerts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ExpiredCert>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get private crypto keys embedded in a device firmware
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysResponse
     */
	public function getPrivateKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/private-keys', \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPrivateKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cryptoKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CryptoKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get iot device firmware risk analysis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRiskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRiskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRiskResponse
     */
	public function getRisk(
        \OpenAPI\OpenAPI\Models\Operations\GetRiskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRiskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRiskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/risk', \OpenAPI\OpenAPI\Models\Operations\GetRiskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRiskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firmwareRisk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirmwareRisk', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsResponse
     */
	public function getWeakCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/weak-certs', \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWeakCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weakCerts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\WeakCert>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get weak crypto keys with short length
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysResponse
     */
	public function getWeakKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firmware/{firmware_hash}/weak-keys', \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWeakKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cryptoKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CryptoKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
}