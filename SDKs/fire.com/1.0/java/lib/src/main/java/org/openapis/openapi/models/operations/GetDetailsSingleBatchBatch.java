/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GetDetailsSingleBatchBatch - Returns the details of the batch specified in the API endpoint - {batchUuid}.
 */
public class GetDetailsSingleBatchBatch {
    /**
     * An optional name you give to the batch at creation time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchName")
    public String batchName;
    public GetDetailsSingleBatchBatch withBatchName(String batchName) {
        this.batchName = batchName;
        return this;
    }
    
    /**
     * A UUID for this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchUuid")
    public String batchUuid;
    public GetDetailsSingleBatchBatch withBatchUuid(String batchUuid) {
        this.batchUuid = batchUuid;
        return this;
    }
    
    /**
     * An optional POST URL that all events for this batch will be sent to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    public String callbackUrl;
    public GetDetailsSingleBatchBatch withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * All payments in the batch must be the same currency - either EUR or GBP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GetDetailsSingleBatchBatch withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateCreated")
    public OffsetDateTime dateCreated;
    public GetDetailsSingleBatchBatch withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * An optional job number you can give to the batch to help link it to your own system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobNumber")
    public String jobNumber;
    public GetDetailsSingleBatchBatch withJobNumber(String jobNumber) {
        this.jobNumber = jobNumber;
        return this;
    }
    
    /**
     * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdated")
    public OffsetDateTime lastUpdated;
    public GetDetailsSingleBatchBatch withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }
    
    /**
     * Once processed, a count of the number of items that didn\u2019t process successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfItemsFailed")
    public Long numberOfItemsFailed;
    public GetDetailsSingleBatchBatch withNumberOfItemsFailed(Long numberOfItemsFailed) {
        this.numberOfItemsFailed = numberOfItemsFailed;
        return this;
    }
    
    /**
     * A count of the number of items in the batch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfItemsSubmitted")
    public Long numberOfItemsSubmitted;
    public GetDetailsSingleBatchBatch withNumberOfItemsSubmitted(Long numberOfItemsSubmitted) {
        this.numberOfItemsSubmitted = numberOfItemsSubmitted;
        return this;
    }
    
    /**
     * Once processed, a count of the number of items that processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfItemsSucceeded")
    public Long numberOfItemsSucceeded;
    public GetDetailsSingleBatchBatch withNumberOfItemsSucceeded(Long numberOfItemsSucceeded) {
        this.numberOfItemsSucceeded = numberOfItemsSucceeded;
        return this;
    }
    
    /**
     * A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceName")
    public String sourceName;
    public GetDetailsSingleBatchBatch withSourceName(String sourceName) {
        this.sourceName = sourceName;
        return this;
    }
    
    /**
     * status of the batch object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GetDetailsSingleBatchBatchStatusEnum status;
    public GetDetailsSingleBatchBatch withStatus(GetDetailsSingleBatchBatchStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The type of the batch - can be one of the listed 3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GetDetailsSingleBatchBatchTypeEnum type;
    public GetDetailsSingleBatchBatch withType(GetDetailsSingleBatchBatchTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Once processed, a sum of the value of items that didn\u2019t process successfully. Specified in pence or cent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueOfItemsFailed")
    public Long valueOfItemsFailed;
    public GetDetailsSingleBatchBatch withValueOfItemsFailed(Long valueOfItemsFailed) {
        this.valueOfItemsFailed = valueOfItemsFailed;
        return this;
    }
    
    /**
     * A sum of the value of items in the batch. Specified in pence or cent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueOfItemsSubmitted")
    public Long valueOfItemsSubmitted;
    public GetDetailsSingleBatchBatch withValueOfItemsSubmitted(Long valueOfItemsSubmitted) {
        this.valueOfItemsSubmitted = valueOfItemsSubmitted;
        return this;
    }
    
    /**
     * Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueOfItemsSucceeded")
    public Long valueOfItemsSucceeded;
    public GetDetailsSingleBatchBatch withValueOfItemsSucceeded(Long valueOfItemsSucceeded) {
        this.valueOfItemsSucceeded = valueOfItemsSucceeded;
        return this;
    }
    
}
