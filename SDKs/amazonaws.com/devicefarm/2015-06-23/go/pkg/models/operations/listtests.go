// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListTestsQueryParams struct {
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListTestsXAmzTargetEnum
type ListTestsXAmzTargetEnum string

const (
	ListTestsXAmzTargetEnumDeviceFarm20150623ListTests ListTestsXAmzTargetEnum = "DeviceFarm_20150623.ListTests"
)

func (e *ListTestsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeviceFarm_20150623.ListTests":
		*e = ListTestsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTestsXAmzTargetEnum: %s", s)
	}
}

type ListTestsHeaders struct {
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListTestsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListTestsRequest struct {
	QueryParams ListTestsQueryParams
	Headers     ListTestsHeaders
	Request     shared.ListTestsRequest `request:"mediaType=application/json"`
}

type ListTestsResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	ListTestsResult *shared.ListTestsResult
	// NotFoundException
	NotFoundException interface{}
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
