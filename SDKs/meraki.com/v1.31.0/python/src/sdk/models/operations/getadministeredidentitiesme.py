"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationAPIKey:
    r"""API key"""
    
    created: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})
    r"""If API key is created for this user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationAPI:
    r"""API authentication"""
    
    key: Optional[GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationAPIKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""API key"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationSaml:
    r"""SAML authentication"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""If SAML authentication is enabled for this user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationTwoFactor:
    r"""TwoFactor authentication"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""If twoFactor authentication is enabled for this user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSONAuthentication:
    r"""Authentication info"""
    
    api: Optional[GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationAPI] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api'), 'exclude': lambda f: f is None }})
    r"""API authentication"""  
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Authentication mode"""  
    saml: Optional[GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationSaml] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml'), 'exclude': lambda f: f is None }})
    r"""SAML authentication"""  
    two_factor: Optional[GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationTwoFactor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoFactor'), 'exclude': lambda f: f is None }})
    r"""TwoFactor authentication"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAdministeredIdentitiesMe200ApplicationJSON:
    r"""Successful operation"""
    
    authentication: Optional[GetAdministeredIdentitiesMe200ApplicationJSONAuthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})
    r"""Authentication info"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User email"""  
    last_used_dashboard_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUsedDashboardAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last seen active on Dashboard UI"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Username"""  
    

@dataclasses.dataclass
class GetAdministeredIdentitiesMeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_administered_identities_me_200_application_json_object: Optional[GetAdministeredIdentitiesMe200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    