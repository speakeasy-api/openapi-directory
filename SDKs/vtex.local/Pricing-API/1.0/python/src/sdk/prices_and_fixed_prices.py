"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PricesAndFixedPrices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_update_price_or_fixed_price(self, request: operations.CreateUpdatePriceOrFixedPriceRequest) -> operations.CreateUpdatePriceOrFixedPriceResponse:
        r"""Create or Update Base Price or Fixed Prices
        Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
        
         <p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>
        
        ```json
        {
            \"markup\": 30,
            \"basePrice\": 100,
            \"listPrice\": 35,
            \"fixedPrices\": [
                {
                    \"tradePolicyId\": \"1\",
                    \"value\": 31,
                    \"listPrice\": 32,
                    \"minQuantity\": 1,
                    \"dateRange\": {
                        \"from\": \"2022-05-21T22:00:00Z\",
                        \"to\": \"2023-05-28T22:00:00Z\"
                    }
                },
                {
                    \"tradePolicyId\": \"1\",
                    \"value\": 31.5,
                    \"listPrice\": 33,
                    \"minQuantity\": 2
                }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateUpdatePriceOrFixedPriceRequest, base_url, '/pricing/prices/{itemId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUpdatePriceOrFixedPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_price(self, request: operations.DeletePriceRequest) -> operations.DeletePriceResponse:
        r"""Delete Price
        Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePriceRequest, base_url, '/pricing/prices/{itemId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def deletefixedpricesonapricetableortradepolicy(self, request: operations.DeletefixedpricesonapricetableortradepolicyRequest) -> operations.DeletefixedpricesonapricetableortradepolicyResponse:
        r"""Delete Fixed Prices on a price table or trade policy
        Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletefixedpricesonapricetableortradepolicyRequest, base_url, '/pricing/prices/{itemId}/fixed/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletefixedpricesonapricetableortradepolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_computed_pricebypricetable(self, request: operations.GetComputedPricebypricetableRequest, server_url: Optional[str] = None) -> operations.GetComputedPricebypricetableResponse:
        r"""Get Computed Price by price table or trade policy
        Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy. 
        
        ## Response body example
        
        ```json
        {
            \"tradePolicyId\": \"1\",
            \"listPrice\": 30,
            \"costPrice\": 76.92,
            \"sellingPrice\": 18.9,
            \"priceValidUntil\": \"2018-12-20T18:12:14Z\"
        }
        ```
        """
        base_url = operations.GET_COMPUTED_PRICEBYPRICETABLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.GetComputedPricebypricetableRequest, base_url, '/pricing/prices/{itemId}/computed/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetComputedPricebypricetableRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetComputedPricebypricetableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Getcomputedprice])
                res.getcomputedprice = out

        return res

    def get_fixed_prices(self, request: operations.GetFixedPricesRequest) -> operations.GetFixedPricesResponse:
        r"""Get Fixed Prices
        The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
        
         The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
        
         Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
        
         Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
        
         ## Response body example
        
        ```json
        [
            {
                \"tradePolicyId\": \"6\",
                \"value\": 20.9,
                \"listPrice\": 22.9,
                \"minQuantity\": 1,
                \"dateRange\": {
                    \"from\": \"2021-12-30T22:00:00-03:00\",
                    \"to\": \"2021-12-30T22:00:00-03:00\"
                }
            },
            {
                \"tradePolicyId\": \"1\",
                \"value\": 18.9,
                \"listPrice\": null,
                \"minQuantity\": 1,
                \"dateRange\": {
                    \"from\": \"2021-12-30T22:00:00-03:00\",
                    \"to\": \"2021-12-30T22:00:00-03:00\"
                }
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFixedPricesRequest, base_url, '/pricing/prices/{itemId}/fixed', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFixedPricesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FixedPrice]])
                res.fixed_prices = out

        return res

    def get_fixed_pricesonapricetable(self, request: operations.GetFixedPricesonapricetableRequest) -> operations.GetFixedPricesonapricetableResponse:
        r"""Get Fixed Prices on a price table or trade policy
        Retrieves all Fixed Prices on a price table or trade policy. 
        
        ## Response body example
        
        ```json
        [
            {
                \"tradePolicyId\": \"6\",
                \"value\": 20.9,
                \"listPrice\": 22.9,
                \"minQuantity\": 1,
                \"dateRange\": {
                    \"from\": \"2021-12-30T22:00:00-03:00\",
                    \"to\": \"2021-12-30T22:00:00-04:00\"
                }
            },
            {
                \"tradePolicyId\": \"1\",
                \"value\": 18.9,
                \"listPrice\": null,
                \"minQuantity\": 1
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFixedPricesonapricetableRequest, base_url, '/pricing/prices/{itemId}/fixed/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFixedPricesonapricetableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FixedPrice]])
                res.fixed_prices = out

        return res

    def get_price(self, request: operations.GetPriceRequest) -> operations.GetPriceResponse:
        r"""Get Price
        Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
        
         ## Response body example
        
        ```json
        {
            \"itemId\": \"1\",
            \"listPrice\": 50,
            \"costPrice\": 90,
            \"markup\": 30,
            \"basePrice\": 117,
            \"fixedPrices\": [
                {
                    \"tradePolicyId\": \"1\",
                    \"value\": 50.5,
                    \"listPrice\": 50.5,
                    \"minQuantity\": 2,
                    \"dateRange\": {
                        \"from\": \"2021-12-31T01:00:00Z\",
                        \"to\": \"2022-12-31T01:00:00Z\"
                    }
                },
                {
                    \"tradePolicyId\": \"2\",
                    \"value\": 30,
                    \"listPrice\": 50,
                    \"minQuantity\": 2
                }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPriceRequest, base_url, '/pricing/prices/{itemId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Getprice])
                res.getprice = out

        return res

    def createorupdatefixedpricesonpricetableortradepolicy(self, request: operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest) -> operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse:
        r"""Create or Update Fixed Prices on a price table or trade policy
        Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
        
         ## Request body example
        
        ```json
        [
          {
            \"value\": 50.5,
            \"listPrice\": 50.5,
            \"minQuantity\": 2,
            \"dateRange\": {
              \"from\": \"2021-12-30T22:00:00-03:00\",
              \"to\": \"2021-12-30T22:00:00-04:00\"
            }
          }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest, base_url, '/pricing/prices/{itemId}/fixed/{priceTableId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    