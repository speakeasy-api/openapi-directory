/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Invoice - Stores information about an invoice. You use the Invoices API to create and manage
 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
 */
public class Invoice {
    /**
     * The payment methods that customers can use to pay an invoice on the Square-hosted invoice page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accepted_payment_methods")
    public InvoiceAcceptedPaymentMethods acceptedPaymentMethods;
    public Invoice withAcceptedPaymentMethods(InvoiceAcceptedPaymentMethods acceptedPaymentMethods) {
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        return this;
    }
    
    /**
     * The timestamp when the invoice was created, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Invoice withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers
     * on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see
     * [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
     * 
     * Adding custom fields to an invoice requires an 
     * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
     * 
     * Max: 2 custom fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public InvoiceCustomField[] customFields;
    public Invoice withCustomFields(InvoiceCustomField[] customFields) {
        this.customFields = customFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_method")
    public Object deliveryMethod;
    public Invoice withDeliveryMethod(Object deliveryMethod) {
        this.deliveryMethod = deliveryMethod;
        return this;
    }
    
    /**
     * The description of the invoice. This is visible to the customer receiving the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Invoice withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The Square-assigned ID of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Invoice withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A user-friendly invoice number. The value is unique within a location.
     * If not provided when creating an invoice, Square assigns a value.
     * It increments from 1 and padded with zeros making it 7 characters long
     * (for example, 0000001 and 0000002).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_number")
    public String invoiceNumber;
    public Invoice withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    
    /**
     * The ID of the location that this invoice is associated with. 
     * 
     * If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;
    public Invoice withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_payment_amount_money")
    public Money nextPaymentAmountMoney;
    public Invoice withNextPaymentAmountMoney(Money nextPaymentAmountMoney) {
        this.nextPaymentAmountMoney = nextPaymentAmountMoney;
        return this;
    }
    
    /**
     * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created. 
     * This field is required when creating an invoice, and the order must be in the `OPEN` state.
     * 
     * To view the line items and other information for the associated order, call the 
     * [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_id")
    public String orderId;
    public Invoice withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }
    
    /**
     * The payment schedule for the invoice, represented by one or more payment requests that
     * define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
     * - One balance
     * - One deposit with one balance
     * - 2\u201312 installments 
     * - One deposit with 2\u201312 installments
     * 
     * This field is required when creating an invoice. It must contain at least one payment request. 
     * All payment requests for the invoice must equal the total order amount. For more information, see 
     * [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
     * 
     * Adding `INSTALLMENT` payment requests to an invoice requires an 
     * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_requests")
    public InvoicePaymentRequest[] paymentRequests;
    public Invoice withPaymentRequests(InvoicePaymentRequest[] paymentRequests) {
        this.paymentRequests = paymentRequests;
        return this;
    }
    
    /**
     * Provides customer data that Square uses to deliver an invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_recipient")
    public InvoiceRecipient primaryRecipient;
    public Invoice withPrimaryRecipient(InvoiceRecipient primaryRecipient) {
        this.primaryRecipient = primaryRecipient;
        return this;
    }
    
    /**
     * The URL of the Square-hosted invoice page.
     * After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
     * page and returns the page URL in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_url")
    public String publicUrl;
    public Invoice withPublicUrl(String publicUrl) {
        this.publicUrl = publicUrl;
        return this;
    }
    
    /**
     * The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
     * After the invoice is published, Square processes the invoice on the specified date,
     * according to the delivery method and payment request settings.
     * 
     * If the field is not set, Square processes the invoice immediately after it is published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduled_at")
    public String scheduledAt;
    public Invoice withScheduledAt(String scheduledAt) {
        this.scheduledAt = scheduledAt;
        return this;
    }
    
    /**
     * The status of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Invoice withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice.
     * This field is present only on subscription billing invoices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_id")
    public String subscriptionId;
    public Invoice withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * The time zone used to interpret calendar dates on the invoice, such as `due_date`.
     * When an invoice is created, this field is set to the `timezone` specified for the seller
     * location. The value cannot be changed.
     * 
     * For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\_Angeles
     * becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC timestamp
     * of 2021-03-10T08:00:00Z).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public Invoice withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The title of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Invoice withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The timestamp when the invoice was last updated, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public Invoice withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The Square-assigned version number, which is incremented each time an update is committed to the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public Invoice withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
