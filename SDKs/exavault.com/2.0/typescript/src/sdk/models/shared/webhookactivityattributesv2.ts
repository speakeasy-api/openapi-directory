/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccessMode } from "./accessmode";
import { ShareMessage } from "./sharemessage";
import { ShareRecipient } from "./sharerecipient";
import { Expose, Transform, Type } from "class-transformer";

export class WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources extends SpeakeasyBase {
  /**
   * Date and time resource was most recently downloaded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  accessedAt?: Date;

  /**
   * Date and time of resource creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Username who originally created resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * Number of resources contained in this folder. If this is a file, fileCount is null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileCount" })
  fileCount?: number;

  /**
   * Resource hash value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hash" })
  hash?: string;

  /**
   * Resource ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Resource name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Full path to resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * Whether the resource can be previewed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previewable" })
  previewable?: boolean;

  /**
   * Size of resource in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * Type of resource `file` or `dir`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Date and time resource was most recently changed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * Date resource was first uploaded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploadDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  uploadDate?: Date;
}

export class WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare extends SpeakeasyBase {
  /**
   * Human readable description of what visitors are allowed to do with the receive folder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessDescription" })
  accessDescription?: string;

  /**
   * An object defining what a not-logged-in visitor can do with the share contents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessMode" })
  @Type(() => AccessMode)
  accessMode?: AccessMode;

  /**
   * List of items included in the share
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assets" })
  assets?: string[];

  /**
   * Date and ti
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * Whether the receive folder can be embedded within a web page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: boolean;

  /**
   * Date and time when the receive folder will no longer be
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  expiration?: string;

  /**
   * Whether access to the receive folder has expired
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  expired?: boolean;

  /**
   * Whether files should be automatically placed in subfolders of the receive folder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileDropCreateFolders" })
  fileDropCreateFolders?: boolean;

  /**
   * ID of the associated form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formId" })
  formId?: number;

  /**
   * Whether delivery receipts are enabled for this share
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasNotification" })
  hasNotification?: boolean;

  /**
   * Whether the receive folder requires visitors to enter a password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasPassword" })
  hasPassword?: boolean;

  /**
   * Hash value of the receive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hash" })
  hash?: string;

  /**
   * Unique ID of associated receive folder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Whether this share is inherited from a parent fol
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inherited" })
  inherited?: boolean;

  /**
   * Whether visitors can acccess the receive folder without an invitation link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isPublic" })
  isPublic?: boolean;

  /**
   * Invitation messages sent for receive folder
   */
  @SpeakeasyMetadata({ elemType: ShareMessage })
  @Expose({ name: "messages" })
  @Type(() => ShareMessage)
  messages?: ShareMessage[];

  /**
   * Date and time when the share was last changed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modified?: Date;

  /**
   * Name of receiv
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Hash value of the user who "owns" the receive fo
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownerHash" })
  ownerHash?: string;

  /**
   * List
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paths" })
  paths?: string[];

  /**
   * List of recipients invited  to the receive folder
   */
  @SpeakeasyMetadata({ elemType: ShareRecipient })
  @Expose({ name: "recipients" })
  @Type(() => ShareRecipient)
  recipients?: ShareRecipient[];

  /**
   * Whether visitors must enter their email addresses to access the receive folder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requireEmail" })
  requireEmail?: boolean;

  /**
   * Whether invitations to the receive folder have been re-sent to recipients
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resent" })
  resent?: boolean;

  /**
   * 1 if share is active. 0 if not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;

  /**
   * Status of invitations sent for this receive folder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trackingStatus" })
  trackingStatus?: string;

  /**
   * Type of share **"receive"**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "formDetails" })
  formDetails?: Record<string, any>[];

  @SpeakeasyMetadata({
    elemType:
      WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources,
  })
  @Expose({ name: "resources" })
  @Type(
    () => WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources
  )
  resources?: WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources[];

  @SpeakeasyMetadata({
    elemType:
      WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare,
  })
  @Expose({ name: "share" })
  @Type(
    () => WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare
  )
  share?: WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare[];

  /**
   * For uploads, and downloads, whether the file transferred OK. `success` means the transfer did not have errors
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferStatus" })
  transferStatus?: string;
}

export class WebhookActivityAttributesV2WebhookV2Details extends SpeakeasyBase {
  /**
   * Account master username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountName" })
  accountName?: string;

  /**
   * Entry - retry identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attemptId" })
  attemptId?: string;

  /**
   * Type of related activity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "eventData" })
  @Type(() => WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventData)
  eventData?: WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventData;

  /**
   * Date and time event originally took place
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  eventTimestamp?: Date;

  /**
   * IP address of related activity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipAddress" })
  ipAddress?: string;

  /**
   * Type of connection used for related activity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: string;

  /**
   * Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or "publ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

/**
 * Event type
 */
export enum WebhookActivityAttributesV2EventEnum {
  ResourcesUpload = "resources.upload",
  ResourcesDownload = "resources.download",
  ResourcesDelete = "resources.delete",
  ResourcesRename = "resources.rename",
  ResourcesCopy = "resources.copy",
  ResourcesMove = "resources.move",
  ResourcesCompress = "resources.compress",
  ResourcesExtract = "resources.extract",
  ResourcesCreateFolder = "resources.createFolder",
  SharesFormSubmit = "shares.formSubmit",
}

export class WebhookActivityAttributesV2 extends SpeakeasyBase {
  /**
   * Unique ID of account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * Event - retry identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attemptId" })
  attemptId?: string;

  /**
   * Date and time of webhook message being generated by system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  @Type(() => WebhookActivityAttributesV2WebhookV2Details)
  details?: WebhookActivityAttributesV2WebhookV2Details;

  /**
   * The URL the message was sent to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpointUrl" })
  endpointUrl?: string;

  /**
   * Event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event?: WebhookActivityAttributesV2EventEnum;

  /**
   * IP Address of related activity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipAddress" })
  ipAddress?: string;

  /**
   * Whether this attempt was a re-send of a previous attempt
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resend" })
  resend?: boolean;

  /**
   * Path of resource that matched webhook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourcePath" })
  resourcePath?: string;

  /**
   * Body of web response returned by webhook listener
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: string;

  /**
   * HTTP Status Code returned by webhook listener
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;

  /**
   * Username of related activity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;

  /**
   * What version of webhook message is being sent `v2`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhookFormat" })
  webhookFormat?: string;

  /**
   * Unique ID of webhook configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhookId" })
  webhookId?: number;

  /**
   * Path that webhook is watching
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhookPath" })
  webhookPath?: string;
}
