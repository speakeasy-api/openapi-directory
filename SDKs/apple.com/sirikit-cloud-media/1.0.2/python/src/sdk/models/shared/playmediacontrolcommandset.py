"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayMediaControlCommandSet:
    
    bookmark_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarkTrack'), 'exclude': lambda f: f is None }})  
    dislike_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dislikeTrack'), 'exclude': lambda f: f is None }})  
    like_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likeTrack'), 'exclude': lambda f: f is None }})  
    next_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextTrack'), 'exclude': lambda f: f is None }})  
    prefer_skip_backward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferSkipBackward'), 'exclude': lambda f: f is None }})  
    prefer_skip_forward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferSkipForward'), 'exclude': lambda f: f is None }})  
    previous_track: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousTrack'), 'exclude': lambda f: f is None }})  
    seek_to_playback_position: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seekToPlaybackPosition'), 'exclude': lambda f: f is None }})  
    skip_backward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipBackward'), 'exclude': lambda f: f is None }})  
    skip_forward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipForward'), 'exclude': lambda f: f is None }})  
    