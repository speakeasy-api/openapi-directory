<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RoleMapper 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete realm-level role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmResponse
     */
	public function deleteRealmGroupsIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete realm-level role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmResponse
     */
	public function deleteRealmUsersIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsResponse
     */
	public function getRealmGroupsIdRoleMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mappingsRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MappingsRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmResponse
     */
	public function getRealmGroupsIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles that can be mapped
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableResponse
     */
	public function getRealmGroupsIdRoleMappingsRealmAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/realm/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeResponse
     */
	public function getRealmGroupsIdRoleMappingsRealmComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/realm/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsRealmCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsResponse
     */
	public function getRealmUsersIdRoleMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mappingsRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MappingsRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level role mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmResponse
     */
	public function getRealmUsersIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles that can be mapped
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableResponse
     */
	public function getRealmUsersIdRoleMappingsRealmAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/realm/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeResponse
     */
	public function getRealmUsersIdRoleMappingsRealmComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/realm/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsRealmCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add realm-level role mappings to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmResponse
     */
	public function postRealmGroupsIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add realm-level role mappings to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmResponse
     */
	public function postRealmUsersIdRoleMappingsRealm(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/realm', \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}