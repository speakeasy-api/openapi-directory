/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
 */
export class CreateLaunchRequestBodyScheduledSplitsConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.ScheduledSplitConfig })
  @Expose({ name: "steps" })
  @Type(() => shared.ScheduledSplitConfig)
  steps?: shared.ScheduledSplitConfig[];
}

export class CreateLaunchRequestBody extends SpeakeasyBase {
  /**
   * An optional description for the launch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An array of structures that contains the feature and variations that are to be used for the launch.
   */
  @SpeakeasyMetadata({ elemType: shared.LaunchGroupConfig })
  @Expose({ name: "groups" })
  @Type(() => shared.LaunchGroupConfig)
  groups: shared.LaunchGroupConfig[];

  /**
   * An array of structures that define the metrics that will be used to monitor the launch performance.
   */
  @SpeakeasyMetadata({ elemType: shared.MetricMonitorConfig })
  @Expose({ name: "metricMonitors" })
  @Type(() => shared.MetricMonitorConfig)
  metricMonitors?: shared.MetricMonitorConfig[];

  /**
   * The name for the new launch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "randomizationSalt" })
  randomizationSalt?: string;

  /**
   * An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledSplitsConfig" })
  @Type(() => CreateLaunchRequestBodyScheduledSplitsConfig)
  scheduledSplitsConfig?: CreateLaunchRequestBodyScheduledSplitsConfig;

  /**
   * <p>Assigns one or more tags (key-value pairs) to the launch.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateLaunchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateLaunchRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name or ARN of the project that you want to create the launch in.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=project",
  })
  project: string;
}

export class CreateLaunchResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createLaunchResponse?: shared.CreateLaunchResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
