"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetStatsSeriesPeriodFieldsPeriodEnum(str, Enum):
    r"""The period for the series (day or month)"""
    DAY = 'day'
    MONTH = 'month'


@dataclasses.dataclass
class GetStatsSeriesPeriodFieldsRequest:
    
    fields_: str = dataclasses.field(metadata={'path_param': { 'field_name': 'fields', 'style': 'simple', 'explode': False }})
    r"""The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields."""  
    period: GetStatsSeriesPeriodFieldsPeriodEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'period', 'style': 'simple', 'explode': False }})
    r"""The period for the series (day or month)"""  
    end: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': True }})
    r"""The end date for this series (in millis)"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""The start date for this series (in millis)"""  
    

@dataclasses.dataclass
class GetStatsSeriesPeriodFieldsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    