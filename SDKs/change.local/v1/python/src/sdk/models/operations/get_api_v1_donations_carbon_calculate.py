"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetAPIV1DonationsCarbonCalculateSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class GetAPIV1DonationsCarbonCalculateTransportationMethodEnum(str, Enum):
    r"""The primary transportation method of the shipment."""
    AIR = 'air'
    TRUCK = 'truck'
    RAIL = 'rail'
    SEA = 'sea'


@dataclasses.dataclass
class GetAPIV1DonationsCarbonCalculateRequest:
    
    weight_lb: float = dataclasses.field(metadata={'query_param': { 'field_name': 'weight_lb', 'style': 'form', 'explode': True }})
    r"""The total weight (in pounds) of the shipment."""  
    destination_address: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'destination_address', 'style': 'form', 'explode': True }})
    r"""The destination zip code (US only) of the shipment. If you send this parameter, also send `origin_address`."""  
    distance_mi: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'distance_mi', 'style': 'form', 'explode': True }})
    r"""The total distance (in miles) of the shipment. You can use this parameter in place of `origin_address` and `destination_address`."""  
    origin_address: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'origin_address', 'style': 'form', 'explode': True }})
    r"""The origin zip code (US only) of the shipment. If you send this parameter, also send `destination_address`."""  
    transportation_method: Optional[GetAPIV1DonationsCarbonCalculateTransportationMethodEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transportation_method', 'style': 'form', 'explode': True }})
    r"""The primary transportation method of the shipment."""  
    

@dataclasses.dataclass
class GetAPIV1DonationsCarbonCalculateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    