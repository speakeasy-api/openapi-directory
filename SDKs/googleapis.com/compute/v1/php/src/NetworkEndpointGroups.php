<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NetworkEndpointGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of network endpoint groups and sorts them by zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListResponse
     */
	public function computeNetworkEndpointGroupsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/networkEndpointGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEndpointGroupAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEndpointGroupAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach a list of network endpoints to the specified network endpoint group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsResponse
     */
	public function computeNetworkEndpointGroupsAttachNetworkEndpoints(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEndpointGroupsAttachEndpointsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsAttachNetworkEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteResponse
     */
	public function computeNetworkEndpointGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detach a list of network endpoints from the specified network endpoint group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsResponse
     */
	public function computeNetworkEndpointGroupsDetachNetworkEndpoints(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEndpointGroupsDetachEndpointsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsDetachNetworkEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified network endpoint group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetResponse
     */
	public function computeNetworkEndpointGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEndpointGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEndpointGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a network endpoint group in the specified project using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertResponse
     */
	public function computeNetworkEndpointGroupsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEndpointGroup", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of network endpoint groups that are located in the specified project and zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListResponse
     */
	public function computeNetworkEndpointGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEndpointGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEndpointGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the network endpoints in the specified network endpoint group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsResponse
     */
	public function computeNetworkEndpointGroupsListNetworkEndpoints(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEndpointGroupsListEndpointsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsListNetworkEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEndpointGroupsListNetworkEndpoints = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEndpointGroupsListNetworkEndpoints', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsResponse
     */
	public function computeNetworkEndpointGroupsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEndpointGroupsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}