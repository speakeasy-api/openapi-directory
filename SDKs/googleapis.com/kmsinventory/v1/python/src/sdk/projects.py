"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def kmsinventory_projects_crypto_keys_list(self, request: operations.KmsinventoryProjectsCryptoKeysListRequest, security: operations.KmsinventoryProjectsCryptoKeysListSecurity) -> operations.KmsinventoryProjectsCryptoKeysListResponse:
        r"""Returns cryptographic keys managed by Cloud KMS in a given Cloud project. Note that this data is sourced from snapshots, meaning it may not completely reflect the actual state of key metadata at call time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KmsinventoryProjectsCryptoKeysListRequest, base_url, '/v1/{parent}/cryptoKeys', request)
        
        query_params = utils.get_query_params(operations.KmsinventoryProjectsCryptoKeysListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KmsinventoryProjectsCryptoKeysListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudKmsInventoryV1ListCryptoKeysResponse])
                res.google_cloud_kms_inventory_v1_list_crypto_keys_response = out

        return res

    def kmsinventory_projects_locations_key_rings_crypto_keys_get_protected_resources_summary(self, request: operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummaryRequest, security: operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummarySecurity) -> operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummaryResponse:
        r"""Returns aggregate information about the resources protected by the given Cloud KMS CryptoKey. Only resources within the same Cloud organization as the key will be returned. The project that holds the key must be part of an organization in order for this call to succeed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummaryRequest, base_url, '/v1/{name}/protectedResourcesSummary', request)
        
        query_params = utils.get_query_params(operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KmsinventoryProjectsLocationsKeyRingsCryptoKeysGetProtectedResourcesSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudKmsInventoryV1ProtectedResourcesSummary])
                res.google_cloud_kms_inventory_v1_protected_resources_summary = out

        return res

    