"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .attachments import Attachments
from .clusters import Clusters
from .data_entities import DataEntities
from .documents import Documents
from .score import Score
from .scroll import Scroll
from .search import Search
from .versions import Versions
from sdk.models import shared

SERVERS = [
    "https://vtex.local",
    "https://{accountName}.{environment}.com.br",
    r"""VTEX server url"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    attachments: Attachments
    r"""The `attachments` API allows you to upload and download files.
    
    In case of images, the `content-type` header is filled with` image/jpg`.
    """
    clusters: Clusters
    r"""Lets you know if a particular document is in one or more clusters."""
    data_entities: DataEntities
    r"""Set of APIs that returns the structure of the data entities."""
    documents: Documents
    r"""The APIs within this group are used to save documents and query them by id.
    
    If the document has the id attribute or has fields that have been set to indexes with unique values, VTEX Master Data will attempt to identify the document. If the document is found a change will be made. If it is not found, an inclusion will be made. ** This scenario does not apply to the API with the POST verb**.
    
    Another important note: The id field will only be considered on the **POST** verb if the ID type entered in the Data Entity is the option:
    
    ```
    A chave primária será informada pelo cliente através do atributo 'id'
    ```
    
    Otherwise, a new document will always be created.
    
    ### Response status code
    
    1. Status Code 201: Document created successfully
    2. Status Code 200: Document changed successfully
    3. Status Code 304: There were no changes to the document
    4. Status Code 400: Invalid information in JSON
    5. Status Code 403: Unauthorized access
    """
    score: Score
    r"""It allows to record and remove points in the` Score2` fields."""
    scroll: Scroll
    r"""The new `` scroll `` API has been developed to meet external integration scenarios. If you need to query the entire VTEX Master Data database, or your collection is over 10.000 documents, use this feature."""
    search: Search
    r"""The `search` API is intended to query a collection of documents."""
    versions: Versions
    r"""Master Data documents are versioned. This means that for each change a new version is generated. The `versions` APIs allows to query the versions and also apply the state of a document to the most current version."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.attachments = Attachments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.clusters = Clusters(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.data_entities = DataEntities(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.documents = Documents(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.score = Score(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.scroll = Scroll(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.versions = Versions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    