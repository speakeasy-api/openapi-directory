/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON {
    /**
     * Client id of the server if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Attributes of the server when it's a device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDevice device;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withDevice(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDevice device) {
        this.device = device;
        return this;
    }
    
    /**
     * IPv4 attributes of the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv4")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONIpv4 ipv4;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withIpv4(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONIpv4 ipv4) {
        this.ipv4 = ipv4;
        return this;
    }
    
    /**
     * Whether the server is allowed or blocked. Always true for configured servers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAllowed")
    public Boolean isAllowed;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withIsAllowed(Boolean isAllowed) {
        this.isAllowed = isAllowed;
        return this;
    }
    
    /**
     * Whether the server is configured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfigured")
    public Boolean isConfigured;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withIsConfigured(Boolean isConfigured) {
        this.isConfigured = isConfigured;
        return this;
    }
    
    /**
     * Attributes of the server's last ack.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastAck")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAck lastAck;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withLastAck(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAck lastAck) {
        this.lastAck = lastAck;
        return this;
    }
    
    /**
     * Last packet the server received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastPacket")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacket lastPacket;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withLastPacket(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacket lastPacket) {
        this.lastPacket = lastPacket;
        return this;
    }
    
    /**
     * Last time the server was seen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastSeenAt")
    public OffsetDateTime lastSeenAt;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withLastSeenAt(OffsetDateTime lastSeenAt) {
        this.lastSeenAt = lastSeenAt;
        return this;
    }
    
    /**
     * Mac address of the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac")
    public String mac;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withMac(String mac) {
        this.mac = mac;
        return this;
    }
    
    /**
     * Devices that saw the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seenBy")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONSeenBy[] seenBy;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withSeenBy(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONSeenBy[] seenBy) {
        this.seenBy = seenBy;
        return this;
    }
    
    /**
     * server type. Can be a 'device', 'stack', or 'discovered' (i.e client).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONTypeEnum type;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withType(GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Vlan id of the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlan")
    public Long vlan;
    public GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON withVlan(Long vlan) {
        this.vlan = vlan;
        return this;
    }
    
}
