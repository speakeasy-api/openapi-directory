/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LoyaltyEventDateTimeFilter } from "./loyaltyeventdatetimefilter";
import { LoyaltyEventLocationFilter } from "./loyaltyeventlocationfilter";
import { LoyaltyEventLoyaltyAccountFilter } from "./loyaltyeventloyaltyaccountfilter";
import { LoyaltyEventOrderFilter } from "./loyaltyeventorderfilter";
import { LoyaltyEventTypeFilter } from "./loyaltyeventtypefilter";
import { Expose, Type } from "class-transformer";

/**
 * The filtering criteria. If the request specifies multiple filters,
 *
 * @remarks
 * the endpoint uses a logical AND to evaluate them.
 */
export class LoyaltyEventFilter extends SpeakeasyBase {
  /**
   * Filter events by date time range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time_filter" })
  @Type(() => LoyaltyEventDateTimeFilter)
  dateTimeFilter?: LoyaltyEventDateTimeFilter;

  /**
   * Filter events by location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_filter" })
  @Type(() => LoyaltyEventLocationFilter)
  locationFilter?: LoyaltyEventLocationFilter;

  /**
   * Filter events by loyalty account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loyalty_account_filter" })
  @Type(() => LoyaltyEventLoyaltyAccountFilter)
  loyaltyAccountFilter?: LoyaltyEventLoyaltyAccountFilter;

  /**
   * Filter events by the order associated with the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "order_filter" })
  @Type(() => LoyaltyEventOrderFilter)
  orderFilter?: LoyaltyEventOrderFilter;

  /**
   * Filter events by event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type_filter" })
  @Type(() => LoyaltyEventTypeFilter)
  typeFilter?: LoyaltyEventTypeFilter;
}
