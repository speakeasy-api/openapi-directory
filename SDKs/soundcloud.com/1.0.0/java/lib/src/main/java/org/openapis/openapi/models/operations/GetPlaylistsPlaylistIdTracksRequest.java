/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetPlaylistsPlaylistIdTracksRequest {
    /**
     * Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you'd like to see all possible tracks. See `Track#access` schema for more details.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=access")
    public org.openapis.openapi.models.shared.AccessEnum[] access;

    public GetPlaylistsPlaylistIdTracksRequest withAccess(org.openapis.openapi.models.shared.AccessEnum[] access) {
        this.access = access;
        return this;
    }
    
    /**
     * Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=linked_partitioning")
    public Boolean linkedPartitioning;

    public GetPlaylistsPlaylistIdTracksRequest withLinkedPartitioning(Boolean linkedPartitioning) {
        this.linkedPartitioning = linkedPartitioning;
        return this;
    }
    
    /**
     * SoundCloud playlist id
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=playlist_id")
    public Long playlistId;

    public GetPlaylistsPlaylistIdTracksRequest withPlaylistId(Long playlistId) {
        this.playlistId = playlistId;
        return this;
    }
    
    /**
     * A secret token to fetch private playlists/tracks
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=secret_token")
    public String secretToken;

    public GetPlaylistsPlaylistIdTracksRequest withSecretToken(String secretToken) {
        this.secretToken = secretToken;
        return this;
    }
    
    public GetPlaylistsPlaylistIdTracksRequest(@JsonProperty("playlist_id") Long playlistId) {
        this.playlistId = playlistId;
  }
}
