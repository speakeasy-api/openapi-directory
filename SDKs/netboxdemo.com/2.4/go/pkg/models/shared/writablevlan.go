// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableVLANStatusEnum string

const (
	WritableVLANStatusEnumOne   WritableVLANStatusEnum = "1"
	WritableVLANStatusEnumTwo   WritableVLANStatusEnum = "2"
	WritableVLANStatusEnumThree WritableVLANStatusEnum = "3"
)

func (e *WritableVLANStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WritableVLANStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableVLANStatusEnum: %s", s)
	}
}

type WritableVLANInput struct {
	CustomFields map[string]interface{}  `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Group        *int64                  `json:"group,omitempty"`
	Name         string                  `json:"name"`
	Role         *int64                  `json:"role,omitempty"`
	Site         *int64                  `json:"site,omitempty"`
	Status       *WritableVLANStatusEnum `json:"status,omitempty"`
	Tags         []string                `json:"tags,omitempty"`
	Tenant       *int64                  `json:"tenant,omitempty"`
	Vid          int64                   `json:"vid"`
}
