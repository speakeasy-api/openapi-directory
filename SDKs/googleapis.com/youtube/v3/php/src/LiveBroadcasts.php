<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LiveBroadcasts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bind a broadcast to a stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindResponse
     */
	public function youtubeLiveBroadcastsBind(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts/bind');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsBindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liveBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiveBroadcast', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a given broadcast.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteResponse
     */
	public function youtubeLiveBroadcastsDelete(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Inserts a new stream for the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertResponse
     */
	public function youtubeLiveBroadcastsInsert(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "liveBroadcast", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liveBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiveBroadcast', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert cuepoints in a broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointResponse
     */
	public function youtubeLiveBroadcastsInsertCuepoint(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts/cuepoint');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cuepoint", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsInsertCuepointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cuepoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cuepoint', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the list of broadcasts associated with the given channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListResponse
     */
	public function youtubeLiveBroadcastsList(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liveBroadcastListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiveBroadcastListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transition a broadcast to a given status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionResponse
     */
	public function youtubeLiveBroadcastsTransition(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts/transition');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsTransitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liveBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiveBroadcast', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing broadcast for the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateResponse
     */
	public function youtubeLiveBroadcastsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/liveBroadcasts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "liveBroadcast", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeLiveBroadcastsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liveBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiveBroadcast', 'json');
            }
        }

        return $response;
    }
}