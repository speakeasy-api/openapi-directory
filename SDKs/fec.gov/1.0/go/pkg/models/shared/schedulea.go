// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"openapi/pkg/types"
	"time"
)

type ScheduleA struct {
	AmendmentIndicator         *string `json:"amendment_indicator,omitempty"`
	AmendmentIndicatorDesc     *string `json:"amendment_indicator_desc,omitempty"`
	BackReferenceScheduleName  *string `json:"back_reference_schedule_name,omitempty"`
	BackReferenceTransactionID *string `json:"back_reference_transaction_id,omitempty"`
	CandidateFirstName         *string `json:"candidate_first_name,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID         *string `json:"candidate_id,omitempty"`
	CandidateLastName   *string `json:"candidate_last_name,omitempty"`
	CandidateMiddleName *string `json:"candidate_middle_name,omitempty"`
	// Name of candidate running for office
	CandidateName   *string `json:"candidate_name,omitempty"`
	CandidateOffice *string `json:"candidate_office,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	CandidateOfficeDistrict  *string           `json:"candidate_office_district,omitempty"`
	CandidateOfficeFull      *string           `json:"candidate_office_full,omitempty"`
	CandidateOfficeState     *string           `json:"candidate_office_state,omitempty"`
	CandidateOfficeStateFull *string           `json:"candidate_office_state_full,omitempty"`
	CandidatePrefix          *string           `json:"candidate_prefix,omitempty"`
	CandidateSuffix          *string           `json:"candidate_suffix,omitempty"`
	Committee                *CommitteeHistory `json:"committee,omitempty"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID *string `json:"committee_id,omitempty"`
	// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
	CommitteeName             *string           `json:"committee_name,omitempty"`
	ConduitCommitteeCity      *string           `json:"conduit_committee_city,omitempty"`
	ConduitCommitteeID        *string           `json:"conduit_committee_id,omitempty"`
	ConduitCommitteeName      *string           `json:"conduit_committee_name,omitempty"`
	ConduitCommitteeState     *string           `json:"conduit_committee_state,omitempty"`
	ConduitCommitteeStreet1   *string           `json:"conduit_committee_street1,omitempty"`
	ConduitCommitteeStreet2   *string           `json:"conduit_committee_street2,omitempty"`
	ConduitCommitteeZip       *int              `json:"conduit_committee_zip,omitempty"`
	ContributionReceiptAmount *float64          `json:"contribution_receipt_amount,omitempty"`
	ContributionReceiptDate   *types.Date       `json:"contribution_receipt_date,omitempty"`
	Contributor               *CommitteeHistory `json:"contributor,omitempty"`
	ContributorAggregateYtd   *float64          `json:"contributor_aggregate_ytd,omitempty"`
	// City of contributor
	ContributorCity *string `json:"contributor_city,omitempty"`
	// Employer of contributor, filers need to make an effort to gather this information
	ContributorEmployer  *string `json:"contributor_employer,omitempty"`
	ContributorFirstName *string `json:"contributor_first_name,omitempty"`
	// The FEC identifier should be represented here if the contributor is registered with the FEC.
	ContributorID         *string `json:"contributor_id,omitempty"`
	ContributorLastName   *string `json:"contributor_last_name,omitempty"`
	ContributorMiddleName *string `json:"contributor_middle_name,omitempty"`
	// Name of contributor
	ContributorName *string `json:"contributor_name,omitempty"`
	// Occupation of contributor, filers need to make an effort to gather this information
	ContributorOccupation *string `json:"contributor_occupation,omitempty"`
	ContributorPrefix     *string `json:"contributor_prefix,omitempty"`
	// State of contributor
	ContributorState   *string `json:"contributor_state,omitempty"`
	ContributorStreet1 *string `json:"contributor_street_1,omitempty"`
	ContributorStreet2 *string `json:"contributor_street_2,omitempty"`
	ContributorSuffix  *string `json:"contributor_suffix,omitempty"`
	// Zip code of contributor
	ContributorZip                     *string    `json:"contributor_zip,omitempty"`
	DonorCommitteeName                 *string    `json:"donor_committee_name,omitempty"`
	ElectionType                       *string    `json:"election_type,omitempty"`
	ElectionTypeFull                   *string    `json:"election_type_full,omitempty"`
	EntityType                         *string    `json:"entity_type,omitempty"`
	EntityTypeDesc                     *string    `json:"entity_type_desc,omitempty"`
	FecElectionTypeDesc                *string    `json:"fec_election_type_desc,omitempty"`
	FecElectionYear                    *string    `json:"fec_election_year,omitempty"`
	FileNumber                         *int       `json:"file_number,omitempty"`
	FilingForm                         *string    `json:"filing_form,omitempty"`
	ImageNumber                        *string    `json:"image_number,omitempty"`
	IncreasedLimit                     *string    `json:"increased_limit,omitempty"`
	IsIndividual                       *bool      `json:"is_individual,omitempty"`
	LineNumber                         *string    `json:"line_number,omitempty"`
	LineNumberLabel                    *string    `json:"line_number_label,omitempty"`
	LinkID                             *int       `json:"link_id,omitempty"`
	LoadDate                           *time.Time `json:"load_date,omitempty"`
	MemoCode                           *string    `json:"memo_code,omitempty"`
	MemoCodeFull                       *string    `json:"memo_code_full,omitempty"`
	MemoText                           *string    `json:"memo_text,omitempty"`
	MemoedSubtotal                     *bool      `json:"memoed_subtotal,omitempty"`
	NationalCommitteeNonfederalAccount *string    `json:"national_committee_nonfederal_account,omitempty"`
	OriginalSubID                      *string    `json:"original_sub_id,omitempty"`
	PdfURL                             *string    `json:"pdf_url,omitempty"`
	ReceiptType                        *string    `json:"receipt_type,omitempty"`
	ReceiptTypeDesc                    *string    `json:"receipt_type_desc,omitempty"`
	ReceiptTypeFull                    *string    `json:"receipt_type_full,omitempty"`
	RecipientCommitteeDesignation      *string    `json:"recipient_committee_designation,omitempty"`
	RecipientCommitteeOrgType          *string    `json:"recipient_committee_org_type,omitempty"`
	RecipientCommitteeType             *string    `json:"recipient_committee_type,omitempty"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType *string `json:"report_type,omitempty"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear       *int    `json:"report_year,omitempty"`
	ScheduleType     *string `json:"schedule_type,omitempty"`
	ScheduleTypeFull *string `json:"schedule_type_full,omitempty"`
	SubID            *string `json:"sub_id,omitempty"`
	TransactionID    *string `json:"transaction_id,omitempty"`
	// This is a two-year period that is derived from the year a transaction took place in the
	// Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
	// (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
	// the two_year_transaction_period is named after the ending, even-numbered year. If we do not
	// have the date  of the transaction, we fall back to using the report year (report_year in both
	// tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
	// specified, the results default to the most current cycle.
	//
	TwoYearTransactionPeriod *int    `json:"two_year_transaction_period,omitempty"`
	UnusedContbrID           *string `json:"unused_contbr_id,omitempty"`
}
