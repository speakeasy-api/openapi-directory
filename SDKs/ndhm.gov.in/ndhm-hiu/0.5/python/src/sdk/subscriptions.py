"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Subscriptions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_5_subscription_requests_hiu_notify_json(self, request: operations.PostV05SubscriptionRequestsHiuNotifyJSONRequest) -> operations.PostV05SubscriptionRequestsHiuNotifyJSONResponse:
        r"""Notification for subscription grant/deny/revoke
        This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscription-requests/hiu/notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "subscription_approval_notification", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionRequestsHiuNotifyJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_subscription_requests_hiu_notify_raw(self, request: operations.PostV05SubscriptionRequestsHiuNotifyRawRequest) -> operations.PostV05SubscriptionRequestsHiuNotifyRawResponse:
        r"""Notification for subscription grant/deny/revoke
        This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscription-requests/hiu/notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionRequestsHiuNotifyRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_subscription_requests_hiu_on_init(self, request: operations.PostV05SubscriptionRequestsHiuOnInitRequest) -> operations.PostV05SubscriptionRequestsHiuOnInitResponse:
        r"""callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
        This callback API acknowledges the request for subscription from a HIU, and sends back a \"id\" that will be used when the patient/user approves or denies the subscription.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscription-requests/hiu/on-init'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_subscription_request_receipt", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionRequestsHiuOnInitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_subscriptions_hiu_notify_json(self, request: operations.PostV05SubscriptionsHiuNotifyJSONRequest) -> operations.PostV05SubscriptionsHiuNotifyJSONResponse:
        r"""Notification to HIU on basis of a granted subscription
        This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context. 
        1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient. 
        2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscriptions/hiu/notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_subscription_notification", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionsHiuNotifyJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_subscriptions_hiu_notify_raw(self, request: operations.PostV05SubscriptionsHiuNotifyRawRequest) -> operations.PostV05SubscriptionsHiuNotifyRawResponse:
        r"""Notification to HIU on basis of a granted subscription
        This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context. 
        1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient. 
        2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscriptions/hiu/notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionsHiuNotifyRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    