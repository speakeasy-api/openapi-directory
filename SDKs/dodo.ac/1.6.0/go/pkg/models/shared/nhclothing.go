// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NHClothingAvailability struct {
	From *string `json:"from,omitempty"`
	Note *string `json:"note,omitempty"`
}

type NHClothingBuy struct {
	Currency *string `json:"currency,omitempty"`
	Price    *int64  `json:"price,omitempty"`
}

// NHClothingCategoryEnum - The category of item as shown in the player's inventory.
type NHClothingCategoryEnum string

const (
	NHClothingCategoryEnumTops        NHClothingCategoryEnum = "Tops"
	NHClothingCategoryEnumBottoms     NHClothingCategoryEnum = "Bottoms"
	NHClothingCategoryEnumDressUp     NHClothingCategoryEnum = "Dress-up"
	NHClothingCategoryEnumHeadwear    NHClothingCategoryEnum = "Headwear"
	NHClothingCategoryEnumAccessories NHClothingCategoryEnum = "Accessories"
	NHClothingCategoryEnumSocks       NHClothingCategoryEnum = "Socks"
	NHClothingCategoryEnumShoes       NHClothingCategoryEnum = "Shoes"
	NHClothingCategoryEnumBags        NHClothingCategoryEnum = "Bags"
	NHClothingCategoryEnumUmbrellas   NHClothingCategoryEnum = "Umbrellas"
)

func (e NHClothingCategoryEnum) ToPointer() *NHClothingCategoryEnum {
	return &e
}

func (e *NHClothingCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Tops":
		fallthrough
	case "Bottoms":
		fallthrough
	case "Dress-up":
		fallthrough
	case "Headwear":
		fallthrough
	case "Accessories":
		fallthrough
	case "Socks":
		fallthrough
	case "Shoes":
		fallthrough
	case "Bags":
		fallthrough
	case "Umbrellas":
		*e = NHClothingCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHClothingCategoryEnum: %v", v)
	}
}

type NHClothingLabelThemesEnum string

const (
	NHClothingLabelThemesEnumComfy      NHClothingLabelThemesEnum = "Comfy"
	NHClothingLabelThemesEnumEveryday   NHClothingLabelThemesEnum = "Everyday"
	NHClothingLabelThemesEnumFairyTale  NHClothingLabelThemesEnum = "Fairy tale"
	NHClothingLabelThemesEnumFormal     NHClothingLabelThemesEnum = "Formal"
	NHClothingLabelThemesEnumGoth       NHClothingLabelThemesEnum = "Goth"
	NHClothingLabelThemesEnumOutdoorsy  NHClothingLabelThemesEnum = "Outdoorsy"
	NHClothingLabelThemesEnumParty      NHClothingLabelThemesEnum = "Party"
	NHClothingLabelThemesEnumSporty     NHClothingLabelThemesEnum = "Sporty"
	NHClothingLabelThemesEnumTheatrical NHClothingLabelThemesEnum = "Theatrical"
	NHClothingLabelThemesEnumVacation   NHClothingLabelThemesEnum = "Vacation"
	NHClothingLabelThemesEnumWork       NHClothingLabelThemesEnum = "Work"
)

func (e NHClothingLabelThemesEnum) ToPointer() *NHClothingLabelThemesEnum {
	return &e
}

func (e *NHClothingLabelThemesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Comfy":
		fallthrough
	case "Everyday":
		fallthrough
	case "Fairy tale":
		fallthrough
	case "Formal":
		fallthrough
	case "Goth":
		fallthrough
	case "Outdoorsy":
		fallthrough
	case "Party":
		fallthrough
	case "Sporty":
		fallthrough
	case "Theatrical":
		fallthrough
	case "Vacation":
		fallthrough
	case "Work":
		*e = NHClothingLabelThemesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHClothingLabelThemesEnum: %v", v)
	}
}

type NHClothingStylesEnum string

const (
	NHClothingStylesEnumActive   NHClothingStylesEnum = "Active"
	NHClothingStylesEnumCool     NHClothingStylesEnum = "Cool"
	NHClothingStylesEnumCute     NHClothingStylesEnum = "Cute"
	NHClothingStylesEnumElegant  NHClothingStylesEnum = "Elegant"
	NHClothingStylesEnumGorgeous NHClothingStylesEnum = "Gorgeous"
	NHClothingStylesEnumSimple   NHClothingStylesEnum = "Simple"
)

func (e NHClothingStylesEnum) ToPointer() *NHClothingStylesEnum {
	return &e
}

func (e *NHClothingStylesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Cool":
		fallthrough
	case "Cute":
		fallthrough
	case "Elegant":
		fallthrough
	case "Gorgeous":
		fallthrough
	case "Simple":
		*e = NHClothingStylesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHClothingStylesEnum: %v", v)
	}
}

// NHClothingVariationTotalEnum - The total number of variations the clothing has, between 0 and 8.
type NHClothingVariationTotalEnum int64

const (
	NHClothingVariationTotalEnumZero  NHClothingVariationTotalEnum = 0
	NHClothingVariationTotalEnumOne   NHClothingVariationTotalEnum = 1
	NHClothingVariationTotalEnumTwo   NHClothingVariationTotalEnum = 2
	NHClothingVariationTotalEnumThree NHClothingVariationTotalEnum = 3
	NHClothingVariationTotalEnumFour  NHClothingVariationTotalEnum = 4
	NHClothingVariationTotalEnumFive  NHClothingVariationTotalEnum = 5
	NHClothingVariationTotalEnumSix   NHClothingVariationTotalEnum = 6
	NHClothingVariationTotalEnumSeven NHClothingVariationTotalEnum = 7
	NHClothingVariationTotalEnumEight NHClothingVariationTotalEnum = 8
)

func (e NHClothingVariationTotalEnum) ToPointer() *NHClothingVariationTotalEnum {
	return &e
}

func (e *NHClothingVariationTotalEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		*e = NHClothingVariationTotalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHClothingVariationTotalEnum: %v", v)
	}
}

type NHClothingVariationsColorsEnum string

const (
	NHClothingVariationsColorsEnumAqua     NHClothingVariationsColorsEnum = "Aqua"
	NHClothingVariationsColorsEnumBeige    NHClothingVariationsColorsEnum = "Beige"
	NHClothingVariationsColorsEnumBlack    NHClothingVariationsColorsEnum = "Black"
	NHClothingVariationsColorsEnumBlue     NHClothingVariationsColorsEnum = "Blue"
	NHClothingVariationsColorsEnumBrown    NHClothingVariationsColorsEnum = "Brown"
	NHClothingVariationsColorsEnumColorful NHClothingVariationsColorsEnum = "Colorful"
	NHClothingVariationsColorsEnumGray     NHClothingVariationsColorsEnum = "Gray"
	NHClothingVariationsColorsEnumGreen    NHClothingVariationsColorsEnum = "Green"
	NHClothingVariationsColorsEnumOrange   NHClothingVariationsColorsEnum = "Orange"
	NHClothingVariationsColorsEnumPink     NHClothingVariationsColorsEnum = "Pink"
	NHClothingVariationsColorsEnumPurple   NHClothingVariationsColorsEnum = "Purple"
	NHClothingVariationsColorsEnumRed      NHClothingVariationsColorsEnum = "Red"
	NHClothingVariationsColorsEnumWhite    NHClothingVariationsColorsEnum = "White"
	NHClothingVariationsColorsEnumYellow   NHClothingVariationsColorsEnum = "Yellow"
)

func (e NHClothingVariationsColorsEnum) ToPointer() *NHClothingVariationsColorsEnum {
	return &e
}

func (e *NHClothingVariationsColorsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Aqua":
		fallthrough
	case "Beige":
		fallthrough
	case "Black":
		fallthrough
	case "Blue":
		fallthrough
	case "Brown":
		fallthrough
	case "Colorful":
		fallthrough
	case "Gray":
		fallthrough
	case "Green":
		fallthrough
	case "Orange":
		fallthrough
	case "Pink":
		fallthrough
	case "Purple":
		fallthrough
	case "Red":
		fallthrough
	case "White":
		fallthrough
	case "Yellow":
		*e = NHClothingVariationsColorsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHClothingVariationsColorsEnum: %v", v)
	}
}

type NHClothingVariations struct {
	Colors    []NHClothingVariationsColorsEnum `json:"colors,omitempty"`
	ImageURL  *string                          `json:"image_url,omitempty"`
	Variation *string                          `json:"variation,omitempty"`
}

// NHClothing - A JSON object describing the clothing.
type NHClothing struct {
	// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
	Availability []NHClothingAvailability `json:"availability,omitempty"`
	// An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
	Buy []NHClothingBuy `json:"buy,omitempty"`
	// The category of item as shown in the player's inventory.
	Category *NHClothingCategoryEnum `json:"category,omitempty"`
	// The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
	LabelThemes []NHClothingLabelThemesEnum `json:"label_themes,omitempty"`
	// The name of the clothing.
	Name *string `json:"name,omitempty"`
	// Any additional miscellaneous information about the clothing, such as a name change from a past update.
	Notes *string `json:"notes,omitempty"`
	// The time of the year that the clothing is available.
	Seasonality *string `json:"seasonality,omitempty"`
	// The number of Bells the clothing can be sold to the store for.
	Sell *int64 `json:"sell,omitempty"`
	// The clothing's style(s). Styles are used for gifting villagers.
	Styles []NHClothingStylesEnum `json:"styles,omitempty"`
	// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
	Unlocked *bool `json:"unlocked,omitempty"`
	// Link to the respective Nookipedia article.
	URL *string `json:"url,omitempty"`
	// The total number of variations the clothing has, between 0 and 8.
	VariationTotal *NHClothingVariationTotalEnum `json:"variation_total,omitempty"`
	// An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.
	Variations []NHClothingVariations `json:"variations,omitempty"`
	// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
	VersionAdded *string `json:"version_added,omitempty"`
	// Whether villagers may equip this item.
	VillEquip *bool `json:"vill_equip,omitempty"`
}
