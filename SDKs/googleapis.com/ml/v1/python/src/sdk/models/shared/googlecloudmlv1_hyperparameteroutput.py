"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudmlv1_builtinalgorithmoutput as shared_googlecloudmlv1_builtinalgorithmoutput
from ..shared import googlecloudmlv1_hyperparameteroutput_hyperparametermetric as shared_googlecloudmlv1_hyperparameteroutput_hyperparametermetric
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudMlV1HyperparameterOutputStateEnum(str, Enum):
    r"""Output only. The detailed state of the trial."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    QUEUED = 'QUEUED'
    PREPARING = 'PREPARING'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudMlV1HyperparameterOutput:
    r"""Represents the result of a single hyperparameter tuning trial from a training job. The TrainingOutput object that is returned on successful completion of a training job with hyperparameter tuning includes a list of HyperparameterOutput objects, one for each successful trial."""
    
    all_metrics: Optional[list[shared_googlecloudmlv1_hyperparameteroutput_hyperparametermetric.GoogleCloudMlV1HyperparameterOutputHyperparameterMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allMetrics'), 'exclude': lambda f: f is None }})
    r"""All recorded object metrics for this trial. This field is not currently populated."""  
    built_in_algorithm_output: Optional[shared_googlecloudmlv1_builtinalgorithmoutput.GoogleCloudMlV1BuiltInAlgorithmOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('builtInAlgorithmOutput'), 'exclude': lambda f: f is None }})
    r"""Represents output related to a built-in algorithm Job."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Output only. End time for the trial."""  
    final_metric: Optional[shared_googlecloudmlv1_hyperparameteroutput_hyperparametermetric.GoogleCloudMlV1HyperparameterOutputHyperparameterMetric] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalMetric'), 'exclude': lambda f: f is None }})
    r"""An observed value of a metric."""  
    hyperparameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperparameters'), 'exclude': lambda f: f is None }})
    r"""The hyperparameters given to this trial."""  
    is_trial_stopped_early: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTrialStoppedEarly'), 'exclude': lambda f: f is None }})
    r"""True if the trial is stopped early."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Start time for the trial."""  
    state: Optional[GoogleCloudMlV1HyperparameterOutputStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The detailed state of the trial."""  
    trial_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialId'), 'exclude': lambda f: f is None }})
    r"""The trial id for these results."""  
    web_access_uris: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAccessUris'), 'exclude': lambda f: f is None }})
    r"""URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a hyperparameter tuning job and the job's training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell."""  
    