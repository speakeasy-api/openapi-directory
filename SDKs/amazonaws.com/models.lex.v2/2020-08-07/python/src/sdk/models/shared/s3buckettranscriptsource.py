"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import pathformat as shared_pathformat
from ..shared import transcriptfilter as shared_transcriptfilter
from ..shared import transcriptformat_enum as shared_transcriptformat_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class S3BucketTranscriptSource:
    r"""The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata."""
    
    s3_bucket_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3BucketName') }})  
    transcript_format: shared_transcriptformat_enum.TranscriptFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcriptFormat') }})  
    kms_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyArn'), 'exclude': lambda f: f is None }})  
    path_format: Optional[shared_pathformat.PathFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pathFormat'), 'exclude': lambda f: f is None }})  
    transcript_filter: Optional[shared_transcriptfilter.TranscriptFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcriptFilter'), 'exclude': lambda f: f is None }})  
    