"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectSettingsSerializer:
    
    allowed_domains: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_domains') }})  
    blacklisted_domains: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blacklisted_domains') }})  
    header_settings: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_settings') }})  
    max_nb_pages: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_nb_pages') }})  
    sitemaps: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sitemaps') }})  
    start_urls: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_urls') }})  
    compare_crawl: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compare_crawl'), 'exclude': lambda f: f is None }})  
    crawl_gzip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crawl_gzip'), 'exclude': lambda f: f is None }})  
    extra_headers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra_headers'), 'exclude': lambda f: f is None }})  
    google_analytics_account_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_analytics_account_email'), 'exclude': lambda f: f is None }})
    r"""Keep email in case user delete his social auth connection"""  
    google_analytics_nb_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_analytics_nb_days'), 'exclude': lambda f: f is None }})  
    google_analytics_site_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_analytics_site_id'), 'exclude': lambda f: f is None }})  
    google_social_auth_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_social_auth_id'), 'exclude': lambda f: f is None }})  
    has_robots_txt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_robots_txt'), 'exclude': lambda f: f is None }})  
    max_depth: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_depth'), 'exclude': lambda f: f is None }})  
    max_pages_per_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_pages_per_sec'), 'exclude': lambda f: f is None }})  
    respect_nofollow: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respect_nofollow'), 'exclude': lambda f: f is None }})  
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_agent'), 'exclude': lambda f: f is None }})  
    