"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosTags:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_tag(self, request: operations.AddVideoTagRequest, security: operations.AddVideoTagSecurity) -> operations.AddVideoTagResponse:
        r"""Add a specific tag to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoTagRequest, base_url, '/videos/{video_id}/tags/{word}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def add_video_tags(self, request: operations.AddVideoTagsRequest, security: operations.AddVideoTagsSecurity) -> operations.AddVideoTagsResponse:
        r"""Add a list of tags to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoTagsRequest, base_url, '/videos/{video_id}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Tag]])
                res.tags = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def check_video_for_tag(self, request: operations.CheckVideoForTagRequest) -> operations.CheckVideoForTagResponse:
        r"""Check if a tag has been added to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckVideoForTagRequest, base_url, '/videos/{video_id}/tags/{word}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckVideoForTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_tag(self, request: operations.DeleteVideoTagRequest, security: operations.DeleteVideoTagSecurity) -> operations.DeleteVideoTagResponse:
        r"""Remove a tag from a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoTagRequest, base_url, '/videos/{video_id}/tags/{word}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_video_tags(self, request: operations.GetVideoTagsRequest) -> operations.GetVideoTagsResponse:
        r"""Get all the tags of a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoTagsRequest, base_url, '/videos/{video_id}/tags', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.tag+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Tag]])
                res.tags = out

        return res

    def get_videos_with_tag(self, request: operations.GetVideosWithTagRequest) -> operations.GetVideosWithTagResponse:
        r"""Get all the videos with a specific tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideosWithTagRequest, base_url, '/tags/{word}/videos', request)
        
        query_params = utils.get_query_params(operations.GetVideosWithTagRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideosWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    