/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Position } from "./position";
import { Expose, Type } from "class-transformer";

/**
 * Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
 */
export class ApproximateProgress extends SpeakeasyBase {
  /**
   * Obsolete.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentComplete" })
  percentComplete?: number;

  /**
   * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  @Type(() => Position)
  position?: Position;

  /**
   * Obsolete.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remainingTime" })
  remainingTime?: string;
}
