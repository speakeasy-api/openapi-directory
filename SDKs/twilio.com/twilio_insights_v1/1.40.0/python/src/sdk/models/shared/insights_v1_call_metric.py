"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import metric_enum_stream_direction_enum as shared_metric_enum_stream_direction_enum
from ..shared import metric_enum_twilio_edge_enum as shared_metric_enum_twilio_edge_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsightsV1CallMetric:
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})  
    call_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_sid'), 'exclude': lambda f: f is None }})  
    carrier_edge: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_edge'), 'exclude': lambda f: f is None }})  
    client_edge: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_edge'), 'exclude': lambda f: f is None }})  
    direction: Optional[shared_metric_enum_stream_direction_enum.MetricEnumStreamDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})  
    edge: Optional[shared_metric_enum_twilio_edge_enum.MetricEnumTwilioEdgeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edge'), 'exclude': lambda f: f is None }})  
    sdk_edge: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdk_edge'), 'exclude': lambda f: f is None }})  
    sip_edge: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sip_edge'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    