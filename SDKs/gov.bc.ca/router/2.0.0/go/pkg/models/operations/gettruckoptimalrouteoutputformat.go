// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetTruckOptimalRouteOutputFormatCriteriaEnum - Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
type GetTruckOptimalRouteOutputFormatCriteriaEnum string

const (
	GetTruckOptimalRouteOutputFormatCriteriaEnumShortest GetTruckOptimalRouteOutputFormatCriteriaEnum = "shortest"
	GetTruckOptimalRouteOutputFormatCriteriaEnumFastest  GetTruckOptimalRouteOutputFormatCriteriaEnum = "fastest"
)

func (e GetTruckOptimalRouteOutputFormatCriteriaEnum) ToPointer() *GetTruckOptimalRouteOutputFormatCriteriaEnum {
	return &e
}

func (e *GetTruckOptimalRouteOutputFormatCriteriaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shortest":
		fallthrough
	case "fastest":
		*e = GetTruckOptimalRouteOutputFormatCriteriaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTruckOptimalRouteOutputFormatCriteriaEnum: %v", v)
	}
}

// GetTruckOptimalRouteOutputFormatDistanceUnitEnum - distance unit of measure (e.g., km, mi). Default is km.
type GetTruckOptimalRouteOutputFormatDistanceUnitEnum string

const (
	GetTruckOptimalRouteOutputFormatDistanceUnitEnumKm GetTruckOptimalRouteOutputFormatDistanceUnitEnum = "km"
	GetTruckOptimalRouteOutputFormatDistanceUnitEnumMi GetTruckOptimalRouteOutputFormatDistanceUnitEnum = "mi"
)

func (e GetTruckOptimalRouteOutputFormatDistanceUnitEnum) ToPointer() *GetTruckOptimalRouteOutputFormatDistanceUnitEnum {
	return &e
}

func (e *GetTruckOptimalRouteOutputFormatDistanceUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "km":
		fallthrough
	case "mi":
		*e = GetTruckOptimalRouteOutputFormatDistanceUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTruckOptimalRouteOutputFormatDistanceUnitEnum: %v", v)
	}
}

// GetTruckOptimalRouteOutputFormatOutputFormatEnum - Format of representation
type GetTruckOptimalRouteOutputFormatOutputFormatEnum string

const (
	GetTruckOptimalRouteOutputFormatOutputFormatEnumJSON GetTruckOptimalRouteOutputFormatOutputFormatEnum = "json"
	GetTruckOptimalRouteOutputFormatOutputFormatEnumKml  GetTruckOptimalRouteOutputFormatOutputFormatEnum = "kml"
	GetTruckOptimalRouteOutputFormatOutputFormatEnumHTML GetTruckOptimalRouteOutputFormatOutputFormatEnum = "html"
)

func (e GetTruckOptimalRouteOutputFormatOutputFormatEnum) ToPointer() *GetTruckOptimalRouteOutputFormatOutputFormatEnum {
	return &e
}

func (e *GetTruckOptimalRouteOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "kml":
		fallthrough
	case "html":
		*e = GetTruckOptimalRouteOutputFormatOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTruckOptimalRouteOutputFormatOutputFormatEnum: %v", v)
	}
}

// GetTruckOptimalRouteOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetTruckOptimalRouteOutputFormatOutputSrsEnum int64

const (
	GetTruckOptimalRouteOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetTruckOptimalRouteOutputFormatOutputSrsEnum = 4326
	GetTruckOptimalRouteOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetTruckOptimalRouteOutputFormatOutputSrsEnum = 4269
	GetTruckOptimalRouteOutputFormatOutputSrsEnumThreeThousandAndFive                  GetTruckOptimalRouteOutputFormatOutputSrsEnum = 3005
	GetTruckOptimalRouteOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetTruckOptimalRouteOutputFormatOutputSrsEnum = 26907
	GetTruckOptimalRouteOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetTruckOptimalRouteOutputFormatOutputSrsEnum = 26908
	GetTruckOptimalRouteOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetTruckOptimalRouteOutputFormatOutputSrsEnum = 26909
	GetTruckOptimalRouteOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetTruckOptimalRouteOutputFormatOutputSrsEnum = 26910
	GetTruckOptimalRouteOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetTruckOptimalRouteOutputFormatOutputSrsEnum = 26911
)

func (e GetTruckOptimalRouteOutputFormatOutputSrsEnum) ToPointer() *GetTruckOptimalRouteOutputFormatOutputSrsEnum {
	return &e
}

func (e *GetTruckOptimalRouteOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetTruckOptimalRouteOutputFormatOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTruckOptimalRouteOutputFormatOutputSrsEnum: %v", v)
	}
}

type GetTruckOptimalRouteOutputFormatRequest struct {
	// If true, route starts and ends on same side of road as start and end points.Default is false.
	CorrectSide *bool `queryParam:"style=form,explode=true,name=correctSide"`
	// Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
	Criteria *GetTruckOptimalRouteOutputFormatCriteriaEnum `queryParam:"style=form,explode=true,name=criteria"`
	// departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
	Departure *time.Time `queryParam:"style=form,explode=true,name=departure"`
	// A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
	Disable *string `queryParam:"style=form,explode=true,name=disable"`
	// distance unit of measure (e.g., km, mi). Default is km.
	DistanceUnit *GetTruckOptimalRouteOutputFormatDistanceUnitEnum `queryParam:"style=form,explode=true,name=distanceUnit"`
	// Format of representation
	OutputFormat GetTruckOptimalRouteOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *GetTruckOptimalRouteOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
	Partition *string `queryParam:"style=form,explode=true,name=partition"`
	// A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
	Points string `queryParam:"style=form,explode=true,name=points"`
	// If true, route ends at start point. Default is false.
	RoundTrip *bool `queryParam:"style=form,explode=true,name=roundTrip"`
	// Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
	RouteDescription *string `queryParam:"style=form,explode=true,name=routeDescription"`
	// The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
	TruckRouteMultiplier *int64 `queryParam:"style=form,explode=true,name=truckRouteMultiplier"`
}

type GetTruckOptimalRouteOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
