"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import launchgroupconfig as shared_launchgroupconfig
from ..shared import metricmonitorconfig as shared_metricmonitorconfig
from ..shared import scheduledsplitconfig as shared_scheduledsplitconfig
from ..shared import updatelaunchresponse as shared_updatelaunchresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchRequestBodyScheduledSplitsConfig:
    r"""An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step."""
    
    steps: Optional[list[shared_scheduledsplitconfig.ScheduledSplitConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchRequestBody:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""An optional description for the launch."""  
    groups: Optional[list[shared_launchgroupconfig.LaunchGroupConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    r"""An array of structures that contains the feature and variations that are to be used for the launch."""  
    metric_monitors: Optional[list[shared_metricmonitorconfig.MetricMonitorConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricMonitors'), 'exclude': lambda f: f is None }})
    r"""An array of structures that define the metrics that will be used to monitor the launch performance."""  
    randomization_salt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('randomizationSalt'), 'exclude': lambda f: f is None }})
    r"""When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>."""  
    scheduled_splits_config: Optional[UpdateLaunchRequestBodyScheduledSplitsConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledSplitsConfig'), 'exclude': lambda f: f is None }})
    r"""An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step."""  
    

@dataclasses.dataclass
class UpdateLaunchRequest:
    
    launch: str = dataclasses.field(metadata={'path_param': { 'field_name': 'launch', 'style': 'simple', 'explode': False }})
    r"""The name of the launch that is to be updated."""  
    project: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project', 'style': 'simple', 'explode': False }})
    r"""The name or ARN of the project that contains the launch that you want to update."""  
    request_body: UpdateLaunchRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateLaunchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_launch_response: Optional[shared_updatelaunchresponse.UpdateLaunchResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    