/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Ephemeris data.
 */
export class CreateEphemerisRequestBodyEphemeris extends SpeakeasyBase {
  /**
   * Ephemeris data in Orbit Ephemeris Message (OEM) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oem" })
  @Type(() => shared.OEMEphemeris)
  oem?: shared.OEMEphemeris;

  /**
   * Two-line element set (TLE) ephemeris.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tle" })
  @Type(() => shared.TLEEphemeris)
  tle?: shared.TLEEphemeris;
}

export class CreateEphemerisRequestBody extends SpeakeasyBase {
  /**
   * <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p> <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Ephemeris data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ephemeris" })
  @Type(() => CreateEphemerisRequestBodyEphemeris)
  ephemeris?: CreateEphemerisRequestBodyEphemeris;

  /**
   * An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationTime?: Date;

  /**
   * The ARN of a KMS key used to encrypt the ephemeris in Ground Station.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyArn" })
  kmsKeyArn?: string;

  /**
   * A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  /**
   * AWS Ground Station satellite ID for this ephemeris.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "satelliteId" })
  satelliteId: string;

  /**
   * Tags assigned to an ephemeris.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateEphemerisRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateEphemerisRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateEphemerisResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyException
   */
  @SpeakeasyMetadata()
  dependencyException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  ephemerisIdResponse?: shared.EphemerisIdResponse;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;
}
