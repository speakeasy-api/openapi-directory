/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SslConfigTemplate - Ssl config details of a connector version
 */
public class SslConfigTemplate {
    /**
     * Any additional fields that need to be rendered
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalVariables")
    public ConfigVariableTemplate[] additionalVariables;

    public SslConfigTemplate withAdditionalVariables(ConfigVariableTemplate[] additionalVariables) {
        this.additionalVariables = additionalVariables;
        return this;
    }
    
    /**
     * List of supported Client Cert Types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertType")
    public SslConfigTemplateClientCertTypeEnum[] clientCertType;

    public SslConfigTemplate withClientCertType(SslConfigTemplateClientCertTypeEnum[] clientCertType) {
        this.clientCertType = clientCertType;
        return this;
    }
    
    /**
     * Boolean for determining if the connector version mandates TLS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isTlsMandatory")
    public Boolean isTlsMandatory;

    public SslConfigTemplate withIsTlsMandatory(Boolean isTlsMandatory) {
        this.isTlsMandatory = isTlsMandatory;
        return this;
    }
    
    /**
     * List of supported Server Cert Types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverCertType")
    public SslConfigTemplateServerCertTypeEnum[] serverCertType;

    public SslConfigTemplate withServerCertType(SslConfigTemplateServerCertTypeEnum[] serverCertType) {
        this.serverCertType = serverCertType;
        return this;
    }
    
    /**
     * Controls the ssl type for the given connector version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslType")
    public SslConfigTemplateSslTypeEnum sslType;

    public SslConfigTemplate withSslType(SslConfigTemplateSslTypeEnum sslType) {
        this.sslType = sslType;
        return this;
    }
    
    public SslConfigTemplate(){}
}
