"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class FreightValues:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_update_freight_values(self, request: operations.CreateUpdateFreightValuesRequest) -> operations.CreateUpdateFreightValuesResponse:
        r"""Create/update freight values
        Creates or updates the freight values of your store's carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateUpdateFreightValuesRequest, base_url, '/api/logistics/pvt/configuration/freights/{carrierId}/values/update', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUpdateFreightValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def freight_values(self, request: operations.FreightValuesRequest) -> operations.FreightValuesResponse:
        r"""List freight values
        Lists freight values apointed to your store's carriers, searching by carrier ID and postal code (`cep`).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FreightValuesRequest, base_url, '/api/logistics/pvt/configuration/freights/{carrierId}/{cep}/values', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FreightValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.FreightValues200ApplicationJSON]])
                res.freight_values_200_application_json_objects = out

        return res

    