// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type LicenseInfoSeatsType string

const (
	LicenseInfoSeatsTypeStr     LicenseInfoSeatsType = "str"
	LicenseInfoSeatsTypeInteger LicenseInfoSeatsType = "integer"
)

type LicenseInfoSeats struct {
	Str     *string
	Integer *int64

	Type LicenseInfoSeatsType
}

func CreateLicenseInfoSeatsStr(str string) LicenseInfoSeats {
	typ := LicenseInfoSeatsTypeStr

	return LicenseInfoSeats{
		Str:  &str,
		Type: typ,
	}
}

func CreateLicenseInfoSeatsInteger(integer int64) LicenseInfoSeats {
	typ := LicenseInfoSeatsTypeInteger

	return LicenseInfoSeats{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *LicenseInfoSeats) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = LicenseInfoSeatsTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = LicenseInfoSeatsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LicenseInfoSeats) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type LicenseInfoSeatsAvailableType string

const (
	LicenseInfoSeatsAvailableTypeStr     LicenseInfoSeatsAvailableType = "str"
	LicenseInfoSeatsAvailableTypeInteger LicenseInfoSeatsAvailableType = "integer"
)

type LicenseInfoSeatsAvailable struct {
	Str     *string
	Integer *int64

	Type LicenseInfoSeatsAvailableType
}

func CreateLicenseInfoSeatsAvailableStr(str string) LicenseInfoSeatsAvailable {
	typ := LicenseInfoSeatsAvailableTypeStr

	return LicenseInfoSeatsAvailable{
		Str:  &str,
		Type: typ,
	}
}

func CreateLicenseInfoSeatsAvailableInteger(integer int64) LicenseInfoSeatsAvailable {
	typ := LicenseInfoSeatsAvailableTypeInteger

	return LicenseInfoSeatsAvailable{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *LicenseInfoSeatsAvailable) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = LicenseInfoSeatsAvailableTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = LicenseInfoSeatsAvailableTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LicenseInfoSeatsAvailable) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

// LicenseInfo - Response
type LicenseInfo struct {
	DaysUntilExpiration *int64                     `json:"days_until_expiration,omitempty"`
	ExpireAt            *string                    `json:"expire_at,omitempty"`
	Kind                *string                    `json:"kind,omitempty"`
	Seats               *LicenseInfoSeats          `json:"seats,omitempty"`
	SeatsAvailable      *LicenseInfoSeatsAvailable `json:"seats_available,omitempty"`
	SeatsUsed           *int64                     `json:"seats_used,omitempty"`
}
