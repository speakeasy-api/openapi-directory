// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SweepConfigurationV2ScheduleType string

const (
	SweepConfigurationV2ScheduleTypeCronSweepSchedule SweepConfigurationV2ScheduleType = "CronSweepSchedule"
	SweepConfigurationV2ScheduleTypeSweepSchedule     SweepConfigurationV2ScheduleType = "SweepSchedule"
)

type SweepConfigurationV2Schedule struct {
	CronSweepSchedule *CronSweepSchedule
	SweepSchedule     *SweepSchedule

	Type SweepConfigurationV2ScheduleType
}

func CreateSweepConfigurationV2ScheduleCronSweepSchedule(cronSweepSchedule CronSweepSchedule) SweepConfigurationV2Schedule {
	typ := SweepConfigurationV2ScheduleTypeCronSweepSchedule

	return SweepConfigurationV2Schedule{
		CronSweepSchedule: &cronSweepSchedule,
		Type:              typ,
	}
}

func CreateSweepConfigurationV2ScheduleSweepSchedule(sweepSchedule SweepSchedule) SweepConfigurationV2Schedule {
	typ := SweepConfigurationV2ScheduleTypeSweepSchedule

	return SweepConfigurationV2Schedule{
		SweepSchedule: &sweepSchedule,
		Type:          typ,
	}
}

func (u *SweepConfigurationV2Schedule) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cronSweepSchedule := new(CronSweepSchedule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cronSweepSchedule); err == nil {
		u.CronSweepSchedule = cronSweepSchedule
		u.Type = SweepConfigurationV2ScheduleTypeCronSweepSchedule
		return nil
	}

	sweepSchedule := new(SweepSchedule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sweepSchedule); err == nil {
		u.SweepSchedule = sweepSchedule
		u.Type = SweepConfigurationV2ScheduleTypeSweepSchedule
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SweepConfigurationV2Schedule) MarshalJSON() ([]byte, error) {
	if u.CronSweepSchedule != nil {
		return json.Marshal(u.CronSweepSchedule)
	}

	if u.SweepSchedule != nil {
		return json.Marshal(u.SweepSchedule)
	}

	return nil, nil
}

// SweepConfigurationV2StatusEnum - The status of the sweep. If not provided, by default, this is set to **active**.
//
// Possible values:
//
//   - **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
//
//   - **inactive**: the sweep is disabled and cannot be triggered.
type SweepConfigurationV2StatusEnum string

const (
	SweepConfigurationV2StatusEnumActive   SweepConfigurationV2StatusEnum = "active"
	SweepConfigurationV2StatusEnumInactive SweepConfigurationV2StatusEnum = "inactive"
)

func (e *SweepConfigurationV2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = SweepConfigurationV2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SweepConfigurationV2StatusEnum: %s", s)
	}
}

// SweepConfigurationV2TypeEnum - The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
//
// Possible values:
//
//   - **push**: _push out funds_ to a destination balance account or transfer instrument.
//
//   - **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
type SweepConfigurationV2TypeEnum string

const (
	SweepConfigurationV2TypeEnumPull SweepConfigurationV2TypeEnum = "pull"
	SweepConfigurationV2TypeEnumPush SweepConfigurationV2TypeEnum = "push"
)

func (e *SweepConfigurationV2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pull":
		fallthrough
	case "push":
		*e = SweepConfigurationV2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SweepConfigurationV2TypeEnum: %s", s)
	}
}

type SweepConfigurationV2Input struct {
	Counterparty SweepCounterparty `json:"counterparty"`
	// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
	//
	// The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
	Currency string `json:"currency"`
	// The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
	//
	// If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
	Description *string `json:"description,omitempty"`
	// The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
	Schedule SweepConfigurationV2Schedule `json:"schedule"`
	// The status of the sweep. If not provided, by default, this is set to **active**.
	//
	// Possible values:
	//
	//  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
	//
	//  * **inactive**: the sweep is disabled and cannot be triggered.
	//
	//
	Status        *SweepConfigurationV2StatusEnum `json:"status,omitempty"`
	SweepAmount   *Amount                         `json:"sweepAmount,omitempty"`
	TargetAmount  *Amount                         `json:"targetAmount,omitempty"`
	TriggerAmount *Amount                         `json:"triggerAmount,omitempty"`
	// The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
	//
	// Possible values:
	//
	//  * **push**: _push out funds_ to a destination balance account or transfer instrument.
	//
	//  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
	Type *SweepConfigurationV2TypeEnum `json:"type,omitempty"`
}

// SweepConfigurationV2 - OK - the request has succeeded.
type SweepConfigurationV2 struct {
	Counterparty SweepCounterparty `json:"counterparty"`
	// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
	//
	// The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
	Currency string `json:"currency"`
	// The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
	//
	// If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
	Description *string `json:"description,omitempty"`
	// The unique identifier of the sweep.
	ID string `json:"id"`
	// The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
	Schedule SweepConfigurationV2Schedule `json:"schedule"`
	// The status of the sweep. If not provided, by default, this is set to **active**.
	//
	// Possible values:
	//
	//  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
	//
	//  * **inactive**: the sweep is disabled and cannot be triggered.
	//
	//
	Status        *SweepConfigurationV2StatusEnum `json:"status,omitempty"`
	SweepAmount   *Amount                         `json:"sweepAmount,omitempty"`
	TargetAmount  *Amount                         `json:"targetAmount,omitempty"`
	TriggerAmount *Amount                         `json:"triggerAmount,omitempty"`
	// The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
	//
	// Possible values:
	//
	//  * **push**: _push out funds_ to a destination balance account or transfer instrument.
	//
	//  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
	Type *SweepConfigurationV2TypeEnum `json:"type,omitempty"`
}
