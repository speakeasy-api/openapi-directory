<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Transaction - Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.
 * 
 * 
 * You can use data from the Transactions endpoints to calculate key metrics, such as:  
 * - Transaction volumes  
 * - Average transaction volume  
 * - Average transaction value  
 * - Returns  
 * - Payouts
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-transactions) for this data type.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Transaction
{
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $createdDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('createdDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdDate = null;
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     * 
     * @var ?string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $currency = null;
    
    /**
     * A unique, persistent identifier for this record
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $modifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $modifiedDate = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $sourceCreatedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceCreatedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceCreatedDate = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $sourceModifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceModifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceModifiedDate = null;
    
    /**
     * Non-standardised transaction type data from the commerce platform
     * 
     * @var ?string $subType
     */
	#[\JMS\Serializer\Annotation\SerializedName('subType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subType = null;
    
    /**
     * The total transaction amount
     * 
     * @var ?float $totalAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalAmount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $totalAmount = null;
    
    /**
     * Link to the source event which triggered this transaction
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionSourceRef $transactionSourceRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionSourceRef')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionSourceRef')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionSourceRef $transactionSourceRef = null;
    
    /**
     * The type of the platform transaction:  
     * 
     * - `Unknown`  
     * - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.  
     * - `Payment` — Credit and debit card payments.  
     * - `PaymentFee` — Payment provider's fee on each card payment.  
     * - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.  
     * - `Payout` — Transfer of funds from the seller's merchant account to their bank account.  
     * - `Refund` — Refunds to a customer's credit or debit card.  
     * - `Transfer` — Secure transfer of funds to the seller's bank account.  
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionTypeEnum $type = null;
    
	public function __construct()
	{
		$this->createdDate = null;
		$this->currency = null;
		$this->id = "";
		$this->modifiedDate = null;
		$this->sourceCreatedDate = null;
		$this->sourceModifiedDate = null;
		$this->subType = null;
		$this->totalAmount = null;
		$this->transactionSourceRef = null;
		$this->type = null;
	}
}
