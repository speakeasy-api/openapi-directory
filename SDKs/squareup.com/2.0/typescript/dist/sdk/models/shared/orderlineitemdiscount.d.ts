import { SpeakeasyBase } from "../../../internal/utils";
import { Money } from "./money";
/**
 * Represents a discount that applies to one or more line items in an
 *
 * @remarks
 * order.
 *
 * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
 * The amount distributed to each line item is relative to the
 * amount contributed by the item to the order subtotal.
 */
export declare class OrderLineItemDiscount extends SpeakeasyBase {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     *
     * @remarks
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    amountMoney?: Money;
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     *
     * @remarks
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    appliedMoney?: Money;
    /**
     * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
     */
    catalogObjectId?: string;
    /**
     * The version of the catalog object that this discount references.
     */
    catalogVersion?: number;
    /**
     * Application-defined data attached to this discount. Metadata fields are intended
     *
     * @remarks
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     *
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     *
     * Values have a maximum length of 255 characters.
     *
     * An application can have up to 10 entries per metadata field.
     *
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     *
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    metadata?: Record<string, string>;
    /**
     * The discount's name.
     */
    name?: string;
    /**
     * The percentage of the discount, as a string representation of a decimal number.
     *
     * @remarks
     * A value of `7.25` corresponds to a percentage of 7.25%.
     *
     * `percentage` is not set for amount-based discounts.
     */
    percentage?: string;
    /**
     * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied
     *
     * @remarks
     * automatically to this discount. The specification and application of the discounts, to
     * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding
     * pricing rule.
     */
    pricingRuleId?: string;
    /**
     * The reward IDs corresponding to this discount. The application and
     *
     * @remarks
     * specification of discounts that have `reward_ids` are completely controlled by the backing
     * criteria corresponding to the reward tiers of the rewards that are added to the order
     * through the Loyalty API. To manually unapply discounts that are the result of added rewards,
     * the rewards must be removed from the order through the Loyalty API.
     */
    rewardIds?: string[];
    /**
     * Indicates the level at which the discount applies. For `ORDER` scoped discounts,
     *
     * @remarks
     * Square generates references in `applied_discounts` on all order line items that do
     * not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
     * with a discount reference in their `applied_discounts` field.
     *
     * This field is immutable. To change the scope of a discount, you must delete
     * the discount and re-add it as a new discount.
     */
    scope?: string;
    /**
     * The type of the discount.
     *
     * @remarks
     *
     * Discounts that do not reference a catalog object ID must have a type of
     * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
     */
    type?: string;
    /**
     * A unique ID that identifies the discount only within this order.
     */
    uid?: string;
}
