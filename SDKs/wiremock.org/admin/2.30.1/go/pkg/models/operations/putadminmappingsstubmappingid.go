// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PutAdminMappingsStubMappingIDPathParams struct {
	// The UUID of stub mapping
	StubMappingID string `pathParam:"style=simple,explode=false,name=stubMappingId"`
}

// PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PutAdminMappingsStubMappingIDRequestBodyRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnumEmptyResponse          PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnumUniform PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum = "uniform"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingIDRequestBodyResponseUniform - Uniformly distributed random response delay.
type PutAdminMappingsStubMappingIDRequestBodyResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingIDRequestBodyResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                         `json:"transformers,omitempty"`
	Type         *PutAdminMappingsStubMappingIDRequestBodyResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                                           `json:"upper,omitempty"`
}

// PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnumEmptyResponse          PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnumLognormal PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum = "lognormal"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal - Log normal randomly distributed response delay.
type PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                           `json:"transformers,omitempty"`
	Type         *PutAdminMappingsStubMappingIDRequestBodyResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type PutAdminMappingsStubMappingIDRequestBodyResponseType string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseLogNormal PutAdminMappingsStubMappingIDRequestBodyResponseType = "put_/__admin/mappings/{stubMappingId}_requestBody_response_Log normal"
	PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseUniform   PutAdminMappingsStubMappingIDRequestBodyResponseType = "put_/__admin/mappings/{stubMappingId}_requestBody_response_Uniform"
)

type PutAdminMappingsStubMappingIDRequestBodyResponse struct {
	PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal *PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal
	PutAdminMappingsStubMappingIDRequestBodyResponseUniform   *PutAdminMappingsStubMappingIDRequestBodyResponseUniform

	Type PutAdminMappingsStubMappingIDRequestBodyResponseType
}

func CreatePutAdminMappingsStubMappingIDRequestBodyResponsePutAdminMappingsStubMappingIDRequestBodyResponseLogNormal(putAdminMappingsStubMappingIDRequestBodyResponseLogNormal PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal) PutAdminMappingsStubMappingIDRequestBodyResponse {
	typ := PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseLogNormal

	return PutAdminMappingsStubMappingIDRequestBodyResponse{
		PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal: &putAdminMappingsStubMappingIDRequestBodyResponseLogNormal,
		Type: typ,
	}
}

func CreatePutAdminMappingsStubMappingIDRequestBodyResponsePutAdminMappingsStubMappingIDRequestBodyResponseUniform(putAdminMappingsStubMappingIDRequestBodyResponseUniform PutAdminMappingsStubMappingIDRequestBodyResponseUniform) PutAdminMappingsStubMappingIDRequestBodyResponse {
	typ := PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseUniform

	return PutAdminMappingsStubMappingIDRequestBodyResponse{
		PutAdminMappingsStubMappingIDRequestBodyResponseUniform: &putAdminMappingsStubMappingIDRequestBodyResponseUniform,
		Type: typ,
	}
}

func (u *PutAdminMappingsStubMappingIDRequestBodyResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	putAdminMappingsStubMappingIDRequestBodyResponseLogNormal := new(PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingIDRequestBodyResponseLogNormal); err == nil {
		u.PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal = putAdminMappingsStubMappingIDRequestBodyResponseLogNormal
		u.Type = PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseLogNormal
		return nil
	}

	putAdminMappingsStubMappingIDRequestBodyResponseUniform := new(PutAdminMappingsStubMappingIDRequestBodyResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingIDRequestBodyResponseUniform); err == nil {
		u.PutAdminMappingsStubMappingIDRequestBodyResponseUniform = putAdminMappingsStubMappingIDRequestBodyResponseUniform
		u.Type = PutAdminMappingsStubMappingIDRequestBodyResponseTypePutAdminMappingsStubMappingIDRequestBodyResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PutAdminMappingsStubMappingIDRequestBodyResponse) MarshalJSON() ([]byte, error) {
	if u.PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingIDRequestBodyResponseLogNormal)
	}

	if u.PutAdminMappingsStubMappingIDRequestBodyResponseUniform != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingIDRequestBodyResponseUniform)
	}

	return nil, nil
}

type PutAdminMappingsStubMappingIDRequestBody struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                           `json:"priority,omitempty"`
	Request  *PutAdminMappingsStubMappingIDRequestBodyRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                           `json:"requiredScenarioState,omitempty"`
	Response              *PutAdminMappingsStubMappingIDRequestBodyResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PutAdminMappingsStubMappingIDRequest struct {
	PathParams PutAdminMappingsStubMappingIDPathParams
	Request    *PutAdminMappingsStubMappingIDRequestBody `request:"mediaType=application/json"`
}

// PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnumEmptyResponse          PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnumUniform PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum = "uniform"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform - Uniformly distributed random response delay.
type PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                                `json:"transformers,omitempty"`
	Type         *PutAdminMappingsStubMappingID200ApplicationJSONResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                                                  `json:"upper,omitempty"`
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnumEmptyResponse          PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnumLognormal PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum = "lognormal"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal - Log normal randomly distributed response delay.
type PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                                  `json:"transformers,omitempty"`
	Type         *PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseType string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal PutAdminMappingsStubMappingID200ApplicationJSONResponseType = "put_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_Log normal"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseUniform   PutAdminMappingsStubMappingID200ApplicationJSONResponseType = "put_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_Uniform"
)

type PutAdminMappingsStubMappingID200ApplicationJSONResponse struct {
	PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal *PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal
	PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform   *PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform

	Type PutAdminMappingsStubMappingID200ApplicationJSONResponseType
}

func CreatePutAdminMappingsStubMappingID200ApplicationJSONResponsePutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal(putAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal) PutAdminMappingsStubMappingID200ApplicationJSONResponse {
	typ := PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal

	return PutAdminMappingsStubMappingID200ApplicationJSONResponse{
		PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal: &putAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal,
		Type: typ,
	}
}

func CreatePutAdminMappingsStubMappingID200ApplicationJSONResponsePutAdminMappingsStubMappingID200ApplicationJSONResponseUniform(putAdminMappingsStubMappingID200ApplicationJSONResponseUniform PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform) PutAdminMappingsStubMappingID200ApplicationJSONResponse {
	typ := PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseUniform

	return PutAdminMappingsStubMappingID200ApplicationJSONResponse{
		PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform: &putAdminMappingsStubMappingID200ApplicationJSONResponseUniform,
		Type: typ,
	}
}

func (u *PutAdminMappingsStubMappingID200ApplicationJSONResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	putAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal := new(PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal); err == nil {
		u.PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal = putAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal
		u.Type = PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal
		return nil
	}

	putAdminMappingsStubMappingID200ApplicationJSONResponseUniform := new(PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingID200ApplicationJSONResponseUniform); err == nil {
		u.PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform = putAdminMappingsStubMappingID200ApplicationJSONResponseUniform
		u.Type = PutAdminMappingsStubMappingID200ApplicationJSONResponseTypePutAdminMappingsStubMappingID200ApplicationJSONResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PutAdminMappingsStubMappingID200ApplicationJSONResponse) MarshalJSON() ([]byte, error) {
	if u.PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingID200ApplicationJSONResponseLogNormal)
	}

	if u.PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingID200ApplicationJSONResponseUniform)
	}

	return nil, nil
}

// PutAdminMappingsStubMappingID200ApplicationJSON - The stub mapping
type PutAdminMappingsStubMappingID200ApplicationJSON struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                                  `json:"priority,omitempty"`
	Request  *PutAdminMappingsStubMappingID200ApplicationJSONRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                                  `json:"requiredScenarioState,omitempty"`
	Response              *PutAdminMappingsStubMappingID200ApplicationJSONResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PutAdminMappingsStubMappingIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The stub mapping
	PutAdminMappingsStubMappingID200ApplicationJSONObject *PutAdminMappingsStubMappingID200ApplicationJSON
}
