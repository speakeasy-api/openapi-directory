<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * FullRepository - Full Repository
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class FullRepository
{
	#[\JMS\Serializer\Annotation\SerializedName('allow_auto_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowAutoMerge = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('allow_forking')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowForking = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('allow_merge_commit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowMergeCommit = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('allow_rebase_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowRebaseMerge = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('allow_squash_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowSquashMerge = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('allow_update_branch')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowUpdateBranch = null;
    
    /**
     * Whether anonymous git access is allowed.
     * 
     * @var ?bool $anonymousAccessEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('anonymous_access_enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $anonymousAccessEnabled = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('archive_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $archiveUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('archived')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $archived;
    
	#[\JMS\Serializer\Annotation\SerializedName('assignees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $assigneesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('blobs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $blobsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('branches_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $branchesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('clone_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $cloneUrl;
    
    /**
     * Code of Conduct Simple
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CodeOfConductSimple $codeOfConduct
     */
	#[\JMS\Serializer\Annotation\SerializedName('code_of_conduct')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CodeOfConductSimple')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CodeOfConductSimple $codeOfConduct = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('collaborators_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $collaboratorsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('comments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('compare_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $compareUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('contents_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('contributors_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contributorsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('default_branch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $defaultBranch;
    
	#[\JMS\Serializer\Annotation\SerializedName('delete_branch_on_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deleteBranchOnMerge = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('deployments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $deploymentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * Returns whether or not this repository disabled.
     * 
     * @var bool $disabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('disabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $disabled;
    
	#[\JMS\Serializer\Annotation\SerializedName('downloads_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $downloadsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('fork')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $fork;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $forks;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $forksCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $forksUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('full_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $fullName;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitCommitsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_refs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitRefsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitTagsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_downloads')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasDownloads;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_issues')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasIssues;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_pages')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasPages;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_projects')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasProjects;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_wiki')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasWiki;
    
	#[\JMS\Serializer\Annotation\SerializedName('homepage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $homepage;
    
	#[\JMS\Serializer\Annotation\SerializedName('hooks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hooksUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('html_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $htmlUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
	#[\JMS\Serializer\Annotation\SerializedName('is_template')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTemplate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('issue_comment_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueCommentUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('issue_events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueEventsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('issues_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issuesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('keys_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $keysUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('labels_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $labelsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('language')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $language;
    
	#[\JMS\Serializer\Annotation\SerializedName('languages_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $languagesUrl;
    
    /**
     * License Simple
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple $license
     */
	#[\JMS\Serializer\Annotation\SerializedName('license')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple')]
    public NullableLicenseSimple $license;
    
	#[\JMS\Serializer\Annotation\SerializedName('master_branch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $masterBranch = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('merges_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mergesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('milestones_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $milestonesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('mirror_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mirrorUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
	#[\JMS\Serializer\Annotation\SerializedName('network_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $networkCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('node_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeId;
    
	#[\JMS\Serializer\Annotation\SerializedName('notifications_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $notificationsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('open_issues')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $openIssues;
    
	#[\JMS\Serializer\Annotation\SerializedName('open_issues_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $openIssuesCount;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $organization
     */
	#[\JMS\Serializer\Annotation\SerializedName('organization')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $organization = null;
    
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SimpleUser $owner
     */
	#[\JMS\Serializer\Annotation\SerializedName('owner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleUser')]
    public SimpleUser $owner;
    
    /**
     * A repository on GitHub.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Repository $parent
     */
	#[\JMS\Serializer\Annotation\SerializedName('parent')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Repository')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Repository $parent = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('permissions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\FullRepositoryPermissions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?FullRepositoryPermissions $permissions = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('private')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $private;
    
	#[\JMS\Serializer\Annotation\SerializedName('pulls_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pullsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('pushed_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $pushedAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('releases_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $releasesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('security_and_analysis')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SecurityAndAnalysis')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SecurityAndAnalysis $securityAndAnalysis = null;
    
    /**
     * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
     * 
     * @var int $size
     */
	#[\JMS\Serializer\Annotation\SerializedName('size')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $size;
    
    /**
     * A repository on GitHub.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Repository $source
     */
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Repository')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Repository $source = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ssh_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sshUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('stargazers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $stargazersCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('stargazers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $stargazersUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('statuses_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $statusesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscribers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $subscribersCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscribers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscribersUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscription_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscriptionUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('svn_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $svnUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tagsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('teams_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $teamsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('temp_clone_token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tempCloneToken = null;
    
    /**
     * A repository on GitHub.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableRepository $templateRepository
     */
	#[\JMS\Serializer\Annotation\SerializedName('template_repository')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableRepository')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepository $templateRepository = null;
    
    /**
     * $topics
     * 
     * @var ?array<string> $topics
     */
	#[\JMS\Serializer\Annotation\SerializedName('topics')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $topics = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('trees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $treesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $updatedAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
    /**
     * The repository visibility: public, private, or internal.
     * 
     * @var ?string $visibility
     */
	#[\JMS\Serializer\Annotation\SerializedName('visibility')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $visibility = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('watchers')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $watchers;
    
	#[\JMS\Serializer\Annotation\SerializedName('watchers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $watchersCount;
    
	public function __construct()
	{
		$this->allowAutoMerge = null;
		$this->allowForking = null;
		$this->allowMergeCommit = null;
		$this->allowRebaseMerge = null;
		$this->allowSquashMerge = null;
		$this->allowUpdateBranch = null;
		$this->anonymousAccessEnabled = null;
		$this->archiveUrl = "";
		$this->archived = false;
		$this->assigneesUrl = "";
		$this->blobsUrl = "";
		$this->branchesUrl = "";
		$this->cloneUrl = "";
		$this->codeOfConduct = null;
		$this->collaboratorsUrl = "";
		$this->commentsUrl = "";
		$this->commitsUrl = "";
		$this->compareUrl = "";
		$this->contentsUrl = "";
		$this->contributorsUrl = "";
		$this->createdAt = new \DateTime();
		$this->defaultBranch = "";
		$this->deleteBranchOnMerge = null;
		$this->deploymentsUrl = "";
		$this->description = "";
		$this->disabled = false;
		$this->downloadsUrl = "";
		$this->eventsUrl = "";
		$this->fork = false;
		$this->forks = 0;
		$this->forksCount = 0;
		$this->forksUrl = "";
		$this->fullName = "";
		$this->gitCommitsUrl = "";
		$this->gitRefsUrl = "";
		$this->gitTagsUrl = "";
		$this->gitUrl = "";
		$this->hasDownloads = false;
		$this->hasIssues = false;
		$this->hasPages = false;
		$this->hasProjects = false;
		$this->hasWiki = false;
		$this->homepage = "";
		$this->hooksUrl = "";
		$this->htmlUrl = "";
		$this->id = 0;
		$this->isTemplate = null;
		$this->issueCommentUrl = "";
		$this->issueEventsUrl = "";
		$this->issuesUrl = "";
		$this->keysUrl = "";
		$this->labelsUrl = "";
		$this->language = "";
		$this->languagesUrl = "";
		$this->license = new \OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple();
		$this->masterBranch = null;
		$this->mergesUrl = "";
		$this->milestonesUrl = "";
		$this->mirrorUrl = "";
		$this->name = "";
		$this->networkCount = 0;
		$this->nodeId = "";
		$this->notificationsUrl = "";
		$this->openIssues = 0;
		$this->openIssuesCount = 0;
		$this->organization = null;
		$this->owner = new \OpenAPI\OpenAPI\Models\Shared\SimpleUser();
		$this->parent = null;
		$this->permissions = null;
		$this->private = false;
		$this->pullsUrl = "";
		$this->pushedAt = new \DateTime();
		$this->releasesUrl = "";
		$this->securityAndAnalysis = null;
		$this->size = 0;
		$this->source = null;
		$this->sshUrl = "";
		$this->stargazersCount = 0;
		$this->stargazersUrl = "";
		$this->statusesUrl = "";
		$this->subscribersCount = 0;
		$this->subscribersUrl = "";
		$this->subscriptionUrl = "";
		$this->svnUrl = "";
		$this->tagsUrl = "";
		$this->teamsUrl = "";
		$this->tempCloneToken = null;
		$this->templateRepository = null;
		$this->topics = null;
		$this->treesUrl = "";
		$this->updatedAt = new \DateTime();
		$this->url = "";
		$this->visibility = null;
		$this->watchers = 0;
		$this->watchersCount = 0;
	}
}
