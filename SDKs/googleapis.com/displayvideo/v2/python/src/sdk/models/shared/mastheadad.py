"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import youtubevideodetails as shared_youtubevideodetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MastheadAdVideoAspectRatioEnum(str, Enum):
    r"""The aspect ratio of the autoplaying YouTube video on the Masthead."""
    VIDEO_ASPECT_RATIO_UNSPECIFIED = 'VIDEO_ASPECT_RATIO_UNSPECIFIED'
    VIDEO_ASPECT_RATIO_WIDESCREEN = 'VIDEO_ASPECT_RATIO_WIDESCREEN'
    VIDEO_ASPECT_RATIO_FIXED_16_9 = 'VIDEO_ASPECT_RATIO_FIXED_16_9'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MastheadAd:
    r"""Details for a Masthead Ad."""
    
    autoplay_video_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoplayVideoDuration'), 'exclude': lambda f: f is None }})
    r"""The duration of time the video will autoplay."""  
    autoplay_video_start_millisecond: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoplayVideoStartMillisecond'), 'exclude': lambda f: f is None }})
    r"""The amount of time in milliseconds after which the video will start to play."""  
    call_to_action_button_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callToActionButtonLabel'), 'exclude': lambda f: f is None }})
    r"""The text on the call-to-action button."""  
    call_to_action_final_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callToActionFinalUrl'), 'exclude': lambda f: f is None }})
    r"""The destination URL for the call-to-action button."""  
    call_to_action_tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callToActionTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""The tracking URL for the call-to-action button."""  
    companion_youtube_videos: Optional[list[shared_youtubevideodetails.YoutubeVideoDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionYoutubeVideos'), 'exclude': lambda f: f is None }})
    r"""The videos that appear next to the Masthead Ad on desktop. Can be no more than two."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the ad."""  
    headline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headline'), 'exclude': lambda f: f is None }})
    r"""The headline of the ad."""  
    show_channel_art: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showChannelArt'), 'exclude': lambda f: f is None }})
    r"""Whether to show a background or banner that appears at the top of a YouTube page."""  
    video: Optional[shared_youtubevideodetails.YoutubeVideoDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video'), 'exclude': lambda f: f is None }})
    r"""Details of a YouTube video."""  
    video_aspect_ratio: Optional[MastheadAdVideoAspectRatioEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoAspectRatio'), 'exclude': lambda f: f is None }})
    r"""The aspect ratio of the autoplaying YouTube video on the Masthead."""  
    