// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutProjectPolicyXAmzTargetEnum
type PutProjectPolicyXAmzTargetEnum string

const (
	PutProjectPolicyXAmzTargetEnumRekognitionServicePutProjectPolicy PutProjectPolicyXAmzTargetEnum = "RekognitionService.PutProjectPolicy"
)

func (e PutProjectPolicyXAmzTargetEnum) ToPointer() *PutProjectPolicyXAmzTargetEnum {
	return &e
}

func (e *PutProjectPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RekognitionService.PutProjectPolicy":
		*e = PutProjectPolicyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutProjectPolicyXAmzTargetEnum: %v", v)
	}
}

type PutProjectPolicyRequest struct {
	PutProjectPolicyRequest shared.PutProjectPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              PutProjectPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutProjectPolicyResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerError
	InternalServerError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidPolicyRevisionIdException
	InvalidPolicyRevisionIDException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MalformedPolicyDocumentException
	MalformedPolicyDocumentException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// Success
	PutProjectPolicyResponse *shared.PutProjectPolicyResponse
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
