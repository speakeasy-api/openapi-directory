/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Resources that manage image datasets.
 */
export class VisionDatasets {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a Dataset
   *
   * @remarks
   * Creates a dataset and labels, if they're specified.
   */
  createDataset(
    req: operations.CreateDatasetRequestBody,
    security: operations.CreateDatasetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDatasetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDatasetRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/vision/datasets";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDatasetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDatasetResponse =
        new operations.CreateDatasetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataset = utils.objectToClass(httpRes?.data, shared.Dataset);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Dataset
   *
   * @remarks
   * Deletes the specified dataset and associated labels and examples.
   */
  deleteDataset1(
    req: operations.DeleteDataset1Request,
    security: operations.DeleteDataset1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDataset1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDataset1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/vision/datasets/{datasetId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteDataset1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDataset1Response =
        new operations.DeleteDataset1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletionResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeletionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a Dataset
   *
   * @remarks
   * Returns a single dataset.
   */
  getDataset1(
    req: operations.GetDataset1Request,
    security: operations.GetDataset1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDataset1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDataset1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/vision/datasets/{datasetId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDataset1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDataset1Response =
        new operations.GetDataset1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataset = utils.objectToClass(httpRes?.data, shared.Dataset);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Deletion Status
   *
   * @remarks
   * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
   */
  get1(
    req: operations.Get1Request,
    security: operations.Get1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.Get1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Get1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/vision/deletion/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Get1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Get1Response = new operations.Get1Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletionResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeletionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get All Datasets
   *
   * @remarks
   * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
   */
  listDatasets1(
    req: operations.ListDatasets1Request,
    security: operations.ListDatasets1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDatasets1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDatasets1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/vision/datasets";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListDatasets1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDatasets1Response =
        new operations.ListDatasets1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datasetList = utils.objectToClass(
              httpRes?.data,
              shared.DatasetList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Dataset From a Zip File Asynchronously
   *
   * @remarks
   * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
   */
  uploadDatasetAsync1(
    req: operations.UploadDatasetAsync1RequestBody,
    security: operations.UploadDatasetAsync1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.UploadDatasetAsync1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UploadDatasetAsync1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/vision/datasets/upload";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UploadDatasetAsync1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UploadDatasetAsync1Response =
        new operations.UploadDatasetAsync1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataset = utils.objectToClass(httpRes?.data, shared.Dataset);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Dataset From a Zip File Synchronously
   *
   * @remarks
   * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
   */
  uploadDatasetSync1(
    req: operations.UploadDatasetSync1RequestBody,
    security: operations.UploadDatasetSync1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.UploadDatasetSync1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UploadDatasetSync1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/vision/datasets/upload/sync";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UploadDatasetSync1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UploadDatasetSync1Response =
        new operations.UploadDatasetSync1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataset = utils.objectToClass(httpRes?.data, shared.Dataset);
          }
          break;
      }

      return res;
    });
  }
}
