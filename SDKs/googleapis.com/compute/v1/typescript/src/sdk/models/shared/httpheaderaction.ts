/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HttpHeaderOption } from "./httpheaderoption";
import { Expose, Type } from "class-transformer";

/**
 * The request and response header transformations that take effect before the request is passed along to the selected backendService.
 */
export class HttpHeaderAction extends SpeakeasyBase {
  /**
   * Headers to add to a matching request before forwarding the request to the backendService.
   */
  @SpeakeasyMetadata({ elemType: HttpHeaderOption })
  @Expose({ name: "requestHeadersToAdd" })
  @Type(() => HttpHeaderOption)
  requestHeadersToAdd?: HttpHeaderOption[];

  /**
   * A list of header names for headers that need to be removed from the request before forwarding the request to the backendService.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestHeadersToRemove" })
  requestHeadersToRemove?: string[];

  /**
   * Headers to add the response before sending the response back to the client.
   */
  @SpeakeasyMetadata({ elemType: HttpHeaderOption })
  @Expose({ name: "responseHeadersToAdd" })
  @Type(() => HttpHeaderOption)
  responseHeadersToAdd?: HttpHeaderOption[];

  /**
   * A list of header names for headers that need to be removed from the response before sending the response back to the client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseHeadersToRemove" })
  responseHeadersToRemove?: string[];
}
