/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BeezUPCommonExceptionDetail } from "./beezupcommonexceptiondetail";
import { Expose, Transform, Type } from "class-transformer";

export class BeezUPCommonErrorSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "errorArguments" })
  errorArguments?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "errorCode" })
  errorCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorGuid" })
  errorGuid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionDetail" })
  @Type(() => BeezUPCommonExceptionDetail)
  exceptionDetail?: BeezUPCommonExceptionDetail;

  @SpeakeasyMetadata()
  @Expose({ name: "objectName" })
  objectName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "propertyName" })
  propertyName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "propertyValue" })
  propertyValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "technicalErrorMessage" })
  technicalErrorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "utcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  utcDate?: Date;
}
