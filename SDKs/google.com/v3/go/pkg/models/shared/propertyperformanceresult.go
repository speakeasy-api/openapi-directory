// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PropertyPerformanceResultAdvanceBookingWindowEnum - Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.
type PropertyPerformanceResultAdvanceBookingWindowEnum string

const (
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowUnspecified  PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_UNSPECIFIED"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowSameDay      PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_SAME_DAY"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowNextDay      PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_NEXT_DAY"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays2To7     PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays8To14    PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays15To30   PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays31To60   PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays61To90   PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays91To120  PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays121To150 PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDays151To180 PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180"
	PropertyPerformanceResultAdvanceBookingWindowEnumAdvanceBookingWindowDaysOver180  PropertyPerformanceResultAdvanceBookingWindowEnum = "ADVANCE_BOOKING_WINDOW_DAYS_OVER_180"
)

func (e PropertyPerformanceResultAdvanceBookingWindowEnum) ToPointer() *PropertyPerformanceResultAdvanceBookingWindowEnum {
	return &e
}

func (e *PropertyPerformanceResultAdvanceBookingWindowEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADVANCE_BOOKING_WINDOW_UNSPECIFIED":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_SAME_DAY":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_NEXT_DAY":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180":
		fallthrough
	case "ADVANCE_BOOKING_WINDOW_DAYS_OVER_180":
		*e = PropertyPerformanceResultAdvanceBookingWindowEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyPerformanceResultAdvanceBookingWindowEnum: %v", v)
	}
}

// PropertyPerformanceResultDeviceTypeEnum - The userâ€™s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.
type PropertyPerformanceResultDeviceTypeEnum string

const (
	PropertyPerformanceResultDeviceTypeEnumDeviceUnspecified PropertyPerformanceResultDeviceTypeEnum = "DEVICE_UNSPECIFIED"
	PropertyPerformanceResultDeviceTypeEnumDeviceUnknown     PropertyPerformanceResultDeviceTypeEnum = "DEVICE_UNKNOWN"
	PropertyPerformanceResultDeviceTypeEnumDesktop           PropertyPerformanceResultDeviceTypeEnum = "DESKTOP"
	PropertyPerformanceResultDeviceTypeEnumMobile            PropertyPerformanceResultDeviceTypeEnum = "MOBILE"
	PropertyPerformanceResultDeviceTypeEnumTablet            PropertyPerformanceResultDeviceTypeEnum = "TABLET"
)

func (e PropertyPerformanceResultDeviceTypeEnum) ToPointer() *PropertyPerformanceResultDeviceTypeEnum {
	return &e
}

func (e *PropertyPerformanceResultDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEVICE_UNSPECIFIED":
		fallthrough
	case "DEVICE_UNKNOWN":
		fallthrough
	case "DESKTOP":
		fallthrough
	case "MOBILE":
		fallthrough
	case "TABLET":
		*e = PropertyPerformanceResultDeviceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyPerformanceResultDeviceTypeEnum: %v", v)
	}
}

// PropertyPerformanceResultLengthOfStayEnum - Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.
type PropertyPerformanceResultLengthOfStayEnum string

const (
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayUnspecified  PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_UNSPECIFIED"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights1      PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_1"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights2      PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_2"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights3      PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_3"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights4To7   PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_4_TO_7"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights8To14  PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_8_TO_14"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights15To21 PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_15_TO_21"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNights22To30 PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_22_TO_30"
	PropertyPerformanceResultLengthOfStayEnumLengthOfStayNightsOver30 PropertyPerformanceResultLengthOfStayEnum = "LENGTH_OF_STAY_NIGHTS_OVER_30"
)

func (e PropertyPerformanceResultLengthOfStayEnum) ToPointer() *PropertyPerformanceResultLengthOfStayEnum {
	return &e
}

func (e *PropertyPerformanceResultLengthOfStayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LENGTH_OF_STAY_UNSPECIFIED":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_1":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_2":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_3":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_4_TO_7":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_8_TO_14":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_15_TO_21":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_22_TO_30":
		fallthrough
	case "LENGTH_OF_STAY_NIGHTS_OVER_30":
		*e = PropertyPerformanceResultLengthOfStayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyPerformanceResultLengthOfStayEnum: %v", v)
	}
}

// PropertyPerformanceResultOccupancyEnum - Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
type PropertyPerformanceResultOccupancyEnum string

const (
	PropertyPerformanceResultOccupancyEnumOccupancyUnspecified PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_UNSPECIFIED"
	PropertyPerformanceResultOccupancyEnumOccupancy1           PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_1"
	PropertyPerformanceResultOccupancyEnumOccupancy2           PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_2"
	PropertyPerformanceResultOccupancyEnumOccupancy3           PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_3"
	PropertyPerformanceResultOccupancyEnumOccupancy4           PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_4"
	PropertyPerformanceResultOccupancyEnumOccupancyOver4       PropertyPerformanceResultOccupancyEnum = "OCCUPANCY_OVER_4"
)

func (e PropertyPerformanceResultOccupancyEnum) ToPointer() *PropertyPerformanceResultOccupancyEnum {
	return &e
}

func (e *PropertyPerformanceResultOccupancyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OCCUPANCY_UNSPECIFIED":
		fallthrough
	case "OCCUPANCY_1":
		fallthrough
	case "OCCUPANCY_2":
		fallthrough
	case "OCCUPANCY_3":
		fallthrough
	case "OCCUPANCY_4":
		fallthrough
	case "OCCUPANCY_OVER_4":
		*e = PropertyPerformanceResultOccupancyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyPerformanceResultOccupancyEnum: %v", v)
	}
}

// PropertyPerformanceResult - Represents a result from querying for the property performance report for an account.
type PropertyPerformanceResult struct {
	// The total number of ad clicks that were recorded for this result.
	AdsClickCount *string `json:"adsClickCount,omitempty"`
	// Equal to `ads_click_count` divided by `ads_impression_count`.
	AdsClickthroughRate *float64 `json:"adsClickthroughRate,omitempty"`
	// The total number of ad impressions that were recorded for this result.
	AdsImpressionCount *string `json:"adsImpressionCount,omitempty"`
	// Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.
	AdvanceBookingWindow *PropertyPerformanceResultAdvanceBookingWindowEnum `json:"advanceBookingWindow,omitempty"`
	// Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.
	Brand *string `json:"brand,omitempty"`
	// The total number of free booking link clicks that were recorded for this result.
	ClickCount *string `json:"clickCount,omitempty"`
	// Equal to `click_count` divided by `impression_count`.
	ClickthroughRate *float64 `json:"clickthroughRate,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	Date *Date `json:"date,omitempty"`
	// The userâ€™s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.
	DeviceType *PropertyPerformanceResultDeviceTypeEnum `json:"deviceType,omitempty"`
	// Whether the userâ€™s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.
	HighIntentUsers *bool `json:"highIntentUsers,omitempty"`
	// The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.
	ImpressionCount *string `json:"impressionCount,omitempty"`
	// Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.
	LengthOfStay *PropertyPerformanceResultLengthOfStayEnum `json:"lengthOfStay,omitempty"`
	// Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
	Occupancy *PropertyPerformanceResultOccupancyEnum `json:"occupancy,omitempty"`
	// Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.
	PartnerPropertyDisplayName *string `json:"partnerPropertyDisplayName,omitempty"`
	// Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
	PartnerPropertyID *string `json:"partnerPropertyId,omitempty"`
	// ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request
	PropertyRegionCode *string `json:"propertyRegionCode,omitempty"`
	// ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request
	UserRegionCode *string `json:"userRegionCode,omitempty"`
	// The total number of clicks on the "Website" button on Google for vacation rentals.
	VrWebsiteButtonClicks *string `json:"vrWebsiteButtonClicks,omitempty"`
}
