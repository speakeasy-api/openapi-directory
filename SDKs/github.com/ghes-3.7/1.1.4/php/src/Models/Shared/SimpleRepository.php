<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SimpleRepository - A GitHub repository.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SimpleRepository
{
    /**
     * A template for the API URL to download the repository as an archive.
     * 
     * @var string $archiveUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('archive_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $archiveUrl;
    
    /**
     * A template for the API URL to list the available assignees for issues in the repository.
     * 
     * @var string $assigneesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('assignees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $assigneesUrl;
    
    /**
     * A template for the API URL to create or retrieve a raw Git blob in the repository.
     * 
     * @var string $blobsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('blobs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $blobsUrl;
    
    /**
     * A template for the API URL to get information about branches in the repository.
     * 
     * @var string $branchesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('branches_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $branchesUrl;
    
    /**
     * A template for the API URL to get information about collaborators of the repository.
     * 
     * @var string $collaboratorsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('collaborators_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $collaboratorsUrl;
    
    /**
     * A template for the API URL to get information about comments on the repository.
     * 
     * @var string $commentsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('comments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commentsUrl;
    
    /**
     * A template for the API URL to get information about commits on the repository.
     * 
     * @var string $commitsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitsUrl;
    
    /**
     * A template for the API URL to compare two commits or refs.
     * 
     * @var string $compareUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('compare_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $compareUrl;
    
    /**
     * A template for the API URL to get the contents of the repository.
     * 
     * @var string $contentsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('contents_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contentsUrl;
    
    /**
     * A template for the API URL to list the contributors to the repository.
     * 
     * @var string $contributorsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('contributors_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contributorsUrl;
    
    /**
     * The API URL to list the deployments of the repository.
     * 
     * @var string $deploymentsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('deployments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $deploymentsUrl;
    
    /**
     * The repository description.
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * The API URL to list the downloads on the repository.
     * 
     * @var string $downloadsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('downloads_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $downloadsUrl;
    
    /**
     * The API URL to list the events of the repository.
     * 
     * @var string $eventsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventsUrl;
    
    /**
     * Whether the repository is a fork.
     * 
     * @var bool $fork
     */
	#[\JMS\Serializer\Annotation\SerializedName('fork')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $fork;
    
    /**
     * The API URL to list the forks of the repository.
     * 
     * @var string $forksUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('forks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $forksUrl;
    
    /**
     * The full, globally unique, name of the repository.
     * 
     * @var string $fullName
     */
	#[\JMS\Serializer\Annotation\SerializedName('full_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $fullName;
    
    /**
     * A template for the API URL to get information about Git commits of the repository.
     * 
     * @var string $gitCommitsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitCommitsUrl;
    
    /**
     * A template for the API URL to get information about Git refs of the repository.
     * 
     * @var string $gitRefsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_refs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitRefsUrl;
    
    /**
     * A template for the API URL to get information about Git tags of the repository.
     * 
     * @var string $gitTagsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitTagsUrl;
    
    /**
     * The API URL to list the hooks on the repository.
     * 
     * @var string $hooksUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('hooks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hooksUrl;
    
    /**
     * The URL to view the repository on GitHub.com.
     * 
     * @var string $htmlUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('html_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $htmlUrl;
    
    /**
     * A unique identifier of the repository.
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * A template for the API URL to get information about issue comments on the repository.
     * 
     * @var string $issueCommentUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('issue_comment_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueCommentUrl;
    
    /**
     * A template for the API URL to get information about issue events on the repository.
     * 
     * @var string $issueEventsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('issue_events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueEventsUrl;
    
    /**
     * A template for the API URL to get information about issues on the repository.
     * 
     * @var string $issuesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('issues_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issuesUrl;
    
    /**
     * A template for the API URL to get information about deploy keys on the repository.
     * 
     * @var string $keysUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('keys_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $keysUrl;
    
    /**
     * A template for the API URL to get information about labels of the repository.
     * 
     * @var string $labelsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $labelsUrl;
    
    /**
     * The API URL to get information about the languages of the repository.
     * 
     * @var string $languagesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('languages_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $languagesUrl;
    
    /**
     * The API URL to merge branches in the repository.
     * 
     * @var string $mergesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('merges_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mergesUrl;
    
    /**
     * A template for the API URL to get information about milestones of the repository.
     * 
     * @var string $milestonesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('milestones_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $milestonesUrl;
    
    /**
     * The name of the repository.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The GraphQL identifier of the repository.
     * 
     * @var string $nodeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('node_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeId;
    
    /**
     * A template for the API URL to get information about notifications on the repository.
     * 
     * @var string $notificationsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('notifications_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $notificationsUrl;
    
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SimpleUser $owner
     */
	#[\JMS\Serializer\Annotation\SerializedName('owner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleUser')]
    public SimpleUser $owner;
    
    /**
     * Whether the repository is private.
     * 
     * @var bool $private
     */
	#[\JMS\Serializer\Annotation\SerializedName('private')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $private;
    
    /**
     * A template for the API URL to get information about pull requests on the repository.
     * 
     * @var string $pullsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('pulls_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pullsUrl;
    
    /**
     * A template for the API URL to get information about releases on the repository.
     * 
     * @var string $releasesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('releases_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $releasesUrl;
    
    /**
     * The API URL to list the stargazers on the repository.
     * 
     * @var string $stargazersUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('stargazers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $stargazersUrl;
    
    /**
     * A template for the API URL to get information about statuses of a commit.
     * 
     * @var string $statusesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('statuses_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $statusesUrl;
    
    /**
     * The API URL to list the subscribers on the repository.
     * 
     * @var string $subscribersUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('subscribers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscribersUrl;
    
    /**
     * The API URL to subscribe to notifications for this repository.
     * 
     * @var string $subscriptionUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('subscription_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscriptionUrl;
    
    /**
     * The API URL to get information about tags on the repository.
     * 
     * @var string $tagsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tagsUrl;
    
    /**
     * The API URL to list the teams on the repository.
     * 
     * @var string $teamsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('teams_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $teamsUrl;
    
    /**
     * A template for the API URL to create or retrieve a raw Git tree of the repository.
     * 
     * @var string $treesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('trees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $treesUrl;
    
    /**
     * The URL to get more information about the repository from the GitHub API.
     * 
     * @var string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
	public function __construct()
	{
		$this->archiveUrl = "";
		$this->assigneesUrl = "";
		$this->blobsUrl = "";
		$this->branchesUrl = "";
		$this->collaboratorsUrl = "";
		$this->commentsUrl = "";
		$this->commitsUrl = "";
		$this->compareUrl = "";
		$this->contentsUrl = "";
		$this->contributorsUrl = "";
		$this->deploymentsUrl = "";
		$this->description = "";
		$this->downloadsUrl = "";
		$this->eventsUrl = "";
		$this->fork = false;
		$this->forksUrl = "";
		$this->fullName = "";
		$this->gitCommitsUrl = "";
		$this->gitRefsUrl = "";
		$this->gitTagsUrl = "";
		$this->hooksUrl = "";
		$this->htmlUrl = "";
		$this->id = 0;
		$this->issueCommentUrl = "";
		$this->issueEventsUrl = "";
		$this->issuesUrl = "";
		$this->keysUrl = "";
		$this->labelsUrl = "";
		$this->languagesUrl = "";
		$this->mergesUrl = "";
		$this->milestonesUrl = "";
		$this->name = "";
		$this->nodeId = "";
		$this->notificationsUrl = "";
		$this->owner = new \OpenAPI\OpenAPI\Models\Shared\SimpleUser();
		$this->private = false;
		$this->pullsUrl = "";
		$this->releasesUrl = "";
		$this->stargazersUrl = "";
		$this->statusesUrl = "";
		$this->subscribersUrl = "";
		$this->subscriptionUrl = "";
		$this->tagsUrl = "";
		$this->teamsUrl = "";
		$this->treesUrl = "";
		$this->url = "";
	}
}
