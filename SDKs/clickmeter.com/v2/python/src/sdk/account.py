"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Account:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def account_delete_domain_whitelist(self, request: operations.AccountDeleteDomainWhitelistRequest) -> operations.AccountDeleteDomainWhitelistResponse:
        r"""Delete an domain entry"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountDeleteDomainWhitelistRequest, base_url, '/account/domainwhitelist/{whitelistId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountDeleteDomainWhitelistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_delete_guest(self, request: operations.AccountDeleteGuestRequest) -> operations.AccountDeleteGuestResponse:
        r"""Delete a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountDeleteGuestRequest, base_url, '/account/guests/{guestId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountDeleteGuestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_delete_ip_blacklist(self, request: operations.AccountDeleteIPBlacklistRequest) -> operations.AccountDeleteIPBlacklistResponse:
        r"""Delete an ip blacklist entry"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountDeleteIPBlacklistRequest, base_url, '/account/ipblacklist/{blacklistId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountDeleteIPBlacklistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get(self) -> operations.AccountGetResponse:
        r"""Retrieve current account data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_domain_whitelist(self, request: operations.AccountGetDomainWhitelistRequest) -> operations.AccountGetDomainWhitelistResponse:
        r"""Retrieve list of a domains allowed to redirect in DDU mode"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/domainwhitelist'
        
        query_params = utils.get_query_params(operations.AccountGetDomainWhitelistRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetDomainWhitelistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_responses_entities_response_api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_responses_entities_response_api_core_dto_accounting_domain_whitelist_entry = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_guest(self, request: operations.AccountGetGuestRequest) -> operations.AccountGetGuestResponse:
        r"""Retrieve a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountGetGuestRequest, base_url, '/account/guests/{guestId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetGuestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_guests(self, request: operations.AccountGetGuestsRequest) -> operations.AccountGetGuestsResponse:
        r"""Retrieve list of a guest"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/guests'
        
        query_params = utils.get_query_params(operations.AccountGetGuestsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetGuestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_guests_count(self, request: operations.AccountGetGuestsCountRequest) -> operations.AccountGetGuestsCountResponse:
        r"""Retrieve count of guests"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/guests/count'
        
        query_params = utils.get_query_params(operations.AccountGetGuestsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetGuestsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_ip_blacklist(self, request: operations.AccountGetIPBlacklistRequest) -> operations.AccountGetIPBlacklistResponse:
        r"""Retrieve list of a ip to exclude from event tracking"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/ipblacklist'
        
        query_params = utils.get_query_params(operations.AccountGetIPBlacklistRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetIPBlacklistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAccountingIPBlacklistEntry])
                res.api_core_responses_entities_response_api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAccountingIPBlacklistEntry])
                res.api_core_responses_entities_response_api_core_dto_accounting_ip_blacklist_entry = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_permissions(self, request: operations.AccountGetPermissionsRequest) -> operations.AccountGetPermissionsResponse:
        r"""Retrieve permissions for a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountGetPermissionsRequest, base_url, '/account/guests/{guestId}/permissions', request)
        
        query_params = utils.get_query_params(operations.AccountGetPermissionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoGrantsGrant])
                res.api_core_responses_entities_response_api_core_dto_grants_grant = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoGrantsGrant])
                res.api_core_responses_entities_response_api_core_dto_grants_grant = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_permissions_count(self, request: operations.AccountGetPermissionsCountRequest) -> operations.AccountGetPermissionsCountResponse:
        r"""Retrieve count of the permissions for a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountGetPermissionsCountRequest, base_url, '/account/guests/{guestId}/permissions/count', request)
        
        query_params = utils.get_query_params(operations.AccountGetPermissionsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetPermissionsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_get_plan(self) -> operations.AccountGetPlanResponse:
        r"""Retrieve current account plan"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/plan'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountGetPlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingPlan])
                res.api_core_dto_accounting_plan = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingPlan])
                res.api_core_dto_accounting_plan = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_patch_permissions_form(self, request: operations.AccountPatchPermissionsFormRequest) -> operations.AccountPatchPermissionsFormResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPatchPermissionsFormRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_permission_patch_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPatchPermissionsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_patch_permissions_json(self, request: operations.AccountPatchPermissionsJSONRequest) -> operations.AccountPatchPermissionsJSONResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPatchPermissionsJSONRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_permission_patch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPatchPermissionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_patch_permissions_raw(self, request: operations.AccountPatchPermissionsRawRequest) -> operations.AccountPatchPermissionsRawResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPatchPermissionsRawRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPatchPermissionsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_guest_form(self, request: operations.AccountPostGuestFormRequest) -> operations.AccountPostGuestFormResponse:
        r"""Update a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPostGuestFormRequest, base_url, '/account/guests/{guestId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_accounting_guest", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostGuestFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_guest_json(self, request: operations.AccountPostGuestJSONRequest) -> operations.AccountPostGuestJSONResponse:
        r"""Update a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPostGuestJSONRequest, base_url, '/account/guests/{guestId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_accounting_guest", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostGuestJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_guest_raw(self, request: operations.AccountPostGuestRawRequest) -> operations.AccountPostGuestRawResponse:
        r"""Update a guest"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountPostGuestRawRequest, base_url, '/account/guests/{guestId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostGuestRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_form(self, request: shared.APICoreDtoAccountingUser) -> operations.AccountPostFormResponse:
        r"""Update current account data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_json(self, request: shared.APICoreDtoAccountingUser) -> operations.AccountPostJSONResponse:
        r"""Update current account data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_post_raw(self, request: bytes) -> operations.AccountPostRawResponse:
        r"""Update current account data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingUser])
                res.api_core_dto_accounting_user = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_domain_whitelist_form(self, request: shared.APICoreDtoAccountingDomainWhitelistEntry) -> operations.AccountPutDomainWhitelistFormResponse:
        r"""Create an domain entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/domainwhitelist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutDomainWhitelistFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_domain_whitelist_json(self, request: shared.APICoreDtoAccountingDomainWhitelistEntry) -> operations.AccountPutDomainWhitelistJSONResponse:
        r"""Create an domain entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/domainwhitelist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutDomainWhitelistJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_domain_whitelist_raw(self, request: bytes) -> operations.AccountPutDomainWhitelistRawResponse:
        r"""Create an domain entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/domainwhitelist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutDomainWhitelistRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingDomainWhitelistEntry])
                res.api_core_dto_accounting_domain_whitelist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_guest_form(self, request: shared.APICoreDtoAccountingGuest) -> operations.AccountPutGuestFormResponse:
        r"""Create a guest"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/guests'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutGuestFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_guest_json(self, request: shared.APICoreDtoAccountingGuest) -> operations.AccountPutGuestJSONResponse:
        r"""Create a guest"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/guests'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutGuestJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_guest_raw(self, request: bytes) -> operations.AccountPutGuestRawResponse:
        r"""Create a guest"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/guests'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutGuestRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingGuest])
                res.api_core_dto_accounting_guest = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_ip_blacklist_form(self, request: shared.APICoreDtoAccountingIPBlacklistEntry) -> operations.AccountPutIPBlacklistFormResponse:
        r"""Create an ip blacklist entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/ipblacklist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutIPBlacklistFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_ip_blacklist_json(self, request: shared.APICoreDtoAccountingIPBlacklistEntry) -> operations.AccountPutIPBlacklistJSONResponse:
        r"""Create an ip blacklist entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/ipblacklist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutIPBlacklistJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def account_put_ip_blacklist_raw(self, request: bytes) -> operations.AccountPutIPBlacklistRawResponse:
        r"""Create an ip blacklist entry"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/ipblacklist'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountPutIPBlacklistRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAccountingIPBlacklistEntry])
                res.api_core_dto_accounting_ip_blacklist_entry = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def post_account_guests_guest_id_type_permissions_patch_form(self, request: operations.PostAccountGuestsGuestIDTypePermissionsPatchFormRequest) -> operations.PostAccountGuestsGuestIDTypePermissionsPatchFormResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAccountGuestsGuestIDTypePermissionsPatchFormRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_permission_patch_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountGuestsGuestIDTypePermissionsPatchFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def post_account_guests_guest_id_type_permissions_patch_json(self, request: operations.PostAccountGuestsGuestIDTypePermissionsPatchJSONRequest) -> operations.PostAccountGuestsGuestIDTypePermissionsPatchJSONResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAccountGuestsGuestIDTypePermissionsPatchJSONRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_permission_patch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountGuestsGuestIDTypePermissionsPatchJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def post_account_guests_guest_id_type_permissions_patch_raw(self, request: operations.PostAccountGuestsGuestIDTypePermissionsPatchRawRequest) -> operations.PostAccountGuestsGuestIDTypePermissionsPatchRawResponse:
        r"""Change the permission on a shared object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAccountGuestsGuestIDTypePermissionsPatchRawRequest, base_url, '/account/guests/{guestId}/{type}/permissions/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountGuestsGuestIDTypePermissionsPatchRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    