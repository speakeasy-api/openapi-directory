/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetProductsRequest - The request message to get products based on these filters
 */
public class GetProductsRequest {
    /**
     * The catalog category path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryPath")
    public String[] categoryPath;

    public GetProductsRequest withCategoryPath(String[] categoryPath) {
        this.categoryPath = categoryPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnIdList")
    public String[] columnIdList;

    public GetProductsRequest withColumnIdList(String[] columnIdList) {
        this.columnIdList = columnIdList;
        return this;
    }
    
    /**
     * Search for product by ean
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ean")
    public String ean;

    public GetProductsRequest withEan(String ean) {
        this.ean = ean;
        return this;
    }
    
    /**
     * Search for existing products or not. If null you will received both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exists")
    public Boolean exists;

    public GetProductsRequest withExists(Boolean exists) {
        this.exists = exists;
        return this;
    }
    
    /**
     * Search for product by mpn
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mpn")
    public String mpn;

    public GetProductsRequest withMpn(String mpn) {
        this.mpn = mpn;
        return this;
    }
    
    /**
     * The catalog column identifier (catalog or custom column)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderByCatalogColumnId")
    public String orderByCatalogColumnId;

    public GetProductsRequest withOrderByCatalogColumnId(String orderByCatalogColumnId) {
        this.orderByCatalogColumnId = orderByCatalogColumnId;
        return this;
    }
    
    /**
     * Indicates the page number
     */
    @JsonProperty("pageNumber")
    public Integer pageNumber;

    public GetProductsRequest withPageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * Indicate the item count per page
     */
    @JsonProperty("pageSize")
    public Integer pageSize;

    public GetProductsRequest withPageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Filter with a list of product identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productIdList")
    public String[] productIdList;

    public GetProductsRequest withProductIdList(String[] productIdList) {
        this.productIdList = productIdList;
        return this;
    }
    
    /**
     * Search for product by sku
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    public String sku;

    public GetProductsRequest withSku(String sku) {
        this.sku = sku;
        return this;
    }
    
    /**
     * Search for products containing this title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public GetProductsRequest withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Do not retrieve sub categories. By default, this value is set to false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withoutSubCategories")
    public Boolean withoutSubCategories;

    public GetProductsRequest withWithoutSubCategories(Boolean withoutSubCategories) {
        this.withoutSubCategories = withoutSubCategories;
        return this;
    }
    
    public GetProductsRequest(@JsonProperty("pageNumber") Integer pageNumber, @JsonProperty("pageSize") Integer pageSize) {
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
  }
}
