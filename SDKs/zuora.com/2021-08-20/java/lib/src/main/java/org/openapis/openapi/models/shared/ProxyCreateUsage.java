/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProxyCreateUsage - Container for custom fields of a Usage object.
 * 
 */
public class ProxyCreateUsage {
    /**
     *  The ID of the account associated with the usage data. This field is only required if no value is specified for the `AccountNumber` field.
     * **Character limit**: 32 **Values**: a valid account ID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyCreateUsage withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The number of the account associated with the usage data. This field is only required if no value is specified for the `AccountId` field.
     * **Character limit**: 50 **Values**: a valid account number. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountNumber")
    public String accountNumber;
    public ProxyCreateUsage withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     *  The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeId")
    public String chargeId;
    public ProxyCreateUsage withChargeId(String chargeId) {
        this.chargeId = chargeId;
        return this;
    }
    
    /**
     * A unique number for the rate plan charge related to the usage record. For example, C-00000007.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeNumber")
    public String chargeNumber;
    public ProxyCreateUsage withChargeNumber(String chargeNumber) {
        this.chargeNumber = chargeNumber;
        return this;
    }
    
    /**
     * A description of the usage record.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;
    public ProxyCreateUsage withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     *  The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.
     * **Character limit**: 29 **Values**: a valid date and time value. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndDateTime")
    public OffsetDateTime endDateTime;
    public ProxyCreateUsage withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }
    
    /**
     *  Indicates the number of units used.
     * **Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0 
     */
    @JsonProperty("Quantity")
    public Double quantity;
    public ProxyCreateUsage withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     *  The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.
     * **Character limit**: 29 **Values**: a valid date and time value 
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartDateTime")
    public OffsetDateTime startDateTime;
    public ProxyCreateUsage withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }
    
    /**
     *  The date when usage was submitted.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("SubmissionDateTime")
    public OffsetDateTime submissionDateTime;
    public ProxyCreateUsage withSubmissionDateTime(OffsetDateTime submissionDateTime) {
        this.submissionDateTime = submissionDateTime;
        return this;
    }
    
    /**
     * The ID of the subscription that contains the fees related to the usage data.
     * 
     * The ID of a subscription might change when you create amendments to the subscription. It is good practice to use the unique subscription number that you can specify in the `SubscriptionNumber` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscriptionId")
    public String subscriptionId;
    public ProxyCreateUsage withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * The unique identifier number of the subscription that contains the fees related to the usage data.
     * 
     * It is good practice to use this field when creating usage records.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscriptionNumber")
    public String subscriptionNumber;
    public ProxyCreateUsage withSubscriptionNumber(String subscriptionNumber) {
        this.subscriptionNumber = subscriptionNumber;
        return this;
    }
    
    /**
     *  Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
     * **Character limit**: **Values**: a valid unit of measure 
     */
    @JsonProperty("UOM")
    public String uom;
    public ProxyCreateUsage withUom(String uom) {
        this.uom = uom;
        return this;
    }
    
}
