"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressverificationdata as shared_addressverificationdata
from ..shared import emailverificationdata as shared_emailverificationdata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VerificationOptionVerificationMethodEnum(str, Enum):
    r"""Method to verify the location."""
    VERIFICATION_METHOD_UNSPECIFIED = 'VERIFICATION_METHOD_UNSPECIFIED'
    ADDRESS = 'ADDRESS'
    EMAIL = 'EMAIL'
    PHONE_CALL = 'PHONE_CALL'
    SMS = 'SMS'
    AUTO = 'AUTO'
    VETTED_PARTNER = 'VETTED_PARTNER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VerificationOption:
    r"""The verification option represents how to verify the location (indicated by verification method) and where the verification will be sent to (indicated by display data)."""
    
    address_data: Optional[shared_addressverificationdata.AddressVerificationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressData'), 'exclude': lambda f: f is None }})
    r"""Display data for verifications through postcard."""  
    announcement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('announcement'), 'exclude': lambda f: f is None }})
    r"""Set only if the method is VETTED_PARTNER."""  
    email_data: Optional[shared_emailverificationdata.EmailVerificationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailData'), 'exclude': lambda f: f is None }})
    r"""Display data for verifications through email."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""Set only if the method is PHONE_CALL or SMS. Phone number that the PIN will be sent to."""  
    verification_method: Optional[VerificationOptionVerificationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verificationMethod'), 'exclude': lambda f: f is None }})
    r"""Method to verify the location."""  
    