<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Directions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatResponse
     */
	public function getDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/directions.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatResponse
     */
	public function getOptimalDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/optimalDirections.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOptimalDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatResponse
     */
	public function getTruckDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/directions.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatResponse
     */
	public function getTruckOptimalDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/optimalDirections.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatResponse
     */
	public function postDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/directions.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatResponse
     */
	public function postOptimalDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/optimalDirections.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOptimalDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatResponse
     */
	public function postTruckDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/directions.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * 
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatResponse
     */
	public function postTruckOptimalDirectionsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/optimalDirections.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalDirectionsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}