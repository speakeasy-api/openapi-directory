"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudsqlcredential as shared_cloudsqlcredential
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CloudSQLPropertiesTypeEnum(str, Enum):
    r"""Type of the Cloud SQL database."""
    DATABASE_TYPE_UNSPECIFIED = 'DATABASE_TYPE_UNSPECIFIED'
    POSTGRES = 'POSTGRES'
    MYSQL = 'MYSQL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudSQLProperties:
    r"""Connection properties specific to the Cloud SQL."""
    
    credential: Optional[shared_cloudsqlcredential.CloudSQLCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential'), 'exclude': lambda f: f is None }})
    r"""Credential info for the Cloud SQL."""  
    database: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database'), 'exclude': lambda f: f is None }})
    r"""Database name."""  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceId'), 'exclude': lambda f: f is None }})
    r"""Cloud SQL instance ID in the form `project:location:instance`."""  
    service_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountId'), 'exclude': lambda f: f is None }})
    r"""Output only. The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection."""  
    type: Optional[CloudSQLPropertiesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Cloud SQL database."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudSQLPropertiesInput:
    r"""Connection properties specific to the Cloud SQL."""
    
    credential: Optional[shared_cloudsqlcredential.CloudSQLCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential'), 'exclude': lambda f: f is None }})
    r"""Credential info for the Cloud SQL."""  
    database: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database'), 'exclude': lambda f: f is None }})
    r"""Database name."""  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceId'), 'exclude': lambda f: f is None }})
    r"""Cloud SQL instance ID in the form `project:location:instance`."""  
    type: Optional[CloudSQLPropertiesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Cloud SQL database."""  
    