/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Certificate - A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
 */
public class Certificate {
    /**
     * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateDescription")
    public CertificateDescription certificateDescription;
    public Certificate withCertificateDescription(CertificateDescription certificateDescription) {
        this.certificateDescription = certificateDescription;
        return this;
    }
    
    /**
     * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/* /locations/* /certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateTemplate")
    public String certificateTemplate;
    public Certificate withCertificateTemplate(String certificateTemplate) {
        this.certificateTemplate = certificateTemplate;
        return this;
    }
    
    /**
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public CertificateConfig config;
    public Certificate withConfig(CertificateConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Output only. The time at which this Certificate was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Certificate withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The resource name of the issuing CertificateAuthority in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuerCertificateAuthority")
    public String issuerCertificateAuthority;
    public Certificate withIssuerCertificateAuthority(String issuerCertificateAuthority) {
        this.issuerCertificateAuthority = issuerCertificateAuthority;
        return this;
    }
    
    /**
     * Optional. Labels with user-defined metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Certificate withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    public String lifetime;
    public Certificate withLifetime(String lifetime) {
        this.lifetime = lifetime;
        return this;
    }
    
    /**
     * Output only. The resource name for this Certificate in the format `projects/* /locations/* /caPools/* /certificates/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Certificate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCertificate")
    public String pemCertificate;
    public Certificate withPemCertificate(String pemCertificate) {
        this.pemCertificate = pemCertificate;
        return this;
    }
    
    /**
     * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCertificateChain")
    public String[] pemCertificateChain;
    public Certificate withPemCertificateChain(String[] pemCertificateChain) {
        this.pemCertificateChain = pemCertificateChain;
        return this;
    }
    
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCsr")
    public String pemCsr;
    public Certificate withPemCsr(String pemCsr) {
        this.pemCsr = pemCsr;
        return this;
    }
    
    /**
     * Describes fields that are relavent to the revocation of a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revocationDetails")
    public RevocationDetails revocationDetails;
    public Certificate withRevocationDetails(RevocationDetails revocationDetails) {
        this.revocationDetails = revocationDetails;
        return this;
    }
    
    /**
     * Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectMode")
    public CertificateSubjectModeEnum subjectMode;
    public Certificate withSubjectMode(CertificateSubjectModeEnum subjectMode) {
        this.subjectMode = subjectMode;
        return this;
    }
    
    /**
     * Output only. The time at which this Certificate was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Certificate withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
