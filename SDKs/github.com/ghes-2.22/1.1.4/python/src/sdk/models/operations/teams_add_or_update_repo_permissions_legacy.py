"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum(str, Enum):
    r"""The permission to grant the team on this repository. Can be one of:
    \* `pull` - team members can pull, but not push to or administer this repository.  
    \* `push` - team members can pull and push, but not administer this repository.  
    \* `admin` - team members can pull, push and administer this repository.  
      
    If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
    """
    PULL = 'pull'
    PUSH = 'push'
    ADMIN = 'admin'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsLegacyRequestBody:
    
    permission: Optional[TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""The permission to grant the team on this repository. Can be one of:
    \* `pull` - team members can pull, but not push to or administer this repository.  
    \* `push` - team members can pull and push, but not administer this repository.  
    \* `admin` - team members can pull, push and administer this repository.  
      
    If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
    """  
    

@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsLegacyRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    team_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'team_id', 'style': 'simple', 'explode': False }})  
    request_body: Optional[TeamsAddOrUpdateRepoPermissionsLegacyRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsLegacyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    