"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Keys:
    r"""Monitor and manage API Keys"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def key_availability(self, request: operations.KeyAvailabilityRequest) -> operations.KeyAvailabilityResponse:
        r"""Availability
        Returns public information on key. Currently only returns whether the key is currently useable via the `available` property. Use this to discover if the key is useable before making further requests.
        
        You may pass both API Keys (beginning `ak_`) and Sub-licensed Keys (beginning `sl_`).
        ## Testing
        
        To test your implementation of our API, you may use the following test keys.
        
        - **iddqd** Availability will return as `true`
        - **idkfa** Availability will return as `false`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeyAvailabilityRequest, base_url, '/keys/{key}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyAvailabilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKeyResponse])
                res.api_key_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def key_details(self, request: operations.KeyDetailsRequest) -> operations.KeyDetailsResponse:
        r"""Details
        Returns private data on the key including remaining lookups, available datasets and usage limits.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeyDetailsRequest, base_url, '/keys/{key}/details', request)
        
        query_params = utils.get_query_params(operations.KeyDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKeyDetailsResponse])
                res.api_key_details_response = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def key_logs(self, request: operations.KeyLogsRequest) -> operations.KeyLogsResponse:
        r"""Logs (CSV)
        Reports lookup information on a key for paid lookups.
        
        This method requires a `user_token`, which can be found on your [accounts page](https://ideal-postcodes.co.uk/account).
        
        A maximum interval of 90 days can be provided for analysis. If no start or end date is provided, the last 21 days will be used as the default interval.
        
        ## Download Usage History (CSV)
        
        `GET /keys/:key/lookups`
        
        Returns a CSV download of lookups performed and associated information.
        
        Note that the Content-Type returned will be CSV (text/csv). For a non 200 response, the `Content-Type` will revert to JSON with the error code and message embedded.
        
        ## Data Redaction
        
        Personally Identifiable Data (PII) caught in this your usage log (including IP, search term and URL data) will be redacted on a weekly basis.
        
        By default, PII will be redacted if it is older than 21 days. This timeframe can be configured from your dashboard.
        
        You may prevent PII collection altogether by setting the interval to `0` days.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeyLogsRequest, base_url, '/keys/{key}/lookups', request)
        
        query_params = utils.get_query_params(operations.KeyLogsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/csv'):
                res.key_logs_200_text_csv_string = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def key_usage(self, request: operations.KeyUsageRequest) -> operations.KeyUsageResponse:
        r"""Usage Stats
        Reports the number of lookups consumed on a key for a range of days.
        
        A maximum interval of 90 days can be provided for analysis. If no start or end date is provided, the last 21 days will be used as the default interval.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeyUsageRequest, base_url, '/keys/{key}/usage', request)
        
        query_params = utils.get_query_params(operations.KeyUsageRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKeyUsageResponse])
                res.api_key_usage_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    