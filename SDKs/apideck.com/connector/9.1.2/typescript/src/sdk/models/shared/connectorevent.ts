/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Unify event source
 */
export enum ConnectorEventEventSourceEnum {
  Native = "native",
  Virtual = "virtual",
}

/**
 * Unify event that is supported on the connector. Events are delivered via Webhooks.
 */
export class ConnectorEvent extends SpeakeasyBase {
  /**
   * Downstream event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "downstream_event_type" })
  downstreamEventType?: string;

  /**
   * Unify entity type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity_type" })
  entityType?: string;

  /**
   * Unify event source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_source" })
  eventSource?: ConnectorEventEventSourceEnum;

  /**
   * Unify event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_type" })
  eventType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resources" })
  resources?: string[];
}
