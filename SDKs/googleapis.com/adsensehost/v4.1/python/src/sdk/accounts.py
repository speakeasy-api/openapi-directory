"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adsensehost_accounts_adclients_get(self, request: operations.AdsensehostAccountsAdclientsGetRequest, security: operations.AdsensehostAccountsAdclientsGetSecurity) -> operations.AdsensehostAccountsAdclientsGetResponse:
        r"""Get information about one of the ad clients in the specified publisher's AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdclientsGetRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdclientsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdclientsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdClient])
                res.ad_client = out

        return res

    def adsensehost_accounts_adclients_list(self, request: operations.AdsensehostAccountsAdclientsListRequest, security: operations.AdsensehostAccountsAdclientsListSecurity) -> operations.AdsensehostAccountsAdclientsListResponse:
        r"""List all hosted ad clients in the specified hosted account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdclientsListRequest, base_url, '/accounts/{accountId}/adclients', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdclientsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdclientsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdClients])
                res.ad_clients = out

        return res

    def adsensehost_accounts_adunits_delete(self, request: operations.AdsensehostAccountsAdunitsDeleteRequest, security: operations.AdsensehostAccountsAdunitsDeleteSecurity) -> operations.AdsensehostAccountsAdunitsDeleteResponse:
        r"""Delete the specified ad unit from the specified publisher AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsDeleteRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnit])
                res.ad_unit = out

        return res

    def adsensehost_accounts_adunits_get(self, request: operations.AdsensehostAccountsAdunitsGetRequest, security: operations.AdsensehostAccountsAdunitsGetSecurity) -> operations.AdsensehostAccountsAdunitsGetResponse:
        r"""Get the specified host ad unit in this AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsGetRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnit])
                res.ad_unit = out

        return res

    def adsensehost_accounts_adunits_get_ad_code(self, request: operations.AdsensehostAccountsAdunitsGetAdCodeRequest, security: operations.AdsensehostAccountsAdunitsGetAdCodeSecurity) -> operations.AdsensehostAccountsAdunitsGetAdCodeResponse:
        r"""Get ad code for the specified ad unit, attaching the specified host custom channels."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsGetAdCodeRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsGetAdCodeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsGetAdCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdCode])
                res.ad_code = out

        return res

    def adsensehost_accounts_adunits_insert(self, request: operations.AdsensehostAccountsAdunitsInsertRequest, security: operations.AdsensehostAccountsAdunitsInsertSecurity) -> operations.AdsensehostAccountsAdunitsInsertResponse:
        r"""Insert the supplied ad unit into the specified publisher AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsInsertRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ad_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnit])
                res.ad_unit = out

        return res

    def adsensehost_accounts_adunits_list(self, request: operations.AdsensehostAccountsAdunitsListRequest, security: operations.AdsensehostAccountsAdunitsListSecurity) -> operations.AdsensehostAccountsAdunitsListResponse:
        r"""List all ad units in the specified publisher's AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsListRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnits])
                res.ad_units = out

        return res

    def adsensehost_accounts_adunits_patch(self, request: operations.AdsensehostAccountsAdunitsPatchRequest, security: operations.AdsensehostAccountsAdunitsPatchSecurity) -> operations.AdsensehostAccountsAdunitsPatchResponse:
        r"""Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsPatchRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ad_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnit])
                res.ad_unit = out

        return res

    def adsensehost_accounts_adunits_update(self, request: operations.AdsensehostAccountsAdunitsUpdateRequest, security: operations.AdsensehostAccountsAdunitsUpdateSecurity) -> operations.AdsensehostAccountsAdunitsUpdateResponse:
        r"""Update the supplied ad unit in the specified publisher AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsAdunitsUpdateRequest, base_url, '/accounts/{accountId}/adclients/{adClientId}/adunits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ad_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostAccountsAdunitsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsAdunitsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdUnit])
                res.ad_unit = out

        return res

    def adsensehost_accounts_get(self, request: operations.AdsensehostAccountsGetRequest, security: operations.AdsensehostAccountsGetSecurity) -> operations.AdsensehostAccountsGetResponse:
        r"""Get information about the selected associated AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsGetRequest, base_url, '/accounts/{accountId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def adsensehost_accounts_list(self, request: operations.AdsensehostAccountsListRequest, security: operations.AdsensehostAccountsListSecurity) -> operations.AdsensehostAccountsListResponse:
        r"""List hosted accounts associated with this AdSense account by ad client id."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts'
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Accounts])
                res.accounts = out

        return res

    def adsensehost_accounts_reports_generate(self, request: operations.AdsensehostAccountsReportsGenerateRequest, security: operations.AdsensehostAccountsReportsGenerateSecurity) -> operations.AdsensehostAccountsReportsGenerateResponse:
        r"""Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \\"alt=csv\\" as a query parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostAccountsReportsGenerateRequest, base_url, '/accounts/{accountId}/reports', request)
        
        query_params = utils.get_query_params(operations.AdsensehostAccountsReportsGenerateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostAccountsReportsGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    