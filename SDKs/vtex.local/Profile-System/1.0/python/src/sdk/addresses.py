"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Addresses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_client_address(self, request: operations.CreateClientAddressRequest) -> operations.CreateClientAddressResponse:
        r"""Create client address
        Creates new address for a given client profile.
        
        
        > The `id` field returned by this request is the `addressId` used to retrieve or update information of a specific address later.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateClientAddressRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "address", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateClientAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateClientAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_client_address_201_application_json_object = out

        return res

    def delete_address(self, request: operations.DeleteAddressRequest) -> operations.DeleteAddressResponse:
        r"""Delete address
        Deletes a client's address by `profileId` and `addressId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAddressRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeleteAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_address(self, request: operations.GetAddressRequest) -> operations.GetAddressResponse:
        r"""Get address
        Retrieves information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
        
        
        > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked address.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddressRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_address_200_application_json_object = out

        return res

    def get_address_by_version(self, request: operations.GetAddressByVersionRequest) -> operations.GetAddressByVersionResponse:
        r"""Get address by version
        Retrieves information of a specific version address of a given client.
        
        
        > For security and privacy reasons, this request returns masked address data by version. For unmasked information, see Get unmasked address by version.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddressByVersionRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAddressByVersionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddressByVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_address_by_version_200_application_json_object = out

        return res

    def get_client_addresses(self, request: operations.GetClientAddressesRequest) -> operations.GetClientAddressesResponse:
        r"""Get client addresses
        Retrieves information of all addresses of a given client, by its `profileId`.
        
        
        > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked client addresses.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClientAddressesRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetClientAddressesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClientAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_client_addresses_200_application_json_anies = out

        return res

    def get_unmasked_address(self, request: operations.GetUnmaskedAddressRequest) -> operations.GetUnmaskedAddressResponse:
        r"""Get unmasked address
        Retrieves unmasked information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedAddressRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/unmask', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUnmaskedAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_unmasked_address_200_application_json_object = out

        return res

    def get_unmasked_address_by_version(self, request: operations.GetUnmaskedAddressByVersionRequest) -> operations.GetUnmaskedAddressByVersionResponse:
        r"""Get unmasked address by version
        Retrieves unmasked information of a specific address version of a given client.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedAddressByVersionRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}/unmask', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUnmaskedAddressByVersionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedAddressByVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_unmasked_address_by_version_200_application_json_object = out

        return res

    def get_unmasked_client_addresses(self, request: operations.GetUnmaskedClientAddressesRequest) -> operations.GetUnmaskedClientAddressesResponse:
        r"""Get unmasked client addresses
        Retrieves unmasked information of all addresses of a given client, by its `profileId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedClientAddressesRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/unmask', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUnmaskedClientAddressesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedClientAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_unmasked_client_addresses_200_application_json_objects = out

        return res

    def update_client_address(self, request: operations.UpdateClientAddressRequest) -> operations.UpdateClientAddressResponse:
        r"""Update client address
        Updates one or more fields of an existing address for a given client profile.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientAddressRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpdateClientAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_client_address_200_application_json_object = out

        return res

    