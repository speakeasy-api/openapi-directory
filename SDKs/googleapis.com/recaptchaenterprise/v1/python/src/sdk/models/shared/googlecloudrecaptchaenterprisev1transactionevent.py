"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecaptchaenterpriseV1TransactionEventEventTypeEnum(str, Enum):
    r"""Optional. The type of this transaction event."""
    TRANSACTION_EVENT_TYPE_UNSPECIFIED = 'TRANSACTION_EVENT_TYPE_UNSPECIFIED'
    MERCHANT_APPROVE = 'MERCHANT_APPROVE'
    MERCHANT_DENY = 'MERCHANT_DENY'
    MANUAL_REVIEW = 'MANUAL_REVIEW'
    AUTHORIZATION = 'AUTHORIZATION'
    AUTHORIZATION_DECLINE = 'AUTHORIZATION_DECLINE'
    PAYMENT_CAPTURE = 'PAYMENT_CAPTURE'
    PAYMENT_CAPTURE_DECLINE = 'PAYMENT_CAPTURE_DECLINE'
    CANCEL = 'CANCEL'
    CHARGEBACK_INQUIRY = 'CHARGEBACK_INQUIRY'
    CHARGEBACK_ALERT = 'CHARGEBACK_ALERT'
    FRAUD_NOTIFICATION = 'FRAUD_NOTIFICATION'
    CHARGEBACK = 'CHARGEBACK'
    CHARGEBACK_REPRESENTMENT = 'CHARGEBACK_REPRESENTMENT'
    CHARGEBACK_REVERSE = 'CHARGEBACK_REVERSE'
    REFUND_REQUEST = 'REFUND_REQUEST'
    REFUND_DECLINE = 'REFUND_DECLINE'
    REFUND = 'REFUND'
    REFUND_REVERSE = 'REFUND_REVERSE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1TransactionEvent:
    r"""Describes an event in the lifecycle of a payment transaction."""
    
    event_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of the API call."""  
    event_type: Optional[GoogleCloudRecaptchaenterpriseV1TransactionEventEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""Optional. The type of this transaction event."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Optional. The reason or standardized code that corresponds with this transaction event, if one exists. For example, a CHARGEBACK event with code 6005."""  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Optional. The value that corresponds with this transaction event, if one exists. For example, a refund event where $5.00 was refunded. Currency is obtained from the original transaction data."""  
    