"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchConnectorRequestBody:
    r"""Include connector properties to update here"""
    
    chargestation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargestation'), 'exclude': lambda f: f is None }})  
    format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})  
    power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power'), 'exclude': lambda f: f is None }})  
    power_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power_type'), 'exclude': lambda f: f is None }})  
    rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchConnectorRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of connector that needs to be updated"""  
    request_body: PatchConnectorRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Include connector properties to update here"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchConnector201ApplicationJSON:
    r"""Returns the updated connector object"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    ok: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ok'), 'exclude': lambda f: f is None }})  
    result: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchConnectorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    patch_connector_201_application_json_object: Optional[PatchConnector201ApplicationJSON] = dataclasses.field(default=None)
    r"""Returns the updated connector object"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    