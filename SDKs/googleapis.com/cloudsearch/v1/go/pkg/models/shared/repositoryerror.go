// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RepositoryErrorTypeEnum - The type of error.
type RepositoryErrorTypeEnum string

const (
	RepositoryErrorTypeEnumUnknown             RepositoryErrorTypeEnum = "UNKNOWN"
	RepositoryErrorTypeEnumNetworkError        RepositoryErrorTypeEnum = "NETWORK_ERROR"
	RepositoryErrorTypeEnumDNSError            RepositoryErrorTypeEnum = "DNS_ERROR"
	RepositoryErrorTypeEnumConnectionError     RepositoryErrorTypeEnum = "CONNECTION_ERROR"
	RepositoryErrorTypeEnumAuthenticationError RepositoryErrorTypeEnum = "AUTHENTICATION_ERROR"
	RepositoryErrorTypeEnumAuthorizationError  RepositoryErrorTypeEnum = "AUTHORIZATION_ERROR"
	RepositoryErrorTypeEnumServerError         RepositoryErrorTypeEnum = "SERVER_ERROR"
	RepositoryErrorTypeEnumQuotaExceeded       RepositoryErrorTypeEnum = "QUOTA_EXCEEDED"
	RepositoryErrorTypeEnumServiceUnavailable  RepositoryErrorTypeEnum = "SERVICE_UNAVAILABLE"
	RepositoryErrorTypeEnumClientError         RepositoryErrorTypeEnum = "CLIENT_ERROR"
)

func (e RepositoryErrorTypeEnum) ToPointer() *RepositoryErrorTypeEnum {
	return &e
}

func (e *RepositoryErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "NETWORK_ERROR":
		fallthrough
	case "DNS_ERROR":
		fallthrough
	case "CONNECTION_ERROR":
		fallthrough
	case "AUTHENTICATION_ERROR":
		fallthrough
	case "AUTHORIZATION_ERROR":
		fallthrough
	case "SERVER_ERROR":
		fallthrough
	case "QUOTA_EXCEEDED":
		fallthrough
	case "SERVICE_UNAVAILABLE":
		fallthrough
	case "CLIENT_ERROR":
		*e = RepositoryErrorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoryErrorTypeEnum: %v", v)
	}
}

// RepositoryError - Errors when the connector is communicating to the source repository.
type RepositoryError struct {
	// Message that describes the error. The maximum allowable length of the message is 8192 characters.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Error codes. Matches the definition of HTTP status codes.
	HTTPStatusCode *int `json:"httpStatusCode,omitempty"`
	// The type of error.
	Type *RepositoryErrorTypeEnum `json:"type,omitempty"`
}
