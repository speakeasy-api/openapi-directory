<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SubscriptionGroup 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add Subscription item by groupId
     * 
     * Adds an SKU to a given Subscription, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdResponse
     */
	public function additemsubscriptionGroupId(
        \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/additem', \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "additemsubscriptionGroupIdRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdditemsubscriptionGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Cancel Subscription by groupId
     * 
     * Cancels Subscription by `groupId`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdResponse
     */
	public function cancelSubscriptionbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List All subscription groups
     * 
     * Retrieves all subscription groups in your store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllsubscriptiongroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllsubscriptiongroupResponse
     */
	public function getAllsubscriptiongroup(
        \OpenAPI\OpenAPI\Models\Operations\GetAllsubscriptiongroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllsubscriptiongroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllsubscriptiongroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List Subscription group's Configuration
     * 
     * Retrieves details about a given subscription group's configuration, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupResponse
     */
	public function getConfigsubscriptionsgroup(
        \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/config', \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConfigsubscriptionsgroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Conversation Message by groupId
     * 
     * Retrieves the conversation of a given Subscription group, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdResponse
     */
	public function getConversationMessagebygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/conversation-message', \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConversationMessagebygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Next purchase
     * 
     * Lists details of a given subscription group's next purchase, filtering by dateStr.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseResponse
     */
	public function getNextpurchase(
        \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/nextPurchase/{dateStr}', \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNextpurchaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Simulation by subscription-group
     * 
     * Retrieves Subscription simulations, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupResponse
     */
	public function getSimulatebysubscriptionGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/simulate/{groupId}', \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSimulatebysubscriptionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscription by groupId
     * 
     * Lists Subscription details, filtering by `groupId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdResponse
     */
	public function getSubscriptionbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get addresses by groupId
     * 
     * Lists addresses linked to a given Subscription group, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdResponse
     */
	public function getaddressesbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/addresses', \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetaddressesbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get frequency options by groupId
     * 
     * Lists frequency options of a given Subscription group, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdResponse
     */
	public function getfrequencyoptionsbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/frequency-options', \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get payment System by groupId
     * 
     * Retrieves payment system's information of a given Subscription group, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdResponse
     */
	public function getpaymentSystembygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/payment-systems', \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetpaymentSystembygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get subscription group list
     * 
     * Retrieves a list of Subscription groups in your store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetsubscriptiongrouplistRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetsubscriptiongrouplistResponse
     */
	public function getsubscriptiongrouplist(
        \OpenAPI\OpenAPI\Models\Operations\GetsubscriptiongrouplistRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetsubscriptiongrouplistResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetsubscriptiongrouplistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List 'Will create' by groupId
     * 
     * Retrieves Subscription groups listed as 'will create', filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdResponse
     */
	public function getwillcreatebygroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/will-create', \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetwillcreatebygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Insert Addresses by groupId
     * 
     * Insert address information of a given Subscription group, filtering by groupId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdResponse
     */
	public function insertAddressesbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}/addresses', \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "insertAddressesbygroupIdRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsertAddressesbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retry subscription by groupId
     * 
     * Permits the retry of a Subscription group, via API, filtering by groupId and instanceId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdResponse
     */
	public function retrysubscriptionbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupid}/instances/{instanceId}/retry', \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrysubscriptionbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Subscription by groupId
     * 
     * Updates a Subscription by `groupId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdResponse
     */
	public function updateSubscriptionbygroupId(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions-group/{groupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSubscriptionbygroupIdRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionbygroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}