"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Layers:
    r"""General data retrieval endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v4_layers_as_applied(self, request: operations.GetV4LayersAsAppliedRequest, security: operations.GetV4LayersAsAppliedSecurity) -> operations.GetV4LayersAsAppliedResponse:
        r"""Retrieve a list of application activities
        Retrieve a list of application activities. The id in the response is used for  GET /v4/layers/asApplied/{activityId}/contents.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/layers/asApplied'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetV4LayersAsAppliedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsAppliedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationActivities])
                res.application_activities = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_as_applied_activity_id_contents(self, request: operations.GetV4LayersAsAppliedActivityIDContentsRequest, security: operations.GetV4LayersAsAppliedActivityIDContentsSecurity) -> operations.GetV4LayersAsAppliedActivityIDContentsResponse:
        r"""Retrieve the raw application activity
        Retrieve an individual application activity by id.  Ids are retrieved via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersAsAppliedActivityIDContentsRequest, base_url, '/v4/layers/asApplied/{activityId}/contents', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsAppliedActivityIDContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 404, 416, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_as_harvested(self, request: operations.GetV4LayersAsHarvestedRequest, security: operations.GetV4LayersAsHarvestedSecurity) -> operations.GetV4LayersAsHarvestedResponse:
        r"""Retrieve a list of harvest activities
        Retrieve a list of harvest activities. The id in the response is used for  GET /v4/layers/asHarvested/{activityId}/contents.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/layers/asHarvested'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetV4LayersAsHarvestedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsHarvestedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HarvestActivities])
                res.harvest_activities = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_as_harvested_activity_id_contents(self, request: operations.GetV4LayersAsHarvestedActivityIDContentsRequest, security: operations.GetV4LayersAsHarvestedActivityIDContentsSecurity) -> operations.GetV4LayersAsHarvestedActivityIDContentsResponse:
        r"""Retrieve the raw harvest activity
        Retrieve an individual harvest activity by id.  Ids are retrieved via the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersAsHarvestedActivityIDContentsRequest, base_url, '/v4/layers/asHarvested/{activityId}/contents', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsHarvestedActivityIDContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 404, 416, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_as_planted(self, request: operations.GetV4LayersAsPlantedRequest, security: operations.GetV4LayersAsPlantedSecurity) -> operations.GetV4LayersAsPlantedResponse:
        r"""Retrieve a list of planting activities
        Retrieve a list of planting activities. The id in the response is used for  GET /v4/layers/asPlanted/{activityId}/contents.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/layers/asPlanted'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetV4LayersAsPlantedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsPlantedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlantingActivities])
                res.planting_activities = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_as_planted_activity_id_contents(self, request: operations.GetV4LayersAsPlantedActivityIDContentsRequest, security: operations.GetV4LayersAsPlantedActivityIDContentsSecurity) -> operations.GetV4LayersAsPlantedActivityIDContentsResponse:
        r"""Retrieve the raw planting activity
        Retrieve an individual planting activity by id.  Ids are retrieved via the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).  The data is compressed using .zip format.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersAsPlantedActivityIDContentsRequest, base_url, '/v4/layers/asPlanted/{activityId}/contents', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersAsPlantedActivityIDContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 404, 416, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_scouting_observations(self, request: operations.GetV4LayersScoutingObservationsRequest, security: operations.GetV4LayersScoutingObservationsSecurity) -> operations.GetV4LayersScoutingObservationsResponse:
        r"""Retrieve a list of scouting observations
        Retrieve a list of scouting observations created or updated by the user identified by the Authorization header.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/layers/scoutingObservations'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetV4LayersScoutingObservationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersScoutingObservationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 206]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoutingObservations])
                res.scouting_observations = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_scouting_observations_scouting_observation_id_(self, request: operations.GetV4LayersScoutingObservationsScoutingObservationIDRequest, security: operations.GetV4LayersScoutingObservationsScoutingObservationIDSecurity) -> operations.GetV4LayersScoutingObservationsScoutingObservationIDResponse:
        r"""Retrieve individual scouting observation
        Retrieve an individual scouting observation by id.  Ids are retrieved via the /layers/scoutingObservations route.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersScoutingObservationsScoutingObservationIDRequest, base_url, '/v4/layers/scoutingObservations/{scoutingObservationId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersScoutingObservationsScoutingObservationIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoutingObservation])
                res.scouting_observation = out
        elif http_res.status_code in [400, 403, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_scouting_observations_scouting_observation_id_attachments(self, request: operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsRequest, security: operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsSecurity) -> operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsResponse:
        r"""Retrieve attachments associated with a given scouting observation.
        Retrieve attachments associated with a given scouting observation. Photos added to scouting notes in the FieldView app are capped to 20MB, and we won’t store photos larger than that in a scouting note.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsRequest, base_url, '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoutingObservationAttachments])
                res.scouting_observation_attachments = out
        elif http_res.status_code == 206:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoutingObservationAttachments])
                res.scouting_observation_attachments = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 403, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v4_layers_scouting_observations_scouting_observation_id_attachments_attachment_id_contents(self, request: operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsAttachmentIDContentsRequest, security: operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsAttachmentIDContentsSecurity) -> operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsAttachmentIDContentsResponse:
        r"""Retrieve the binary contents of a scouting observation’s attachment.
        Photos added to scouting notes in the FieldView app are capped to `20MiB` (`20971520 bytes`), and we won’t store photos larger than that in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsAttachmentIDContentsRequest, base_url, '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV4LayersScoutingObservationsScoutingObservationIDAttachmentsAttachmentIDContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'image/jpeg'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/png'):
                res.body = http_res.content
        elif http_res.status_code == 206:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'image/jpeg'):
                res.body = http_res.content
        elif http_res.status_code in [400, 401, 403, 404, 416, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    