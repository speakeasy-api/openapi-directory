// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetExperimentResultsPathParams struct {
	// The name of the experiment to retrieve the results of.
	Experiment string `pathParam:"style=simple,explode=false,name=experiment"`
	// The name or ARN of the project that contains the experiment that you want to see the results of.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

type GetExperimentResultsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// GetExperimentResultsRequestBodyBaseStatEnum - The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
type GetExperimentResultsRequestBodyBaseStatEnum string

const (
	GetExperimentResultsRequestBodyBaseStatEnumMean GetExperimentResultsRequestBodyBaseStatEnum = "Mean"
)

func (e *GetExperimentResultsRequestBodyBaseStatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Mean":
		*e = GetExperimentResultsRequestBodyBaseStatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetExperimentResultsRequestBodyBaseStatEnum: %s", s)
	}
}

type GetExperimentResultsRequestBody struct {
	// The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
	BaseStat *GetExperimentResultsRequestBodyBaseStatEnum `json:"baseStat,omitempty"`
	// The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.
	EndTime *time.Time `json:"endTime,omitempty"`
	// The names of the experiment metrics that you want to see the results of.
	MetricNames []string `json:"metricNames"`
	// In seconds, the amount of time to aggregate results together.
	Period *int64 `json:"period,omitempty"`
	// The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.
	ReportNames []shared.ExperimentReportNameEnum `json:"reportNames,omitempty"`
	// <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>
	ResultStats []shared.ExperimentResultRequestTypeEnum `json:"resultStats,omitempty"`
	// The date and time that the experiment started.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The names of the experiment treatments that you want to see the results for.
	TreatmentNames []string `json:"treatmentNames"`
}

type GetExperimentResultsRequest struct {
	PathParams GetExperimentResultsPathParams
	Headers    GetExperimentResultsHeaders
	Request    GetExperimentResultsRequestBody `request:"mediaType=application/json"`
}

type GetExperimentResultsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	GetExperimentResultsResponse *shared.GetExperimentResultsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
