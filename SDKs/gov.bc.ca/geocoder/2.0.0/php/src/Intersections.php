<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Intersections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Geocode an address
     * 
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse
     */
	public function getAddressesOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addresses.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find intersections near to a geographic point
     * 
     * Represents intersections near a given point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatResponse
     */
	public function getIntersectionsNearOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/intersections/near.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find nearest intersection to a geographic point
     * 
     * Represents the closest intersection to a given point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatResponse
     */
	public function getIntersectionsNearestOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/intersections/nearest.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsNearestOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find intersections in a geographic area
     * 
     * Represents all intersections within a given area
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatResponse
     */
	public function getIntersectionsWithinOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/intersections/within.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsWithinOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get an intersection by its unique ID
     * 
     * Represents a individual intersection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatResponse
     */
	public function getIntersectionsIntersectionIDOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/intersections/{intersectionID}.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntersectionsIntersectionIDOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}