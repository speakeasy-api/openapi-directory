"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWorkflowResponse = exports.GetWorkflowResponseTasks = exports.GetWorkflowResponseStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The status of the workflow:
 *
 * @remarks
 *   - Queued: The workflow is in queue for being processed.
 *   - Processing: The workflow is in process.
 *   - Stopping: The workflow is being stopped through Zuora UI.
 *   - Stopped: The workflow is stopped through Zuora UI.
 *   - Finished: The workflow is finished. When a workflow is finished, it might have tasks pending for retry or delay. Pending tasks do not block the onfinish branch of the workflow, but they block the oncomplete branch of the iterate.
 *
 */
var GetWorkflowResponseStatusEnum;
(function (GetWorkflowResponseStatusEnum) {
    GetWorkflowResponseStatusEnum["Queued"] = "Queued";
    GetWorkflowResponseStatusEnum["Processing"] = "Processing";
    GetWorkflowResponseStatusEnum["Stopping"] = "Stopping";
    GetWorkflowResponseStatusEnum["Stopped"] = "Stopped";
    GetWorkflowResponseStatusEnum["Finished"] = "Finished";
})(GetWorkflowResponseStatusEnum = exports.GetWorkflowResponseStatusEnum || (exports.GetWorkflowResponseStatusEnum = {}));
/**
 * An object containing task counts.
 *
 * @remarks
 *
 */
var GetWorkflowResponseTasks = /** @class */ (function (_super) {
    __extends(GetWorkflowResponseTasks, _super);
    function GetWorkflowResponseTasks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "error" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "error", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pending" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "pending", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "processing" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "processing", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "queued" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "queued", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stopped" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "stopped", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "success" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "success", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "total" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponseTasks.prototype, "total", void 0);
    return GetWorkflowResponseTasks;
}(utils_1.SpeakeasyBase));
exports.GetWorkflowResponseTasks = GetWorkflowResponseTasks;
var GetWorkflowResponse = /** @class */ (function (_super) {
    __extends(GetWorkflowResponse, _super);
    function GetWorkflowResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cpuTime" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "cpuTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "finishedAt" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "finishedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponse.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "messages" }),
        __metadata("design:type", Object)
    ], GetWorkflowResponse.prototype, "messages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "originalWorkflowId" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "originalWorkflowId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runTime" }),
        __metadata("design:type", Number)
    ], GetWorkflowResponse.prototype, "runTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tasks" }),
        (0, class_transformer_1.Type)(function () { return GetWorkflowResponseTasks; }),
        __metadata("design:type", GetWorkflowResponseTasks)
    ], GetWorkflowResponse.prototype, "tasks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        __metadata("design:type", String)
    ], GetWorkflowResponse.prototype, "updatedAt", void 0);
    return GetWorkflowResponse;
}(utils_1.SpeakeasyBase));
exports.GetWorkflowResponse = GetWorkflowResponse;
