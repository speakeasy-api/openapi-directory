// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputUnitsEnum - Distance units in either metres/kilometres (metric) or feet/miles (imperial)
type OutputUnitsEnum string

const (
	OutputUnitsEnumMetric   OutputUnitsEnum = "metric"
	OutputUnitsEnumImperial OutputUnitsEnum = "imperial"
)

func (e *OutputUnitsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "metric":
		fallthrough
	case "imperial":
		*e = OutputUnitsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputUnitsEnum: %s", s)
	}
}

type Output struct {
	// Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12
	Ber *int `json:"ber,omitempty"`
	// Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..
	Col *string `json:"col,omitempty"`
	// Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa
	Mod *int `json:"mod,omitempty"`
	// Noise floor in dBm for use with out=4 / SNR
	Nf *int `json:"nf,omitempty"`
	// Measured units. 1=dB,2=dBm,3=dBuV,4=SNR
	Out *int `json:"out,omitempty"`
	// Radius in kilometres for output
	Rad *float32 `json:"rad,omitempty"`
	// Resolution in metres for output
	Res *int `json:"res,omitempty"`
	// Distance units in either metres/kilometres (metric) or feet/miles (imperial)
	Units *OutputUnitsEnum `json:"units,omitempty"`
}
