// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UserAPIGetAlbumCollectionPathParams struct {
	// ID of the user whose albums are to be browsed.
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

// UserAPIGetAlbumCollectionAlbumTypesEnum - Filter by album type (optional).
type UserAPIGetAlbumCollectionAlbumTypesEnum string

const (
	UserAPIGetAlbumCollectionAlbumTypesEnumUnknown      UserAPIGetAlbumCollectionAlbumTypesEnum = "Unknown"
	UserAPIGetAlbumCollectionAlbumTypesEnumAlbum        UserAPIGetAlbumCollectionAlbumTypesEnum = "Album"
	UserAPIGetAlbumCollectionAlbumTypesEnumSingle       UserAPIGetAlbumCollectionAlbumTypesEnum = "Single"
	UserAPIGetAlbumCollectionAlbumTypesEnumEp           UserAPIGetAlbumCollectionAlbumTypesEnum = "EP"
	UserAPIGetAlbumCollectionAlbumTypesEnumSplitAlbum   UserAPIGetAlbumCollectionAlbumTypesEnum = "SplitAlbum"
	UserAPIGetAlbumCollectionAlbumTypesEnumCompilation  UserAPIGetAlbumCollectionAlbumTypesEnum = "Compilation"
	UserAPIGetAlbumCollectionAlbumTypesEnumVideo        UserAPIGetAlbumCollectionAlbumTypesEnum = "Video"
	UserAPIGetAlbumCollectionAlbumTypesEnumArtbook      UserAPIGetAlbumCollectionAlbumTypesEnum = "Artbook"
	UserAPIGetAlbumCollectionAlbumTypesEnumGame         UserAPIGetAlbumCollectionAlbumTypesEnum = "Game"
	UserAPIGetAlbumCollectionAlbumTypesEnumFanmade      UserAPIGetAlbumCollectionAlbumTypesEnum = "Fanmade"
	UserAPIGetAlbumCollectionAlbumTypesEnumInstrumental UserAPIGetAlbumCollectionAlbumTypesEnum = "Instrumental"
	UserAPIGetAlbumCollectionAlbumTypesEnumOther        UserAPIGetAlbumCollectionAlbumTypesEnum = "Other"
)

func (e *UserAPIGetAlbumCollectionAlbumTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Album":
		fallthrough
	case "Single":
		fallthrough
	case "EP":
		fallthrough
	case "SplitAlbum":
		fallthrough
	case "Compilation":
		fallthrough
	case "Video":
		fallthrough
	case "Artbook":
		fallthrough
	case "Game":
		fallthrough
	case "Fanmade":
		fallthrough
	case "Instrumental":
		fallthrough
	case "Other":
		*e = UserAPIGetAlbumCollectionAlbumTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionAlbumTypesEnum: %s", s)
	}
}

// UserAPIGetAlbumCollectionFieldsEnum - List of optional fields (optional). Possible values are Artists, MainPicture, Names, PVs, Tags, WebLinks.
type UserAPIGetAlbumCollectionFieldsEnum string

const (
	UserAPIGetAlbumCollectionFieldsEnumNone            UserAPIGetAlbumCollectionFieldsEnum = "None"
	UserAPIGetAlbumCollectionFieldsEnumAdditionalNames UserAPIGetAlbumCollectionFieldsEnum = "AdditionalNames"
	UserAPIGetAlbumCollectionFieldsEnumArtists         UserAPIGetAlbumCollectionFieldsEnum = "Artists"
	UserAPIGetAlbumCollectionFieldsEnumDescription     UserAPIGetAlbumCollectionFieldsEnum = "Description"
	UserAPIGetAlbumCollectionFieldsEnumDiscs           UserAPIGetAlbumCollectionFieldsEnum = "Discs"
	UserAPIGetAlbumCollectionFieldsEnumIdentifiers     UserAPIGetAlbumCollectionFieldsEnum = "Identifiers"
	UserAPIGetAlbumCollectionFieldsEnumMainPicture     UserAPIGetAlbumCollectionFieldsEnum = "MainPicture"
	UserAPIGetAlbumCollectionFieldsEnumNames           UserAPIGetAlbumCollectionFieldsEnum = "Names"
	UserAPIGetAlbumCollectionFieldsEnumPVs             UserAPIGetAlbumCollectionFieldsEnum = "PVs"
	UserAPIGetAlbumCollectionFieldsEnumReleaseEvent    UserAPIGetAlbumCollectionFieldsEnum = "ReleaseEvent"
	UserAPIGetAlbumCollectionFieldsEnumTags            UserAPIGetAlbumCollectionFieldsEnum = "Tags"
	UserAPIGetAlbumCollectionFieldsEnumTracks          UserAPIGetAlbumCollectionFieldsEnum = "Tracks"
	UserAPIGetAlbumCollectionFieldsEnumWebLinks        UserAPIGetAlbumCollectionFieldsEnum = "WebLinks"
)

func (e *UserAPIGetAlbumCollectionFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Artists":
		fallthrough
	case "Description":
		fallthrough
	case "Discs":
		fallthrough
	case "Identifiers":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "Tracks":
		fallthrough
	case "WebLinks":
		*e = UserAPIGetAlbumCollectionFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionFieldsEnum: %s", s)
	}
}

// UserAPIGetAlbumCollectionLangEnum - Content language preference (optional).
type UserAPIGetAlbumCollectionLangEnum string

const (
	UserAPIGetAlbumCollectionLangEnumDefault  UserAPIGetAlbumCollectionLangEnum = "Default"
	UserAPIGetAlbumCollectionLangEnumJapanese UserAPIGetAlbumCollectionLangEnum = "Japanese"
	UserAPIGetAlbumCollectionLangEnumRomaji   UserAPIGetAlbumCollectionLangEnum = "Romaji"
	UserAPIGetAlbumCollectionLangEnumEnglish  UserAPIGetAlbumCollectionLangEnum = "English"
)

func (e *UserAPIGetAlbumCollectionLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = UserAPIGetAlbumCollectionLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionLangEnum: %s", s)
	}
}

// UserAPIGetAlbumCollectionNameMatchModeEnum - Match mode for album name (optional, defaults to Auto).
type UserAPIGetAlbumCollectionNameMatchModeEnum string

const (
	UserAPIGetAlbumCollectionNameMatchModeEnumAuto       UserAPIGetAlbumCollectionNameMatchModeEnum = "Auto"
	UserAPIGetAlbumCollectionNameMatchModeEnumPartial    UserAPIGetAlbumCollectionNameMatchModeEnum = "Partial"
	UserAPIGetAlbumCollectionNameMatchModeEnumStartsWith UserAPIGetAlbumCollectionNameMatchModeEnum = "StartsWith"
	UserAPIGetAlbumCollectionNameMatchModeEnumExact      UserAPIGetAlbumCollectionNameMatchModeEnum = "Exact"
	UserAPIGetAlbumCollectionNameMatchModeEnumWords      UserAPIGetAlbumCollectionNameMatchModeEnum = "Words"
)

func (e *UserAPIGetAlbumCollectionNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = UserAPIGetAlbumCollectionNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionNameMatchModeEnum: %s", s)
	}
}

// UserAPIGetAlbumCollectionPurchaseStatusesEnum - Filter by a comma-separated list of purchase statuses (optional). Possible values are Nothing, Wishlisted, Ordered, Owned, and all combinations of these.
type UserAPIGetAlbumCollectionPurchaseStatusesEnum string

const (
	UserAPIGetAlbumCollectionPurchaseStatusesEnumNothing    UserAPIGetAlbumCollectionPurchaseStatusesEnum = "Nothing"
	UserAPIGetAlbumCollectionPurchaseStatusesEnumWishlisted UserAPIGetAlbumCollectionPurchaseStatusesEnum = "Wishlisted"
	UserAPIGetAlbumCollectionPurchaseStatusesEnumOrdered    UserAPIGetAlbumCollectionPurchaseStatusesEnum = "Ordered"
	UserAPIGetAlbumCollectionPurchaseStatusesEnumOwned      UserAPIGetAlbumCollectionPurchaseStatusesEnum = "Owned"
	UserAPIGetAlbumCollectionPurchaseStatusesEnumAll        UserAPIGetAlbumCollectionPurchaseStatusesEnum = "All"
)

func (e *UserAPIGetAlbumCollectionPurchaseStatusesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Wishlisted":
		fallthrough
	case "Ordered":
		fallthrough
	case "Owned":
		fallthrough
	case "All":
		*e = UserAPIGetAlbumCollectionPurchaseStatusesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionPurchaseStatusesEnum: %s", s)
	}
}

// UserAPIGetAlbumCollectionSortEnum - Sort rule (optional, defaults to Name). Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage, RatingTotal, CollectionCount.
type UserAPIGetAlbumCollectionSortEnum string

const (
	UserAPIGetAlbumCollectionSortEnumNone                 UserAPIGetAlbumCollectionSortEnum = "None"
	UserAPIGetAlbumCollectionSortEnumName                 UserAPIGetAlbumCollectionSortEnum = "Name"
	UserAPIGetAlbumCollectionSortEnumReleaseDate          UserAPIGetAlbumCollectionSortEnum = "ReleaseDate"
	UserAPIGetAlbumCollectionSortEnumReleaseDateWithNulls UserAPIGetAlbumCollectionSortEnum = "ReleaseDateWithNulls"
	UserAPIGetAlbumCollectionSortEnumAdditionDate         UserAPIGetAlbumCollectionSortEnum = "AdditionDate"
	UserAPIGetAlbumCollectionSortEnumRatingAverage        UserAPIGetAlbumCollectionSortEnum = "RatingAverage"
	UserAPIGetAlbumCollectionSortEnumRatingTotal          UserAPIGetAlbumCollectionSortEnum = "RatingTotal"
	UserAPIGetAlbumCollectionSortEnumNameThenReleaseDate  UserAPIGetAlbumCollectionSortEnum = "NameThenReleaseDate"
	UserAPIGetAlbumCollectionSortEnumCollectionCount      UserAPIGetAlbumCollectionSortEnum = "CollectionCount"
)

func (e *UserAPIGetAlbumCollectionSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "ReleaseDate":
		fallthrough
	case "ReleaseDateWithNulls":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "RatingAverage":
		fallthrough
	case "RatingTotal":
		fallthrough
	case "NameThenReleaseDate":
		fallthrough
	case "CollectionCount":
		*e = UserAPIGetAlbumCollectionSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetAlbumCollectionSortEnum: %s", s)
	}
}

type UserAPIGetAlbumCollectionQueryParams struct {
	// List of advanced filters (optional).
	AdvancedFilters []interface{} `queryParam:"style=form,explode=true,name=advancedFilters"`
	// Filter by album type (optional).
	AlbumTypes *UserAPIGetAlbumCollectionAlbumTypesEnum `queryParam:"style=form,explode=true,name=albumTypes"`
	// Filter by album artist (optional).
	ArtistID *int `queryParam:"style=form,explode=true,name=artistId"`
	// List of optional fields (optional). Possible values are Artists, MainPicture, Names, PVs, Tags, WebLinks.
	Fields *UserAPIGetAlbumCollectionFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Content language preference (optional).
	Lang *UserAPIGetAlbumCollectionLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for album name (optional, defaults to Auto).
	NameMatchMode *UserAPIGetAlbumCollectionNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Filter by a comma-separated list of purchase statuses (optional). Possible values are Nothing, Wishlisted, Ordered, Owned, and all combinations of these.
	PurchaseStatuses *UserAPIGetAlbumCollectionPurchaseStatusesEnum `queryParam:"style=form,explode=true,name=purchaseStatuses"`
	// Album name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter by release event. Optional.
	ReleaseEventID *int `queryParam:"style=form,explode=true,name=releaseEventId"`
	// Sort rule (optional, defaults to Name). Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage, RatingTotal, CollectionCount.
	Sort *UserAPIGetAlbumCollectionSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by tag (optional).
	Tag *string `queryParam:"style=form,explode=true,name=tag"`
	// Filter by tag Id (optional).
	TagID *int `queryParam:"style=form,explode=true,name=tagId"`
}

type UserAPIGetAlbumCollectionRequest struct {
	PathParams  UserAPIGetAlbumCollectionPathParams
	QueryParams UserAPIGetAlbumCollectionQueryParams
}

type UserAPIGetAlbumCollectionResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultAlbumForUserForAPIContract *shared.PartialFindResultAlbumForUserForAPIContract
	StatusCode                                  int
	RawResponse                                 *http.Response
}
