/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
 *
 * @remarks
 * For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
 *
 */
export class Scim {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List resource types
   *
   * @remarks
   * Returns all resource types supported for the SCIM configuration.
   *
   */
  getV2Scim20ResourceTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20ResourceTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/scim/2.0/ResourceTypes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20ResourceTypesResponse =
        new operations.GetV2Scim20ResourceTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypes200ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypes200ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypes401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypes401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypes500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypes500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a resource type
   *
   * @remarks
   * Returns a resource type by name.
   *
   */
  getV2Scim20ResourceTypesName(
    req: operations.GetV2Scim20ResourceTypesNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20ResourceTypesNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2Scim20ResourceTypesNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/scim/2.0/ResourceTypes/{name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20ResourceTypesNameResponse =
        new operations.GetV2Scim20ResourceTypesNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimResourceType = utils.objectToClass(
              httpRes?.data,
              shared.ScimResourceType
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypesName401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypesName401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypesName404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypesName404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ResourceTypesName500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ResourceTypesName500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List schemas
   *
   * @remarks
   * Returns all schemas supported for the SCIM configuration.
   *
   */
  getV2Scim20Schemas(
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20SchemasResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Schemas";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20SchemasResponse =
        new operations.GetV2Scim20SchemasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Schemas200ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Schemas200ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Schemas401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Schemas401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Schemas500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Schemas500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a schema
   *
   * @remarks
   * Returns a schema by ID.
   *
   */
  getV2Scim20SchemasId(
    req: operations.GetV2Scim20SchemasIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20SchemasIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2Scim20SchemasIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/scim/2.0/Schemas/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20SchemasIdResponse =
        new operations.GetV2Scim20SchemasIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimSchema = utils.objectToClass(
              httpRes?.data,
              shared.ScimSchema
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20SchemasId401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20SchemasId401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20SchemasId404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20SchemasId404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20SchemasId500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20SchemasId500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get service provider config
   *
   * @remarks
   * Returns a service provider config for Docker's configuration.
   *
   */
  getV2Scim20ServiceProviderConfig(
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20ServiceProviderConfigResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/scim/2.0/ServiceProviderConfig";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20ServiceProviderConfigResponse =
        new operations.GetV2Scim20ServiceProviderConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimServiceProviderConfig = utils.objectToClass(
              httpRes?.data,
              shared.ScimServiceProviderConfig
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ServiceProviderConfig401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20ServiceProviderConfig500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List users
   *
   * @remarks
   * List users, returns paginated users for an organization. Use `startIndex`
   * and `count` query parameters to receive paginated results.
   *
   * **Sorting:**<br>
   * Sorting lets you to specify the order of returned resources by specifying
   * a combination of `sortBy` and `sortOrder` query parameters.
   *
   * The `sortBy` parameter specifies the attribute whose value will be used
   * to order the returned responses. The `sortOrder` parameter defines the
   * order in which the `sortBy` parameter is applied. Allowed values are
   * "ascending" and "descending".
   *
   * **Filtering:**<br>
   * You can request a subset of resources by specifying the `filter` query
   * parameter containing a filter expression. Attribute names and attribute
   * operators used in filters are case insensitive. The filter parameter
   * must contain at least one valid expression. Each expression must contain
   * an attribute name followed by an attribute operator and an optional
   * value.
   *
   * Supported operators are listed below.
   *
   * - `eq` equal
   * - `ne` not equal
   * - `co` contains
   * - `sw` starts with
   * - `and` Logical "and"
   * - `or` Logical "or"
   * - `not` "Not" function
   * - `()` Precedence grouping
   *
   */
  getV2Scim20Users(
    req: operations.GetV2Scim20UsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20UsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2Scim20UsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Users";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20UsersResponse =
        new operations.GetV2Scim20UsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users200ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users200ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users400ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users400ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users403ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users403ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20Users500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20Users500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a user
   *
   * @remarks
   * Returns a user by ID.
   *
   */
  getV2Scim20UsersId(
    req: operations.GetV2Scim20UsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2Scim20UsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2Scim20UsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/scim/2.0/Users/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2Scim20UsersIdResponse =
        new operations.GetV2Scim20UsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimUser = utils.objectToClass(httpRes?.data, shared.ScimUser);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20UsersId400ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20UsersId400ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20UsersId401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20UsersId401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20UsersId403ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20UsersId403ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20UsersId404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20UsersId404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.getV2Scim20UsersId500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2Scim20UsersId500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create user
   *
   * @remarks
   * Creates a user. If the user already exists by email, they are assigned
   * to the organization on the "company" team.
   *
   */
  postV2Scim20Users(
    req: operations.PostV2Scim20UsersRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV2Scim20UsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostV2Scim20UsersRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV2Scim20UsersResponse =
        new operations.PostV2Scim20UsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimUser = utils.objectToClass(httpRes?.data, shared.ScimUser);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users400ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users400ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users403ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users403ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users409ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users409ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.postV2Scim20Users500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostV2Scim20Users500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a user
   *
   * @remarks
   * Updates a user. Use this route to change the user's name, activate,
   * and deactivate the user.
   *
   */
  putV2Scim20UsersId(
    req: operations.PutV2Scim20UsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutV2Scim20UsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutV2Scim20UsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/scim/2.0/Users/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutV2Scim20UsersIdResponse =
        new operations.PutV2Scim20UsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.scimUser = utils.objectToClass(httpRes?.data, shared.ScimUser);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId400ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId400ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId401ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId401ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId403ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId403ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId404ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId404ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId409ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId409ApplicationScimPlusJson
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/scim+json`)) {
            res.putV2Scim20UsersId500ApplicationScimPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutV2Scim20UsersId500ApplicationScimPlusJson
              );
          }
          break;
      }

      return res;
    });
  }
}
