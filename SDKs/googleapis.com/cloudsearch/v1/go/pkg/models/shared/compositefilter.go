// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompositeFilterLogicOperatorEnum - The logic operator of the sub filter.
type CompositeFilterLogicOperatorEnum string

const (
	CompositeFilterLogicOperatorEnumAnd CompositeFilterLogicOperatorEnum = "AND"
	CompositeFilterLogicOperatorEnumOr  CompositeFilterLogicOperatorEnum = "OR"
	CompositeFilterLogicOperatorEnumNot CompositeFilterLogicOperatorEnum = "NOT"
)

func (e CompositeFilterLogicOperatorEnum) ToPointer() *CompositeFilterLogicOperatorEnum {
	return &e
}

func (e *CompositeFilterLogicOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		fallthrough
	case "NOT":
		*e = CompositeFilterLogicOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompositeFilterLogicOperatorEnum: %v", v)
	}
}

type CompositeFilter struct {
	// The logic operator of the sub filter.
	LogicOperator *CompositeFilterLogicOperatorEnum `json:"logicOperator,omitempty"`
	// Sub filters.
	SubFilters []Filter `json:"subFilters,omitempty"`
}
