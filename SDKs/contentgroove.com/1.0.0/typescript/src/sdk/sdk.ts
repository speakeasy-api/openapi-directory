/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * API server
   */
  "https://api.contentgroove.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # Overview
 *
 * @remarks
 *
 * The ContentGroove Developer API enables you to add the power of ContentGroove's video AI to your own applications and workflows.
 *
 * Webhooks are a way for ContentGroove to send video information
 * to your application, to update your system and/or trigger other business processes.
 *
 * You can use Webhooks and the Developer API separately or together.
 *
 * # Getting Started with Webhooks
 *
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Read "Using Webhooks" on the [API Reference page](https://developers.contentgroove.com/api_reference)
 * - Visit the [Webhooks page](https://app.contentgroove.com/webhook_subscriptions) and create a new webhook
 *
 * # Using Webhooks
 *
 * Webhooks, also known as callbacks, are a way for ContentGroove to notify your application as soon as possible after an event has occurred in ContentGroove.
 * For example after a media completes processing, ContentGroove can use a webhook to notify your application with information about the video: Suggested clips, transcription, and so on.
 * You can use the information sent to update your system and/or use the
 * webhook to trigger other business processes.
 *
 * The webhook request is sent as an HTTP POST containing a payload of JSON-formatted data.
 * For the details of the payload format see the "CALLBACKS" sections below.
 *
 * When your application receives the webhook request, it must respond with
 * a 200 HTTP status code (success).
 * If a 200 HTTP status code is not returned,
 * ContentGroove will assume that the webhook was not delivered and
 * will retry a limited number of times, using an exponential backoff algorithm.
 *
 * ContentGroove makes a best effort to attempt to send the webhook at
 * least once.
 * Applications receiving webhooks must tolerate the
 * possibility of a single webhook payload being sent more than once
 * (idempotent behavior).
 * Applications receiving webhooks should tolerate the possibility that
 * a webhook could not be delivered
 * (for example your application was down when delivery was attempted).
 *
 * # Getting Started with the Developer API
 *
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Visit the [API Keys page](https://app.contentgroove.com/api_keys)
 *   - Create a new API Key then copy and save the value.
 *     > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
 * - View all available endpoints, and try the API, on our [API Reference page](https://developers.contentgroove.com/api_reference)
 *
 * # Using the Developer API
 *
 * - Create a new media (video or audio) in ContentGroove
 *   - If the video or audio is available from a URL, you can create a media by providing the `source_url` parameter. ContentGroove will fetch the video or audio from the URL if possible.
 *   - Or, you can create a media from a video or audio file which you upload directly to ContentGroove (see File Uploading section below).
 * - After the new media is created, at first it will be in a "processing" state.
 *   Depending on the size and duration of the video or audio file, it will take some time for processing to complete.
 *   - You can use ContentGroove Webhooks to be notified immediately when processing has completed. (Details coming soon.)
 *   - You can also use the API to read the state of the media, to determine if the media has completed processing yet.
 * - After the media has completed processing, you can access all of these details about the media:
 *   - The media name and description
 *   - The transcription of spoken words
 *   - Topics and keywords which were discussed in the transcription
 *   - Suggested video clips are automatically created
 * - In addition to the automatically created video clips, you can create more video clips from the media
 *
 * # Response Codes
 *
 * The following is a comprehensive list of the status codes you may receive while using the ContentGroove API:
 *
 * - 200 "Ok"
 *   - The request was valid
 * - 400 "Bad Request
 *   - This is returned when there was a problem parsing the JSON body of your request if you supplied the 'Content-Type': 'application/json' header, or if your request is missing the 'Content-Type' header altogether
 * - 401 "Unauthorized"
 *   - This is returned when you are attempting to perform an action on a resource that you are not authorized to do
 * - 402 "Payment Required"
 *   - This is returned when you are attempting to perform an action that would push your account above a usage limit. You can view your usage at: https://app.contentgroove.com/quota_usage
 * - 404 "Not Found"
 *   - This is returned when the resource you are trying to view does not exist
 * - 429 "Too Many Requests"
 *   - This is returned when you have performed too many requests within a given period of time
 * - 500 "Internal Server Error"
 *   - This is returned when your request was valid but there was a problem on our end
 *
 * # File Uploading
 *
 * - Step 1: Make a GET request to the direct uploads URL endpoint (/api/v1/direct_uploads) to receive an upload URL to upload the file to and an upload id.
 * - Step 2: Make a PUT request with the file as the body to the upload URL received in step 1. The response will have a 200 status with no body if the upload is successful.
 *   ```
 *   curl -T /path/to/file upload_url
 *   ```
 * - Step 3: After uploading the file to the upload URL, make a POST request to the create medias endpoint (/api/v1/medias), with the upload id and optionally a name and description for the new media.
 *   > At this time, file uploads are limited to 5gb per file.
 *
 * # Allowed media types
 *
 * Video:
 *
 * - Supported: Most common video formats and codecs are supported.
 * - Recommended: mp4
 *
 * Audio:
 *
 * - Supported: aac, mp3, flac, ogg, wav, and wma
 * - Recommended: aac
 *
 * # Authentication
 *
 * You can use the API Key to authenticate your API requests using any of these methods. (Replace abc123 with your actual API Key.)
 *
 * - Request header `Authorization: Bearer abc123`
 * - Request header `X-API-KEY: abc123`
 * - Query parameter `api_key=abc123`
 *   > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
 *
 * # Link to openapi.json spec
 *
 * - https://api.contentgroove.com/api-docs/v1/openapi.json
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * delete clip
   */
  deleteApiV1ClipsId(
    req: operations.DeleteApiV1ClipsIdRequest,
    security: operations.DeleteApiV1ClipsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV1ClipsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV1ClipsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/clips/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV1ClipsIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV1ClipsIdResponse =
        new operations.DeleteApiV1ClipsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * delete media
   */
  deleteApiV1MediasId(
    req: operations.DeleteApiV1MediasIdRequest,
    security: operations.DeleteApiV1MediasIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV1MediasIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV1MediasIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/medias/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV1MediasIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV1MediasIdResponse =
        new operations.DeleteApiV1MediasIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * delete webhook subscription
   */
  deleteApiV1WebhookSubscriptionsId(
    req: operations.DeleteApiV1WebhookSubscriptionsIdRequest,
    security: operations.DeleteApiV1WebhookSubscriptionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV1WebhookSubscriptionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV1WebhookSubscriptionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/webhook_subscriptions/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV1WebhookSubscriptionsIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV1WebhookSubscriptionsIdResponse =
        new operations.DeleteApiV1WebhookSubscriptionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * list clips
   */
  getApiV1Clips(
    req: operations.GetApiV1ClipsRequest,
    security: operations.GetApiV1ClipsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1ClipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1ClipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/clips";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1ClipsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1ClipsResponse =
        new operations.GetApiV1ClipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * show clip
   */
  getApiV1ClipsId(
    req: operations.GetApiV1ClipsIdRequest,
    security: operations.GetApiV1ClipsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1ClipsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1ClipsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/clips/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1ClipsIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1ClipsIdResponse =
        new operations.GetApiV1ClipsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * prepare presigned upload url
   */
  getApiV1DirectUploads(
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1DirectUploadsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/direct_uploads";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1DirectUploadsResponse =
        new operations.GetApiV1DirectUploadsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * list medias
   */
  getApiV1Medias(
    req: operations.GetApiV1MediasRequest,
    security: operations.GetApiV1MediasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1MediasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1MediasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/medias";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1MediasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1MediasResponse =
        new operations.GetApiV1MediasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * show media
   */
  getApiV1MediasId(
    req: operations.GetApiV1MediasIdRequest,
    security: operations.GetApiV1MediasIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1MediasIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1MediasIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/medias/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1MediasIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1MediasIdResponse =
        new operations.GetApiV1MediasIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * list webhook subscriptions
   */
  getApiV1WebhookSubscriptions(
    req: operations.GetApiV1WebhookSubscriptionsRequest,
    security: operations.GetApiV1WebhookSubscriptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1WebhookSubscriptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1WebhookSubscriptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/webhook_subscriptions";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1WebhookSubscriptionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1WebhookSubscriptionsResponse =
        new operations.GetApiV1WebhookSubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * show webhook subscription
   */
  getApiV1WebhookSubscriptionsId(
    req: operations.GetApiV1WebhookSubscriptionsIdRequest,
    security: operations.GetApiV1WebhookSubscriptionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV1WebhookSubscriptionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV1WebhookSubscriptionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/webhook_subscriptions/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV1WebhookSubscriptionsIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV1WebhookSubscriptionsIdResponse =
        new operations.GetApiV1WebhookSubscriptionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * create clip
   */
  postApiV1Clips(
    req: operations.PostApiV1ClipsRequestBody,
    security: operations.PostApiV1ClipsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV1ClipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiV1ClipsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/clips";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV1ClipsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV1ClipsResponse =
        new operations.PostApiV1ClipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 402, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * create media
   */
  postApiV1Medias(
    req: operations.PostApiV1MediasRequestBody,
    security: operations.PostApiV1MediasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV1MediasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiV1MediasRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/medias";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV1MediasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV1MediasResponse =
        new operations.PostApiV1MediasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 402, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * create webhook subscription
   */
  postApiV1WebhookSubscriptions(
    req: operations.PostApiV1WebhookSubscriptionsRequestBody,
    security: operations.PostApiV1WebhookSubscriptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV1WebhookSubscriptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiV1WebhookSubscriptionsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/webhook_subscriptions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV1WebhookSubscriptionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV1WebhookSubscriptionsResponse =
        new operations.PostApiV1WebhookSubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * update clip
   */
  putApiV1ClipsId(
    req: operations.PutApiV1ClipsIdRequest,
    security: operations.PutApiV1ClipsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutApiV1ClipsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutApiV1ClipsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/clips/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutApiV1ClipsIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutApiV1ClipsIdResponse =
        new operations.PutApiV1ClipsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * update media
   */
  putApiV1MediasId(
    req: operations.PutApiV1MediasIdRequest,
    security: operations.PutApiV1MediasIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutApiV1MediasIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutApiV1MediasIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v1/medias/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutApiV1MediasIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutApiV1MediasIdResponse =
        new operations.PutApiV1MediasIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
