"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetItvPageResponse = exports.GetItvPageRequest = exports.GetItvPageTextEntryFormatEnum = exports.GetItvPageItemDetailSelectSeasonEnum = exports.GetItvPageItemDetailExpandEnum = void 0;
var utils_1 = require("../../../internal/utils");
var shared = __importStar(require("../shared"));
/**
 * Only relevant when loading item detail pages as these embed a detailed item in the main page entry.
 *
 * @remarks
 *
 * If no value is specified no item dependencies are expanded.
 *
 * If 'children' is specified then the list of any direct children will be expanded. For example
 * seasons of a show or episodes of a season.
 *
 * If 'all' is specified then the parent chain will be expanded along with any child list at each level.
 * For example if an episode is specified then its season will be expanded and that season's episode list.
 * The season will have its show expanded and the show will have its season list expanded.
 *
 * The 'all' options is useful when you deep link into a show/season/episode for the first time as
 * it provides full context for navigating around the show page. Subsequent navigation around
 * children of the show should only need to request expand of children.
 *
 * If 'ancestors' is specified then only the parent chain is included
 *
 * If an expand is specified which is not relevant to the item type, it will be ignored.
 *
 */
var GetItvPageItemDetailExpandEnum;
(function (GetItvPageItemDetailExpandEnum) {
    GetItvPageItemDetailExpandEnum["All"] = "all";
    GetItvPageItemDetailExpandEnum["Children"] = "children";
    GetItvPageItemDetailExpandEnum["Ancestors"] = "ancestors";
})(GetItvPageItemDetailExpandEnum = exports.GetItvPageItemDetailExpandEnum || (exports.GetItvPageItemDetailExpandEnum = {}));
/**
 * Only relevant when loading show detail pages as these embed a detailed item in the main page entry.
 *
 * @remarks
 *
 * Since the introduction of the D1,2,3 templates this parameter is now somewhat redundant, or less
 * likely to have any effect. While it may still be useful in some cases, most of the time the season
 * selection will be dictated by the configuration of the rows scheduled on the show detail page.
 * This parameter will only take effect if there are rows used to schedule episodes of a season, like
 * D1,2,3, or if no rows have a value set for their `seasonOrder` custom field.
 *
 * Given a targeted show page, it can be useful to get the details of a child season. This option
 * provides a means to return the `first` or `latest` season of a show embedded in the page.
 *
 * The `expand` parameter also works here so for example you could land on a show page and request the
 * `item_detail_select_season=latest` along with `item_detail_expand=all`. This would then return the
 * detail of the latest season with its list of child episode summaries, and also expand
 * the detail of the show with its list of seasons summaries.
 *
 */
var GetItvPageItemDetailSelectSeasonEnum;
(function (GetItvPageItemDetailSelectSeasonEnum) {
    GetItvPageItemDetailSelectSeasonEnum["First"] = "first";
    GetItvPageItemDetailSelectSeasonEnum["Latest"] = "latest";
})(GetItvPageItemDetailSelectSeasonEnum = exports.GetItvPageItemDetailSelectSeasonEnum || (exports.GetItvPageItemDetailSelectSeasonEnum = {}));
/**
 * Only relevant to page entries of type `TextEntry`.
 *
 * @remarks
 *
 * Converts the value of a text page entry to the specified format.
 *
 */
var GetItvPageTextEntryFormatEnum;
(function (GetItvPageTextEntryFormatEnum) {
    GetItvPageTextEntryFormatEnum["Markdown"] = "markdown";
    GetItvPageTextEntryFormatEnum["Html"] = "html";
})(GetItvPageTextEntryFormatEnum = exports.GetItvPageTextEntryFormatEnum || (exports.GetItvPageTextEntryFormatEnum = {}));
var GetItvPageRequest = /** @class */ (function (_super) {
    __extends(GetItvPageRequest, _super);
    function GetItvPageRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=device",
        }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "device", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=false;name=ff" }),
        __metadata("design:type", Array)
    ], GetItvPageRequest.prototype, "ff", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=item_detail_expand",
        }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "itemDetailExpand", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=item_detail_select_season",
        }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "itemDetailSelectSeason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=lang" }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "lang", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=list_page_size",
        }),
        __metadata("design:type", Number)
    ], GetItvPageRequest.prototype, "listPageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=list_page_size_large",
        }),
        __metadata("design:type", Number)
    ], GetItvPageRequest.prototype, "listPageSizeLarge", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=max_list_prefetch",
        }),
        __metadata("design:type", Number)
    ], GetItvPageRequest.prototype, "maxListPrefetch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=max_rating",
        }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "maxRating", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=path" }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "path", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=false;name=segments",
        }),
        __metadata("design:type", Array)
    ], GetItvPageRequest.prototype, "segments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=sub" }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "sub", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=text_entry_format",
        }),
        __metadata("design:type", String)
    ], GetItvPageRequest.prototype, "textEntryFormat", void 0);
    return GetItvPageRequest;
}(utils_1.SpeakeasyBase));
exports.GetItvPageRequest = GetItvPageRequest;
var GetItvPageResponse = /** @class */ (function (_super) {
    __extends(GetItvPageResponse, _super);
    function GetItvPageResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetItvPageResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.Page)
    ], GetItvPageResponse.prototype, "page", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.ServiceError)
    ], GetItvPageResponse.prototype, "serviceError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetItvPageResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetItvPageResponse.prototype, "rawResponse", void 0);
    return GetItvPageResponse;
}(utils_1.SpeakeasyBase));
exports.GetItvPageResponse = GetItvPageResponse;
