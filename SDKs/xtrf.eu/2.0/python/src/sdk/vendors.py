"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Vendors:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_10(self, request: operations.Delete10Request) -> operations.Delete10Response:
        r"""Removes a provider.
        Removes a provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete10Request, base_url, '/providers/{providerId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete10Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_8(self, request: operations.Delete8Request) -> operations.Delete8Response:
        r"""Removes a person.
        Removes a person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete8Request, base_url, '/providers/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete8Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_9(self, request: operations.Delete9Request) -> operations.Delete9Response:
        r"""Removes a provider price list.
        Removes a provider price list.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete9Request, base_url, '/providers/priceLists/{priceListId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete9Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_address_1(self, request: operations.GetAddress1Request) -> operations.GetAddress1Response:
        r"""Returns address of a given provider.
        Returns address of a given provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddress1Request, base_url, '/providers/{providerId}/address', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddress1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def get_all_ids_4(self, request: operations.GetAllIds4Request) -> operations.GetAllIds4Response:
        r"""Returns persons' internal identifiers.
        Returns persons' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/providers/persons/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds4Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_4_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_all_ids_5(self, request: operations.GetAllIds5Request) -> operations.GetAllIds5Response:
        r"""Returns providers' internal identifiers.
        Returns providers' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/providers/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds5Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_5_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_by_id_4(self, request: operations.GetByID4Request) -> operations.GetByID4Response:
        r"""Returns person details.
        Returns person details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID4Request, base_url, '/providers/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProviderPersonDTO])
                res.provider_person_dto = out

        return res

    def get_by_id_5(self, request: operations.GetByID5Request) -> operations.GetByID5Response:
        r"""Returns provider details.
        Returns provider details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID5Request, base_url, '/providers/{providerId}', request)
        
        query_params = utils.get_query_params(operations.GetByID5Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProviderDTO])
                res.provider_dto = out

        return res

    def get_competencies(self, request: operations.GetCompetenciesRequest) -> operations.GetCompetenciesResponse:
        r"""Returns competencies of a given provider.
        Returns competencies of a given provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompetenciesRequest, base_url, '/providers/{providerId}/competencies', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompetenciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompetenciesDTO])
                res.competencies_dto = out

        return res

    def get_contact_2(self, request: operations.GetContact2Request) -> operations.GetContact2Response:
        r"""Returns contact of a given person.
        Returns contact of a given person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContact2Request, base_url, '/providers/persons/{personId}/contact', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContact2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonContactDTO])
                res.person_contact_dto = out

        return res

    def get_contact_3(self, request: operations.GetContact3Request) -> operations.GetContact3Response:
        r"""Returns contact of a given provider.
        Returns contact of a given provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContact3Request, base_url, '/providers/{providerId}/contact', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContact3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactDTO])
                res.contact_dto = out

        return res

    def get_correspondence_address_1(self, request: operations.GetCorrespondenceAddress1Request) -> operations.GetCorrespondenceAddress1Response:
        r"""Returns correspondence address of a given provider.
        Returns correspondence address of a given provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCorrespondenceAddress1Request, base_url, '/providers/{providerId}/correspondenceAddress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorrespondenceAddress1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def get_custom_fields_2(self, request: operations.GetCustomFields2Request) -> operations.GetCustomFields2Response:
        r"""Returns custom fields of a given person.
        Returns custom fields of a given person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields2Request, base_url, '/providers/persons/{personId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_custom_fields_3(self, request: operations.GetCustomFields3Request) -> operations.GetCustomFields3Response:
        r"""Returns custom fields of a given provider.
        Returns custom fields of a given provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields3Request, base_url, '/providers/{providerId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def send_invitations(self, request: operations.SendInvitationsRequest) -> operations.SendInvitationsResponse:
        r"""Sends invitation to Vendor Portal.
        Sends invitation to Vendor Portal.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendInvitationsRequest, base_url, '/providers/persons/{personId}/notification/invitation', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendInvitationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvitationStatisticsDTO])
                res.invitation_statistics_dto = out

        return res

    def send_invitations_1(self, request: operations.SendInvitations1Request) -> operations.SendInvitations1Response:
        r"""Sends invitations to Vendor Portal.
        Sends invitations to Vendor Portal.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendInvitations1Request, base_url, '/providers/{providerId}/notification/invitation', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendInvitations1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvitationStatisticsDTO])
                res.invitation_statistics_dto = out

        return res

    