// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TrainProjectPathParams struct {
	// The project id.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

// TrainProjectTrainingTypeEnum - The type of training to use to train the project (default: Regular).
type TrainProjectTrainingTypeEnum string

const (
	TrainProjectTrainingTypeEnumRegular  TrainProjectTrainingTypeEnum = "Regular"
	TrainProjectTrainingTypeEnumAdvanced TrainProjectTrainingTypeEnum = "Advanced"
)

func (e *TrainProjectTrainingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Regular":
		fallthrough
	case "Advanced":
		*e = TrainProjectTrainingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainProjectTrainingTypeEnum: %s", s)
	}
}

type TrainProjectQueryParams struct {
	// Whether to force train even if dataset and configuration does not change (default: false).
	ForceTrain *bool `queryParam:"style=form,explode=true,name=forceTrain"`
	// The email address to send notification to when training finishes (default: null).
	NotificationEmailAddress *string `queryParam:"style=form,explode=true,name=notificationEmailAddress"`
	// The number of hours reserved as budget for training (if applicable).
	ReservedBudgetInHours *int `queryParam:"style=form,explode=true,name=reservedBudgetInHours"`
	// The type of training to use to train the project (default: Regular).
	TrainingType *TrainProjectTrainingTypeEnum `queryParam:"style=form,explode=true,name=trainingType"`
}

type TrainProjectHeaders struct {
	// API key.
	TrainingKey string `header:"style=simple,explode=false,name=Training-Key"`
}

type TrainProjectRequest struct {
	PathParams  TrainProjectPathParams
	QueryParams TrainProjectQueryParams
	Headers     TrainProjectHeaders
}

type TrainProjectResponse struct {
	Body        []byte
	ContentType string
	// Error response
	CustomVisionError *shared.CustomVisionError
	// OK
	Iteration   *shared.Iteration
	StatusCode  int
	RawResponse *http.Response
}
