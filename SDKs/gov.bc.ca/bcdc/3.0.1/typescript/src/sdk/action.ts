/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * CKAN's Action API is a powerful, RPC-style API that exposes all of CKAN's core features to API clients.
 *
 * @see {@link http://docs.ckan.org/en/ckan-2.5.3/api/index.html} - Find out more
 */
export class Action {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get the activity stream of an organization
   *
   * @remarks
   * Return an organization's activity stream
   */
  getActionOrganizationActivityList(
    req: operations.GetActionOrganizationActivityListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationActivityListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationActivityListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_activity_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationActivityListResponse =
        new operations.GetActionOrganizationActivityListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get the activity stream of an organization, HTML format
   *
   * @remarks
   * Return an organization's activity stream as HTML
   */
  getActionOrganizationActivityListHtml(
    req: operations.GetActionOrganizationActivityListHtmlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationActivityListHtmlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationActivityListHtmlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_activity_list_html";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationActivityListHtmlResponse =
        new operations.GetActionOrganizationActivityListHtmlResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get names of organizations that match a query string
   *
   * @remarks
   * Return a list of organization names that contain a string
   */
  getActionOrganizationAutocomplete(
    req: operations.GetActionOrganizationAutocompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationAutocompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationAutocompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_autocomplete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationAutocompleteResponse =
        new operations.GetActionOrganizationAutocompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get number of followers of an organization
   *
   * @remarks
   * Return the number of followers of an organization
   */
  getActionOrganizationFollowerCount(
    req: operations.GetActionOrganizationFollowerCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationFollowerCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationFollowerCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_follower_count";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationFollowerCountResponse =
        new operations.GetActionOrganizationFollowerCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get users following an organization
   *
   * @remarks
   * Return a list of users that are following a given organization
   */
  getActionOrganizationFollowerList(
    req: operations.GetActionOrganizationFollowerListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationFollowerListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationFollowerListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_follower_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationFollowerListResponse =
        new operations.GetActionOrganizationFollowerListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get names of all organizations
   *
   * @remarks
   * Returns the names of all indexed organizations
   */
  getActionOrganizationList(
    req: operations.GetActionOrganizationListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationListResponse =
        new operations.GetActionOrganizationListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get organizations that a user has a given permission for
   *
   * @remarks
   * Return the organizations that the user has a given permission for
   */
  getActionOrganizationListForUser(
    req: operations.GetActionOrganizationListForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationListForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationListForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_list_for_user";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationListForUserResponse =
        new operations.GetActionOrganizationListForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get organization revisions
   *
   * @remarks
   * Return an organization's revisions
   */
  getActionOrganizationRevisionList(
    req: operations.GetActionOrganizationRevisionListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationRevisionListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationRevisionListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_revision_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationRevisionListResponse =
        new operations.GetActionOrganizationRevisionListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get details of a specific organization
   *
   * @remarks
   * Return the details of an organization
   */
  getActionOrganizationShow(
    req: operations.GetActionOrganizationShowRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionOrganizationShowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionOrganizationShowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/organization_show";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionOrganizationShowResponse =
        new operations.GetActionOrganizationShowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get the activity stream of a package (dataset)
   *
   * @remarks
   * Returns a package's activity stream
   */
  getActionPackageActivityList(
    req: operations.GetActionPackageActivityListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageActivityListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageActivityListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/package_activity_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageActivityListResponse =
        new operations.GetActionPackageActivityListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get the activity stream of a package (dataset), HTML format
   *
   * @remarks
   * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn't have any header or footer.
   */
  getActionPackageActivityListHtml(
    req: operations.GetActionPackageActivityListHtmlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageActivityListHtmlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageActivityListHtmlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/package_activity_list_html";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageActivityListHtmlResponse =
        new operations.GetActionPackageActivityListHtmlResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Find packages (datasets) matching a query
   *
   * @remarks
   * Return a list of datasets that match a string
   */
  getActionPackageAutocomplete(
    req: operations.GetActionPackageAutocompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageAutocompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageAutocompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/package_autocomplete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageAutocompleteResponse =
        new operations.GetActionPackageAutocompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of all packages (datasets)
   *
   * @remarks
   * Returns the names of all indexed packages (datasets)
   */
  getActionPackageList(
    req: operations.GetActionPackageListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/package_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageListResponse =
        new operations.GetActionPackageListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get package (dataset) relationships
   *
   * @remarks
   * Return a dataset's relationships
   */
  getActionPackageRelationshipsList(
    req: operations.GetActionPackageRelationshipsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageRelationshipsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageRelationshipsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/package_relationships_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageRelationshipsListResponse =
        new operations.GetActionPackageRelationshipsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get list of revisions for a package (dataset)
   *
   * @remarks
   * Return a dataset's revision as a list of dictionaries
   */
  getActionPackageRevisionList(
    req: operations.GetActionPackageRevisionListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageRevisionListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageRevisionListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/action/package_revision_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageRevisionListResponse =
        new operations.GetActionPackageRevisionListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Find packages (datasets) matching query terms
   *
   * @remarks
   * Searches for packages (datasets) matching the specified query terms
   */
  getActionPackageSearch(
    req: operations.GetActionPackageSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/package_search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageSearchResponse =
        new operations.GetActionPackageSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get metadata about one specific package (dataset)
   *
   * @remarks
   * Returns metadata about the package (dataset) corresponding to the specified unique name
   */
  getActionPackageShow(
    req: operations.GetActionPackageShowRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionPackageShowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionPackageShowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/package_show";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionPackageShowResponse =
        new operations.GetActionPackageShowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets items related to a package (dataset)
   *
   * @remarks
   * Returns a dataset's related items.
   */
  getActionRelatedList(
    req: operations.GetActionRelatedListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionRelatedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionRelatedListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/related_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionRelatedListResponse =
        new operations.GetActionRelatedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Find resources
   *
   * @remarks
   * Returns a dictionary with two fields ``count`` and ``results``.             The ``count`` field contains the total number of Resources                found without the limit or query parameters having an effect.             The ``results`` field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form ``{field}:{term}`` or a list of strings, each of the             same form. Within each string, ``{field}`` is a field or extra             field on the Resource domain object.
   */
  getActionResourceSearch(
    req: operations.GetActionResourceSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionResourceSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionResourceSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/resource_search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionResourceSearchResponse =
        new operations.GetActionResourceSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get metadata for a specific resource
   *
   * @remarks
   * Return the metadata of a resource
   */
  getActionResourceShow(
    req: operations.GetActionResourceShowRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionResourceShowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionResourceShowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/resource_show";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionResourceShowResponse =
        new operations.GetActionResourceShowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get the site status
   *
   * @remarks
   * Returns the site status
   */
  getActionStatusShow(
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionStatusShowResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/status_show";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionStatusShowResponse =
        new operations.GetActionStatusShowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of tags
   *
   * @remarks
   * Returns the names of all indexed tags
   */
  getActionTagList(
    req: operations.GetActionTagListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetActionTagListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetActionTagListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/action/tag_list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetActionTagListResponse =
        new operations.GetActionTagListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
