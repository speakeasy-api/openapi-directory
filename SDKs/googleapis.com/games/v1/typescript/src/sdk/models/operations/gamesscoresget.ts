/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GamesScoresGetSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * The types of ranks to return. If the parameter is omitted, no ranks will be returned.
 */
export enum GamesScoresGetIncludeRankTypeEnum {
  IncludeRankTypeUnspecified = "INCLUDE_RANK_TYPE_UNSPECIFIED",
  All = "ALL",
  Public = "PUBLIC",
  Social = "SOCIAL",
  Friends = "FRIENDS",
}

/**
 * The time span for the scores and ranks you're requesting.
 */
export enum GamesScoresGetTimeSpanEnum {
  ScoreTimeSpanUnspecified = "SCORE_TIME_SPAN_UNSPECIFIED",
  All = "ALL",
  AllTime = "ALL_TIME",
  Weekly = "WEEKLY",
  Daily = "DAILY",
}

export class GamesScoresGetRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * The types of ranks to return. If the parameter is omitted, no ranks will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeRankType",
  })
  includeRankType?: GamesScoresGetIncludeRankTypeEnum;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * The preferred language to use for strings returned by this method.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language",
  })
  language?: string;

  /**
   * The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=leaderboardId",
  })
  leaderboardId: string;

  /**
   * The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * The token returned by the previous request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * A player ID. A value of `me` may be used in place of the authenticated player's ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=playerId",
  })
  playerId: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * The time span for the scores and ranks you're requesting.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=timeSpan",
  })
  timeSpan: GamesScoresGetTimeSpanEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class GamesScoresGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  playerLeaderboardScoreListResponse?: shared.PlayerLeaderboardScoreListResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
