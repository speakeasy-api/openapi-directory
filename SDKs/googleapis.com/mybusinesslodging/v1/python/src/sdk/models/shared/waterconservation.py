"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WaterConservationIndependentOrganizationAuditsWaterUseExceptionEnum(str, Enum):
    r"""Independent organization audits water use exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class WaterConservationLinenReuseProgramExceptionEnum(str, Enum):
    r"""Linen reuse program exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class WaterConservationTowelReuseProgramExceptionEnum(str, Enum):
    r"""Towel reuse program exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class WaterConservationWaterSavingShowersExceptionEnum(str, Enum):
    r"""Water saving showers exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class WaterConservationWaterSavingSinksExceptionEnum(str, Enum):
    r"""Water saving sinks exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class WaterConservationWaterSavingToiletsExceptionEnum(str, Enum):
    r"""Water saving toilets exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WaterConservation:
    r"""Water conservation practices implemented at the hotel."""
    
    independent_organization_audits_water_use: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independentOrganizationAuditsWaterUse'), 'exclude': lambda f: f is None }})
    r"""Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits)."""  
    independent_organization_audits_water_use_exception: Optional[WaterConservationIndependentOrganizationAuditsWaterUseExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independentOrganizationAuditsWaterUseException'), 'exclude': lambda f: f is None }})
    r"""Independent organization audits water use exception."""  
    linen_reuse_program: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linenReuseProgram'), 'exclude': lambda f: f is None }})
    r"""Linen reuse program. The property offers a linen reuse program."""  
    linen_reuse_program_exception: Optional[WaterConservationLinenReuseProgramExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linenReuseProgramException'), 'exclude': lambda f: f is None }})
    r"""Linen reuse program exception."""  
    towel_reuse_program: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('towelReuseProgram'), 'exclude': lambda f: f is None }})
    r"""Towel reuse program. The property offers a towel reuse program."""  
    towel_reuse_program_exception: Optional[WaterConservationTowelReuseProgramExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('towelReuseProgramException'), 'exclude': lambda f: f is None }})
    r"""Towel reuse program exception."""  
    water_saving_showers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingShowers'), 'exclude': lambda f: f is None }})
    r"""Water saving showers. All of the property's guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm)."""  
    water_saving_showers_exception: Optional[WaterConservationWaterSavingShowersExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingShowersException'), 'exclude': lambda f: f is None }})
    r"""Water saving showers exception."""  
    water_saving_sinks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingSinks'), 'exclude': lambda f: f is None }})
    r"""Water saving sinks. All of the property's guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm."""  
    water_saving_sinks_exception: Optional[WaterConservationWaterSavingSinksExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingSinksException'), 'exclude': lambda f: f is None }})
    r"""Water saving sinks exception."""  
    water_saving_toilets: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingToilets'), 'exclude': lambda f: f is None }})
    r"""Water saving toilets. All of the property's toilets use 1.6 gallons per flush, or less."""  
    water_saving_toilets_exception: Optional[WaterConservationWaterSavingToiletsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waterSavingToiletsException'), 'exclude': lambda f: f is None }})
    r"""Water saving toilets exception."""  
    