// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentOptionsCashExceptionEnum - Cash exception.
type PaymentOptionsCashExceptionEnum string

const (
	PaymentOptionsCashExceptionEnumExceptionUnspecified PaymentOptionsCashExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PaymentOptionsCashExceptionEnumUnderConstruction    PaymentOptionsCashExceptionEnum = "UNDER_CONSTRUCTION"
	PaymentOptionsCashExceptionEnumDependentOnSeason    PaymentOptionsCashExceptionEnum = "DEPENDENT_ON_SEASON"
	PaymentOptionsCashExceptionEnumDependentOnDayOfWeek PaymentOptionsCashExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PaymentOptionsCashExceptionEnum) ToPointer() *PaymentOptionsCashExceptionEnum {
	return &e
}

func (e *PaymentOptionsCashExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PaymentOptionsCashExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentOptionsCashExceptionEnum: %v", v)
	}
}

// PaymentOptionsChequeExceptionEnum - Cheque exception.
type PaymentOptionsChequeExceptionEnum string

const (
	PaymentOptionsChequeExceptionEnumExceptionUnspecified PaymentOptionsChequeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PaymentOptionsChequeExceptionEnumUnderConstruction    PaymentOptionsChequeExceptionEnum = "UNDER_CONSTRUCTION"
	PaymentOptionsChequeExceptionEnumDependentOnSeason    PaymentOptionsChequeExceptionEnum = "DEPENDENT_ON_SEASON"
	PaymentOptionsChequeExceptionEnumDependentOnDayOfWeek PaymentOptionsChequeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PaymentOptionsChequeExceptionEnum) ToPointer() *PaymentOptionsChequeExceptionEnum {
	return &e
}

func (e *PaymentOptionsChequeExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PaymentOptionsChequeExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentOptionsChequeExceptionEnum: %v", v)
	}
}

// PaymentOptionsCreditCardExceptionEnum - Credit card exception.
type PaymentOptionsCreditCardExceptionEnum string

const (
	PaymentOptionsCreditCardExceptionEnumExceptionUnspecified PaymentOptionsCreditCardExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PaymentOptionsCreditCardExceptionEnumUnderConstruction    PaymentOptionsCreditCardExceptionEnum = "UNDER_CONSTRUCTION"
	PaymentOptionsCreditCardExceptionEnumDependentOnSeason    PaymentOptionsCreditCardExceptionEnum = "DEPENDENT_ON_SEASON"
	PaymentOptionsCreditCardExceptionEnumDependentOnDayOfWeek PaymentOptionsCreditCardExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PaymentOptionsCreditCardExceptionEnum) ToPointer() *PaymentOptionsCreditCardExceptionEnum {
	return &e
}

func (e *PaymentOptionsCreditCardExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PaymentOptionsCreditCardExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentOptionsCreditCardExceptionEnum: %v", v)
	}
}

// PaymentOptionsDebitCardExceptionEnum - Debit card exception.
type PaymentOptionsDebitCardExceptionEnum string

const (
	PaymentOptionsDebitCardExceptionEnumExceptionUnspecified PaymentOptionsDebitCardExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PaymentOptionsDebitCardExceptionEnumUnderConstruction    PaymentOptionsDebitCardExceptionEnum = "UNDER_CONSTRUCTION"
	PaymentOptionsDebitCardExceptionEnumDependentOnSeason    PaymentOptionsDebitCardExceptionEnum = "DEPENDENT_ON_SEASON"
	PaymentOptionsDebitCardExceptionEnumDependentOnDayOfWeek PaymentOptionsDebitCardExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PaymentOptionsDebitCardExceptionEnum) ToPointer() *PaymentOptionsDebitCardExceptionEnum {
	return &e
}

func (e *PaymentOptionsDebitCardExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PaymentOptionsDebitCardExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentOptionsDebitCardExceptionEnum: %v", v)
	}
}

// PaymentOptionsMobileNfcExceptionEnum - Mobile nfc exception.
type PaymentOptionsMobileNfcExceptionEnum string

const (
	PaymentOptionsMobileNfcExceptionEnumExceptionUnspecified PaymentOptionsMobileNfcExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PaymentOptionsMobileNfcExceptionEnumUnderConstruction    PaymentOptionsMobileNfcExceptionEnum = "UNDER_CONSTRUCTION"
	PaymentOptionsMobileNfcExceptionEnumDependentOnSeason    PaymentOptionsMobileNfcExceptionEnum = "DEPENDENT_ON_SEASON"
	PaymentOptionsMobileNfcExceptionEnumDependentOnDayOfWeek PaymentOptionsMobileNfcExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PaymentOptionsMobileNfcExceptionEnum) ToPointer() *PaymentOptionsMobileNfcExceptionEnum {
	return &e
}

func (e *PaymentOptionsMobileNfcExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PaymentOptionsMobileNfcExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentOptionsMobileNfcExceptionEnum: %v", v)
	}
}

// PaymentOptions - Forms of payment accepted at the property.
type PaymentOptions struct {
	// Cash. The hotel accepts payment by paper/coin currency.
	Cash *bool `json:"cash,omitempty"`
	// Cash exception.
	CashException *PaymentOptionsCashExceptionEnum `json:"cashException,omitempty"`
	// Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.
	Cheque *bool `json:"cheque,omitempty"`
	// Cheque exception.
	ChequeException *PaymentOptionsChequeExceptionEnum `json:"chequeException,omitempty"`
	// Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.
	CreditCard *bool `json:"creditCard,omitempty"`
	// Credit card exception.
	CreditCardException *PaymentOptionsCreditCardExceptionEnum `json:"creditCardException,omitempty"`
	// Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.
	DebitCard *bool `json:"debitCard,omitempty"`
	// Debit card exception.
	DebitCardException *PaymentOptionsDebitCardExceptionEnum `json:"debitCardException,omitempty"`
	// Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.
	MobileNfc *bool `json:"mobileNfc,omitempty"`
	// Mobile nfc exception.
	MobileNfcException *PaymentOptionsMobileNfcExceptionEnum `json:"mobileNfcException,omitempty"`
}
