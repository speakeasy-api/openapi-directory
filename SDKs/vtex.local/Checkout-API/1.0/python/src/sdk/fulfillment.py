"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Fulfillment:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_address_by_postal_code(self, request: operations.GetAddressByPostalCodeRequest) -> operations.GetAddressByPostalCodeResponse:
        r"""Get address by postal code
        Retrieves address information for a given postal code and country.
        
        This request can be used to implement auto complete functionality when a customer needs to fill in an address.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddressByPostalCodeRequest, base_url, '/api/checkout/pub/postal-code/{countryCode}/{postalCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddressByPostalCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def list_pickup_ppoints_by_location(self, request: operations.ListPickupPpointsByLocationRequest) -> operations.ListPickupPpointsByLocationResponse:
        r"""List pickup points by location
        Retrieves information on pickup points close to a given location determined by geocoordinates or postal code.
        
        
        The pickup points returned are not necessarily all active ones. Make sure to validate the information consumed by integrations.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pub/pickup-points'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListPickupPpointsByLocationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPickupPpointsByLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    