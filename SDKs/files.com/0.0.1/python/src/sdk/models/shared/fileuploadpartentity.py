"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileUploadPartEntity:
    r"""Begin file upload"""
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Type of upload"""  
    ask_about_overwrites: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ask_about_overwrites'), 'exclude': lambda f: f is None }})
    r"""If `true`, this file exists and you may wish to ask the user for overwrite confirmation"""  
    available_parts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_parts'), 'exclude': lambda f: f is None }})
    r"""Number of parts in the upload"""  
    expires: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires'), 'exclude': lambda f: f is None }})
    r"""Date/time of when this Upload part expires and the URL cannot be used any more"""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Additional upload headers to provide as part of the upload"""  
    http_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_method'), 'exclude': lambda f: f is None }})
    r"""HTTP Method to use for uploading the part, usually `PUT`"""  
    next_partsize: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_partsize'), 'exclude': lambda f: f is None }})
    r"""Size in bytes for this part"""  
    parallel_parts: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parallel_parts'), 'exclude': lambda f: f is None }})
    r"""If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order."""  
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Additional HTTP parameters to send with the upload"""  
    part_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('part_number'), 'exclude': lambda f: f is None }})
    r"""Number of this upload part"""  
    partsize: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partsize'), 'exclude': lambda f: f is None }})
    r"""Size in bytes for the next upload part"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""New file path"""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref'), 'exclude': lambda f: f is None }})
    r"""Reference name for this upload part"""  
    send: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('send'), 'exclude': lambda f: f is None }})
    r"""Content-Type and File to send"""  
    upload_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_uri'), 'exclude': lambda f: f is None }})
    r"""URI to upload this part to"""  
    