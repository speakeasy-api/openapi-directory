/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>Contains the storage configuration for time series (data streams) that aren't associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren't associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can't disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn't accept time series (data streams) that aren't associated with asset properties.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>
 */
export enum PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

/**
 * Contains information about the storage destination.
 */
export class PutStorageConfigurationRequestBodyMultiLayerStorage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "customerManagedS3Storage" })
  @Type(() => shared.CustomerManagedS3Storage)
  customerManagedS3Storage?: shared.CustomerManagedS3Storage;
}

/**
 * How many days your data is kept in the hot tier. By default, your data is kept indefinitely in the hot tier.
 */
export class PutStorageConfigurationRequestBodyRetentionPeriod extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfDays" })
  numberOfDays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unlimited" })
  unlimited?: boolean;
}

/**
 * <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
 */
export enum PutStorageConfigurationRequestBodyStorageTypeEnum {
  SitewiseDefaultStorage = "SITEWISE_DEFAULT_STORAGE",
  MultiLayerStorage = "MULTI_LAYER_STORAGE",
}

export class PutStorageConfigurationRequestBody extends SpeakeasyBase {
  /**
   * <p>Contains the storage configuration for time series (data streams) that aren't associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren't associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can't disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn't accept time series (data streams) that aren't associated with asset properties.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disassociatedDataStorage" })
  disassociatedDataStorage?: PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum;

  /**
   * Contains information about the storage destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multiLayerStorage" })
  @Type(() => PutStorageConfigurationRequestBodyMultiLayerStorage)
  multiLayerStorage?: PutStorageConfigurationRequestBodyMultiLayerStorage;

  /**
   * How many days your data is kept in the hot tier. By default, your data is kept indefinitely in the hot tier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => PutStorageConfigurationRequestBodyRetentionPeriod)
  retentionPeriod?: PutStorageConfigurationRequestBodyRetentionPeriod;

  /**
   * <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageType" })
  storageType: PutStorageConfigurationRequestBodyStorageTypeEnum;
}

export class PutStorageConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutStorageConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutStorageConfigurationResponse extends SpeakeasyBase {
  /**
   * ConflictingOperationException
   */
  @SpeakeasyMetadata()
  conflictingOperationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putStorageConfigurationResponse?: shared.PutStorageConfigurationResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
