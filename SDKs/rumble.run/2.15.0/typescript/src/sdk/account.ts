/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Account {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a new credential
   */
  createAccountCredential(
    req: shared.CredentialOptions,
    security: operations.CreateAccountCredentialSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountCredentialResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CredentialOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/credentials";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountCredentialSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountCredentialResponse =
        new operations.CreateAccountCredentialResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credential = utils.objectToClass(
              httpRes?.data,
              shared.Credential
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new group
   */
  createAccountGroup(
    req: shared.GroupPost,
    security: operations.CreateAccountGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GroupPost(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountGroupResponse =
        new operations.CreateAccountGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new SSO group mapping
   */
  createAccountGroupMapping(
    req: shared.GroupMapping,
    security: operations.CreateAccountGroupMappingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountGroupMappingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GroupMapping(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/sso/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountGroupMappingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountGroupMappingResponse =
        new operations.CreateAccountGroupMappingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new key
   */
  createAccountKey(
    req: shared.APIKeyOptions,
    security: operations.CreateAccountKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.APIKeyOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountKeyResponse =
        new operations.CreateAccountKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.APIKey);
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new organization
   */
  createAccountOrganization(
    req: shared.OrgOptions,
    security: operations.CreateAccountOrganizationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountOrganizationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.OrgOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/orgs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountOrganizationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountOrganizationResponse =
        new operations.CreateAccountOrganizationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new scan template
   */
  createAccountScanTemplate(
    req: shared.ScanTemplateOptions,
    security: operations.CreateAccountScanTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountScanTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ScanTemplateOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/tasks/templates";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountScanTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountScanTemplateResponse =
        new operations.CreateAccountScanTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ScanTemplate
            );
          }
          break;
        case [400, 401, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new user account
   */
  createAccountUser(
    req: shared.UserOptions,
    security: operations.CreateAccountUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UserOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountUserResponse =
        new operations.CreateAccountUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new user account and send an email invite
   */
  createAccountUserInvite(
    req: shared.UserInviteOptions,
    security: operations.CreateAccountUserInviteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAccountUserInviteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UserInviteOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/users/invite";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAccountUserInviteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAccountUserInviteResponse =
        new operations.CreateAccountUserInviteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Removes the export token from the specified organization
   */
  deleteAccountOrganizationExportToken(
    req: operations.DeleteAccountOrganizationExportTokenRequest,
    security: operations.DeleteAccountOrganizationExportTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAccountOrganizationExportTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAccountOrganizationExportTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/orgs/{org_id}/exportToken",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteAccountOrganizationExportTokenSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAccountOrganizationExportTokenResponse =
        new operations.DeleteAccountOrganizationExportTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * System event log as JSON
   */
  exportEventsJSON(
    req: operations.ExportEventsJSONRequest,
    security: operations.ExportEventsJSONSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportEventsJSONResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportEventsJSONRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/events.json";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportEventsJSONSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportEventsJSONResponse =
        new operations.ExportEventsJSONResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * System event log as JSON line-delimited
   */
  exportEventsJSONL(
    req: operations.ExportEventsJSONLRequest,
    security: operations.ExportEventsJSONLSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportEventsJSONLResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportEventsJSONLRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/events.jsonl";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportEventsJSONLSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportEventsJSONLResponse =
        new operations.ExportEventsJSONLResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all agents across all organizations
   */
  getAccountAgents(
    req: operations.GetAccountAgentsRequest,
    security: operations.GetAccountAgentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountAgentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountAgentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/agents";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountAgentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountAgentsResponse =
        new operations.GetAccountAgentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.agents = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.agents = utils.objectToClass(
              httpRes?.data,
              shared.Agent,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get credential details
   */
  getAccountCredential(
    req: operations.GetAccountCredentialRequest,
    security: operations.GetAccountCredentialSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountCredentialResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountCredentialRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/credentials/{credential_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountCredentialSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountCredentialResponse =
        new operations.GetAccountCredentialResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credential = utils.objectToClass(
              httpRes?.data,
              shared.Credential
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all account credentials
   */
  getAccountCredentials(
    req: operations.GetAccountCredentialsRequest,
    security: operations.GetAccountCredentialsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountCredentialsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountCredentialsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/credentials";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountCredentialsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountCredentialsResponse =
        new operations.GetAccountCredentialsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credentials = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.credentials = utils.objectToClass(
              httpRes?.data,
              shared.Credential,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get group details
   */
  getAccountGroup(
    req: operations.GetAccountGroupRequest,
    security: operations.GetAccountGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/groups/{group_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountGroupResponse =
        new operations.GetAccountGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get SSO group mapping details
   */
  getAccountGroupMapping(
    req: operations.GetAccountGroupMappingRequest,
    security: operations.GetAccountGroupMappingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountGroupMappingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountGroupMappingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/sso/groups/{group_mapping_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountGroupMappingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountGroupMappingResponse =
        new operations.GetAccountGroupMappingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all SSO group mappings
   */
  getAccountGroupMappings(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountGroupMappingsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/sso/groups";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountGroupMappingsResponse =
        new operations.GetAccountGroupMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all groups
   */
  getAccountGroups(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountGroupsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/groups";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountGroupsResponse =
        new operations.GetAccountGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get key details
   */
  getAccountKey(
    req: operations.GetAccountKeyRequest,
    security: operations.GetAccountKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/keys/{key_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountKeyResponse =
        new operations.GetAccountKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all active API keys
   */
  getAccountKeys(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountKeysResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/keys";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountKeysResponse =
        new operations.GetAccountKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeys = utils.objectToClass(
              httpRes?.data,
              shared.APIKey,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get license details
   */
  getAccountLicense(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountLicenseResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/license";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountLicenseResponse =
        new operations.GetAccountLicenseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get organization details
   */
  getAccountOrganization(
    req: operations.GetAccountOrganizationRequest,
    security: operations.GetAccountOrganizationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountOrganizationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountOrganizationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/orgs/{org_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountOrganizationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountOrganizationResponse =
        new operations.GetAccountOrganizationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all organization details
   */
  getAccountOrganizations(
    req: operations.GetAccountOrganizationsRequest,
    security: operations.GetAccountOrganizationsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountOrganizationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountOrganizationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/orgs";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountOrganizationsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountOrganizationsResponse =
        new operations.GetAccountOrganizationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.organizations = utils.objectToClass(
              httpRes?.data,
              shared.Organization,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get scan template details
   */
  getAccountScanTemplate(
    req: operations.GetAccountScanTemplateRequest,
    security: operations.GetAccountScanTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountScanTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountScanTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/tasks/templates/{scan_template_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountScanTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountScanTemplateResponse =
        new operations.GetAccountScanTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ScanTemplate
            );
          }
          break;
        case [401, 404, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all scan templates across all organizations (up to 1000)
   */
  getAccountScanTemplates(
    req: operations.GetAccountScanTemplatesRequest,
    security: operations.GetAccountScanTemplatesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountScanTemplatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountScanTemplatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/tasks/templates";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountScanTemplatesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountScanTemplatesResponse =
        new operations.GetAccountScanTemplatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanTemplates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scanTemplates = utils.objectToClass(
              httpRes?.data,
              shared.ScanTemplate,
              resFieldDepth
            );
          }
          break;
        case [401, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all sites details across all organizations
   */
  getAccountSites(
    req: operations.GetAccountSitesRequest,
    security: operations.GetAccountSitesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountSitesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountSitesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/sites";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountSitesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountSitesResponse =
        new operations.GetAccountSitesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sites = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.sites = utils.objectToClass(
              httpRes?.data,
              shared.Site,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all task details across all organizations (up to 1000)
   */
  getAccountTasks(
    req: operations.GetAccountTasksRequest,
    security: operations.GetAccountTasksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountTasksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountTasksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/tasks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountTasksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountTasksResponse =
        new operations.GetAccountTasksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tasks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tasks = utils.objectToClass(
              httpRes?.data,
              shared.Task,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get user details
   */
  getAccountUser(
    req: operations.GetAccountUserRequest,
    security: operations.GetAccountUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountUserResponse =
        new operations.GetAccountUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get all users
   */
  getAccountUsers(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountUsersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/users";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountUsersResponse =
        new operations.GetAccountUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Remove this credential
   */
  removeAccountCredential(
    req: operations.RemoveAccountCredentialRequest,
    security: operations.RemoveAccountCredentialSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountCredentialResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountCredentialRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/credentials/{credential_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountCredentialSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountCredentialResponse =
        new operations.RemoveAccountCredentialResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove this group
   */
  removeAccountGroup(
    req: operations.RemoveAccountGroupRequest,
    security: operations.RemoveAccountGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/groups/{group_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountGroupResponse =
        new operations.RemoveAccountGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove this SSO group mapping
   */
  removeAccountGroupMapping(
    req: operations.RemoveAccountGroupMappingRequest,
    security: operations.RemoveAccountGroupMappingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountGroupMappingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountGroupMappingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/sso/groups/{group_mapping_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountGroupMappingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountGroupMappingResponse =
        new operations.RemoveAccountGroupMappingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove this key
   */
  removeAccountKey(
    req: operations.RemoveAccountKeyRequest,
    security: operations.RemoveAccountKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/keys/{key_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountKeyResponse =
        new operations.RemoveAccountKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove this organization
   */
  removeAccountOrganization(
    req: operations.RemoveAccountOrganizationRequest,
    security: operations.RemoveAccountOrganizationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountOrganizationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountOrganizationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/orgs/{org_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountOrganizationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountOrganizationResponse =
        new operations.RemoveAccountOrganizationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove scan template
   */
  removeAccountScanTemplate(
    req: operations.RemoveAccountScanTemplateRequest,
    security: operations.RemoveAccountScanTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountScanTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountScanTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/tasks/templates/{scan_template_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountScanTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountScanTemplateResponse =
        new operations.RemoveAccountScanTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ScanTemplate
            );
          }
          break;
        case [401, 404, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove this user
   */
  removeAccountUser(
    req: operations.RemoveAccountUserRequest,
    security: operations.RemoveAccountUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveAccountUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveAccountUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveAccountUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveAccountUserResponse =
        new operations.RemoveAccountUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Resets the user's lockout status
   */
  resetAccountUserLockout(
    req: operations.ResetAccountUserLockoutRequest,
    security: operations.ResetAccountUserLockoutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResetAccountUserLockoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResetAccountUserLockoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}/resetLockout",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResetAccountUserLockoutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResetAccountUserLockoutResponse =
        new operations.ResetAccountUserLockoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Resets the user's MFA tokens
   */
  resetAccountUserMFA(
    req: operations.ResetAccountUserMFARequest,
    security: operations.ResetAccountUserMFASecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResetAccountUserMFAResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResetAccountUserMFARequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}/resetMFA",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResetAccountUserMFASecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResetAccountUserMFAResponse =
        new operations.ResetAccountUserMFAResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Sends the user a password reset email
   */
  resetAccountUserPassword(
    req: operations.ResetAccountUserPasswordRequest,
    security: operations.ResetAccountUserPasswordSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResetAccountUserPasswordResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResetAccountUserPasswordRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}/resetPassword",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResetAccountUserPasswordSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResetAccountUserPasswordResponse =
        new operations.ResetAccountUserPasswordResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Rotates the key secret
   */
  rotateAccountKey(
    req: operations.RotateAccountKeyRequest,
    security: operations.RotateAccountKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RotateAccountKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RotateAccountKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/keys/{key_id}/rotate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RotateAccountKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RotateAccountKeyResponse =
        new operations.RotateAccountKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.APIKey);
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Rotates the organization export token and returns the updated organization
   */
  rotateAccountOrganizationExportToken(
    req: operations.RotateAccountOrganizationExportTokenRequest,
    security: operations.RotateAccountOrganizationExportTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RotateAccountOrganizationExportTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RotateAccountOrganizationExportTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/orgs/{org_id}/exportToken/rotate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RotateAccountOrganizationExportTokenSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RotateAccountOrganizationExportTokenResponse =
        new operations.RotateAccountOrganizationExportTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing group
   */
  updateAccountGroup(
    req: shared.GroupPut,
    security: operations.UpdateAccountGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAccountGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GroupPut(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateAccountGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAccountGroupResponse =
        new operations.UpdateAccountGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing SSO group mapping
   */
  updateAccountGroupMapping(
    req: shared.GroupMapping,
    security: operations.UpdateAccountGroupMappingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAccountGroupMappingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GroupMapping(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/sso/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateAccountGroupMappingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAccountGroupMappingResponse =
        new operations.UpdateAccountGroupMappingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Update organization details
   */
  updateAccountOrganization(
    req: operations.UpdateAccountOrganizationRequest,
    security: operations.UpdateAccountOrganizationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAccountOrganizationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateAccountOrganizationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/orgs/{org_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orgOptions",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateAccountOrganizationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAccountOrganizationResponse =
        new operations.UpdateAccountOrganizationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Update scan template
   */
  updateAccountScanTemplate(
    req: shared.ScanTemplate,
    security: operations.UpdateAccountScanTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAccountScanTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ScanTemplate(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/tasks/templates";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateAccountScanTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAccountScanTemplateResponse =
        new operations.UpdateAccountScanTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ScanTemplate
            );
          }
          break;
        case [400, 401, 404, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a user's details
   */
  updateAccountUser(
    req: operations.UpdateAccountUserRequest,
    security: operations.UpdateAccountUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAccountUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateAccountUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/users/{user_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userOptions",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateAccountUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAccountUserResponse =
        new operations.UpdateAccountUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }
}
