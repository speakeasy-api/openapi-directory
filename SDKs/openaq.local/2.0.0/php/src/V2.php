<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Averages V2 Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetResponse
     */
	public function averagesV2GetV2AveragesGet(
        \OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/averages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AveragesV2GetV2AveragesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides a simple listing of cities within the platform
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetResponse
     */
	public function citiesGetV2CitiesGet(
        \OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cities');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CitiesGetV2CitiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQCitiesResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQCitiesResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Countries Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetResponse
     */
	public function countriesGetV2CountriesCountryIdGet(
        \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/countries/{country_id}', \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesCountryIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQCountriesResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQCountriesResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Countries Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetResponse
     */
	public function countriesGetV2CountriesGet(
        \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/countries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountriesGetV2CountriesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQCountriesResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQCountriesResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Demo
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DemoV2LocationsTilesViewerGetResponse
     */
	public function demoV2LocationsTilesViewerGet(
    ): \OpenAPI\OpenAPI\Models\Operations\DemoV2LocationsTilesViewerGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/viewer');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DemoV2LocationsTilesViewerGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->demoV2LocationsTilesViewerGet200TextHTMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Mobilegentile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse
     */
	public function getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(
        \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf', \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Mobiletile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse
     */
	public function getMobiletileV2LocationsTilesMobileZXYPbfGet(
        \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/mobile/{z}/{x}/{y}.pbf', \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Tile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetResponse
     */
	public function getTileV2LocationsTilesZXYPbfGet(
        \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/{z}/{x}/{y}.pbf', \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTileV2LocationsTilesZXYPbfGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Latest Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetResponse
     */
	public function latestGetV2LatestLocationIdGet(
        \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/latest/{location_id}', \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestLocationIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Latest Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetResponse
     */
	public function latestGetV2LatestGet(
        \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/latest');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LatestGetV2LatestGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Locations Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetResponse
     */
	public function locationsGetV2LocationsLocationIdGet(
        \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/{location_id}', \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsLocationIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Locations Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetResponse
     */
	public function locationsGetV2LocationsGet(
        \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocationsGetV2LocationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Measurements Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetResponse
     */
	public function measurementsGetV2MeasurementsGet(
        \OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/measurements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeasurementsGetV2MeasurementsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->measurementsGetV2MeasurementsGet200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mfr Get
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\MfrGetV2ManufacturersGetResponse
     */
	public function mfrGetV2ManufacturersGet(
    ): \OpenAPI\OpenAPI\Models\Operations\MfrGetV2ManufacturersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/manufacturers');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MfrGetV2ManufacturersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mobilegentilejson
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse
     */
	public function mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet(
    ): \OpenAPI\OpenAPI\Models\Operations\MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/mobile-generalized/tiles.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tileJSON = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TileJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mobiletilejson
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse
     */
	public function mobiletilejsonV2LocationsTilesMobileTilesJsonGet(
    ): \OpenAPI\OpenAPI\Models\Operations\MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/mobile/tiles.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tileJSON = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TileJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Model Get
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ModelGetV2ModelsGetResponse
     */
	public function modelGetV2ModelsGet(
    ): \OpenAPI\OpenAPI\Models\Operations\ModelGetV2ModelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/models');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ModelGetV2ModelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Parameters Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetResponse
     */
	public function parametersGetV2ParametersGet(
        \OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/parameters');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParametersGetV2ParametersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQParametersResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQParametersResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projects Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetResponse
     */
	public function projectsGetV2ProjectsProjectIdGet(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsProjectIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQProjectsResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQProjectsResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projects Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetResponse
     */
	public function projectsGetV2ProjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetV2ProjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQProjectsResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQProjectsResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Readme Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetResponse
     */
	public function readmeGetV2SourcesReadmeSlugGet(
        \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sources/readme/{slug}', \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReadmeGetV2SourcesReadmeSlugGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readmeGetV2SourcesReadmeSlugGet200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sources Get
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetResponse
     */
	public function sourcesGetV2SourcesGet(
        \OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sources');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SourcesGetV2SourcesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Summary Get
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SummaryGetV2SummaryGetResponse
     */
	public function summaryGetV2SummaryGet(
    ): \OpenAPI\OpenAPI\Models\Operations\SummaryGetV2SummaryGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/summary');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SummaryGetV2SummaryGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAQResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAQResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tilejson
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TilejsonV2LocationsTilesTilesJsonGetResponse
     */
	public function tilejsonV2LocationsTilesTilesJsonGet(
    ): \OpenAPI\OpenAPI\Models\Operations\TilejsonV2LocationsTilesTilesJsonGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/locations/tiles/tiles.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TilejsonV2LocationsTilesTilesJsonGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tileJSON = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TileJSON', 'json');
            }
        }

        return $response;
    }
}