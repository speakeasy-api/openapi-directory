// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostFloatingIpsIDActionsChangeDNSPtrPathParams struct {
	// ID of the Floating IP
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostFloatingIpsIDActionsChangeDNSPtrChangeDNSPTRRequest - Select the IP address for which to change the DNS entry by passing `ip`. For a Floating IP of type `ipv4` this must exactly match the IP address of the Floating IP. For a Floating IP of type `ipv6` this must be a single IP within the IPv6 /64 range that belongs to this Floating IP.
//
// The target hostname is set by passing `dns_ptr`.
type PostFloatingIpsIDActionsChangeDNSPtrChangeDNSPTRRequest struct {
	// Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`
	DNSPtr string `json:"dns_ptr"`
	// IP address for which to set the reverse DNS entry
	IP string `json:"ip"`
}

type PostFloatingIpsIDActionsChangeDNSPtrRequest struct {
	PathParams PostFloatingIpsIDActionsChangeDNSPtrPathParams
	// Select the IP address for which to change the DNS entry by passing `ip`. For a Floating IP of type `ipv4` this must exactly match the IP address of the Floating IP. For a Floating IP of type `ipv6` this must be a single IP within the IPv6 /64 range that belongs to this Floating IP.
	//
	// The target hostname is set by passing `dns_ptr`.
	//
	Request *PostFloatingIpsIDActionsChangeDNSPtrChangeDNSPTRRequest `request:"mediaType=application/json"`
}

// PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum - Status of the Action
type PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum string

const (
	PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnumSuccess PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum = "success"
	PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnumRunning PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum = "running"
	PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnumError   PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum = "error"
)

func (e *PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum: %s", s)
	}
}

type PostFloatingIpsIDActionsChangeDNSPtrActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFloatingIpsIDActionsChangeDNSPtrActionResponseActionStatusEnum `json:"status"`
}

// PostFloatingIpsIDActionsChangeDNSPtrActionResponse - The `action` key contains the `change_dns_ptr` Action
type PostFloatingIpsIDActionsChangeDNSPtrActionResponse struct {
	Action PostFloatingIpsIDActionsChangeDNSPtrActionResponseAction `json:"action"`
}

type PostFloatingIpsIDActionsChangeDNSPtrResponse struct {
	// The `action` key contains the `change_dns_ptr` Action
	ActionResponse *PostFloatingIpsIDActionsChangeDNSPtrActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
