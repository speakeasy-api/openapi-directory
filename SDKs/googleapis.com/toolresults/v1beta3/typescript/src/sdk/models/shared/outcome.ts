/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FailureDetail } from "./failuredetail";
import { InconclusiveDetail } from "./inconclusivedetail";
import { SkippedDetail } from "./skippeddetail";
import { SuccessDetail } from "./successdetail";
import { Expose, Type } from "class-transformer";

/**
 * The simplest way to interpret a result. Required
 */
export enum OutcomeSummaryEnum {
  Unset = "unset",
  Success = "success",
  Failure = "failure",
  Inconclusive = "inconclusive",
  Skipped = "skipped",
  Flaky = "flaky",
}

/**
 * Interprets a result so that humans and machines can act on it.
 */
export class Outcome extends SpeakeasyBase {
  /**
   * Details for an outcome with a FAILURE outcome summary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failureDetail" })
  @Type(() => FailureDetail)
  failureDetail?: FailureDetail;

  /**
   * Details for an outcome with an INCONCLUSIVE outcome summary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inconclusiveDetail" })
  @Type(() => InconclusiveDetail)
  inconclusiveDetail?: InconclusiveDetail;

  /**
   * Details for an outcome with a SKIPPED outcome summary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skippedDetail" })
  @Type(() => SkippedDetail)
  skippedDetail?: SkippedDetail;

  /**
   * Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
   */
  @SpeakeasyMetadata()
  @Expose({ name: "successDetail" })
  @Type(() => SuccessDetail)
  successDetail?: SuccessDetail;

  /**
   * The simplest way to interpret a result. Required
   */
  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary?: OutcomeSummaryEnum;
}
