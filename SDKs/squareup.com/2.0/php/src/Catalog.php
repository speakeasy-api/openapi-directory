<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Catalog 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * BatchDeleteCatalogObjects
     * 
     * Deletes a set of [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)s based on the
     * provided list of target IDs and returns a set of successfully deleted IDs in
     * the response. Deletion is a cascading event such that all children of the
     * targeted object are also deleted. For example, deleting a CatalogItem will
     * also delete all of its [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
     * children.
     * 
     * `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted
     * IDs can be deleted. The response will only include IDs that were
     * actually deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchDeleteCatalogObjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchDeleteCatalogObjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchDeleteCatalogObjectsResponse
     */
	public function batchDeleteCatalogObjects(
        \OpenAPI\OpenAPI\Models\Shared\BatchDeleteCatalogObjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchDeleteCatalogObjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchDeleteCatalogObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/batch-delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchDeleteCatalogObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchDeleteCatalogObjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchDeleteCatalogObjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * BatchRetrieveCatalogObjects
     * 
     * Returns a set of objects based on the provided ID.
     * Each [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) returned in the set includes all of its
     * child information including: all of its
     * [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects, references to
     * its [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
     * any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveCatalogObjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveCatalogObjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveCatalogObjectsResponse
     */
	public function batchRetrieveCatalogObjects(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveCatalogObjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveCatalogObjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveCatalogObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/batch-retrieve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveCatalogObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveCatalogObjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveCatalogObjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * BatchUpsertCatalogObjects
     * 
     * Creates or updates up to 10,000 target objects based on the provided
     * list of objects. The target objects are grouped into batches and each batch is
     * inserted/updated in an all-or-nothing manner. If an object within a batch is
     * malformed in some way, or violates a database constraint, the entire batch
     * containing that item will be disregarded. However, other batches in the same
     * request may still succeed. Each batch may contain up to 1,000 objects, and
     * batches will be processed in order as long as the total object count for the
     * request (items, variations, modifier lists, discounts, and taxes) is no more
     * than 10,000.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchUpsertCatalogObjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchUpsertCatalogObjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchUpsertCatalogObjectsResponse
     */
	public function batchUpsertCatalogObjects(
        \OpenAPI\OpenAPI\Models\Shared\BatchUpsertCatalogObjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchUpsertCatalogObjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchUpsertCatalogObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/batch-upsert');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchUpsertCatalogObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchUpsertCatalogObjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchUpsertCatalogObjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CatalogInfo
     * 
     * Retrieves information about the Square Catalog API, such as batch size
     * limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CatalogInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CatalogInfoResponse
     */
	public function catalogInfo(
        \OpenAPI\OpenAPI\Models\Operations\CatalogInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CatalogInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/info');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CatalogInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogInfoResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteCatalogObject
     * 
     * Deletes a single [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the
     * provided ID and returns the set of successfully deleted IDs in the response.
     * Deletion is a cascading event such that all children of the targeted object
     * are also deleted. For example, deleting a [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
     * will also delete all of its
     * [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) children.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectResponse
     */
	public function deleteCatalogObject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/object/{object_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCatalogObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCatalogObjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteCatalogObjectResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListCatalog
     * 
     * Returns a list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s that includes
     * all objects of a set of desired types (for example, all [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
     * and [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects) in the catalog. The `types` parameter
     * is specified as a comma-separated list of valid [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) types:
     * `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.
     * 
     * __Important:__ ListCatalog does not return deleted catalog items. To retrieve
     * deleted catalog items, use [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
     * and set the `include_deleted_objects` attribute value to `true`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCatalogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCatalogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCatalogResponse
     */
	public function listCatalog(
        \OpenAPI\OpenAPI\Models\Operations\ListCatalogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCatalogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCatalogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCatalogRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCatalogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCatalogResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCatalogResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveCatalogObject
     * 
     * Returns a single [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) as a
     * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the provided ID. The returned
     * object includes all of the relevant [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
     * information including: [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
     * children, references to its
     * [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
     * any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectResponse
     */
	public function retrieveCatalogObject(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/object/{object_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveCatalogObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveCatalogObjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveCatalogObjectResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchCatalogItems
     * 
     * Searches for catalog items or item variations by matching supported search attribute values, including
     * custom attribute values, against one or more of the specified query expressions.
     * 
     * This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
     * endpoint in the following aspects:
     * 
     * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
     * - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
     * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
     * - The both endpoints use different call conventions, including the query filter formats.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchCatalogItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchCatalogItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchCatalogItemsResponse
     */
	public function searchCatalogItems(
        \OpenAPI\OpenAPI\Models\Shared\SearchCatalogItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchCatalogItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchCatalogItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/search-catalog-items');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchCatalogItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchCatalogItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchCatalogItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchCatalogObjects
     * 
     * Searches for [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) of any type by matching supported search attribute values,
     * excluding custom attribute values on items or item variations, against one or more of the specified query expressions.
     * 
     * This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
     * endpoint in the following aspects:
     * 
     * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
     * - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
     * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
     * - The both endpoints have different call conventions, including the query filter formats.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchCatalogObjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchCatalogObjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchCatalogObjectsResponse
     */
	public function searchCatalogObjects(
        \OpenAPI\OpenAPI\Models\Shared\SearchCatalogObjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchCatalogObjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchCatalogObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchCatalogObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchCatalogObjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchCatalogObjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateItemModifierLists
     * 
     * Updates the [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects
     * that apply to the targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having
     * to perform an upsert on the entire item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UpdateItemModifierListsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateItemModifierListsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateItemModifierListsResponse
     */
	public function updateItemModifierLists(
        \OpenAPI\OpenAPI\Models\Shared\UpdateItemModifierListsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateItemModifierListsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateItemModifierListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/update-item-modifier-lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateItemModifierListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateItemModifierListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateItemModifierListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateItemTaxes
     * 
     * Updates the [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to the
     * targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having to perform an
     * upsert on the entire item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UpdateItemTaxesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateItemTaxesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateItemTaxesResponse
     */
	public function updateItemTaxes(
        \OpenAPI\OpenAPI\Models\Shared\UpdateItemTaxesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateItemTaxesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateItemTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/update-item-taxes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateItemTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateItemTaxesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateItemTaxesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpsertCatalogObject
     * 
     * Creates or updates the target [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UpsertCatalogObjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpsertCatalogObjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpsertCatalogObjectResponse
     */
	public function upsertCatalogObject(
        \OpenAPI\OpenAPI\Models\Shared\UpsertCatalogObjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpsertCatalogObjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpsertCatalogObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/object');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpsertCatalogObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->upsertCatalogObjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpsertCatalogObjectResponse', 'json');
            }
        }

        return $response;
    }
}