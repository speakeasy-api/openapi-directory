/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Forms {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Change the form with a batch of updates.
   */
  formsFormsBatchUpdate(
    req: operations.FormsFormsBatchUpdateRequest,
    security: operations.FormsFormsBatchUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsBatchUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsBatchUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}:batchUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchUpdateFormRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsBatchUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsBatchUpdateResponse =
        new operations.FormsFormsBatchUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchUpdateFormResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchUpdateFormResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items.
   */
  formsFormsCreate(
    req: operations.FormsFormsCreateRequest,
    security: operations.FormsFormsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/forms";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "formInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsCreateResponse =
        new operations.FormsFormsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.form = utils.objectToClass(httpRes?.data, shared.Form);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a form.
   */
  formsFormsGet(
    req: operations.FormsFormsGetRequest,
    security: operations.FormsFormsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/forms/{formId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsGetResponse =
        new operations.FormsFormsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.form = utils.objectToClass(httpRes?.data, shared.Form);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get one response from the form.
   */
  formsFormsResponsesGet(
    req: operations.FormsFormsResponsesGetRequest,
    security: operations.FormsFormsResponsesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsResponsesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsResponsesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/responses/{responseId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsResponsesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsResponsesGetResponse =
        new operations.FormsFormsResponsesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.formResponse = utils.objectToClass(
              httpRes?.data,
              shared.FormResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List a form's responses.
   */
  formsFormsResponsesList(
    req: operations.FormsFormsResponsesListRequest,
    security: operations.FormsFormsResponsesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsResponsesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsResponsesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/responses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsResponsesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsResponsesListResponse =
        new operations.FormsFormsResponsesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFormResponsesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFormResponsesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).
   */
  formsFormsWatchesCreate(
    req: operations.FormsFormsWatchesCreateRequest,
    security: operations.FormsFormsWatchesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsWatchesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsWatchesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/watches",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createWatchRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsWatchesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsWatchesCreateResponse =
        new operations.FormsFormsWatchesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.watch = utils.objectToClass(httpRes?.data, shared.Watch);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a watch.
   */
  formsFormsWatchesDelete(
    req: operations.FormsFormsWatchesDeleteRequest,
    security: operations.FormsFormsWatchesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsWatchesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsWatchesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/watches/{watchId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsWatchesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsWatchesDeleteResponse =
        new operations.FormsFormsWatchesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form.
   */
  formsFormsWatchesList(
    req: operations.FormsFormsWatchesListRequest,
    security: operations.FormsFormsWatchesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsWatchesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsWatchesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/watches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsWatchesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsWatchesListResponse =
        new operations.FormsFormsWatchesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWatchesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWatchesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Renew an existing watch for seven days. The state of the watch after renewal is `ACTIVE`, and the `expire_time` is seven days from the renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns `NOT_FOUND`.
   */
  formsFormsWatchesRenew(
    req: operations.FormsFormsWatchesRenewRequest,
    security: operations.FormsFormsWatchesRenewSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FormsFormsWatchesRenewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FormsFormsWatchesRenewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/forms/{formId}/watches/{watchId}:renew",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FormsFormsWatchesRenewSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FormsFormsWatchesRenewResponse =
        new operations.FormsFormsWatchesRenewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.watch = utils.objectToClass(httpRes?.data, shared.Watch);
          }
          break;
      }

      return res;
    });
  }
}
