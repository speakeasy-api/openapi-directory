"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildsListToolsetsResponse = exports.BuildsListToolsets200ApplicationJSON = exports.BuildsListToolsets200ApplicationJSONXcode = exports.BuildsListToolsets200ApplicationJSONXamarin = exports.BuildsListToolsets200ApplicationJSONNode = exports.BuildsListToolsetsDefaultApplicationJSON = exports.BuildsListToolsetsRequest = exports.BuildsListToolsetsToolsEnum = exports.BuildsListToolsetsSecurity = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var BuildsListToolsetsSecurity = /** @class */ (function (_super) {
    __extends(BuildsListToolsetsSecurity, _super);
    function BuildsListToolsetsSecurity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
        }),
        __metadata("design:type", String)
    ], BuildsListToolsetsSecurity.prototype, "apiToken", void 0);
    return BuildsListToolsetsSecurity;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsetsSecurity = BuildsListToolsetsSecurity;
/**
 * Toolset name
 */
var BuildsListToolsetsToolsEnum;
(function (BuildsListToolsetsToolsEnum) {
    BuildsListToolsetsToolsEnum["Xamarin"] = "xamarin";
    BuildsListToolsetsToolsEnum["Xcode"] = "xcode";
    BuildsListToolsetsToolsEnum["Node"] = "node";
})(BuildsListToolsetsToolsEnum = exports.BuildsListToolsetsToolsEnum || (exports.BuildsListToolsetsToolsEnum = {}));
var BuildsListToolsetsRequest = /** @class */ (function (_super) {
    __extends(BuildsListToolsetsRequest, _super);
    function BuildsListToolsetsRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=app_name",
        }),
        __metadata("design:type", String)
    ], BuildsListToolsetsRequest.prototype, "appName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=owner_name",
        }),
        __metadata("design:type", String)
    ], BuildsListToolsetsRequest.prototype, "ownerName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=tools" }),
        __metadata("design:type", String)
    ], BuildsListToolsetsRequest.prototype, "tools", void 0);
    return BuildsListToolsetsRequest;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsetsRequest = BuildsListToolsetsRequest;
/**
 * Bad Request
 */
var BuildsListToolsetsDefaultApplicationJSON = /** @class */ (function (_super) {
    __extends(BuildsListToolsetsDefaultApplicationJSON, _super);
    function BuildsListToolsetsDefaultApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], BuildsListToolsetsDefaultApplicationJSON.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], BuildsListToolsetsDefaultApplicationJSON.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], BuildsListToolsetsDefaultApplicationJSON.prototype, "message", void 0);
    return BuildsListToolsetsDefaultApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsetsDefaultApplicationJSON = BuildsListToolsetsDefaultApplicationJSON;
/**
 * The Node version
 */
var BuildsListToolsets200ApplicationJSONNode = /** @class */ (function (_super) {
    __extends(BuildsListToolsets200ApplicationJSONNode, _super);
    function BuildsListToolsets200ApplicationJSONNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "current" }),
        __metadata("design:type", Boolean)
    ], BuildsListToolsets200ApplicationJSONNode.prototype, "current", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], BuildsListToolsets200ApplicationJSONNode.prototype, "name", void 0);
    return BuildsListToolsets200ApplicationJSONNode;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsets200ApplicationJSONNode = BuildsListToolsets200ApplicationJSONNode;
/**
 * The Xamarin SDK bundle
 */
var BuildsListToolsets200ApplicationJSONXamarin = /** @class */ (function (_super) {
    __extends(BuildsListToolsets200ApplicationJSONXamarin, _super);
    function BuildsListToolsets200ApplicationJSONXamarin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "current" }),
        __metadata("design:type", Boolean)
    ], BuildsListToolsets200ApplicationJSONXamarin.prototype, "current", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "monoVersion" }),
        __metadata("design:type", String)
    ], BuildsListToolsets200ApplicationJSONXamarin.prototype, "monoVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sdkBundle" }),
        __metadata("design:type", String)
    ], BuildsListToolsets200ApplicationJSONXamarin.prototype, "sdkBundle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stable" }),
        __metadata("design:type", Boolean)
    ], BuildsListToolsets200ApplicationJSONXamarin.prototype, "stable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "xcodeVersions" }),
        __metadata("design:type", Array)
    ], BuildsListToolsets200ApplicationJSONXamarin.prototype, "xcodeVersions", void 0);
    return BuildsListToolsets200ApplicationJSONXamarin;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsets200ApplicationJSONXamarin = BuildsListToolsets200ApplicationJSONXamarin;
/**
 * The Xcode version
 */
var BuildsListToolsets200ApplicationJSONXcode = /** @class */ (function (_super) {
    __extends(BuildsListToolsets200ApplicationJSONXcode, _super);
    function BuildsListToolsets200ApplicationJSONXcode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "current" }),
        __metadata("design:type", Boolean)
    ], BuildsListToolsets200ApplicationJSONXcode.prototype, "current", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], BuildsListToolsets200ApplicationJSONXcode.prototype, "name", void 0);
    return BuildsListToolsets200ApplicationJSONXcode;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsets200ApplicationJSONXcode = BuildsListToolsets200ApplicationJSONXcode;
/**
 * Set of toolsets available for app
 */
var BuildsListToolsets200ApplicationJSON = /** @class */ (function (_super) {
    __extends(BuildsListToolsets200ApplicationJSON, _super);
    function BuildsListToolsets200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: BuildsListToolsets200ApplicationJSONNode }),
        (0, class_transformer_1.Expose)({ name: "node" }),
        (0, class_transformer_1.Type)(function () { return BuildsListToolsets200ApplicationJSONNode; }),
        __metadata("design:type", Array)
    ], BuildsListToolsets200ApplicationJSON.prototype, "node", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: BuildsListToolsets200ApplicationJSONXamarin }),
        (0, class_transformer_1.Expose)({ name: "xamarin" }),
        (0, class_transformer_1.Type)(function () { return BuildsListToolsets200ApplicationJSONXamarin; }),
        __metadata("design:type", Array)
    ], BuildsListToolsets200ApplicationJSON.prototype, "xamarin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: BuildsListToolsets200ApplicationJSONXcode }),
        (0, class_transformer_1.Expose)({ name: "xcode" }),
        (0, class_transformer_1.Type)(function () { return BuildsListToolsets200ApplicationJSONXcode; }),
        __metadata("design:type", Array)
    ], BuildsListToolsets200ApplicationJSON.prototype, "xcode", void 0);
    return BuildsListToolsets200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsets200ApplicationJSON = BuildsListToolsets200ApplicationJSON;
var BuildsListToolsetsResponse = /** @class */ (function (_super) {
    __extends(BuildsListToolsetsResponse, _super);
    function BuildsListToolsetsResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], BuildsListToolsetsResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], BuildsListToolsetsResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], BuildsListToolsetsResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", BuildsListToolsets200ApplicationJSON)
    ], BuildsListToolsetsResponse.prototype, "buildsListToolsets200ApplicationJSONObject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", BuildsListToolsetsDefaultApplicationJSON)
    ], BuildsListToolsetsResponse.prototype, "buildsListToolsetsDefaultApplicationJSONObject", void 0);
    return BuildsListToolsetsResponse;
}(utils_1.SpeakeasyBase));
exports.BuildsListToolsetsResponse = BuildsListToolsetsResponse;
