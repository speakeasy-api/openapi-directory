"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ExceptionFramesLanguageEnum(str, Enum):
    r"""programming language of the frame"""
    JAVA_SCRIPT = 'JavaScript'
    C_SHARP = 'CSharp'
    OBJECTIVE_C = 'Objective-C'
    OBJECTIVE_CPP = 'Objective-Cpp'
    CPP = 'Cpp'
    C = 'C'
    SWIFT = 'Swift'
    JAVA = 'Java'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExceptionFrames:
    r"""a single frame of a stack trace"""
    
    app_code: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_code') }})
    r"""this line isn't from any framework"""  
    code_formatted: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_formatted') }})
    r"""Formatted frame string"""  
    code_raw: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_raw') }})
    r"""Raw frame string"""  
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""address of the frame"""  
    class_method: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('class_method'), 'exclude': lambda f: f is None }})
    r"""is a class method"""  
    class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('class_name'), 'exclude': lambda f: f is None }})
    r"""name of the class"""  
    file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""name of the file"""  
    framework_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('framework_name'), 'exclude': lambda f: f is None }})
    r"""Name of the framework"""  
    language: Optional[ExceptionFramesLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""programming language of the frame"""  
    line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""line number"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""name of the method"""  
    method_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method_params'), 'exclude': lambda f: f is None }})
    r"""parameters of the frames method"""  
    relevant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relevant'), 'exclude': lambda f: f is None }})
    r"""frame should be shown always"""  
    
class ExceptionPlatformEnum(str, Enum):
    r"""SDK/Platform this thread is beeing generated from"""
    IOS = 'ios'
    ANDROID = 'android'
    XAMARIN = 'xamarin'
    REACT_NATIVE = 'react-native'
    NDK = 'ndk'
    UNITY = 'unity'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExceptionT:
    r"""a exception"""
    
    frames: list[ExceptionFrames] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frames') }})
    r"""frames of the excetpion"""  
    inner_exceptions: Optional[list[ExceptionT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inner_exceptions'), 'exclude': lambda f: f is None }})  
    platform: Optional[ExceptionPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""SDK/Platform this thread is beeing generated from"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Reason of the exception"""  
    relevant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relevant'), 'exclude': lambda f: f is None }})
    r"""relevant exception (crashed)"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the exception (NSSomethingException, NullPointerException)"""  
    