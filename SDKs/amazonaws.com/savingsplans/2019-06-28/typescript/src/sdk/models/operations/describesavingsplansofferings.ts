/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The product type.
 */
export enum DescribeSavingsPlansOfferingsRequestBodyProductTypeEnum {
  Ec2 = "EC2",
  Fargate = "Fargate",
  Lambda = "Lambda",
  SageMaker = "SageMaker",
}

export class DescribeSavingsPlansOfferingsRequestBody extends SpeakeasyBase {
  /**
   * The currencies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencies" })
  currencies?: shared.CurrencyCodeEnum[];

  /**
   * The descriptions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptions" })
  descriptions?: string[];

  /**
   * The durations, in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durations" })
  durations?: number[];

  /**
   * The filters.
   */
  @SpeakeasyMetadata({ elemType: shared.SavingsPlanOfferingFilterElement })
  @Expose({ name: "filters" })
  @Type(() => shared.SavingsPlanOfferingFilterElement)
  filters?: shared.SavingsPlanOfferingFilterElement[];

  /**
   * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The token for the next page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * The IDs of the offerings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offeringIds" })
  offeringIds?: string[];

  /**
   * The specific AWS operation for the line item in the billing report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operations" })
  operations?: string[];

  /**
   * The payment options.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentOptions" })
  paymentOptions?: shared.SavingsPlanPaymentOptionEnum[];

  /**
   * The plan type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "planTypes" })
  planTypes?: shared.SavingsPlanTypeEnum[];

  /**
   * The product type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productType" })
  productType?: DescribeSavingsPlansOfferingsRequestBodyProductTypeEnum;

  /**
   * The services.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceCodes" })
  serviceCodes?: string[];

  /**
   * The usage details of the line item in the billing report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "usageTypes" })
  usageTypes?: string[];
}

export class DescribeSavingsPlansOfferingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DescribeSavingsPlansOfferingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class DescribeSavingsPlansOfferingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeSavingsPlansOfferingsResponse?: shared.DescribeSavingsPlansOfferingsResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
