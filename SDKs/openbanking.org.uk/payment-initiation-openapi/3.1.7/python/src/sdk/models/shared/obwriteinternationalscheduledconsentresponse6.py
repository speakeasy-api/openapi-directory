"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import links as shared_links
from ..shared import meta as shared_meta
from ..shared import obactiveorhistoriccurrencyandamount as shared_obactiveorhistoriccurrencyandamount
from ..shared import obcashaccountdebtor4 as shared_obcashaccountdebtor4
from ..shared import obchargebearertype1code_enum as shared_obchargebearertype1code_enum
from ..shared import obpostaladdress6 as shared_obpostaladdress6
from ..shared import obrisk1 as shared_obrisk1
from ..shared import obscasupportdata1 as shared_obscasupportdata1
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum(str, Enum):
    r"""Type of authorisation flow requested."""
    ANY = 'Any'
    SINGLE = 'Single'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataAuthorisation:
    r"""The authorisation type request from the TPP."""
    
    authorisation_type: OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorisationType') }})
    r"""Type of authorisation flow requested."""  
    completion_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataCharges:
    r"""Set of elements used to provide details of a charge for the payment initiation."""
    
    amount: shared_obactiveorhistoriccurrencyandamount.OBActiveOrHistoricCurrencyAndAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""Amount of money associated with the charge type."""  
    charge_bearer: shared_obchargebearertype1code_enum.OBChargeBearerType1CodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeBearer') }})
    r"""Specifies which party/parties will bear the charges associated with the processing of the payment transaction."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})
    r"""Charge type, in a coded form."""  
    
class OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum(str, Enum):
    r"""Specifies the type used to complete the currency exchange."""
    ACTUAL = 'Actual'
    AGREED = 'Agreed'
    INDICATIVE = 'Indicative'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation:
    r"""Further detailed information on the exchange rate that has been used in the payment transaction."""
    
    exchange_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRate') }})
    r"""The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency."""  
    rate_type: OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RateType') }})
    r"""Specifies the type used to complete the currency exchange."""  
    unit_currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnitCurrency') }})
    r"""Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP."""  
    contract_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractIdentification'), 'exclude': lambda f: f is None }})
    r"""Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent."""  
    expiration_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor:
    r"""Party to which an amount of money is due."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name by which a party is known and which is usually used to identify that party."""  
    postal_address: Optional[shared_obpostaladdress6.OBPostalAddress6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalAddress'), 'exclude': lambda f: f is None }})
    r"""Information that locates and identifies a specific address, as defined by postal services."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount:
    r"""Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The account name is the name or names of the account owner(s) represented at an account level.
    Note, the account name is not the product name or the nickname of the account.
    OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
    """  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent:
    r"""Financial institution servicing an account for the creditor."""
    
    identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification'), 'exclude': lambda f: f is None }})
    r"""Unique and unambiguous identification of a financial institution or a branch of a financial institution."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name by which an agent is known and which is usually used to identify that agent."""  
    postal_address: Optional[shared_obpostaladdress6.OBPostalAddress6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalAddress'), 'exclude': lambda f: f is None }})
    r"""Information that locates and identifies a specific address, as defined by postal services."""  
    scheme_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName'), 'exclude': lambda f: f is None }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount:
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
    Note, the account name is not the product name or the nickname of the account.
    """  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    
class OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum(str, Enum):
    r"""Specifies the type used to complete the currency exchange."""
    ACTUAL = 'Actual'
    AGREED = 'Agreed'
    INDICATIVE = 'Indicative'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation:
    r"""Provides details on the currency exchange rate and contract."""
    
    rate_type: OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RateType') }})
    r"""Specifies the type used to complete the currency exchange."""  
    unit_currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnitCurrency') }})
    r"""Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP."""  
    contract_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractIdentification'), 'exclude': lambda f: f is None }})
    r"""Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent."""  
    exchange_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRate'), 'exclude': lambda f: f is None }})
    r"""The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount:
    r"""Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    Usage: This amount has to be transported unchanged through the transaction chain.
    """
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \\"Codes for the representation of currencies and funds\\"."""  
    
class OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum(str, Enum):
    r"""Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction."""
    NORMAL = 'Normal'
    URGENT = 'Urgent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation:
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""
    
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
    Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
    If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
    OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
    """  
    unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unstructured'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6DataInitiation:
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment."""
    
    creditor_account: OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditorAccount') }})
    r"""Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction."""  
    currency_of_transfer: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrencyOfTransfer') }})
    r"""Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account."""  
    instructed_amount: OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstructedAmount') }})
    r"""Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    Usage: This amount has to be transported unchanged through the transaction chain.
    """  
    instruction_identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstructionIdentification') }})
    r"""Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
    Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
    """  
    requested_execution_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedExecutionDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date at which the initiating party requests the clearing agent to process the payment.
    Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    charge_bearer: Optional[shared_obchargebearertype1code_enum.OBChargeBearerType1CodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeBearer'), 'exclude': lambda f: f is None }})
    r"""Specifies which party/parties will bear the charges associated with the processing of the payment transaction."""  
    creditor: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Creditor'), 'exclude': lambda f: f is None }})
    r"""Party to which an amount of money is due."""  
    creditor_agent: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditorAgent'), 'exclude': lambda f: f is None }})
    r"""Financial institution servicing an account for the creditor."""  
    debtor_account: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebtorAccount'), 'exclude': lambda f: f is None }})
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""  
    destination_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationCountryCode'), 'exclude': lambda f: f is None }})
    r"""Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code)."""  
    end_to_end_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndToEndIdentification'), 'exclude': lambda f: f is None }})
    r"""Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
    Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
    OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
    """  
    exchange_rate_information: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRateInformation'), 'exclude': lambda f: f is None }})
    r"""Provides details on the currency exchange rate and contract."""  
    extended_purpose: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtendedPurpose'), 'exclude': lambda f: f is None }})
    r"""Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes."""  
    instruction_priority: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstructionPriority'), 'exclude': lambda f: f is None }})
    r"""Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction."""  
    local_instrument: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalInstrument'), 'exclude': lambda f: f is None }})
    r"""User community specific instrument.
    Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
    """  
    purpose: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Purpose'), 'exclude': lambda f: f is None }})
    r"""Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
    The list of valid codes is an external code list published separately.
    External code sets can be downloaded from www.iso20022.org.
    """  
    remittance_information: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemittanceInformation'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""  
    supplementary_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupplementaryData'), 'exclude': lambda f: f is None }})
    r"""Additional information that can not be captured in the structured fields and/or any other specific block."""  
    
class OBWriteInternationalScheduledConsentResponse6DataPermissionEnum(str, Enum):
    r"""Specifies the Open Banking service request types."""
    CREATE = 'Create'

class OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum(str, Enum):
    r"""Specifies to share the refund account details with PISP"""
    NO = 'No'
    YES = 'Yes'

class OBWriteInternationalScheduledConsentResponse6DataStatusEnum(str, Enum):
    r"""Specifies the status of consent resource in code form."""
    AUTHORISED = 'Authorised'
    AWAITING_AUTHORISATION = 'AwaitingAuthorisation'
    CONSUMED = 'Consumed'
    REJECTED = 'Rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6Data:
    
    consent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsentId') }})
    r"""OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource."""  
    creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    initiation: OBWriteInternationalScheduledConsentResponse6DataInitiation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initiation') }})
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment."""  
    permission: OBWriteInternationalScheduledConsentResponse6DataPermissionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permission') }})
    r"""Specifies the Open Banking service request types."""  
    status: OBWriteInternationalScheduledConsentResponse6DataStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})
    r"""Specifies the status of consent resource in code form."""  
    status_update_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusUpdateDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    authorisation: Optional[OBWriteInternationalScheduledConsentResponse6DataAuthorisation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Authorisation'), 'exclude': lambda f: f is None }})
    r"""The authorisation type request from the TPP."""  
    charges: Optional[list[OBWriteInternationalScheduledConsentResponse6DataCharges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Charges'), 'exclude': lambda f: f is None }})  
    cut_off_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CutOffDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    debtor: Optional[shared_obcashaccountdebtor4.OBCashAccountDebtor4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Debtor'), 'exclude': lambda f: f is None }})
    r"""^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent."""  
    exchange_rate_information: Optional[OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRateInformation'), 'exclude': lambda f: f is None }})
    r"""Further detailed information on the exchange rate that has been used in the payment transaction."""  
    expected_execution_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedExecutionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    expected_settlement_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedSettlementDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    read_refund_account: Optional[OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadRefundAccount'), 'exclude': lambda f: f is None }})
    r"""Specifies to share the refund account details with PISP"""  
    sca_support_data: Optional[shared_obscasupportdata1.OBSCASupportData1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SCASupportData'), 'exclude': lambda f: f is None }})
    r"""Supporting Data provided by TPP, when requesting SCA Exemption."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteInternationalScheduledConsentResponse6:
    r"""International Scheduled Payment Consents Created"""
    
    data: OBWriteInternationalScheduledConsentResponse6Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    risk: shared_obrisk1.OBRisk1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Risk') }})
    r"""The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments."""  
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Links'), 'exclude': lambda f: f is None }})
    r"""Links relevant to the payload"""  
    meta: Optional[shared_meta.Meta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Meta'), 'exclude': lambda f: f is None }})
    r"""Meta Data relevant to the payload"""  
    