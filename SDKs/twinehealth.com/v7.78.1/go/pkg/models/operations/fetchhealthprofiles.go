// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// FetchHealthProfilesIncludeEnum - List of related resources to include in the response
type FetchHealthProfilesIncludeEnum string

const (
	FetchHealthProfilesIncludeEnumPatient   FetchHealthProfilesIncludeEnum = "patient"
	FetchHealthProfilesIncludeEnumQuestions FetchHealthProfilesIncludeEnum = "questions"
)

func (e *FetchHealthProfilesIncludeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "patient":
		fallthrough
	case "questions":
		*e = FetchHealthProfilesIncludeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchHealthProfilesIncludeEnum: %s", s)
	}
}

type FetchHealthProfilesQueryParams struct {
	// Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
	//
	FilterGroups *string `queryParam:"style=form,explode=true,name=filter[groups]"`
	// Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
	//
	FilterOrganization *string `queryParam:"style=form,explode=true,name=filter[organization]"`
	// Patient id to fetch health profile. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
	//
	FilterPatient *string `queryParam:"style=form,explode=true,name=filter[patient]"`
	// List of related resources to include in the response
	Include *FetchHealthProfilesIncludeEnum `queryParam:"style=form,explode=true,name=include"`
	// Page cursor
	PageCursor *string `queryParam:"style=form,explode=true,name=page[cursor]"`
	// Page limit
	PageLimit *int64 `queryParam:"style=form,explode=true,name=page[limit]"`
	// Page number
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Page size
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
}

type FetchHealthProfilesRequest struct {
	QueryParams FetchHealthProfilesQueryParams
}

type FetchHealthProfilesResponse struct {
	ContentType string
	// Unauthorized
	FetchErrorResponse *shared.FetchErrorResponse
	// OK
	FetchHealthProfilesResponse *shared.FetchHealthProfilesResponse
	StatusCode                  int
	RawResponse                 *http.Response
}
