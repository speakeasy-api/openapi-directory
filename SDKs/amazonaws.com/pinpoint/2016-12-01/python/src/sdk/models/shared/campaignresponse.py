"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import campaignhook as shared_campaignhook
from ..shared import campaignlimits as shared_campaignlimits
from ..shared import campaignstate as shared_campaignstate
from ..shared import customdeliveryconfiguration as shared_customdeliveryconfiguration
from ..shared import messageconfiguration as shared_messageconfiguration
from ..shared import schedule as shared_schedule
from ..shared import templateconfiguration as shared_templateconfiguration
from ..shared import treatmentresource as shared_treatmentresource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CampaignResponse:
    r"""Provides information about the status, configuration, and other settings for a campaign."""
    
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationId') }})  
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn') }})  
    creation_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    last_modified_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedDate') }})  
    segment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentId') }})  
    segment_version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentVersion') }})  
    additional_treatments: Optional[list[shared_treatmentresource.TreatmentResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalTreatments'), 'exclude': lambda f: f is None }})  
    custom_delivery_configuration: Optional[shared_customdeliveryconfiguration.CustomDeliveryConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomDeliveryConfiguration'), 'exclude': lambda f: f is None }})  
    default_state: Optional[shared_campaignstate.CampaignState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultState'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    holdout_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HoldoutPercent'), 'exclude': lambda f: f is None }})  
    hook: Optional[shared_campaignhook.CampaignHook] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Hook'), 'exclude': lambda f: f is None }})  
    is_paused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsPaused'), 'exclude': lambda f: f is None }})  
    limits: Optional[shared_campaignlimits.CampaignLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limits'), 'exclude': lambda f: f is None }})  
    message_configuration: Optional[shared_messageconfiguration.MessageConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageConfiguration'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Priority'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_schedule.Schedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_campaignstate.CampaignState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    template_configuration: Optional[shared_templateconfiguration.TemplateConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateConfiguration'), 'exclude': lambda f: f is None }})  
    treatment_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TreatmentDescription'), 'exclude': lambda f: f is None }})  
    treatment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TreatmentName'), 'exclude': lambda f: f is None }})  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})  
    