"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def artifactregistry_projects_locations_list(self, request: operations.ArtifactregistryProjectsLocationsListRequest, security: operations.ArtifactregistryProjectsLocationsListSecurity) -> operations.ArtifactregistryProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsListRequest, base_url, '/v1beta1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def artifactregistry_projects_locations_repositories_create(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesCreateRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesCreateSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesCreateResponse:
        r"""Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesCreateRequest, base_url, '/v1beta1/{parent}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "repository_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def artifactregistry_projects_locations_repositories_files_list(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesFilesListRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesFilesListSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesFilesListResponse:
        r"""Lists files."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesFilesListRequest, base_url, '/v1beta1/{parent}/files', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesFilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFilesResponse])
                res.list_files_response = out

        return res

    def artifactregistry_projects_locations_repositories_get_iam_policy(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicySecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse:
        r"""Gets the IAM policy for a given resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def artifactregistry_projects_locations_repositories_list(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesListRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesListSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesListResponse:
        r"""Lists repositories."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesListRequest, base_url, '/v1beta1/{parent}/repositories', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRepositoriesResponse])
                res.list_repositories_response = out

        return res

    def artifactregistry_projects_locations_repositories_packages_list(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse:
        r"""Lists packages."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest, base_url, '/v1beta1/{parent}/packages', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPackagesResponse])
                res.list_packages_response = out

        return res

    def artifactregistry_projects_locations_repositories_packages_tags_create(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse:
        r"""Creates a tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest, base_url, '/v1beta1/{parent}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out

        return res

    def artifactregistry_projects_locations_repositories_packages_tags_list(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse:
        r"""Lists tags."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest, base_url, '/v1beta1/{parent}/tags', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagsResponse])
                res.list_tags_response = out

        return res

    def artifactregistry_projects_locations_repositories_packages_tags_patch(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse:
        r"""Updates a tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out

        return res

    def artifactregistry_projects_locations_repositories_packages_versions_delete(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse:
        r"""Deletes a version and all of its content. The returned operation will complete once the version has been deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def artifactregistry_projects_locations_repositories_packages_versions_get(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse:
        r"""Gets a version"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def artifactregistry_projects_locations_repositories_packages_versions_list(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse:
        r"""Lists versions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVersionsResponse])
                res.list_versions_response = out

        return res

    def artifactregistry_projects_locations_repositories_set_iam_policy(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicySecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse:
        r"""Updates the IAM policy for a given resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def artifactregistry_projects_locations_repositories_test_iam_permissions(self, request: operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest, security: operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsSecurity) -> operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse:
        r"""Tests if the caller has a list of permissions on a resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    