// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BatchStatusEnum - A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready
type BatchStatusEnum string

const (
	BatchStatusEnumNew         BatchStatusEnum = "NEW"
	BatchStatusEnumValidating  BatchStatusEnum = "VALIDATING"
	BatchStatusEnumErrors      BatchStatusEnum = "ERRORS"
	BatchStatusEnumSourceError BatchStatusEnum = "SOURCE_ERROR"
	BatchStatusEnumActive      BatchStatusEnum = "ACTIVE"
)

func (e *BatchStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NEW":
		fallthrough
	case "VALIDATING":
		fallthrough
	case "ERRORS":
		fallthrough
	case "SOURCE_ERROR":
		fallthrough
	case "ACTIVE":
		*e = BatchStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchStatusEnum: %s", s)
	}
}

// Batch - A batch represents a group of contacts which can be dialed or texted via call/text broadcast
type Batch struct {
	// An id of broadcast which batch belongs to
	BroadcastID *int64 `json:"broadcastId,omitempty"`
	// A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	Created *int64 `json:"created,omitempty"`
	// An enabled batch. If batch is disabled its contacts remain undialed/untexted
	Enabled *bool `json:"enabled,omitempty"`
	// A id of a batch
	ID *int64 `json:"id,omitempty"`
	// A batch name
	Name *string `json:"name,omitempty"`
	// A number of contacts remaining undialed/untexted
	Remaining *int `json:"remaining,omitempty"`
	// A total number of contacts in batch
	Size *int `json:"size,omitempty"`
	// A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready
	Status *BatchStatusEnum `json:"status,omitempty"`
}

// BatchInput - A batch represents a group of contacts which can be dialed or texted via call/text broadcast
type BatchInput struct {
	// An id of broadcast which batch belongs to
	BroadcastID *int64 `json:"broadcastId,omitempty"`
	// An enabled batch. If batch is disabled its contacts remain undialed/untexted
	Enabled *bool `json:"enabled,omitempty"`
	// A id of a batch
	ID *int64 `json:"id,omitempty"`
	// A batch name
	Name *string `json:"name,omitempty"`
	// A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready
	Status *BatchStatusEnum `json:"status,omitempty"`
}
