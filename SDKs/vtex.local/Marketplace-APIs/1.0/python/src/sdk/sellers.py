"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Sellers:
    r"""Get sellers' data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_list_sellers(self, request: operations.GetListSellersRequest) -> operations.GetListSellersResponse:
        r"""List Sellers
        This endpoint lists all Sellers. This call's results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the `sc` query param.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/seller-register/pvt/sellers'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetListSellersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListSellersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_retrieve_seller(self, request: operations.GetRetrieveSellerRequest) -> operations.GetRetrieveSellerResponse:
        r"""Get Seller data by ID
        Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the `sc` query param.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRetrieveSellerRequest, base_url, '/seller-register/pvt/sellers/{sellerId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRetrieveSellerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRetrieveSellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_seller(self, request: operations.UpdateSellerRequest) -> operations.UpdateSellerResponse:
        r"""Update Seller by Seller ID
        This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path's value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSellerRequest, base_url, '/seller-register/pvt/sellers/{sellerId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpdateSellerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upsert_seller_request(self, request: operations.UpsertSellerRequestRequest) -> operations.UpsertSellerRequestResponse:
        r"""Configure Seller Account
        This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces. 
        
        For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly. 
        
        This call includes all the information a seller needs to activate their account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/seller-register/pvt/sellers'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "upsert_seller_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpsertSellerRequestRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertSellerRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    