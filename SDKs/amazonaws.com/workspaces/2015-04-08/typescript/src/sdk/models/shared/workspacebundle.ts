/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BundleTypeEnum } from "./bundletypeenum";
import { ComputeType } from "./computetype";
import { RootStorage } from "./rootstorage";
import { UserStorage } from "./userstorage";
import { WorkspaceBundleStateEnum } from "./workspacebundlestateenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes a WorkSpace bundle.
 */
export class WorkspaceBundle extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BundleId" })
  bundleId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "BundleType" })
  bundleType?: BundleTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ComputeType" })
  @Type(() => ComputeType)
  computeType?: ComputeType;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ImageId" })
  imageId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Owner" })
  owner?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RootStorage" })
  @Type(() => RootStorage)
  rootStorage?: RootStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: WorkspaceBundleStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UserStorage" })
  @Type(() => UserStorage)
  userStorage?: UserStorage;
}
