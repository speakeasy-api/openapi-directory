"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var attempt_1 = require("./attempt");
var connection_1 = require("./connection");
var destination_1 = require("./destination");
var destinationdefinition_1 = require("./destinationdefinition");
var destinationdefinitionspecification_1 = require("./destinationdefinitionspecification");
var destinationoauth_1 = require("./destinationoauth");
var health_1 = require("./health");
var internal_1 = require("./internal");
var jobs_1 = require("./jobs");
var logs_1 = require("./logs");
var notifications_1 = require("./notifications");
var openapi_1 = require("./openapi");
var operation_1 = require("./operation");
var scheduler_1 = require("./scheduler");
var source_1 = require("./source");
var sourcedefinition_1 = require("./sourcedefinition");
var sourcedefinitionspecification_1 = require("./sourcedefinitionspecification");
var sourceoauth_1 = require("./sourceoauth");
var state_1 = require("./state");
var webbackend_1 = require("./webbackend");
var workspace_1 = require("./workspace");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://airbyte.local",
    "http://localhost:8000/api",
];
/**
 * Airbyte Configuration API
 *
 * @remarks
 * [https://airbyte.io](https://airbyte.io).
 *
 * This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.
 *
 * Here are some conventions that this API follows:
 * * All endpoints are http POST methods.
 * * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
 * * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`.
 * * For all `update` methods, the whole object must be passed in, even the fields that did not change.
 *
 * Authentication (OSS):
 * * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': "Basic YWlyYnl0ZTpwYXNzd29yZA=="`
 *
 *
 * @see {@link https://airbyte.io} - Find out more about Airbyte
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.attempt = new attempt_1.Attempt(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.connection = new connection_1.Connection(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.destination = new destination_1.Destination(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.destinationDefinition = new destinationdefinition_1.DestinationDefinition(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.destinationDefinitionSpecification =
            new destinationdefinitionspecification_1.DestinationDefinitionSpecification(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.destinationOauth = new destinationoauth_1.DestinationOauth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.health = new health_1.Health(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.internal = new internal_1.Internal(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.jobs = new jobs_1.Jobs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.logs = new logs_1.Logs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.notifications = new notifications_1.Notifications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.openapi = new openapi_1.Openapi(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.operation = new operation_1.Operation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.scheduler = new scheduler_1.Scheduler(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.source = new source_1.Source(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sourceDefinition = new sourcedefinition_1.SourceDefinition(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sourceDefinitionSpecification = new sourcedefinitionspecification_1.SourceDefinitionSpecification(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sourceOauth = new sourceoauth_1.SourceOauth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.state = new state_1.State(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webBackend = new webbackend_1.WebBackend(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.workspace = new workspace_1.Workspace(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
