/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
 */
export enum UpdateNetworkApplianceSsidRequestBodyAuthModeEnum {
  EightThousandAndTwentyOnexMeraki = "8021x-meraki",
  EightThousandAndTwentyOnexRadius = "8021x-radius",
  Open = "open",
  Psk = "psk",
}

/**
 * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
 */
export class UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication extends SpeakeasyBase {
  /**
   * Enable DCHP Enforced Deauthentication on the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
 */
export enum UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum {
  Wep = "wep",
  Wpa = "wpa",
}

export class UpdateNetworkApplianceSsidRequestBodyRadiusServers extends SpeakeasyBase {
  /**
   * The IP address of your RADIUS server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * The UDP port your RADIUS servers listens on for Access-requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: number;

  /**
   * The RADIUS client shared secret.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;
}

/**
 * The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
 */
export enum UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum {
  Wpa1AndWpa2 = "WPA1 and WPA2",
  Wpa2Only = "WPA2 only",
  Wpa3TransitionMode = "WPA3 Transition Mode",
  Wpa3Only = "WPA3 only",
}

export class UpdateNetworkApplianceSsidRequestBody extends SpeakeasyBase {
  /**
   * The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authMode" })
  authMode?: UpdateNetworkApplianceSsidRequestBodyAuthModeEnum;

  /**
   * The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultVlanId" })
  defaultVlanId?: number;

  /**
   * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dhcpEnforcedDeauthentication" })
  @Type(() => UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication)
  dhcpEnforcedDeauthentication?: UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication;

  /**
   * Whether or not the SSID is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryptionMode" })
  encryptionMode?: UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum;

  /**
   * The name of the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The passkey for the SSID. This param is only valid if the authMode is 'psk'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "psk" })
  psk?: string;

  /**
   * The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceSsidRequestBodyRadiusServers,
  })
  @Expose({ name: "radiusServers" })
  @Type(() => UpdateNetworkApplianceSsidRequestBodyRadiusServers)
  radiusServers?: UpdateNetworkApplianceSsidRequestBodyRadiusServers[];

  /**
   * Boolean indicating whether the MX should advertise or hide this SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visible" })
  visible?: boolean;

  /**
   * The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wpaEncryptionMode" })
  wpaEncryptionMode?: UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum;
}

export class UpdateNetworkApplianceSsidRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkApplianceSsidRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=number",
  })
  number: string;
}

export class UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers extends SpeakeasyBase {
  /**
   * The IP address of your RADIUS server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * The UDP port your RADIUS servers listens on for Access-requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: number;
}

/**
 * Successful operation
 */
export class UpdateNetworkApplianceSsid200ApplicationJSON extends SpeakeasyBase {
  /**
   * The association control method for the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authMode" })
  authMode?: string;

  /**
   * The VLAN ID of the VLAN associated to this SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultVlanId" })
  defaultVlanId?: number;

  /**
   * Whether or not the SSID is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * The psk encryption mode for the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryptionMode" })
  encryptionMode?: string;

  /**
   * The name of the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The number of the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: number;

  /**
   * The RADIUS 802.1x servers to be used for authentication.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers,
  })
  @Expose({ name: "radiusServers" })
  @Type(() => UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers)
  radiusServers?: UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers[];

  /**
   * Boolean indicating whether the MX should advertise or hide this SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visible" })
  visible?: boolean;

  /**
   * WPA encryption mode for the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wpaEncryptionMode" })
  wpaEncryptionMode?: string;
}

export class UpdateNetworkApplianceSsidResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkApplianceSsid200ApplicationJSONObject?: UpdateNetworkApplianceSsid200ApplicationJSON;
}
