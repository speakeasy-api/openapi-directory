// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type UsersGetByUsernamePathParams struct {
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type UsersGetByUsernameRequest struct {
	PathParams UsersGetByUsernamePathParams
}

type UsersGetByUsername200ApplicationJSONType string

const (
	UsersGetByUsername200ApplicationJSONTypePrivateUser UsersGetByUsername200ApplicationJSONType = "private-user"
	UsersGetByUsername200ApplicationJSONTypePublicUser  UsersGetByUsername200ApplicationJSONType = "public-user"
)

type UsersGetByUsername200ApplicationJSON struct {
	PrivateUser *shared.PrivateUser
	PublicUser  *shared.PublicUser

	Type UsersGetByUsername200ApplicationJSONType
}

func CreateUsersGetByUsername200ApplicationJSONPrivateUser(privateUser shared.PrivateUser) UsersGetByUsername200ApplicationJSON {
	typ := UsersGetByUsername200ApplicationJSONTypePrivateUser

	return UsersGetByUsername200ApplicationJSON{
		PrivateUser: &privateUser,
		Type:        typ,
	}
}

func CreateUsersGetByUsername200ApplicationJSONPublicUser(publicUser shared.PublicUser) UsersGetByUsername200ApplicationJSON {
	typ := UsersGetByUsername200ApplicationJSONTypePublicUser

	return UsersGetByUsername200ApplicationJSON{
		PublicUser: &publicUser,
		Type:       typ,
	}
}

func (u *UsersGetByUsername200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	privateUser := new(shared.PrivateUser)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&privateUser); err == nil {
		u.PrivateUser = privateUser
		u.Type = UsersGetByUsername200ApplicationJSONTypePrivateUser
		return nil
	}

	publicUser := new(shared.PublicUser)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&publicUser); err == nil {
		u.PublicUser = publicUser
		u.Type = UsersGetByUsername200ApplicationJSONTypePublicUser
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UsersGetByUsername200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PrivateUser != nil {
		return json.Marshal(u.PrivateUser)
	}

	if u.PublicUser != nil {
		return json.Marshal(u.PublicUser)
	}

	return nil, nil
}

type UsersGetByUsernameResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	UsersGetByUsername200ApplicationJSONOneOf *UsersGetByUsername200ApplicationJSON
	// Accepted
	UsersGetByUsername202ApplicationJSONObject map[string]interface{}
}
