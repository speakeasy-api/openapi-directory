// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteModelPackageGroupXAmzTargetEnum
type DeleteModelPackageGroupXAmzTargetEnum string

const (
	DeleteModelPackageGroupXAmzTargetEnumSageMakerDeleteModelPackageGroup DeleteModelPackageGroupXAmzTargetEnum = "SageMaker.DeleteModelPackageGroup"
)

func (e *DeleteModelPackageGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.DeleteModelPackageGroup":
		*e = DeleteModelPackageGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteModelPackageGroupXAmzTargetEnum: %s", s)
	}
}

type DeleteModelPackageGroupRequest struct {
	DeleteModelPackageGroupInput shared.DeleteModelPackageGroupInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   DeleteModelPackageGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteModelPackageGroupResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
