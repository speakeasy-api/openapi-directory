"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosUpload:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def complete_streaming_upload(self, request: operations.CompleteStreamingUploadRequest, security: operations.CompleteStreamingUploadSecurity) -> operations.CompleteStreamingUploadResponse:
        r"""Complete a user's streaming upload"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompleteStreamingUploadRequest, base_url, '/users/{user_id}/uploads/{upload}', request)
        
        query_params = utils.get_query_params(operations.CompleteStreamingUploadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompleteStreamingUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            pass
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_upload_attempt(self, request: operations.GetUploadAttemptRequest, security: operations.GetUploadAttemptSecurity) -> operations.GetUploadAttemptResponse:
        r"""Get a user's upload attempt"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUploadAttemptRequest, base_url, '/users/{user_id}/uploads/{upload}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUploadAttemptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.uploadattempt+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UploadAttempt])
                res.upload_attempt = out

        return res

    def upload_video(self, request: operations.UploadVideoRequest) -> operations.UploadVideoResponse:
        r"""Upload a video
        Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadVideoRequest, base_url, '/users/{user_id}/videos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadVideoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code in [400, 401, 403, 500]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_video_alt1(self, request: operations.UploadVideoAlt1RequestBody) -> operations.UploadVideoAlt1Response:
        r"""Upload a video
        Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/videos'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadVideoAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code in [400, 401, 403, 500]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    