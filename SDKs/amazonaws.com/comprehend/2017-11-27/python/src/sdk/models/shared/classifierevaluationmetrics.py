"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassifierEvaluationMetrics:
    r"""Describes the result metrics for the test data associated with an documentation classifier."""
    
    accuracy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Accuracy'), 'exclude': lambda f: f is None }})  
    f1_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('F1Score'), 'exclude': lambda f: f is None }})  
    hamming_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HammingLoss'), 'exclude': lambda f: f is None }})  
    micro_f1_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicroF1Score'), 'exclude': lambda f: f is None }})  
    micro_precision: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicroPrecision'), 'exclude': lambda f: f is None }})  
    micro_recall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicroRecall'), 'exclude': lambda f: f is None }})  
    precision: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Precision'), 'exclude': lambda f: f is None }})  
    recall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Recall'), 'exclude': lambda f: f is None }})  
    