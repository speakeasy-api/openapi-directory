// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AdcrdSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type AdcrdRequestBodyCertificateParameters struct {
	// DOB
	Dob string `json:"DOB"`
	// Father Name
	FatherName string `json:"FatherName"`
	// Full name
	FullName string `json:"FullName"`
}

// AdcrdRequestBodyFormatEnum - The format of the certificate in response.
type AdcrdRequestBodyFormatEnum string

const (
	AdcrdRequestBodyFormatEnumPdf AdcrdRequestBodyFormatEnum = "pdf"
)

func (e *AdcrdRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AdcrdRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdcrdRequestBodyFormatEnum: %s", s)
	}
}

// AdcrdRequestBody - Request format
type AdcrdRequestBody struct {
	CertificateParameters *AdcrdRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AdcrdRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type AdcrdRequest struct {
	// Request format
	Request  *AdcrdRequestBody `request:"mediaType=application/json"`
	Security AdcrdSecurity
}

type Adcrd504ApplicationJSONErrorEnum string

const (
	Adcrd504ApplicationJSONErrorEnumGatewayTimeout Adcrd504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Adcrd504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Adcrd504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd504ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd504ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Adcrd504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Adcrd504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Adcrd504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd504ApplicationJSON - Gateway timeout
type Adcrd504ApplicationJSON struct {
	Error            *Adcrd504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd503ApplicationJSONErrorEnum string

const (
	Adcrd503ApplicationJSONErrorEnumServiceUnavailable Adcrd503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Adcrd503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Adcrd503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd503ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd503ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Adcrd503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Adcrd503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Adcrd503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd503ApplicationJSON - Service unavailable
type Adcrd503ApplicationJSON struct {
	Error            *Adcrd503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd502ApplicationJSONErrorEnum string

const (
	Adcrd502ApplicationJSONErrorEnumBadGatewy Adcrd502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Adcrd502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Adcrd502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd502ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd502ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Adcrd502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Adcrd502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Adcrd502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd502ApplicationJSON - Bad gateway
type Adcrd502ApplicationJSON struct {
	Error            *Adcrd502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd500ApplicationJSONErrorEnum string

const (
	Adcrd500ApplicationJSONErrorEnumInternalServerError Adcrd500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Adcrd500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Adcrd500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd500ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd500ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd500ApplicationJSONErrorDescriptionEnumInternalServerError Adcrd500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Adcrd500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Adcrd500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd500ApplicationJSON - Internal server error
type Adcrd500ApplicationJSON struct {
	Error            *Adcrd500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd404ApplicationJSONErrorEnum string

const (
	Adcrd404ApplicationJSONErrorEnumRecordNotFound Adcrd404ApplicationJSONErrorEnum = "record_not_found"
	Adcrd404ApplicationJSONErrorEnumURLNotFound    Adcrd404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Adcrd404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Adcrd404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd404ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd404ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd404ApplicationJSONErrorDescriptionEnumNoRecordFound               Adcrd404ApplicationJSONErrorDescriptionEnum = "No record found"
	Adcrd404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Adcrd404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Adcrd404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Adcrd404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd404ApplicationJSON - No record found
type Adcrd404ApplicationJSON struct {
	Error            *Adcrd404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd401ApplicationJSONErrorEnum string

const (
	Adcrd401ApplicationJSONErrorEnumInvalidAuthentication Adcrd401ApplicationJSONErrorEnum = "invalid_authentication"
	Adcrd401ApplicationJSONErrorEnumInvalidAuthorization  Adcrd401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Adcrd401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Adcrd401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd401ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd401ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Adcrd401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Adcrd401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Adcrd401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Adcrd401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Adcrd401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd401ApplicationJSON - Unauthorized access
type Adcrd401ApplicationJSON struct {
	Error            *Adcrd401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Adcrd400ApplicationJSONErrorEnum string

const (
	Adcrd400ApplicationJSONErrorEnumMissingParameter Adcrd400ApplicationJSONErrorEnum = "missing_parameter"
	Adcrd400ApplicationJSONErrorEnumInvalidParameter Adcrd400ApplicationJSONErrorEnum = "invalid_parameter"
	Adcrd400ApplicationJSONErrorEnumInvalidFormat    Adcrd400ApplicationJSONErrorEnum = "invalid_format"
	Adcrd400ApplicationJSONErrorEnumInvalidTxnid     Adcrd400ApplicationJSONErrorEnum = "invalid_txnid"
	Adcrd400ApplicationJSONErrorEnumInvalidConsentid Adcrd400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Adcrd400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Adcrd400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd400ApplicationJSONErrorEnum: %s", s)
	}
}

type Adcrd400ApplicationJSONErrorDescriptionEnum string

const (
	Adcrd400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Adcrd400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Adcrd400ApplicationJSONErrorDescriptionEnumBadRequest                              Adcrd400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Adcrd400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Adcrd400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Adcrd400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Adcrd400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Adcrd400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Adcrd400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Adcrd400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Adcrd400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Adcrd400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Adcrd400ApplicationJSON - Bad request
type Adcrd400ApplicationJSON struct {
	Error            *Adcrd400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Adcrd400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AdcrdResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Adcrd400ApplicationJSONObject *Adcrd400ApplicationJSON
	// Unauthorized access
	Adcrd401ApplicationJSONObject *Adcrd401ApplicationJSON
	// No record found
	Adcrd404ApplicationJSONObject *Adcrd404ApplicationJSON
	// Internal server error
	Adcrd500ApplicationJSONObject *Adcrd500ApplicationJSON
	// Bad gateway
	Adcrd502ApplicationJSONObject *Adcrd502ApplicationJSON
	// Service unavailable
	Adcrd503ApplicationJSONObject *Adcrd503ApplicationJSON
	// Gateway timeout
	Adcrd504ApplicationJSONObject *Adcrd504ApplicationJSON
}
