"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ListUsersPublicAscEnum(str, Enum):
    TRUE = 'true'

class ListUsersPublicOrderEnum(str, Enum):
    LIKES_RECEIVED = 'likes_received'
    LIKES_GIVEN = 'likes_given'
    TOPIC_COUNT = 'topic_count'
    POST_COUNT = 'post_count'
    TOPICS_ENTERED = 'topics_entered'
    POSTS_READ = 'posts_read'
    DAYS_VISITED = 'days_visited'

class ListUsersPublicPeriodEnum(str, Enum):
    DAILY = 'daily'
    WEEKLY = 'weekly'
    MONTHLY = 'monthly'
    QUARTERLY = 'quarterly'
    YEARLY = 'yearly'
    ALL = 'all'


@dataclasses.dataclass
class ListUsersPublicRequest:
    
    order: ListUsersPublicOrderEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})  
    period: ListUsersPublicPeriodEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'period', 'style': 'form', 'explode': True }})  
    asc: Optional[ListUsersPublicAscEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'asc', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUsersPublic200ApplicationJSONDirectoryItemsUser:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUsersPublic200ApplicationJSONDirectoryItems:
    
    days_visited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_visited') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    likes_given: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes_given') }})  
    likes_received: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes_received') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    posts_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_read') }})  
    topic_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_count') }})  
    topics_entered: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_entered') }})  
    user: ListUsersPublic200ApplicationJSONDirectoryItemsUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUsersPublic200ApplicationJSONMeta:
    
    last_updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated_at') }})  
    load_more_directory_items: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_more_directory_items') }})  
    total_rows_directory_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_rows_directory_items') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUsersPublic200ApplicationJSON:
    r"""directory items response"""
    
    directory_items: list[ListUsersPublic200ApplicationJSONDirectoryItems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directory_items') }})  
    meta: ListUsersPublic200ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclasses.dataclass
class ListUsersPublicResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_users_public_200_application_json_object: Optional[ListUsersPublic200ApplicationJSON] = dataclasses.field(default=None)
    r"""directory items response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    