// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NotificationEventConfigurationEventTypeEnum - The type of event.
//
// Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
type NotificationEventConfigurationEventTypeEnum string

const (
	NotificationEventConfigurationEventTypeEnumAccountClosed                  NotificationEventConfigurationEventTypeEnum = "ACCOUNT_CLOSED"
	NotificationEventConfigurationEventTypeEnumAccountCreated                 NotificationEventConfigurationEventTypeEnum = "ACCOUNT_CREATED"
	NotificationEventConfigurationEventTypeEnumAccountFundsBelowThreshold     NotificationEventConfigurationEventTypeEnum = "ACCOUNT_FUNDS_BELOW_THRESHOLD"
	NotificationEventConfigurationEventTypeEnumAccountHolderCreated           NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_CREATED"
	NotificationEventConfigurationEventTypeEnumAccountHolderLimitReached      NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_LIMIT_REACHED"
	NotificationEventConfigurationEventTypeEnumAccountHolderMigrated          NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_MIGRATED"
	NotificationEventConfigurationEventTypeEnumAccountHolderPayout            NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_PAYOUT"
	NotificationEventConfigurationEventTypeEnumAccountHolderStatusChange      NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_STATUS_CHANGE"
	NotificationEventConfigurationEventTypeEnumAccountHolderStoreStatusChange NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_STORE_STATUS_CHANGE"
	NotificationEventConfigurationEventTypeEnumAccountHolderUpcomingDeadline  NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_UPCOMING_DEADLINE"
	NotificationEventConfigurationEventTypeEnumAccountHolderUpdated           NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_UPDATED"
	NotificationEventConfigurationEventTypeEnumAccountHolderVerification      NotificationEventConfigurationEventTypeEnum = "ACCOUNT_HOLDER_VERIFICATION"
	NotificationEventConfigurationEventTypeEnumAccountUpdated                 NotificationEventConfigurationEventTypeEnum = "ACCOUNT_UPDATED"
	NotificationEventConfigurationEventTypeEnumBeneficiarySetup               NotificationEventConfigurationEventTypeEnum = "BENEFICIARY_SETUP"
	NotificationEventConfigurationEventTypeEnumCompensateNegativeBalance      NotificationEventConfigurationEventTypeEnum = "COMPENSATE_NEGATIVE_BALANCE"
	NotificationEventConfigurationEventTypeEnumDirectDebitInitiated           NotificationEventConfigurationEventTypeEnum = "DIRECT_DEBIT_INITIATED"
	NotificationEventConfigurationEventTypeEnumFundsMigrated                  NotificationEventConfigurationEventTypeEnum = "FUNDS_MIGRATED"
	NotificationEventConfigurationEventTypeEnumPaymentFailure                 NotificationEventConfigurationEventTypeEnum = "PAYMENT_FAILURE"
	NotificationEventConfigurationEventTypeEnumPendingCredit                  NotificationEventConfigurationEventTypeEnum = "PENDING_CREDIT"
	NotificationEventConfigurationEventTypeEnumRefundFundsTransfer            NotificationEventConfigurationEventTypeEnum = "REFUND_FUNDS_TRANSFER"
	NotificationEventConfigurationEventTypeEnumReportAvailable                NotificationEventConfigurationEventTypeEnum = "REPORT_AVAILABLE"
	NotificationEventConfigurationEventTypeEnumScheduledRefunds               NotificationEventConfigurationEventTypeEnum = "SCHEDULED_REFUNDS"
	NotificationEventConfigurationEventTypeEnumScoreSignalTriggered           NotificationEventConfigurationEventTypeEnum = "SCORE_SIGNAL_TRIGGERED"
	NotificationEventConfigurationEventTypeEnumTransferFunds                  NotificationEventConfigurationEventTypeEnum = "TRANSFER_FUNDS"
	NotificationEventConfigurationEventTypeEnumTransferNotPaidoutTransfers    NotificationEventConfigurationEventTypeEnum = "TRANSFER_NOT_PAIDOUT_TRANSFERS"
)

func (e *NotificationEventConfigurationEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCOUNT_CLOSED":
		fallthrough
	case "ACCOUNT_CREATED":
		fallthrough
	case "ACCOUNT_FUNDS_BELOW_THRESHOLD":
		fallthrough
	case "ACCOUNT_HOLDER_CREATED":
		fallthrough
	case "ACCOUNT_HOLDER_LIMIT_REACHED":
		fallthrough
	case "ACCOUNT_HOLDER_MIGRATED":
		fallthrough
	case "ACCOUNT_HOLDER_PAYOUT":
		fallthrough
	case "ACCOUNT_HOLDER_STATUS_CHANGE":
		fallthrough
	case "ACCOUNT_HOLDER_STORE_STATUS_CHANGE":
		fallthrough
	case "ACCOUNT_HOLDER_UPCOMING_DEADLINE":
		fallthrough
	case "ACCOUNT_HOLDER_UPDATED":
		fallthrough
	case "ACCOUNT_HOLDER_VERIFICATION":
		fallthrough
	case "ACCOUNT_UPDATED":
		fallthrough
	case "BENEFICIARY_SETUP":
		fallthrough
	case "COMPENSATE_NEGATIVE_BALANCE":
		fallthrough
	case "DIRECT_DEBIT_INITIATED":
		fallthrough
	case "FUNDS_MIGRATED":
		fallthrough
	case "PAYMENT_FAILURE":
		fallthrough
	case "PENDING_CREDIT":
		fallthrough
	case "REFUND_FUNDS_TRANSFER":
		fallthrough
	case "REPORT_AVAILABLE":
		fallthrough
	case "SCHEDULED_REFUNDS":
		fallthrough
	case "SCORE_SIGNAL_TRIGGERED":
		fallthrough
	case "TRANSFER_FUNDS":
		fallthrough
	case "TRANSFER_NOT_PAIDOUT_TRANSFERS":
		*e = NotificationEventConfigurationEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationEventConfigurationEventTypeEnum: %s", s)
	}
}

// NotificationEventConfigurationIncludeModeEnum - Indicates whether the specified `eventType` is sent to your webhook endpoint.
// Possible values:
// * **INCLUDE**: Send the specified `eventType`.
// * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
type NotificationEventConfigurationIncludeModeEnum string

const (
	NotificationEventConfigurationIncludeModeEnumExclude NotificationEventConfigurationIncludeModeEnum = "EXCLUDE"
	NotificationEventConfigurationIncludeModeEnumInclude NotificationEventConfigurationIncludeModeEnum = "INCLUDE"
)

func (e *NotificationEventConfigurationIncludeModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCLUDE":
		fallthrough
	case "INCLUDE":
		*e = NotificationEventConfigurationIncludeModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationEventConfigurationIncludeModeEnum: %s", s)
	}
}

type NotificationEventConfiguration struct {
	// The type of event.
	//
	// Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
	EventType NotificationEventConfigurationEventTypeEnum `json:"eventType"`
	// Indicates whether the specified `eventType` is sent to your webhook endpoint.
	// Possible values:
	// * **INCLUDE**: Send the specified `eventType`.
	// * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
	IncludeMode NotificationEventConfigurationIncludeModeEnum `json:"includeMode"`
}
