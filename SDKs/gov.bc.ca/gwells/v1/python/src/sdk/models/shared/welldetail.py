"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import casing as shared_casing
from ..shared import decommissiondescription as shared_decommissiondescription
from ..shared import linerperforation as shared_linerperforation
from ..shared import lithologydescription as shared_lithologydescription
from ..shared import organizationnamelist as shared_organizationnamelist
from ..shared import personbasic as shared_personbasic
from ..shared import screen as shared_screen
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class WellDetailAlternativeSpecsSubmittedIfRequiredEnum(str, Enum):
    FALSE = 'false'
    TRUE = 'true'

class WellDetailHydroFracturingPerformedEnum(str, Enum):
    FALSE = 'false'
    TRUE = 'true'

class WellDetailWellDisinfectedEnum(str, Enum):
    FALSE = 'false'
    TRUE = 'true'

class WellDetailOrientationOfWellEnum(str, Enum):
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WellDetail:
    
    casing_set: list[shared_casing.Casing] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('casing_set') }})  
    company_of_person_responsible: shared_organizationnamelist.OrganizationNameList = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_of_person_responsible') }})  
    decommission_description_set: list[shared_decommissiondescription.DecommissionDescription] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_description_set') }})  
    linerperforation_set: list[shared_linerperforation.LinerPerforation] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linerperforation_set') }})  
    lithologydescription_set: list[shared_lithologydescription.LithologyDescription] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lithologydescription_set') }})  
    owner_full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_full_name') }})  
    person_responsible: shared_personbasic.PersonBasic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person_responsible') }})  
    screen_set: list[shared_screen.Screen] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_set') }})  
    well: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well') }})  
    alteration_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alteration_end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    alternative_specs_submitted: Optional[WellDetailAlternativeSpecsSubmittedIfRequiredEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_specs_submitted'), 'exclude': lambda f: f is None }})  
    analytic_solution_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analytic_solution_type'), 'exclude': lambda f: f is None }})  
    aquifer: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aquifer'), 'exclude': lambda f: f is None }})  
    aquifer_vulnerability_index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aquifer_vulnerability_index'), 'exclude': lambda f: f is None }})  
    artesian_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artesian_flow'), 'exclude': lambda f: f is None }})  
    artesian_pressure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artesian_pressure'), 'exclude': lambda f: f is None }})  
    backfill_depth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfill_depth'), 'exclude': lambda f: f is None }})  
    backfill_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfill_material'), 'exclude': lambda f: f is None }})  
    backfill_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfill_type'), 'exclude': lambda f: f is None }})  
    bcgs_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bcgs_id'), 'exclude': lambda f: f is None }})  
    bedrock_depth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bedrock_depth'), 'exclude': lambda f: f is None }})  
    boundary_effect: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boundary_effect'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    construction_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('construction_end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    construction_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('construction_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    coordinate_acquisition_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinate_acquisition_code'), 'exclude': lambda f: f is None }})  
    decommission_details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_details'), 'exclude': lambda f: f is None }})  
    decommission_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    decommission_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_method'), 'exclude': lambda f: f is None }})  
    decommission_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_reason'), 'exclude': lambda f: f is None }})  
    decommission_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decommission_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    development_hours: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('development_hours'), 'exclude': lambda f: f is None }})  
    development_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('development_method'), 'exclude': lambda f: f is None }})  
    development_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('development_notes'), 'exclude': lambda f: f is None }})  
    diameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diameter'), 'exclude': lambda f: f is None }})  
    drawdown: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drawdown'), 'exclude': lambda f: f is None }})  
    drilling_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drilling_company'), 'exclude': lambda f: f is None }})  
    drilling_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drilling_method'), 'exclude': lambda f: f is None }})  
    ems: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ems'), 'exclude': lambda f: f is None }})  
    filter_pack_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_pack_from'), 'exclude': lambda f: f is None }})  
    filter_pack_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_pack_material'), 'exclude': lambda f: f is None }})  
    filter_pack_material_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_pack_material_size'), 'exclude': lambda f: f is None }})  
    filter_pack_thickness: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_pack_thickness'), 'exclude': lambda f: f is None }})  
    filter_pack_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_pack_to'), 'exclude': lambda f: f is None }})  
    final_casing_stick_up: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('final_casing_stick_up'), 'exclude': lambda f: f is None }})  
    finished_well_depth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished_well_depth'), 'exclude': lambda f: f is None }})  
    ground_elevation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ground_elevation'), 'exclude': lambda f: f is None }})  
    ground_elevation_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ground_elevation_method'), 'exclude': lambda f: f is None }})  
    hydraulic_conductivity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hydraulic_conductivity'), 'exclude': lambda f: f is None }})  
    hydro_fracturing_performed: Optional[WellDetailHydroFracturingPerformedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hydro_fracturing_performed'), 'exclude': lambda f: f is None }})  
    hydro_fracturing_yield_increase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hydro_fracturing_yield_increase'), 'exclude': lambda f: f is None }})  
    id_plate_attached_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_plate_attached_by'), 'exclude': lambda f: f is None }})  
    identification_plate_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification_plate_number'), 'exclude': lambda f: f is None }})  
    intended_water_use: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intended_water_use'), 'exclude': lambda f: f is None }})  
    land_district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('land_district'), 'exclude': lambda f: f is None }})  
    latitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})  
    legal_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_block'), 'exclude': lambda f: f is None }})  
    legal_district_lot: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_district_lot'), 'exclude': lambda f: f is None }})  
    legal_lot: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_lot'), 'exclude': lambda f: f is None }})  
    legal_pid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_pid'), 'exclude': lambda f: f is None }})  
    legal_plan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_plan'), 'exclude': lambda f: f is None }})  
    legal_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_range'), 'exclude': lambda f: f is None }})  
    legal_section: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_section'), 'exclude': lambda f: f is None }})  
    legal_township: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal_township'), 'exclude': lambda f: f is None }})  
    licenced_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenced_status'), 'exclude': lambda f: f is None }})  
    liner_diameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liner_diameter'), 'exclude': lambda f: f is None }})  
    liner_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liner_from'), 'exclude': lambda f: f is None }})  
    liner_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liner_material'), 'exclude': lambda f: f is None }})  
    liner_thickness: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liner_thickness'), 'exclude': lambda f: f is None }})  
    liner_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liner_to'), 'exclude': lambda f: f is None }})  
    longitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})  
    observation_well_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observation_well_number'), 'exclude': lambda f: f is None }})  
    observation_well_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observation_well_status'), 'exclude': lambda f: f is None }})  
    other_drilling_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_drilling_method'), 'exclude': lambda f: f is None }})  
    other_screen_bottom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_screen_bottom'), 'exclude': lambda f: f is None }})  
    other_screen_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_screen_material'), 'exclude': lambda f: f is None }})  
    recommended_pump_depth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_pump_depth'), 'exclude': lambda f: f is None }})  
    recommended_pump_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_pump_rate'), 'exclude': lambda f: f is None }})  
    screen_bottom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_bottom'), 'exclude': lambda f: f is None }})  
    screen_information: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_information'), 'exclude': lambda f: f is None }})  
    screen_intake_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_intake_method'), 'exclude': lambda f: f is None }})  
    screen_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_material'), 'exclude': lambda f: f is None }})  
    screen_opening: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_opening'), 'exclude': lambda f: f is None }})  
    screen_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_type'), 'exclude': lambda f: f is None }})  
    sealant_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sealant_material'), 'exclude': lambda f: f is None }})  
    specific_storage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specific_storage'), 'exclude': lambda f: f is None }})  
    specific_yield: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specific_yield'), 'exclude': lambda f: f is None }})  
    static_level_before_test: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('static_level_before_test'), 'exclude': lambda f: f is None }})  
    static_water_level: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('static_water_level'), 'exclude': lambda f: f is None }})  
    storativity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storativity'), 'exclude': lambda f: f is None }})  
    street_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_address'), 'exclude': lambda f: f is None }})  
    surface_seal_depth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_seal_depth'), 'exclude': lambda f: f is None }})  
    surface_seal_length: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_seal_length'), 'exclude': lambda f: f is None }})  
    surface_seal_material: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_seal_material'), 'exclude': lambda f: f is None }})  
    surface_seal_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_seal_method'), 'exclude': lambda f: f is None }})  
    surface_seal_thickness: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_seal_thickness'), 'exclude': lambda f: f is None }})  
    testing_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testing_duration'), 'exclude': lambda f: f is None }})  
    testing_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testing_method'), 'exclude': lambda f: f is None }})  
    total_depth_drilled: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_depth_drilled'), 'exclude': lambda f: f is None }})  
    transmissivity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissivity'), 'exclude': lambda f: f is None }})  
    utm_easting: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utm_easting'), 'exclude': lambda f: f is None }})  
    utm_northing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utm_northing'), 'exclude': lambda f: f is None }})  
    utm_zone_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utm_zone_code'), 'exclude': lambda f: f is None }})  
    water_quality_characteristics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_quality_characteristics'), 'exclude': lambda f: f is None }})  
    water_quality_colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_quality_colour'), 'exclude': lambda f: f is None }})  
    water_quality_odour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_quality_odour'), 'exclude': lambda f: f is None }})  
    water_supply_system_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_supply_system_name'), 'exclude': lambda f: f is None }})  
    water_supply_system_well_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_supply_system_well_name'), 'exclude': lambda f: f is None }})  
    well_cap_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_cap_type'), 'exclude': lambda f: f is None }})  
    well_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_class'), 'exclude': lambda f: f is None }})  
    well_disinfected: Optional[WellDetailWellDisinfectedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_disinfected'), 'exclude': lambda f: f is None }})  
    well_guid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_guid'), 'exclude': lambda f: f is None }})  
    well_identification_plate_attached: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_identification_plate_attached'), 'exclude': lambda f: f is None }})  
    well_location_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_location_description'), 'exclude': lambda f: f is None }})  
    well_orientation: Optional[WellDetailOrientationOfWellEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_orientation'), 'exclude': lambda f: f is None }})  
    well_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_status'), 'exclude': lambda f: f is None }})  
    well_subclass: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_subclass'), 'exclude': lambda f: f is None }})  
    well_tag_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_tag_number'), 'exclude': lambda f: f is None }})  
    well_yield: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_yield'), 'exclude': lambda f: f is None }})  
    well_yield_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('well_yield_unit'), 'exclude': lambda f: f is None }})  
    yield_estimation_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yield_estimation_duration'), 'exclude': lambda f: f is None }})  
    yield_estimation_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yield_estimation_method'), 'exclude': lambda f: f is None }})  
    yield_estimation_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yield_estimation_rate'), 'exclude': lambda f: f is None }})  
    