"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import directconnectgatewayattachmentstate_enum as shared_directconnectgatewayattachmentstate_enum
from ..shared import directconnectgatewayattachmenttype_enum as shared_directconnectgatewayattachmenttype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectConnectGatewayAttachment:
    r"""Information about an attachment between a Direct Connect gateway and a virtual interface."""
    
    attachment_state: Optional[shared_directconnectgatewayattachmentstate_enum.DirectConnectGatewayAttachmentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachmentState'), 'exclude': lambda f: f is None }})  
    attachment_type: Optional[shared_directconnectgatewayattachmenttype_enum.DirectConnectGatewayAttachmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachmentType'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayId'), 'exclude': lambda f: f is None }})  
    state_change_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateChangeError'), 'exclude': lambda f: f is None }})  
    virtual_interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualInterfaceId'), 'exclude': lambda f: f is None }})  
    virtual_interface_owner_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualInterfaceOwnerAccount'), 'exclude': lambda f: f is None }})  
    virtual_interface_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualInterfaceRegion'), 'exclude': lambda f: f is None }})  
    