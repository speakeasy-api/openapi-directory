/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * APIBillingPeriodUsageOut - The current billing period.
 */
public class APIBillingPeriodUsageOut {
    /**
     * User API Key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiKey")
    public String apiKey;
    public APIBillingPeriodUsageOut withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Current period billing status ex OPEN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingStatus")
    public String billingStatus;
    public APIBillingPeriodUsageOut withBillingStatus(String billingStatus) {
        this.billingStatus = billingStatus;
        return this;
    }
    
    /**
     * Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hardLimit")
    public Long hardLimit;
    public APIBillingPeriodUsageOut withHardLimit(Long hardLimit) {
        this.hardLimit = hardLimit;
        return this;
    }
    
    /**
     * Datetime when the the plan's current period endend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periodEnded")
    public Long periodEnded;
    public APIBillingPeriodUsageOut withPeriodEnded(Long periodEnded) {
        this.periodEnded = periodEnded;
        return this;
    }
    
    /**
     * Datetime when the the plan's current period started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periodStarted")
    public Long periodStarted;
    public APIBillingPeriodUsageOut withPeriodStarted(Long periodStarted) {
        this.periodStarted = periodStarted;
        return this;
    }
    
    /**
     * Current period soft limit (reaching the limit sends an email notification).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softLimit")
    public Long softLimit;
    public APIBillingPeriodUsageOut withSoftLimit(Long softLimit) {
        this.softLimit = softLimit;
        return this;
    }
    
    /**
     * Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripeCurrentPeriodEnd")
    public Long stripeCurrentPeriodEnd;
    public APIBillingPeriodUsageOut withStripeCurrentPeriodEnd(Long stripeCurrentPeriodEnd) {
        this.stripeCurrentPeriodEnd = stripeCurrentPeriodEnd;
        return this;
    }
    
    /**
     * Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripeCurrentPeriodStart")
    public Long stripeCurrentPeriodStart;
    public APIBillingPeriodUsageOut withStripeCurrentPeriodStart(Long stripeCurrentPeriodStart) {
        this.stripeCurrentPeriodStart = stripeCurrentPeriodStart;
        return this;
    }
    
    /**
     * Datetime when the user subscribed to the plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionStarted")
    public Long subscriptionStarted;
    public APIBillingPeriodUsageOut withSubscriptionStarted(Long subscriptionStarted) {
        this.subscriptionStarted = subscriptionStarted;
        return this;
    }
    
    /**
     * Current period usage in units (NB some API endpoints use more than one unit).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public Long usage;
    public APIBillingPeriodUsageOut withUsage(Long usage) {
        this.usage = usage;
        return this;
    }
    
}
