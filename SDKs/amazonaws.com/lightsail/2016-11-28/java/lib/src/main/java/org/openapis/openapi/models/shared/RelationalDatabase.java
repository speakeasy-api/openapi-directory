/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RelationalDatabase - Describes a database.
 */
public class RelationalDatabase {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arn")
    public String arn;

    public RelationalDatabase withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupRetentionEnabled")
    public Boolean backupRetentionEnabled;

    public RelationalDatabase withBackupRetentionEnabled(Boolean backupRetentionEnabled) {
        this.backupRetentionEnabled = backupRetentionEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caCertificateIdentifier")
    public String caCertificateIdentifier;

    public RelationalDatabase withCaCertificateIdentifier(String caCertificateIdentifier) {
        this.caCertificateIdentifier = caCertificateIdentifier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public RelationalDatabase withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("engine")
    public String engine;

    public RelationalDatabase withEngine(String engine) {
        this.engine = engine;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("engineVersion")
    public String engineVersion;

    public RelationalDatabase withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hardware")
    public RelationalDatabaseHardware hardware;

    public RelationalDatabase withHardware(RelationalDatabaseHardware hardware) {
        this.hardware = hardware;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("latestRestorableTime")
    public OffsetDateTime latestRestorableTime;

    public RelationalDatabase withLatestRestorableTime(OffsetDateTime latestRestorableTime) {
        this.latestRestorableTime = latestRestorableTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public ResourceLocation location;

    public RelationalDatabase withLocation(ResourceLocation location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masterDatabaseName")
    public String masterDatabaseName;

    public RelationalDatabase withMasterDatabaseName(String masterDatabaseName) {
        this.masterDatabaseName = masterDatabaseName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masterEndpoint")
    public RelationalDatabaseEndpoint masterEndpoint;

    public RelationalDatabase withMasterEndpoint(RelationalDatabaseEndpoint masterEndpoint) {
        this.masterEndpoint = masterEndpoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masterUsername")
    public String masterUsername;

    public RelationalDatabase withMasterUsername(String masterUsername) {
        this.masterUsername = masterUsername;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public RelationalDatabase withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameterApplyStatus")
    public String parameterApplyStatus;

    public RelationalDatabase withParameterApplyStatus(String parameterApplyStatus) {
        this.parameterApplyStatus = parameterApplyStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingMaintenanceActions")
    public PendingMaintenanceAction[] pendingMaintenanceActions;

    public RelationalDatabase withPendingMaintenanceActions(PendingMaintenanceAction[] pendingMaintenanceActions) {
        this.pendingMaintenanceActions = pendingMaintenanceActions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingModifiedValues")
    public PendingModifiedRelationalDatabaseValues pendingModifiedValues;

    public RelationalDatabase withPendingModifiedValues(PendingModifiedRelationalDatabaseValues pendingModifiedValues) {
        this.pendingModifiedValues = pendingModifiedValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredBackupWindow")
    public String preferredBackupWindow;

    public RelationalDatabase withPreferredBackupWindow(String preferredBackupWindow) {
        this.preferredBackupWindow = preferredBackupWindow;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredMaintenanceWindow")
    public String preferredMaintenanceWindow;

    public RelationalDatabase withPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publiclyAccessible")
    public Boolean publiclyAccessible;

    public RelationalDatabase withPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationalDatabaseBlueprintId")
    public String relationalDatabaseBlueprintId;

    public RelationalDatabase withRelationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
        this.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationalDatabaseBundleId")
    public String relationalDatabaseBundleId;

    public RelationalDatabase withRelationalDatabaseBundleId(String relationalDatabaseBundleId) {
        this.relationalDatabaseBundleId = relationalDatabaseBundleId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceType")
    public ResourceTypeEnum resourceType;

    public RelationalDatabase withResourceType(ResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryAvailabilityZone")
    public String secondaryAvailabilityZone;

    public RelationalDatabase withSecondaryAvailabilityZone(String secondaryAvailabilityZone) {
        this.secondaryAvailabilityZone = secondaryAvailabilityZone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public RelationalDatabase withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportCode")
    public String supportCode;

    public RelationalDatabase withSupportCode(String supportCode) {
        this.supportCode = supportCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;

    public RelationalDatabase withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    public RelationalDatabase(){}
}
