/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The updated note.
 */
export class BatchUpdateFindingsRequestBodyNote extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedBy" })
  updatedBy?: string;
}

/**
 * Updates to the severity information for a finding.
 */
export class BatchUpdateFindingsRequestBodySeverity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Label" })
  label?: shared.SeverityLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Normalized" })
  normalized?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Product" })
  product?: number;
}

/**
 * <p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>
 */
export enum BatchUpdateFindingsRequestBodyVerificationStateEnum {
  Unknown = "UNKNOWN",
  TruePositive = "TRUE_POSITIVE",
  FalsePositive = "FALSE_POSITIVE",
  BenignPositive = "BENIGN_POSITIVE",
}

/**
 * Used to update information about the investigation into the finding.
 */
export class BatchUpdateFindingsRequestBodyWorkflow extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: shared.WorkflowStatusEnum;
}

export class BatchUpdateFindingsRequestBody extends SpeakeasyBase {
  /**
   * <p>The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify.</p> <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Confidence" })
  confidence?: number;

  /**
   * <p>The updated value for the level of importance assigned to the resources associated with the findings.</p> <p>A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Criticality" })
  criticality?: number;

  /**
   * <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update up to 100 findings at a time.</p> <p>For each finding, the list provides the finding identifier and the ARN of the finding provider.</p>
   */
  @SpeakeasyMetadata({ elemType: shared.AwsSecurityFindingIdentifier })
  @Expose({ name: "FindingIdentifiers" })
  @Type(() => shared.AwsSecurityFindingIdentifier)
  findingIdentifiers: shared.AwsSecurityFindingIdentifier[];

  /**
   * The updated note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Note" })
  @Type(() => BatchUpdateFindingsRequestBodyNote)
  note?: BatchUpdateFindingsRequestBodyNote;

  /**
   * A list of findings that are related to the updated findings.
   */
  @SpeakeasyMetadata({ elemType: shared.RelatedFinding })
  @Expose({ name: "RelatedFindings" })
  @Type(() => shared.RelatedFinding)
  relatedFindings?: shared.RelatedFinding[];

  /**
   * Updates to the severity information for a finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Severity" })
  @Type(() => BatchUpdateFindingsRequestBodySeverity)
  severity?: BatchUpdateFindingsRequestBodySeverity;

  /**
   * <p>One or more finding types in the format of namespace/category/classifier that classify a finding.</p> <p>Valid namespace values are as follows.</p> <ul> <li> <p>Software and Configuration Checks</p> </li> <li> <p>TTPs</p> </li> <li> <p>Effects</p> </li> <li> <p>Unusual Behaviors</p> </li> <li> <p>Sensitive Data Identifications </p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Types" })
  types?: string[];

  /**
   * A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UserDefinedFields" })
  userDefinedFields?: Record<string, string>;

  /**
   * <p>Indicates the veracity of a finding.</p> <p>The available values for <code>VerificationState</code> are as follows.</p> <ul> <li> <p> <code>UNKNOWN</code> – The default disposition of a security finding</p> </li> <li> <p> <code>TRUE_POSITIVE</code> – The security finding is confirmed</p> </li> <li> <p> <code>FALSE_POSITIVE</code> – The security finding was determined to be a false alarm</p> </li> <li> <p> <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where the finding doesn't pose any threat, is expected, or both</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VerificationState" })
  verificationState?: BatchUpdateFindingsRequestBodyVerificationStateEnum;

  /**
   * Used to update information about the investigation into the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Workflow" })
  @Type(() => BatchUpdateFindingsRequestBodyWorkflow)
  workflow?: BatchUpdateFindingsRequestBodyWorkflow;
}

export class BatchUpdateFindingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: BatchUpdateFindingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class BatchUpdateFindingsResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  batchUpdateFindingsResponse?: shared.BatchUpdateFindingsResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidAccessException
   */
  @SpeakeasyMetadata()
  invalidAccessException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
