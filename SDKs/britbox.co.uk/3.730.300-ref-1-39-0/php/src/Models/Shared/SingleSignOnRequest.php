<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SingleSignOnRequest - A single-sign-on request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SingleSignOnRequest
{
    /**
     * If you specify a cookie type then a content filter cookie will be returned
     * 
     * along with the token(s). This is only intended for web based clients which
     * need to pass the cookies to a server to render a page based on the user's
     * content filters e.g subscription code.
     * 
     * If type `Session` the cookie will be session based.
     * If type `Persistent` the cookie will have a medium term lifespan.
     * If undefined no cookies will be set.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestCookieTypeEnum $cookieType
     */
	#[\JMS\Serializer\Annotation\SerializedName('cookieType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestCookieTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SingleSignOnRequestCookieTypeEnum $cookieType = null;
    
    /**
     * When a user attempts to sign in using single-sign-on, we may find an account created
     * 
     * previously through the manual sign up flow with the same email. If this is the
     * case then an option to link the two accounts can be made available.
     * 
     * If this flag is set to true then accounts will be linked automatically.
     * 
     * If this flag is not set or set to false and an existing account is found 
     * then an http 401 with subcode `6001` will be returned. Client apps can then present the
     * option to link the accounts. If the user decides to accept, then the same call
     * can be repeated with this flag set to true.
     * 
     * 
     * @var ?bool $linkAccounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('linkAccounts')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $linkAccounts = null;
    
    /**
     * The third party single-sign-on provider.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestProviderEnum $provider
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestProviderEnum>')]
    public SingleSignOnRequestProviderEnum $provider;
    
    /**
     * The scope(s) of the tokens required.
     * 
     * For each scope listed an Account and Profile token of that scope will be returned.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestScopesEnum> $scopes
     */
	#[\JMS\Serializer\Annotation\SerializedName('scopes')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestScopesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scopes = null;
    
    /**
     * A token from the third party single-sign-on provider e.g. an identity token from Facebook.
     * 
     * @var string $token
     */
	#[\JMS\Serializer\Annotation\SerializedName('token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $token;
    
	public function __construct()
	{
		$this->cookieType = null;
		$this->linkAccounts = null;
		$this->provider = \OpenAPI\OpenAPI\Models\Shared\SingleSignOnRequestProviderEnum::FACEBOOK;
		$this->scopes = null;
		$this->token = "";
	}
}
