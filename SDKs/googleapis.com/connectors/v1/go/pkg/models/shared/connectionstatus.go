// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectionStatusStateEnum - State.
type ConnectionStatusStateEnum string

const (
	ConnectionStatusStateEnumStateUnspecified      ConnectionStatusStateEnum = "STATE_UNSPECIFIED"
	ConnectionStatusStateEnumCreating              ConnectionStatusStateEnum = "CREATING"
	ConnectionStatusStateEnumActive                ConnectionStatusStateEnum = "ACTIVE"
	ConnectionStatusStateEnumInactive              ConnectionStatusStateEnum = "INACTIVE"
	ConnectionStatusStateEnumDeleting              ConnectionStatusStateEnum = "DELETING"
	ConnectionStatusStateEnumUpdating              ConnectionStatusStateEnum = "UPDATING"
	ConnectionStatusStateEnumError                 ConnectionStatusStateEnum = "ERROR"
	ConnectionStatusStateEnumAuthorizationRequired ConnectionStatusStateEnum = "AUTHORIZATION_REQUIRED"
)

func (e *ConnectionStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "ERROR":
		fallthrough
	case "AUTHORIZATION_REQUIRED":
		*e = ConnectionStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionStatusStateEnum: %s", s)
	}
}

// ConnectionStatus - ConnectionStatus indicates the state of the connection.
type ConnectionStatus struct {
	// Description.
	Description *string `json:"description,omitempty"`
	// State.
	State *ConnectionStatusStateEnum `json:"state,omitempty"`
	// Status provides detailed information for the state.
	Status *string `json:"status,omitempty"`
}
