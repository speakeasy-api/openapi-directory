// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateMonitorPathParams struct {
	// The name of the monitor.
	MonitorName string `pathParam:"style=simple,explode=false,name=MonitorName"`
}

type UpdateMonitorHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateMonitorRequestBodyStatusEnum - The status for a monitor. The accepted values for <code>Status</code> with the <code>UpdateMonitor</code> API call are the following: <code>ACTIVE</code> and <code>INACTIVE</code>. The following values are <i>not</i> accepted: <code>PENDING</code>, and <code>ERROR</code>.
type UpdateMonitorRequestBodyStatusEnum string

const (
	UpdateMonitorRequestBodyStatusEnumPending  UpdateMonitorRequestBodyStatusEnum = "PENDING"
	UpdateMonitorRequestBodyStatusEnumActive   UpdateMonitorRequestBodyStatusEnum = "ACTIVE"
	UpdateMonitorRequestBodyStatusEnumInactive UpdateMonitorRequestBodyStatusEnum = "INACTIVE"
	UpdateMonitorRequestBodyStatusEnumError    UpdateMonitorRequestBodyStatusEnum = "ERROR"
)

func (e *UpdateMonitorRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "ERROR":
		*e = UpdateMonitorRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMonitorRequestBodyStatusEnum: %s", s)
	}
}

type UpdateMonitorRequestBody struct {
	// A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. You should not reuse the same client token for other API requests.
	ClientToken *string `json:"ClientToken,omitempty"`
	// The maximum number of city-network combinations (that is, combinations of a city location and network, such as an ISP) to be monitored for your resources.
	MaxCityNetworksToMonitor *int64 `json:"MaxCityNetworksToMonitor,omitempty"`
	// <p>The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p> <p>You can add a combination of Amazon Virtual Private Clouds (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories. You can't add all three types of resources.</p> <note> <p>If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.</p> </note>
	ResourcesToAdd []string `json:"ResourcesToAdd,omitempty"`
	// The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	ResourcesToRemove []string `json:"ResourcesToRemove,omitempty"`
	// The status for a monitor. The accepted values for <code>Status</code> with the <code>UpdateMonitor</code> API call are the following: <code>ACTIVE</code> and <code>INACTIVE</code>. The following values are <i>not</i> accepted: <code>PENDING</code>, and <code>ERROR</code>.
	Status *UpdateMonitorRequestBodyStatusEnum `json:"Status,omitempty"`
}

type UpdateMonitorRequest struct {
	PathParams UpdateMonitorPathParams
	Headers    UpdateMonitorHeaders
	Request    UpdateMonitorRequestBody `request:"mediaType=application/json"`
}

type UpdateMonitorResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateMonitorOutput *shared.UpdateMonitorOutput
	// ValidationException
	ValidationException interface{}
}
