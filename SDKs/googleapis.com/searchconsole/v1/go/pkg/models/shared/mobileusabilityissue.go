// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MobileUsabilityIssueIssueTypeEnum - Mobile-usability issue type.
type MobileUsabilityIssueIssueTypeEnum string

const (
	MobileUsabilityIssueIssueTypeEnumMobileUsabilityIssueTypeUnspecified MobileUsabilityIssueIssueTypeEnum = "MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED"
	MobileUsabilityIssueIssueTypeEnumUsesIncompatiblePlugins             MobileUsabilityIssueIssueTypeEnum = "USES_INCOMPATIBLE_PLUGINS"
	MobileUsabilityIssueIssueTypeEnumConfigureViewport                   MobileUsabilityIssueIssueTypeEnum = "CONFIGURE_VIEWPORT"
	MobileUsabilityIssueIssueTypeEnumFixedWidthViewport                  MobileUsabilityIssueIssueTypeEnum = "FIXED_WIDTH_VIEWPORT"
	MobileUsabilityIssueIssueTypeEnumSizeContentToViewport               MobileUsabilityIssueIssueTypeEnum = "SIZE_CONTENT_TO_VIEWPORT"
	MobileUsabilityIssueIssueTypeEnumUseLegibleFontSizes                 MobileUsabilityIssueIssueTypeEnum = "USE_LEGIBLE_FONT_SIZES"
	MobileUsabilityIssueIssueTypeEnumTapTargetsTooClose                  MobileUsabilityIssueIssueTypeEnum = "TAP_TARGETS_TOO_CLOSE"
)

func (e MobileUsabilityIssueIssueTypeEnum) ToPointer() *MobileUsabilityIssueIssueTypeEnum {
	return &e
}

func (e *MobileUsabilityIssueIssueTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED":
		fallthrough
	case "USES_INCOMPATIBLE_PLUGINS":
		fallthrough
	case "CONFIGURE_VIEWPORT":
		fallthrough
	case "FIXED_WIDTH_VIEWPORT":
		fallthrough
	case "SIZE_CONTENT_TO_VIEWPORT":
		fallthrough
	case "USE_LEGIBLE_FONT_SIZES":
		fallthrough
	case "TAP_TARGETS_TOO_CLOSE":
		*e = MobileUsabilityIssueIssueTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MobileUsabilityIssueIssueTypeEnum: %v", v)
	}
}

// MobileUsabilityIssueSeverityEnum - Not returned; reserved for future use.
type MobileUsabilityIssueSeverityEnum string

const (
	MobileUsabilityIssueSeverityEnumSeverityUnspecified MobileUsabilityIssueSeverityEnum = "SEVERITY_UNSPECIFIED"
	MobileUsabilityIssueSeverityEnumWarning             MobileUsabilityIssueSeverityEnum = "WARNING"
	MobileUsabilityIssueSeverityEnumError               MobileUsabilityIssueSeverityEnum = "ERROR"
)

func (e MobileUsabilityIssueSeverityEnum) ToPointer() *MobileUsabilityIssueSeverityEnum {
	return &e
}

func (e *MobileUsabilityIssueSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = MobileUsabilityIssueSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MobileUsabilityIssueSeverityEnum: %v", v)
	}
}

// MobileUsabilityIssue - Mobile-usability issue.
type MobileUsabilityIssue struct {
	// Mobile-usability issue type.
	IssueType *MobileUsabilityIssueIssueTypeEnum `json:"issueType,omitempty"`
	// Additional information regarding the issue.
	Message *string `json:"message,omitempty"`
	// Not returned; reserved for future use.
	Severity *MobileUsabilityIssueSeverityEnum `json:"severity,omitempty"`
}
