"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MarkdownRenderRequestBodyModeEnum(str, Enum):
    r"""The rendering mode."""
    MARKDOWN = 'markdown'
    GFM = 'gfm'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarkdownRenderRequestBody:
    
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The Markdown text to render in HTML."""  
    context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""The repository context to use when creating references in `gfm` mode."""  
    mode: Optional[MarkdownRenderRequestBodyModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The rendering mode."""  
    

@dataclasses.dataclass
class MarkdownRenderResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    markdown_render_200_text_html_string: Optional[str] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    