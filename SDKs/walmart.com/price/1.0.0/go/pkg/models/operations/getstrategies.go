// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetStrategiesRequest struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum string

const (
	GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnumUnit       GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum = "UNIT"
	GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnumPercentage GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum = "PERCENTAGE"
)

func (e GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum) ToPointer() *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum {
	return &e
}

func (e *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNIT":
		fallthrough
	case "PERCENTAGE":
		*e = GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum: %v", v)
	}
}

type GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum string

const (
	GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnumBuyBoxPrice      GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum = "Buy Box Price"
	GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnumExternalPrice    GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum = "External Price"
	GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnumCompetitivePrice GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum = "Competitive Price"
)

func (e GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum) ToPointer() *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum {
	return &e
}

func (e *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Buy Box Price":
		fallthrough
	case "External Price":
		fallthrough
	case "Competitive Price":
		*e = GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum: %v", v)
	}
}

type GetStrategies200ApplicationJSONStrategyCollectionsStrategies struct {
	AdjustmentType  *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesAdjustmentTypeEnum `json:"adjustmentType,omitempty"`
	AdjustmentValue *float64                                                                        `json:"adjustmentValue,omitempty"`
	StrategyType    *GetStrategies200ApplicationJSONStrategyCollectionsStrategiesStrategyTypeEnum   `json:"strategyType,omitempty"`
}

type GetStrategies200ApplicationJSONStrategyCollections struct {
	AssignedCount              *int                                                           `json:"assignedCount,omitempty"`
	EnableRepricerForPromotion *bool                                                          `json:"enableRepricerForPromotion,omitempty"`
	Enabled                    *bool                                                          `json:"enabled,omitempty"`
	RepricerStrategy           *string                                                        `json:"repricerStrategy,omitempty"`
	Strategies                 []GetStrategies200ApplicationJSONStrategyCollectionsStrategies `json:"strategies,omitempty"`
	StrategyCollectionID       *string                                                        `json:"strategyCollectionId,omitempty"`
}

// GetStrategies200ApplicationJSON - Successful Operation
type GetStrategies200ApplicationJSON struct {
	StrategyCollections []GetStrategies200ApplicationJSONStrategyCollections `json:"strategyCollections,omitempty"`
	TotalElements       *int                                                 `json:"totalElements,omitempty"`
}

type GetStrategiesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	GetStrategies200ApplicationJSONObject *GetStrategies200ApplicationJSON
}
