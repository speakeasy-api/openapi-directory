"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taglist as shared_taglist
from enum import Enum
from typing import Optional

class TagResource20190326OperationEnum(str, Enum):
    TAG = 'Tag'


@dataclasses.dataclass
class TagResource20190326RequestBodyTags:
    r"""A complex type that contains zero or more <code>Tag</code> elements."""
    
    items: Optional[list[shared_taglist.TagList]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class TagResource20190326RequestBody:
    
    tags: TagResource20190326RequestBodyTags = dataclasses.field()
    r"""A complex type that contains zero or more <code>Tag</code> elements."""  
    

@dataclasses.dataclass
class TagResource20190326Request:
    
    operation: TagResource20190326OperationEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Operation', 'style': 'form', 'explode': True }})  
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/xml' }})  
    resource: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Resource', 'style': 'form', 'explode': True }})
    r"""An ARN of a CloudFront resource."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class TagResource20190326Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    