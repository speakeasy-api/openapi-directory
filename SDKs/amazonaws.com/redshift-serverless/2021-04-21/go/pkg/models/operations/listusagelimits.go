// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListUsageLimitsXAmzTargetEnum
type ListUsageLimitsXAmzTargetEnum string

const (
	ListUsageLimitsXAmzTargetEnumRedshiftServerlessListUsageLimits ListUsageLimitsXAmzTargetEnum = "RedshiftServerless.ListUsageLimits"
)

func (e ListUsageLimitsXAmzTargetEnum) ToPointer() *ListUsageLimitsXAmzTargetEnum {
	return &e
}

func (e *ListUsageLimitsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RedshiftServerless.ListUsageLimits":
		*e = ListUsageLimitsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUsageLimitsXAmzTargetEnum: %v", v)
	}
}

type ListUsageLimitsRequest struct {
	ListUsageLimitsRequest shared.ListUsageLimitsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             ListUsageLimitsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListUsageLimitsResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// InvalidPaginationException
	InvalidPaginationException interface{}
	// Success
	ListUsageLimitsResponse *shared.ListUsageLimitsResponse
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ValidationException
	ValidationException interface{}
}
