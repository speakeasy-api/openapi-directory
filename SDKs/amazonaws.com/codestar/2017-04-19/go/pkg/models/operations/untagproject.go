// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UntagProjectXAmzTargetEnum
type UntagProjectXAmzTargetEnum string

const (
	UntagProjectXAmzTargetEnumCodeStar20170419UntagProject UntagProjectXAmzTargetEnum = "CodeStar_20170419.UntagProject"
)

func (e UntagProjectXAmzTargetEnum) ToPointer() *UntagProjectXAmzTargetEnum {
	return &e
}

func (e *UntagProjectXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeStar_20170419.UntagProject":
		*e = UntagProjectXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UntagProjectXAmzTargetEnum: %v", v)
	}
}

type UntagProjectRequest struct {
	UntagProjectRequest shared.UntagProjectRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          UntagProjectXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UntagProjectResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// LimitExceededException
	LimitExceededException interface{}
	// ProjectNotFoundException
	ProjectNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
	// Success
	UntagProjectResult map[string]interface{}
	// ValidationException
	ValidationException interface{}
}
