<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivate(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:activate', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activateCertificateAuthorityRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateRevocationLists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateRevocationLists', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCertificateRevocationListsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateRevocationListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateRevocationListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CertificateAuthority in a given Project and Location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateAuthorities', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateAuthorityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable a CertificateAuthority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisable(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:disable', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disableCertificateAuthorityRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable a CertificateAuthority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnable(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:enable', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "enableCertificateAuthorityRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetch(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:fetch', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesFetchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchCertificateAuthorityCsrResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchCertificateAuthorityCsrResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateAuthorities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateAuthorities', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateAuthoritiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateAuthoritiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undelete a CertificateAuthority that has been deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:undelete', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "undeleteCertificateAuthorityRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificateAuthoritiesUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Certificate in a given Project, Location from a particular CaPool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Certificates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revoke a Certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeResponse
     */
	public function privatecaProjectsLocationsCaPoolsCertificatesRevoke(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:revoke', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "revokeCertificateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCertificatesRevokeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a CaPool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateResponse
     */
	public function privatecaProjectsLocationsCaPoolsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/caPools', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "caPoolInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * FetchCaCerts returns the current trust anchor for the CaPool. This will include CA certificate chains for all ACTIVE CertificateAuthority resources in the CaPool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsResponse
     */
	public function privatecaProjectsLocationsCaPoolsFetchCaCerts(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{caPool}:fetchCaCerts', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fetchCaCertsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsFetchCaCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchCaCertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchCaCertsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CaPools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListResponse
     */
	public function privatecaProjectsLocationsCaPoolsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/caPools', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCaPoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCaPoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCaPoolsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CertificateTemplate in a given Project and Location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateTemplates', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateTemplates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateTemplates', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateTemplatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateTemplatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a CertificateTemplate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesPatch(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsResponse
     */
	public function privatecaProjectsLocationsCertificateTemplatesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsCertificateTemplatesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListResponse
     */
	public function privatecaProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelResponse
     */
	public function privatecaProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteResponse
     */
	public function privatecaProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetResponse
     */
	public function privatecaProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListResponse
     */
	public function privatecaProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivatecaProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}