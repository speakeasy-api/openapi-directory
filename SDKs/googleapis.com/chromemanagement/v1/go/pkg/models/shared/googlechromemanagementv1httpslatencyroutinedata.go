// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum - Output only. HTTPS latency routine problem if a problem occurred.
type GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum string

const (
	GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnumHTTPSLatencyProblemUnspecified GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum = "HTTPS_LATENCY_PROBLEM_UNSPECIFIED"
	GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnumFailedDNSResolutions           GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum = "FAILED_DNS_RESOLUTIONS"
	GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnumFailedHTTPSRequests            GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum = "FAILED_HTTPS_REQUESTS"
	GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnumHighLatency                    GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum = "HIGH_LATENCY"
	GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnumVeryHighLatency                GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum = "VERY_HIGH_LATENCY"
)

func (e GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum) ToPointer() *GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum {
	return &e
}

func (e *GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTPS_LATENCY_PROBLEM_UNSPECIFIED":
		fallthrough
	case "FAILED_DNS_RESOLUTIONS":
		fallthrough
	case "FAILED_HTTPS_REQUESTS":
		fallthrough
	case "HIGH_LATENCY":
		fallthrough
	case "VERY_HIGH_LATENCY":
		*e = GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum: %v", v)
	}
}

// GoogleChromeManagementV1HTTPSLatencyRoutineData - Data that describes the result of the HTTPS latency diagnostics routine, with the HTTPS requests issued to Google websites.
type GoogleChromeManagementV1HTTPSLatencyRoutineData struct {
	// Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY.
	Latency *string `json:"latency,omitempty"`
	// Output only. HTTPS latency routine problem if a problem occurred.
	Problem *GoogleChromeManagementV1HTTPSLatencyRoutineDataProblemEnum `json:"problem,omitempty"`
}
