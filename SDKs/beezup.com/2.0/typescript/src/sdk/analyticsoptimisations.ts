/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AnalyticsOptimisations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Copy product optimisations between 2 channels
   */
  copyOptimisation(
    req: operations.CopyOptimisationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopyOptimisationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopyOptimisationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/copy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "copyOptimisationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopyOptimisationResponse =
        new operations.CopyOptimisationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyOptimisationResponse = utils.objectToClass(
              httpRes?.data,
              shared.CopyOptimisationResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Optimise products by page
   *
   * @remarks
   * /!\ WARNING /!\ \
   * Apply the operation on every product related to this request. \
   * This operation is used at the bottom of the analytics page result.
   *
   */
  optimise(
    req: operations.OptimiseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OptimiseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptimiseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/{actionName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "optimiseRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptimiseResponse = new operations.OptimiseResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Optimise all products
   *
   * @remarks
   * /!\ WARNING /!\ \
   * Apply the operation on every product related to this request. \
   * This operation is used at the bottom of the analytics page result.
   *
   */
  optimiseAll(
    req: operations.OptimiseAllRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OptimiseAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptimiseAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/all/{actionName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "optimiseAllRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptimiseAllResponse =
        new operations.OptimiseAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Optimise products by category
   *
   * @remarks
   * /!\ WARNING /!\ \
   * This operation will reenable or disable products's category for every channel indicated in the body.
   *
   */
  optimiseByCategory(
    req: operations.OptimiseByCategoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OptimiseByCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptimiseByCategoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptimiseByCategoryResponse =
        new operations.OptimiseByCategoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Optimise products by channel
   *
   * @remarks
   * /!\ WARNING /!\ \
   * Apply the operation on every product on this channel.
   *
   */
  optimiseByChannel(
    req: operations.OptimiseByChannelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OptimiseByChannelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptimiseByChannelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptimiseByChannelResponse =
        new operations.OptimiseByChannelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Optimise product
   *
   * @remarks
   * /!\ WARNING /!\ \
   * This operation will reenable or disable this product for every channel indicated in the body.
   *
   */
  optimiseByProduct(
    req: operations.OptimiseByProductRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OptimiseByProductResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptimiseByProductRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptimiseByProductResponse =
        new operations.OptimiseByProductResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }
}
