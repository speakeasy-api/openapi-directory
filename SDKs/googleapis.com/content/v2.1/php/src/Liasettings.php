<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Liasettings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchResponse
     */
	public function contentLiasettingsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/liasettings/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "liasettingsCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the LIA settings of the account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetResponse
     */
	public function contentLiasettingsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liaSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiaSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of accessible Business Profiles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsResponse
     */
	public function contentLiasettingsGetaccessiblegmbaccounts(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsGetaccessiblegmbaccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsGetAccessibleGmbAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsGetAccessibleGmbAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the LIA settings of the sub-accounts in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListResponse
     */
	public function contentLiasettingsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of POS data providers that have active settings for the all eiligible countries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersResponse
     */
	public function contentLiasettingsListposdataproviders(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/liasettings/posdataproviders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsListposdataprovidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsListPosDataProvidersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsListPosDataProvidersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Requests access to a specified Business Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessResponse
     */
	public function contentLiasettingsRequestgmbaccess(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}/requestgmbaccess', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestgmbaccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsRequestGmbAccessResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsRequestGmbAccessResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Requests inventory validation for the specified country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationResponse
     */
	public function contentLiasettingsRequestinventoryverification(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsRequestinventoryverificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsRequestInventoryVerificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsRequestInventoryVerificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the inventory verification contract for the specified country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactResponse
     */
	public function contentLiasettingsSetinventoryverificationcontact(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetinventoryverificationcontactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsSetInventoryVerificationContactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsSetInventoryVerificationContactResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the POS data provider for the specified country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderResponse
     */
	public function contentLiasettingsSetposdataprovider(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}/setposdataprovider', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsSetposdataproviderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liasettingsSetPosDataProviderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiasettingsSetPosDataProviderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateResponse
     */
	public function contentLiasettingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/liasettings/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "liaSettings", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentLiasettingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->liaSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LiaSettings', 'json');
            }
        }

        return $response;
    }
}