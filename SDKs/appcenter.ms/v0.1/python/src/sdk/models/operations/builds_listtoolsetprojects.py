"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class BuildsListToolsetProjectsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class BuildsListToolsetProjectsOsEnum(str, Enum):
    r"""The desired OS for the project scan; normally the same as the app OS"""
    I_OS = 'iOS'
    ANDROID = 'Android'
    WINDOWS = 'Windows'
    MAC_OS = 'macOS'

class BuildsListToolsetProjectsPlatformEnum(str, Enum):
    r"""The desired platform for the project scan"""
    OBJECTIVE_C_SWIFT = 'Objective-C-Swift'
    REACT_NATIVE = 'React-Native'
    XAMARIN = 'Xamarin'
    JAVA = 'Java'
    UWP = 'UWP'


@dataclasses.dataclass
class BuildsListToolsetProjectsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    branch: str = dataclasses.field(metadata={'path_param': { 'field_name': 'branch', 'style': 'simple', 'explode': False }})
    r"""The branch name"""  
    os: BuildsListToolsetProjectsOsEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'os', 'style': 'form', 'explode': True }})
    r"""The desired OS for the project scan; normally the same as the app OS"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    platform: BuildsListToolsetProjectsPlatformEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'platform', 'style': 'form', 'explode': True }})
    r"""The desired platform for the project scan"""  
    max_search_depth: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxSearchDepth', 'style': 'form', 'explode': True }})
    r"""The depth of the repository to search for project files"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig:
    r"""Android signing config. Null if not specified"""
    
    has_store_file: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasStoreFile'), 'exclude': lambda f: f is None }})
    r"""Indicates if storeFile is specified in the signing configuration"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of build configuration (the same as a build type name)"""  
    signing_config: Optional[BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingConfig'), 'exclude': lambda f: f is None }})
    r"""Android signing config. Null if not specified"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Android module"""  
    build_configurations: Optional[list[BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildConfigurations'), 'exclude': lambda f: f is None }})
    r"""The detected build configurations of the Android module"""  
    build_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildTypes'), 'exclude': lambda f: f is None }})
    r"""The detected build types of the Android module"""  
    build_variants: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildVariants'), 'exclude': lambda f: f is None }})
    r"""The detected build variants of the Android module (matrix of product flavor + build type (debug|release))"""  
    has_bundle: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasBundle'), 'exclude': lambda f: f is None }})
    r"""Module contains bundle settings"""  
    is_root: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRoot'), 'exclude': lambda f: f is None }})
    r"""Whether the module is at the root level of the project"""  
    product_flavors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productFlavors'), 'exclude': lambda f: f is None }})
    r"""The product flavors of the Android module"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONAndroid:
    
    android_modules: list[BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidModules') }})
    r"""Android Gradle modules"""  
    gradle_wrapper_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradleWrapperPath'), 'exclude': lambda f: f is None }})
    r"""The path of the Gradle wrapper"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions:
    
    package_json_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageJsonPath') }})
    r"""The path to the detected package.json"""  
    react_native_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reactNativeVersion'), 'exclude': lambda f: f is None }})
    r"""Version of React Native from package.json files"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONJavascript:
    
    package_json_paths: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageJsonPaths') }})
    r"""Paths for detected package.json files"""  
    javascript_solutions: Optional[list[BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('javascriptSolutions'), 'exclude': lambda f: f is None }})
    r"""The React Native solutions detected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties:
    
    configurations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurations'), 'exclude': lambda f: f is None }})  
    
class BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum(str, Enum):
    APPIUM = 'Appium'
    CALABASH = 'Calabash'
    ESPRESSO = 'Espresso'
    UI_TEST = 'UITest'
    GENERATED = 'Generated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONTestcloudProjects:
    
    framework_type: BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameworkType') }})  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path to the TestCloud project"""  
    framework_properties: Optional[BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameworkProperties'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONTestcloud:
    
    projects: list[BuildsListToolsetProjects200ApplicationJSONTestcloudProjects] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projects') }})
    r"""The TestCloud projects detected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions:
    
    configurations: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurations') }})
    r"""The possible configurations detected for the UWP solution"""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path to the UWP solution"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONUwp:
    
    uwp_solutions: list[BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uwpSolutions') }})
    r"""The UWP solutions detected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions:
    
    configurations: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurations') }})
    r"""Solution configurations"""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path to solution"""  
    default_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultConfiguration'), 'exclude': lambda f: f is None }})
    r"""Solution default configuration"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXamarin:
    
    xamarin_solutions: list[BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xamarinSolutions') }})
    r"""Xamarin solutions for the toolset"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets:
    r"""App extension information"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""App extension name"""  
    target_bundle_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetBundleIdentifier') }})
    r"""App extension bundle identifier"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject:
    
    archive_target_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archiveTargetId') }})
    r"""The Id of the target to archive"""  
    project_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectName') }})
    r"""The project to archive container name"""  
    project_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectPath'), 'exclude': lambda f: f is None }})
    r"""Full path of the target project"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes:
    
    has_test_action: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasTestAction') }})
    r"""Does scheme have a test action?"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Scheme name"""  
    archive_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archiveConfiguration'), 'exclude': lambda f: f is None }})
    r"""Build configuration set in Archive action"""  
    archive_project: Optional[BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archiveProject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers:
    
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path to project"""  
    shared_schemes: list[BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedSchemes') }})
    r"""Project schemes"""  
    app_extension_targets: Optional[list[BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appExtensionTargets'), 'exclude': lambda f: f is None }})
    r"""Information regarding project app extensions, if present"""  
    cartfile_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cartfilePath'), 'exclude': lambda f: f is None }})
    r"""Path to Carthage file, if present"""  
    podfile_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podfilePath'), 'exclude': lambda f: f is None }})
    r"""Path to CocoaPods file, if present"""  
    workspace_project_paths: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workspaceProjectPaths'), 'exclude': lambda f: f is None }})
    r"""Related projects paths for xcworkspace"""  
    xcode_project_sha: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xcodeProjectSha'), 'exclude': lambda f: f is None }})
    r"""repo object Id of the pbxproject"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSONXcode:
    
    xcode_scheme_containers: list[BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xcodeSchemeContainers') }})
    r"""The Xcode scheme containers"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsListToolsetProjects200ApplicationJSON:
    r"""A collection of projects for each type of toolset"""
    
    android: Optional[BuildsListToolsetProjects200ApplicationJSONAndroid] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('android'), 'exclude': lambda f: f is None }})  
    buildscripts: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildscripts'), 'exclude': lambda f: f is None }})
    r"""A collection of detected pre/post buildscripts for current platform toolset"""  
    commit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit'), 'exclude': lambda f: f is None }})
    r"""The commit hash of the analyzed commit"""  
    javascript: Optional[BuildsListToolsetProjects200ApplicationJSONJavascript] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('javascript'), 'exclude': lambda f: f is None }})  
    testcloud: Optional[BuildsListToolsetProjects200ApplicationJSONTestcloud] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testcloud'), 'exclude': lambda f: f is None }})  
    uwp: Optional[BuildsListToolsetProjects200ApplicationJSONUwp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uwp'), 'exclude': lambda f: f is None }})  
    xamarin: Optional[BuildsListToolsetProjects200ApplicationJSONXamarin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xamarin'), 'exclude': lambda f: f is None }})  
    xcode: Optional[BuildsListToolsetProjects200ApplicationJSONXcode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xcode'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class BuildsListToolsetProjectsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    builds_list_toolset_projects_200_application_json_object: Optional[BuildsListToolsetProjects200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    