/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateCallServerList = ["https://api.twilio.com"] as const;

export class CreateCallSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
 */
export enum CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
 */
export enum CreateCallCreateCallRequestFallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
 */
export enum CreateCallCreateCallRequestMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
 */
export enum CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
 */
export enum CreateCallCreateCallRequestStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class CreateCallCreateCallRequest extends SpeakeasyBase {
  /**
   * The SID of the Application resource that will handle the call, if the call will be handled by an application.
   */
  @SpeakeasyMetadata({ data: "form, name=ApplicationSid" })
  applicationSid?: string;

  /**
   * Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=AsyncAmd" })
  asyncAmd?: string;

  /**
   * The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
   */
  @SpeakeasyMetadata({ data: "form, name=AsyncAmdStatusCallback" })
  asyncAmdStatusCallback?: string;

  /**
   * The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=AsyncAmdStatusCallbackMethod" })
  asyncAmdStatusCallbackMethod?: CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum;

  /**
   * The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
   */
  @SpeakeasyMetadata({ data: "form, name=Byoc" })
  byoc?: string;

  /**
   * The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
   */
  @SpeakeasyMetadata({ data: "form, name=CallReason" })
  callReason?: string;

  /**
   * A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
   */
  @SpeakeasyMetadata({ data: "form, name=CallToken" })
  callToken?: string;

  /**
   * The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
   */
  @SpeakeasyMetadata({ data: "form, name=CallerId" })
  callerId?: string;

  /**
   * The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackMethod" })
  fallbackMethod?: CreateCallCreateCallRequestFallbackMethodEnum;

  /**
   * The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackUrl" })
  fallbackUrl?: string;

  /**
   * The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
   */
  @SpeakeasyMetadata({ data: "form, name=From" })
  from: string;

  /**
   * Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetection" })
  machineDetection?: string;

  /**
   * The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSilenceTimeout" })
  machineDetectionSilenceTimeout?: number;

  /**
   * The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSpeechEndThreshold" })
  machineDetectionSpeechEndThreshold?: number;

  /**
   * The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSpeechThreshold" })
  machineDetectionSpeechThreshold?: number;

  /**
   * The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionTimeout" })
  machineDetectionTimeout?: number;

  /**
   * The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=Method" })
  method?: CreateCallCreateCallRequestMethodEnum;

  /**
   * Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
   */
  @SpeakeasyMetadata({ data: "form, name=Record" })
  record?: boolean;

  /**
   * The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingChannels" })
  recordingChannels?: string;

  /**
   * The URL that we call when the recording is available to be accessed.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallback" })
  recordingStatusCallback?: string;

  /**
   * The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackEvent" })
  recordingStatusCallbackEvent?: string[];

  /**
   * The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackMethod" })
  recordingStatusCallbackMethod?: CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum;

  /**
   * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingTrack" })
  recordingTrack?: string;

  /**
   * A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=SendDigits" })
  sendDigits?: string;

  /**
   * The password required to authenticate the user account specified in `sip_auth_username`.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthPassword" })
  sipAuthPassword?: string;

  /**
   * The username used to authenticate the caller making a SIP call.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthUsername" })
  sipAuthUsername?: string;

  /**
   * The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallback" })
  statusCallback?: string;

  /**
   * The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackEvent" })
  statusCallbackEvent?: string[];

  /**
   * The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackMethod" })
  statusCallbackMethod?: CreateCallCreateCallRequestStatusCallbackMethodEnum;

  /**
   * The maximum duration of the call in seconds. Constraints depend on account and configuration.
   */
  @SpeakeasyMetadata({ data: "form, name=TimeLimit" })
  timeLimit?: number;

  /**
   * The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
   */
  @SpeakeasyMetadata({ data: "form, name=Timeout" })
  timeout?: number;

  /**
   * The phone number, SIP address, or client identifier to call.
   */
  @SpeakeasyMetadata({ data: "form, name=To" })
  to: string;

  /**
   * Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
   */
  @SpeakeasyMetadata({ data: "form, name=Trim" })
  trim?: string;

  /**
   * TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
   */
  @SpeakeasyMetadata({ data: "form, name=Twiml" })
  twiml?: string;

  /**
   * The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
   */
  @SpeakeasyMetadata({ data: "form, name=Url" })
  url?: string;
}

export class CreateCallRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateCallCreateCallRequest;
}

export class CreateCallResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  apiV2010AccountCall?: shared.ApiV2010AccountCall;
}
