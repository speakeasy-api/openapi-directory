/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Investment products  (e.g. mutual funds, ETFs, stocks etc.) are bought and sold by the investor (or by the wealth manager on the investorâ€™s behalf).
 *
 * @remarks
 *
 * The Investment Products endpoint returns all the investment products that are offered by the wealth manager, as well as the current market price. The wealth manager must specify the universe of supported investment products via the WealthOS Admin UI.
 */
export class InvestmentProducts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Current Prices of all Investment Products
   *
   * @remarks
   * Returns current prices of all the investment products configured for this tenancy
   */
  getConfiguredInvestmentProductPrices(
    req: operations.GetConfiguredInvestmentProductPricesRequest,
    security: operations.GetConfiguredInvestmentProductPricesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetConfiguredInvestmentProductPricesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetConfiguredInvestmentProductPricesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/tenant/investment-products/v1/getCurrentPrices";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetConfiguredInvestmentProductPricesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetConfiguredInvestmentProductPricesResponse =
        new operations.GetConfiguredInvestmentProductPricesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProductPrices500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProductPrices500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Configured Investment Products
   *
   * @remarks
   * Returns all the investment products configured for this tenancy. Request can be filtered by status to return all `active` or `inactive` investment products
   */
  getConfiguredInvestmentProducts(
    req: operations.GetConfiguredInvestmentProductsRequest,
    security: operations.GetConfiguredInvestmentProductsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetConfiguredInvestmentProductsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetConfiguredInvestmentProductsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/investment-products/v1";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetConfiguredInvestmentProductsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetConfiguredInvestmentProductsResponse =
        new operations.GetConfiguredInvestmentProductsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getConfiguredInvestmentProducts500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetConfiguredInvestmentProducts500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get details of a given Investment Product
   *
   * @remarks
   * Returns the requested investment product
   */
  getInvestmentProduct(
    req: operations.GetInvestmentProductRequest,
    security: operations.GetInvestmentProductSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInvestmentProductResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetInvestmentProductRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/investment-products/v1/{category_id}/{investment_product_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetInvestmentProductSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInvestmentProductResponse =
        new operations.GetInvestmentProductResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProduct500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProduct500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Current Price of an Investment Product
   *
   * @remarks
   * Returns current price of the requested investment product
   */
  getInvestmentProductPrice(
    req: operations.GetInvestmentProductPriceRequest,
    security: operations.GetInvestmentProductPriceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInvestmentProductPriceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetInvestmentProductPriceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/investment-products/v1/{category_id}/{investment_product_id}/getCurrentPrice",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetInvestmentProductPriceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInvestmentProductPriceResponse =
        new operations.GetInvestmentProductPriceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestmentProductPrice500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInvestmentProductPrice500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
