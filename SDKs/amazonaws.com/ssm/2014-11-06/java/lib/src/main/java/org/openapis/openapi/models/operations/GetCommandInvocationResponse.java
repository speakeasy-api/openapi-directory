/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.net.http.HttpResponse;

public class GetCommandInvocationResponse {
    
    public String contentType;
    public GetCommandInvocationResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.GetCommandInvocationResult getCommandInvocationResult;
    public GetCommandInvocationResponse withGetCommandInvocationResult(org.openapis.openapi.models.shared.GetCommandInvocationResult getCommandInvocationResult) {
        this.getCommandInvocationResult = getCommandInvocationResult;
        return this;
    }
    
    /**
     * InternalServerError
     */
    
    public Object internalServerError;
    public GetCommandInvocationResponse withInternalServerError(Object internalServerError) {
        this.internalServerError = internalServerError;
        return this;
    }
    
    /**
     * InvalidCommandId
     */
    
    public Object invalidCommandId;
    public GetCommandInvocationResponse withInvalidCommandId(Object invalidCommandId) {
        this.invalidCommandId = invalidCommandId;
        return this;
    }
    
    /**
     * InvalidInstanceId
     */
    
    public Object invalidInstanceId;
    public GetCommandInvocationResponse withInvalidInstanceId(Object invalidInstanceId) {
        this.invalidInstanceId = invalidInstanceId;
        return this;
    }
    
    /**
     * InvalidPluginName
     */
    
    public Object invalidPluginName;
    public GetCommandInvocationResponse withInvalidPluginName(Object invalidPluginName) {
        this.invalidPluginName = invalidPluginName;
        return this;
    }
    
    /**
     * InvocationDoesNotExist
     */
    
    public Object invocationDoesNotExist;
    public GetCommandInvocationResponse withInvocationDoesNotExist(Object invocationDoesNotExist) {
        this.invocationDoesNotExist = invocationDoesNotExist;
        return this;
    }
    
    
    public Integer statusCode;
    public GetCommandInvocationResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;
    public GetCommandInvocationResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
}
