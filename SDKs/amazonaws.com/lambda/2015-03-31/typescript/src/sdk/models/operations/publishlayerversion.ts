/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.
 */
export class PublishLayerVersionRequestBodyContent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "S3Bucket" })
  s3Bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3Key" })
  s3Key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3ObjectVersion" })
  s3ObjectVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ZipFile" })
  zipFile?: string;
}

export class PublishLayerVersionRequestBody extends SpeakeasyBase {
  /**
   * A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompatibleArchitectures" })
  compatibleArchitectures?: shared.ArchitectureEnum[];

  /**
   * A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompatibleRuntimes" })
  compatibleRuntimes?: shared.RuntimeEnum[];

  /**
   * A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Content" })
  @Type(() => PublishLayerVersionRequestBodyContent)
  content: PublishLayerVersionRequestBodyContent;

  /**
   * The description of the version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * <p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href="https://spdx.org/licenses/">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LicenseInfo" })
  licenseInfo?: string;
}

export class PublishLayerVersionRequest extends SpeakeasyBase {
  /**
   * The name or Amazon Resource Name (ARN) of the layer.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=LayerName",
  })
  layerName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PublishLayerVersionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PublishLayerVersionResponse extends SpeakeasyBase {
  /**
   * CodeStorageExceededException
   */
  @SpeakeasyMetadata()
  codeStorageExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  publishLayerVersionResponse?: shared.PublishLayerVersionResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
