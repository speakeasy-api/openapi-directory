"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import failurepolicy as shared_failurepolicy
from ..shared import updateresiliencypolicyresponse as shared_updateresiliencypolicyresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateResiliencyPolicyRequestBodyDataLocationConstraintEnum(str, Enum):
    r"""Specifies a high-level geographical location constraint for where your resilience policy data can be stored."""
    ANY_LOCATION = 'AnyLocation'
    SAME_CONTINENT = 'SameContinent'
    SAME_COUNTRY = 'SameCountry'

class UpdateResiliencyPolicyRequestBodyTierEnum(str, Enum):
    r"""The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>)."""
    MISSION_CRITICAL = 'MissionCritical'
    CRITICAL = 'Critical'
    IMPORTANT = 'Important'
    CORE_SERVICES = 'CoreServices'
    NON_CRITICAL = 'NonCritical'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResiliencyPolicyRequestBody:
    
    policy_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyArn') }})
    r"""The Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide."""  
    data_location_constraint: Optional[UpdateResiliencyPolicyRequestBodyDataLocationConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataLocationConstraint'), 'exclude': lambda f: f is None }})
    r"""Specifies a high-level geographical location constraint for where your resilience policy data can be stored."""  
    policy: Optional[dict[str, shared_failurepolicy.FailurePolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds."""  
    policy_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDescription'), 'exclude': lambda f: f is None }})
    r"""The description for the policy."""  
    policy_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyName'), 'exclude': lambda f: f is None }})
    r"""The name of the policy"""  
    tier: Optional[UpdateResiliencyPolicyRequestBodyTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>)."""  
    

@dataclasses.dataclass
class UpdateResiliencyPolicyRequest:
    
    request_body: UpdateResiliencyPolicyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateResiliencyPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_resiliency_policy_response: Optional[shared_updateresiliencypolicyresponse.UpdateResiliencyPolicyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    