"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awss3accountpublicaccessblockdetails as shared_awss3accountpublicaccessblockdetails
from ..shared import awss3bucketbucketlifecycleconfigurationdetails as shared_awss3bucketbucketlifecycleconfigurationdetails
from ..shared import awss3bucketbucketversioningconfiguration as shared_awss3bucketbucketversioningconfiguration
from ..shared import awss3bucketloggingconfiguration as shared_awss3bucketloggingconfiguration
from ..shared import awss3bucketnotificationconfiguration as shared_awss3bucketnotificationconfiguration
from ..shared import awss3bucketobjectlockconfiguration as shared_awss3bucketobjectlockconfiguration
from ..shared import awss3bucketserversideencryptionconfiguration as shared_awss3bucketserversideencryptionconfiguration
from ..shared import awss3bucketwebsiteconfiguration as shared_awss3bucketwebsiteconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsS3BucketDetails:
    r"""The details of an Amazon S3 bucket."""
    
    access_control_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessControlList'), 'exclude': lambda f: f is None }})  
    bucket_lifecycle_configuration: Optional[shared_awss3bucketbucketlifecycleconfigurationdetails.AwsS3BucketBucketLifecycleConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketLifecycleConfiguration'), 'exclude': lambda f: f is None }})  
    bucket_logging_configuration: Optional[shared_awss3bucketloggingconfiguration.AwsS3BucketLoggingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketLoggingConfiguration'), 'exclude': lambda f: f is None }})  
    bucket_notification_configuration: Optional[shared_awss3bucketnotificationconfiguration.AwsS3BucketNotificationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketNotificationConfiguration'), 'exclude': lambda f: f is None }})  
    bucket_versioning_configuration: Optional[shared_awss3bucketbucketversioningconfiguration.AwsS3BucketBucketVersioningConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketVersioningConfiguration'), 'exclude': lambda f: f is None }})  
    bucket_website_configuration: Optional[shared_awss3bucketwebsiteconfiguration.AwsS3BucketWebsiteConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketWebsiteConfiguration'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'exclude': lambda f: f is None }})  
    object_lock_configuration: Optional[shared_awss3bucketobjectlockconfiguration.AwsS3BucketObjectLockConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectLockConfiguration'), 'exclude': lambda f: f is None }})  
    owner_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerAccountId'), 'exclude': lambda f: f is None }})  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})  
    owner_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerName'), 'exclude': lambda f: f is None }})  
    public_access_block_configuration: Optional[shared_awss3accountpublicaccessblockdetails.AwsS3AccountPublicAccessBlockDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublicAccessBlockConfiguration'), 'exclude': lambda f: f is None }})  
    server_side_encryption_configuration: Optional[shared_awss3bucketserversideencryptionconfiguration.AwsS3BucketServerSideEncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerSideEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    