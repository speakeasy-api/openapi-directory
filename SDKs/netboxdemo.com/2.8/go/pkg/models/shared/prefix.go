// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type PrefixFamilyLabelEnum string

const (
	PrefixFamilyLabelEnumIPv4 PrefixFamilyLabelEnum = "IPv4"
	PrefixFamilyLabelEnumIPv6 PrefixFamilyLabelEnum = "IPv6"
)

func (e *PrefixFamilyLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IPv4":
		fallthrough
	case "IPv6":
		*e = PrefixFamilyLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefixFamilyLabelEnum: %s", s)
	}
}

type PrefixFamilyValueEnum string

const (
	PrefixFamilyValueEnumFour PrefixFamilyValueEnum = "4"
	PrefixFamilyValueEnumSix  PrefixFamilyValueEnum = "6"
)

func (e *PrefixFamilyValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4":
		fallthrough
	case "6":
		*e = PrefixFamilyValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefixFamilyValueEnum: %s", s)
	}
}

type PrefixFamily struct {
	Label PrefixFamilyLabelEnum `json:"label"`
	Value PrefixFamilyValueEnum `json:"value"`
}

type PrefixStatusLabelEnum string

const (
	PrefixStatusLabelEnumContainer  PrefixStatusLabelEnum = "Container"
	PrefixStatusLabelEnumActive     PrefixStatusLabelEnum = "Active"
	PrefixStatusLabelEnumReserved   PrefixStatusLabelEnum = "Reserved"
	PrefixStatusLabelEnumDeprecated PrefixStatusLabelEnum = "Deprecated"
)

func (e *PrefixStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Container":
		fallthrough
	case "Active":
		fallthrough
	case "Reserved":
		fallthrough
	case "Deprecated":
		*e = PrefixStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefixStatusLabelEnum: %s", s)
	}
}

type PrefixStatusValueEnum string

const (
	PrefixStatusValueEnumContainer  PrefixStatusValueEnum = "container"
	PrefixStatusValueEnumActive     PrefixStatusValueEnum = "active"
	PrefixStatusValueEnumReserved   PrefixStatusValueEnum = "reserved"
	PrefixStatusValueEnumDeprecated PrefixStatusValueEnum = "deprecated"
)

func (e *PrefixStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "container":
		fallthrough
	case "active":
		fallthrough
	case "reserved":
		fallthrough
	case "deprecated":
		*e = PrefixStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefixStatusValueEnum: %s", s)
	}
}

type PrefixStatus struct {
	Label PrefixStatusLabelEnum `json:"label"`
	Value PrefixStatusValueEnum `json:"value"`
}

type Prefix struct {
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	Family       *PrefixFamily          `json:"family,omitempty"`
	ID           *int64                 `json:"id,omitempty"`
	// All IP addresses within this prefix are considered usable
	IsPool      *bool      `json:"is_pool,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	// IPv4 or IPv6 network with mask
	Prefix string        `json:"prefix"`
	Role   *NestedRole   `json:"role,omitempty"`
	Site   *NestedSite   `json:"site,omitempty"`
	Status *PrefixStatus `json:"status,omitempty"`
	Tags   []string      `json:"tags,omitempty"`
	Tenant *NestedTenant `json:"tenant,omitempty"`
	Vlan   *NestedVLAN   `json:"vlan,omitempty"`
	Vrf    *NestedVRF    `json:"vrf,omitempty"`
}
