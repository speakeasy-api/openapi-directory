/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about Otoroshi global JWT token verifiers
 */
export class JwtVerifiers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create one global JWT verifiers
   *
   * @remarks
   * Create one global JWT verifiers
   */
  createGlobalJwtVerifier(
    req: shared.GlobalJwtVerifier,
    security: operations.CreateGlobalJwtVerifierSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGlobalJwtVerifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GlobalJwtVerifier(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/verifiers";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateGlobalJwtVerifierSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGlobalJwtVerifierResponse =
        new operations.CreateGlobalJwtVerifierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalJwtVerifier = utils.objectToClass(
              httpRes?.data,
              shared.GlobalJwtVerifier
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete one global JWT verifiers
   *
   * @remarks
   * Delete one global JWT verifiers
   */
  deleteGlobalJwtVerifier(
    req: operations.DeleteGlobalJwtVerifierRequest,
    security: operations.DeleteGlobalJwtVerifierSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteGlobalJwtVerifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteGlobalJwtVerifierRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/verifiers/{verifierId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteGlobalJwtVerifierSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteGlobalJwtVerifierResponse =
        new operations.DeleteGlobalJwtVerifierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all global JWT verifiers
   *
   * @remarks
   * Get all global JWT verifiers
   */
  findAllGlobalJwtVerifiers(
    config?: AxiosRequestConfig
  ): Promise<operations.FindAllGlobalJwtVerifiersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/verifiers";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindAllGlobalJwtVerifiersResponse =
        new operations.FindAllGlobalJwtVerifiersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalJwtVerifiers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.globalJwtVerifiers = utils.objectToClass(
              httpRes?.data,
              shared.GlobalJwtVerifier,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get one global JWT verifiers
   *
   * @remarks
   * Get one global JWT verifiers
   */
  findGlobalJwtVerifiersById(
    req: operations.FindGlobalJwtVerifiersByIdRequest,
    security: operations.FindGlobalJwtVerifiersByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindGlobalJwtVerifiersByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindGlobalJwtVerifiersByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/verifiers/{verifierId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindGlobalJwtVerifiersByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindGlobalJwtVerifiersByIdResponse =
        new operations.FindGlobalJwtVerifiersByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalJwtVerifier = utils.objectToClass(
              httpRes?.data,
              shared.GlobalJwtVerifier
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update one global JWT verifiers
   *
   * @remarks
   * Update one global JWT verifiers
   */
  patchGlobalJwtVerifier(
    req: operations.PatchGlobalJwtVerifierRequest,
    security: operations.PatchGlobalJwtVerifierSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchGlobalJwtVerifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchGlobalJwtVerifierRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/verifiers/{verifierId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchGlobalJwtVerifierSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchGlobalJwtVerifierResponse =
        new operations.PatchGlobalJwtVerifierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalJwtVerifier = utils.objectToClass(
              httpRes?.data,
              shared.GlobalJwtVerifier
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update one global JWT verifiers
   *
   * @remarks
   * Update one global JWT verifiers
   */
  updateGlobalJwtVerifier(
    req: operations.UpdateGlobalJwtVerifierRequest,
    security: operations.UpdateGlobalJwtVerifierSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateGlobalJwtVerifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateGlobalJwtVerifierRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/verifiers/{verifierId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "globalJwtVerifier",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateGlobalJwtVerifierSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateGlobalJwtVerifierResponse =
        new operations.UpdateGlobalJwtVerifierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalJwtVerifier = utils.objectToClass(
              httpRes?.data,
              shared.GlobalJwtVerifier
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
