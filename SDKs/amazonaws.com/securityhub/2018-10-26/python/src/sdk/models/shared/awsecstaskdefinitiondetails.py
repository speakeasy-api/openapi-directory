"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsecstaskdefinitioncontainerdefinitionsdetails as shared_awsecstaskdefinitioncontainerdefinitionsdetails
from ..shared import awsecstaskdefinitioninferenceacceleratorsdetails as shared_awsecstaskdefinitioninferenceacceleratorsdetails
from ..shared import awsecstaskdefinitionplacementconstraintsdetails as shared_awsecstaskdefinitionplacementconstraintsdetails
from ..shared import awsecstaskdefinitionproxyconfigurationdetails as shared_awsecstaskdefinitionproxyconfigurationdetails
from ..shared import awsecstaskdefinitionvolumesdetails as shared_awsecstaskdefinitionvolumesdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEcsTaskDefinitionDetails:
    r"""Details about a task definition. A task definition describes the container and volume definitions of an Amazon Elastic Container Service task."""
    
    container_definitions: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsdetails.AwsEcsTaskDefinitionContainerDefinitionsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerDefinitions'), 'exclude': lambda f: f is None }})  
    cpu: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cpu'), 'exclude': lambda f: f is None }})  
    execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionRoleArn'), 'exclude': lambda f: f is None }})  
    family: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Family'), 'exclude': lambda f: f is None }})  
    inference_accelerators: Optional[list[shared_awsecstaskdefinitioninferenceacceleratorsdetails.AwsEcsTaskDefinitionInferenceAcceleratorsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceAccelerators'), 'exclude': lambda f: f is None }})  
    ipc_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpcMode'), 'exclude': lambda f: f is None }})  
    memory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Memory'), 'exclude': lambda f: f is None }})  
    network_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkMode'), 'exclude': lambda f: f is None }})  
    pid_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PidMode'), 'exclude': lambda f: f is None }})  
    placement_constraints: Optional[list[shared_awsecstaskdefinitionplacementconstraintsdetails.AwsEcsTaskDefinitionPlacementConstraintsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementConstraints'), 'exclude': lambda f: f is None }})  
    proxy_configuration: Optional[shared_awsecstaskdefinitionproxyconfigurationdetails.AwsEcsTaskDefinitionProxyConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProxyConfiguration'), 'exclude': lambda f: f is None }})  
    requires_compatibilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequiresCompatibilities'), 'exclude': lambda f: f is None }})  
    task_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskRoleArn'), 'exclude': lambda f: f is None }})  
    volumes: Optional[list[shared_awsecstaskdefinitionvolumesdetails.AwsEcsTaskDefinitionVolumesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Volumes'), 'exclude': lambda f: f is None }})  
    