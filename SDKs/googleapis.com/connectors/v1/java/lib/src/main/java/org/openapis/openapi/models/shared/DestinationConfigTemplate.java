/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DestinationConfigTemplate - DestinationConfigTemplate defines required destinations supported by the Connector.
 */
public class DestinationConfigTemplate {
    /**
     * The default port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPort")
    public Integer defaultPort;

    public DestinationConfigTemplate withDefaultPort(Integer defaultPort) {
        this.defaultPort = defaultPort;
        return this;
    }
    
    /**
     * Description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public DestinationConfigTemplate withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Display name of the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public DestinationConfigTemplate withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Whether the current destination tempalate is part of Advanced settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAdvanced")
    public Boolean isAdvanced;

    public DestinationConfigTemplate withIsAdvanced(Boolean isAdvanced) {
        this.isAdvanced = isAdvanced;
        return this;
    }
    
    /**
     * Key of the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public DestinationConfigTemplate withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The maximum number of destinations supported for this key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    public Integer max;

    public DestinationConfigTemplate withMax(Integer max) {
        this.max = max;
        return this;
    }
    
    /**
     * The minimum number of destinations supported for this key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    public Integer min;

    public DestinationConfigTemplate withMin(Integer min) {
        this.min = min;
        return this;
    }
    
    /**
     * Whether port number should be provided by customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portFieldType")
    public DestinationConfigTemplatePortFieldTypeEnum portFieldType;

    public DestinationConfigTemplate withPortFieldType(DestinationConfigTemplatePortFieldTypeEnum portFieldType) {
        this.portFieldType = portFieldType;
        return this;
    }
    
    /**
     * Regex pattern for host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regexPattern")
    public String regexPattern;

    public DestinationConfigTemplate withRegexPattern(String regexPattern) {
        this.regexPattern = regexPattern;
        return this;
    }
    
    public DestinationConfigTemplate(){}
}
