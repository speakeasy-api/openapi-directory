"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import workflow_run as shared_workflow_run
from ..shared import workflow_run_status_enum as shared_workflow_run_status_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ActionsListRequiredWorkflowRunsRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    required_workflow_id_for_repo: int = dataclasses.field(metadata={'path_param': { 'field_name': 'required_workflow_id_for_repo', 'style': 'simple', 'explode': False }})
    r"""The ID of the required workflow that has run at least once in a repository."""  
    actor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'actor', 'style': 'form', 'explode': True }})
    r"""Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run."""  
    branch: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'branch', 'style': 'form', 'explode': True }})
    r"""Returns workflow runs associated with a branch. Use the name of the branch of the `push`."""  
    check_suite_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'check_suite_id', 'style': 'form', 'explode': True }})
    r"""Returns workflow runs with the `check_suite_id` that you specify."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created', 'style': 'form', 'explode': True }})
    r"""Returns workflow runs created within the given date-time range. For more information on the syntax, see \\"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\\" """  
    event: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'event', 'style': 'form', 'explode': True }})
    r"""Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \\"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\\" """  
    exclude_pull_requests: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_pull_requests', 'style': 'form', 'explode': True }})
    r"""If `true` pull requests are omitted from the response (empty array)."""  
    head_sha: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'head_sha', 'style': 'form', 'explode': True }})
    r"""Only returns workflow runs that are associated with the specified `head_sha`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    status: Optional[shared_workflow_run_status_enum.WorkflowRunStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionsListRequiredWorkflowRuns200ApplicationJSON:
    r"""Response"""
    
    total_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_count') }})  
    workflow_runs: list[shared_workflow_run.WorkflowRun] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_runs') }})  
    

@dataclasses.dataclass
class ActionsListRequiredWorkflowRunsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    actions_list_required_workflow_runs_200_application_json_object: Optional[ActionsListRequiredWorkflowRuns200ApplicationJSON] = dataclasses.field(default=None)
    r"""Response"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    