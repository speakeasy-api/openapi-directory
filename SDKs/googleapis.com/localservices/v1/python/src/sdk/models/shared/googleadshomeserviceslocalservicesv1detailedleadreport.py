"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleadshomeserviceslocalservicesv1aggregatorinfo as shared_googleadshomeserviceslocalservicesv1aggregatorinfo
from ..shared import googleadshomeserviceslocalservicesv1bookinglead as shared_googleadshomeserviceslocalservicesv1bookinglead
from ..shared import googleadshomeserviceslocalservicesv1messagelead as shared_googleadshomeserviceslocalservicesv1messagelead
from ..shared import googleadshomeserviceslocalservicesv1phonelead as shared_googleadshomeserviceslocalservicesv1phonelead
from ..shared import googletypetimezone as shared_googletypetimezone
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleAdsHomeservicesLocalservicesV1DetailedLeadReportChargeStatusEnum(str, Enum):
    r"""Whether the lead has been charged."""
    CHARGE_STATUS_UNSPECIFIED = 'CHARGE_STATUS_UNSPECIFIED'
    CHARGED = 'CHARGED'
    NOT_CHARGED = 'NOT_CHARGED'

class GoogleAdsHomeservicesLocalservicesV1DetailedLeadReportLeadTypeEnum(str, Enum):
    r"""Lead type."""
    LEAD_TYPE_UNSPECIFIED = 'LEAD_TYPE_UNSPECIFIED'
    MESSAGE = 'MESSAGE'
    PHONE_CALL = 'PHONE_CALL'
    BOOKING = 'BOOKING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAdsHomeservicesLocalservicesV1DetailedLeadReport:
    r"""A Detailed Lead Report of a lead identified by their lead id and contains consumer, account, monetization, and lead data."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Identifies account that received the lead."""  
    aggregator_info: Optional[shared_googleadshomeserviceslocalservicesv1aggregatorinfo.GoogleAdsHomeservicesLocalservicesV1AggregatorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregatorInfo'), 'exclude': lambda f: f is None }})
    r"""Conatiner for aggregator specific information if lead is for an aggregator GLS account."""  
    booking_lead: Optional[shared_googleadshomeserviceslocalservicesv1bookinglead.GoogleAdsHomeservicesLocalservicesV1BookingLead] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingLead'), 'exclude': lambda f: f is None }})
    r"""Container for booking lead specific information."""  
    business_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessName'), 'exclude': lambda f: f is None }})
    r"""Business name associated to the account."""  
    charge_status: Optional[GoogleAdsHomeservicesLocalservicesV1DetailedLeadReportChargeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeStatus'), 'exclude': lambda f: f is None }})
    r"""Whether the lead has been charged."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Currency code."""  
    dispute_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disputeStatus'), 'exclude': lambda f: f is None }})
    r"""Dispute status related to the lead."""  
    geo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo'), 'exclude': lambda f: f is None }})
    r"""Location of the associated account's home city."""  
    lead_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadCategory'), 'exclude': lambda f: f is None }})
    r"""Lead category (e.g. hvac, plumber)"""  
    lead_creation_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadCreationTimestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp of when the lead was created."""  
    lead_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of a Detailed Lead Report."""  
    lead_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadPrice'), 'exclude': lambda f: f is None }})
    r"""Price of the lead (available only after it has been charged)."""  
    lead_type: Optional[GoogleAdsHomeservicesLocalservicesV1DetailedLeadReportLeadTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadType'), 'exclude': lambda f: f is None }})
    r"""Lead type."""  
    message_lead: Optional[shared_googleadshomeserviceslocalservicesv1messagelead.GoogleAdsHomeservicesLocalservicesV1MessageLead] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageLead'), 'exclude': lambda f: f is None }})
    r"""Container for message lead specific information."""  
    phone_lead: Optional[shared_googleadshomeserviceslocalservicesv1phonelead.GoogleAdsHomeservicesLocalservicesV1PhoneLead] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneLead'), 'exclude': lambda f: f is None }})
    r"""Container for phone lead specific information."""  
    timezone: Optional[shared_googletypetimezone.GoogleTypeTimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones)."""  
    