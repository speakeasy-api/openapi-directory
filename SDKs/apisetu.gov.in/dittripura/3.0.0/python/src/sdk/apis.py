"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class APIs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def chcer(self, request: operations.ChcerRequestBody, security: operations.ChcerSecurity) -> operations.ChcerResponse:
        r"""Character Certificate
        API to verify Character Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/chcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer400ApplicationJSON])
                res.chcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer401ApplicationJSON])
                res.chcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer404ApplicationJSON])
                res.chcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer500ApplicationJSON])
                res.chcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer502ApplicationJSON])
                res.chcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer503ApplicationJSON])
                res.chcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Chcer504ApplicationJSON])
                res.chcer_504_application_json_object = out

        return res

    def dncer(self, request: operations.DncerRequestBody, security: operations.DncerSecurity) -> operations.DncerResponse:
        r"""Distance Certificate
        API to verify Distance Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dncer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DncerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer400ApplicationJSON])
                res.dncer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer401ApplicationJSON])
                res.dncer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer404ApplicationJSON])
                res.dncer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer500ApplicationJSON])
                res.dncer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer502ApplicationJSON])
                res.dncer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer503ApplicationJSON])
                res.dncer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dncer504ApplicationJSON])
                res.dncer_504_application_json_object = out

        return res

    def dpcer(self, request: operations.DpcerRequestBody, security: operations.DpcerSecurity) -> operations.DpcerResponse:
        r"""Dependency Certificate
        API to verify Dependency Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dpcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DpcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer400ApplicationJSON])
                res.dpcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer401ApplicationJSON])
                res.dpcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer404ApplicationJSON])
                res.dpcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer500ApplicationJSON])
                res.dpcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer502ApplicationJSON])
                res.dpcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer503ApplicationJSON])
                res.dpcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpcer504ApplicationJSON])
                res.dpcer_504_application_json_object = out

        return res

    def fslcs(self, request: operations.FslcsRequestBody, security: operations.FslcsSecurity) -> operations.FslcsResponse:
        r"""Food Stuff License
        API to verify Food Stuff License.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fslcs/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FslcsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs400ApplicationJSON])
                res.fslcs_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs401ApplicationJSON])
                res.fslcs_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs404ApplicationJSON])
                res.fslcs_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs500ApplicationJSON])
                res.fslcs_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs502ApplicationJSON])
                res.fslcs_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs503ApplicationJSON])
                res.fslcs_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Fslcs504ApplicationJSON])
                res.fslcs_504_application_json_object = out

        return res

    def grred(self, request: operations.GrredRequestBody, security: operations.GrredSecurity) -> operations.GrredResponse:
        r"""Grievance Redressal/ Registration
        API to verify Grievance Redressal/ Registration.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/grred/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GrredResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred400ApplicationJSON])
                res.grred_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred401ApplicationJSON])
                res.grred_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred404ApplicationJSON])
                res.grred_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred500ApplicationJSON])
                res.grred_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred502ApplicationJSON])
                res.grred_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred503ApplicationJSON])
                res.grred_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Grred504ApplicationJSON])
                res.grred_504_application_json_object = out

        return res

    def incer(self, request: operations.IncerRequestBody, security: operations.IncerSecurity) -> operations.IncerResponse:
        r"""Income Certificate
        API to verify Income Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/incer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IncerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer400ApplicationJSON])
                res.incer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer401ApplicationJSON])
                res.incer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer404ApplicationJSON])
                res.incer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer500ApplicationJSON])
                res.incer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer502ApplicationJSON])
                res.incer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer503ApplicationJSON])
                res.incer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer504ApplicationJSON])
                res.incer_504_application_json_object = out

        return res

    def isoal(self, request: operations.IsoalRequestBody, security: operations.IsoalSecurity) -> operations.IsoalResponse:
        r"""Issue of Arm Licence
        API to verify Issue of Arm Licence.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/isoal/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IsoalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal400ApplicationJSON])
                res.isoal_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal401ApplicationJSON])
                res.isoal_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal404ApplicationJSON])
                res.isoal_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal500ApplicationJSON])
                res.isoal_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal502ApplicationJSON])
                res.isoal_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal503ApplicationJSON])
                res.isoal_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Isoal504ApplicationJSON])
                res.isoal_504_application_json_object = out

        return res

    def lvcer(self, request: operations.LvcerRequestBody, security: operations.LvcerSecurity) -> operations.LvcerResponse:
        r"""Land Valuation/ Holding/ Record Certificate
        API to verify Land Valuation/ Holding/ Record Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lvcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LvcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer400ApplicationJSON])
                res.lvcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer401ApplicationJSON])
                res.lvcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer404ApplicationJSON])
                res.lvcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer500ApplicationJSON])
                res.lvcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer502ApplicationJSON])
                res.lvcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer503ApplicationJSON])
                res.lvcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Lvcer504ApplicationJSON])
                res.lvcer_504_application_json_object = out

        return res

    def malcs(self, request: operations.MalcsRequestBody, security: operations.MalcsSecurity) -> operations.MalcsResponse:
        r"""Manufacturer License
        API to verify Manufacturer License.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/malcs/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MalcsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs400ApplicationJSON])
                res.malcs_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs401ApplicationJSON])
                res.malcs_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs404ApplicationJSON])
                res.malcs_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs500ApplicationJSON])
                res.malcs_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs502ApplicationJSON])
                res.malcs_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs503ApplicationJSON])
                res.malcs_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Malcs504ApplicationJSON])
                res.malcs_504_application_json_object = out

        return res

    def mpkby(self, request: operations.MpkbyRequestBody, security: operations.MpkbySecurity) -> operations.MpkbyResponse:
        r"""Small Savings Agent License
        API to verify Small Savings Agent License.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mpkby/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MpkbyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby400ApplicationJSON])
                res.mpkby_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby401ApplicationJSON])
                res.mpkby_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby404ApplicationJSON])
                res.mpkby_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby500ApplicationJSON])
                res.mpkby_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby502ApplicationJSON])
                res.mpkby_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby503ApplicationJSON])
                res.mpkby_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Mpkby504ApplicationJSON])
                res.mpkby_504_application_json_object = out

        return res

    def obcer(self, request: operations.ObcerRequestBody, security: operations.ObcerSecurity) -> operations.ObcerResponse:
        r"""OBC Certificate
        API to verify OBC Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/obcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer400ApplicationJSON])
                res.obcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer401ApplicationJSON])
                res.obcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer404ApplicationJSON])
                res.obcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer500ApplicationJSON])
                res.obcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer502ApplicationJSON])
                res.obcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer503ApplicationJSON])
                res.obcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Obcer504ApplicationJSON])
                res.obcer_504_application_json_object = out

        return res

    def ritin(self, request: operations.RitinRequestBody, security: operations.RitinSecurity) -> operations.RitinResponse:
        r"""Right to Information
        API to verify Right to Information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ritin/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RitinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin400ApplicationJSON])
                res.ritin_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin401ApplicationJSON])
                res.ritin_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin404ApplicationJSON])
                res.ritin_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin500ApplicationJSON])
                res.ritin_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin502ApplicationJSON])
                res.ritin_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin503ApplicationJSON])
                res.ritin_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ritin504ApplicationJSON])
                res.ritin_504_application_json_object = out

        return res

    def rmcer(self, request: operations.RmcerRequestBody, security: operations.RmcerSecurity) -> operations.RmcerResponse:
        r"""Marriage Certificate
        API to verify Marriage Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/rmcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RmcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer400ApplicationJSON])
                res.rmcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer401ApplicationJSON])
                res.rmcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer404ApplicationJSON])
                res.rmcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer500ApplicationJSON])
                res.rmcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer502ApplicationJSON])
                res.rmcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer503ApplicationJSON])
                res.rmcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rmcer504ApplicationJSON])
                res.rmcer_504_application_json_object = out

        return res

    def rscer(self, request: operations.RscerRequestBody, security: operations.RscerSecurity) -> operations.RscerResponse:
        r"""Residence Certificate
        API to verify Residence Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/rscer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RscerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer400ApplicationJSON])
                res.rscer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer401ApplicationJSON])
                res.rscer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer404ApplicationJSON])
                res.rscer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer500ApplicationJSON])
                res.rscer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer502ApplicationJSON])
                res.rscer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer503ApplicationJSON])
                res.rscer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Rscer504ApplicationJSON])
                res.rscer_504_application_json_object = out

        return res

    def shcer(self, request: operations.ShcerRequestBody, security: operations.ShcerSecurity) -> operations.ShcerResponse:
        r"""SC/ST  Certificate
        API to verify SC/ST  Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/shcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer400ApplicationJSON])
                res.shcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer401ApplicationJSON])
                res.shcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer404ApplicationJSON])
                res.shcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer500ApplicationJSON])
                res.shcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer502ApplicationJSON])
                res.shcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer503ApplicationJSON])
                res.shcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Shcer504ApplicationJSON])
                res.shcer_504_application_json_object = out

        return res

    def smcer(self, request: operations.SmcerRequestBody, security: operations.SmcerSecurity) -> operations.SmcerResponse:
        r"""Surviving Member Certificate
        API to verify Surviving Member Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/smcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer400ApplicationJSON])
                res.smcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer401ApplicationJSON])
                res.smcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer404ApplicationJSON])
                res.smcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer500ApplicationJSON])
                res.smcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer502ApplicationJSON])
                res.smcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer503ApplicationJSON])
                res.smcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Smcer504ApplicationJSON])
                res.smcer_504_application_json_object = out

        return res

    def sslcs(self, request: operations.SslcsRequestBody, security: operations.SslcsSecurity) -> operations.SslcsResponse:
        r"""Standardized Agency Systems (SAS) Agent License
        API to verify Standardized Agency Systems (SAS) Agent License.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sslcs/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SslcsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs400ApplicationJSON])
                res.sslcs_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs401ApplicationJSON])
                res.sslcs_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs404ApplicationJSON])
                res.sslcs_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs500ApplicationJSON])
                res.sslcs_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs502ApplicationJSON])
                res.sslcs_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs503ApplicationJSON])
                res.sslcs_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Sslcs504ApplicationJSON])
                res.sslcs_504_application_json_object = out

        return res

    def vrwmi(self, request: operations.VrwmiRequestBody, security: operations.VrwmiSecurity) -> operations.VrwmiResponse:
        r"""License/ Verification of Weights, Measures and Instruments
        API to verify License/ Verification of Weights, Measures and Instruments.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/vrwmi/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VrwmiResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi400ApplicationJSON])
                res.vrwmi_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi401ApplicationJSON])
                res.vrwmi_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi404ApplicationJSON])
                res.vrwmi_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi500ApplicationJSON])
                res.vrwmi_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi502ApplicationJSON])
                res.vrwmi_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi503ApplicationJSON])
                res.vrwmi_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Vrwmi504ApplicationJSON])
                res.vrwmi_504_application_json_object = out

        return res

    