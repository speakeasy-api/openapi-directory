// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchVideosDirectionEnum - The sort direction of the results.
type SearchVideosDirectionEnum string

const (
	SearchVideosDirectionEnumAsc  SearchVideosDirectionEnum = "asc"
	SearchVideosDirectionEnumDesc SearchVideosDirectionEnum = "desc"
)

func (e *SearchVideosDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchVideosDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosDirectionEnum: %s", s)
	}
}

// SearchVideosFilterEnum - The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.
type SearchVideosFilterEnum string

const (
	SearchVideosFilterEnumCc           SearchVideosFilterEnum = "CC"
	SearchVideosFilterEnumCcBy         SearchVideosFilterEnum = "CC-BY"
	SearchVideosFilterEnumCcByNc       SearchVideosFilterEnum = "CC-BY-NC"
	SearchVideosFilterEnumCcByNcNd     SearchVideosFilterEnum = "CC-BY-NC-ND"
	SearchVideosFilterEnumCcByNcSa     SearchVideosFilterEnum = "CC-BY-NC-SA"
	SearchVideosFilterEnumCcByNd       SearchVideosFilterEnum = "CC-BY-ND"
	SearchVideosFilterEnumCcBySa       SearchVideosFilterEnum = "CC-BY-SA"
	SearchVideosFilterEnumCc0          SearchVideosFilterEnum = "CC0"
	SearchVideosFilterEnumCategories   SearchVideosFilterEnum = "categories"
	SearchVideosFilterEnumDuration     SearchVideosFilterEnum = "duration"
	SearchVideosFilterEnumInProgress   SearchVideosFilterEnum = "in-progress"
	SearchVideosFilterEnumMinimumLikes SearchVideosFilterEnum = "minimum_likes"
	SearchVideosFilterEnumTrending     SearchVideosFilterEnum = "trending"
	SearchVideosFilterEnumUploadDate   SearchVideosFilterEnum = "upload_date"
)

func (e *SearchVideosFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CC":
		fallthrough
	case "CC-BY":
		fallthrough
	case "CC-BY-NC":
		fallthrough
	case "CC-BY-NC-ND":
		fallthrough
	case "CC-BY-NC-SA":
		fallthrough
	case "CC-BY-ND":
		fallthrough
	case "CC-BY-SA":
		fallthrough
	case "CC0":
		fallthrough
	case "categories":
		fallthrough
	case "duration":
		fallthrough
	case "in-progress":
		fallthrough
	case "minimum_likes":
		fallthrough
	case "trending":
		fallthrough
	case "upload_date":
		*e = SearchVideosFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosFilterEnum: %s", s)
	}
}

// SearchVideosSortEnum - The way to sort the results.
type SearchVideosSortEnum string

const (
	SearchVideosSortEnumAlphabetical SearchVideosSortEnum = "alphabetical"
	SearchVideosSortEnumComments     SearchVideosSortEnum = "comments"
	SearchVideosSortEnumDate         SearchVideosSortEnum = "date"
	SearchVideosSortEnumDuration     SearchVideosSortEnum = "duration"
	SearchVideosSortEnumLikes        SearchVideosSortEnum = "likes"
	SearchVideosSortEnumPlays        SearchVideosSortEnum = "plays"
	SearchVideosSortEnumRelevant     SearchVideosSortEnum = "relevant"
)

func (e *SearchVideosSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alphabetical":
		fallthrough
	case "comments":
		fallthrough
	case "date":
		fallthrough
	case "duration":
		fallthrough
	case "likes":
		fallthrough
	case "plays":
		fallthrough
	case "relevant":
		*e = SearchVideosSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosSortEnum: %s", s)
	}
}

type SearchVideosRequest struct {
	// The sort direction of the results.
	Direction *SearchVideosDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.
	Filter *SearchVideosFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// A comma-separated list of video URLs to find.
	Links *string `queryParam:"style=form,explode=true,name=links"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// Search query.
	Query string `queryParam:"style=form,explode=true,name=query"`
	// The way to sort the results.
	Sort *SearchVideosSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// The comma-separated list of videos to find.
	Uris *string `queryParam:"style=form,explode=true,name=uris"`
}

type SearchVideosResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// * Error code 2101: Either the `uris` or `links` parameter has filtering or sorting arguments.
	// * Error code 2204: There is a problem with the batch request.
	Error *shared.Error
	// * Search is disabled.
	// * Error code 7300: There was an internal search error.
	LegacyError *shared.LegacyError
	// The search results were returned.
	Videos []shared.Video
}
