/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Connector - Successful GET on Connector resource
 */
public class Connector {
    /**
     * Authentication mechanism to use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_mechanism")
    public String authMechanism;
    public Connector withAuthMechanism(String authMechanism) {
        this.authMechanism = authMechanism;
        return this;
    }
    
    /**
     * If true, this connector is perhaps unstable :)
     */
    @JsonProperty("beta")
    public Boolean beta;
    public Connector withBeta(Boolean beta) {
        this.beta = beta;
        return this;
    }
    
    /**
     * Usage of this connector is charged
     */
    @JsonProperty("charged")
    public Boolean charged;
    public Connector withCharged(Boolean charged) {
        this.charged = charged;
        return this;
    }
    
    /**
     * Bank code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public Connector withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Main color of the bank or provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public String color;
    public Connector withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * This connector is hidden from your users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;
    public Connector withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * ID of the connector
     */
    @JsonProperty("id")
    public Long id;
    public Connector withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * How many months of history to fetch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("months_to_fetch")
    public Long monthsToFetch;
    public Connector withMonthsToFetch(Long monthsToFetch) {
        this.monthsToFetch = monthsToFetch;
        return this;
    }
    
    /**
     * Name of the bank or provider
     */
    @JsonProperty("name")
    public String name;
    public Connector withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * If true, new connections cannot be added with this connector
     */
    @JsonProperty("restricted")
    public Boolean restricted;
    public Connector withRestricted(Boolean restricted) {
        this.restricted = restricted;
        return this;
    }
    
    /**
     * SIRET code for Bill modules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("siret")
    public String siret;
    public Connector withSiret(String siret) {
        this.siret = siret;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    public String slug;
    public Connector withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    /**
     * How many days to wait between syncs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_frequency")
    public Float syncFrequency;
    public Connector withSyncFrequency(Float syncFrequency) {
        this.syncFrequency = syncFrequency;
        return this;
    }
    
    /**
     * Unique connector identifier
     */
    @JsonProperty("uuid")
    public String uuid;
    public Connector withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
