/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DatasetAccess {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset")
    public DatasetAccessEntry dataset;

    public DatasetAccess withDataset(DatasetAccessEntry dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;

    public DatasetAccess withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupByEmail")
    public String groupByEmail;

    public DatasetAccess withGroupByEmail(String groupByEmail) {
        this.groupByEmail = groupByEmail;
        return this;
    }
    
    /**
     * [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iamMember")
    public String iamMember;

    public DatasetAccess withIamMember(String iamMember) {
        this.iamMember = iamMember;
        return this;
    }
    
    /**
     * [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public String role;

    public DatasetAccess withRole(String role) {
        this.role = role;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routine")
    public RoutineReference routine;

    public DatasetAccess withRoutine(RoutineReference routine) {
        this.routine = routine;
        return this;
    }
    
    /**
     * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialGroup")
    public String specialGroup;

    public DatasetAccess withSpecialGroup(String specialGroup) {
        this.specialGroup = specialGroup;
        return this;
    }
    
    /**
     * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userByEmail")
    public String userByEmail;

    public DatasetAccess withUserByEmail(String userByEmail) {
        this.userByEmail = userByEmail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public TableReference view;

    public DatasetAccess withView(TableReference view) {
        this.view = view;
        return this;
    }
    
    public DatasetAccess(){}
}
