// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type SymbolUploadsListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// SymbolUploadsListStatusEnum - Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.
type SymbolUploadsListStatusEnum string

const (
	SymbolUploadsListStatusEnumAll       SymbolUploadsListStatusEnum = "all"
	SymbolUploadsListStatusEnumUploaded  SymbolUploadsListStatusEnum = "uploaded"
	SymbolUploadsListStatusEnumProcessed SymbolUploadsListStatusEnum = "processed"
)

func (e SymbolUploadsListStatusEnum) ToPointer() *SymbolUploadsListStatusEnum {
	return &e
}

func (e *SymbolUploadsListStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "uploaded":
		fallthrough
	case "processed":
		*e = SymbolUploadsListStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsListStatusEnum: %v", v)
	}
}

// SymbolUploadsListSymbolTypeEnum - The type of symbols
type SymbolUploadsListSymbolTypeEnum string

const (
	SymbolUploadsListSymbolTypeEnumAndroidProguard SymbolUploadsListSymbolTypeEnum = "AndroidProguard"
	SymbolUploadsListSymbolTypeEnumApple           SymbolUploadsListSymbolTypeEnum = "Apple"
	SymbolUploadsListSymbolTypeEnumBreakpad        SymbolUploadsListSymbolTypeEnum = "Breakpad"
	SymbolUploadsListSymbolTypeEnumJavaScript      SymbolUploadsListSymbolTypeEnum = "JavaScript"
	SymbolUploadsListSymbolTypeEnumUwp             SymbolUploadsListSymbolTypeEnum = "UWP"
)

func (e SymbolUploadsListSymbolTypeEnum) ToPointer() *SymbolUploadsListSymbolTypeEnum {
	return &e
}

func (e *SymbolUploadsListSymbolTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AndroidProguard":
		fallthrough
	case "Apple":
		fallthrough
	case "Breakpad":
		fallthrough
	case "JavaScript":
		fallthrough
	case "UWP":
		*e = SymbolUploadsListSymbolTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsListSymbolTypeEnum: %v", v)
	}
}

type SymbolUploadsListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.
	//
	Status *SymbolUploadsListStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The type of symbols
	SymbolType *SymbolUploadsListSymbolTypeEnum `queryParam:"style=form,explode=true,name=symbol_type"`
	// The maximum number of results to return.
	Top *int64 `queryParam:"style=form,explode=true,name=top"`
}

// SymbolUploadsList500ApplicationJSON - Internal error
type SymbolUploadsList500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsList403ApplicationJSON - Unauthorized
type SymbolUploadsList403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsList200ApplicationJSONOriginEnum - The origin of the symbol upload
type SymbolUploadsList200ApplicationJSONOriginEnum string

const (
	SymbolUploadsList200ApplicationJSONOriginEnumUser   SymbolUploadsList200ApplicationJSONOriginEnum = "User"
	SymbolUploadsList200ApplicationJSONOriginEnumSystem SymbolUploadsList200ApplicationJSONOriginEnum = "System"
)

func (e SymbolUploadsList200ApplicationJSONOriginEnum) ToPointer() *SymbolUploadsList200ApplicationJSONOriginEnum {
	return &e
}

func (e *SymbolUploadsList200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "System":
		*e = SymbolUploadsList200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsList200ApplicationJSONOriginEnum: %v", v)
	}
}

// SymbolUploadsList200ApplicationJSONStatusEnum - The current status for the symbol upload
type SymbolUploadsList200ApplicationJSONStatusEnum string

const (
	SymbolUploadsList200ApplicationJSONStatusEnumCreated    SymbolUploadsList200ApplicationJSONStatusEnum = "created"
	SymbolUploadsList200ApplicationJSONStatusEnumCommitted  SymbolUploadsList200ApplicationJSONStatusEnum = "committed"
	SymbolUploadsList200ApplicationJSONStatusEnumAborted    SymbolUploadsList200ApplicationJSONStatusEnum = "aborted"
	SymbolUploadsList200ApplicationJSONStatusEnumProcessing SymbolUploadsList200ApplicationJSONStatusEnum = "processing"
	SymbolUploadsList200ApplicationJSONStatusEnumIndexed    SymbolUploadsList200ApplicationJSONStatusEnum = "indexed"
	SymbolUploadsList200ApplicationJSONStatusEnumFailed     SymbolUploadsList200ApplicationJSONStatusEnum = "failed"
)

func (e SymbolUploadsList200ApplicationJSONStatusEnum) ToPointer() *SymbolUploadsList200ApplicationJSONStatusEnum {
	return &e
}

func (e *SymbolUploadsList200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "committed":
		fallthrough
	case "aborted":
		fallthrough
	case "processing":
		fallthrough
	case "indexed":
		fallthrough
	case "failed":
		*e = SymbolUploadsList200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsList200ApplicationJSONStatusEnum: %v", v)
	}
}

// SymbolUploadsList200ApplicationJSONSymbolTypeEnum - The type of the symbol for the current symbol upload
type SymbolUploadsList200ApplicationJSONSymbolTypeEnum string

const (
	SymbolUploadsList200ApplicationJSONSymbolTypeEnumApple           SymbolUploadsList200ApplicationJSONSymbolTypeEnum = "Apple"
	SymbolUploadsList200ApplicationJSONSymbolTypeEnumJavaScript      SymbolUploadsList200ApplicationJSONSymbolTypeEnum = "JavaScript"
	SymbolUploadsList200ApplicationJSONSymbolTypeEnumBreakpad        SymbolUploadsList200ApplicationJSONSymbolTypeEnum = "Breakpad"
	SymbolUploadsList200ApplicationJSONSymbolTypeEnumAndroidProguard SymbolUploadsList200ApplicationJSONSymbolTypeEnum = "AndroidProguard"
	SymbolUploadsList200ApplicationJSONSymbolTypeEnumUwp             SymbolUploadsList200ApplicationJSONSymbolTypeEnum = "UWP"
)

func (e SymbolUploadsList200ApplicationJSONSymbolTypeEnum) ToPointer() *SymbolUploadsList200ApplicationJSONSymbolTypeEnum {
	return &e
}

func (e *SymbolUploadsList200ApplicationJSONSymbolTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Apple":
		fallthrough
	case "JavaScript":
		fallthrough
	case "Breakpad":
		fallthrough
	case "AndroidProguard":
		fallthrough
	case "UWP":
		*e = SymbolUploadsList200ApplicationJSONSymbolTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsList200ApplicationJSONSymbolTypeEnum: %v", v)
	}
}

type SymbolUploadsList200ApplicationJSONSymbolsUploaded struct {
	// The platform the symbol is associated with
	Platform string `json:"platform"`
	// The symbol id of the symbol binary
	SymbolID string `json:"symbol_id"`
}

// SymbolUploadsList200ApplicationJSONUser - User information of the one who intitiated the symbol upload
type SymbolUploadsList200ApplicationJSONUser struct {
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
	// The email of the user
	Email *string `json:"email,omitempty"`
}

// SymbolUploadsList200ApplicationJSON - A single symbol upload entity
type SymbolUploadsList200ApplicationJSON struct {
	// The application that this symbol upload belongs to
	AppID string `json:"app_id"`
	// The file name for the symbol upload
	FileName *string `json:"file_name,omitempty"`
	// The size of the file in Mebibytes. This may be 0 until the status is indexed
	FileSize *float64 `json:"file_size,omitempty"`
	// The origin of the symbol upload
	Origin *SymbolUploadsList200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The current status for the symbol upload
	Status SymbolUploadsList200ApplicationJSONStatusEnum `json:"status"`
	// The type of the symbol for the current symbol upload
	SymbolType SymbolUploadsList200ApplicationJSONSymbolTypeEnum `json:"symbol_type"`
	// The id for the current symbol upload
	SymbolUploadID string `json:"symbol_upload_id"`
	// The symbols found in the upload. This may be empty until the status is indexed
	SymbolsUploaded []SymbolUploadsList200ApplicationJSONSymbolsUploaded `json:"symbols_uploaded,omitempty"`
	// When the symbol upload was committed, or last transaction time if not committed
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// User information of the one who intitiated the symbol upload
	User *SymbolUploadsList200ApplicationJSONUser `json:"user,omitempty"`
}

type SymbolUploadsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolUploadsList200ApplicationJSONObjects []SymbolUploadsList200ApplicationJSON
	// Unauthorized
	SymbolUploadsList403ApplicationJSONObject *SymbolUploadsList403ApplicationJSON
	// Internal error
	SymbolUploadsList500ApplicationJSONObject *SymbolUploadsList500ApplicationJSON
}
