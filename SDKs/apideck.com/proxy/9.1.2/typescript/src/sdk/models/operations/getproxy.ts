/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class GetProxySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey: string;
}

export class GetProxyRequest extends SpeakeasyBase {
  /**
   * The ID of your Unify application
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-app-id",
  })
  xApideckAppId: string;

  /**
   * ID of the consumer which you want to get or push data from
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-consumer-id",
  })
  xApideckConsumerId: string;

  /**
   * Downstream authorization header. This will skip the Vault token injection.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-downstream-authorization",
  })
  xApideckDownstreamAuthorization?: string;

  /**
   * Downstream URL
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-downstream-url",
  })
  xApideckDownstreamUrl: string;

  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-service-id",
  })
  xApideckServiceId: string;
}

/**
 * Unauthorized
 */
export class GetProxy401ApplicationJSON extends SpeakeasyBase {
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  /**
   * A human-readable message providing more details about the error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * Link to documentation of error type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref?: string;

  /**
   * HTTP status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status_code" })
  statusCode?: number;

  /**
   * The type of error returned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type_name" })
  typeName?: string;
}

export class GetProxyResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Ok
   */
  @SpeakeasyMetadata()
  getProxy200ApplicationJSONAny?: any;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  getProxy401ApplicationJSONObject?: GetProxy401ApplicationJSON;

  /**
   * Proxy error
   */
  @SpeakeasyMetadata()
  getProxyDefaultApplicationJSONAny?: any;
}
