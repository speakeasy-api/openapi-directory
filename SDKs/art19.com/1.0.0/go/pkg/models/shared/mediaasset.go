// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// MediaAssetAttributesAttachmentTypeEnum - This will be replaced by the relationship `attachment` in a future update.<br/>
// The type of the entity this media asset is attached to
type MediaAssetAttributesAttachmentTypeEnum string

const (
	MediaAssetAttributesAttachmentTypeEnumImage       MediaAssetAttributesAttachmentTypeEnum = "Image"
	MediaAssetAttributesAttachmentTypeEnumSegment     MediaAssetAttributesAttachmentTypeEnum = "Segment"
	MediaAssetAttributesAttachmentTypeEnumSegmentList MediaAssetAttributesAttachmentTypeEnum = "SegmentList"
)

func (e MediaAssetAttributesAttachmentTypeEnum) ToPointer() *MediaAssetAttributesAttachmentTypeEnum {
	return &e
}

func (e *MediaAssetAttributesAttachmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Image":
		fallthrough
	case "Segment":
		fallthrough
	case "SegmentList":
		*e = MediaAssetAttributesAttachmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaAssetAttributesAttachmentTypeEnum: %v", v)
	}
}

// MediaAssetAttributesStyleEnum - The style of the media asset. A media asset is part of a collection of related media files,
// for example an image or an episode (audio). Images usually have differently sized versions,
// and episodes can have different audio formats.
type MediaAssetAttributesStyleEnum string

const (
	MediaAssetAttributesStyleEnumInfo             MediaAssetAttributesStyleEnum = "info"
	MediaAssetAttributesStyleEnumItunes           MediaAssetAttributesStyleEnum = "itunes"
	MediaAssetAttributesStyleEnumMedium           MediaAssetAttributesStyleEnum = "medium"
	MediaAssetAttributesStyleEnumOriginal         MediaAssetAttributesStyleEnum = "original"
	MediaAssetAttributesStyleEnumRegular          MediaAssetAttributesStyleEnum = "regular"
	MediaAssetAttributesStyleEnumSquare400        MediaAssetAttributesStyleEnum = "square-400"
	MediaAssetAttributesStyleEnumSquare640        MediaAssetAttributesStyleEnum = "square-640"
	MediaAssetAttributesStyleEnumSquare888        MediaAssetAttributesStyleEnum = "square-888"
	MediaAssetAttributesStyleEnumSquare3000       MediaAssetAttributesStyleEnum = "square-3000"
	MediaAssetAttributesStyleEnumStrippedOriginal MediaAssetAttributesStyleEnum = "stripped-original"
	MediaAssetAttributesStyleEnumThumb            MediaAssetAttributesStyleEnum = "thumb"
	MediaAssetAttributesStyleEnumWaveformData     MediaAssetAttributesStyleEnum = "waveform_data"
)

func (e MediaAssetAttributesStyleEnum) ToPointer() *MediaAssetAttributesStyleEnum {
	return &e
}

func (e *MediaAssetAttributesStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "itunes":
		fallthrough
	case "medium":
		fallthrough
	case "original":
		fallthrough
	case "regular":
		fallthrough
	case "square-400":
		fallthrough
	case "square-640":
		fallthrough
	case "square-888":
		fallthrough
	case "square-3000":
		fallthrough
	case "stripped-original":
		fallthrough
	case "thumb":
		fallthrough
	case "waveform_data":
		*e = MediaAssetAttributesStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaAssetAttributesStyleEnum: %v", v)
	}
}

type MediaAssetAttributes struct {
	// This will be replaced by the relationship `attachment` in a future update.<br/>
	// The ID of the entity this media asset is attached to
	//
	AttachmentID *string `json:"attachment_id,omitempty"`
	// This will be replaced by the relationship `attachment` in a future update.<br/>
	// The type of the entity this media asset is attached to
	//
	AttachmentType *MediaAssetAttributesAttachmentTypeEnum `json:"attachment_type,omitempty"`
	// The CDN-URL where the media asset is available
	CdnURL *string `json:"cdn_url,omitempty"`
	// The MIME type of the media asset
	ContentType *string    `json:"content_type,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	// The filename of the media asset without any path components.
	//
	FileName *string `json:"file_name,omitempty"`
	// The size in bytes of the media asset
	FileSize *int64 `json:"file_size,omitempty"`
	// The height in pixels of the media asset, if the media asset is an image
	SizeHeight *int64 `json:"size_height,omitempty"`
	// The width in pixels of the media asset, if the media asset is an image
	SizeWidth *int64 `json:"size_width,omitempty"`
	// The style of the media asset. A media asset is part of a collection of related media files,
	// for example an image or an episode (audio). Images usually have differently sized versions,
	// and episodes can have different audio formats.
	//
	Style     *MediaAssetAttributesStyleEnum `json:"style,omitempty"`
	UpdatedAt *time.Time                     `json:"updated_at,omitempty"`
}

type MediaAsset struct {
	Attributes *MediaAssetAttributes `json:"attributes,omitempty"`
	ID         *string               `json:"id,omitempty"`
	// The type of resource. This is always `media_assets`
	Type *string `json:"type,omitempty"`
}
