/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.
 */
export class PutDataLakeSettingsRequestBodyDataLakeSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AllowExternalDataFiltering" })
  allowExternalDataFiltering?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AuthorizedSessionTagValueList" })
  authorizedSessionTagValueList?: string[];

  @SpeakeasyMetadata({ elemType: shared.PrincipalPermissions })
  @Expose({ name: "CreateDatabaseDefaultPermissions" })
  @Type(() => shared.PrincipalPermissions)
  createDatabaseDefaultPermissions?: shared.PrincipalPermissions[];

  @SpeakeasyMetadata({ elemType: shared.PrincipalPermissions })
  @Expose({ name: "CreateTableDefaultPermissions" })
  @Type(() => shared.PrincipalPermissions)
  createTableDefaultPermissions?: shared.PrincipalPermissions[];

  @SpeakeasyMetadata({ elemType: shared.DataLakePrincipal })
  @Expose({ name: "DataLakeAdmins" })
  @Type(() => shared.DataLakePrincipal)
  dataLakeAdmins?: shared.DataLakePrincipal[];

  @SpeakeasyMetadata({ elemType: shared.DataLakePrincipal })
  @Expose({ name: "ExternalDataFilteringAllowList" })
  @Type(() => shared.DataLakePrincipal)
  externalDataFilteringAllowList?: shared.DataLakePrincipal[];

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "TrustedResourceOwners" })
  trustedResourceOwners?: string[];
}

export class PutDataLakeSettingsRequestBody extends SpeakeasyBase {
  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CatalogId" })
  catalogId?: string;

  /**
   * A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DataLakeSettings" })
  @Type(() => PutDataLakeSettingsRequestBodyDataLakeSettings)
  dataLakeSettings: PutDataLakeSettingsRequestBodyDataLakeSettings;
}

export class PutDataLakeSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutDataLakeSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutDataLakeSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putDataLakeSettingsResponse?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
