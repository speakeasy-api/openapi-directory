<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Apps 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Uploads the specified SSL certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateResponse
     */
	public function appengineAppsAuthorizedCertificatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedCertificates', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorizedCertificate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorizedCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthorizedCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified SSL certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteResponse
     */
	public function appengineAppsAuthorizedCertificatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified SSL certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetResponse
     */
	public function appengineAppsAuthorizedCertificatesGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorizedCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthorizedCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all SSL certificates the user is authorized to administer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListResponse
     */
	public function appengineAppsAuthorizedCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedCertificates', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizedCertificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAuthorizedCertificatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchResponse
     */
	public function appengineAppsAuthorizedCertificatesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorizedCertificate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedCertificatesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorizedCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthorizedCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all domains the user is authorized to administer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListResponse
     */
	public function appengineAppsAuthorizedDomainsList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/authorizedDomains', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsAuthorizedDomainsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizedDomainsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAuthorizedDomainsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateResponse
     */
	public function appengineAppsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateResponse
     */
	public function appengineAppsDomainMappingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/domainMappings', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domainMapping", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteResponse
     */
	public function appengineAppsDomainMappingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/domainMappings/{domainMappingsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified domain mapping.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetResponse
     */
	public function appengineAppsDomainMappingsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/domainMappings/{domainMappingsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DomainMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the domain mappings on an application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListResponse
     */
	public function appengineAppsDomainMappingsList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/domainMappings', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDomainMappingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDomainMappingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchResponse
     */
	public function appengineAppsDomainMappingsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/domainMappings/{domainMappingsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domainMapping", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsDomainMappingsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the '*' wildcard IP range, then an "allow all" rule is explicitly added to the end of the list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateResponse
     */
	public function appengineAppsFirewallIngressRulesBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchUpdateIngressRulesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchUpdateIngressRulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchUpdateIngressRulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a firewall rule for the application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateResponse
     */
	public function appengineAppsFirewallIngressRulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified firewall rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteResponse
     */
	public function appengineAppsFirewallIngressRulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified firewall rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetResponse
     */
	public function appengineAppsFirewallIngressRulesGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the firewall rules of an application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListResponse
     */
	public function appengineAppsFirewallIngressRulesList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIngressRulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListIngressRulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified firewall rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchResponse
     */
	public function appengineAppsFirewallIngressRulesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsFirewallIngressRulesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about an application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetResponse
     */
	public function appengineAppsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->application = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Application', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetResponse
     */
	public function appengineAppsLocationsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/locations/{locationsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListResponse
     */
	public function appengineAppsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/locations', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetResponse
     */
	public function appengineAppsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/operations/{operationsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListResponse
     */
	public function appengineAppsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/operations', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application. iap - Identity-Aware Proxy properties for the application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchResponse
     */
	public function appengineAppsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to recreate it. Instead, you should attempt to use the IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D . If the deletion was recent, the numeric ID can be found in the Cloud Console Activity Log.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairResponse
     */
	public function appengineAppsRepair(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}:repair', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsRepairResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified service and all enclosed versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteResponse
     */
	public function appengineAppsServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the current configuration of the specified service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetResponse
     */
	public function appengineAppsServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the services in the application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListResponse
     */
	public function appengineAppsServicesList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the configuration of the specified service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchResponse
     */
	public function appengineAppsServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "service", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deploys code and resource files to a new version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateResponse
     */
	public function appengineAppsServicesVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing Version resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteResponse
     */
	public function appengineAppsServicesVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetResponse
     */
	public function appengineAppsServicesVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugResponse
     */
	public function appengineAppsServicesVersionsInstancesDebug(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "debugInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDebugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteResponse
     */
	public function appengineAppsServicesVersionsInstancesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets instance information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetResponse
     */
	public function appengineAppsServicesVersionsInstancesGet(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Instance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListResponse
     */
	public function appengineAppsServicesVersionsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the versions of a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListResponse
     */
	public function appengineAppsServicesVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_cpu_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_throughput_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment: automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchResponse
     */
	public function appengineAppsServicesVersionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}', \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppengineAppsServicesVersionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}