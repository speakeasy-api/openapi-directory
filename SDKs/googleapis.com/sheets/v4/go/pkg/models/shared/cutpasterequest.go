// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CutPasteRequestPasteTypeEnum - What kind of data to paste. All the source data will be cut, regardless of what is pasted.
type CutPasteRequestPasteTypeEnum string

const (
	CutPasteRequestPasteTypeEnumPasteNormal                CutPasteRequestPasteTypeEnum = "PASTE_NORMAL"
	CutPasteRequestPasteTypeEnumPasteValues                CutPasteRequestPasteTypeEnum = "PASTE_VALUES"
	CutPasteRequestPasteTypeEnumPasteFormat                CutPasteRequestPasteTypeEnum = "PASTE_FORMAT"
	CutPasteRequestPasteTypeEnumPasteNoBorders             CutPasteRequestPasteTypeEnum = "PASTE_NO_BORDERS"
	CutPasteRequestPasteTypeEnumPasteFormula               CutPasteRequestPasteTypeEnum = "PASTE_FORMULA"
	CutPasteRequestPasteTypeEnumPasteDataValidation        CutPasteRequestPasteTypeEnum = "PASTE_DATA_VALIDATION"
	CutPasteRequestPasteTypeEnumPasteConditionalFormatting CutPasteRequestPasteTypeEnum = "PASTE_CONDITIONAL_FORMATTING"
)

func (e CutPasteRequestPasteTypeEnum) ToPointer() *CutPasteRequestPasteTypeEnum {
	return &e
}

func (e *CutPasteRequestPasteTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASTE_NORMAL":
		fallthrough
	case "PASTE_VALUES":
		fallthrough
	case "PASTE_FORMAT":
		fallthrough
	case "PASTE_NO_BORDERS":
		fallthrough
	case "PASTE_FORMULA":
		fallthrough
	case "PASTE_DATA_VALIDATION":
		fallthrough
	case "PASTE_CONDITIONAL_FORMATTING":
		*e = CutPasteRequestPasteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CutPasteRequestPasteTypeEnum: %v", v)
	}
}

// CutPasteRequest - Moves data from the source to the destination.
type CutPasteRequest struct {
	// A coordinate in a sheet. All indexes are zero-based.
	Destination *GridCoordinate `json:"destination,omitempty"`
	// What kind of data to paste. All the source data will be cut, regardless of what is pasted.
	PasteType *CutPasteRequestPasteTypeEnum `json:"pasteType,omitempty"`
	// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
	Source *GridRange `json:"source,omitempty"`
}
