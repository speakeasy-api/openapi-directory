"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountinfolinks as shared_accountinfolinks
from ..shared import accountstatus_enum as shared_accountstatus_enum
from ..shared import beezup_common_infosummaries as shared_beezup_common_infosummaries
from ..shared import companyinfo as shared_companyinfo
from ..shared import personalinfo as shared_personalinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountInfo:
    r"""User account information"""
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""The email"""  
    links: shared_accountinfolinks.AccountInfoLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""The different actions you can make on this account"""  
    status: shared_accountstatus_enum.AccountStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The account status
    * Active:  When the account is active
    * SystemBlocked:  When all stores on the account are blocked by the system
    * UserBlocked: When all stores on the account are blocked on GO not on the system
    * NotActivated: When the email is not verified
    """  
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId') }})
    r"""The user identifier"""  
    commercial_owner_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialOwnerEmail'), 'exclude': lambda f: f is None }})
    r"""The email"""  
    company_info: Optional[shared_companyinfo.CompanyInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyInfo'), 'exclude': lambda f: f is None }})  
    info: Optional[shared_beezup_common_infosummaries.BeezUPCommonInfoSummaries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    personal_info: Optional[shared_personalinfo.PersonalInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('personalInfo'), 'exclude': lambda f: f is None }})  
    profile_picture_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profilePictureUrl'), 'exclude': lambda f: f is None }})
    r"""Indicate the url of your picture profil"""  
    