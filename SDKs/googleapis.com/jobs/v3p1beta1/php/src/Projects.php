<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateResponse
     */
	public function jobsProjectsClientEventsCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/clientEvents', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createClientEventRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsClientEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new company entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateResponse
     */
	public function jobsProjectsCompaniesCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/companies', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCompanyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->company = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Company', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all companies associated with the service account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListResponse
     */
	public function jobsProjectsCompaniesList(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/companies', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompaniesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompaniesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCompaniesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteResponse
     */
	public function jobsProjectsComplete(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{name}:complete', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a list of Jobs by filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteResponse
     */
	public function jobsProjectsJobsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/jobs:batchDelete', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeleteJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateResponse
     */
	public function jobsProjectsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteResponse
     */
	public function jobsProjectsJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists jobs by filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListResponse
     */
	public function jobsProjectsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchResponse
     */
	public function jobsProjectsJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchResponse
     */
	public function jobsProjectsJobsSearch(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/jobs:search', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), and has different algorithmic adjustments that are targeted to passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertResponse
     */
	public function jobsProjectsJobsSearchForAlert(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{parent}/jobs:searchForAlert', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchJobsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsJobsSearchForAlertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetResponse
     */
	public function jobsProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobsProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}