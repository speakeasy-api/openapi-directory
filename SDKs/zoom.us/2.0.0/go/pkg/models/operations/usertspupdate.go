// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UserTSPUpdateTSPAccountDialInNumbersTypeEnum - Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>`media_link` - Media Link Phone Number. It is used for PSTN integration instead of paid bridge number.
type UserTSPUpdateTSPAccountDialInNumbersTypeEnum string

const (
	UserTSPUpdateTSPAccountDialInNumbersTypeEnumToll      UserTSPUpdateTSPAccountDialInNumbersTypeEnum = "toll"
	UserTSPUpdateTSPAccountDialInNumbersTypeEnumTollfree  UserTSPUpdateTSPAccountDialInNumbersTypeEnum = "tollfree"
	UserTSPUpdateTSPAccountDialInNumbersTypeEnumMediaLink UserTSPUpdateTSPAccountDialInNumbersTypeEnum = "media_link"
)

func (e *UserTSPUpdateTSPAccountDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		fallthrough
	case "media_link":
		*e = UserTSPUpdateTSPAccountDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPUpdateTSPAccountDialInNumbersTypeEnum: %s", s)
	}
}

type UserTSPUpdateTSPAccountDialInNumbers struct {
	// Country code.
	Code *string `json:"code,omitempty"`
	// Country Label, if passed, will display in place of code.
	CountryLabel *string `json:"country_label,omitempty"`
	// Dial-in number: length is less than 16.
	Number *string `json:"number,omitempty"`
	// Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>`media_link` - Media Link Phone Number. It is used for PSTN integration instead of paid bridge number.
	Type *UserTSPUpdateTSPAccountDialInNumbersTypeEnum `json:"type,omitempty"`
}

// UserTSPUpdateTSPAccountTSPBridgeEnum - Telephony bridge
type UserTSPUpdateTSPAccountTSPBridgeEnum string

const (
	UserTSPUpdateTSPAccountTSPBridgeEnumUsTspTb UserTSPUpdateTSPAccountTSPBridgeEnum = "US_TSP_TB"
	UserTSPUpdateTSPAccountTSPBridgeEnumEuTspTb UserTSPUpdateTSPAccountTSPBridgeEnum = "EU_TSP_TB"
)

func (e *UserTSPUpdateTSPAccountTSPBridgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US_TSP_TB":
		fallthrough
	case "EU_TSP_TB":
		*e = UserTSPUpdateTSPAccountTSPBridgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPUpdateTSPAccountTSPBridgeEnum: %s", s)
	}
}

// UserTSPUpdateTSPAccount - TSP account.
type UserTSPUpdateTSPAccount struct {
	// Conference code: numeric value, length is less than 16.
	ConferenceCode string `json:"conference_code" multipartForm:"name=conference_code"`
	// List of dial in numbers.
	DialInNumbers []UserTSPUpdateTSPAccountDialInNumbers `json:"dial_in_numbers,omitempty" multipartForm:"name=dial_in_numbers,json"`
	// Leader PIN: numeric value, length is less than 16.
	LeaderPin string `json:"leader_pin" multipartForm:"name=leader_pin"`
	// Telephony bridge
	TspBridge *UserTSPUpdateTSPAccountTSPBridgeEnum `json:"tsp_bridge,omitempty" multipartForm:"name=tsp_bridge"`
}

// UserTSPUpdateTSPIDEnum - TSP account ID.
type UserTSPUpdateTSPIDEnum string

const (
	UserTSPUpdateTSPIDEnumOne UserTSPUpdateTSPIDEnum = "1"
	UserTSPUpdateTSPIDEnumTwo UserTSPUpdateTSPIDEnum = "2"
)

func (e *UserTSPUpdateTSPIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = UserTSPUpdateTSPIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPUpdateTSPIDEnum: %s", s)
	}
}

type UserTSPUpdateRequest struct {
	// TSP account.
	RequestBody UserTSPUpdateTSPAccount `request:"mediaType=application/json"`
	// TSP account ID.
	TspID UserTSPUpdateTSPIDEnum `pathParam:"style=simple,explode=false,name=tspId"`
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type UserTSPUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
