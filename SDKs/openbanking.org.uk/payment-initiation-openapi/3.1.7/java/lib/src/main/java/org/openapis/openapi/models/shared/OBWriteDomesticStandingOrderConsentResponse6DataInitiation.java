/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * OBWriteDomesticStandingOrderConsentResponse6DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
 */
public class OBWriteDomesticStandingOrderConsentResponse6DataInitiation {
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    @JsonProperty("CreditorAccount")
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount creditorAccount;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withCreditorAccount(OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount debtorAccount;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withDebtorAccount(OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * The amount of the final Standing Order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FinalPaymentAmount")
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount finalPaymentAmount;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withFinalPaymentAmount(OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount finalPaymentAmount) {
        this.finalPaymentAmount = finalPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FinalPaymentDateTime")
    public OffsetDateTime finalPaymentDateTime;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withFinalPaymentDateTime(OffsetDateTime finalPaymentDateTime) {
        this.finalPaymentDateTime = finalPaymentDateTime;
        return this;
    }
    
    /**
     * The amount of the first Standing Order
     */
    @JsonProperty("FirstPaymentAmount")
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount firstPaymentAmount;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withFirstPaymentAmount(OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount firstPaymentAmount) {
        this.firstPaymentAmount = firstPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FirstPaymentDateTime")
    public OffsetDateTime firstPaymentDateTime;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withFirstPaymentDateTime(OffsetDateTime firstPaymentDateTime) {
        this.firstPaymentDateTime = firstPaymentDateTime;
        return this;
    }
    
    /**
     * Individual Definitions:
     * EvryDay - Every day
     * EvryWorkgDay - Every working day
     * IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
     * WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
     * IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
     * QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
     * ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
     * SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
     * RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
     * Individual Patterns:
     * EvryDay (ScheduleCode)
     * EvryWorkgDay (ScheduleCode)
     * IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
     * WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
     * IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
     * QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
     * The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
     * EvryDay
     * EvryWorkgDay
     * IntrvlWkDay:0[1-9]:0[1-7]
     * WkInMnthDay:0[1-5]:0[1-7]
     * IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
     * QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
     * Full Regular Expression:
     * ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
     */
    @JsonProperty("Frequency")
    public String frequency;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    /**
     * Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumberOfPayments")
    public String numberOfPayments;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withNumberOfPayments(String numberOfPayments) {
        this.numberOfPayments = numberOfPayments;
        return this;
    }
    
    /**
     * The amount of the recurring Standing Order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RecurringPaymentAmount")
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount recurringPaymentAmount;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withRecurringPaymentAmount(OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount recurringPaymentAmount) {
        this.recurringPaymentAmount = recurringPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the first recurring payment for a Standing Order schedule will be made. 
     * Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RecurringPaymentDateTime")
    public OffsetDateTime recurringPaymentDateTime;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withRecurringPaymentDateTime(OffsetDateTime recurringPaymentDateTime) {
        this.recurringPaymentDateTime = recurringPaymentDateTime;
        return this;
    }
    
    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
     * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
     * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Reference")
    public String reference;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;
    public OBWriteDomesticStandingOrderConsentResponse6DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
}
