// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnumSyntaxEnum - The source syntax.
type EnumSyntaxEnum string

const (
	EnumSyntaxEnumSyntaxProto2   EnumSyntaxEnum = "SYNTAX_PROTO2"
	EnumSyntaxEnumSyntaxProto3   EnumSyntaxEnum = "SYNTAX_PROTO3"
	EnumSyntaxEnumSyntaxEditions EnumSyntaxEnum = "SYNTAX_EDITIONS"
)

func (e EnumSyntaxEnum) ToPointer() *EnumSyntaxEnum {
	return &e
}

func (e *EnumSyntaxEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYNTAX_PROTO2":
		fallthrough
	case "SYNTAX_PROTO3":
		fallthrough
	case "SYNTAX_EDITIONS":
		*e = EnumSyntaxEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnumSyntaxEnum: %v", v)
	}
}

// Enum - Enum type definition.
type Enum struct {
	// The source edition string, only valid when syntax is SYNTAX_EDITIONS.
	Edition *string `json:"edition,omitempty"`
	// Enum value definitions.
	Enumvalue []EnumValue `json:"enumvalue,omitempty"`
	// Enum type name.
	Name *string `json:"name,omitempty"`
	// Protocol buffer options.
	Options []Option `json:"options,omitempty"`
	// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
	SourceContext *SourceContext `json:"sourceContext,omitempty"`
	// The source syntax.
	Syntax *EnumSyntaxEnum `json:"syntax,omitempty"`
}
