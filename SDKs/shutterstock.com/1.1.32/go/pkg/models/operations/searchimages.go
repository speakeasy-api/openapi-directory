// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type SearchImagesSecurity struct {
	Basic              *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// SearchImagesAiIndustryEnum - For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true
type SearchImagesAiIndustryEnum string

const (
	SearchImagesAiIndustryEnumAutomotive SearchImagesAiIndustryEnum = "automotive"
	SearchImagesAiIndustryEnumCpg        SearchImagesAiIndustryEnum = "cpg"
	SearchImagesAiIndustryEnumFinance    SearchImagesAiIndustryEnum = "finance"
	SearchImagesAiIndustryEnumHealthcare SearchImagesAiIndustryEnum = "healthcare"
	SearchImagesAiIndustryEnumRetail     SearchImagesAiIndustryEnum = "retail"
	SearchImagesAiIndustryEnumTechnology SearchImagesAiIndustryEnum = "technology"
)

func (e *SearchImagesAiIndustryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "automotive":
		fallthrough
	case "cpg":
		fallthrough
	case "finance":
		fallthrough
	case "healthcare":
		fallthrough
	case "retail":
		fallthrough
	case "technology":
		*e = SearchImagesAiIndustryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesAiIndustryEnum: %s", s)
	}
}

// SearchImagesAiObjectiveEnum - For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true
type SearchImagesAiObjectiveEnum string

const (
	SearchImagesAiObjectiveEnumAwareness   SearchImagesAiObjectiveEnum = "awareness"
	SearchImagesAiObjectiveEnumTraffic     SearchImagesAiObjectiveEnum = "traffic"
	SearchImagesAiObjectiveEnumConversions SearchImagesAiObjectiveEnum = "conversions"
)

func (e *SearchImagesAiObjectiveEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "awareness":
		fallthrough
	case "traffic":
		fallthrough
	case "conversions":
		*e = SearchImagesAiObjectiveEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesAiObjectiveEnum: %s", s)
	}
}

type SearchImagesImageTypeEnum string

const (
	SearchImagesImageTypeEnumPhoto        SearchImagesImageTypeEnum = "photo"
	SearchImagesImageTypeEnumIllustration SearchImagesImageTypeEnum = "illustration"
	SearchImagesImageTypeEnumVector       SearchImagesImageTypeEnum = "vector"
)

func (e *SearchImagesImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "photo":
		fallthrough
	case "illustration":
		fallthrough
	case "vector":
		*e = SearchImagesImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesImageTypeEnum: %s", s)
	}
}

type SearchImagesLicenseEnum string

const (
	SearchImagesLicenseEnumCommercial SearchImagesLicenseEnum = "commercial"
	SearchImagesLicenseEnumEditorial  SearchImagesLicenseEnum = "editorial"
	SearchImagesLicenseEnumEnhanced   SearchImagesLicenseEnum = "enhanced"
)

func (e *SearchImagesLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "commercial":
		fallthrough
	case "editorial":
		fallthrough
	case "enhanced":
		*e = SearchImagesLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesLicenseEnum: %s", s)
	}
}

// SearchImagesOrientationEnum - Show image results with horizontal or vertical orientation
type SearchImagesOrientationEnum string

const (
	SearchImagesOrientationEnumHorizontal SearchImagesOrientationEnum = "horizontal"
	SearchImagesOrientationEnumVertical   SearchImagesOrientationEnum = "vertical"
)

func (e *SearchImagesOrientationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "horizontal":
		fallthrough
	case "vertical":
		*e = SearchImagesOrientationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesOrientationEnum: %s", s)
	}
}

// SearchImagesPeopleAgeEnum - Show images that feature people of the specified age category
type SearchImagesPeopleAgeEnum string

const (
	SearchImagesPeopleAgeEnumInfants   SearchImagesPeopleAgeEnum = "infants"
	SearchImagesPeopleAgeEnumChildren  SearchImagesPeopleAgeEnum = "children"
	SearchImagesPeopleAgeEnumTeenagers SearchImagesPeopleAgeEnum = "teenagers"
	SearchImagesPeopleAgeEnumTwentys   SearchImagesPeopleAgeEnum = "20s"
	SearchImagesPeopleAgeEnumThirtys   SearchImagesPeopleAgeEnum = "30s"
	SearchImagesPeopleAgeEnumFortys    SearchImagesPeopleAgeEnum = "40s"
	SearchImagesPeopleAgeEnumFiftys    SearchImagesPeopleAgeEnum = "50s"
	SearchImagesPeopleAgeEnumSixtys    SearchImagesPeopleAgeEnum = "60s"
	SearchImagesPeopleAgeEnumOlder     SearchImagesPeopleAgeEnum = "older"
)

func (e *SearchImagesPeopleAgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "infants":
		fallthrough
	case "children":
		fallthrough
	case "teenagers":
		fallthrough
	case "20s":
		fallthrough
	case "30s":
		fallthrough
	case "40s":
		fallthrough
	case "50s":
		fallthrough
	case "60s":
		fallthrough
	case "older":
		*e = SearchImagesPeopleAgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesPeopleAgeEnum: %s", s)
	}
}

type SearchImagesPeopleEthnicityEnum string

const (
	SearchImagesPeopleEthnicityEnumAfrican            SearchImagesPeopleEthnicityEnum = "african"
	SearchImagesPeopleEthnicityEnumAfricanAmerican    SearchImagesPeopleEthnicityEnum = "african_american"
	SearchImagesPeopleEthnicityEnumBlack              SearchImagesPeopleEthnicityEnum = "black"
	SearchImagesPeopleEthnicityEnumBrazilian          SearchImagesPeopleEthnicityEnum = "brazilian"
	SearchImagesPeopleEthnicityEnumChinese            SearchImagesPeopleEthnicityEnum = "chinese"
	SearchImagesPeopleEthnicityEnumCaucasian          SearchImagesPeopleEthnicityEnum = "caucasian"
	SearchImagesPeopleEthnicityEnumEastAsian          SearchImagesPeopleEthnicityEnum = "east_asian"
	SearchImagesPeopleEthnicityEnumHispanic           SearchImagesPeopleEthnicityEnum = "hispanic"
	SearchImagesPeopleEthnicityEnumJapanese           SearchImagesPeopleEthnicityEnum = "japanese"
	SearchImagesPeopleEthnicityEnumMiddleEastern      SearchImagesPeopleEthnicityEnum = "middle_eastern"
	SearchImagesPeopleEthnicityEnumNativeAmerican     SearchImagesPeopleEthnicityEnum = "native_american"
	SearchImagesPeopleEthnicityEnumPacificIslander    SearchImagesPeopleEthnicityEnum = "pacific_islander"
	SearchImagesPeopleEthnicityEnumSouthAsian         SearchImagesPeopleEthnicityEnum = "south_asian"
	SearchImagesPeopleEthnicityEnumSoutheastAsian     SearchImagesPeopleEthnicityEnum = "southeast_asian"
	SearchImagesPeopleEthnicityEnumOther              SearchImagesPeopleEthnicityEnum = "other"
	SearchImagesPeopleEthnicityEnumNotAfrican         SearchImagesPeopleEthnicityEnum = "NOT african"
	SearchImagesPeopleEthnicityEnumNotAfricanAmerican SearchImagesPeopleEthnicityEnum = "NOT african_american"
	SearchImagesPeopleEthnicityEnumNotBlack           SearchImagesPeopleEthnicityEnum = "NOT black"
	SearchImagesPeopleEthnicityEnumNotBrazilian       SearchImagesPeopleEthnicityEnum = "NOT brazilian"
	SearchImagesPeopleEthnicityEnumNotChinese         SearchImagesPeopleEthnicityEnum = "NOT chinese"
	SearchImagesPeopleEthnicityEnumNotCaucasian       SearchImagesPeopleEthnicityEnum = "NOT caucasian"
	SearchImagesPeopleEthnicityEnumNotEastAsian       SearchImagesPeopleEthnicityEnum = "NOT east_asian"
	SearchImagesPeopleEthnicityEnumNotHispanic        SearchImagesPeopleEthnicityEnum = "NOT hispanic"
	SearchImagesPeopleEthnicityEnumNotJapanese        SearchImagesPeopleEthnicityEnum = "NOT japanese"
	SearchImagesPeopleEthnicityEnumNotMiddleEastern   SearchImagesPeopleEthnicityEnum = "NOT middle_eastern"
	SearchImagesPeopleEthnicityEnumNotNativeAmerican  SearchImagesPeopleEthnicityEnum = "NOT native_american"
	SearchImagesPeopleEthnicityEnumNotPacificIslander SearchImagesPeopleEthnicityEnum = "NOT pacific_islander"
	SearchImagesPeopleEthnicityEnumNotSouthAsian      SearchImagesPeopleEthnicityEnum = "NOT south_asian"
	SearchImagesPeopleEthnicityEnumNotSoutheastAsian  SearchImagesPeopleEthnicityEnum = "NOT southeast_asian"
	SearchImagesPeopleEthnicityEnumNotOther           SearchImagesPeopleEthnicityEnum = "NOT other"
)

func (e *SearchImagesPeopleEthnicityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "african":
		fallthrough
	case "african_american":
		fallthrough
	case "black":
		fallthrough
	case "brazilian":
		fallthrough
	case "chinese":
		fallthrough
	case "caucasian":
		fallthrough
	case "east_asian":
		fallthrough
	case "hispanic":
		fallthrough
	case "japanese":
		fallthrough
	case "middle_eastern":
		fallthrough
	case "native_american":
		fallthrough
	case "pacific_islander":
		fallthrough
	case "south_asian":
		fallthrough
	case "southeast_asian":
		fallthrough
	case "other":
		fallthrough
	case "NOT african":
		fallthrough
	case "NOT african_american":
		fallthrough
	case "NOT black":
		fallthrough
	case "NOT brazilian":
		fallthrough
	case "NOT chinese":
		fallthrough
	case "NOT caucasian":
		fallthrough
	case "NOT east_asian":
		fallthrough
	case "NOT hispanic":
		fallthrough
	case "NOT japanese":
		fallthrough
	case "NOT middle_eastern":
		fallthrough
	case "NOT native_american":
		fallthrough
	case "NOT pacific_islander":
		fallthrough
	case "NOT south_asian":
		fallthrough
	case "NOT southeast_asian":
		fallthrough
	case "NOT other":
		*e = SearchImagesPeopleEthnicityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesPeopleEthnicityEnum: %s", s)
	}
}

// SearchImagesPeopleGenderEnum - Show images with people of the specified gender
type SearchImagesPeopleGenderEnum string

const (
	SearchImagesPeopleGenderEnumMale   SearchImagesPeopleGenderEnum = "male"
	SearchImagesPeopleGenderEnumFemale SearchImagesPeopleGenderEnum = "female"
	SearchImagesPeopleGenderEnumBoth   SearchImagesPeopleGenderEnum = "both"
)

func (e *SearchImagesPeopleGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "both":
		*e = SearchImagesPeopleGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesPeopleGenderEnum: %s", s)
	}
}

// SearchImagesSortEnum - Sort by
type SearchImagesSortEnum string

const (
	SearchImagesSortEnumNewest    SearchImagesSortEnum = "newest"
	SearchImagesSortEnumPopular   SearchImagesSortEnum = "popular"
	SearchImagesSortEnumRelevance SearchImagesSortEnum = "relevance"
	SearchImagesSortEnumRandom    SearchImagesSortEnum = "random"
)

func (e *SearchImagesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "popular":
		fallthrough
	case "relevance":
		fallthrough
	case "random":
		*e = SearchImagesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesSortEnum: %s", s)
	}
}

// SearchImagesViewEnum - Amount of detail to render in the response
type SearchImagesViewEnum string

const (
	SearchImagesViewEnumMinimal SearchImagesViewEnum = "minimal"
	SearchImagesViewEnumFull    SearchImagesViewEnum = "full"
)

func (e *SearchImagesViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "minimal":
		fallthrough
	case "full":
		*e = SearchImagesViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagesViewEnum: %s", s)
	}
}

type SearchImagesRequest struct {
	// Show images added on the specified date
	AddedDate *types.Date `queryParam:"style=form,explode=true,name=added_date"`
	// Show images added before the specified date
	AddedDateEnd *types.Date `queryParam:"style=form,explode=true,name=added_date_end"`
	// Show images added on or after the specified date
	AddedDateStart *types.Date `queryParam:"style=form,explode=true,name=added_date_start"`
	// For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true
	AiIndustry *SearchImagesAiIndustryEnum `queryParam:"style=form,explode=true,name=ai_industry"`
	// For AI-powered search, specify the maximum number of labels to return
	AiLabelsLimit *int64 `queryParam:"style=form,explode=true,name=ai_labels_limit"`
	// For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true
	AiObjective *SearchImagesAiObjectiveEnum `queryParam:"style=form,explode=true,name=ai_objective"`
	// Set to true and specify the `ai_objective` and `ai_industry` parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry
	AiSearch *bool `queryParam:"style=form,explode=true,name=ai_search"`
	// Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatio *float64 `queryParam:"style=form,explode=true,name=aspect_ratio"`
	// Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMax *float64 `queryParam:"style=form,explode=true,name=aspect_ratio_max"`
	// Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMin *float64 `queryParam:"style=form,explode=true,name=aspect_ratio_min"`
	// Show images with the specified Shutterstock-defined category; specify a category name or ID
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
	Color *string `queryParam:"style=form,explode=true,name=color"`
	// Show images with the specified contributor names or IDs, allows multiple
	Contributor []string `queryParam:"style=form,explode=true,name=contributor"`
	// Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
	ContributorCountry interface{} `queryParam:"style=form,explode=true,name=contributor_country"`
	// Fields to display in the response; see the documentation for the fields parameter in the overview section
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// (Deprecated; use height_from and height_to instead) Show images with the specified height
	Height *int64 `queryParam:"style=form,explode=true,name=height"`
	// Show images with the specified height or larger, in pixels
	HeightFrom *int64 `queryParam:"style=form,explode=true,name=height_from"`
	// Show images with the specified height or smaller, in pixels
	HeightTo *int64 `queryParam:"style=form,explode=true,name=height_to"`
	// Show images of the specified type
	ImageType []SearchImagesImageTypeEnum `queryParam:"style=form,explode=true,name=image_type"`
	// Hide results with potentially unsafe keywords
	KeywordSafeSearch *bool `queryParam:"style=form,explode=true,name=keyword_safe_search"`
	// Set query and result language (uses Accept-Language header if not set)
	Language *shared.LanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Show only images with the specified license
	License []SearchImagesLicenseEnum `queryParam:"style=form,explode=true,name=license"`
	// Show image results with the specified model IDs
	Model []string `queryParam:"style=form,explode=true,name=model"`
	// Show image results with horizontal or vertical orientation
	Orientation *SearchImagesOrientationEnum `queryParam:"style=form,explode=true,name=orientation"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Show images that feature people of the specified age category
	PeopleAge *SearchImagesPeopleAgeEnum `queryParam:"style=form,explode=true,name=people_age"`
	// Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
	PeopleEthnicity []SearchImagesPeopleEthnicityEnum `queryParam:"style=form,explode=true,name=people_ethnicity"`
	// Show images with people of the specified gender
	PeopleGender *SearchImagesPeopleGenderEnum `queryParam:"style=form,explode=true,name=people_gender"`
	// Show images of people with a signed model release
	PeopleModelReleased *bool `queryParam:"style=form,explode=true,name=people_model_released"`
	// Show images with the specified number of people
	PeopleNumber *int64 `queryParam:"style=form,explode=true,name=people_number"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// One or more search terms separated by spaces; you can use NOT to filter out images that match a term
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
	Region interface{} `queryParam:"style=form,explode=true,name=region"`
	// Enable or disable safe search
	Safe *bool `queryParam:"style=form,explode=true,name=safe"`
	// Sort by
	Sort *SearchImagesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Spellcheck the search query and return results on suggested spellings
	SpellcheckQuery *bool `queryParam:"style=form,explode=true,name=spellcheck_query"`
	// Amount of detail to render in the response
	View *SearchImagesViewEnum `queryParam:"style=form,explode=true,name=view"`
	// (Deprecated; use width_from and width_to instead) Show images with the specified width
	Width *int64 `queryParam:"style=form,explode=true,name=width"`
	// Show images with the specified width or larger, in pixels
	WidthFrom *int64 `queryParam:"style=form,explode=true,name=width_from"`
	// Show images with the specified width or smaller, in pixels
	WidthTo *int64 `queryParam:"style=form,explode=true,name=width_to"`
}

type SearchImagesResponse struct {
	ContentType string
	// OK
	ImageSearchResults *shared.ImageSearchResults
	StatusCode         int
	RawResponse        *http.Response
}
