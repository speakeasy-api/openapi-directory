/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DestinationConfig } from "./destinationconfig";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class FunctionEventInvokeConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationConfig" })
  @Type(() => DestinationConfig)
  destinationConfig?: DestinationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "FunctionArn" })
  functionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumEventAgeInSeconds" })
  maximumEventAgeInSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumRetryAttempts" })
  maximumRetryAttempts?: number;
}
