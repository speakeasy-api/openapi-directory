// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetReleaseExecutableResponseExecutableVersionEnum - The Rules runtime version of the executable.
type GetReleaseExecutableResponseExecutableVersionEnum string

const (
	GetReleaseExecutableResponseExecutableVersionEnumReleaseExecutableVersionUnspecified GetReleaseExecutableResponseExecutableVersionEnum = "RELEASE_EXECUTABLE_VERSION_UNSPECIFIED"
	GetReleaseExecutableResponseExecutableVersionEnumFirebaseRulesExecutableV1           GetReleaseExecutableResponseExecutableVersionEnum = "FIREBASE_RULES_EXECUTABLE_V1"
	GetReleaseExecutableResponseExecutableVersionEnumFirebaseRulesExecutableV2           GetReleaseExecutableResponseExecutableVersionEnum = "FIREBASE_RULES_EXECUTABLE_V2"
)

func (e GetReleaseExecutableResponseExecutableVersionEnum) ToPointer() *GetReleaseExecutableResponseExecutableVersionEnum {
	return &e
}

func (e *GetReleaseExecutableResponseExecutableVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RELEASE_EXECUTABLE_VERSION_UNSPECIFIED":
		fallthrough
	case "FIREBASE_RULES_EXECUTABLE_V1":
		fallthrough
	case "FIREBASE_RULES_EXECUTABLE_V2":
		*e = GetReleaseExecutableResponseExecutableVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetReleaseExecutableResponseExecutableVersionEnum: %v", v)
	}
}

// GetReleaseExecutableResponseLanguageEnum - `Language` used to generate the executable bytes.
type GetReleaseExecutableResponseLanguageEnum string

const (
	GetReleaseExecutableResponseLanguageEnumLanguageUnspecified GetReleaseExecutableResponseLanguageEnum = "LANGUAGE_UNSPECIFIED"
	GetReleaseExecutableResponseLanguageEnumFirebaseRules       GetReleaseExecutableResponseLanguageEnum = "FIREBASE_RULES"
	GetReleaseExecutableResponseLanguageEnumEventFlowTriggers   GetReleaseExecutableResponseLanguageEnum = "EVENT_FLOW_TRIGGERS"
)

func (e GetReleaseExecutableResponseLanguageEnum) ToPointer() *GetReleaseExecutableResponseLanguageEnum {
	return &e
}

func (e *GetReleaseExecutableResponseLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LANGUAGE_UNSPECIFIED":
		fallthrough
	case "FIREBASE_RULES":
		fallthrough
	case "EVENT_FLOW_TRIGGERS":
		*e = GetReleaseExecutableResponseLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetReleaseExecutableResponseLanguageEnum: %v", v)
	}
}

// GetReleaseExecutableResponse - The response for FirebaseRulesService.GetReleaseExecutable
type GetReleaseExecutableResponse struct {
	// Executable view of the `Ruleset` referenced by the `Release`.
	Executable *string `json:"executable,omitempty"`
	// The Rules runtime version of the executable.
	ExecutableVersion *GetReleaseExecutableResponseExecutableVersionEnum `json:"executableVersion,omitempty"`
	// `Language` used to generate the executable bytes.
	Language *GetReleaseExecutableResponseLanguageEnum `json:"language,omitempty"`
	// `Ruleset` name associated with the `Release` executable.
	RulesetName *string `json:"rulesetName,omitempty"`
	// Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).
	SyncTime *string `json:"syncTime,omitempty"`
	// Timestamp for the most recent `Release.update_time`.
	UpdateTime *string `json:"updateTime,omitempty"`
}
