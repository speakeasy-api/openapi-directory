/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountAttributes } from "./accountattributes";
import { Expose, Type } from "class-transformer";

export enum AccountMasterUserMasterUserDataTypeEnum {
  User = "user",
}

export class AccountMasterUserMasterUserData extends SpeakeasyBase {
  /**
   * ID of master user for account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AccountMasterUserMasterUserDataTypeEnum;
}

export class AccountMasterUserMasterUser extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => AccountMasterUserMasterUserData)
  data?: AccountMasterUserMasterUserData;
}

export class AccountMasterUser extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "masterUser" })
  @Type(() => AccountMasterUserMasterUser)
  masterUser?: AccountMasterUserMasterUser;
}

/**
 * Type of item. "account"
 */
export enum AccountTypeEnum {
  Account = "account",
}

/**
 * Object contains all account properties.
 */
export class Account extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => AccountAttributes)
  attributes?: AccountAttributes;

  /**
   * Account ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => AccountMasterUser)
  relationships?: AccountMasterUser;

  /**
   * Type of item. "account"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AccountTypeEnum;
}
