"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppPermissions = exports.AppPermissionsWorkflowsEnum = exports.AppPermissionsVulnerabilityAlertsEnum = exports.AppPermissionsTeamDiscussionsEnum = exports.AppPermissionsStatusesEnum = exports.AppPermissionsSingleFileEnum = exports.AppPermissionsSecurityEventsEnum = exports.AppPermissionsSecretsEnum = exports.AppPermissionsSecretScanningAlertsEnum = exports.AppPermissionsRepositoryProjectsEnum = exports.AppPermissionsRepositoryHooksEnum = exports.AppPermissionsPullRequestsEnum = exports.AppPermissionsPagesEnum = exports.AppPermissionsPackagesEnum = exports.AppPermissionsOrganizationUserBlockingEnum = exports.AppPermissionsOrganizationSelfHostedRunnersEnum = exports.AppPermissionsOrganizationSecretsEnum = exports.AppPermissionsOrganizationProjectsEnum = exports.AppPermissionsOrganizationPlanEnum = exports.AppPermissionsOrganizationPackagesEnum = exports.AppPermissionsOrganizationHooksEnum = exports.AppPermissionsOrganizationAdministrationEnum = exports.AppPermissionsMetadataEnum = exports.AppPermissionsMembersEnum = exports.AppPermissionsIssuesEnum = exports.AppPermissionsEnvironmentsEnum = exports.AppPermissionsDeploymentsEnum = exports.AppPermissionsContentsEnum = exports.AppPermissionsContentReferencesEnum = exports.AppPermissionsChecksEnum = exports.AppPermissionsAdministrationEnum = exports.AppPermissionsActionsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
 */
var AppPermissionsActionsEnum;
(function (AppPermissionsActionsEnum) {
    AppPermissionsActionsEnum["Read"] = "read";
    AppPermissionsActionsEnum["Write"] = "write";
})(AppPermissionsActionsEnum = exports.AppPermissionsActionsEnum || (exports.AppPermissionsActionsEnum = {}));
/**
 * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
 */
var AppPermissionsAdministrationEnum;
(function (AppPermissionsAdministrationEnum) {
    AppPermissionsAdministrationEnum["Read"] = "read";
    AppPermissionsAdministrationEnum["Write"] = "write";
})(AppPermissionsAdministrationEnum = exports.AppPermissionsAdministrationEnum || (exports.AppPermissionsAdministrationEnum = {}));
/**
 * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
 */
var AppPermissionsChecksEnum;
(function (AppPermissionsChecksEnum) {
    AppPermissionsChecksEnum["Read"] = "read";
    AppPermissionsChecksEnum["Write"] = "write";
})(AppPermissionsChecksEnum = exports.AppPermissionsChecksEnum || (exports.AppPermissionsChecksEnum = {}));
/**
 * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
 */
var AppPermissionsContentReferencesEnum;
(function (AppPermissionsContentReferencesEnum) {
    AppPermissionsContentReferencesEnum["Read"] = "read";
    AppPermissionsContentReferencesEnum["Write"] = "write";
})(AppPermissionsContentReferencesEnum = exports.AppPermissionsContentReferencesEnum || (exports.AppPermissionsContentReferencesEnum = {}));
/**
 * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
 */
var AppPermissionsContentsEnum;
(function (AppPermissionsContentsEnum) {
    AppPermissionsContentsEnum["Read"] = "read";
    AppPermissionsContentsEnum["Write"] = "write";
})(AppPermissionsContentsEnum = exports.AppPermissionsContentsEnum || (exports.AppPermissionsContentsEnum = {}));
/**
 * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
 */
var AppPermissionsDeploymentsEnum;
(function (AppPermissionsDeploymentsEnum) {
    AppPermissionsDeploymentsEnum["Read"] = "read";
    AppPermissionsDeploymentsEnum["Write"] = "write";
})(AppPermissionsDeploymentsEnum = exports.AppPermissionsDeploymentsEnum || (exports.AppPermissionsDeploymentsEnum = {}));
/**
 * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
 */
var AppPermissionsEnvironmentsEnum;
(function (AppPermissionsEnvironmentsEnum) {
    AppPermissionsEnvironmentsEnum["Read"] = "read";
    AppPermissionsEnvironmentsEnum["Write"] = "write";
})(AppPermissionsEnvironmentsEnum = exports.AppPermissionsEnvironmentsEnum || (exports.AppPermissionsEnvironmentsEnum = {}));
/**
 * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
 */
var AppPermissionsIssuesEnum;
(function (AppPermissionsIssuesEnum) {
    AppPermissionsIssuesEnum["Read"] = "read";
    AppPermissionsIssuesEnum["Write"] = "write";
})(AppPermissionsIssuesEnum = exports.AppPermissionsIssuesEnum || (exports.AppPermissionsIssuesEnum = {}));
/**
 * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
 */
var AppPermissionsMembersEnum;
(function (AppPermissionsMembersEnum) {
    AppPermissionsMembersEnum["Read"] = "read";
    AppPermissionsMembersEnum["Write"] = "write";
})(AppPermissionsMembersEnum = exports.AppPermissionsMembersEnum || (exports.AppPermissionsMembersEnum = {}));
/**
 * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
 */
var AppPermissionsMetadataEnum;
(function (AppPermissionsMetadataEnum) {
    AppPermissionsMetadataEnum["Read"] = "read";
    AppPermissionsMetadataEnum["Write"] = "write";
})(AppPermissionsMetadataEnum = exports.AppPermissionsMetadataEnum || (exports.AppPermissionsMetadataEnum = {}));
/**
 * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationAdministrationEnum;
(function (AppPermissionsOrganizationAdministrationEnum) {
    AppPermissionsOrganizationAdministrationEnum["Read"] = "read";
    AppPermissionsOrganizationAdministrationEnum["Write"] = "write";
})(AppPermissionsOrganizationAdministrationEnum = exports.AppPermissionsOrganizationAdministrationEnum || (exports.AppPermissionsOrganizationAdministrationEnum = {}));
/**
 * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationHooksEnum;
(function (AppPermissionsOrganizationHooksEnum) {
    AppPermissionsOrganizationHooksEnum["Read"] = "read";
    AppPermissionsOrganizationHooksEnum["Write"] = "write";
})(AppPermissionsOrganizationHooksEnum = exports.AppPermissionsOrganizationHooksEnum || (exports.AppPermissionsOrganizationHooksEnum = {}));
/**
 * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationPackagesEnum;
(function (AppPermissionsOrganizationPackagesEnum) {
    AppPermissionsOrganizationPackagesEnum["Read"] = "read";
    AppPermissionsOrganizationPackagesEnum["Write"] = "write";
})(AppPermissionsOrganizationPackagesEnum = exports.AppPermissionsOrganizationPackagesEnum || (exports.AppPermissionsOrganizationPackagesEnum = {}));
/**
 * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
 */
var AppPermissionsOrganizationPlanEnum;
(function (AppPermissionsOrganizationPlanEnum) {
    AppPermissionsOrganizationPlanEnum["Read"] = "read";
})(AppPermissionsOrganizationPlanEnum = exports.AppPermissionsOrganizationPlanEnum || (exports.AppPermissionsOrganizationPlanEnum = {}));
/**
 * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 */
var AppPermissionsOrganizationProjectsEnum;
(function (AppPermissionsOrganizationProjectsEnum) {
    AppPermissionsOrganizationProjectsEnum["Read"] = "read";
    AppPermissionsOrganizationProjectsEnum["Write"] = "write";
    AppPermissionsOrganizationProjectsEnum["Admin"] = "admin";
})(AppPermissionsOrganizationProjectsEnum = exports.AppPermissionsOrganizationProjectsEnum || (exports.AppPermissionsOrganizationProjectsEnum = {}));
/**
 * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationSecretsEnum;
(function (AppPermissionsOrganizationSecretsEnum) {
    AppPermissionsOrganizationSecretsEnum["Read"] = "read";
    AppPermissionsOrganizationSecretsEnum["Write"] = "write";
})(AppPermissionsOrganizationSecretsEnum = exports.AppPermissionsOrganizationSecretsEnum || (exports.AppPermissionsOrganizationSecretsEnum = {}));
/**
 * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationSelfHostedRunnersEnum;
(function (AppPermissionsOrganizationSelfHostedRunnersEnum) {
    AppPermissionsOrganizationSelfHostedRunnersEnum["Read"] = "read";
    AppPermissionsOrganizationSelfHostedRunnersEnum["Write"] = "write";
})(AppPermissionsOrganizationSelfHostedRunnersEnum = exports.AppPermissionsOrganizationSelfHostedRunnersEnum || (exports.AppPermissionsOrganizationSelfHostedRunnersEnum = {}));
/**
 * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
 */
var AppPermissionsOrganizationUserBlockingEnum;
(function (AppPermissionsOrganizationUserBlockingEnum) {
    AppPermissionsOrganizationUserBlockingEnum["Read"] = "read";
    AppPermissionsOrganizationUserBlockingEnum["Write"] = "write";
})(AppPermissionsOrganizationUserBlockingEnum = exports.AppPermissionsOrganizationUserBlockingEnum || (exports.AppPermissionsOrganizationUserBlockingEnum = {}));
/**
 * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
 */
var AppPermissionsPackagesEnum;
(function (AppPermissionsPackagesEnum) {
    AppPermissionsPackagesEnum["Read"] = "read";
    AppPermissionsPackagesEnum["Write"] = "write";
})(AppPermissionsPackagesEnum = exports.AppPermissionsPackagesEnum || (exports.AppPermissionsPackagesEnum = {}));
/**
 * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
 */
var AppPermissionsPagesEnum;
(function (AppPermissionsPagesEnum) {
    AppPermissionsPagesEnum["Read"] = "read";
    AppPermissionsPagesEnum["Write"] = "write";
})(AppPermissionsPagesEnum = exports.AppPermissionsPagesEnum || (exports.AppPermissionsPagesEnum = {}));
/**
 * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
 */
var AppPermissionsPullRequestsEnum;
(function (AppPermissionsPullRequestsEnum) {
    AppPermissionsPullRequestsEnum["Read"] = "read";
    AppPermissionsPullRequestsEnum["Write"] = "write";
})(AppPermissionsPullRequestsEnum = exports.AppPermissionsPullRequestsEnum || (exports.AppPermissionsPullRequestsEnum = {}));
/**
 * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
 */
var AppPermissionsRepositoryHooksEnum;
(function (AppPermissionsRepositoryHooksEnum) {
    AppPermissionsRepositoryHooksEnum["Read"] = "read";
    AppPermissionsRepositoryHooksEnum["Write"] = "write";
})(AppPermissionsRepositoryHooksEnum = exports.AppPermissionsRepositoryHooksEnum || (exports.AppPermissionsRepositoryHooksEnum = {}));
/**
 * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 */
var AppPermissionsRepositoryProjectsEnum;
(function (AppPermissionsRepositoryProjectsEnum) {
    AppPermissionsRepositoryProjectsEnum["Read"] = "read";
    AppPermissionsRepositoryProjectsEnum["Write"] = "write";
    AppPermissionsRepositoryProjectsEnum["Admin"] = "admin";
})(AppPermissionsRepositoryProjectsEnum = exports.AppPermissionsRepositoryProjectsEnum || (exports.AppPermissionsRepositoryProjectsEnum = {}));
/**
 * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
 */
var AppPermissionsSecretScanningAlertsEnum;
(function (AppPermissionsSecretScanningAlertsEnum) {
    AppPermissionsSecretScanningAlertsEnum["Read"] = "read";
    AppPermissionsSecretScanningAlertsEnum["Write"] = "write";
})(AppPermissionsSecretScanningAlertsEnum = exports.AppPermissionsSecretScanningAlertsEnum || (exports.AppPermissionsSecretScanningAlertsEnum = {}));
/**
 * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
 */
var AppPermissionsSecretsEnum;
(function (AppPermissionsSecretsEnum) {
    AppPermissionsSecretsEnum["Read"] = "read";
    AppPermissionsSecretsEnum["Write"] = "write";
})(AppPermissionsSecretsEnum = exports.AppPermissionsSecretsEnum || (exports.AppPermissionsSecretsEnum = {}));
/**
 * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
 */
var AppPermissionsSecurityEventsEnum;
(function (AppPermissionsSecurityEventsEnum) {
    AppPermissionsSecurityEventsEnum["Read"] = "read";
    AppPermissionsSecurityEventsEnum["Write"] = "write";
})(AppPermissionsSecurityEventsEnum = exports.AppPermissionsSecurityEventsEnum || (exports.AppPermissionsSecurityEventsEnum = {}));
/**
 * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
 */
var AppPermissionsSingleFileEnum;
(function (AppPermissionsSingleFileEnum) {
    AppPermissionsSingleFileEnum["Read"] = "read";
    AppPermissionsSingleFileEnum["Write"] = "write";
})(AppPermissionsSingleFileEnum = exports.AppPermissionsSingleFileEnum || (exports.AppPermissionsSingleFileEnum = {}));
/**
 * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
 */
var AppPermissionsStatusesEnum;
(function (AppPermissionsStatusesEnum) {
    AppPermissionsStatusesEnum["Read"] = "read";
    AppPermissionsStatusesEnum["Write"] = "write";
})(AppPermissionsStatusesEnum = exports.AppPermissionsStatusesEnum || (exports.AppPermissionsStatusesEnum = {}));
/**
 * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
 */
var AppPermissionsTeamDiscussionsEnum;
(function (AppPermissionsTeamDiscussionsEnum) {
    AppPermissionsTeamDiscussionsEnum["Read"] = "read";
    AppPermissionsTeamDiscussionsEnum["Write"] = "write";
})(AppPermissionsTeamDiscussionsEnum = exports.AppPermissionsTeamDiscussionsEnum || (exports.AppPermissionsTeamDiscussionsEnum = {}));
/**
 * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
 */
var AppPermissionsVulnerabilityAlertsEnum;
(function (AppPermissionsVulnerabilityAlertsEnum) {
    AppPermissionsVulnerabilityAlertsEnum["Read"] = "read";
})(AppPermissionsVulnerabilityAlertsEnum = exports.AppPermissionsVulnerabilityAlertsEnum || (exports.AppPermissionsVulnerabilityAlertsEnum = {}));
/**
 * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
 */
var AppPermissionsWorkflowsEnum;
(function (AppPermissionsWorkflowsEnum) {
    AppPermissionsWorkflowsEnum["Write"] = "write";
})(AppPermissionsWorkflowsEnum = exports.AppPermissionsWorkflowsEnum || (exports.AppPermissionsWorkflowsEnum = {}));
/**
 * The permissions granted to the user-to-server access token.
 */
var AppPermissions = /** @class */ (function (_super) {
    __extends(AppPermissions, _super);
    function AppPermissions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "actions" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "actions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "administration" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "administration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "checks" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "checks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "content_references" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "contentReferences", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contents" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "contents", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deployments" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "deployments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "environments" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "environments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "issues" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "issues", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "members" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "members", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_administration" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationAdministration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_hooks" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationHooks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_packages" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationPackages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_plan" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationPlan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_projects" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationProjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_secrets" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationSecrets", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_self_hosted_runners" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationSelfHostedRunners", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organization_user_blocking" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "organizationUserBlocking", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "packages" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "packages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pages" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "pages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pull_requests" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "pullRequests", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "repository_hooks" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "repositoryHooks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "repository_projects" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "repositoryProjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret_scanning_alerts" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "secretScanningAlerts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secrets" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "secrets", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "security_events" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "securityEvents", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "single_file" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "singleFile", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statuses" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "statuses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "team_discussions" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "teamDiscussions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vulnerability_alerts" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "vulnerabilityAlerts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workflows" }),
        __metadata("design:type", String)
    ], AppPermissions.prototype, "workflows", void 0);
    return AppPermissions;
}(utils_1.SpeakeasyBase));
exports.AppPermissions = AppPermissions;
