"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listbatchjobexecutionsresponse as shared_listbatchjobexecutionsresponse
from datetime import datetime
from enum import Enum
from typing import Any, Optional

class ListBatchJobExecutionsStatusEnum(str, Enum):
    r"""The status of the batch job executions."""
    SUBMITTING = 'Submitting'
    HOLDING = 'Holding'
    DISPATCHING = 'Dispatching'
    RUNNING = 'Running'
    CANCELLING = 'Cancelling'
    CANCELLED = 'Cancelled'
    SUCCEEDED = 'Succeeded'
    FAILED = 'Failed'
    SUCCEEDED_WITH_WARNING = 'Succeeded With Warning'


@dataclasses.dataclass
class ListBatchJobExecutionsRequest:
    
    application_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'applicationId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the application."""  
    execution_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'executionIds', 'style': 'form', 'explode': True }})
    r"""The unique identifier of each batch job execution."""  
    job_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'jobName', 'style': 'form', 'explode': True }})
    r"""The name of each batch job execution."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of batch job executions to return."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""A pagination token to control the number of batch job executions displayed in the list."""  
    started_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startedAfter', 'style': 'form', 'explode': True }})
    r"""The time after which the batch job executions started."""  
    started_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startedBefore', 'style': 'form', 'explode': True }})
    r"""The time before the batch job executions started."""  
    status: Optional[ListBatchJobExecutionsStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""The status of the batch job executions."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListBatchJobExecutionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_batch_job_executions_response: Optional[shared_listbatchjobexecutionsresponse.ListBatchJobExecutionsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    