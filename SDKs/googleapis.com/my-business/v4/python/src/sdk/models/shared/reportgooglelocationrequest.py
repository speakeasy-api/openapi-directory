"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReportGoogleLocationRequestReportReasonBadLocationEnum(str, Enum):
    r"""The reason for which the user is reporting this location when the issue is with the location itself."""
    BAD_LOCATION_REASON_UNSPECIFIED = 'BAD_LOCATION_REASON_UNSPECIFIED'
    NOT_A_LOCATION = 'NOT_A_LOCATION'
    PERMANENTLY_CLOSED = 'PERMANENTLY_CLOSED'
    DOES_NOT_EXIST = 'DOES_NOT_EXIST'
    SPAM = 'SPAM'
    NOT_A_BUSINESS = 'NOT_A_BUSINESS'
    MOVED = 'MOVED'
    DUPLICATE = 'DUPLICATE'

class ReportGoogleLocationRequestReportReasonBadRecommendationEnum(str, Enum):
    r"""The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account."""
    BAD_RECOMMENDATION_REASON_UNSPECIFIED = 'BAD_RECOMMENDATION_REASON_UNSPECIFIED'
    NOT_A_STORE_FRONT = 'NOT_A_STORE_FRONT'
    NOT_PART_OF_SUGGESTED_CHAIN = 'NOT_PART_OF_SUGGESTED_CHAIN'
    IRRELEVANT = 'IRRELEVANT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportGoogleLocationRequest:
    r"""Request message for reporting a GoogleLocation."""
    
    location_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationGroupName'), 'exclude': lambda f: f is None }})
    r"""Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`."""  
    report_reason_bad_location: Optional[ReportGoogleLocationRequestReportReasonBadLocationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportReasonBadLocation'), 'exclude': lambda f: f is None }})
    r"""The reason for which the user is reporting this location when the issue is with the location itself."""  
    report_reason_bad_recommendation: Optional[ReportGoogleLocationRequestReportReasonBadRecommendationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportReasonBadRecommendation'), 'exclude': lambda f: f is None }})
    r"""The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account."""  
    report_reason_elaboration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportReasonElaboration'), 'exclude': lambda f: f is None }})
    r"""Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters."""  
    report_reason_language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportReasonLanguageCode'), 'exclude': lambda f: f is None }})
    r"""Optional. The BCP 47 code of language used in `report_reason_elaboration`."""  
    