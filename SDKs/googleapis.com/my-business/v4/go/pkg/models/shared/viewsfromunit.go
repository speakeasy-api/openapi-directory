// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ViewsFromUnitBeachViewExceptionEnum - Beach view exception.
type ViewsFromUnitBeachViewExceptionEnum string

const (
	ViewsFromUnitBeachViewExceptionEnumExceptionUnspecified ViewsFromUnitBeachViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitBeachViewExceptionEnumUnderConstruction    ViewsFromUnitBeachViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitBeachViewExceptionEnumDependentOnSeason    ViewsFromUnitBeachViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitBeachViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitBeachViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitBeachViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitBeachViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitBeachViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitCityViewExceptionEnum - City view exception.
type ViewsFromUnitCityViewExceptionEnum string

const (
	ViewsFromUnitCityViewExceptionEnumExceptionUnspecified ViewsFromUnitCityViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitCityViewExceptionEnumUnderConstruction    ViewsFromUnitCityViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitCityViewExceptionEnumDependentOnSeason    ViewsFromUnitCityViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitCityViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitCityViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitCityViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitCityViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitCityViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitGardenViewExceptionEnum - Garden view exception.
type ViewsFromUnitGardenViewExceptionEnum string

const (
	ViewsFromUnitGardenViewExceptionEnumExceptionUnspecified ViewsFromUnitGardenViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitGardenViewExceptionEnumUnderConstruction    ViewsFromUnitGardenViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitGardenViewExceptionEnumDependentOnSeason    ViewsFromUnitGardenViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitGardenViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitGardenViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitGardenViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitGardenViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitGardenViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitLakeViewExceptionEnum - Lake view exception.
type ViewsFromUnitLakeViewExceptionEnum string

const (
	ViewsFromUnitLakeViewExceptionEnumExceptionUnspecified ViewsFromUnitLakeViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitLakeViewExceptionEnumUnderConstruction    ViewsFromUnitLakeViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitLakeViewExceptionEnumDependentOnSeason    ViewsFromUnitLakeViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitLakeViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitLakeViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitLakeViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitLakeViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitLakeViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitLandmarkViewExceptionEnum - Landmark view exception.
type ViewsFromUnitLandmarkViewExceptionEnum string

const (
	ViewsFromUnitLandmarkViewExceptionEnumExceptionUnspecified ViewsFromUnitLandmarkViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitLandmarkViewExceptionEnumUnderConstruction    ViewsFromUnitLandmarkViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitLandmarkViewExceptionEnumDependentOnSeason    ViewsFromUnitLandmarkViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitLandmarkViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitLandmarkViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitLandmarkViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitLandmarkViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitLandmarkViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitOceanViewExceptionEnum - Ocean view exception.
type ViewsFromUnitOceanViewExceptionEnum string

const (
	ViewsFromUnitOceanViewExceptionEnumExceptionUnspecified ViewsFromUnitOceanViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitOceanViewExceptionEnumUnderConstruction    ViewsFromUnitOceanViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitOceanViewExceptionEnumDependentOnSeason    ViewsFromUnitOceanViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitOceanViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitOceanViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitOceanViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitOceanViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitOceanViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitPoolViewExceptionEnum - Pool view exception.
type ViewsFromUnitPoolViewExceptionEnum string

const (
	ViewsFromUnitPoolViewExceptionEnumExceptionUnspecified ViewsFromUnitPoolViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitPoolViewExceptionEnumUnderConstruction    ViewsFromUnitPoolViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitPoolViewExceptionEnumDependentOnSeason    ViewsFromUnitPoolViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitPoolViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitPoolViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitPoolViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitPoolViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitPoolViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnitValleyViewExceptionEnum - Valley view exception.
type ViewsFromUnitValleyViewExceptionEnum string

const (
	ViewsFromUnitValleyViewExceptionEnumExceptionUnspecified ViewsFromUnitValleyViewExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ViewsFromUnitValleyViewExceptionEnumUnderConstruction    ViewsFromUnitValleyViewExceptionEnum = "UNDER_CONSTRUCTION"
	ViewsFromUnitValleyViewExceptionEnumDependentOnSeason    ViewsFromUnitValleyViewExceptionEnum = "DEPENDENT_ON_SEASON"
	ViewsFromUnitValleyViewExceptionEnumDependentOnDayOfWeek ViewsFromUnitValleyViewExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ViewsFromUnitValleyViewExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ViewsFromUnitValleyViewExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewsFromUnitValleyViewExceptionEnum: %s", s)
	}
}

// ViewsFromUnit - Views available from the guest unit itself.
type ViewsFromUnit struct {
	// Beach view. A guestroom that features a window through which guests can see the beach.
	BeachView *bool `json:"beachView,omitempty"`
	// Beach view exception.
	BeachViewException *ViewsFromUnitBeachViewExceptionEnum `json:"beachViewException,omitempty"`
	// City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
	CityView *bool `json:"cityView,omitempty"`
	// City view exception.
	CityViewException *ViewsFromUnitCityViewExceptionEnum `json:"cityViewException,omitempty"`
	// Garden view. A guestroom that features a window through which guests can see a garden.
	GardenView *bool `json:"gardenView,omitempty"`
	// Garden view exception.
	GardenViewException *ViewsFromUnitGardenViewExceptionEnum `json:"gardenViewException,omitempty"`
	// Lake view.
	LakeView *bool `json:"lakeView,omitempty"`
	// Lake view exception.
	LakeViewException *ViewsFromUnitLakeViewExceptionEnum `json:"lakeViewException,omitempty"`
	// Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
	LandmarkView *bool `json:"landmarkView,omitempty"`
	// Landmark view exception.
	LandmarkViewException *ViewsFromUnitLandmarkViewExceptionEnum `json:"landmarkViewException,omitempty"`
	// Ocean view. A guestroom that features a window through which guests can see the ocean.
	OceanView *bool `json:"oceanView,omitempty"`
	// Ocean view exception.
	OceanViewException *ViewsFromUnitOceanViewExceptionEnum `json:"oceanViewException,omitempty"`
	// Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.
	PoolView *bool `json:"poolView,omitempty"`
	// Pool view exception.
	PoolViewException *ViewsFromUnitPoolViewExceptionEnum `json:"poolViewException,omitempty"`
	// Valley view. A guestroom that features a window through which guests can see over a valley.
	ValleyView *bool `json:"valleyView,omitempty"`
	// Valley view exception.
	ValleyViewException *ViewsFromUnitValleyViewExceptionEnum `json:"valleyViewException,omitempty"`
}
