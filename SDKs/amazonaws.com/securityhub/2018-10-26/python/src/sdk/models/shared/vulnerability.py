"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cvss as shared_cvss
from ..shared import softwarepackage as shared_softwarepackage
from ..shared import vulnerabilityfixavailable_enum as shared_vulnerabilityfixavailable_enum
from ..shared import vulnerabilityvendor as shared_vulnerabilityvendor
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Vulnerability:
    r"""A vulnerability associated with a finding."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    cvss: Optional[list[shared_cvss.Cvss]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cvss'), 'exclude': lambda f: f is None }})  
    fix_available: Optional[shared_vulnerabilityfixavailable_enum.VulnerabilityFixAvailableEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixAvailable'), 'exclude': lambda f: f is None }})  
    reference_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceUrls'), 'exclude': lambda f: f is None }})  
    related_vulnerabilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelatedVulnerabilities'), 'exclude': lambda f: f is None }})  
    vendor: Optional[shared_vulnerabilityvendor.VulnerabilityVendor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Vendor'), 'exclude': lambda f: f is None }})  
    vulnerable_packages: Optional[list[shared_softwarepackage.SoftwarePackage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VulnerablePackages'), 'exclude': lambda f: f is None }})  
    