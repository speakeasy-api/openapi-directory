/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ProxyCreateRefund - Container for custom fields of a Refund object.
 * 
 */
public class ProxyCreateRefund {
    /**
     *  The ID of the account associated with this refund. This field is only required if you create a non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment.
     * **Character limit**: 32 **Values**: a valid account ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyCreateRefund withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice,\u00a0you can create a partial refund by specifying an amount in this field or through the UI. If the payment was applied\u00a0to multiple invoices, you can create a partial refund by using the `RefundInvoicePaymentData`\u00a0field of this operation or through the UI.
     * **Character limit**: 16 **Values**: a valid currency amount 
     */
    @JsonProperty("Amount")
    public Double amount;
    public ProxyCreateRefund withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     *  Use this field to record comments about the refund.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;
    public ProxyCreateRefund withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.
     * 
     * For each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayOptionData")
    public ProxyCreateRefundGatewayOptionData gatewayOptionData;
    public ProxyCreateRefund withGatewayOptionData(ProxyCreateRefundGatewayOptionData gatewayOptionData) {
        this.gatewayOptionData = gatewayOptionData;
        return this;
    }
    
    /**
     *  The status of the payment in the gateway.
     * **Character limit**: 19 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayState")
    public String gatewayState;
    public ProxyCreateRefund withGatewayState(String gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyCreateRefund withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyCreateRefund withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  Indicates how an external refund was issued to a customer. This field is only required if the `Type` field is set to ` External`. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:
     * 
     * - `ACH`
     * - `Cash`
     * - `Check`
     * - `CreditCard`
     * - `Other`
     * - `PayPal`
     * - `WireTransfer`
     * - `DebitCard`
     * - `CreditCardReferenceTransaction`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MethodType")
    public String methodType;
    public ProxyCreateRefund withMethodType(String methodType) {
        this.methodType = methodType;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public ProxyCreateRefund withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     *  The unique ID of the payment associated with this refund. Don't specify a value for this field if you're creating an electronic non-referenced refund.
     * **Character limit**: 32 **Values**: a valid payment ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentId")
    public String paymentId;
    public ProxyCreateRefund withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     *  The unique ID of the payment method that the customer used to make the payment. This field is only required if you create a non-referenced refund.
     * **Character limit**: 32 **V****alues**: a valid payment method ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodId")
    public String paymentMethodId;
    public ProxyCreateRefund withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * **Character limit**: 32 **V****alues**: a valid reason code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReasonCode")
    public String reasonCode;
    public ProxyCreateRefund withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     * The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. This field is only required if the `Type` field is set to ` External`. Zuora automatically generates this field for electronic refunds.
     * 
     * With the Future Dated Credit Balance Adjustment feature enabled, you can create a non-referenced refund with a refund date. 
     * * For external refunds, you can specify any date.
     * * For electronic refunds, you can only set the date to the date when the API operation is called or one day later.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("RefundDate")
    public LocalDate refundDate;
    public ProxyCreateRefund withRefundDate(LocalDate refundDate) {
        this.refundDate = refundDate;
        return this;
    }
    
    /**
     * Container for the refund invoice payment data. This field is only required if you apply a full or partical refund against a payment attached to muliple invoices.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RefundInvoicePaymentData")
    public ProxyCreateRefundRefundInvoicePaymentData refundInvoicePaymentData;
    public ProxyCreateRefund withRefundInvoicePaymentData(ProxyCreateRefundRefundInvoicePaymentData refundInvoicePaymentData) {
        this.refundInvoicePaymentData = refundInvoicePaymentData;
        return this;
    }
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:
     * 
     * - 3-byte company identifier &amp;quot;*&amp;quot; 18-byte descriptor
     * - 7-byte company identifier &amp;quot;*&amp;quot; 14-byte descriptor
     * - 12-byte company identifier &amp;quot;*&amp;quot; 9-byte descriptor
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptor")
    public String softDescriptor;
    public ProxyCreateRefund withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:
     * 
     * - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`
     * - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate
     * - Email address
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptorPhone")
    public String softDescriptorPhone;
    public ProxyCreateRefund withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     *  Specifies whether the refund is a refund payment or a credit balance. This field is only required if you create a non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.
     * **Note**: If you have the Invoice Settlement feature enabled, the value of this field can only be set to `Payment`.
     * **Character limit**: 13 **Values**:
     * 
     * - `Payment`
     * - `CreditBalance`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceType")
    public String sourceType;
    public ProxyCreateRefund withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     * Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyCreateRefund withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public String synctoNetSuiteNS;
    public ProxyCreateRefund withSynctoNetSuiteNS(String synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     *  Specifies if the refund is electronic or external.
     * **Character limit**: 10 **Values**:
     * 
     * - `Electronic`
     * - `External`
     * 
     */
    @JsonProperty("Type")
    public String type;
    public ProxyCreateRefund withType(String type) {
        this.type = type;
        return this;
    }
    
}
