"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import datasourcepackageingeststate_enum as shared_datasourcepackageingeststate_enum
from ..shared import datasourcepackageusageinfo as shared_datasourcepackageusageinfo
from ..shared import invitationtype_enum as shared_invitationtype_enum
from ..shared import memberdisabledreason_enum as shared_memberdisabledreason_enum
from ..shared import memberstatus_enum as shared_memberstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberDetail:
    r"""Details about a member account in a behavior graph."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})  
    administrator_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdministratorId'), 'exclude': lambda f: f is None }})  
    datasource_package_ingest_states: Optional[dict[str, shared_datasourcepackageingeststate_enum.DatasourcePackageIngestStateEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasourcePackageIngestStates'), 'exclude': lambda f: f is None }})  
    disabled_reason: Optional[shared_memberdisabledreason_enum.MemberDisabledReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisabledReason'), 'exclude': lambda f: f is None }})  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailAddress'), 'exclude': lambda f: f is None }})  
    graph_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GraphArn'), 'exclude': lambda f: f is None }})  
    invitation_type: Optional[shared_invitationtype_enum.InvitationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvitationType'), 'exclude': lambda f: f is None }})  
    invited_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvitedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    master_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterId'), 'exclude': lambda f: f is None }})  
    percent_of_graph_utilization: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PercentOfGraphUtilization'), 'exclude': lambda f: f is None }})  
    percent_of_graph_utilization_updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PercentOfGraphUtilizationUpdatedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_memberstatus_enum.MemberStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    volume_usage_by_datasource_package: Optional[dict[str, shared_datasourcepackageusageinfo.DatasourcePackageUsageInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeUsageByDatasourcePackage'), 'exclude': lambda f: f is None }})  
    volume_usage_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeUsageInBytes'), 'exclude': lambda f: f is None }})  
    volume_usage_updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeUsageUpdatedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    