// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// BehaviorCountryEnum - Document country
type BehaviorCountryEnum string

const (
	BehaviorCountryEnumCo BehaviorCountryEnum = "co"
	BehaviorCountryEnumVe BehaviorCountryEnum = "ve"
	BehaviorCountryEnumCl BehaviorCountryEnum = "cl"
	BehaviorCountryEnumMx BehaviorCountryEnum = "mx"
	BehaviorCountryEnumPe BehaviorCountryEnum = "pe"
	BehaviorCountryEnumDo BehaviorCountryEnum = "do"
	BehaviorCountryEnumSv BehaviorCountryEnum = "sv"
	BehaviorCountryEnumGt BehaviorCountryEnum = "gt"
	BehaviorCountryEnumBo BehaviorCountryEnum = "bo"
	BehaviorCountryEnumCr BehaviorCountryEnum = "cr"
	BehaviorCountryEnumEc BehaviorCountryEnum = "ec"
	BehaviorCountryEnumPa BehaviorCountryEnum = "pa"
	BehaviorCountryEnumBr BehaviorCountryEnum = "br"
)

func (e BehaviorCountryEnum) ToPointer() *BehaviorCountryEnum {
	return &e
}

func (e *BehaviorCountryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "co":
		fallthrough
	case "ve":
		fallthrough
	case "cl":
		fallthrough
	case "mx":
		fallthrough
	case "pe":
		fallthrough
	case "do":
		fallthrough
	case "sv":
		fallthrough
	case "gt":
		fallthrough
	case "bo":
		fallthrough
	case "cr":
		fallthrough
	case "ec":
		fallthrough
	case "pa":
		fallthrough
	case "br":
		*e = BehaviorCountryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BehaviorCountryEnum: %v", v)
	}
}

// BehaviorDocumentTypeEnum - Document type associated with the background check
type BehaviorDocumentTypeEnum string

const (
	BehaviorDocumentTypeEnumNationalID             BehaviorDocumentTypeEnum = "national-id"
	BehaviorDocumentTypeEnumPassport               BehaviorDocumentTypeEnum = "passport"
	BehaviorDocumentTypeEnumForeignID              BehaviorDocumentTypeEnum = "foreign-id"
	BehaviorDocumentTypeEnumNit                    BehaviorDocumentTypeEnum = "nit"
	BehaviorDocumentTypeEnumDiplomaticID           BehaviorDocumentTypeEnum = "diplomatic-id"
	BehaviorDocumentTypeEnumCivilRegistration      BehaviorDocumentTypeEnum = "civil-registration"
	BehaviorDocumentTypeEnumIdentityCard           BehaviorDocumentTypeEnum = "identity-card"
	BehaviorDocumentTypeEnumForeignerCard          BehaviorDocumentTypeEnum = "foreigner-card"
	BehaviorDocumentTypeEnumProfessionalCard       BehaviorDocumentTypeEnum = "professional-card"
	BehaviorDocumentTypeEnumMilitaryCard           BehaviorDocumentTypeEnum = "military-card"
	BehaviorDocumentTypeEnumPep                    BehaviorDocumentTypeEnum = "pep"
	BehaviorDocumentTypeEnumNis                    BehaviorDocumentTypeEnum = "nis"
	BehaviorDocumentTypeEnumDni                    BehaviorDocumentTypeEnum = "dni"
	BehaviorDocumentTypeEnumRui                    BehaviorDocumentTypeEnum = "rui"
	BehaviorDocumentTypeEnumLicensePlate           BehaviorDocumentTypeEnum = "license-plate"
	BehaviorDocumentTypeEnumQuery                  BehaviorDocumentTypeEnum = "query"
	BehaviorDocumentTypeEnumName                   BehaviorDocumentTypeEnum = "name"
	BehaviorDocumentTypeEnumRut                    BehaviorDocumentTypeEnum = "rut"
	BehaviorDocumentTypeEnumNuip                   BehaviorDocumentTypeEnum = "nuip"
	BehaviorDocumentTypeEnumForeignSocieties       BehaviorDocumentTypeEnum = "foreign-societies"
	BehaviorDocumentTypeEnumEscrow                 BehaviorDocumentTypeEnum = "escrow"
	BehaviorDocumentTypeEnumIndividualRegistration BehaviorDocumentTypeEnum = "individual-registration"
	BehaviorDocumentTypeEnumGeneralRegistration    BehaviorDocumentTypeEnum = "general-registration"
	BehaviorDocumentTypeEnumCurp                   BehaviorDocumentTypeEnum = "curp"
	BehaviorDocumentTypeEnumDui                    BehaviorDocumentTypeEnum = "dui"
	BehaviorDocumentTypeEnumDriverLicense          BehaviorDocumentTypeEnum = "driver-license"
	BehaviorDocumentTypeEnumRuc                    BehaviorDocumentTypeEnum = "ruc"
)

func (e BehaviorDocumentTypeEnum) ToPointer() *BehaviorDocumentTypeEnum {
	return &e
}

func (e *BehaviorDocumentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "national-id":
		fallthrough
	case "passport":
		fallthrough
	case "foreign-id":
		fallthrough
	case "nit":
		fallthrough
	case "diplomatic-id":
		fallthrough
	case "civil-registration":
		fallthrough
	case "identity-card":
		fallthrough
	case "foreigner-card":
		fallthrough
	case "professional-card":
		fallthrough
	case "military-card":
		fallthrough
	case "pep":
		fallthrough
	case "nis":
		fallthrough
	case "dni":
		fallthrough
	case "rui":
		fallthrough
	case "license-plate":
		fallthrough
	case "query":
		fallthrough
	case "name":
		fallthrough
	case "rut":
		fallthrough
	case "nuip":
		fallthrough
	case "foreign-societies":
		fallthrough
	case "escrow":
		fallthrough
	case "individual-registration":
		fallthrough
	case "general-registration":
		fallthrough
	case "curp":
		fallthrough
	case "dui":
		fallthrough
	case "driver-license":
		fallthrough
	case "ruc":
		*e = BehaviorDocumentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BehaviorDocumentTypeEnum: %v", v)
	}
}

// Behavior - Represents behaviour reports
type Behavior struct {
	// Birth date of reported person
	BirthDate types.Date `json:"birth_date"`
	// Document country
	Country BehaviorCountryEnum `json:"country"`
	// Feedback creation date
	CreationDate *time.Time `json:"creation_date,omitempty"`
	// Person document ID
	DocumentID string `json:"document_id"`
	// Document type associated with the background check
	DocumentType BehaviorDocumentTypeEnum `json:"document_type"`
	// Reported person e-mail
	Email string `json:"email"`
	// Behavior report date
	FeedbackDate types.Date `json:"feedback_date"`
	// Person first name
	FirstName string `json:"first_name"`
	// Person last name
	LastName string `json:"last_name"`
	// Phone number of the reported person
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Report reason
	Reason string `json:"reason"`
}
