/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expr } from "./expr";
import { GoogleCloudAssetV1StringValues } from "./googlecloudassetv1stringvalues";
import { Expose, Type } from "class-transformer";

/**
 * Represents a rule defined in an organization policy
 */
export class GoogleCloudAssetV1Rule extends SpeakeasyBase {
  /**
   * Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowAll" })
  allowAll?: boolean;

  /**
   * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "condition" })
  @Type(() => Expr)
  condition?: Expr;

  /**
   * Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "denyAll" })
  denyAll?: boolean;

  /**
   * If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforce" })
  enforce?: boolean;

  /**
   * The string values for the list constraints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "values" })
  @Type(() => GoogleCloudAssetV1StringValues)
  values?: GoogleCloudAssetV1StringValues;
}
