"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrainingJobStatusCounters:
    r"""The numbers of training jobs launched by a hyperparameter tuning job, categorized by status."""
    
    completed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Completed'), 'exclude': lambda f: f is None }})  
    in_progress: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InProgress'), 'exclude': lambda f: f is None }})  
    non_retryable_error: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonRetryableError'), 'exclude': lambda f: f is None }})  
    retryable_error: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryableError'), 'exclude': lambda f: f is None }})  
    stopped: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stopped'), 'exclude': lambda f: f is None }})  
    