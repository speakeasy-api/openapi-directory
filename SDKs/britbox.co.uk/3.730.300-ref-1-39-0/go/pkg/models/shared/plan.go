// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlanBillingPeriodTypeEnum - The type of billing period used.
type PlanBillingPeriodTypeEnum string

const (
	PlanBillingPeriodTypeEnumDay   PlanBillingPeriodTypeEnum = "day"
	PlanBillingPeriodTypeEnumWeek  PlanBillingPeriodTypeEnum = "week"
	PlanBillingPeriodTypeEnumMonth PlanBillingPeriodTypeEnum = "month"
	PlanBillingPeriodTypeEnumYear  PlanBillingPeriodTypeEnum = "year"
	PlanBillingPeriodTypeEnumNone  PlanBillingPeriodTypeEnum = "none"
)

func (e PlanBillingPeriodTypeEnum) ToPointer() *PlanBillingPeriodTypeEnum {
	return &e
}

func (e *PlanBillingPeriodTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "year":
		fallthrough
	case "none":
		*e = PlanBillingPeriodTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlanBillingPeriodTypeEnum: %v", v)
	}
}

// PlanRevenueTypeEnum - The revenue type a plan targets.
type PlanRevenueTypeEnum string

const (
	PlanRevenueTypeEnumTvod PlanRevenueTypeEnum = "TVOD"
	PlanRevenueTypeEnumSvod PlanRevenueTypeEnum = "SVOD"
)

func (e PlanRevenueTypeEnum) ToPointer() *PlanRevenueTypeEnum {
	return &e
}

func (e *PlanRevenueTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TVOD":
		fallthrough
	case "SVOD":
		*e = PlanRevenueTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlanRevenueTypeEnum: %v", v)
	}
}

// PlanTypeEnum - The type of plan.
type PlanTypeEnum string

const (
	PlanTypeEnumFree         PlanTypeEnum = "Free"
	PlanTypeEnumSubscription PlanTypeEnum = "Subscription"
)

func (e PlanTypeEnum) ToPointer() *PlanTypeEnum {
	return &e
}

func (e *PlanTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Free":
		fallthrough
	case "Subscription":
		*e = PlanTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlanTypeEnum: %v", v)
	}
}

// Plan - The Plan requested.
type Plan struct {
	// An alias for a plan.
	Alias string `json:"alias"`
	// The list of benefits to display for a plan.
	Benefits []string `json:"benefits"`
	// Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.
	BillingPeriodFrequency int `json:"billingPeriodFrequency"`
	// The type of billing period used.
	BillingPeriodType PlanBillingPeriodTypeEnum `json:"billingPeriodType"`
	// The currency a plan is offered in.
	Currency string `json:"currency"`
	// A map of custom fields defined by a curator for a plan.
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// True if a plan has a trial period, false if not.
	HasTrialPeriod bool `json:"hasTrialPeriod"`
	// The identifier of a plan.
	ID string `json:"id"`
	// True if a plan is active, false if its retired.
	IsActive bool `json:"isActive"`
	// True if a plan should be highlighted as featured, false if not.
	IsFeatured bool `json:"isFeatured"`
	// True if a plan should not be presented in the primary plan options, false if not.
	IsPrivate bool `json:"isPrivate"`
	// The price of a plan. If a free plan then undefined.
	Price *float32 `json:"price,omitempty"`
	// The revenue type a plan targets.
	RevenueType PlanRevenueTypeEnum `json:"revenueType"`
	// The subscription code a plan targets.
	SubscriptionCode string `json:"subscriptionCode"`
	// The short tagline for a plan.
	Tagline string `json:"tagline"`
	// The terms and conditions for a plan.
	TermsAndConditions string `json:"termsAndConditions"`
	// The title of a plan.
	Title string `json:"title"`
	// How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
	TrialPeriodDays int `json:"trialPeriodDays"`
	// The type of plan.
	Type PlanTypeEnum `json:"type"`
}
