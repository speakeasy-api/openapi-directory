// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum - The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnumCustomAccessPolicy UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum = "Custom access policy"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnumMacAllowList       UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum = "MAC allow list"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnumOpen               UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum = "Open"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnumStickyMacAllowList UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum = "Sticky MAC allow list"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Custom access policy":
		fallthrough
	case "MAC allow list":
		fallthrough
	case "Open":
		fallthrough
	case "Sticky MAC allow list":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyProfile - Profile attributes
type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyProfile struct {
	// When enabled, override this port's configuration with a port profile.
	Enabled *bool `json:"enabled,omitempty"`
	// When enabled, the ID of the port profile used to override the port's configuration.
	ID *string `json:"id,omitempty"`
	// When enabled, the IName of the profile.
	Iname *string `json:"iname,omitempty"`
}

// UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum - The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnumBpduGuard UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum = "bpdu guard"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnumDisabled  UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum = "disabled"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnumLoopGuard UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum = "loop guard"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnumRootGuard UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum = "root guard"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bpdu guard":
		fallthrough
	case "disabled":
		fallthrough
	case "loop guard":
		fallthrough
	case "root guard":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum - The type of the switch profile port ('trunk' or 'access').
type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnumAccess UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum = "access"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnumTrunk  UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum = "trunk"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "trunk":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum - The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnumAlertOnly UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum = "Alert only"
	UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnumEnforce   UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum = "Enforce"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Alert only":
		fallthrough
	case "Enforce":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum: %s", s)
	}
}

type UpdateOrganizationConfigTemplateSwitchProfilePortRequestBody struct {
	// The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int64 `json:"accessPolicyNumber,omitempty"`
	// The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyAccessPolicyTypeEnum `json:"accessPolicyType,omitempty"`
	// The VLANs allowed on the switch profile port. Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `json:"daiTrusted,omitempty"`
	// The status of the switch profile port.
	Enabled *bool `json:"enabled,omitempty"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `json:"flexibleStackingEnabled,omitempty"`
	// The isolation status of the switch profile port.
	IsolationEnabled *bool `json:"isolationEnabled,omitempty"`
	// The link speed for the switch profile port.
	LinkNegotiation *string `json:"linkNegotiation,omitempty"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowList []string `json:"macAllowList,omitempty"`
	// The name of the switch profile port.
	Name *string `json:"name,omitempty"`
	// The PoE status of the switch profile port.
	PoeEnabled *bool `json:"poeEnabled,omitempty"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID *string `json:"portScheduleId,omitempty"`
	// Profile attributes
	Profile *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyProfile `json:"profile,omitempty"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `json:"rstpEnabled,omitempty"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList,omitempty"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int64 `json:"stickyMacAllowListLimit,omitempty"`
	// The storm control status of the switch profile port.
	StormControlEnabled *bool `json:"stormControlEnabled,omitempty"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyStpGuardEnum `json:"stpGuard,omitempty"`
	// The list of tags of the switch profile port.
	Tags []string `json:"tags,omitempty"`
	// The type of the switch profile port ('trunk' or 'access').
	Type *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyTypeEnum `json:"type,omitempty"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBodyUdldEnum `json:"udld,omitempty"`
	// The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the switch profile port. Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

type UpdateOrganizationConfigTemplateSwitchProfilePortRequest struct {
	RequestBody      *UpdateOrganizationConfigTemplateSwitchProfilePortRequestBody `request:"mediaType=application/json"`
	ConfigTemplateID string                                                        `pathParam:"style=simple,explode=false,name=configTemplateId"`
	OrganizationID   string                                                        `pathParam:"style=simple,explode=false,name=organizationId"`
	PortID           string                                                        `pathParam:"style=simple,explode=false,name=portId"`
	ProfileID        string                                                        `pathParam:"style=simple,explode=false,name=profileId"`
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum - The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnumCustomAccessPolicy UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum = "Custom access policy"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnumMacAllowList       UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum = "MAC allow list"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnumOpen               UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum = "Open"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnumStickyMacAllowList UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum = "Sticky MAC allow list"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Custom access policy":
		fallthrough
	case "MAC allow list":
		fallthrough
	case "Open":
		fallthrough
	case "Sticky MAC allow list":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONProfile - Profile attributes
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONProfile struct {
	// When enabled, override this port's configuration with a port profile.
	Enabled *bool `json:"enabled,omitempty"`
	// When enabled, the ID of the port profile used to override the port's configuration.
	ID *string `json:"id,omitempty"`
	// When enabled, the IName of the profile.
	Iname *string `json:"iname,omitempty"`
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum - The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnumBpduGuard UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum = "bpdu guard"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnumDisabled  UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum = "disabled"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnumLoopGuard UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum = "loop guard"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnumRootGuard UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum = "root guard"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bpdu guard":
		fallthrough
	case "disabled":
		fallthrough
	case "loop guard":
		fallthrough
	case "root guard":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum - The type of the switch profile port ('trunk' or 'access').
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnumAccess UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum = "access"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnumTrunk  UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum = "trunk"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "trunk":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum - The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum string

const (
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnumAlertOnly UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum = "Alert only"
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnumEnforce   UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum = "Enforce"
)

func (e *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Alert only":
		fallthrough
	case "Enforce":
		*e = UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum: %s", s)
	}
}

// UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON - Successful operation
type UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON struct {
	// The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int64 `json:"accessPolicyNumber,omitempty"`
	// The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONAccessPolicyTypeEnum `json:"accessPolicyType,omitempty"`
	// The VLANs allowed on the switch profile port. Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `json:"daiTrusted,omitempty"`
	// The status of the switch profile port.
	Enabled *bool `json:"enabled,omitempty"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `json:"flexibleStackingEnabled,omitempty"`
	// The isolation status of the switch profile port.
	IsolationEnabled *bool `json:"isolationEnabled,omitempty"`
	// The link speed for the switch profile port.
	LinkNegotiation *string `json:"linkNegotiation,omitempty"`
	// Available link speeds for the switch profile port.
	LinkNegotiationCapabilities []string `json:"linkNegotiationCapabilities,omitempty"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowList []string `json:"macAllowList,omitempty"`
	// The name of the switch profile port.
	Name *string `json:"name,omitempty"`
	// The PoE status of the switch profile port.
	PoeEnabled *bool `json:"poeEnabled,omitempty"`
	// The identifier of the switch profile port.
	PortID *string `json:"portId,omitempty"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID *string `json:"portScheduleId,omitempty"`
	// Profile attributes
	Profile *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONProfile `json:"profile,omitempty"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `json:"rstpEnabled,omitempty"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList,omitempty"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int64 `json:"stickyMacAllowListLimit,omitempty"`
	// The storm control status of the switch profile port.
	StormControlEnabled *bool `json:"stormControlEnabled,omitempty"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONStpGuardEnum `json:"stpGuard,omitempty"`
	// The list of tags of the switch profile port.
	Tags []string `json:"tags,omitempty"`
	// The type of the switch profile port ('trunk' or 'access').
	Type *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONTypeEnum `json:"type,omitempty"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONUdldEnum `json:"udld,omitempty"`
	// The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the switch profile port. Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

type UpdateOrganizationConfigTemplateSwitchProfilePortResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject *UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON
}
