"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GiftCardActivities:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_gift_card_activity(self, request: shared.CreateGiftCardActivityRequest, security: operations.CreateGiftCardActivitySecurity) -> operations.CreateGiftCardActivityResponse:
        r"""CreateGiftCardActivity
        Creates a gift card activity. For more information, see 
        [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and 
        [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards/activities'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGiftCardActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateGiftCardActivityResponse])
                res.create_gift_card_activity_response = out

        return res

    def list_gift_card_activities(self, request: operations.ListGiftCardActivitiesRequest, security: operations.ListGiftCardActivitiesSecurity) -> operations.ListGiftCardActivitiesResponse:
        r"""ListGiftCardActivities
        Lists gift card activities. By default, you get gift card activities for all
        gift cards in the seller's account. You can optionally specify query parameters to
        filter the list. For example, you can get a list of gift card activities for a gift card,
        for all gift cards in a specific region, or for activities within a time window.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards/activities'
        
        query_params = utils.get_query_params(operations.ListGiftCardActivitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGiftCardActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGiftCardActivitiesResponse])
                res.list_gift_card_activities_response = out

        return res

    