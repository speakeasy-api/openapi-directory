/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CryptoKeyInput - A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.
 */
public class CryptoKeyInput {
    /**
     * Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/* /locations/* /ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cryptoKeyBackend")
    public String cryptoKeyBackend;

    public CryptoKeyInput withCryptoKeyBackend(String cryptoKeyBackend) {
        this.cryptoKeyBackend = cryptoKeyBackend;
        return this;
    }
    
    /**
     * Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destroyScheduledDuration")
    public String destroyScheduledDuration;

    public CryptoKeyInput withDestroyScheduledDuration(String destroyScheduledDuration) {
        this.destroyScheduledDuration = destroyScheduledDuration;
        return this;
    }
    
    /**
     * Immutable. Whether this key may contain imported versions only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importOnly")
    public Boolean importOnly;

    public CryptoKeyInput withImportOnly(Boolean importOnly) {
        this.importOnly = importOnly;
        return this;
    }
    
    /**
     * Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public CryptoKeyInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextRotationTime")
    public String nextRotationTime;

    public CryptoKeyInput withNextRotationTime(String nextRotationTime) {
        this.nextRotationTime = nextRotationTime;
        return this;
    }
    
    /**
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary")
    public CryptoKeyVersionInput primary;

    public CryptoKeyInput withPrimary(CryptoKeyVersionInput primary) {
        this.primary = primary;
        return this;
    }
    
    /**
     * Immutable. The immutable purpose of this CryptoKey.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose")
    public CryptoKeyPurposeEnum purpose;

    public CryptoKeyInput withPurpose(CryptoKeyPurposeEnum purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotationPeriod")
    public String rotationPeriod;

    public CryptoKeyInput withRotationPeriod(String rotationPeriod) {
        this.rotationPeriod = rotationPeriod;
        return this;
    }
    
    /**
     * A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versionTemplate")
    public CryptoKeyVersionTemplate versionTemplate;

    public CryptoKeyInput withVersionTemplate(CryptoKeyVersionTemplate versionTemplate) {
        this.versionTemplate = versionTemplate;
        return this;
    }
    
    public CryptoKeyInput(){}
}
