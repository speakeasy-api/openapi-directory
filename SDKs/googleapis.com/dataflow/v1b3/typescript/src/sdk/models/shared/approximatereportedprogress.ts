/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Position } from "./position";
import { ReportedParallelism } from "./reportedparallelism";
import { Expose, Type } from "class-transformer";

/**
 * A progress measurement of a WorkItem by a worker.
 */
export class ApproximateReportedProgress extends SpeakeasyBase {
  /**
   * Represents the level of parallelism in a WorkItem's input, reported by the worker.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consumedParallelism" })
  @Type(() => ReportedParallelism)
  consumedParallelism?: ReportedParallelism;

  /**
   * Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fractionConsumed" })
  fractionConsumed?: number;

  /**
   * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  @Type(() => Position)
  position?: Position;

  /**
   * Represents the level of parallelism in a WorkItem's input, reported by the worker.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remainingParallelism" })
  @Type(() => ReportedParallelism)
  remainingParallelism?: ReportedParallelism;
}
