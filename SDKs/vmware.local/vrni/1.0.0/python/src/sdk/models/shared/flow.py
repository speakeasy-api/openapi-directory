"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitytype_enum as shared_entitytype_enum
from ..shared import firewallaction_enum as shared_firewallaction_enum
from ..shared import flowtag_enum as shared_flowtag_enum
from ..shared import flowtraffictype_enum as shared_flowtraffictype_enum
from ..shared import ipv4address as shared_ipv4address
from ..shared import portrange as shared_portrange
from ..shared import protocol_enum as shared_protocol_enum
from ..shared import reference as shared_reference
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Flow:
    r"""OK"""
    
    destination_cluster: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_cluster'), 'exclude': lambda f: f is None }})  
    destination_datacenter: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_datacenter'), 'exclude': lambda f: f is None }})  
    destination_folders: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_folders'), 'exclude': lambda f: f is None }})  
    destination_host: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_host'), 'exclude': lambda f: f is None }})  
    destination_ip: Optional[shared_ipv4address.IPV4Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_ip'), 'exclude': lambda f: f is None }})  
    destination_ip_sets: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_ip_sets'), 'exclude': lambda f: f is None }})  
    destination_l2_network: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_l2_network'), 'exclude': lambda f: f is None }})  
    destination_resource_pool: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_resource_pool'), 'exclude': lambda f: f is None }})  
    destination_security_groups: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_security_groups'), 'exclude': lambda f: f is None }})  
    destination_security_tags: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_security_tags'), 'exclude': lambda f: f is None }})  
    destination_vm: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_vm'), 'exclude': lambda f: f is None }})  
    destination_vm_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_vm_tags'), 'exclude': lambda f: f is None }})  
    destination_vnic: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_vnic'), 'exclude': lambda f: f is None }})  
    destination_vpc: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_vpc'), 'exclude': lambda f: f is None }})  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_id'), 'exclude': lambda f: f is None }})  
    entity_type: Optional[shared_entitytype_enum.EntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type'), 'exclude': lambda f: f is None }})  
    firewall_action: Optional[shared_firewallaction_enum.FirewallActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewall_action'), 'exclude': lambda f: f is None }})  
    flow_tag: Optional[list[shared_flowtag_enum.FlowTagEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flow_tag'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    port: Optional[shared_portrange.PortRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})  
    protocol: Optional[shared_protocol_enum.ProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})  
    source_cluster: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_cluster'), 'exclude': lambda f: f is None }})  
    source_datacenter: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_datacenter'), 'exclude': lambda f: f is None }})  
    source_folders: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_folders'), 'exclude': lambda f: f is None }})  
    source_host: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_host'), 'exclude': lambda f: f is None }})  
    source_ip: Optional[shared_ipv4address.IPV4Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ip'), 'exclude': lambda f: f is None }})  
    source_ip_sets: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ip_sets'), 'exclude': lambda f: f is None }})  
    source_l2_network: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_l2_network'), 'exclude': lambda f: f is None }})  
    source_resource_pool: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_resource_pool'), 'exclude': lambda f: f is None }})  
    source_security_groups: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_security_groups'), 'exclude': lambda f: f is None }})  
    source_security_tags: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_security_tags'), 'exclude': lambda f: f is None }})  
    source_vm: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_vm'), 'exclude': lambda f: f is None }})  
    source_vm_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_vm_tags'), 'exclude': lambda f: f is None }})  
    source_vnic: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_vnic'), 'exclude': lambda f: f is None }})  
    source_vpc: Optional[shared_reference.Reference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_vpc'), 'exclude': lambda f: f is None }})  
    traffic_type: Optional[shared_flowtraffictype_enum.FlowTrafficTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traffic_type'), 'exclude': lambda f: f is None }})  
    within_host: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('within_host'), 'exclude': lambda f: f is None }})  
    