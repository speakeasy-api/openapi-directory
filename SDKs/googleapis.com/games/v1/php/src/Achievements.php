<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Achievements 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Increments the steps of the achievement with the given ID for the currently authenticated player.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementResponse
     */
	public function gamesAchievementsIncrement(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/achievements/{achievementId}/increment', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsIncrementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementIncrementResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementIncrementResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the progress for all your application's achievements for the currently authenticated player.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListResponse
     */
	public function gamesAchievementsList(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/{playerId}/achievements', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerAchievementListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerAchievementListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealResponse
     */
	public function gamesAchievementsReveal(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/achievements/{achievementId}/reveal', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsRevealResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementRevealResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementRevealResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastResponse
     */
	public function gamesAchievementsSetStepsAtLeast(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/achievements/{achievementId}/setStepsAtLeast', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsSetStepsAtLeastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementSetStepsAtLeastResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementSetStepsAtLeastResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unlocks this achievement for the currently authenticated player.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockResponse
     */
	public function gamesAchievementsUnlock(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/achievements/{achievementId}/unlock', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUnlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementUnlockResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementUnlockResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates multiple achievements for the currently authenticated player.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleResponse
     */
	public function gamesAchievementsUpdateMultiple(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/achievements/updateMultiple');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "achievementUpdateMultipleRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsUpdateMultipleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementUpdateMultipleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementUpdateMultipleResponse', 'json');
            }
        }

        return $response;
    }
}