/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * OBWriteInternationalScheduled3DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
 */
public class OBWriteInternationalScheduled3DataInitiation {
    /**
     * Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeBearer")
    public OBChargeBearerType1CodeEnum chargeBearer;

    public OBWriteInternationalScheduled3DataInitiation withChargeBearer(OBChargeBearerType1CodeEnum chargeBearer) {
        this.chargeBearer = chargeBearer;
        return this;
    }
    
    /**
     * Party to which an amount of money is due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Creditor")
    public OBWriteInternationalScheduled3DataInitiationCreditor creditor;

    public OBWriteInternationalScheduled3DataInitiation withCreditor(OBWriteInternationalScheduled3DataInitiationCreditor creditor) {
        this.creditor = creditor;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
     */
    @JsonProperty("CreditorAccount")
    public OBWriteInternationalScheduled3DataInitiationCreditorAccount creditorAccount;

    public OBWriteInternationalScheduled3DataInitiation withCreditorAccount(OBWriteInternationalScheduled3DataInitiationCreditorAccount creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * Financial institution servicing an account for the creditor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditorAgent")
    public OBWriteInternationalScheduled3DataInitiationCreditorAgent creditorAgent;

    public OBWriteInternationalScheduled3DataInitiation withCreditorAgent(OBWriteInternationalScheduled3DataInitiationCreditorAgent creditorAgent) {
        this.creditorAgent = creditorAgent;
        return this;
    }
    
    /**
     * Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
     */
    @JsonProperty("CurrencyOfTransfer")
    public String currencyOfTransfer;

    public OBWriteInternationalScheduled3DataInitiation withCurrencyOfTransfer(String currencyOfTransfer) {
        this.currencyOfTransfer = currencyOfTransfer;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteInternationalScheduled3DataInitiationDebtorAccount debtorAccount;

    public OBWriteInternationalScheduled3DataInitiation withDebtorAccount(OBWriteInternationalScheduled3DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DestinationCountryCode")
    public String destinationCountryCode;

    public OBWriteInternationalScheduled3DataInitiation withDestinationCountryCode(String destinationCountryCode) {
        this.destinationCountryCode = destinationCountryCode;
        return this;
    }
    
    /**
     * Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     * Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
     * OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndToEndIdentification")
    public String endToEndIdentification;

    public OBWriteInternationalScheduled3DataInitiation withEndToEndIdentification(String endToEndIdentification) {
        this.endToEndIdentification = endToEndIdentification;
        return this;
    }
    
    /**
     * Provides details on the currency exchange rate and contract.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExchangeRateInformation")
    public OBWriteInternationalScheduled3DataInitiationExchangeRateInformation exchangeRateInformation;

    public OBWriteInternationalScheduled3DataInitiation withExchangeRateInformation(OBWriteInternationalScheduled3DataInitiationExchangeRateInformation exchangeRateInformation) {
        this.exchangeRateInformation = exchangeRateInformation;
        return this;
    }
    
    /**
     * Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExtendedPurpose")
    public String extendedPurpose;

    public OBWriteInternationalScheduled3DataInitiation withExtendedPurpose(String extendedPurpose) {
        this.extendedPurpose = extendedPurpose;
        return this;
    }
    
    /**
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
     * Usage: This amount has to be transported unchanged through the transaction chain.
     */
    @JsonProperty("InstructedAmount")
    public OBWriteInternationalScheduled3DataInitiationInstructedAmount instructedAmount;

    public OBWriteInternationalScheduled3DataInitiation withInstructedAmount(OBWriteInternationalScheduled3DataInitiationInstructedAmount instructedAmount) {
        this.instructedAmount = instructedAmount;
        return this;
    }
    
    /**
     * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
     * Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
     */
    @JsonProperty("InstructionIdentification")
    public String instructionIdentification;

    public OBWriteInternationalScheduled3DataInitiation withInstructionIdentification(String instructionIdentification) {
        this.instructionIdentification = instructionIdentification;
        return this;
    }
    
    /**
     * Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstructionPriority")
    public OBWriteInternationalScheduled3DataInitiationInstructionPriorityEnum instructionPriority;

    public OBWriteInternationalScheduled3DataInitiation withInstructionPriority(OBWriteInternationalScheduled3DataInitiationInstructionPriorityEnum instructionPriority) {
        this.instructionPriority = instructionPriority;
        return this;
    }
    
    /**
     * User community specific instrument.
     * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LocalInstrument")
    public String localInstrument;

    public OBWriteInternationalScheduled3DataInitiation withLocalInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
        return this;
    }
    
    /**
     * Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
     * The list of valid codes is an external code list published separately.
     * External code sets can be downloaded from www.iso20022.org.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Purpose")
    public String purpose;

    public OBWriteInternationalScheduled3DataInitiation withPurpose(String purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RemittanceInformation")
    public OBWriteInternationalScheduled3DataInitiationRemittanceInformation remittanceInformation;

    public OBWriteInternationalScheduled3DataInitiation withRemittanceInformation(OBWriteInternationalScheduled3DataInitiationRemittanceInformation remittanceInformation) {
        this.remittanceInformation = remittanceInformation;
        return this;
    }
    
    /**
     * Date at which the initiating party requests the clearing agent to process the payment. 
     * Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RequestedExecutionDateTime")
    public OffsetDateTime requestedExecutionDateTime;

    public OBWriteInternationalScheduled3DataInitiation withRequestedExecutionDateTime(OffsetDateTime requestedExecutionDateTime) {
        this.requestedExecutionDateTime = requestedExecutionDateTime;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;

    public OBWriteInternationalScheduled3DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
    public OBWriteInternationalScheduled3DataInitiation(@JsonProperty("CreditorAccount") OBWriteInternationalScheduled3DataInitiationCreditorAccount creditorAccount, @JsonProperty("CurrencyOfTransfer") String currencyOfTransfer, @JsonProperty("InstructedAmount") OBWriteInternationalScheduled3DataInitiationInstructedAmount instructedAmount, @JsonProperty("InstructionIdentification") String instructionIdentification, @JsonProperty("RequestedExecutionDateTime") OffsetDateTime requestedExecutionDateTime) {
        this.creditorAccount = creditorAccount;
        this.currencyOfTransfer = currencyOfTransfer;
        this.instructedAmount = instructedAmount;
        this.instructionIdentification = instructionIdentification;
        this.requestedExecutionDateTime = requestedExecutionDateTime;
  }
}
