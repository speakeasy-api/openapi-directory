// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetInventoryQueryParams struct {
	// The shipNode for which the inventory is requested
	ShipNode *string `queryParam:"style=form,explode=true,name=shipNode"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku string `queryParam:"style=form,explode=true,name=sku"`
}

type GetInventoryHeaders struct {
	// Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
	Authorization string `header:"style=simple,explode=false,name=Authorization"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type GetInventoryRequest struct {
	QueryParams GetInventoryQueryParams
	Headers     GetInventoryHeaders
}

// GetInventory200ApplicationXMLQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type GetInventory200ApplicationXMLQuantityUnitEnum string

const (
	GetInventory200ApplicationXMLQuantityUnitEnumEach GetInventory200ApplicationXMLQuantityUnitEnum = "EACH"
)

func (e *GetInventory200ApplicationXMLQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = GetInventory200ApplicationXMLQuantityUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInventory200ApplicationXMLQuantityUnitEnum: %s", s)
	}
}

type GetInventory200ApplicationXMLQuantity struct {
	// The number available in the inventory
	Amount float64
	// The unit of measurement. Example: 'EACH'
	Unit GetInventory200ApplicationXMLQuantityUnitEnum
}

// GetInventory200ApplicationXML - Successful Operation
type GetInventory200ApplicationXML struct {
	Quantity GetInventory200ApplicationXMLQuantity
	// A seller-provided Product ID. Response will have decoded value.
	Sku string
}

// GetInventory200ApplicationJSONQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type GetInventory200ApplicationJSONQuantityUnitEnum string

const (
	GetInventory200ApplicationJSONQuantityUnitEnumEach GetInventory200ApplicationJSONQuantityUnitEnum = "EACH"
)

func (e *GetInventory200ApplicationJSONQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = GetInventory200ApplicationJSONQuantityUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInventory200ApplicationJSONQuantityUnitEnum: %s", s)
	}
}

type GetInventory200ApplicationJSONQuantity struct {
	// The number available in the inventory
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetInventory200ApplicationJSONQuantityUnitEnum `json:"unit"`
}

// GetInventory200ApplicationJSON - Successful Operation
type GetInventory200ApplicationJSON struct {
	Quantity GetInventory200ApplicationJSONQuantity `json:"quantity"`
	// A seller-provided Product ID. Response will have decoded value.
	Sku string `json:"sku"`
}

type GetInventoryResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	GetInventory200ApplicationJSONObject *GetInventory200ApplicationJSON
}
