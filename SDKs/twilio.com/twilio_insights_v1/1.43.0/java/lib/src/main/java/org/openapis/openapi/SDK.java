/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://insights.twilio.com",
	};
    /**
	 * FETCH_ACCOUNT_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACCOUNT_SETTINGS_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_ANNOTATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ANNOTATION_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_CONFERENCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFERENCE_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_CONFERENCE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFERENCE_PARTICIPANT_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SUMMARY_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * FETCH_VIDEO_ROOM_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VIDEO_ROOM_SUMMARY_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_CALL_SUMMARIES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CALL_SUMMARIES_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_CONFERENCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFERENCE_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_CONFERENCE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFERENCE_PARTICIPANT_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EVENT_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_METRIC_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_METRIC_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * LIST_VIDEO_ROOM_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VIDEO_ROOM_SUMMARY_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * UPDATE_ACCOUNT_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACCOUNT_SETTINGS_SERVERS = {
        "https://insights.twilio.com",
    };
	
    /**
	 * UPDATE_ANNOTATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ANNOTATION_SERVERS = {
        "https://insights.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    public org.openapis.openapi.models.operations.FetchAccountSettingsResponse fetchAccountSettings(org.openapis.openapi.models.operations.FetchAccountSettingsRequest request, org.openapis.openapi.models.operations.FetchAccountSettingsSecurity security) throws Exception {
        return this.fetchAccountSettings(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchAccountSettingsResponse fetchAccountSettings(org.openapis.openapi.models.operations.FetchAccountSettingsRequest request, org.openapis.openapi.models.operations.FetchAccountSettingsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ACCOUNT_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Voice/Settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchAccountSettingsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAccountSettingsResponse res = new org.openapis.openapi.models.operations.FetchAccountSettingsResponse(contentType, httpRes.statusCode()) {{
            insightsV1AccountSettings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1AccountSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1AccountSettings.class);
                res.insightsV1AccountSettings = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Annotation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAnnotationResponse fetchAnnotation(org.openapis.openapi.models.operations.FetchAnnotationRequest request, org.openapis.openapi.models.operations.FetchAnnotationSecurity security) throws Exception {
        return this.fetchAnnotation(request, security, null);
    }

    /**
     * Fetch a specific Annotation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAnnotationResponse fetchAnnotation(org.openapis.openapi.models.operations.FetchAnnotationRequest request, org.openapis.openapi.models.operations.FetchAnnotationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ANNOTATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAnnotationRequest.class, baseUrl, "/v1/Voice/{CallSid}/Annotation", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAnnotationResponse res = new org.openapis.openapi.models.operations.FetchAnnotationResponse(contentType, httpRes.statusCode()) {{
            insightsV1CallAnnotation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1CallAnnotation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1CallAnnotation.class);
                res.insightsV1CallAnnotation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCallResponse fetchCall(org.openapis.openapi.models.operations.FetchCallRequest request, org.openapis.openapi.models.operations.FetchCallSecurity security) throws Exception {
        return this.fetchCall(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchCallResponse fetchCall(org.openapis.openapi.models.operations.FetchCallRequest request, org.openapis.openapi.models.operations.FetchCallSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CALL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallRequest.class, baseUrl, "/v1/Voice/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallResponse res = new org.openapis.openapi.models.operations.FetchCallResponse(contentType, httpRes.statusCode()) {{
            insightsV1Call = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1Call out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1Call.class);
                res.insightsV1Call = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Conference.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceResponse fetchConference(org.openapis.openapi.models.operations.FetchConferenceRequest request, org.openapis.openapi.models.operations.FetchConferenceSecurity security) throws Exception {
        return this.fetchConference(request, security, null);
    }

    /**
     * Fetch a specific Conference.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceResponse fetchConference(org.openapis.openapi.models.operations.FetchConferenceRequest request, org.openapis.openapi.models.operations.FetchConferenceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONFERENCE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConferenceRequest.class, baseUrl, "/v1/Conferences/{ConferenceSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConferenceResponse res = new org.openapis.openapi.models.operations.FetchConferenceResponse(contentType, httpRes.statusCode()) {{
            insightsV1Conference = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1Conference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1Conference.class);
                res.insightsV1Conference = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Conference Participant Summary.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceParticipantResponse fetchConferenceParticipant(org.openapis.openapi.models.operations.FetchConferenceParticipantRequest request, org.openapis.openapi.models.operations.FetchConferenceParticipantSecurity security) throws Exception {
        return this.fetchConferenceParticipant(request, security, null);
    }

    /**
     * Fetch a specific Conference Participant Summary.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceParticipantResponse fetchConferenceParticipant(org.openapis.openapi.models.operations.FetchConferenceParticipantRequest request, org.openapis.openapi.models.operations.FetchConferenceParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONFERENCE_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConferenceParticipantRequest.class, baseUrl, "/v1/Conferences/{ConferenceSid}/Participants/{ParticipantSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchConferenceParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConferenceParticipantResponse res = new org.openapis.openapi.models.operations.FetchConferenceParticipantResponse(contentType, httpRes.statusCode()) {{
            insightsV1ConferenceConferenceParticipant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1ConferenceConferenceParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1ConferenceConferenceParticipant.class);
                res.insightsV1ConferenceConferenceParticipant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSummaryResponse fetchSummary(org.openapis.openapi.models.operations.FetchSummaryRequest request, org.openapis.openapi.models.operations.FetchSummarySecurity security) throws Exception {
        return this.fetchSummary(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSummaryResponse fetchSummary(org.openapis.openapi.models.operations.FetchSummaryRequest request, org.openapis.openapi.models.operations.FetchSummarySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SUMMARY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSummaryRequest.class, baseUrl, "/v1/Voice/{CallSid}/Summary", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchSummaryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSummaryResponse res = new org.openapis.openapi.models.operations.FetchSummaryResponse(contentType, httpRes.statusCode()) {{
            insightsV1CallSummary = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1CallSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1CallSummary.class);
                res.insightsV1CallSummary = out;
            }
        }

        return res;
    }

    /**
     * Get Video Log Analyzer data for a Room Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVideoParticipantSummaryResponse fetchVideoParticipantSummary(org.openapis.openapi.models.operations.FetchVideoParticipantSummaryRequest request, org.openapis.openapi.models.operations.FetchVideoParticipantSummarySecurity security) throws Exception {
        return this.fetchVideoParticipantSummary(request, security, null);
    }

    /**
     * Get Video Log Analyzer data for a Room Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVideoParticipantSummaryResponse fetchVideoParticipantSummary(org.openapis.openapi.models.operations.FetchVideoParticipantSummaryRequest request, org.openapis.openapi.models.operations.FetchVideoParticipantSummarySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVideoParticipantSummaryRequest.class, baseUrl, "/v1/Video/Rooms/{RoomSid}/Participants/{ParticipantSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVideoParticipantSummaryResponse res = new org.openapis.openapi.models.operations.FetchVideoParticipantSummaryResponse(contentType, httpRes.statusCode()) {{
            insightsV1VideoRoomSummaryVideoParticipantSummary = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1VideoRoomSummaryVideoParticipantSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1VideoRoomSummaryVideoParticipantSummary.class);
                res.insightsV1VideoRoomSummaryVideoParticipantSummary = out;
            }
        }

        return res;
    }

    /**
     * Get Video Log Analyzer data for a Room.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVideoRoomSummaryResponse fetchVideoRoomSummary(org.openapis.openapi.models.operations.FetchVideoRoomSummaryRequest request, org.openapis.openapi.models.operations.FetchVideoRoomSummarySecurity security) throws Exception {
        return this.fetchVideoRoomSummary(request, security, null);
    }

    /**
     * Get Video Log Analyzer data for a Room.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVideoRoomSummaryResponse fetchVideoRoomSummary(org.openapis.openapi.models.operations.FetchVideoRoomSummaryRequest request, org.openapis.openapi.models.operations.FetchVideoRoomSummarySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_VIDEO_ROOM_SUMMARY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVideoRoomSummaryRequest.class, baseUrl, "/v1/Video/Rooms/{RoomSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVideoRoomSummaryResponse res = new org.openapis.openapi.models.operations.FetchVideoRoomSummaryResponse(contentType, httpRes.statusCode()) {{
            insightsV1VideoRoomSummary = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1VideoRoomSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1VideoRoomSummary.class);
                res.insightsV1VideoRoomSummary = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListCallSummariesResponse listCallSummaries(org.openapis.openapi.models.operations.ListCallSummariesRequest request, org.openapis.openapi.models.operations.ListCallSummariesSecurity security) throws Exception {
        return this.listCallSummaries(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListCallSummariesResponse listCallSummaries(org.openapis.openapi.models.operations.ListCallSummariesRequest request, org.openapis.openapi.models.operations.ListCallSummariesSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CALL_SUMMARIES_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Voice/Summaries");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCallSummariesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallSummariesResponse res = new org.openapis.openapi.models.operations.ListCallSummariesResponse(contentType, httpRes.statusCode()) {{
            listCallSummariesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallSummariesListCallSummariesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallSummariesListCallSummariesResponse.class);
                res.listCallSummariesResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Conferences.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceResponse listConference(org.openapis.openapi.models.operations.ListConferenceRequest request, org.openapis.openapi.models.operations.ListConferenceSecurity security) throws Exception {
        return this.listConference(request, security, null);
    }

    /**
     * Retrieve a list of Conferences.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceResponse listConference(org.openapis.openapi.models.operations.ListConferenceRequest request, org.openapis.openapi.models.operations.ListConferenceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONFERENCE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Conferences");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConferenceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConferenceResponse res = new org.openapis.openapi.models.operations.ListConferenceResponse(contentType, httpRes.statusCode()) {{
            listConferenceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConferenceListConferenceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConferenceListConferenceResponse.class);
                res.listConferenceResponse = out;
            }
        }

        return res;
    }

    /**
     * List Conference Participants.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceParticipantResponse listConferenceParticipant(org.openapis.openapi.models.operations.ListConferenceParticipantRequest request, org.openapis.openapi.models.operations.ListConferenceParticipantSecurity security) throws Exception {
        return this.listConferenceParticipant(request, security, null);
    }

    /**
     * List Conference Participants.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceParticipantResponse listConferenceParticipant(org.openapis.openapi.models.operations.ListConferenceParticipantRequest request, org.openapis.openapi.models.operations.ListConferenceParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONFERENCE_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConferenceParticipantRequest.class, baseUrl, "/v1/Conferences/{ConferenceSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConferenceParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConferenceParticipantResponse res = new org.openapis.openapi.models.operations.ListConferenceParticipantResponse(contentType, httpRes.statusCode()) {{
            listConferenceParticipantResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConferenceParticipantListConferenceParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConferenceParticipantListConferenceParticipantResponse.class);
                res.listConferenceParticipantResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListEventResponse listEvent(org.openapis.openapi.models.operations.ListEventRequest request, org.openapis.openapi.models.operations.ListEventSecurity security) throws Exception {
        return this.listEvent(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListEventResponse listEvent(org.openapis.openapi.models.operations.ListEventRequest request, org.openapis.openapi.models.operations.ListEventSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EVENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEventRequest.class, baseUrl, "/v1/Voice/{CallSid}/Events", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEventRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEventResponse res = new org.openapis.openapi.models.operations.ListEventResponse(contentType, httpRes.statusCode()) {{
            listEventResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEventListEventResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEventListEventResponse.class);
                res.listEventResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListMetricResponse listMetric(org.openapis.openapi.models.operations.ListMetricRequest request, org.openapis.openapi.models.operations.ListMetricSecurity security) throws Exception {
        return this.listMetric(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListMetricResponse listMetric(org.openapis.openapi.models.operations.ListMetricRequest request, org.openapis.openapi.models.operations.ListMetricSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_METRIC_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMetricRequest.class, baseUrl, "/v1/Voice/{CallSid}/Metrics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMetricRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMetricResponse res = new org.openapis.openapi.models.operations.ListMetricResponse(contentType, httpRes.statusCode()) {{
            listMetricResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMetricListMetricResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMetricListMetricResponse.class);
                res.listMetricResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a list of room participants.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVideoParticipantSummaryResponse listVideoParticipantSummary(org.openapis.openapi.models.operations.ListVideoParticipantSummaryRequest request, org.openapis.openapi.models.operations.ListVideoParticipantSummarySecurity security) throws Exception {
        return this.listVideoParticipantSummary(request, security, null);
    }

    /**
     * Get a list of room participants.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVideoParticipantSummaryResponse listVideoParticipantSummary(org.openapis.openapi.models.operations.ListVideoParticipantSummaryRequest request, org.openapis.openapi.models.operations.ListVideoParticipantSummarySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListVideoParticipantSummaryRequest.class, baseUrl, "/v1/Video/Rooms/{RoomSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVideoParticipantSummaryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVideoParticipantSummaryResponse res = new org.openapis.openapi.models.operations.ListVideoParticipantSummaryResponse(contentType, httpRes.statusCode()) {{
            listVideoParticipantSummaryResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVideoParticipantSummaryListVideoParticipantSummaryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVideoParticipantSummaryListVideoParticipantSummaryResponse.class);
                res.listVideoParticipantSummaryResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a list of Programmable Video Rooms.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVideoRoomSummaryResponse listVideoRoomSummary(org.openapis.openapi.models.operations.ListVideoRoomSummaryRequest request, org.openapis.openapi.models.operations.ListVideoRoomSummarySecurity security) throws Exception {
        return this.listVideoRoomSummary(request, security, null);
    }

    /**
     * Get a list of Programmable Video Rooms.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVideoRoomSummaryResponse listVideoRoomSummary(org.openapis.openapi.models.operations.ListVideoRoomSummaryRequest request, org.openapis.openapi.models.operations.ListVideoRoomSummarySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_VIDEO_ROOM_SUMMARY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Video/Rooms");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVideoRoomSummaryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVideoRoomSummaryResponse res = new org.openapis.openapi.models.operations.ListVideoRoomSummaryResponse(contentType, httpRes.statusCode()) {{
            listVideoRoomSummaryResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVideoRoomSummaryListVideoRoomSummaryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVideoRoomSummaryListVideoRoomSummaryResponse.class);
                res.listVideoRoomSummaryResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateAccountSettingsResponse updateAccountSettings(org.openapis.openapi.models.operations.UpdateAccountSettingsUpdateAccountSettingsRequest request, org.openapis.openapi.models.operations.UpdateAccountSettingsSecurity security) throws Exception {
        return this.updateAccountSettings(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateAccountSettingsResponse updateAccountSettings(org.openapis.openapi.models.operations.UpdateAccountSettingsUpdateAccountSettingsRequest request, org.openapis.openapi.models.operations.UpdateAccountSettingsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ACCOUNT_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Voice/Settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAccountSettingsResponse res = new org.openapis.openapi.models.operations.UpdateAccountSettingsResponse(contentType, httpRes.statusCode()) {{
            insightsV1AccountSettings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1AccountSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1AccountSettings.class);
                res.insightsV1AccountSettings = out;
            }
        }

        return res;
    }

    /**
     * Create/Update the annotation for the call
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAnnotationResponse updateAnnotation(org.openapis.openapi.models.operations.UpdateAnnotationRequest request, org.openapis.openapi.models.operations.UpdateAnnotationSecurity security) throws Exception {
        return this.updateAnnotation(request, security, null);
    }

    /**
     * Create/Update the annotation for the call
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAnnotationResponse updateAnnotation(org.openapis.openapi.models.operations.UpdateAnnotationRequest request, org.openapis.openapi.models.operations.UpdateAnnotationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ANNOTATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAnnotationRequest.class, baseUrl, "/v1/Voice/{CallSid}/Annotation", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAnnotationResponse res = new org.openapis.openapi.models.operations.UpdateAnnotationResponse(contentType, httpRes.statusCode()) {{
            insightsV1CallAnnotation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InsightsV1CallAnnotation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InsightsV1CallAnnotation.class);
                res.insightsV1CallAnnotation = out;
            }
        }

        return res;
    }
}