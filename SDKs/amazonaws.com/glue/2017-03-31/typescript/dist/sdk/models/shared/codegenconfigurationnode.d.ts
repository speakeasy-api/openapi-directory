import { SpeakeasyBase } from "../../../internal/utils";
import { Aggregate } from "./aggregate";
import { ApplyMapping } from "./applymapping";
import { AthenaConnectorSource } from "./athenaconnectorsource";
import { BasicCatalogTarget } from "./basiccatalogtarget";
import { CatalogDeltaSource } from "./catalogdeltasource";
import { CatalogHudiSource } from "./cataloghudisource";
import { CatalogKafkaSource } from "./catalogkafkasource";
import { CatalogKinesisSource } from "./catalogkinesissource";
import { CatalogSource } from "./catalogsource";
import { CustomCode } from "./customcode";
import { DirectJDBCSource } from "./directjdbcsource";
import { DirectKafkaSource } from "./directkafkasource";
import { DirectKinesisSource } from "./directkinesissource";
import { DropDuplicates } from "./dropduplicates";
import { DropFields } from "./dropfields";
import { DropNullFields } from "./dropnullfields";
import { DynamicTransform } from "./dynamictransform";
import { DynamoDBCatalogSource } from "./dynamodbcatalogsource";
import { EvaluateDataQuality } from "./evaluatedataquality";
import { FillMissingValues } from "./fillmissingvalues";
import { Filter } from "./filter";
import { GovernedCatalogSource } from "./governedcatalogsource";
import { GovernedCatalogTarget } from "./governedcatalogtarget";
import { JDBCConnectorSource } from "./jdbcconnectorsource";
import { JDBCConnectorTarget } from "./jdbcconnectortarget";
import { Join } from "./join";
import { Merge } from "./merge";
import { MicrosoftSQLServerCatalogSource } from "./microsoftsqlservercatalogsource";
import { MicrosoftSQLServerCatalogTarget } from "./microsoftsqlservercatalogtarget";
import { MySQLCatalogSource } from "./mysqlcatalogsource";
import { MySQLCatalogTarget } from "./mysqlcatalogtarget";
import { OracleSQLCatalogSource } from "./oraclesqlcatalogsource";
import { OracleSQLCatalogTarget } from "./oraclesqlcatalogtarget";
import { PIIDetection } from "./piidetection";
import { PostgreSQLCatalogSource } from "./postgresqlcatalogsource";
import { PostgreSQLCatalogTarget } from "./postgresqlcatalogtarget";
import { RedshiftSource } from "./redshiftsource";
import { RedshiftTarget } from "./redshifttarget";
import { RelationalCatalogSource } from "./relationalcatalogsource";
import { RenameField } from "./renamefield";
import { S3CatalogDeltaSource } from "./s3catalogdeltasource";
import { S3CatalogHudiSource } from "./s3cataloghudisource";
import { S3CatalogSource } from "./s3catalogsource";
import { S3CatalogTarget } from "./s3catalogtarget";
import { S3CsvSource } from "./s3csvsource";
import { S3DeltaCatalogTarget } from "./s3deltacatalogtarget";
import { S3DeltaDirectTarget } from "./s3deltadirecttarget";
import { S3DeltaSource } from "./s3deltasource";
import { S3DirectTarget } from "./s3directtarget";
import { S3GlueParquetTarget } from "./s3glueparquettarget";
import { S3HudiCatalogTarget } from "./s3hudicatalogtarget";
import { S3HudiDirectTarget } from "./s3hudidirecttarget";
import { S3HudiSource } from "./s3hudisource";
import { S3JsonSource } from "./s3jsonsource";
import { S3ParquetSource } from "./s3parquetsource";
import { SelectFields } from "./selectfields";
import { SelectFromCollection } from "./selectfromcollection";
import { SparkConnectorSource } from "./sparkconnectorsource";
import { SparkConnectorTarget } from "./sparkconnectortarget";
import { SparkSQL } from "./sparksql";
import { Spigot } from "./spigot";
import { SplitFields } from "./splitfields";
import { Union } from "./union";
/**
 *  <code>CodeGenConfigurationNode</code> enumerates all valid Node types. One and only one of its member variables can be populated.
 */
export declare class CodeGenConfigurationNode extends SpeakeasyBase {
    aggregate?: Aggregate;
    applyMapping?: ApplyMapping;
    athenaConnectorSource?: AthenaConnectorSource;
    catalogDeltaSource?: CatalogDeltaSource;
    catalogHudiSource?: CatalogHudiSource;
    catalogKafkaSource?: CatalogKafkaSource;
    catalogKinesisSource?: CatalogKinesisSource;
    catalogSource?: CatalogSource;
    catalogTarget?: BasicCatalogTarget;
    customCode?: CustomCode;
    /**
     * Specifies the direct JDBC source connection.
     */
    directJDBCSource?: DirectJDBCSource;
    directKafkaSource?: DirectKafkaSource;
    directKinesisSource?: DirectKinesisSource;
    dropDuplicates?: DropDuplicates;
    dropFields?: DropFields;
    dropNullFields?: DropNullFields;
    dynamicTransform?: DynamicTransform;
    dynamoDBCatalogSource?: DynamoDBCatalogSource;
    evaluateDataQuality?: EvaluateDataQuality;
    fillMissingValues?: FillMissingValues;
    filter?: Filter;
    governedCatalogSource?: GovernedCatalogSource;
    governedCatalogTarget?: GovernedCatalogTarget;
    jdbcConnectorSource?: JDBCConnectorSource;
    jdbcConnectorTarget?: JDBCConnectorTarget;
    join?: Join;
    merge?: Merge;
    microsoftSQLServerCatalogSource?: MicrosoftSQLServerCatalogSource;
    microsoftSQLServerCatalogTarget?: MicrosoftSQLServerCatalogTarget;
    mySQLCatalogSource?: MySQLCatalogSource;
    mySQLCatalogTarget?: MySQLCatalogTarget;
    oracleSQLCatalogSource?: OracleSQLCatalogSource;
    oracleSQLCatalogTarget?: OracleSQLCatalogTarget;
    piiDetection?: PIIDetection;
    postgreSQLCatalogSource?: PostgreSQLCatalogSource;
    postgreSQLCatalogTarget?: PostgreSQLCatalogTarget;
    redshiftSource?: RedshiftSource;
    redshiftTarget?: RedshiftTarget;
    relationalCatalogSource?: RelationalCatalogSource;
    renameField?: RenameField;
    s3CatalogDeltaSource?: S3CatalogDeltaSource;
    s3CatalogHudiSource?: S3CatalogHudiSource;
    s3CatalogSource?: S3CatalogSource;
    s3CatalogTarget?: S3CatalogTarget;
    s3CsvSource?: S3CsvSource;
    s3DeltaCatalogTarget?: S3DeltaCatalogTarget;
    s3DeltaDirectTarget?: S3DeltaDirectTarget;
    s3DeltaSource?: S3DeltaSource;
    s3DirectTarget?: S3DirectTarget;
    s3GlueParquetTarget?: S3GlueParquetTarget;
    s3HudiCatalogTarget?: S3HudiCatalogTarget;
    s3HudiDirectTarget?: S3HudiDirectTarget;
    s3HudiSource?: S3HudiSource;
    s3JsonSource?: S3JsonSource;
    s3ParquetSource?: S3ParquetSource;
    selectFields?: SelectFields;
    selectFromCollection?: SelectFromCollection;
    sparkConnectorSource?: SparkConnectorSource;
    sparkConnectorTarget?: SparkConnectorTarget;
    sparkSQL?: SparkSQL;
    spigot?: Spigot;
    splitFields?: SplitFields;
    union?: Union;
}
