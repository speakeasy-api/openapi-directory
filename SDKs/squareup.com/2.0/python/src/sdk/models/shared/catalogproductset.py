"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogProductSet:
    r"""Represents a collection of catalog objects for the purpose of applying a
    `PricingRule`. Including a catalog object will include all of its subtypes.
    For example, including a category in a product set will include all of its
    items and associated item variations in the product set. Including an item in
    a product set will also include its item variations.
    """
    
    all_products: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_products'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the product set will include every item in the catalog.
    Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User-defined name for the product set. For example, \\"Clearance Items\\" 
    or \"Winter Sale Items\".
    """  
    product_ids_all: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_ids_all'), 'exclude': lambda f: f is None }})
    r"""Unique IDs for any `CatalogObject` included in this product set.
    All objects in this set must be included in an order for a pricing rule to apply.
    
    Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    
    Max: 500 catalog object IDs.
    """  
    product_ids_any: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_ids_any'), 'exclude': lambda f: f is None }})
    r"""Unique IDs for any `CatalogObject` included in this product set. Any
    number of these catalog objects can be in an order for a pricing rule to apply.
    
    This can be used with `product_ids_all` in a parent `CatalogProductSet` to
    match groups of products for a bulk discount, such as a discount for an
    entree and side combo.
    
    Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    
    Max: 500 catalog object IDs.
    """  
    quantity_exact: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_exact'), 'exclude': lambda f: f is None }})
    r"""If set, there must be exactly this many items from `products_any` or `products_all`
    in the cart for the discount to apply.
    
    Cannot be combined with either `quantity_min` or `quantity_max`.
    """  
    quantity_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_max'), 'exclude': lambda f: f is None }})
    r"""If set, the pricing rule will apply to a maximum of this many items from
    `products_any` or `products_all`.
    """  
    quantity_min: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_min'), 'exclude': lambda f: f is None }})
    r"""If set, there must be at least this many items from `products_any` or `products_all`
    in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if
    `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
    """  
    