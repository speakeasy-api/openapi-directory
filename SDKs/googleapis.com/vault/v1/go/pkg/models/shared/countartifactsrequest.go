// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CountArtifactsRequestViewEnum - Sets the granularity of the count results.
type CountArtifactsRequestViewEnum string

const (
	CountArtifactsRequestViewEnumCountResultViewUnspecified CountArtifactsRequestViewEnum = "COUNT_RESULT_VIEW_UNSPECIFIED"
	CountArtifactsRequestViewEnumTotalCount                 CountArtifactsRequestViewEnum = "TOTAL_COUNT"
	CountArtifactsRequestViewEnumAll                        CountArtifactsRequestViewEnum = "ALL"
)

func (e CountArtifactsRequestViewEnum) ToPointer() *CountArtifactsRequestViewEnum {
	return &e
}

func (e *CountArtifactsRequestViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COUNT_RESULT_VIEW_UNSPECIFIED":
		fallthrough
	case "TOTAL_COUNT":
		fallthrough
	case "ALL":
		*e = CountArtifactsRequestViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CountArtifactsRequestViewEnum: %v", v)
	}
}

// CountArtifactsRequest - Count artifacts request.
type CountArtifactsRequest struct {
	// The query definition used for search and export.
	Query *Query `json:"query,omitempty"`
	// Sets the granularity of the count results.
	View *CountArtifactsRequestViewEnum `json:"view,omitempty"`
}
