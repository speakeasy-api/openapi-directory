// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type StartAuditMitigationActionsTaskPathParams struct {
	// A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
	TaskID string `pathParam:"style=simple,explode=false,name=taskId"`
}

type StartAuditMitigationActionsTaskHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// StartAuditMitigationActionsTaskRequestBodyTarget - Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
type StartAuditMitigationActionsTaskRequestBodyTarget struct {
	AuditCheckToReasonCodeFilter map[string][]string `json:"auditCheckToReasonCodeFilter,omitempty"`
	AuditTaskID                  *string             `json:"auditTaskId,omitempty"`
	FindingIds                   []string            `json:"findingIds,omitempty"`
}

type StartAuditMitigationActionsTaskRequestBody struct {
	// For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.
	AuditCheckToActionsMapping map[string][]string `json:"auditCheckToActionsMapping"`
	// Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.
	ClientRequestToken string `json:"clientRequestToken"`
	// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
	Target StartAuditMitigationActionsTaskRequestBodyTarget `json:"target"`
}

type StartAuditMitigationActionsTaskRequest struct {
	PathParams StartAuditMitigationActionsTaskPathParams
	Headers    StartAuditMitigationActionsTaskHeaders
	Request    StartAuditMitigationActionsTaskRequestBody `request:"mediaType=application/json"`
}

type StartAuditMitigationActionsTaskResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	StartAuditMitigationActionsTaskResponse *shared.StartAuditMitigationActionsTaskResponse
	StatusCode                              int
	RawResponse                             *http.Response
	// TaskAlreadyExistsException
	TaskAlreadyExistsException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
