// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateApplicationPresignedURLXAmzTargetEnum
type CreateApplicationPresignedURLXAmzTargetEnum string

const (
	CreateApplicationPresignedURLXAmzTargetEnumKinesisAnalytics20180523CreateApplicationPresignedURL CreateApplicationPresignedURLXAmzTargetEnum = "KinesisAnalytics_20180523.CreateApplicationPresignedUrl"
)

func (e *CreateApplicationPresignedURLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "KinesisAnalytics_20180523.CreateApplicationPresignedUrl":
		*e = CreateApplicationPresignedURLXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationPresignedURLXAmzTargetEnum: %s", s)
	}
}

type CreateApplicationPresignedURLRequest struct {
	CreateApplicationPresignedURLRequest shared.CreateApplicationPresignedURLRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                       *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                             *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                    *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                           CreateApplicationPresignedURLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateApplicationPresignedURLResponse struct {
	ContentType string
	// Success
	CreateApplicationPresignedURLResponse *shared.CreateApplicationPresignedURLResponse
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
