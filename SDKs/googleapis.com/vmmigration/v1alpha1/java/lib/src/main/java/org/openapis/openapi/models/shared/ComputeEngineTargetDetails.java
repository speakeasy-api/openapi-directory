/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ComputeEngineTargetDetails - ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
public class ComputeEngineTargetDetails {
    /**
     * Additional licenses to assign to the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalLicenses")
    public String[] additionalLicenses;

    public ComputeEngineTargetDetails withAdditionalLicenses(String[] additionalLicenses) {
        this.additionalLicenses = additionalLicenses;
        return this;
    }
    
    /**
     * AppliedLicense holds the license data returned by adaptation module report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedLicense")
    public AppliedLicense appliedLicense;

    public ComputeEngineTargetDetails withAppliedLicense(AppliedLicense appliedLicense) {
        this.appliedLicense = appliedLicense;
        return this;
    }
    
    /**
     * The VM Boot Option, as set in the source vm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootOption")
    public ComputeEngineTargetDetailsBootOptionEnum bootOption;

    public ComputeEngineTargetDetails withBootOption(ComputeEngineTargetDetailsBootOptionEnum bootOption) {
        this.bootOption = bootOption;
        return this;
    }
    
    /**
     * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeScheduling")
    public ComputeScheduling computeScheduling;

    public ComputeEngineTargetDetails withComputeScheduling(ComputeScheduling computeScheduling) {
        this.computeScheduling = computeScheduling;
        return this;
    }
    
    /**
     * The disk type to use in the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskType")
    public ComputeEngineTargetDetailsDiskTypeEnum diskType;

    public ComputeEngineTargetDetails withDiskType(ComputeEngineTargetDetailsDiskTypeEnum diskType) {
        this.diskType = diskType;
        return this;
    }
    
    /**
     * The hostname to assign to the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;

    public ComputeEngineTargetDetails withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * A map of labels to associate with the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public ComputeEngineTargetDetails withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The license type to use in OS adaptation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseType")
    public ComputeEngineTargetDetailsLicenseTypeEnum licenseType;

    public ComputeEngineTargetDetails withLicenseType(ComputeEngineTargetDetailsLicenseTypeEnum licenseType) {
        this.licenseType = licenseType;
        return this;
    }
    
    /**
     * The machine type to create the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;

    public ComputeEngineTargetDetails withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * The machine type series to create the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineTypeSeries")
    public String machineTypeSeries;

    public ComputeEngineTargetDetails withMachineTypeSeries(String machineTypeSeries) {
        this.machineTypeSeries = machineTypeSeries;
        return this;
    }
    
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public ComputeEngineTargetDetails withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * List of NICs connected to this VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkInterfaces")
    public NetworkInterface[] networkInterfaces;

    public ComputeEngineTargetDetails withNetworkInterfaces(NetworkInterface[] networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }
    
    /**
     * A map of network tags to associate with the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkTags")
    public String[] networkTags;

    public ComputeEngineTargetDetails withNetworkTags(String[] networkTags) {
        this.networkTags = networkTags;
        return this;
    }
    
    /**
     * The Google Cloud target project ID or project name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public ComputeEngineTargetDetails withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secureBoot")
    public Boolean secureBoot;

    public ComputeEngineTargetDetails withSecureBoot(Boolean secureBoot) {
        this.secureBoot = secureBoot;
        return this;
    }
    
    /**
     * The service account to associate the VM with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;

    public ComputeEngineTargetDetails withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * The name of the VM to create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmName")
    public String vmName;

    public ComputeEngineTargetDetails withVmName(String vmName) {
        this.vmName = vmName;
        return this;
    }
    
    /**
     * The zone in which to create the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;

    public ComputeEngineTargetDetails withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
    public ComputeEngineTargetDetails(){}
}
