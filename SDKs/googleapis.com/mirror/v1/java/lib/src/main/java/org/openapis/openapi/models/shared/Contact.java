/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contact - A person or group that can be used as a creator or a contact.
 */
public class Contact {
    /**
     * A list of voice menu commands that a contact can handle. Glass shows up to three contacts for each voice menu command. If there are more than that, the three contacts with the highest priority are shown for that particular command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptCommands")
    public Command[] acceptCommands;

    public Contact withAcceptCommands(Command[] acceptCommands) {
        this.acceptCommands = acceptCommands;
        return this;
    }
    
    /**
     * A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the contact will be shown for all items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptTypes")
    public String[] acceptTypes;

    public Contact withAcceptTypes(String[] acceptTypes) {
        this.acceptTypes = acceptTypes;
        return this;
    }
    
    /**
     * The name to display for this contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Contact withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * An ID for this contact. This is generated by the application and is treated as an opaque token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Contact withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Set of image URLs to display for a contact. Most contacts will have a single image, but a "group" contact may include up to 8 image URLs and they will be resized and cropped into a mosaic on the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrls")
    public String[] imageUrls;

    public Contact withImageUrls(String[] imageUrls) {
        this.imageUrls = imageUrls;
        return this;
    }
    
    /**
     * The type of resource. This is always mirror#contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Contact withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    public String phoneNumber;

    public Contact withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Long priority;

    public Contact withPriority(Long priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * A list of sharing features that a contact can handle. Allowed values are:  
     * - ADD_CAPTION
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingFeatures")
    public String[] sharingFeatures;

    public Contact withSharingFeatures(String[] sharingFeatures) {
        this.sharingFeatures = sharingFeatures;
        return this;
    }
    
    /**
     * The ID of the application that created this contact. This is populated by the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;

    public Contact withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * Name of this contact as it should be pronounced. If this contact's name must be spoken as part of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful for contact names with unpronounceable characters or whose display spelling is otherwise not phonetic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speakableName")
    public String speakableName;

    public Contact withSpeakableName(String speakableName) {
        this.speakableName = speakableName;
        return this;
    }
    
    /**
     * The type for this contact. This is used for sorting in UIs. Allowed values are:  
     * - INDIVIDUAL - Represents a single person. This is the default. 
     * - GROUP - Represents more than a single person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Contact withType(String type) {
        this.type = type;
        return this;
    }
    
    public Contact(){}
}
