"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Observation = void 0;
var utils_1 = require("../../../internal/utils");
var cloudwatcheventsourceenum_1 = require("./cloudwatcheventsourceenum");
var logfilterenum_1 = require("./logfilterenum");
var class_transformer_1 = require("class-transformer");
/**
 * Describes an anomaly or error with the application.
 */
var Observation = /** @class */ (function (_super) {
    __extends(Observation, _super);
    function Observation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CloudWatchEventDetailType" }),
        __metadata("design:type", String)
    ], Observation.prototype, "cloudWatchEventDetailType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CloudWatchEventId" }),
        __metadata("design:type", String)
    ], Observation.prototype, "cloudWatchEventId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CloudWatchEventSource" }),
        __metadata("design:type", String)
    ], Observation.prototype, "cloudWatchEventSource", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CodeDeployApplication" }),
        __metadata("design:type", String)
    ], Observation.prototype, "codeDeployApplication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CodeDeployDeploymentGroup" }),
        __metadata("design:type", String)
    ], Observation.prototype, "codeDeployDeploymentGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CodeDeployDeploymentId" }),
        __metadata("design:type", String)
    ], Observation.prototype, "codeDeployDeploymentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CodeDeployInstanceGroupId" }),
        __metadata("design:type", String)
    ], Observation.prototype, "codeDeployInstanceGroupId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CodeDeployState" }),
        __metadata("design:type", String)
    ], Observation.prototype, "codeDeployState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EbsCause" }),
        __metadata("design:type", String)
    ], Observation.prototype, "ebsCause", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EbsEvent" }),
        __metadata("design:type", String)
    ], Observation.prototype, "ebsEvent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EbsRequestId" }),
        __metadata("design:type", String)
    ], Observation.prototype, "ebsRequestId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EbsResult" }),
        __metadata("design:type", String)
    ], Observation.prototype, "ebsResult", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Ec2State" }),
        __metadata("design:type", String)
    ], Observation.prototype, "ec2State", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EndTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Observation.prototype, "endTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "HealthEventArn" }),
        __metadata("design:type", String)
    ], Observation.prototype, "healthEventArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "HealthEventDescription" }),
        __metadata("design:type", String)
    ], Observation.prototype, "healthEventDescription", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "HealthEventTypeCategory" }),
        __metadata("design:type", String)
    ], Observation.prototype, "healthEventTypeCategory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "HealthEventTypeCode" }),
        __metadata("design:type", String)
    ], Observation.prototype, "healthEventTypeCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "HealthService" }),
        __metadata("design:type", String)
    ], Observation.prototype, "healthService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Id" }),
        __metadata("design:type", String)
    ], Observation.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LineTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Observation.prototype, "lineTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LogFilter" }),
        __metadata("design:type", String)
    ], Observation.prototype, "logFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LogGroup" }),
        __metadata("design:type", String)
    ], Observation.prototype, "logGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LogText" }),
        __metadata("design:type", String)
    ], Observation.prototype, "logText", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MetricName" }),
        __metadata("design:type", String)
    ], Observation.prototype, "metricName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MetricNamespace" }),
        __metadata("design:type", String)
    ], Observation.prototype, "metricNamespace", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "RdsEventCategories" }),
        __metadata("design:type", String)
    ], Observation.prototype, "rdsEventCategories", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "RdsEventMessage" }),
        __metadata("design:type", String)
    ], Observation.prototype, "rdsEventMessage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "S3EventName" }),
        __metadata("design:type", String)
    ], Observation.prototype, "s3EventName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SourceARN" }),
        __metadata("design:type", String)
    ], Observation.prototype, "sourceARN", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SourceType" }),
        __metadata("design:type", String)
    ], Observation.prototype, "sourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StartTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Observation.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StatesArn" }),
        __metadata("design:type", String)
    ], Observation.prototype, "statesArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StatesExecutionArn" }),
        __metadata("design:type", String)
    ], Observation.prototype, "statesExecutionArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StatesInput" }),
        __metadata("design:type", String)
    ], Observation.prototype, "statesInput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StatesStatus" }),
        __metadata("design:type", String)
    ], Observation.prototype, "statesStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Unit" }),
        __metadata("design:type", String)
    ], Observation.prototype, "unit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Value" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "value", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayErrorPercent" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "xRayErrorPercent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayFaultPercent" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "xRayFaultPercent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayNodeName" }),
        __metadata("design:type", String)
    ], Observation.prototype, "xRayNodeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayNodeType" }),
        __metadata("design:type", String)
    ], Observation.prototype, "xRayNodeType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayRequestAverageLatency" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "xRayRequestAverageLatency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayRequestCount" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "xRayRequestCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "XRayThrottlePercent" }),
        __metadata("design:type", Number)
    ], Observation.prototype, "xRayThrottlePercent", void 0);
    return Observation;
}(utils_1.SpeakeasyBase));
exports.Observation = Observation;
