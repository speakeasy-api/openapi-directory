<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LoadBalancerActions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all Actions for a Load Balancer
     * 
     * Returns all Action objects for a Load Balancer. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsResponse
     */
	public function getLoadBalancersIdActions(
        \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions', \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an Action for a Load Balancer
     * 
     * Returns a specific Action for a Load Balancer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdResponse
     */
	public function getLoadBalancersIdActionsActionId(
        \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/{action_id}', \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLoadBalancersIdActionsActionIdActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add Service
     * 
     * Adds a service to a Load Balancer.
     * 
     * #### Call specific error codes
     * 
     * | Code                       | Description                                             |
     * |----------------------------|---------------------------------------------------------|
     * | `source_port_already_used` | The source port you are trying to add is already in use |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceResponse
     */
	public function postLoadBalancersIdActionsAddService(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/add_service', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddServiceActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add Target
     * 
     * Adds a target to a Load Balancer.
     * 
     * #### Call specific error codes
     * 
     * | Code                                    | Description                                                                                           |
     * |-----------------------------------------|-------------------------------------------------------------------------------------------------------|
     * | `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
     * | `ip_not_owned`                          | The IP you are trying to add as a target is not owned by the Project owner                            |
     * | `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |
     * | `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |
     * | `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
     * | `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetResponse
     */
	public function postLoadBalancersIdActionsAddTarget(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/add_target', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAddTargetActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach a Load Balancer to a Network
     * 
     * Attach a Load Balancer to a Network.
     * 
     * **Call specific error codes**
     * 
     * | Code                             | Description                                                           |
     * |----------------------------------|-----------------------------------------------------------------------|
     * | `load_balancer_already_attached` | The Load Balancer is already attached to a network                    |
     * | `ip_not_available`               | The provided Network IP is not available                              |
     * | `no_subnet_available`            | No Subnet or IP is available for the Load Balancer within the network |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkResponse
     */
	public function postLoadBalancersIdActionsAttachToNetwork(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/attach_to_network', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsAttachToNetworkActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Algorithm
     * 
     * Change the algorithm that determines to which target new requests are sent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmResponse
     */
	public function postLoadBalancersIdActionsChangeAlgorithm(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/change_algorithm', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeAlgorithmActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change reverse DNS entry for this Load Balancer
     * 
     * Changes the hostname that will appear when getting the hostname belonging to the public IPs (IPv4 and IPv6) of this Load Balancer.
     * 
     * Floating IPs assigned to the Server are not affected by this.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrResponse
     */
	public function postLoadBalancersIdActionsChangeDnsPtr(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/change_dns_ptr', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeDnsPtrActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Load Balancer Protection
     * 
     * Changes the protection configuration of a Load Balancer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionResponse
     */
	public function postLoadBalancersIdActionsChangeProtection(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/change_protection', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeProtectionActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the Type of a Load Balancer
     * 
     * Changes the type (Max Services, Max Targets and Max Connections) of a Load Balancer.
     * 
     * **Call specific error codes**
     * 
     * | Code                         | Description                                                     |
     * |------------------------------|-----------------------------------------------------------------|
     * | `invalid_load_balancer_type` | The Load Balancer type does not fit for the given Load Balancer |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeResponse
     */
	public function postLoadBalancersIdActionsChangeType(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/change_type', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsChangeTypeActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Service
     * 
     * Delete a service of a Load Balancer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceResponse
     */
	public function postLoadBalancersIdActionsDeleteService(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/delete_service', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDeleteServiceActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detach a Load Balancer from a Network
     * 
     * Detaches a Load Balancer from a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkResponse
     */
	public function postLoadBalancersIdActionsDetachFromNetwork(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/detach_from_network', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDetachFromNetworkActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable the public interface of a Load Balancer
     * 
     * Disable the public interface of a Load Balancer. The Load Balancer will be not accessible from the internet via its public IPs.
     * 
     * #### Call specific error codes
     * 
     * | Code                                      | Description                                                                    |
     * |-------------------------------------------|--------------------------------------------------------------------------------|
     * | `load_balancer_not_attached_to_network`   |  The Load Balancer is not attached to a network                                |
     * | `targets_without_use_private_ip`          | The Load Balancer has targets that use the public IP instead of the private IP |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceResponse
     */
	public function postLoadBalancersIdActionsDisablePublicInterface(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/disable_public_interface', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsDisablePublicInterfaceActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable the public interface of a Load Balancer
     * 
     * Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceResponse
     */
	public function postLoadBalancersIdActionsEnablePublicInterface(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/enable_public_interface', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsEnablePublicInterfaceActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove Target
     * 
     * Removes a target from a Load Balancer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetResponse
     */
	public function postLoadBalancersIdActionsRemoveTarget(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/remove_target', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsRemoveTargetActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Service
     * 
     * Updates a Load Balancer Service.
     * 
     * #### Call specific error codes
     * 
     * | Code                       | Description                                             |
     * |----------------------------|---------------------------------------------------------|
     * | `source_port_already_used` | The source port you are trying to add is already in use |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceResponse
     */
	public function postLoadBalancersIdActionsUpdateService(
        \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/load_balancers/{id}/actions/update_service', \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostLoadBalancersIdActionsUpdateServiceActionResponse', 'json');
            }
        }

        return $response;
    }
}