"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Contributors:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_contributor(self, request: operations.GetContributorRequest, security: operations.GetContributorSecurity) -> operations.GetContributorResponse:
        r"""Get details about a single contributor
        This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributorRequest, base_url, '/v2/contributors/{contributor_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContributorProfile])
                res.contributor_profile = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def get_contributor_collection_items(self, request: operations.GetContributorCollectionItemsRequest, security: operations.GetContributorCollectionItemsSecurity) -> operations.GetContributorCollectionItemsResponse:
        r"""Get the items in contributors' collections
        This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributorCollectionItemsRequest, base_url, '/v2/contributors/{contributor_id}/collections/{id}/items', request)
        
        query_params = utils.get_query_params(operations.GetContributorCollectionItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributorCollectionItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CollectionItemDataList])
                res.collection_item_data_list = out
        elif http_res.status_code in [400, 401, 403, 404]:
            pass

        return res

    def get_contributor_collections(self, request: operations.GetContributorCollectionsRequest, security: operations.GetContributorCollectionsSecurity) -> operations.GetContributorCollectionsResponse:
        r"""Get details about contributors' collections
        This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributorCollectionsRequest, base_url, '/v2/contributors/{contributor_id}/collections/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributorCollectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Collection])
                res.collection = out
        elif http_res.status_code in [400, 401, 403, 404]:
            pass

        return res

    def get_contributor_collections_list(self, request: operations.GetContributorCollectionsListRequest, security: operations.GetContributorCollectionsListSecurity) -> operations.GetContributorCollectionsListResponse:
        r"""List contributors' collections
        This endpoint lists collections based on contributor ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContributorCollectionsListRequest, base_url, '/v2/contributors/{contributor_id}/collections', request)
        
        query_params = utils.get_query_params(operations.GetContributorCollectionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributorCollectionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CollectionDataList])
                res.collection_data_list = out
        elif http_res.status_code in [400, 401, 403, 404]:
            pass

        return res

    def get_contributor_list(self, request: operations.GetContributorListRequest, security: operations.GetContributorListSecurity) -> operations.GetContributorListResponse:
        r"""Get details about multiple contributors
        This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/contributors'
        
        query_params = utils.get_query_params(operations.GetContributorListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContributorListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContributorProfileDataList])
                res.contributor_profile_data_list = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    