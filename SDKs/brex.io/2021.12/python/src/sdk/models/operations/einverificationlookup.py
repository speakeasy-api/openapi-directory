"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EinVerificationLookupSecurity:
    
    user_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'user_key' }})  
    

@dataclasses.dataclass
class EinVerificationLookupRequest:
    
    name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Business name of the company"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Optional state parameter to improve results. (Two letter code for example CA or US-CA for California)"""  
    tight: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tight', 'style': 'form', 'explode': True }})
    r"""Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5)"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Optional zip code parameter to improve results. (Zip is preferred over state)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EinVerificationLookupDefaultApplicationJSON:
    r"""Detailed information about the error"""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})  
    fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EinVerificationLookup200ApplicationJSONMatchedEinCompanies:
    
    address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    company_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_score'), 'exclude': lambda f: f is None }})  
    company_score_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_score_explanation'), 'exclude': lambda f: f is None }})  
    confidence_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence_score'), 'exclude': lambda f: f is None }})  
    confidence_score_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence_score_explanation'), 'exclude': lambda f: f is None }})  
    dba_score: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dba_score'), 'exclude': lambda f: f is None }})  
    dba_score_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dba_score_explanation'), 'exclude': lambda f: f is None }})  
    ein: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ein'), 'exclude': lambda f: f is None }})  
    formatted_address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedAddress'), 'exclude': lambda f: f is None }})  
    irs_score: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('irs_score'), 'exclude': lambda f: f is None }})  
    irs_score_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('irs_score_explanation'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    provided_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provided_status'), 'exclude': lambda f: f is None }})  
    provided_status_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provided_status_explanation'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EinVerificationLookup200ApplicationJSON:
    r"""Result of a EIN reverse lookup"""
    
    searchterm_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchterm_name') }})  
    searchterm_state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchterm_state') }})  
    searchterm_zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchterm_zip') }})  
    tight_search: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tight_search') }})  
    timestamp: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp') }})  
    matched_ein_companies: Optional[list[EinVerificationLookup200ApplicationJSONMatchedEinCompanies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matched_ein_companies'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class EinVerificationLookupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ein_verification_lookup_200_application_json_object: Optional[EinVerificationLookup200ApplicationJSON] = dataclasses.field(default=None)
    r"""Result of a EIN reverse lookup"""  
    ein_verification_lookup_default_application_json_object: Optional[EinVerificationLookupDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Detailed information about the error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    