/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The destination port range.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestinationDestinationPortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The source port range.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestinationSourcePortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * Scopes the analysis to network paths that match specific filters at the destination.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddress?: string;

  @SpeakeasyMetadata()
  destinationPortRange?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestinationDestinationPortRange;

  @SpeakeasyMetadata()
  sourceAddress?: string;

  @SpeakeasyMetadata()
  sourcePortRange?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestinationSourcePortRange;
}

/**
 * The destination port range.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSourceDestinationPortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The source port range.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSourceSourcePortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * Scopes the analysis to network paths that match specific filters at the source.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddress?: string;

  @SpeakeasyMetadata()
  destinationPortRange?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSourceDestinationPortRange;

  @SpeakeasyMetadata()
  sourceAddress?: string;

  @SpeakeasyMetadata()
  sourcePortRange?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSourceSourcePortRange;
}

/**
 * The protocol.
 */
export enum DescribeNetworkInsightsPathsResultNetworkInsightsPathsProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Describes a tag.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPathsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a path.
 */
export class DescribeNetworkInsightsPathsResultNetworkInsightsPaths extends SpeakeasyBase {
  @SpeakeasyMetadata()
  createdDate?: Date;

  @SpeakeasyMetadata()
  destination?: string;

  @SpeakeasyMetadata()
  destinationArn?: string;

  @SpeakeasyMetadata()
  destinationIp?: string;

  @SpeakeasyMetadata()
  destinationPort?: number;

  @SpeakeasyMetadata()
  filterAtDestination?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtDestination;

  @SpeakeasyMetadata()
  filterAtSource?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsFilterAtSource;

  @SpeakeasyMetadata()
  networkInsightsPathArn?: string;

  @SpeakeasyMetadata()
  networkInsightsPathId?: string;

  @SpeakeasyMetadata()
  protocol?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsProtocolEnum;

  @SpeakeasyMetadata()
  source?: string;

  @SpeakeasyMetadata()
  sourceArn?: string;

  @SpeakeasyMetadata()
  sourceIp?: string;

  @SpeakeasyMetadata({
    elemType: DescribeNetworkInsightsPathsResultNetworkInsightsPathsTags,
  })
  tags?: DescribeNetworkInsightsPathsResultNetworkInsightsPathsTags[];
}

/**
 * Success
 */
export class DescribeNetworkInsightsPathsResult extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: DescribeNetworkInsightsPathsResultNetworkInsightsPaths,
  })
  networkInsightsPaths?: DescribeNetworkInsightsPathsResultNetworkInsightsPaths[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
