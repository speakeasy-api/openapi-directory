// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateFormByIDUpdateFormByIDRequestBodyElementsSettings struct {
	// True is the form element is required for submission.
	IsRequired  *bool `json:"isRequired,omitempty"`
	SenderEmail *bool `json:"senderEmail,omitempty"`
	// True if the submitted response should be used as the name for the new folder.
	UseAsFolderName *bool `json:"useAsFolderName,omitempty"`
}

// UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum - Type of form field to use.
type UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum string

const (
	UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnumName       UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum = "name"
	UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnumEmail      UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum = "email"
	UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnumText       UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum = "text"
	UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnumTextarea   UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum = "textarea"
	UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnumUploadArea UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum = "upload_area"
)

func (e *UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "name":
		fallthrough
	case "email":
		fallthrough
	case "text":
		fallthrough
	case "textarea":
		fallthrough
	case "upload_area":
		*e = UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum: %s", s)
	}
}

type UpdateFormByIDUpdateFormByIDRequestBodyElements struct {
	// ID of the form element. If you're adding a new element to the form, do not include this field.
	ID *int64 `json:"id,omitempty"`
	// Name of the form element.
	Name *string `json:"name,omitempty"`
	// The order the fields will be displayed to the recipient. Starts at 0.
	Order    *int64                                                   `json:"order,omitempty"`
	Settings *UpdateFormByIDUpdateFormByIDRequestBodyElementsSettings `json:"settings,omitempty"`
	// Type of form field to use.
	Type *UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum `json:"type,omitempty"`
}

// UpdateFormByIDUpdateFormByIDRequestBody - CSS Styles of the form.
type UpdateFormByIDUpdateFormByIDRequestBody struct {
	CSSStyles *string                                           `json:"cssStyles,omitempty"`
	Elements  []UpdateFormByIDUpdateFormByIDRequestBodyElements `json:"elements,omitempty"`
	// Set a description for the form that will be visible to recipients.
	FormDescription *string `json:"formDescription,omitempty"`
	// Text to be displayed on the submission button.
	SubmitButtonText *string `json:"submitButtonText,omitempty"`
	// Text to be displayed when a recipient has submitted the form.
	SuccessMessage *string `json:"successMessage,omitempty"`
}

type UpdateFormByIDRequest struct {
	RequestBody *UpdateFormByIDUpdateFormByIDRequestBody `request:"mediaType=application/json"`
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API Key required to make the API call.
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
	// Form unique ID number.
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateFormByIDResponse struct {
	ContentType string
	// Successful Operation
	FormResponse *shared.FormResponse
	StatusCode   int
	RawResponse  *http.Response
}
