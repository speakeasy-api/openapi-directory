"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEventRequestBodyIdentificationAccount:
    r"""Account identification requires an accountId, domain or both"""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the account in your database"""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain associated with the account (e.g. acme-inc.com)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEventRequestBodyIdentificationUser:
    r"""User identification requires a userId, email or both"""
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the user"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the user in your database"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEventRequestBodyIdentification:
    r"""Event identification requires a user, account or both"""
    
    account: Optional[TrackJourneyEventRequestBodyIdentificationAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Account identification requires an accountId, domain or both"""  
    user: Optional[TrackJourneyEventRequestBodyIdentificationUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""User identification requires a userId, email or both"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEventRequestBody:
    r"""Event for a user or an account"""
    
    identification: TrackJourneyEventRequestBodyIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""Event identification requires a user, account or both"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)"""  
    triggered_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggeredAt'), 'exclude': lambda f: f is None }})
    r"""If left blank this defaults to the current datetime"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent500ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent500ApplicationJSON:
    r"""The message specifies what is done"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent500ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent429ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent429ApplicationJSON:
    r"""The message specifies what is done"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent429ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent403ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent403ApplicationJSON:
    r"""The message specifies what is done"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent403ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent401ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent401ApplicationJSON:
    r"""The message specifies what is done"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent401ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent400ApplicationJSONErrorsParameters:
    r"""All query-, header- and path- parameters that seemed incorrect"""
    
    header: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})  
    path: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})  
    query: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent400ApplicationJSONErrors:
    r"""Map that sums up all received values that seemed incorrect"""
    
    fields_: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""All input fields that seemed incorrect"""  
    parameters: Optional[TrackJourneyEvent400ApplicationJSONErrorsParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""All query-, header- and path- parameters that seemed incorrect"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent400ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent400ApplicationJSON:
    r"""The message specifies what is done"""
    
    errors: TrackJourneyEvent400ApplicationJSONErrors = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})
    r"""Map that sums up all received values that seemed incorrect"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent400ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent201ApplicationJSONMeta:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})  
    status: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackJourneyEvent201ApplicationJSON:
    r"""The message specifies what is done"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    meta: TrackJourneyEvent201ApplicationJSONMeta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclasses.dataclass
class TrackJourneyEventResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    track_journey_event_201_application_json_object: Optional[TrackJourneyEvent201ApplicationJSON] = dataclasses.field(default=None)
    r"""Object was created"""  
    track_journey_event_400_application_json_object: Optional[TrackJourneyEvent400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad request, some fields or parameters are incorrect"""  
    track_journey_event_401_application_json_object: Optional[TrackJourneyEvent401ApplicationJSON] = dataclasses.field(default=None)
    r"""No API Key was provided or the key is not authorised to perform the action"""  
    track_journey_event_403_application_json_object: Optional[TrackJourneyEvent403ApplicationJSON] = dataclasses.field(default=None)
    r"""The API Key provided is currently not enabled"""  
    track_journey_event_429_application_json_object: Optional[TrackJourneyEvent429ApplicationJSON] = dataclasses.field(default=None)
    r"""Too many API requests were send"""  
    track_journey_event_500_application_json_object: Optional[TrackJourneyEvent500ApplicationJSON] = dataclasses.field(default=None)
    r"""An unexpected error occurred"""  
    