// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputConfigurationContainerDigitalOutputNoConnectionActionEnum - The Action when the device has lost the connection
type OutputConfigurationContainerDigitalOutputNoConnectionActionEnum string

const (
	OutputConfigurationContainerDigitalOutputNoConnectionActionEnumNothing     OutputConfigurationContainerDigitalOutputNoConnectionActionEnum = "Nothing"
	OutputConfigurationContainerDigitalOutputNoConnectionActionEnumTurnOff     OutputConfigurationContainerDigitalOutputNoConnectionActionEnum = "TurnOff"
	OutputConfigurationContainerDigitalOutputNoConnectionActionEnumTurnOn      OutputConfigurationContainerDigitalOutputNoConnectionActionEnum = "TurnOn"
	OutputConfigurationContainerDigitalOutputNoConnectionActionEnumSetPwmValue OutputConfigurationContainerDigitalOutputNoConnectionActionEnum = "SetPwmValue"
)

func (e *OutputConfigurationContainerDigitalOutputNoConnectionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "TurnOff":
		fallthrough
	case "TurnOn":
		fallthrough
	case "SetPwmValue":
		*e = OutputConfigurationContainerDigitalOutputNoConnectionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputConfigurationContainerDigitalOutputNoConnectionActionEnum: %s", s)
	}
}

// OutputConfigurationContainerS0PulseValueEnum - The S0 Pulse Value
type OutputConfigurationContainerS0PulseValueEnum string

const (
	OutputConfigurationContainerS0PulseValueEnumPulseValue1000Kwh  OutputConfigurationContainerS0PulseValueEnum = "PulseValue1000Kwh"
	OutputConfigurationContainerS0PulseValueEnumPulseValue10000Kwh OutputConfigurationContainerS0PulseValueEnum = "PulseValue10000Kwh"
)

func (e *OutputConfigurationContainerS0PulseValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PulseValue1000Kwh":
		fallthrough
	case "PulseValue10000Kwh":
		*e = OutputConfigurationContainerS0PulseValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputConfigurationContainerS0PulseValueEnum: %s", s)
	}
}

// OutputConfigurationContainerTypeEnum - The Type of the output
type OutputConfigurationContainerTypeEnum string

const (
	OutputConfigurationContainerTypeEnumImpulseOutputActiveEnergy       OutputConfigurationContainerTypeEnum = "ImpulseOutputActiveEnergy"
	OutputConfigurationContainerTypeEnumImpulseOutputActiveEnergyImport OutputConfigurationContainerTypeEnum = "ImpulseOutputActiveEnergyImport"
	OutputConfigurationContainerTypeEnumImpulseOutputActiveEnergyExport OutputConfigurationContainerTypeEnum = "ImpulseOutputActiveEnergyExport"
	OutputConfigurationContainerTypeEnumImpulseOutputReactiveEnergy     OutputConfigurationContainerTypeEnum = "ImpulseOutputReactiveEnergy"
	OutputConfigurationContainerTypeEnumDigitalOutput                   OutputConfigurationContainerTypeEnum = "DigitalOutput"
	OutputConfigurationContainerTypeEnumAnalogPwmSignalOutput           OutputConfigurationContainerTypeEnum = "AnalogPwmSignalOutput"
	OutputConfigurationContainerTypeEnumDisabled                        OutputConfigurationContainerTypeEnum = "Disabled"
)

func (e *OutputConfigurationContainerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ImpulseOutputActiveEnergy":
		fallthrough
	case "ImpulseOutputActiveEnergyImport":
		fallthrough
	case "ImpulseOutputActiveEnergyExport":
		fallthrough
	case "ImpulseOutputReactiveEnergy":
		fallthrough
	case "DigitalOutput":
		fallthrough
	case "AnalogPwmSignalOutput":
		fallthrough
	case "Disabled":
		*e = OutputConfigurationContainerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputConfigurationContainerTypeEnum: %s", s)
	}
}

// OutputConfigurationContainer - Configuration for the outputs of a meter (analog/digital outputs)
type OutputConfigurationContainer struct {
	// The Action when the device has lost the connection
	DigitalOutputNoConnectionAction *OutputConfigurationContainerDigitalOutputNoConnectionActionEnum `json:"DigitalOutputNoConnectionAction,omitempty"`
	// The Name of the Output
	Name *string `json:"Name,omitempty"`
	// The number of the Output. (1 for Output 1, 2 for Output 2)
	Number *int `json:"Number,omitempty"`
	// The S0 Pulse Value
	S0PulseValue *OutputConfigurationContainerS0PulseValueEnum `json:"S0PulseValue,omitempty"`
	// The Type of the output
	Type *OutputConfigurationContainerTypeEnum `json:"Type,omitempty"`
}
