"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FirstLastNamePhoneCodedOut:
    r"""Represents the output of inferring the LIKELY country and phone code from a personal name and phone number."""
    
    country_iso2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryIso2'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""The first name (also known as given name)"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    international_phone_number_verified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internationalPhoneNumberVerified'), 'exclude': lambda f: f is None }})
    r"""The normalized phone number, verified using libphonenumber."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""The last name (also known as family name, or surname)"""  
    origin_country_iso2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originCountryIso2'), 'exclude': lambda f: f is None }})
    r"""The likely country of origin of the name."""  
    origin_country_iso2_alt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originCountryIso2Alt'), 'exclude': lambda f: f is None }})
    r"""The best alternative country of origin of the name."""  
    phone_country_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneCountryCode'), 'exclude': lambda f: f is None }})
    r"""The phone country code of the phone number, verified using libphonenumber."""  
    phone_country_code_alt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneCountryCodeAlt'), 'exclude': lambda f: f is None }})
    r"""The best alternative phone country code of the phone number."""  
    phone_country_iso2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneCountryIso2'), 'exclude': lambda f: f is None }})
    r"""The likely country of the phone number."""  
    phone_country_iso2_alt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneCountryIso2Alt'), 'exclude': lambda f: f is None }})
    r"""The best alternative country of the phone number."""  
    phone_country_iso2_verified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneCountryIso2Verified'), 'exclude': lambda f: f is None }})
    r"""The phone ISO2 country code, verified using libphonenumber."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""The input phone number."""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Higher score is better, but score is not normalized. Use calibratedProbability if available."""  
    script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})  
    verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verified'), 'exclude': lambda f: f is None }})
    r"""Indicates if the phone number could be positively verified using libphonenumber."""  
    