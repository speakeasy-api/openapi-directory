"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appliedlicense as shared_appliedlicense
from ..shared import computescheduling as shared_computescheduling
from ..shared import networkinterface as shared_networkinterface
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ComputeEngineTargetDetailsBootOptionEnum(str, Enum):
    r"""The VM Boot Option, as set in the source vm."""
    COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED = 'COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED'
    COMPUTE_ENGINE_BOOT_OPTION_EFI = 'COMPUTE_ENGINE_BOOT_OPTION_EFI'
    COMPUTE_ENGINE_BOOT_OPTION_BIOS = 'COMPUTE_ENGINE_BOOT_OPTION_BIOS'

class ComputeEngineTargetDetailsDiskTypeEnum(str, Enum):
    r"""The disk type to use in the VM."""
    COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED'
    COMPUTE_ENGINE_DISK_TYPE_STANDARD = 'COMPUTE_ENGINE_DISK_TYPE_STANDARD'
    COMPUTE_ENGINE_DISK_TYPE_SSD = 'COMPUTE_ENGINE_DISK_TYPE_SSD'
    COMPUTE_ENGINE_DISK_TYPE_BALANCED = 'COMPUTE_ENGINE_DISK_TYPE_BALANCED'

class ComputeEngineTargetDetailsLicenseTypeEnum(str, Enum):
    r"""The license type to use in OS adaptation."""
    COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT'
    COMPUTE_ENGINE_LICENSE_TYPE_PAYG = 'COMPUTE_ENGINE_LICENSE_TYPE_PAYG'
    COMPUTE_ENGINE_LICENSE_TYPE_BYOL = 'COMPUTE_ENGINE_LICENSE_TYPE_BYOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComputeEngineTargetDetails:
    r"""ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project."""
    
    additional_licenses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalLicenses'), 'exclude': lambda f: f is None }})
    r"""Additional licenses to assign to the VM."""  
    applied_license: Optional[shared_appliedlicense.AppliedLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedLicense'), 'exclude': lambda f: f is None }})
    r"""AppliedLicense holds the license data returned by adaptation module report."""  
    boot_option: Optional[ComputeEngineTargetDetailsBootOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootOption'), 'exclude': lambda f: f is None }})
    r"""The VM Boot Option, as set in the source vm."""  
    compute_scheduling: Optional[shared_computescheduling.ComputeScheduling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeScheduling'), 'exclude': lambda f: f is None }})
    r"""Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes."""  
    disk_type: Optional[ComputeEngineTargetDetailsDiskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskType'), 'exclude': lambda f: f is None }})
    r"""The disk type to use in the VM."""  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname'), 'exclude': lambda f: f is None }})
    r"""The hostname to assign to the VM."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A map of labels to associate with the VM."""  
    license_type: Optional[ComputeEngineTargetDetailsLicenseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})
    r"""The license type to use in OS adaptation."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""The machine type to create the VM with."""  
    machine_type_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineTypeSeries'), 'exclude': lambda f: f is None }})
    r"""The machine type series to create the VM with."""  
    metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata key/value pairs to assign to the VM."""  
    network_interfaces: Optional[list[shared_networkinterface.NetworkInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaces'), 'exclude': lambda f: f is None }})
    r"""List of NICs connected to this VM."""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""A map of network tags to associate with the VM."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""The Google Cloud target project ID or project name."""  
    secure_boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureBoot'), 'exclude': lambda f: f is None }})
    r"""Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""The service account to associate the VM with."""  
    vm_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmName'), 'exclude': lambda f: f is None }})
    r"""The name of the VM to create."""  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone'), 'exclude': lambda f: f is None }})
    r"""The zone in which to create the VM."""  
    