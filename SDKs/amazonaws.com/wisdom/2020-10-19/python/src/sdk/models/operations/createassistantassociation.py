"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createassistantassociationresponse as shared_createassistantassociationresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAssistantAssociationRequestBodyAssociation:
    r"""The data that is input into Wisdom as a result of the assistant association."""
    
    knowledge_base_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseId'), 'exclude': lambda f: f is None }})  
    
class CreateAssistantAssociationRequestBodyAssociationTypeEnum(str, Enum):
    r"""The type of association."""
    KNOWLEDGE_BASE = 'KNOWLEDGE_BASE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAssistantAssociationRequestBody:
    
    association: CreateAssistantAssociationRequestBodyAssociation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('association') }})
    r"""The data that is input into Wisdom as a result of the assistant association."""  
    association_type: CreateAssistantAssociationRequestBodyAssociationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associationType') }})
    r"""The type of association."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\\">Making retries safe with idempotent APIs</a>."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags used to organize, track, or control access for this resource."""  
    

@dataclasses.dataclass
class CreateAssistantAssociationRequest:
    
    assistant_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'assistantId', 'style': 'simple', 'explode': False }})
    r"""The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN."""  
    request_body: CreateAssistantAssociationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateAssistantAssociationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_assistant_association_response: Optional[shared_createassistantassociationresponse.CreateAssistantAssociationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    