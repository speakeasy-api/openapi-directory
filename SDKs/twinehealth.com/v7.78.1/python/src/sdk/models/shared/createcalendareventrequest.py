"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import data as shared_data
from ..shared import type_enum as shared_type_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum(str, Enum):
    r"""Status of responses from attendees"""
    NEEDS_ACTION = 'needsAction'
    DECLINED = 'declined'
    TENTATIVE = 'tentative'
    ACCEPTED = 'accepted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequestDataAttributesAttendees:
    
    response_status: Optional[CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_status'), 'exclude': lambda f: f is None }})
    r"""Status of responses from attendees"""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    
class CreateCalendarEventRequestDataAttributesTypeEnum(str, Enum):
    r"""The type of calendar event. Immutable after event creation."""
    PLAN_CHECK_IN = 'plan-check-in'
    REMINDER = 'reminder'
    TELEPHONE_CALL = 'telephone-call'
    OFFICE_VISIT = 'office-visit'
    VIDEO_CALL = 'video-call'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequestDataAttributes:
    
    attendees: list[CreateCalendarEventRequestDataAttributesAttendees] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendees') }})
    r"""List of attendees for the calendar event"""  
    start_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at') }})
    r"""The date and time when the calendar event starts"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title of the calendar event. Must not be empty or null"""  
    type: CreateCalendarEventRequestDataAttributesTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of calendar event. Immutable after event creation."""  
    all_day: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_day'), 'exclude': lambda f: f is None }})
    r"""True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day."""  
    completed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_at'), 'exclude': lambda f: f is None }})
    r"""The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type."""  
    completed_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_by'), 'exclude': lambda f: f is None }})
    r"""The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    end_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at'), 'exclude': lambda f: f is None }})
    r"""The date and time when the calendar event ends. Not valid for `plan-check-in` event type."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_zone'), 'exclude': lambda f: f is None }})
    r"""The time zone in which the dates for the calendar event are specified"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequestDataRelationshipsOwner:
    
    data: shared_data.Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequestDataRelationships:
    
    owner: Optional[CreateCalendarEventRequestDataRelationshipsOwner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequestData:
    
    attributes: CreateCalendarEventRequestDataAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    relationships: CreateCalendarEventRequestDataRelationships = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})  
    type: shared_type_enum.TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCalendarEventRequest:
    
    data: CreateCalendarEventRequestData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    