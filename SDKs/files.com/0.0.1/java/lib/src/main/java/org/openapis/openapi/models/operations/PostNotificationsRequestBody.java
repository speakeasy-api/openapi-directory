/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostNotificationsRequestBody {
    /**
     * The ID of the group to notify.  Provide `user_id`, `username` or `group_id`.
     */
    @SpeakeasyMetadata("multipartForm:name=group_id")
    public Integer groupId;
    public PostNotificationsRequestBody withGroupId(Integer groupId) {
        this.groupId = groupId;
        return this;
    }
    
    /**
     * Custom message to include in notification emails.
     */
    @SpeakeasyMetadata("multipartForm:name=message")
    public String message;
    public PostNotificationsRequestBody withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.
     */
    @SpeakeasyMetadata("multipartForm:name=notify_on_copy")
    public Boolean notifyOnCopy;
    public PostNotificationsRequestBody withNotifyOnCopy(Boolean notifyOnCopy) {
        this.notifyOnCopy = notifyOnCopy;
        return this;
    }
    
    /**
     * Triggers notification when deleting files from this path
     */
    @SpeakeasyMetadata("multipartForm:name=notify_on_delete")
    public Boolean notifyOnDelete;
    public PostNotificationsRequestBody withNotifyOnDelete(Boolean notifyOnDelete) {
        this.notifyOnDelete = notifyOnDelete;
        return this;
    }
    
    /**
     * Triggers notification when downloading files from this path
     */
    @SpeakeasyMetadata("multipartForm:name=notify_on_download")
    public Boolean notifyOnDownload;
    public PostNotificationsRequestBody withNotifyOnDownload(Boolean notifyOnDownload) {
        this.notifyOnDownload = notifyOnDownload;
        return this;
    }
    
    /**
     * Triggers notification when moving files to this path
     */
    @SpeakeasyMetadata("multipartForm:name=notify_on_move")
    public Boolean notifyOnMove;
    public PostNotificationsRequestBody withNotifyOnMove(Boolean notifyOnMove) {
        this.notifyOnMove = notifyOnMove;
        return this;
    }
    
    /**
     * Triggers notification when uploading new files to this path
     */
    @SpeakeasyMetadata("multipartForm:name=notify_on_upload")
    public Boolean notifyOnUpload;
    public PostNotificationsRequestBody withNotifyOnUpload(Boolean notifyOnUpload) {
        this.notifyOnUpload = notifyOnUpload;
        return this;
    }
    
    /**
     * If `true` actions initiated by the user will still result in a notification
     */
    @SpeakeasyMetadata("multipartForm:name=notify_user_actions")
    public Boolean notifyUserActions;
    public PostNotificationsRequestBody withNotifyUserActions(Boolean notifyUserActions) {
        this.notifyUserActions = notifyUserActions;
        return this;
    }
    
    /**
     * Path
     */
    @SpeakeasyMetadata("multipartForm:name=path")
    public String path;
    public PostNotificationsRequestBody withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * If `true`, enable notifications for each subfolder in this path
     */
    @SpeakeasyMetadata("multipartForm:name=recursive")
    public Boolean recursive;
    public PostNotificationsRequestBody withRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }
    
    /**
     * The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.
     */
    @SpeakeasyMetadata("multipartForm:name=send_interval")
    public String sendInterval;
    public PostNotificationsRequestBody withSendInterval(String sendInterval) {
        this.sendInterval = sendInterval;
        return this;
    }
    
    /**
     * Notify when actions are performed by a share recipient?
     */
    @SpeakeasyMetadata("multipartForm:name=trigger_by_share_recipients")
    public Boolean triggerByShareRecipients;
    public PostNotificationsRequestBody withTriggerByShareRecipients(Boolean triggerByShareRecipients) {
        this.triggerByShareRecipients = triggerByShareRecipients;
        return this;
    }
    
    /**
     * Array of filenames (possibly with wildcards) to match for action path
     */
    @SpeakeasyMetadata("multipartForm:name=triggering_filenames")
    public String[] triggeringFilenames;
    public PostNotificationsRequestBody withTriggeringFilenames(String[] triggeringFilenames) {
        this.triggeringFilenames = triggeringFilenames;
        return this;
    }
    
    /**
     * Only notify on actions made by a member of one of the specified groups
     */
    @SpeakeasyMetadata("multipartForm:name=triggering_group_ids")
    public Integer[] triggeringGroupIds;
    public PostNotificationsRequestBody withTriggeringGroupIds(Integer[] triggeringGroupIds) {
        this.triggeringGroupIds = triggeringGroupIds;
        return this;
    }
    
    /**
     * Only notify on actions made one of the specified users
     */
    @SpeakeasyMetadata("multipartForm:name=triggering_user_ids")
    public Integer[] triggeringUserIds;
    public PostNotificationsRequestBody withTriggeringUserIds(Integer[] triggeringUserIds) {
        this.triggeringUserIds = triggeringUserIds;
        return this;
    }
    
    /**
     * The id of the user to notify. Provide `user_id`, `username` or `group_id`.
     */
    @SpeakeasyMetadata("multipartForm:name=user_id")
    public Integer userId;
    public PostNotificationsRequestBody withUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * The username of the user to notify.  Provide `user_id`, `username` or `group_id`.
     */
    @SpeakeasyMetadata("multipartForm:name=username")
    public String username;
    public PostNotificationsRequestBody withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
