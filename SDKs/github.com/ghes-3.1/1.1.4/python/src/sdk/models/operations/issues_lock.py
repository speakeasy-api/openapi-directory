"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IssuesLockRequestBodyLockReasonEnum(str, Enum):
    r"""The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
    \* `off-topic`  
    \* `too heated`  
    \* `resolved`  
    \* `spam`
    """
    OFF_TOPIC = 'off-topic'
    TOO_HEATED = 'too heated'
    RESOLVED = 'resolved'
    SPAM = 'spam'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IssuesLockRequestBody:
    
    lock_reason: Optional[IssuesLockRequestBodyLockReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lock_reason'), 'exclude': lambda f: f is None }})
    r"""The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
    \* `off-topic`  
    \* `too heated`  
    \* `resolved`  
    \* `spam`
    """  
    

@dataclasses.dataclass
class IssuesLockRequest:
    
    issue_number: int = dataclasses.field(metadata={'path_param': { 'field_name': 'issue_number', 'style': 'simple', 'explode': False }})
    r"""The number that identifies the issue."""  
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: Optional[IssuesLockRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class IssuesLockResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    