// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutEventsIDRequestBodyBehaviourEnum - Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
type PutEventsIDRequestBodyBehaviourEnum string

const (
	PutEventsIDRequestBodyBehaviourEnumOne     PutEventsIDRequestBodyBehaviourEnum = "one"
	PutEventsIDRequestBodyBehaviourEnumForward PutEventsIDRequestBodyBehaviourEnum = "forward"
	PutEventsIDRequestBodyBehaviourEnumAll     PutEventsIDRequestBodyBehaviourEnum = "all"
)

func (e PutEventsIDRequestBodyBehaviourEnum) ToPointer() *PutEventsIDRequestBodyBehaviourEnum {
	return &e
}

func (e *PutEventsIDRequestBodyBehaviourEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "forward":
		fallthrough
	case "all":
		*e = PutEventsIDRequestBodyBehaviourEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutEventsIDRequestBodyBehaviourEnum: %v", v)
	}
}

// PutEventsIDRequestBodyRepeatTypeEnum - The repeat type of the event.
type PutEventsIDRequestBodyRepeatTypeEnum string

const (
	PutEventsIDRequestBodyRepeatTypeEnumOnce        PutEventsIDRequestBodyRepeatTypeEnum = "once"
	PutEventsIDRequestBodyRepeatTypeEnumDaily       PutEventsIDRequestBodyRepeatTypeEnum = "daily"
	PutEventsIDRequestBodyRepeatTypeEnumWeekly      PutEventsIDRequestBodyRepeatTypeEnum = "weekly"
	PutEventsIDRequestBodyRepeatTypeEnumFortnightly PutEventsIDRequestBodyRepeatTypeEnum = "fortnightly"
	PutEventsIDRequestBodyRepeatTypeEnumMonthly     PutEventsIDRequestBodyRepeatTypeEnum = "monthly"
	PutEventsIDRequestBodyRepeatTypeEnumYearly      PutEventsIDRequestBodyRepeatTypeEnum = "yearly"
	PutEventsIDRequestBodyRepeatTypeEnumEachWeekday PutEventsIDRequestBodyRepeatTypeEnum = "each weekday"
)

func (e PutEventsIDRequestBodyRepeatTypeEnum) ToPointer() *PutEventsIDRequestBodyRepeatTypeEnum {
	return &e
}

func (e *PutEventsIDRequestBodyRepeatTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "once":
		fallthrough
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "fortnightly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		fallthrough
	case "each weekday":
		*e = PutEventsIDRequestBodyRepeatTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutEventsIDRequestBodyRepeatTypeEnum: %v", v)
	}
}

type PutEventsIDRequestBody struct {
	// The amount of the event. A positive amount is a credit, and a negative amount is a debit.
	Amount *float64 `json:"amount,omitempty"`
	// Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
	Behaviour PutEventsIDRequestBodyBehaviourEnum `json:"behaviour"`
	// A note for the event.
	Note *string `json:"note,omitempty"`
	// The repeat interval of the event.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// The repeat type of the event.
	RepeatType *PutEventsIDRequestBodyRepeatTypeEnum `json:"repeat_type,omitempty"`
}

type PutEventsIDRequest struct {
	RequestBody *PutEventsIDRequestBody `request:"mediaType=application/json"`
	// The unique identifier of the event.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type PutEventsIDResponse struct {
	ContentType string
	// Bad Request
	Error *shared.Error
	// Success
	Event       *shared.Event
	StatusCode  int
	RawResponse *http.Response
}
