"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assessmentinvoker_enum as shared_assessmentinvoker_enum
from ..shared import assessmentstatus_enum as shared_assessmentstatus_enum
from ..shared import compliancestatus_enum as shared_compliancestatus_enum
from ..shared import cost as shared_cost
from ..shared import disruptioncompliance as shared_disruptioncompliance
from ..shared import resiliencypolicy as shared_resiliencypolicy
from ..shared import resiliencyscore as shared_resiliencyscore
from ..shared import resourceerrorsdetails as shared_resourceerrorsdetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAssessment:
    r"""Defines an application assessment."""
    
    assessment_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessmentArn') }})  
    assessment_status: shared_assessmentstatus_enum.AssessmentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessmentStatus') }})  
    invoker: shared_assessmentinvoker_enum.AssessmentInvokerEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoker') }})  
    app_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appArn'), 'exclude': lambda f: f is None }})  
    app_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appVersion'), 'exclude': lambda f: f is None }})  
    assessment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessmentName'), 'exclude': lambda f: f is None }})  
    compliance: Optional[dict[str, shared_disruptioncompliance.DisruptionCompliance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compliance'), 'exclude': lambda f: f is None }})  
    compliance_status: Optional[shared_compliancestatus_enum.ComplianceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complianceStatus'), 'exclude': lambda f: f is None }})  
    cost: Optional[shared_cost.Cost] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    policy: Optional[shared_resiliencypolicy.ResiliencyPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})  
    resiliency_score: Optional[shared_resiliencyscore.ResiliencyScore] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resiliencyScore'), 'exclude': lambda f: f is None }})  
    resource_errors_details: Optional[shared_resourceerrorsdetails.ResourceErrorsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceErrorsDetails'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    