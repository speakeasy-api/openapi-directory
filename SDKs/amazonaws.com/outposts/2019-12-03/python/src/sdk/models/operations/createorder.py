"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createorderoutput as shared_createorderoutput
from ..shared import lineitemrequest as shared_lineitemrequest
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateOrderRequestBodyPaymentOptionEnum(str, Enum):
    r"""The payment option."""
    ALL_UPFRONT = 'ALL_UPFRONT'
    NO_UPFRONT = 'NO_UPFRONT'
    PARTIAL_UPFRONT = 'PARTIAL_UPFRONT'

class CreateOrderRequestBodyPaymentTermEnum(str, Enum):
    r"""The payment terms."""
    THREE_YEARS = 'THREE_YEARS'
    ONE_YEAR = 'ONE_YEAR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrderRequestBody:
    
    line_items: list[shared_lineitemrequest.LineItemRequest] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LineItems') }})
    r"""The line items that make up the order."""  
    outpost_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutpostIdentifier') }})
    r"""The ID or the Amazon Resource Name (ARN) of the Outpost."""  
    payment_option: CreateOrderRequestBodyPaymentOptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentOption') }})
    r"""The payment option."""  
    payment_term: Optional[CreateOrderRequestBodyPaymentTermEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentTerm'), 'exclude': lambda f: f is None }})
    r"""The payment terms."""  
    

@dataclasses.dataclass
class CreateOrderRequest:
    
    request_body: CreateOrderRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateOrderResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_order_output: Optional[shared_createorderoutput.CreateOrderOutput] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    