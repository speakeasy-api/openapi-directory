// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ImcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ImcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// ImcerRequestBodyFormatEnum - The format of the certificate in response.
type ImcerRequestBodyFormatEnum string

const (
	ImcerRequestBodyFormatEnumPdf ImcerRequestBodyFormatEnum = "pdf"
)

func (e *ImcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ImcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImcerRequestBodyFormatEnum: %s", s)
	}
}

// ImcerRequestBody - Request format
type ImcerRequestBody struct {
	CertificateParameters *ImcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ImcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Imcer504ApplicationJSONErrorEnum string

const (
	Imcer504ApplicationJSONErrorEnumGatewayTimeout Imcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Imcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Imcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer504ApplicationJSONErrorDescriptionEnum string

const (
	Imcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Imcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Imcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Imcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer504ApplicationJSON - Gateway timeout
type Imcer504ApplicationJSON struct {
	Error            *Imcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer503ApplicationJSONErrorEnum string

const (
	Imcer503ApplicationJSONErrorEnumServiceUnavailable Imcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Imcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Imcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer503ApplicationJSONErrorDescriptionEnum string

const (
	Imcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Imcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Imcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Imcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer503ApplicationJSON - Service unavailable
type Imcer503ApplicationJSON struct {
	Error            *Imcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer502ApplicationJSONErrorEnum string

const (
	Imcer502ApplicationJSONErrorEnumBadGatewy Imcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Imcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Imcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer502ApplicationJSONErrorDescriptionEnum string

const (
	Imcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Imcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Imcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Imcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer502ApplicationJSON - Bad gateway
type Imcer502ApplicationJSON struct {
	Error            *Imcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer500ApplicationJSONErrorEnum string

const (
	Imcer500ApplicationJSONErrorEnumInternalServerError Imcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Imcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Imcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer500ApplicationJSONErrorDescriptionEnum string

const (
	Imcer500ApplicationJSONErrorDescriptionEnumInternalServerError Imcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Imcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Imcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer500ApplicationJSON - Internal server error
type Imcer500ApplicationJSON struct {
	Error            *Imcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer404ApplicationJSONErrorEnum string

const (
	Imcer404ApplicationJSONErrorEnumRecordNotFound Imcer404ApplicationJSONErrorEnum = "record_not_found"
	Imcer404ApplicationJSONErrorEnumURLNotFound    Imcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Imcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Imcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer404ApplicationJSONErrorDescriptionEnum string

const (
	Imcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Imcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Imcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Imcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Imcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Imcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer404ApplicationJSON - No record found
type Imcer404ApplicationJSON struct {
	Error            *Imcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer401ApplicationJSONErrorEnum string

const (
	Imcer401ApplicationJSONErrorEnumInvalidAuthentication Imcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Imcer401ApplicationJSONErrorEnumInvalidAuthorization  Imcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Imcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Imcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer401ApplicationJSONErrorDescriptionEnum string

const (
	Imcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Imcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Imcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Imcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Imcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Imcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer401ApplicationJSON - Unauthorized access
type Imcer401ApplicationJSON struct {
	Error            *Imcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Imcer400ApplicationJSONErrorEnum string

const (
	Imcer400ApplicationJSONErrorEnumMissingParameter Imcer400ApplicationJSONErrorEnum = "missing_parameter"
	Imcer400ApplicationJSONErrorEnumInvalidParameter Imcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Imcer400ApplicationJSONErrorEnumInvalidFormat    Imcer400ApplicationJSONErrorEnum = "invalid_format"
	Imcer400ApplicationJSONErrorEnumInvalidTxnid     Imcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Imcer400ApplicationJSONErrorEnumInvalidConsentid Imcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Imcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Imcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Imcer400ApplicationJSONErrorDescriptionEnum string

const (
	Imcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Imcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Imcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Imcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Imcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Imcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Imcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Imcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Imcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Imcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Imcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Imcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Imcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Imcer400ApplicationJSON - Bad request
type Imcer400ApplicationJSON struct {
	Error            *Imcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Imcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ImcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Imcer400ApplicationJSONObject *Imcer400ApplicationJSON
	// Unauthorized access
	Imcer401ApplicationJSONObject *Imcer401ApplicationJSON
	// No record found
	Imcer404ApplicationJSONObject *Imcer404ApplicationJSON
	// Internal server error
	Imcer500ApplicationJSONObject *Imcer500ApplicationJSON
	// Bad gateway
	Imcer502ApplicationJSONObject *Imcer502ApplicationJSON
	// Service unavailable
	Imcer503ApplicationJSONObject *Imcer503ApplicationJSON
	// Gateway timeout
	Imcer504ApplicationJSONObject *Imcer504ApplicationJSON
}
