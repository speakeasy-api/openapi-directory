"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequestBodyTypeEnum(str, Enum):
    COMMERCIAL_INVOICE = 'commercial-invoice'
    CREDIT_NOTE = 'credit-note'
    AMENDING_INVOICE = 'amending-invoice'
    SELF_BILLING = 'self-billing'
    CREDIT_SELF_BILLING = 'credit-self-billing'
    DOWN_PAYMENT_INVOICE = 'down-payment-invoice'
    INFORMATIONS_INVOICE = 'informations-invoice'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequestBody:
    r"""A invoice to modify"""
    
    before_vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BeforeVAT'), 'exclude': lambda f: f is None }})  
    due_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueDate'), 'exclude': lambda f: f is None }})  
    incl_vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclVAT'), 'exclude': lambda f: f is None }})  
    invoice_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceDate'), 'exclude': lambda f: f is None }})  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})  
    payment_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentDate'), 'exclude': lambda f: f is None }})  
    type: Optional[PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequestBodyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VAT'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequest:
    
    document_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'documentId', 'style': 'simple', 'explode': False }})
    r"""Id of the document"""  
    folder_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'folderId', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    request_body: Optional[PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""A invoice to modify"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    