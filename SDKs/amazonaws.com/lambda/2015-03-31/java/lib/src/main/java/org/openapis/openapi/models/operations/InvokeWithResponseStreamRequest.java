/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class InvokeWithResponseStreamRequest {
    /**
     * &lt;p&gt;The name of the Lambda function.&lt;/p&gt; &lt;p class="title"&gt; &lt;b&gt;Name formats&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Function name&lt;/b&gt; \u2013 &lt;code&gt;my-function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Function ARN&lt;/b&gt; \u2013 &lt;code&gt;arn:aws:lambda:us-west-2:123456789012:function:my-function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Partial ARN&lt;/b&gt; \u2013 &lt;code&gt;123456789012:function:my-function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.&lt;/p&gt;
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=FunctionName")
    public String functionName;

    public InvokeWithResponseStreamRequest withFunctionName(String functionName) {
        this.functionName = functionName;
        return this;
    }
    
    /**
     * The alias name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Qualifier")
    public String qualifier;

    public InvokeWithResponseStreamRequest withQualifier(String qualifier) {
        this.qualifier = qualifier;
        return this;
    }
    
    @SpeakeasyMetadata("request:mediaType=application/json")
    public InvokeWithResponseStreamRequestBody requestBody;

    public InvokeWithResponseStreamRequest withRequestBody(InvokeWithResponseStreamRequestBody requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;

    public InvokeWithResponseStreamRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    /**
     * Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Client-Context")
    public String xAmzClientContext;

    public InvokeWithResponseStreamRequest withXAmzClientContext(String xAmzClientContext) {
        this.xAmzClientContext = xAmzClientContext;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;

    public InvokeWithResponseStreamRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;

    public InvokeWithResponseStreamRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;

    public InvokeWithResponseStreamRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    /**
     * &lt;p&gt;Use one of the following options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestResponse&lt;/code&gt; (default) \u2013 Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API operation response includes the function response and additional data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DryRun&lt;/code&gt; \u2013 Validate parameter values and verify that the IAM user or role has permission to invoke the function.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Invocation-Type")
    public InvokeWithResponseStreamXAmzInvocationTypeEnum xAmzInvocationType;

    public InvokeWithResponseStreamRequest withXAmzInvocationType(InvokeWithResponseStreamXAmzInvocationTypeEnum xAmzInvocationType) {
        this.xAmzInvocationType = xAmzInvocationType;
        return this;
    }
    
    /**
     * Set to &lt;code&gt;Tail&lt;/code&gt; to include the execution log in the response. Applies to synchronously invoked functions only.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Log-Type")
    public InvokeWithResponseStreamXAmzLogTypeEnum xAmzLogType;

    public InvokeWithResponseStreamRequest withXAmzLogType(InvokeWithResponseStreamXAmzLogTypeEnum xAmzLogType) {
        this.xAmzLogType = xAmzLogType;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;

    public InvokeWithResponseStreamRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;

    public InvokeWithResponseStreamRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;

    public InvokeWithResponseStreamRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    public InvokeWithResponseStreamRequest(@JsonProperty("FunctionName") String functionName, @JsonProperty("RequestBody") InvokeWithResponseStreamRequestBody requestBody) {
        this.functionName = functionName;
        this.requestBody = requestBody;
  }
}
