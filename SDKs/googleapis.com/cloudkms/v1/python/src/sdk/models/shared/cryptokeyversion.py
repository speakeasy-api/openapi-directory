"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import externalprotectionleveloptions as shared_externalprotectionleveloptions
from ..shared import keyoperationattestation as shared_keyoperationattestation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CryptoKeyVersionAlgorithmEnum(str, Enum):
    r"""Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports."""
    CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED = 'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED'
    GOOGLE_SYMMETRIC_ENCRYPTION = 'GOOGLE_SYMMETRIC_ENCRYPTION'
    RSA_SIGN_PSS_2048_SHA256 = 'RSA_SIGN_PSS_2048_SHA256'
    RSA_SIGN_PSS_3072_SHA256 = 'RSA_SIGN_PSS_3072_SHA256'
    RSA_SIGN_PSS_4096_SHA256 = 'RSA_SIGN_PSS_4096_SHA256'
    RSA_SIGN_PSS_4096_SHA512 = 'RSA_SIGN_PSS_4096_SHA512'
    RSA_SIGN_PKCS1_2048_SHA256 = 'RSA_SIGN_PKCS1_2048_SHA256'
    RSA_SIGN_PKCS1_3072_SHA256 = 'RSA_SIGN_PKCS1_3072_SHA256'
    RSA_SIGN_PKCS1_4096_SHA256 = 'RSA_SIGN_PKCS1_4096_SHA256'
    RSA_SIGN_PKCS1_4096_SHA512 = 'RSA_SIGN_PKCS1_4096_SHA512'
    RSA_SIGN_RAW_PKCS1_2048 = 'RSA_SIGN_RAW_PKCS1_2048'
    RSA_SIGN_RAW_PKCS1_3072 = 'RSA_SIGN_RAW_PKCS1_3072'
    RSA_SIGN_RAW_PKCS1_4096 = 'RSA_SIGN_RAW_PKCS1_4096'
    RSA_DECRYPT_OAEP_2048_SHA256 = 'RSA_DECRYPT_OAEP_2048_SHA256'
    RSA_DECRYPT_OAEP_3072_SHA256 = 'RSA_DECRYPT_OAEP_3072_SHA256'
    RSA_DECRYPT_OAEP_4096_SHA256 = 'RSA_DECRYPT_OAEP_4096_SHA256'
    RSA_DECRYPT_OAEP_4096_SHA512 = 'RSA_DECRYPT_OAEP_4096_SHA512'
    RSA_DECRYPT_OAEP_2048_SHA1 = 'RSA_DECRYPT_OAEP_2048_SHA1'
    RSA_DECRYPT_OAEP_3072_SHA1 = 'RSA_DECRYPT_OAEP_3072_SHA1'
    RSA_DECRYPT_OAEP_4096_SHA1 = 'RSA_DECRYPT_OAEP_4096_SHA1'
    EC_SIGN_P256_SHA256 = 'EC_SIGN_P256_SHA256'
    EC_SIGN_P384_SHA384 = 'EC_SIGN_P384_SHA384'
    EC_SIGN_SECP256_K1_SHA256 = 'EC_SIGN_SECP256K1_SHA256'
    HMAC_SHA256 = 'HMAC_SHA256'
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_SHA384 = 'HMAC_SHA384'
    HMAC_SHA512 = 'HMAC_SHA512'
    HMAC_SHA224 = 'HMAC_SHA224'
    EXTERNAL_SYMMETRIC_ENCRYPTION = 'EXTERNAL_SYMMETRIC_ENCRYPTION'

class CryptoKeyVersionProtectionLevelEnum(str, Enum):
    r"""Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion."""
    PROTECTION_LEVEL_UNSPECIFIED = 'PROTECTION_LEVEL_UNSPECIFIED'
    SOFTWARE = 'SOFTWARE'
    HSM = 'HSM'
    EXTERNAL = 'EXTERNAL'
    EXTERNAL_VPC = 'EXTERNAL_VPC'

class CryptoKeyVersionStateEnum(str, Enum):
    r"""The current state of the CryptoKeyVersion."""
    CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = 'CRYPTO_KEY_VERSION_STATE_UNSPECIFIED'
    PENDING_GENERATION = 'PENDING_GENERATION'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    DESTROYED = 'DESTROYED'
    DESTROY_SCHEDULED = 'DESTROY_SCHEDULED'
    PENDING_IMPORT = 'PENDING_IMPORT'
    IMPORT_FAILED = 'IMPORT_FAILED'
    GENERATION_FAILED = 'GENERATION_FAILED'
    PENDING_EXTERNAL_DESTRUCTION = 'PENDING_EXTERNAL_DESTRUCTION'
    EXTERNAL_DESTRUCTION_FAILED = 'EXTERNAL_DESTRUCTION_FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CryptoKeyVersion:
    r"""A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS."""
    
    algorithm: Optional[CryptoKeyVersionAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithm'), 'exclude': lambda f: f is None }})
    r"""Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports."""  
    attestation: Optional[shared_keyoperationattestation.KeyOperationAttestation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestation'), 'exclude': lambda f: f is None }})
    r"""Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key)."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which this CryptoKeyVersion was created."""  
    destroy_event_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destroyEventTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED."""  
    destroy_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destroyTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED."""  
    external_destruction_failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalDestructionFailureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED."""  
    external_protection_level_options: Optional[shared_externalprotectionleveloptions.ExternalProtectionLevelOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalProtectionLevelOptions'), 'exclude': lambda f: f is None }})
    r"""ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels."""  
    generate_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this CryptoKeyVersion's key material was generated."""  
    generation_failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generationFailureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED."""  
    import_failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importFailureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED."""  
    import_job: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importJob'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported."""  
    import_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which this CryptoKeyVersion's key material was most recently imported."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`."""  
    protection_level: Optional[CryptoKeyVersionProtectionLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protectionLevel'), 'exclude': lambda f: f is None }})
    r"""Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion."""  
    reimport_eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reimportEligible'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version."""  
    state: Optional[CryptoKeyVersionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the CryptoKeyVersion."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CryptoKeyVersionInput:
    r"""A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS."""
    
    attestation: Optional[shared_keyoperationattestation.KeyOperationAttestationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestation'), 'exclude': lambda f: f is None }})
    r"""Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key)."""  
    external_protection_level_options: Optional[shared_externalprotectionleveloptions.ExternalProtectionLevelOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalProtectionLevelOptions'), 'exclude': lambda f: f is None }})
    r"""ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels."""  
    state: Optional[CryptoKeyVersionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the CryptoKeyVersion."""  
    