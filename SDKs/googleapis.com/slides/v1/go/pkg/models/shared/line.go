// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LineLineCategoryEnum - The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
type LineLineCategoryEnum string

const (
	LineLineCategoryEnumLineCategoryUnspecified LineLineCategoryEnum = "LINE_CATEGORY_UNSPECIFIED"
	LineLineCategoryEnumStraight                LineLineCategoryEnum = "STRAIGHT"
	LineLineCategoryEnumBent                    LineLineCategoryEnum = "BENT"
	LineLineCategoryEnumCurved                  LineLineCategoryEnum = "CURVED"
)

func (e LineLineCategoryEnum) ToPointer() *LineLineCategoryEnum {
	return &e
}

func (e *LineLineCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LINE_CATEGORY_UNSPECIFIED":
		fallthrough
	case "STRAIGHT":
		fallthrough
	case "BENT":
		fallthrough
	case "CURVED":
		*e = LineLineCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineLineCategoryEnum: %v", v)
	}
}

// LineLineTypeEnum - The type of the line.
type LineLineTypeEnum string

const (
	LineLineTypeEnumTypeUnspecified    LineLineTypeEnum = "TYPE_UNSPECIFIED"
	LineLineTypeEnumStraightConnector1 LineLineTypeEnum = "STRAIGHT_CONNECTOR_1"
	LineLineTypeEnumBentConnector2     LineLineTypeEnum = "BENT_CONNECTOR_2"
	LineLineTypeEnumBentConnector3     LineLineTypeEnum = "BENT_CONNECTOR_3"
	LineLineTypeEnumBentConnector4     LineLineTypeEnum = "BENT_CONNECTOR_4"
	LineLineTypeEnumBentConnector5     LineLineTypeEnum = "BENT_CONNECTOR_5"
	LineLineTypeEnumCurvedConnector2   LineLineTypeEnum = "CURVED_CONNECTOR_2"
	LineLineTypeEnumCurvedConnector3   LineLineTypeEnum = "CURVED_CONNECTOR_3"
	LineLineTypeEnumCurvedConnector4   LineLineTypeEnum = "CURVED_CONNECTOR_4"
	LineLineTypeEnumCurvedConnector5   LineLineTypeEnum = "CURVED_CONNECTOR_5"
	LineLineTypeEnumStraightLine       LineLineTypeEnum = "STRAIGHT_LINE"
)

func (e LineLineTypeEnum) ToPointer() *LineLineTypeEnum {
	return &e
}

func (e *LineLineTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "STRAIGHT_CONNECTOR_1":
		fallthrough
	case "BENT_CONNECTOR_2":
		fallthrough
	case "BENT_CONNECTOR_3":
		fallthrough
	case "BENT_CONNECTOR_4":
		fallthrough
	case "BENT_CONNECTOR_5":
		fallthrough
	case "CURVED_CONNECTOR_2":
		fallthrough
	case "CURVED_CONNECTOR_3":
		fallthrough
	case "CURVED_CONNECTOR_4":
		fallthrough
	case "CURVED_CONNECTOR_5":
		fallthrough
	case "STRAIGHT_LINE":
		*e = LineLineTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineLineTypeEnum: %v", v)
	}
}

// Line - A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
type Line struct {
	// The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
	LineCategory *LineLineCategoryEnum `json:"lineCategory,omitempty"`
	// The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
	LineProperties *LineProperties `json:"lineProperties,omitempty"`
	// The type of the line.
	LineType *LineLineTypeEnum `json:"lineType,omitempty"`
}
