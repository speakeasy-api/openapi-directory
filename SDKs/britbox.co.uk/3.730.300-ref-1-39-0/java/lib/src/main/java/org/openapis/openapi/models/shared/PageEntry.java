/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PageEntry - Represents an entry of a Page.
 * Defines what specific piece of content should be presented e.g. an Item or ItemList.
 * Also defines what visual template should be used to render that content.
 * 
 */
public class PageEntry {
    /**
     * A map of custom fields defined by a curator for a page entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;

    public PageEntry withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The unique identifier for a page entry.
     */
    @JsonProperty("id")
    public String id;

    public PageEntry withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The images for the page entry if any.
     * 
     * For example the images of an `ImageEntry`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public java.util.Map<String, String> images;

    public PageEntry withImages(java.util.Map<String, String> images) {
        this.images = images;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item")
    public ItemSummary item;

    public PageEntry withItem(ItemSummary item) {
        this.item = item;
        return this;
    }
    
    /**
     * A pageable list of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list")
    public ItemList list;

    public PageEntry withList(ItemList list) {
        this.list = list;
        return this;
    }
    
    /**
     * If 'type' is 'PeopleEntry' then this is the array of people to present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people")
    public Person[] people;

    public PageEntry withPeople(Person[] people) {
        this.people = people;
        return this;
    }
    
    /**
     * Template type used to present the content of the PageEntry.
     */
    @JsonProperty("template")
    public String template;

    public PageEntry withTemplate(String template) {
        this.template = template;
        return this;
    }
    
    /**
     * If 'type' is 'TextEntry' then this is the text to be represented.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;

    public PageEntry withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * The name of the Page Entry.
     */
    @JsonProperty("title")
    public String title;

    public PageEntry withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of PageEntry. Used to help identify what type of content will be presented.
     */
    @JsonProperty("type")
    public PageEntryTypeEnum type;

    public PageEntry withType(PageEntryTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public PageEntry(@JsonProperty("id") String id, @JsonProperty("template") String template, @JsonProperty("title") String title, @JsonProperty("type") PageEntryTypeEnum type) {
        this.id = id;
        this.template = template;
        this.title = title;
        this.type = type;
  }
}
