<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProjectsSmartV2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * addExternalFileLinks
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksResponse
     */
	public function addExternalFileLinks(
        \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files/addExternalLink', \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "externalFileDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddExternalFileLinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Adds file links to the project as added by PM.
     * 
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Response
     */
	public function addFileLinks1(
        \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files/addLink', \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileLinkCategorizationsDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddFileLinks1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds files to the project as added by PM.
     * 
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see "POST /v2/projects/{projectId}/files/upload" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddFiles1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddFiles1Response
     */
	public function addFiles1(
        \OpenAPI\OpenAPI\Models\Operations\AddFiles1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddFiles1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files/add', \OpenAPI\OpenAPI\Models\Operations\AddFiles1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileCategorizationsDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddFiles1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns process id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessResponse
     */
	public function addJobToProcess(
        \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/addJob', \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddJobToProcessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catToolProjectDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CATToolProjectDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Prepares a ZIP archive that contains the specified files.
     * 
     * Prepares a ZIP archive that contains the specified files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\FilesDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveResponse
     */
	public function archive(
        \OpenAPI\OpenAPI\Models\Shared\FilesDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/files/archive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesArchiveDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesArchiveDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     * 
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>CANCELLED – available when the job has one of the following statuses: OPEN, STARTED</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Response
     */
	public function changeStatus2(
        \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/status', \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectStatusDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeStatus2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Adds a payable to a project.
     * 
     * Adds a payable to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Response
     */
	public function createPayable2(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/payables', \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a receivable to a project.
     * 
     * Adds a receivable to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Response
     */
	public function createReceivable2(
        \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/receivables', \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReceivable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Smart Project.
     * 
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProjectCreateDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create6Response
     */
	public function create6(
        \OpenAPI\OpenAPI\Models\Shared\ProjectCreateDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create6Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create6Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDTOv2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDTOv2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a payable.
     * 
     * Deletes a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Response
     */
	public function deletePayable2(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a receivable.
     * 
     * Deletes a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Response
     */
	public function deleteReceivable2(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns project details.
     * 
     * Returns project details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Response
     */
	public function getByExternalId1(
        \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/for-external-id/{externalProjectId}', \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetByExternalId1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDTOv2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDTOv2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns project details.
     * 
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById9Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById9Response
     */
	public function getById9(
        \OpenAPI\OpenAPI\Models\Operations\GetById9Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById9Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}', \OpenAPI\OpenAPI\Models\Operations\GetById9Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById9Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDTOv2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDTOv2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns if cat tool project is created or queued.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoResponse
     */
	public function getCATToolProjectInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/catToolProject', \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCATToolProjectInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catToolProjectDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CATToolProjectDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns Client Contacts information for a project.
     * 
     * Returns Client Contacts information for a project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContacts2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContacts2Response
     */
	public function getContacts2(
        \OpenAPI\OpenAPI\Models\Operations\GetContacts2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContacts2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/clientContacts', \OpenAPI\OpenAPI\Models\Operations\GetContacts2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContacts2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->smartContactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SmartContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of custom field keys and values for a project.
     * 
     * Returns a list of custom field keys and values for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Response
     */
	public function getCustomFields8(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields8Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     * 
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:<ul><li>the file was added to a job in the last step in the process</li><li>the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)</li><li>the job is finished (has Ready status)</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesResponse
     */
	public function getDeliverableFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files/deliverable', \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeliverableFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectFileDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectFileDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns details of a file.
     * 
     * Returns details of a file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileById2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileById2Response
     */
	public function getFileById2(
        \OpenAPI\OpenAPI\Models\Operations\GetFileById2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileById2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/files/{fileId}', \OpenAPI\OpenAPI\Models\Operations\GetFileById2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileById2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectFileDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectFileDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Downloads a file content.
     * 
     * Downloads a file content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdResponse
     */
	public function getFileContentById(
        \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/files/{fileId}/download/{fileName}', \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileContentByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Returns list of files in a project.
     * 
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse
     */
	public function getFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files', \OpenAPI\OpenAPI\Models\Operations\GetFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectFileDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectFileDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns finance information for a project.
     * 
     * Returns finance information for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFinance2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFinance2Response
     */
	public function getFinance2(
        \OpenAPI\OpenAPI\Models\Operations\GetFinance2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFinance2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance', \OpenAPI\OpenAPI\Models\Operations\GetFinance2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFinance2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->financeDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FinanceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of jobs in a project.
     * 
     * Returns list of jobs in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobsResponse
     */
	public function getJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/jobs', \OpenAPI\OpenAPI\Models\Operations\GetJobsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JobDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns process id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProcessIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProcessIdResponse
     */
	public function getProcessId(
        \OpenAPI\OpenAPI\Models\Operations\GetProcessIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProcessIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/process', \OpenAPI\OpenAPI\Models\Operations\GetProcessIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProcessIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catToolProjectDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CATToolProjectDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates Client Deadline for a project.
     * 
     * Updates Client Deadline for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineResponse
     */
	public function updateClientDeadline(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/clientDeadline', \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timeDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientDeadlineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Notes for a project.
     * 
     * Updates Client Notes for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesResponse
     */
	public function updateClientNotes(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/clientNotes', \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Reference Number for a project.
     * 
     * Updates Client Reference Number for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberResponse
     */
	public function updateClientReferenceNumber(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/clientReferenceNumber', \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Contacts for a project.
     * 
     * Updates Client Contacts for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Response
     */
	public function updateContacts2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/clientContacts', \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "smartContactsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContacts2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->smartContactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SmartContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a custom field with a specified key in a project
     * 
     * Updates a custom field with a specified key in a project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Response
     */
	public function updateCustomField2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/customFields/{key}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "smartCustomFieldDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Internal Notes for a project.
     * 
     * Updates Internal Notes for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesResponse
     */
	public function updateInternalNotes(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/internalNotes', \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Order Date for a project.
     * 
     * Updates Order Date for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnResponse
     */
	public function updateOrderedOn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/orderDate', \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timeDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrderedOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates a payable.
     * 
     * Updates a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Response
     */
	public function updatePayable2(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a receivable.
     * 
     * Updates a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Response
     */
	public function updateReceivable2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates source language for a project.
     * 
     * Updates source language for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageResponse
     */
	public function updateSourceLanguage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/sourceLanguage', \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sourceLanguageDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates specialization for a project.
     * 
     * Updates specialization for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationResponse
     */
	public function updateSpecialization(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/specialization', \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "specializationDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpecializationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates target languages for a project.
     * 
     * Updates target languages for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesResponse
     */
	public function updateTargetLanguages(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/targetLanguages', \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetLanguagesDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates instructions for all vendors performing the jobs in a project.
     * 
     * Updates instructions for all vendors performing the jobs in a project. See also "PUT /jobs/{jobId}/instructions" for updating instructions for a specific job in a project or quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsResponse
     */
	public function updateVendorInstructions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/vendorInstructions', \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates volume for a project.
     * 
     * Updates volume for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeResponse
     */
	public function updateVolume(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/volume', \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bigDecimalDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVolumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Uploads file to the project as a file uploaded by PM.
     * 
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see "PUT /v2/projects/{projectId}/files/add" operation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadFile2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadFile2Response
     */
	public function uploadFile2(
        \OpenAPI\OpenAPI\Models\Operations\UploadFile2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadFile2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/projects/{projectId}/files/upload', \OpenAPI\OpenAPI\Models\Operations\UploadFile2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileToUploadDto", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadFile2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileDto1', 'json');
            }
        }

        return $response;
    }
}