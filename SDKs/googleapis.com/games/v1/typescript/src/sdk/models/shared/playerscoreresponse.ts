/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PlayerScore } from "./playerscore";
import { Expose, Type } from "class-transformer";

export enum PlayerScoreResponseBeatenScoreTimeSpansEnum {
  ScoreTimeSpanUnspecified = "SCORE_TIME_SPAN_UNSPECIFIED",
  AllTime = "ALL_TIME",
  Weekly = "WEEKLY",
  Daily = "DAILY",
}

/**
 * A list of leaderboard entry resources.
 */
export class PlayerScoreResponse extends SpeakeasyBase {
  /**
   * The time spans where the submitted score is better than the existing score for that time span.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beatenScoreTimeSpans" })
  beatenScoreTimeSpans?: PlayerScoreResponseBeatenScoreTimeSpansEnum[];

  /**
   * The formatted value of the submitted score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedScore" })
  formattedScore?: string;

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The leaderboard ID that this score was submitted to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leaderboardId" })
  leaderboardId?: string;

  /**
   * Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scoreTag" })
  scoreTag?: string;

  /**
   * The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.
   */
  @SpeakeasyMetadata({ elemType: PlayerScore })
  @Expose({ name: "unbeatenScores" })
  @Type(() => PlayerScore)
  unbeatenScores?: PlayerScore[];
}
