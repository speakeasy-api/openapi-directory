/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Revision - A revision of a file.
 */
public class Revision {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadUrl")
    public String downloadUrl;

    public Revision withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * The ETag of the revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Revision withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Links for exporting Docs Editors files to specific formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exportLinks")
    public java.util.Map<String, String> exportLinks;

    public Revision withExportLinks(java.util.Map<String, String> exportLinks) {
        this.exportLinks = exportLinks;
        return this;
    }
    
    /**
     * The size of the revision in bytes. This will only be populated on files with content stored in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSize")
    public String fileSize;

    public Revision withFileSize(String fileSize) {
        this.fileSize = fileSize;
        return this;
    }
    
    /**
     * The ID of the revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Revision withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * This is always drive#revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Revision withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifyingUser")
    public User lastModifyingUser;

    public Revision withLastModifyingUser(User lastModifyingUser) {
        this.lastModifyingUser = lastModifyingUser;
        return this;
    }
    
    /**
     * Name of the last user to modify this revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifyingUserName")
    public String lastModifyingUserName;

    public Revision withLastModifyingUserName(String lastModifyingUserName) {
        this.lastModifyingUserName = lastModifyingUserName;
        return this;
    }
    
    /**
     * An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5Checksum")
    public String md5Checksum;

    public Revision withMd5Checksum(String md5Checksum) {
        this.md5Checksum = md5Checksum;
        return this;
    }
    
    /**
     * The MIME type of the revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;

    public Revision withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Last time this revision was modified (formatted RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedDate")
    public OffsetDateTime modifiedDate;

    public Revision withModifiedDate(OffsetDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * The original filename when this revision was created. This will only be populated on files with content stored in Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalFilename")
    public String originalFilename;

    public Revision withOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
        return this;
    }
    
    /**
     * Whether this revision is pinned to prevent automatic purging. If not set, the revision is automatically purged 30 days after newer content is uploaded. This field can only be modified on files with content stored in Drive, excluding Docs Editors files. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinned")
    public Boolean pinned;

    public Revision withPinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }
    
    /**
     * Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishAuto")
    public Boolean publishAuto;

    public Revision withPublishAuto(Boolean publishAuto) {
        this.publishAuto = publishAuto;
        return this;
    }
    
    /**
     * Whether this revision is published. This is only populated and can only be modified for Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published")
    public Boolean published;

    public Revision withPublished(Boolean published) {
        this.published = published;
        return this;
    }
    
    /**
     * A link to the published revision. This is only populated for Google Sites files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedLink")
    public String publishedLink;

    public Revision withPublishedLink(String publishedLink) {
        this.publishedLink = publishedLink;
        return this;
    }
    
    /**
     * Whether this revision is published outside the domain. This is only populated and can only be modified for Docs Editors files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedOutsideDomain")
    public Boolean publishedOutsideDomain;

    public Revision withPublishedOutsideDomain(Boolean publishedOutsideDomain) {
        this.publishedOutsideDomain = publishedOutsideDomain;
        return this;
    }
    
    /**
     * A link back to this revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Revision withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    public Revision(){}
}
