"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Services:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_consumer_v1_services(self, request: operations.GetConsumerV1ServicesRequest) -> operations.GetConsumerV1ServicesResponse:
        r"""List Services
        <p>Use this endpoint to <b>List Services</b> available at your business location and/or company. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/services'
        
        query_params = utils.get_query_params(operations.GetConsumerV1ServicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceListViewModel])
                res.service_list_view_model = out

        return res

    def get_consumer_v1_services_allocations_id_(self, request: operations.GetConsumerV1ServicesAllocationsIDRequest) -> operations.GetConsumerV1ServicesAllocationsIDResponse:
        r"""Get Service Allocation
        <p>Use this endpoint to return a <b>Service Allocation</b> object. A valid <b>serviceAllocation id</b> is required. Find service allocation id's by using the <i>GET/consumer\u200B/v1\u200B/services\u200B/{id}\u200B/allocations</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ServicesAllocationsIDRequest, base_url, '/consumer/v1/services/allocations/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ServicesAllocationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceAllocationViewModel])
                res.service_allocation_view_model = out

        return res

    def get_consumer_v1_services_id_(self, request: operations.GetConsumerV1ServicesIDRequest) -> operations.GetConsumerV1ServicesIDResponse:
        r"""Get Service
        <p>Use this endpoint to return a <b>Service</b> object. A valid <b>service id</b> is required. Find service id's by using the <i>GET /consumer/v1/services</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ServicesIDRequest, base_url, '/consumer/v1/services/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ServicesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceViewModel])
                res.service_view_model = out

        return res

    def get_consumer_v1_services_id_allocations(self, request: operations.GetConsumerV1ServicesIDAllocationsRequest) -> operations.GetConsumerV1ServicesIDAllocationsResponse:
        r"""List Service Allocations
        <p>Use this endpoint to return a <b>List of Service Allocations</b> associated with the requested service. A valid <b>service id</b> is required. Allocations are used for Event type services/bookings. Retrieve all allocations for a location by passing in zero as the service id. Otherwise, to get allocations for a specific service supply the service id. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href=\"https://docs.onsched.com/reference/post_setup-v1-services-id-allocations\">Create Service Allocations</a></p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ServicesIDAllocationsRequest, base_url, '/consumer/v1/services/{id}/allocations', request)
        
        query_params = utils.get_query_params(operations.GetConsumerV1ServicesIDAllocationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ServicesIDAllocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceAllocationListViewModel])
                res.service_allocation_list_view_model = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def get_consumer_v1_services_id_resources(self, request: operations.GetConsumerV1ServicesIDResourcesRequest) -> operations.GetConsumerV1ServicesIDResourcesResponse:
        r"""List Resources for Service
        <p>Use this endpoint to return a list of <b>Resources that provide the Service requested</b>. A valid <b>service id</b> is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ServicesIDResourcesRequest, base_url, '/consumer/v1/services/{id}/resources', request)
        
        query_params = utils.get_query_params(operations.GetConsumerV1ServicesIDResourcesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ServicesIDResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceListViewModel])
                res.resource_list_view_model = out

        return res

    