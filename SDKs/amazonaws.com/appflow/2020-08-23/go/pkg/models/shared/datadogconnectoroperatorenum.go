// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DatadogConnectorOperatorEnum string

const (
	DatadogConnectorOperatorEnumProjection          DatadogConnectorOperatorEnum = "PROJECTION"
	DatadogConnectorOperatorEnumBetween             DatadogConnectorOperatorEnum = "BETWEEN"
	DatadogConnectorOperatorEnumEqualTo             DatadogConnectorOperatorEnum = "EQUAL_TO"
	DatadogConnectorOperatorEnumAddition            DatadogConnectorOperatorEnum = "ADDITION"
	DatadogConnectorOperatorEnumMultiplication      DatadogConnectorOperatorEnum = "MULTIPLICATION"
	DatadogConnectorOperatorEnumDivision            DatadogConnectorOperatorEnum = "DIVISION"
	DatadogConnectorOperatorEnumSubtraction         DatadogConnectorOperatorEnum = "SUBTRACTION"
	DatadogConnectorOperatorEnumMaskAll             DatadogConnectorOperatorEnum = "MASK_ALL"
	DatadogConnectorOperatorEnumMaskFirstN          DatadogConnectorOperatorEnum = "MASK_FIRST_N"
	DatadogConnectorOperatorEnumMaskLastN           DatadogConnectorOperatorEnum = "MASK_LAST_N"
	DatadogConnectorOperatorEnumValidateNonNull     DatadogConnectorOperatorEnum = "VALIDATE_NON_NULL"
	DatadogConnectorOperatorEnumValidateNonZero     DatadogConnectorOperatorEnum = "VALIDATE_NON_ZERO"
	DatadogConnectorOperatorEnumValidateNonNegative DatadogConnectorOperatorEnum = "VALIDATE_NON_NEGATIVE"
	DatadogConnectorOperatorEnumValidateNumeric     DatadogConnectorOperatorEnum = "VALIDATE_NUMERIC"
	DatadogConnectorOperatorEnumNoOp                DatadogConnectorOperatorEnum = "NO_OP"
)

func (e *DatadogConnectorOperatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROJECTION":
		fallthrough
	case "BETWEEN":
		fallthrough
	case "EQUAL_TO":
		fallthrough
	case "ADDITION":
		fallthrough
	case "MULTIPLICATION":
		fallthrough
	case "DIVISION":
		fallthrough
	case "SUBTRACTION":
		fallthrough
	case "MASK_ALL":
		fallthrough
	case "MASK_FIRST_N":
		fallthrough
	case "MASK_LAST_N":
		fallthrough
	case "VALIDATE_NON_NULL":
		fallthrough
	case "VALIDATE_NON_ZERO":
		fallthrough
	case "VALIDATE_NON_NEGATIVE":
		fallthrough
	case "VALIDATE_NUMERIC":
		fallthrough
	case "NO_OP":
		*e = DatadogConnectorOperatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogConnectorOperatorEnum: %s", s)
	}
}
