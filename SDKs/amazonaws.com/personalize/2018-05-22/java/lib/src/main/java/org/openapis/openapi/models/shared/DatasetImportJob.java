/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DatasetImportJob - &lt;p&gt;Describes a job that imports training data from a data source (Amazon S3 bucket) to an Amazon Personalize dataset. For more information, see &lt;a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateDatasetImportJob.html"&gt;CreateDatasetImportJob&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A dataset import job can be in one of the following states:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;CREATE PENDING &amp;gt; CREATE IN_PROGRESS &amp;gt; ACTIVE -or- CREATE FAILED&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
public class DatasetImportJob {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDateTime")
    public OffsetDateTime creationDateTime;
    public DatasetImportJob withCreationDateTime(OffsetDateTime creationDateTime) {
        this.creationDateTime = creationDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSource")
    public DataSource dataSource;
    public DatasetImportJob withDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasetArn")
    public String datasetArn;
    public DatasetImportJob withDatasetArn(String datasetArn) {
        this.datasetArn = datasetArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasetImportJobArn")
    public String datasetImportJobArn;
    public DatasetImportJob withDatasetImportJobArn(String datasetImportJobArn) {
        this.datasetImportJobArn = datasetImportJobArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureReason")
    public String failureReason;
    public DatasetImportJob withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importMode")
    public ImportModeEnum importMode;
    public DatasetImportJob withImportMode(ImportModeEnum importMode) {
        this.importMode = importMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobName")
    public String jobName;
    public DatasetImportJob withJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdatedDateTime")
    public OffsetDateTime lastUpdatedDateTime;
    public DatasetImportJob withLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
        this.lastUpdatedDateTime = lastUpdatedDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishAttributionMetricsToS3")
    public Boolean publishAttributionMetricsToS3;
    public DatasetImportJob withPublishAttributionMetricsToS3(Boolean publishAttributionMetricsToS3) {
        this.publishAttributionMetricsToS3 = publishAttributionMetricsToS3;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roleArn")
    public String roleArn;
    public DatasetImportJob withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public DatasetImportJob withStatus(String status) {
        this.status = status;
        return this;
    }
    
}
