<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StripeGatewayProcessPaymentsAndRefunds 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Disconnects a developer's Stripe account
     * 
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdResponse
     */
	public function deleteStripeGatewayDeveloperDeveloperIdAccountsStripeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/developer/{developerId}/accounts/{stripeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayDeveloperDeveloperIdAccountsStripeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Removes a credit card for a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdResponse
     */
	public function deleteStripeGatewayUserUserIdCardsCardId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/user/{userId}/cards/{cardId}', \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteStripeGatewayUserUserIdCardsCardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a developers connected Stripe accounts
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsResponse
     */
	public function getStripeGatewayDeveloperDeveloperIdAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/developer/{developerId}/accounts', \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayDeveloperDeveloperIdAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns credit cards for this user
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsResponse
     */
	public function getStripeGatewayUserUserIdCards(
        \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/user/{userId}/cards', \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStripeGatewayUserUserIdCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account
     * 
     * - Results are returned for the market provided within the basic authentication credentials 
     * - The URL generated by this method is only valid for 48 hours.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsResponse
     */
	public function postStripeGatewayDeveloperDeveloperIdAccounts(
        \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/developer/{developerId}/accounts', \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayDeveloperDeveloperIdAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Adds credit card for this user
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsResponse
     */
	public function postStripeGatewayUserUserIdCards(
        \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/user/{userId}/cards', \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a credit card for this user
     * 
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdResponse
     */
	public function postStripeGatewayUserUserIdCardsCardId(
        \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stripe-gateway/user/{userId}/cards/{cardId}', \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStripeGatewayUserUserIdCardsCardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 412) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}