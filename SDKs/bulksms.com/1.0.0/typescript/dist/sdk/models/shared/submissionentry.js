"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmissionEntry = exports.SubmissionEntryTo = exports.SubmissionEntryToTypeEnum = exports.SubmissionEntryRoutingGroupEnum = exports.SubmissionEntryProtocolIdEnum = exports.SubmissionEntryMessageClassEnum = exports.SubmissionEntryFrom = exports.SubmissionEntryFromTypeEnum = exports.SubmissionEntryEncodingEnum = exports.SubmissionEntryDeliveryReportsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The type of delivery reports to request from the delivering network.
 *
 * @remarks
 * The default value  is `ALL`. Please note that not all networks support delivery reports.
 * ALL. All possible delivery reports
 * ERRORS. Only error delivery reports
 * NONE. No delivery reports
 */
var SubmissionEntryDeliveryReportsEnum;
(function (SubmissionEntryDeliveryReportsEnum) {
    SubmissionEntryDeliveryReportsEnum["All"] = "ALL";
    SubmissionEntryDeliveryReportsEnum["Errors"] = "ERRORS";
    SubmissionEntryDeliveryReportsEnum["None"] = "NONE";
})(SubmissionEntryDeliveryReportsEnum = exports.SubmissionEntryDeliveryReportsEnum || (exports.SubmissionEntryDeliveryReportsEnum = {}));
/**
 * Describes the content of the message body.
 *
 * @remarks
 *
 * Typically this is TEXT, which is the default if no value is provided.
 *
 * If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.
 *
 * If you want to send a sequence of bytes, you must use BINARY.
 *
 * You can also or use the `auto-unicode` parameter of the Send Messages Operation.
 *
 * If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.
 *
 * If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place.
 *
 */
var SubmissionEntryEncodingEnum;
(function (SubmissionEntryEncodingEnum) {
    SubmissionEntryEncodingEnum["Text"] = "TEXT";
    SubmissionEntryEncodingEnum["Unicode"] = "UNICODE";
    SubmissionEntryEncodingEnum["Binary"] = "BINARY";
})(SubmissionEntryEncodingEnum = exports.SubmissionEntryEncodingEnum || (exports.SubmissionEntryEncodingEnum = {}));
/**
 * The type of the sender id.
 *
 * @remarks
 *
 * If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country.
 * If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type.
 *
 */
var SubmissionEntryFromTypeEnum;
(function (SubmissionEntryFromTypeEnum) {
    SubmissionEntryFromTypeEnum["International"] = "INTERNATIONAL";
    SubmissionEntryFromTypeEnum["Alphanumeric"] = "ALPHANUMERIC";
    SubmissionEntryFromTypeEnum["Shortcode"] = "SHORTCODE";
    SubmissionEntryFromTypeEnum["Repliable"] = "REPLIABLE";
})(SubmissionEntryFromTypeEnum = exports.SubmissionEntryFromTypeEnum || (exports.SubmissionEntryFromTypeEnum = {}));
/**
 * Identifies the sender.
 *
 * @remarks
 *
 * Instead of a structured object, you can supply a string value here.
 * If you do this, the `type` of the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If the value does not begin with a `+` and it contains at least one character that is not a digit, the type is detected as ALPHANUMERIC. Otherwise, the type is detected as INTERNATIONAL.
 *
 */
var SubmissionEntryFrom = /** @class */ (function (_super) {
    __extends(SubmissionEntryFrom, _super);
    function SubmissionEntryFrom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], SubmissionEntryFrom.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], SubmissionEntryFrom.prototype, "type", void 0);
    return SubmissionEntryFrom;
}(utils_1.SpeakeasyBase));
exports.SubmissionEntryFrom = SubmissionEntryFrom;
/**
 * The class of the message, as specified by ยง4 of the GSM 03.38 specification.
 *
 * @remarks
 *
 * You can provide either an integer value, or a mnemonic string.
 *
 * The default value is SIM_SPECIFIC.
 * Numeric values are
 * | Name | Value|
 * |------|------|
 * | FLASH_SMS | 0      |
 * | ME_SPECIFIC | 1    |
 * | SIM_SPECIFIC | 2   |
 * | TE_SPECIFIC | 3   |
 *
 */
var SubmissionEntryMessageClassEnum;
(function (SubmissionEntryMessageClassEnum) {
    SubmissionEntryMessageClassEnum["FlashSms"] = "FLASH_SMS";
    SubmissionEntryMessageClassEnum["MeSpecific"] = "ME_SPECIFIC";
    SubmissionEntryMessageClassEnum["SimSpecific"] = "SIM_SPECIFIC";
    SubmissionEntryMessageClassEnum["TeSpecific"] = "TE_SPECIFIC";
})(SubmissionEntryMessageClassEnum = exports.SubmissionEntryMessageClassEnum || (exports.SubmissionEntryMessageClassEnum = {}));
/**
 * The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.
 *
 * @remarks
 *
 * You can provide either an integer value, or a mnemonic string.
 *
 * If unspecified, this property defaults to `0`, representing the IMPLICIT value.
 * Numeric values are listed below
 * | Name | Value|
 * |----- |------|
 * | IMPLICIT              | 00 |
 * | SHORT_MESSAGE_TYPE_0  | 64 |
 * | REPLACE_MESSAGE_1     | 65 |
 * | REPLACE_MESSAGE_2     | 66 |
 * | REPLACE_MESSAGE_3     | 67 |
 * | REPLACE_MESSAGE_4     | 68 |
 * | REPLACE_MESSAGE_5     | 69 |
 * | REPLACE_MESSAGE_6     | 70 |
 * | REPLACE_MESSAGE_7     | 71 |
 * | RETURN_CALL           | 95 |
 * | ME_DOWNLOAD           | 125 |
 * | ME_DEPERSONALIZE      | 126 |
 * | SIM_DOWNLOAD          | 127 |
 *
 */
var SubmissionEntryProtocolIdEnum;
(function (SubmissionEntryProtocolIdEnum) {
    SubmissionEntryProtocolIdEnum["Implicit"] = "IMPLICIT";
    SubmissionEntryProtocolIdEnum["ShortMessageType0"] = "SHORT_MESSAGE_TYPE_0";
    SubmissionEntryProtocolIdEnum["ReplaceMessage1"] = "REPLACE_MESSAGE_1";
    SubmissionEntryProtocolIdEnum["ReplaceMessage2"] = "REPLACE_MESSAGE_2";
    SubmissionEntryProtocolIdEnum["ReplaceMessage3"] = "REPLACE_MESSAGE_3";
    SubmissionEntryProtocolIdEnum["ReplaceMessage4"] = "REPLACE_MESSAGE_4";
    SubmissionEntryProtocolIdEnum["ReplaceMessage5"] = "REPLACE_MESSAGE_5";
    SubmissionEntryProtocolIdEnum["ReplaceMessage6"] = "REPLACE_MESSAGE_6";
    SubmissionEntryProtocolIdEnum["ReplaceMessage7"] = "REPLACE_MESSAGE_7";
    SubmissionEntryProtocolIdEnum["ReturnCall"] = "RETURN_CALL";
    SubmissionEntryProtocolIdEnum["MeDownload"] = "ME_DOWNLOAD";
    SubmissionEntryProtocolIdEnum["MeDepersonalize"] = "ME_DEPERSONALIZE";
    SubmissionEntryProtocolIdEnum["SimDownload"] = "SIM_DOWNLOAD";
})(SubmissionEntryProtocolIdEnum = exports.SubmissionEntryProtocolIdEnum || (exports.SubmissionEntryProtocolIdEnum = {}));
/**
 * Allows you to choose routing. The default is STANDARD.
 *
 * @remarks
 *
 */
var SubmissionEntryRoutingGroupEnum;
(function (SubmissionEntryRoutingGroupEnum) {
    SubmissionEntryRoutingGroupEnum["Economy"] = "ECONOMY";
    SubmissionEntryRoutingGroupEnum["Standard"] = "STANDARD";
    SubmissionEntryRoutingGroupEnum["Premium"] = "PREMIUM";
})(SubmissionEntryRoutingGroupEnum = exports.SubmissionEntryRoutingGroupEnum || (exports.SubmissionEntryRoutingGroupEnum = {}));
/**
 * Type of the recipient. The default value is INTERNATIONAL.
 */
var SubmissionEntryToTypeEnum;
(function (SubmissionEntryToTypeEnum) {
    SubmissionEntryToTypeEnum["International"] = "INTERNATIONAL";
    SubmissionEntryToTypeEnum["Group"] = "GROUP";
})(SubmissionEntryToTypeEnum = exports.SubmissionEntryToTypeEnum || (exports.SubmissionEntryToTypeEnum = {}));
var SubmissionEntryTo = /** @class */ (function (_super) {
    __extends(SubmissionEntryTo, _super);
    function SubmissionEntryTo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], SubmissionEntryTo.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fields" }),
        __metadata("design:type", Array)
    ], SubmissionEntryTo.prototype, "fields", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], SubmissionEntryTo.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], SubmissionEntryTo.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], SubmissionEntryTo.prototype, "type", void 0);
    return SubmissionEntryTo;
}(utils_1.SpeakeasyBase));
exports.SubmissionEntryTo = SubmissionEntryTo;
/**
 * An object that you use when posting messages.
 */
var SubmissionEntry = /** @class */ (function (_super) {
    __extends(SubmissionEntry, _super);
    function SubmissionEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "body" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deliveryReports" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "deliveryReports", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encoding" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "encoding", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "from" }),
        (0, class_transformer_1.Type)(function () { return SubmissionEntryFrom; }),
        __metadata("design:type", SubmissionEntryFrom)
    ], SubmissionEntry.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "longMessageMaxParts" }),
        __metadata("design:type", Number)
    ], SubmissionEntry.prototype, "longMessageMaxParts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "messageClass" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "messageClass", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "protocolId" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "protocolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "routingGroup" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "routingGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: SubmissionEntryTo }),
        (0, class_transformer_1.Expose)({ name: "to" }),
        (0, class_transformer_1.Type)(function () { return SubmissionEntryTo; }),
        __metadata("design:type", Array)
    ], SubmissionEntry.prototype, "to", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userSuppliedId" }),
        __metadata("design:type", String)
    ], SubmissionEntry.prototype, "userSuppliedId", void 0);
    return SubmissionEntry;
}(utils_1.SpeakeasyBase));
exports.SubmissionEntry = SubmissionEntry;
