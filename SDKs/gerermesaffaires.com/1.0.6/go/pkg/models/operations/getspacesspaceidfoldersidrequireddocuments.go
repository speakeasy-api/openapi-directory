// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesSpaceIDFoldersIDRequiredDocumentsRequest struct {
	// Id of the folder either exchange either followup
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum string

const (
	GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnumWaiting   GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum = "waiting"
	GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnumValidated GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum = "validated"
	GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnumEnded     GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum = "ended"
)

func (e GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum) ToPointer() *GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum {
	return &e
}

func (e *GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "waiting":
		fallthrough
	case "validated":
		fallthrough
	case "ended":
		*e = GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum: %v", v)
	}
}

type GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSON struct {
	Comment *string                                                                 `json:"Comment,omitempty"`
	Date    *string                                                                 `json:"Date,omitempty"`
	DocIds  []string                                                                `json:"DocIds,omitempty"`
	ID      *string                                                                 `json:"Id,omitempty"`
	Name    *string                                                                 `json:"Name,omitempty"`
	Status  *GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONStatusEnum `json:"Status,omitempty"`
}

type GetSpacesSpaceIDFoldersIDRequiredDocumentsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of required documents
	GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSONObjects []GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSON
}
