<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VisionDatasets 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a Dataset
     * 
     * Creates a dataset and labels, if they're specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDatasetRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDatasetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDatasetResponse
     */
	public function createDataset(
        \OpenAPI\OpenAPI\Models\Operations\CreateDatasetRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDatasetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDatasetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDatasetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Dataset
     * 
     * Deletes the specified dataset and associated labels and examples.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Response
     */
	public function deleteDataset1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/{datasetId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDataset1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeletionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Dataset
     * 
     * Returns a single dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDataset1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDataset1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDataset1Response
     */
	public function getDataset1(
        \OpenAPI\OpenAPI\Models\Operations\GetDataset1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDataset1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDataset1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/{datasetId}', \OpenAPI\OpenAPI\Models\Operations\GetDataset1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDataset1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Deletion Status
     * 
     * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Get1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Get1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Get1Response
     */
	public function get1(
        \OpenAPI\OpenAPI\Models\Operations\Get1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\Get1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Get1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/deletion/{id}', \OpenAPI\OpenAPI\Models\Operations\Get1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Get1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeletionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Datasets
     * 
     * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Response
     */
	public function listDatasets1(
        \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDatasets1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDatasets1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datasetList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatasetList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Dataset From a Zip File Asynchronously
     * 
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1Response
     */
	public function uploadDatasetAsync1(
        \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadDatasetAsync1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Dataset From a Zip File Synchronously
     * 
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1Response
     */
	public function uploadDatasetSync1(
        \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/upload/sync');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadDatasetSync1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
}