/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Customers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generate summary of app installation requests.
   */
  chromemanagementCustomersAppsCountChromeAppRequests(
    req: operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest,
    security: operations.ChromemanagementCustomersAppsCountChromeAppRequestsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/apps:countChromeAppRequests",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersAppsCountChromeAppRequestsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse =
        new operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeAppRequestsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeAppRequestsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity.
   */
  chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention(
    req: operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest,
    security: operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countChromeBrowsersNeedingAttention",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse =
        new operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947).
   */
  chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate(
    req: operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest,
    security: operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947
   */
  chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention(
    req: operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest,
    security: operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countChromeDevicesThatNeedAttention",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse =
        new operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947
   */
  chromemanagementCustomersReportsCountChromeHardwareFleetDevices(
    req: operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest,
    security: operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countChromeHardwareFleetDevices",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse =
        new operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeHardwareFleetDevicesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate report of installed Chrome versions.
   */
  chromemanagementCustomersReportsCountChromeVersions(
    req: operations.ChromemanagementCustomersReportsCountChromeVersionsRequest,
    security: operations.ChromemanagementCustomersReportsCountChromeVersionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountChromeVersionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountChromeVersionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countChromeVersions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountChromeVersionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountChromeVersionsResponse =
        new operations.ChromemanagementCustomersReportsCountChromeVersionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountChromeVersionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountChromeVersionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate report of app installations.
   */
  chromemanagementCustomersReportsCountInstalledApps(
    req: operations.ChromemanagementCustomersReportsCountInstalledAppsRequest,
    security: operations.ChromemanagementCustomersReportsCountInstalledAppsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountInstalledAppsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountInstalledAppsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countInstalledApps",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountInstalledAppsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountInstalledAppsResponse =
        new operations.ChromemanagementCustomersReportsCountInstalledAppsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountInstalledAppsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountInstalledAppsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a summary of printing done by each printer.
   */
  chromemanagementCustomersReportsCountPrintJobsByPrinter(
    req: operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest,
    security: operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countPrintJobsByPrinter",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountPrintJobsByPrinterResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountPrintJobsByPrinterResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a summary of printing done by each user.
   */
  chromemanagementCustomersReportsCountPrintJobsByUser(
    req: operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest,
    security: operations.ChromemanagementCustomersReportsCountPrintJobsByUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:countPrintJobsByUser",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByUserSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse =
        new operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1CountPrintJobsByUserResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1CountPrintJobsByUserResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate report of managed Chrome browser devices that have a specified app installed.
   */
  chromemanagementCustomersReportsFindInstalledAppDevices(
    req: operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest,
    security: operations.ChromemanagementCustomersReportsFindInstalledAppDevicesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{customer}/reports:findInstalledAppDevices",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersReportsFindInstalledAppDevicesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse =
        new operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1FindInstalledAppDevicesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1FindInstalledAppDevicesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all telemetry devices.
   */
  chromemanagementCustomersTelemetryDevicesList(
    req: operations.ChromemanagementCustomersTelemetryDevicesListRequest,
    security: operations.ChromemanagementCustomersTelemetryDevicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersTelemetryDevicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChromemanagementCustomersTelemetryDevicesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/telemetry/devices",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersTelemetryDevicesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersTelemetryDevicesListResponse =
        new operations.ChromemanagementCustomersTelemetryDevicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1ListTelemetryDevicesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1ListTelemetryDevicesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List telemetry events.
   */
  chromemanagementCustomersTelemetryEventsList(
    req: operations.ChromemanagementCustomersTelemetryEventsListRequest,
    security: operations.ChromemanagementCustomersTelemetryEventsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersTelemetryEventsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChromemanagementCustomersTelemetryEventsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/telemetry/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersTelemetryEventsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersTelemetryEventsListResponse =
        new operations.ChromemanagementCustomersTelemetryEventsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1ListTelemetryEventsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1ListTelemetryEventsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get telemetry user.
   */
  chromemanagementCustomersTelemetryUsersGet(
    req: operations.ChromemanagementCustomersTelemetryUsersGetRequest,
    security: operations.ChromemanagementCustomersTelemetryUsersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersTelemetryUsersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChromemanagementCustomersTelemetryUsersGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersTelemetryUsersGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersTelemetryUsersGetResponse =
        new operations.ChromemanagementCustomersTelemetryUsersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1TelemetryUser = utils.objectToClass(
              httpRes?.data,
              shared.GoogleChromeManagementV1TelemetryUser
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all telemetry users.
   */
  chromemanagementCustomersTelemetryUsersList(
    req: operations.ChromemanagementCustomersTelemetryUsersListRequest,
    security: operations.ChromemanagementCustomersTelemetryUsersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromemanagementCustomersTelemetryUsersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChromemanagementCustomersTelemetryUsersListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/telemetry/users",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ChromemanagementCustomersTelemetryUsersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromemanagementCustomersTelemetryUsersListResponse =
        new operations.ChromemanagementCustomersTelemetryUsersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleChromeManagementV1ListTelemetryUsersResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleChromeManagementV1ListTelemetryUsersResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
