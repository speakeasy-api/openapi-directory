// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NAWelcomeCameraLightModeStatusEnum - State of (flood-)light
type NAWelcomeCameraLightModeStatusEnum string

const (
	NAWelcomeCameraLightModeStatusEnumOn   NAWelcomeCameraLightModeStatusEnum = "on"
	NAWelcomeCameraLightModeStatusEnumOff  NAWelcomeCameraLightModeStatusEnum = "off"
	NAWelcomeCameraLightModeStatusEnumAuto NAWelcomeCameraLightModeStatusEnum = "auto"
)

func (e NAWelcomeCameraLightModeStatusEnum) ToPointer() *NAWelcomeCameraLightModeStatusEnum {
	return &e
}

func (e *NAWelcomeCameraLightModeStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		fallthrough
	case "auto":
		*e = NAWelcomeCameraLightModeStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NAWelcomeCameraLightModeStatusEnum: %v", v)
	}
}

type NAWelcomeCamera struct {
	// If power supply is ok (on/off)
	AlimStatus *string `json:"alim_status,omitempty"`
	// Id of the camera
	ID *string `json:"id,omitempty"`
	// Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)
	IsLocal *bool `json:"is_local,omitempty"`
	// State of (flood-)light
	LightModeStatus *NAWelcomeCameraLightModeStatusEnum `json:"light_mode_status,omitempty"`
	// Name of the camera
	Name *string `json:"name,omitempty"`
	// If SD card status is ok (on/off)
	SdStatus *string `json:"sd_status,omitempty"`
	// If camera is monitoring (on/off)
	Status *string `json:"status,omitempty"`
	// Type of the camera
	Type *string `json:"type,omitempty"`
	// Only for scope access_camera. Address of the camera
	VpnURL *string `json:"vpn_url,omitempty"`
}
