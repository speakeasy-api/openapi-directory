"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class KeysAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def keys_api_current(self, request: operations.KeysAPICurrentRequest) -> operations.KeysAPICurrentResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeysAPICurrentRequest, base_url, '/v1/KeysApi/Current/{serial}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeysAPICurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.keys_api_current_200_application_json_one_of = out

        return res

    def keys_api_custom(self, request: operations.KeysAPICustomRequest) -> operations.KeysAPICustomResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeysAPICustomRequest, base_url, '/v1/KeysApi/Custom/{serial}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeysAPICustomResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.keys_api_custom_200_application_octet_stream_binary_string = http_res.content

        return res

    def keys_api_expiry(self, request: operations.KeysAPIExpiryRequest) -> operations.KeysAPIExpiryResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeysAPIExpiryRequest, base_url, '/v1/KeysApi/Expiry/{serial}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeysAPIExpiryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.keys_api_expiry_200_application_json_one_of = out

        return res

    def keys_api_find(self, request: operations.KeysAPIFindRequest) -> operations.KeysAPIFindResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeysAPIFindRequest, base_url, '/v1/KeysApi/Find/{serial}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeysAPIFindResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.keys_api_find_200_application_json_one_of = out

        return res

    