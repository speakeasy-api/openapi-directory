/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * User - A Cloud SQL user resource.
 */
public class User {
    /**
     * Dual password status for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dualPasswordType")
    public UserDualPasswordTypeEnum dualPasswordType;
    public User withDualPasswordType(UserDualPasswordTypeEnum dualPasswordType) {
        this.dualPasswordType = dualPasswordType;
        return this;
    }
    
    /**
     * This field is deprecated and will be removed from a future version of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public User withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;
    public User withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    public String instance;
    public User withInstance(String instance) {
        this.instance = instance;
        return this;
    }
    
    /**
     * This is always `sql#user`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public User withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public User withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The password for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public User withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * User level password validation policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordPolicy")
    public UserPasswordValidationPolicy passwordPolicy;
    public User withPasswordPolicy(UserPasswordValidationPolicy passwordPolicy) {
        this.passwordPolicy = passwordPolicy;
        return this;
    }
    
    /**
     * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;
    public User withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * Represents a Sql Server user on the Cloud SQL instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlserverUserDetails")
    public SqlServerUserDetails sqlserverUserDetails;
    public User withSqlserverUserDetails(SqlServerUserDetails sqlserverUserDetails) {
        this.sqlserverUserDetails = sqlserverUserDetails;
        return this;
    }
    
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public UserTypeEnum type;
    public User withType(UserTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
