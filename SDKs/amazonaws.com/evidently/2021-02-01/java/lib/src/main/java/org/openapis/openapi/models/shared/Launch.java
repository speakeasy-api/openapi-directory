/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Launch - This structure contains the configuration details of one Evidently launch.
 */
public class Launch {
    @JsonProperty("arn")
    public String arn;

    public Launch withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdTime")
    public OffsetDateTime createdTime;

    public Launch withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Launch withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("execution")
    public LaunchExecution execution;

    public Launch withExecution(LaunchExecution execution) {
        this.execution = execution;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    public LaunchGroup[] groups;

    public Launch withGroups(LaunchGroup[] groups) {
        this.groups = groups;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdatedTime")
    public OffsetDateTime lastUpdatedTime;

    public Launch withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricMonitors")
    public MetricMonitor[] metricMonitors;

    public Launch withMetricMonitors(MetricMonitor[] metricMonitors) {
        this.metricMonitors = metricMonitors;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Launch withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public Launch withProject(String project) {
        this.project = project;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("randomizationSalt")
    public String randomizationSalt;

    public Launch withRandomizationSalt(String randomizationSalt) {
        this.randomizationSalt = randomizationSalt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduledSplitsDefinition")
    public ScheduledSplitsLaunchDefinition scheduledSplitsDefinition;

    public Launch withScheduledSplitsDefinition(ScheduledSplitsLaunchDefinition scheduledSplitsDefinition) {
        this.scheduledSplitsDefinition = scheduledSplitsDefinition;
        return this;
    }
    
    @JsonProperty("status")
    public LaunchStatusEnum status;

    public Launch withStatus(LaunchStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusReason")
    public String statusReason;

    public Launch withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public Launch withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonProperty("type")
    public LaunchTypeEnum type;

    public Launch withType(LaunchTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Launch(@JsonProperty("arn") String arn, @JsonProperty("createdTime") OffsetDateTime createdTime, @JsonProperty("lastUpdatedTime") OffsetDateTime lastUpdatedTime, @JsonProperty("name") String name, @JsonProperty("status") LaunchStatusEnum status, @JsonProperty("type") LaunchTypeEnum type) {
        this.arn = arn;
        this.createdTime = createdTime;
        this.lastUpdatedTime = lastUpdatedTime;
        this.name = name;
        this.status = status;
        this.type = type;
  }
}
