/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Place {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the place with the given id.
   */
  placeGet(
    req: operations.PlaceGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/Place/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetResponse = new operations.PlaceGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
   *             must be polygonal e.g. a BoroughBoundary.
   */
  placeGetAt(
    req: operations.PlaceGetAtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetAtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetAtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Place/{type}/At/{Lat}/{Lon}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetAtResponse =
        new operations.PlaceGetAtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the places that lie within a geographic region. The geographic region of interest can either be specified
   *             by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
   *             its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
   *             Optionally filters on type and can strip properties for a smaller payload.
   */
  placeGetByGeo(
    req: operations.PlaceGetByGeoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetByGeoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetByGeoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Place";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetByGeoResponse =
        new operations.PlaceGetByGeoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all places of a given type
   */
  placeGetByType(
    req: operations.PlaceGetByTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetByTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetByTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/Place/Type/{types}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetByTypeResponse =
        new operations.PlaceGetByTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the place overlay for a given set of co-ordinates and a given width/height.
   */
  placeGetOverlay(
    req: operations.PlaceGetOverlayRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetOverlayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetOverlayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetOverlayResponse =
        new operations.PlaceGetOverlayResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the set of streets associated with a post code.
   */
  placeGetStreetsByPostCode(
    req: operations.PlaceGetStreetsByPostCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceGetStreetsByPostCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceGetStreetsByPostCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Place/Address/Streets/{Postcode}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceGetStreetsByPostCodeResponse =
        new operations.PlaceGetStreetsByPostCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of all of the available place property categories and keys.
   */
  placeMetaCategories(
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceMetaCategoriesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Place/Meta/Categories";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceMetaCategoriesResponse =
        new operations.PlaceMetaCategoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaceCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaceCategories = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlaceCategory,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaceCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaceCategories = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlaceCategory,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of the available types of Place.
   */
  placeMetaPlaceTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceMetaPlaceTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Place/Meta/PlaceTypes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceMetaPlaceTypesResponse =
        new operations.PlaceMetaPlaceTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaceCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaceCategories = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlaceCategory,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaceCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaceCategories = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlaceCategory,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all places that matches the given query
   */
  placeSearch(
    req: operations.PlaceSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlaceSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlaceSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Place/Search";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlaceSearchResponse =
        new operations.PlaceSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
