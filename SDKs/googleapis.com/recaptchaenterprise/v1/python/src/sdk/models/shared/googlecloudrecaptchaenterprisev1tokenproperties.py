"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum(str, Enum):
    r"""Reason associated with the response when valid = false."""
    INVALID_REASON_UNSPECIFIED = 'INVALID_REASON_UNSPECIFIED'
    UNKNOWN_INVALID_REASON = 'UNKNOWN_INVALID_REASON'
    MALFORMED = 'MALFORMED'
    EXPIRED = 'EXPIRED'
    DUPE = 'DUPE'
    MISSING = 'MISSING'
    BROWSER_ERROR = 'BROWSER_ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1TokenProperties:
    r"""Properties of the provided event token."""
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Action name provided at token generation."""  
    android_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidPackageName'), 'exclude': lambda f: f is None }})
    r"""The name of the Android package with which the token was generated (Android keys only)."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""The timestamp corresponding to the generation of the token."""  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname'), 'exclude': lambda f: f is None }})
    r"""The hostname of the page on which the token was generated (Web keys only)."""  
    invalid_reason: Optional[GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidReason'), 'exclude': lambda f: f is None }})
    r"""Reason associated with the response when valid = false."""  
    ios_bundle_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iosBundleId'), 'exclude': lambda f: f is None }})
    r"""The ID of the iOS bundle with which the token was generated (iOS keys only)."""  
    valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid'), 'exclude': lambda f: f is None }})
    r"""Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment)."""  
    