"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import detail as shared_detail
from ..shared import route as shared_route
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SolutionUnassigned:
    
    breaks: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breaks'), 'exclude': lambda f: f is None }})
    r"""An array of ids of unassigned breaks"""  
    details: Optional[list[shared_detail.Detail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""An array of details, i.e. reason for unassigned services or shipments"""  
    services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})
    r"""An array of ids of unassigned services"""  
    shipments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipments'), 'exclude': lambda f: f is None }})
    r"""An array of ids of unassigned shipments"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Solution:
    r"""Only available if status field indicates `finished`."""
    
    completion_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completion_time'), 'exclude': lambda f: f is None }})
    r"""Overall completion time in seconds, i.e. the sum of each routes/drivers operation time."""  
    costs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costs'), 'exclude': lambda f: f is None }})  
    distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""Overall distance travelled in meter, i.e. the sum of each route's transport distance"""  
    max_operation_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_operation_time'), 'exclude': lambda f: f is None }})
    r"""Operation time of longest route in seconds."""  
    no_unassigned: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no_unassigned'), 'exclude': lambda f: f is None }})
    r"""Number of jobs that could not be assigned to final solution."""  
    no_vehicles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no_vehicles'), 'exclude': lambda f: f is None }})
    r"""Number of employed vehicles."""  
    preparation_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preparation_time'), 'exclude': lambda f: f is None }})
    r"""Overall preparation time in seconds."""  
    routes: Optional[list[shared_route.Route]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes'), 'exclude': lambda f: f is None }})
    r"""An array of routes"""  
    service_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_duration'), 'exclude': lambda f: f is None }})
    r"""Overall service time in seconds."""  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Use `transport_time` instead."""  
    transport_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_time'), 'exclude': lambda f: f is None }})
    r"""Overall time travelled in seconds, i.e. the sum of each route's transport time."""  
    unassigned: Optional[SolutionUnassigned] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unassigned'), 'exclude': lambda f: f is None }})  
    waiting_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_time'), 'exclude': lambda f: f is None }})
    r"""Overall waiting time in seconds."""  
    