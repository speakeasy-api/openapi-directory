// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CommentAPIPostEditCommentRawEntryTypeEnum - Entry type.
type CommentAPIPostEditCommentRawEntryTypeEnum string

const (
	CommentAPIPostEditCommentRawEntryTypeEnumUndefined          CommentAPIPostEditCommentRawEntryTypeEnum = "Undefined"
	CommentAPIPostEditCommentRawEntryTypeEnumAlbum              CommentAPIPostEditCommentRawEntryTypeEnum = "Album"
	CommentAPIPostEditCommentRawEntryTypeEnumArtist             CommentAPIPostEditCommentRawEntryTypeEnum = "Artist"
	CommentAPIPostEditCommentRawEntryTypeEnumDiscussionTopic    CommentAPIPostEditCommentRawEntryTypeEnum = "DiscussionTopic"
	CommentAPIPostEditCommentRawEntryTypeEnumPv                 CommentAPIPostEditCommentRawEntryTypeEnum = "PV"
	CommentAPIPostEditCommentRawEntryTypeEnumReleaseEvent       CommentAPIPostEditCommentRawEntryTypeEnum = "ReleaseEvent"
	CommentAPIPostEditCommentRawEntryTypeEnumReleaseEventSeries CommentAPIPostEditCommentRawEntryTypeEnum = "ReleaseEventSeries"
	CommentAPIPostEditCommentRawEntryTypeEnumSong               CommentAPIPostEditCommentRawEntryTypeEnum = "Song"
	CommentAPIPostEditCommentRawEntryTypeEnumSongList           CommentAPIPostEditCommentRawEntryTypeEnum = "SongList"
	CommentAPIPostEditCommentRawEntryTypeEnumTag                CommentAPIPostEditCommentRawEntryTypeEnum = "Tag"
	CommentAPIPostEditCommentRawEntryTypeEnumUser               CommentAPIPostEditCommentRawEntryTypeEnum = "User"
	CommentAPIPostEditCommentRawEntryTypeEnumVenue              CommentAPIPostEditCommentRawEntryTypeEnum = "Venue"
)

func (e *CommentAPIPostEditCommentRawEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Undefined":
		fallthrough
	case "Album":
		fallthrough
	case "Artist":
		fallthrough
	case "DiscussionTopic":
		fallthrough
	case "PV":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "ReleaseEventSeries":
		fallthrough
	case "Song":
		fallthrough
	case "SongList":
		fallthrough
	case "Tag":
		fallthrough
	case "User":
		fallthrough
	case "Venue":
		*e = CommentAPIPostEditCommentRawEntryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentAPIPostEditCommentRawEntryTypeEnum: %s", s)
	}
}

type CommentAPIPostEditCommentRawPathParams struct {
	// ID of the comment to be edited.
	CommentID int `pathParam:"style=simple,explode=false,name=commentId"`
	// Entry type.
	EntryType CommentAPIPostEditCommentRawEntryTypeEnum `pathParam:"style=simple,explode=false,name=entryType"`
}

type CommentAPIPostEditCommentRawRequest struct {
	PathParams CommentAPIPostEditCommentRawPathParams
	// New comment data. Only message can be edited.
	Request []byte `request:"mediaType=text/xml"`
}

type CommentAPIPostEditCommentRawResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
