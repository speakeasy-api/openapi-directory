// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlatformPlatformTypeEnum - Type of platform.
type PlatformPlatformTypeEnum string

const (
	PlatformPlatformTypeEnumPlatformTypeUnspecified PlatformPlatformTypeEnum = "PLATFORM_TYPE_UNSPECIFIED"
	PlatformPlatformTypeEnumWin                     PlatformPlatformTypeEnum = "WIN"
	PlatformPlatformTypeEnumWin64                   PlatformPlatformTypeEnum = "WIN64"
	PlatformPlatformTypeEnumMac                     PlatformPlatformTypeEnum = "MAC"
	PlatformPlatformTypeEnumLinux                   PlatformPlatformTypeEnum = "LINUX"
	PlatformPlatformTypeEnumAndroid                 PlatformPlatformTypeEnum = "ANDROID"
	PlatformPlatformTypeEnumWebview                 PlatformPlatformTypeEnum = "WEBVIEW"
	PlatformPlatformTypeEnumIos                     PlatformPlatformTypeEnum = "IOS"
	PlatformPlatformTypeEnumAll                     PlatformPlatformTypeEnum = "ALL"
	PlatformPlatformTypeEnumMacArm64                PlatformPlatformTypeEnum = "MAC_ARM64"
	PlatformPlatformTypeEnumLacros                  PlatformPlatformTypeEnum = "LACROS"
	PlatformPlatformTypeEnumLacrosArm32             PlatformPlatformTypeEnum = "LACROS_ARM32"
	PlatformPlatformTypeEnumChromeos                PlatformPlatformTypeEnum = "CHROMEOS"
	PlatformPlatformTypeEnumLacrosArm64             PlatformPlatformTypeEnum = "LACROS_ARM64"
	PlatformPlatformTypeEnumFuchsia                 PlatformPlatformTypeEnum = "FUCHSIA"
)

func (e PlatformPlatformTypeEnum) ToPointer() *PlatformPlatformTypeEnum {
	return &e
}

func (e *PlatformPlatformTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLATFORM_TYPE_UNSPECIFIED":
		fallthrough
	case "WIN":
		fallthrough
	case "WIN64":
		fallthrough
	case "MAC":
		fallthrough
	case "LINUX":
		fallthrough
	case "ANDROID":
		fallthrough
	case "WEBVIEW":
		fallthrough
	case "IOS":
		fallthrough
	case "ALL":
		fallthrough
	case "MAC_ARM64":
		fallthrough
	case "LACROS":
		fallthrough
	case "LACROS_ARM32":
		fallthrough
	case "CHROMEOS":
		fallthrough
	case "LACROS_ARM64":
		fallthrough
	case "FUCHSIA":
		*e = PlatformPlatformTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlatformPlatformTypeEnum: %v", v)
	}
}

// Platform - Each Platform is owned by a Product and owns a collection of channels. Available platforms are listed in Platform enum below. Not all Channels are available for every Platform (e.g. CANARY does not exist for LINUX).
type Platform struct {
	// Platform name. Format is "{product}/platforms/{platform}"
	Name *string `json:"name,omitempty"`
	// Type of platform.
	PlatformType *PlatformPlatformTypeEnum `json:"platformType,omitempty"`
}
