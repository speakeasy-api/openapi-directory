"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containersusageinfoavailablesizes as shared_containersusageinfoavailablesizes
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersUsageInfoLimits:
    
    containers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containers'), 'exclude': lambda f: f is None }})
    r"""The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory."""  
    floating_ips: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that can be allocated to the space."""  
    memory_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory_MB'), 'exclude': lambda f: f is None }})
    r"""The amount of container memory that can be used in the space in megabyte."""  
    vcpu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcpu'), 'exclude': lambda f: f is None }})
    r"""The number of virtual CPUs that are assigned to the space."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersUsageInfoUsage:
    
    containers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containers'), 'exclude': lambda f: f is None }})
    r"""The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state."""  
    floating_ips: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that are allocated to the space."""  
    floating_ips_bound: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips_bound'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that are bound to a container in the space."""  
    images: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})
    r"""The number of private images that were added to the private Bluemix registry."""  
    memory_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory_MB'), 'exclude': lambda f: f is None }})
    r"""The amount of container memory that is already used by the containers that were created in the space in megabyte."""  
    running: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('running'), 'exclude': lambda f: f is None }})
    r"""The number of containers that are currently in a running state."""  
    vcpu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcpu'), 'exclude': lambda f: f is None }})
    r"""The number of virtual CPUs that are allocated to the space."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersUsageInfo:
    r"""OK. A list of available container sizes as well as the quota limit and usage for a space is returned."""
    
    available_sizes: Optional[list[shared_containersusageinfoavailablesizes.ContainersUsageInfoAvailableSizes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableSizes'), 'exclude': lambda f: f is None }})  
    environment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})
    r"""The IBM Containers machine where the space is located"""  
    limits: Optional[ContainersUsageInfoLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limits'), 'exclude': lambda f: f is None }})  
    usage: Optional[ContainersUsageInfoUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Usage'), 'exclude': lambda f: f is None }})  
    