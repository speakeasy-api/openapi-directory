"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parameter = exports.ParameterTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The parameter type. Valid values are: - boolean: The value represents a boolean, represented as 'true' or 'false' - integer: The value represents a 64-bit signed integer value, in base 10 - list: A list of parameters should be specified - map: A map of parameters should be specified - template: The value represents any text; this can include variable references (even variable references that might return non-string types) - trigger_reference: The value represents a trigger, represented as the trigger id - tag_reference: The value represents a tag, represented as the tag name @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 */
var ParameterTypeEnum;
(function (ParameterTypeEnum) {
    ParameterTypeEnum["TypeUnspecified"] = "typeUnspecified";
    ParameterTypeEnum["Template"] = "template";
    ParameterTypeEnum["Integer"] = "integer";
    ParameterTypeEnum["Boolean"] = "boolean";
    ParameterTypeEnum["List"] = "list";
    ParameterTypeEnum["Map"] = "map";
    ParameterTypeEnum["TriggerReference"] = "triggerReference";
    ParameterTypeEnum["TagReference"] = "tagReference";
})(ParameterTypeEnum = exports.ParameterTypeEnum || (exports.ParameterTypeEnum = {}));
/**
 * Represents a Google Tag Manager Parameter.
 */
var Parameter = /** @class */ (function (_super) {
    __extends(Parameter, _super);
    function Parameter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "key" }),
        __metadata("design:type", String)
    ], Parameter.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: Parameter }),
        (0, class_transformer_1.Expose)({ name: "list" }),
        (0, class_transformer_1.Type)(function () { return Parameter; }),
        __metadata("design:type", Array)
    ], Parameter.prototype, "list", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: Parameter }),
        (0, class_transformer_1.Expose)({ name: "map" }),
        (0, class_transformer_1.Type)(function () { return Parameter; }),
        __metadata("design:type", Array)
    ], Parameter.prototype, "map", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Parameter.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], Parameter.prototype, "value", void 0);
    return Parameter;
}(utils_1.SpeakeasyBase));
exports.Parameter = Parameter;
