"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LivenessCheck:
    r"""Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances."""
    
    check_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkInterval'), 'exclude': lambda f: f is None }})
    r"""Interval between health checks."""  
    failure_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureThreshold'), 'exclude': lambda f: f is None }})
    r"""Number of consecutive failed checks required before considering the VM unhealthy."""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""Host header to send when performing a HTTP Liveness check. Example: \\"myapp.appspot.com\\" """  
    initial_delay: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialDelay'), 'exclude': lambda f: f is None }})
    r"""The initial delay before starting to execute the checks."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The request path."""  
    success_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successThreshold'), 'exclude': lambda f: f is None }})
    r"""Number of consecutive successful checks required before considering the VM healthy."""  
    timeout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    r"""Time before the check is considered failed."""  
    