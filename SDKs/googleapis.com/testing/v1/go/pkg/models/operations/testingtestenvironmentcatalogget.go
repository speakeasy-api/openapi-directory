// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TestingTestEnvironmentCatalogGetSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type TestingTestEnvironmentCatalogGetSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type TestingTestEnvironmentCatalogGetSecurity struct {
	Option1 *TestingTestEnvironmentCatalogGetSecurityOption1 `security:"option"`
	Option2 *TestingTestEnvironmentCatalogGetSecurityOption2 `security:"option"`
}

// TestingTestEnvironmentCatalogGetEnvironmentTypeEnum - Required. The type of environment that should be listed.
type TestingTestEnvironmentCatalogGetEnvironmentTypeEnum string

const (
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumEnvironmentTypeUnspecified TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "ENVIRONMENT_TYPE_UNSPECIFIED"
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumAndroid                    TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "ANDROID"
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumIos                        TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "IOS"
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumNetworkConfiguration       TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "NETWORK_CONFIGURATION"
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumProvidedSoftware           TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "PROVIDED_SOFTWARE"
	TestingTestEnvironmentCatalogGetEnvironmentTypeEnumDeviceIPBlocks             TestingTestEnvironmentCatalogGetEnvironmentTypeEnum = "DEVICE_IP_BLOCKS"
)

func (e TestingTestEnvironmentCatalogGetEnvironmentTypeEnum) ToPointer() *TestingTestEnvironmentCatalogGetEnvironmentTypeEnum {
	return &e
}

func (e *TestingTestEnvironmentCatalogGetEnvironmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENVIRONMENT_TYPE_UNSPECIFIED":
		fallthrough
	case "ANDROID":
		fallthrough
	case "IOS":
		fallthrough
	case "NETWORK_CONFIGURATION":
		fallthrough
	case "PROVIDED_SOFTWARE":
		fallthrough
	case "DEVICE_IP_BLOCKS":
		*e = TestingTestEnvironmentCatalogGetEnvironmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestingTestEnvironmentCatalogGetEnvironmentTypeEnum: %v", v)
	}
}

type TestingTestEnvironmentCatalogGetRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Required. The type of environment that should be listed.
	EnvironmentType TestingTestEnvironmentCatalogGetEnvironmentTypeEnum `pathParam:"style=simple,explode=false,name=environmentType"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// For authorization, the cloud project requesting the TestEnvironmentCatalog.
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type TestingTestEnvironmentCatalogGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response
	TestEnvironmentCatalog *shared.TestEnvironmentCatalog
}
