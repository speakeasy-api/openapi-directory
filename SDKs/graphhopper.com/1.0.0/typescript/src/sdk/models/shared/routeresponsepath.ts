/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class RouteResponsePathInstructions extends SpeakeasyBase {
  /**
   * The distance for this instruction, in meters.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distance" })
  distance?: number;

  /**
   * Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exit_number" })
  exitNumber?: number;

  /**
   * Two indices into `points`, referring to the beginning and the end of the segment of the route
   *
   * @remarks
   * this instruction refers to.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval?: number[];

  /**
   * A number which specifies the sign to show:
   *
   * @remarks
   *
   * | sign | description  |
   * |---|---|
   * |-98| an U-turn without the knowledge if it is a right or left U-turn |
   * | -8| a left U-turn |
   * | -7| keep left |
   * | -6| **not yet used**: leave roundabout |
   * | -3| turn sharp left |
   * | -2| turn left |
   * | -1| turn slight left |
   * |  0| continue on street |
   * |  1| turn slight right |
   * |  2| turn right |
   * |  3| turn sharp right |
   * |  4| the finish instruction before the last point |
   * |  5| the instruction before a via point |
   * |  6| the instruction before entering a roundabout |
   * |  7| keep right |
   * |  8| a right U-turn |
   * |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sign" })
  sign?: number;

  /**
   * The name of the street to turn onto in order to follow the route.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "street_name" })
  streetName?: string;

  /**
   * A description what the user has to do in order to follow the route. The language depends on the locale parameter.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * The duration for this instruction, in milliseconds.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: number;

  /**
   * Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
   *
   * @remarks
   * `-2*PI < r < 0` for counterclockwise turns.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "turn_angle" })
  turnAngle?: number;
}

export class RouteResponsePath extends SpeakeasyBase {
  /**
   * The total ascent, in meters.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ascend" })
  ascend?: number;

  /**
   * The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bbox" })
  bbox?: number[];

  /**
   * The total descent, in meters.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descend" })
  descend?: number;

  /**
   * Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Straße"],[2,6,"Zollweg"]]}`.
   *
   * @remarks
   * In this example, the route uses two streets: The first, Frankfurter Straße, is
   * used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
   * See [here](https://discuss.graphhopper.com/t/2539) for discussion.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  details?: Record<string, any>;

  /**
   * The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distance" })
  distance?: number;

  /**
   * The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
   *
   * @remarks
   * so be mindful when using them for navigation.
   *
   */
  @SpeakeasyMetadata({ elemType: RouteResponsePathInstructions })
  @Expose({ name: "instructions" })
  @Type(() => RouteResponsePathInstructions)
  instructions?: RouteResponsePathInstructions[];

  @SpeakeasyMetadata()
  @Expose({ name: "points" })
  points?: any;

  /**
   * Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
   *
   * @remarks
   * of coordinates. See the field description for more information on the two formats.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "points_encoded" })
  pointsEncoded?: boolean;

  /**
   * An array of indices (zero-based), specifiying the order in which the input points are visited.
   *
   * @remarks
   * Only present if the `optimize` parameter was used.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "points_order" })
  pointsOrder?: number[];

  @SpeakeasyMetadata()
  @Expose({ name: "snapped_waypoints" })
  snappedWaypoints?: any;

  /**
   * The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: number;
}
