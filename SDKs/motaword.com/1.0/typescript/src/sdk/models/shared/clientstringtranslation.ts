/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export enum ClientStringTranslationStateEnum {
  Translated = "Translated",
  Approved = "Approved",
}

export class ClientStringTranslation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastChanged?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resource_id" })
  resourceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ClientStringTranslationStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "target_language" })
  targetLanguage?: string;
}
