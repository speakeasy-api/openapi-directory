/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateParticipantCreateParticipantRequest {
    /**
     * The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
     */
    @SpeakeasyMetadata("form:name=AmdStatusCallback")
    public String amdStatusCallback;

    public CreateParticipantCreateParticipantRequest withAmdStatusCallback(String amdStatusCallback) {
        this.amdStatusCallback = amdStatusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
     */
    @SpeakeasyMetadata("form:name=AmdStatusCallbackMethod")
    public CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum amdStatusCallbackMethod;

    public CreateParticipantCreateParticipantRequest withAmdStatusCallbackMethod(CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum amdStatusCallbackMethod) {
        this.amdStatusCallbackMethod = amdStatusCallbackMethod;
        return this;
    }
    
    /**
     * Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     */
    @SpeakeasyMetadata("form:name=Beep")
    public String beep;

    public CreateParticipantCreateParticipantRequest withBeep(String beep) {
        this.beep = beep;
        return this;
    }
    
    /**
     * The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
     */
    @SpeakeasyMetadata("form:name=Byoc")
    public String byoc;

    public CreateParticipantCreateParticipantRequest withByoc(String byoc) {
        this.byoc = byoc;
        return this;
    }
    
    /**
     * The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
     */
    @SpeakeasyMetadata("form:name=CallReason")
    public String callReason;

    public CreateParticipantCreateParticipantRequest withCallReason(String callReason) {
        this.callReason = callReason;
        return this;
    }
    
    /**
     * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     */
    @SpeakeasyMetadata("form:name=CallSidToCoach")
    public String callSidToCoach;

    public CreateParticipantCreateParticipantRequest withCallSidToCoach(String callSidToCoach) {
        this.callSidToCoach = callSidToCoach;
        return this;
    }
    
    /**
     * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
     */
    @SpeakeasyMetadata("form:name=CallerId")
    public String callerId;

    public CreateParticipantCreateParticipantRequest withCallerId(String callerId) {
        this.callerId = callerId;
        return this;
    }
    
    /**
     * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     */
    @SpeakeasyMetadata("form:name=Coaching")
    public Boolean coaching;

    public CreateParticipantCreateParticipantRequest withCoaching(Boolean coaching) {
        this.coaching = coaching;
        return this;
    }
    
    /**
     * Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecord")
    public String conferenceRecord;

    public CreateParticipantCreateParticipantRequest withConferenceRecord(String conferenceRecord) {
        this.conferenceRecord = conferenceRecord;
        return this;
    }
    
    /**
     * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecordingStatusCallback")
    public String conferenceRecordingStatusCallback;

    public CreateParticipantCreateParticipantRequest withConferenceRecordingStatusCallback(String conferenceRecordingStatusCallback) {
        this.conferenceRecordingStatusCallback = conferenceRecordingStatusCallback;
        return this;
    }
    
    /**
     * The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
     */
    @SpeakeasyMetadata("form:name=ConferenceRecordingStatusCallbackEvent")
    public String[] conferenceRecordingStatusCallbackEvent;

    public CreateParticipantCreateParticipantRequest withConferenceRecordingStatusCallbackEvent(String[] conferenceRecordingStatusCallbackEvent) {
        this.conferenceRecordingStatusCallbackEvent = conferenceRecordingStatusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecordingStatusCallbackMethod")
    public CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum conferenceRecordingStatusCallbackMethod;

    public CreateParticipantCreateParticipantRequest withConferenceRecordingStatusCallbackMethod(CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum conferenceRecordingStatusCallbackMethod) {
        this.conferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod;
        return this;
    }
    
    /**
     * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallback")
    public String conferenceStatusCallback;

    public CreateParticipantCreateParticipantRequest withConferenceStatusCallback(String conferenceStatusCallback) {
        this.conferenceStatusCallback = conferenceStatusCallback;
        return this;
    }
    
    /**
     * The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallbackEvent")
    public String[] conferenceStatusCallbackEvent;

    public CreateParticipantCreateParticipantRequest withConferenceStatusCallbackEvent(String[] conferenceStatusCallbackEvent) {
        this.conferenceStatusCallbackEvent = conferenceStatusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallbackMethod")
    public CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum conferenceStatusCallbackMethod;

    public CreateParticipantCreateParticipantRequest withConferenceStatusCallbackMethod(CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum conferenceStatusCallbackMethod) {
        this.conferenceStatusCallbackMethod = conferenceStatusCallbackMethod;
        return this;
    }
    
    /**
     * Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     */
    @SpeakeasyMetadata("form:name=ConferenceTrim")
    public String conferenceTrim;

    public CreateParticipantCreateParticipantRequest withConferenceTrim(String conferenceTrim) {
        this.conferenceTrim = conferenceTrim;
        return this;
    }
    
    /**
     * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
     */
    @SpeakeasyMetadata("form:name=EarlyMedia")
    public Boolean earlyMedia;

    public CreateParticipantCreateParticipantRequest withEarlyMedia(Boolean earlyMedia) {
        this.earlyMedia = earlyMedia;
        return this;
    }
    
    /**
     * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     */
    @SpeakeasyMetadata("form:name=EndConferenceOnExit")
    public Boolean endConferenceOnExit;

    public CreateParticipantCreateParticipantRequest withEndConferenceOnExit(Boolean endConferenceOnExit) {
        this.endConferenceOnExit = endConferenceOnExit;
        return this;
    }
    
    /**
     * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
     */
    @SpeakeasyMetadata("form:name=From")
    public String from;

    public CreateParticipantCreateParticipantRequest withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
     */
    @SpeakeasyMetadata("form:name=JitterBufferSize")
    public String jitterBufferSize;

    public CreateParticipantCreateParticipantRequest withJitterBufferSize(String jitterBufferSize) {
        this.jitterBufferSize = jitterBufferSize;
        return this;
    }
    
    /**
     * A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
     */
    @SpeakeasyMetadata("form:name=Label")
    public String label;

    public CreateParticipantCreateParticipantRequest withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
     */
    @SpeakeasyMetadata("form:name=MachineDetection")
    public String machineDetection;

    public CreateParticipantCreateParticipantRequest withMachineDetection(String machineDetection) {
        this.machineDetection = machineDetection;
        return this;
    }
    
    /**
     * The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
     */
    @SpeakeasyMetadata("form:name=MachineDetectionSilenceTimeout")
    public Long machineDetectionSilenceTimeout;

    public CreateParticipantCreateParticipantRequest withMachineDetectionSilenceTimeout(Long machineDetectionSilenceTimeout) {
        this.machineDetectionSilenceTimeout = machineDetectionSilenceTimeout;
        return this;
    }
    
    /**
     * The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
     */
    @SpeakeasyMetadata("form:name=MachineDetectionSpeechEndThreshold")
    public Long machineDetectionSpeechEndThreshold;

    public CreateParticipantCreateParticipantRequest withMachineDetectionSpeechEndThreshold(Long machineDetectionSpeechEndThreshold) {
        this.machineDetectionSpeechEndThreshold = machineDetectionSpeechEndThreshold;
        return this;
    }
    
    /**
     * The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
     */
    @SpeakeasyMetadata("form:name=MachineDetectionSpeechThreshold")
    public Long machineDetectionSpeechThreshold;

    public CreateParticipantCreateParticipantRequest withMachineDetectionSpeechThreshold(Long machineDetectionSpeechThreshold) {
        this.machineDetectionSpeechThreshold = machineDetectionSpeechThreshold;
        return this;
    }
    
    /**
     * The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
     */
    @SpeakeasyMetadata("form:name=MachineDetectionTimeout")
    public Long machineDetectionTimeout;

    public CreateParticipantCreateParticipantRequest withMachineDetectionTimeout(Long machineDetectionTimeout) {
        this.machineDetectionTimeout = machineDetectionTimeout;
        return this;
    }
    
    /**
     * The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     */
    @SpeakeasyMetadata("form:name=MaxParticipants")
    public Long maxParticipants;

    public CreateParticipantCreateParticipantRequest withMaxParticipants(Long maxParticipants) {
        this.maxParticipants = maxParticipants;
        return this;
    }
    
    /**
     * Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
     */
    @SpeakeasyMetadata("form:name=Muted")
    public Boolean muted;

    public CreateParticipantCreateParticipantRequest withMuted(Boolean muted) {
        this.muted = muted;
        return this;
    }
    
    /**
     * Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     */
    @SpeakeasyMetadata("form:name=Record")
    public Boolean record;

    public CreateParticipantCreateParticipantRequest withRecord(Boolean record) {
        this.record = record;
        return this;
    }
    
    /**
     * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     */
    @SpeakeasyMetadata("form:name=RecordingChannels")
    public String recordingChannels;

    public CreateParticipantCreateParticipantRequest withRecordingChannels(String recordingChannels) {
        this.recordingChannels = recordingChannels;
        return this;
    }
    
    /**
     * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     */
    @SpeakeasyMetadata("form:name=RecordingStatusCallback")
    public String recordingStatusCallback;

    public CreateParticipantCreateParticipantRequest withRecordingStatusCallback(String recordingStatusCallback) {
        this.recordingStatusCallback = recordingStatusCallback;
        return this;
    }
    
    /**
     * The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
     */
    @SpeakeasyMetadata("form:name=RecordingStatusCallbackEvent")
    public String[] recordingStatusCallbackEvent;

    public CreateParticipantCreateParticipantRequest withRecordingStatusCallbackEvent(String[] recordingStatusCallbackEvent) {
        this.recordingStatusCallbackEvent = recordingStatusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=RecordingStatusCallbackMethod")
    public CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum recordingStatusCallbackMethod;

    public CreateParticipantCreateParticipantRequest withRecordingStatusCallbackMethod(CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum recordingStatusCallbackMethod) {
        this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
        return this;
    }
    
    /**
     * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
     */
    @SpeakeasyMetadata("form:name=RecordingTrack")
    public String recordingTrack;

    public CreateParticipantCreateParticipantRequest withRecordingTrack(String recordingTrack) {
        this.recordingTrack = recordingTrack;
        return this;
    }
    
    /**
     * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     */
    @SpeakeasyMetadata("form:name=Region")
    public String region;

    public CreateParticipantCreateParticipantRequest withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * The SIP password for authentication.
     */
    @SpeakeasyMetadata("form:name=SipAuthPassword")
    public String sipAuthPassword;

    public CreateParticipantCreateParticipantRequest withSipAuthPassword(String sipAuthPassword) {
        this.sipAuthPassword = sipAuthPassword;
        return this;
    }
    
    /**
     * The SIP username used for authentication.
     */
    @SpeakeasyMetadata("form:name=SipAuthUsername")
    public String sipAuthUsername;

    public CreateParticipantCreateParticipantRequest withSipAuthUsername(String sipAuthUsername) {
        this.sipAuthUsername = sipAuthUsername;
        return this;
    }
    
    /**
     * Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     */
    @SpeakeasyMetadata("form:name=StartConferenceOnEnter")
    public Boolean startConferenceOnEnter;

    public CreateParticipantCreateParticipantRequest withStartConferenceOnEnter(Boolean startConferenceOnEnter) {
        this.startConferenceOnEnter = startConferenceOnEnter;
        return this;
    }
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application.
     */
    @SpeakeasyMetadata("form:name=StatusCallback")
    public String statusCallback;

    public CreateParticipantCreateParticipantRequest withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackEvent")
    public String[] statusCallbackEvent;

    public CreateParticipantCreateParticipantRequest withStatusCallbackEvent(String[] statusCallbackEvent) {
        this.statusCallbackEvent = statusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    public CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum statusCallbackMethod;

    public CreateParticipantCreateParticipantRequest withStatusCallbackMethod(CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * The maximum duration of the call in seconds. Constraints depend on account and configuration.
     */
    @SpeakeasyMetadata("form:name=TimeLimit")
    public Long timeLimit;

    public CreateParticipantCreateParticipantRequest withTimeLimit(Long timeLimit) {
        this.timeLimit = timeLimit;
        return this;
    }
    
    /**
     * The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
     */
    @SpeakeasyMetadata("form:name=Timeout")
    public Long timeout;

    public CreateParticipantCreateParticipantRequest withTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
     */
    @SpeakeasyMetadata("form:name=To")
    public String to;

    public CreateParticipantCreateParticipantRequest withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     */
    @SpeakeasyMetadata("form:name=WaitMethod")
    public CreateParticipantCreateParticipantRequestWaitMethodEnum waitMethod;

    public CreateParticipantCreateParticipantRequest withWaitMethod(CreateParticipantCreateParticipantRequestWaitMethodEnum waitMethod) {
        this.waitMethod = waitMethod;
        return this;
    }
    
    /**
     * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     */
    @SpeakeasyMetadata("form:name=WaitUrl")
    public String waitUrl;

    public CreateParticipantCreateParticipantRequest withWaitUrl(String waitUrl) {
        this.waitUrl = waitUrl;
        return this;
    }
    
    public CreateParticipantCreateParticipantRequest(@JsonProperty("From") String from, @JsonProperty("To") String to) {
        this.from = from;
        this.to = to;
  }
}
