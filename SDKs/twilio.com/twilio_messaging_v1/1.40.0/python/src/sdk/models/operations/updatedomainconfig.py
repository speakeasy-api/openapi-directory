"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import messaging_v1_domain_config as shared_messaging_v1_domain_config
from typing import Optional

UPDATE_DOMAIN_CONFIG_SERVERS = [
	"https://messaging.twilio.com",
]


@dataclasses.dataclass
class UpdateDomainConfigSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateDomainConfigUpdateDomainConfigRequest:
    
    messaging_service_sids: list[str] = dataclasses.field(metadata={'form': { 'field_name': 'MessagingServiceSids' }})
    r"""A list of messagingServiceSids (with prefix MG)"""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackUrl' }})
    r"""URL to receive click events to your webhook whenever the recipients click on the shortened links"""  
    fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackUrl' }})
    r"""Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping."""  
    messaging_service_sids_action: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MessagingServiceSidsAction' }})
    r"""An action type for messaging_service_sids operation (ADD, DELETE, REPLACE)"""  
    

@dataclasses.dataclass
class UpdateDomainConfigRequest:
    
    domain_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'DomainSid', 'style': 'simple', 'explode': False }})
    r"""Unique string used to identify the domain that this config should be associated with."""  
    request_body: Optional[UpdateDomainConfigUpdateDomainConfigRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateDomainConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    messaging_v1_domain_config: Optional[shared_messaging_v1_domain_config.MessagingV1DomainConfig] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    