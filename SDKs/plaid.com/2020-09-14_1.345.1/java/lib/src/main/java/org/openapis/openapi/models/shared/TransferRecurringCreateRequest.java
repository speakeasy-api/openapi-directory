/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TransferRecurringCreateRequest - Defines the request schema for `/transfer/recurring/create`
 */
public class TransferRecurringCreateRequest {
    /**
     * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
     */
    @JsonProperty("access_token")
    public String accessToken;

    public TransferRecurringCreateRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
     */
    @JsonProperty("account_id")
    public String accountId;

    public TransferRecurringCreateRequest withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Specifies the use case of the transfer. Required for transfers on an ACH network.
     * 
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     * 
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     * 
     * `"tel"` - Telephone-Initiated Entry
     * 
     * `"web"` - Internet-Initiated Entry - debits from a consumer\u2019s account where their authorization is obtained over the Internet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach_class")
    public ACHClassEnum achClass;

    public TransferRecurringCreateRequest withAchClass(ACHClassEnum achClass) {
        this.achClass = achClass;
        return this;
    }
    
    /**
     * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
     */
    @JsonProperty("amount")
    public String amount;

    public TransferRecurringCreateRequest withAmount(String amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;

    public TransferRecurringCreateRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The description of the recurring transfer.
     */
    @JsonProperty("description")
    public String description;

    public TransferRecurringCreateRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Information about the device being used to initiate the authorization.
     */
    @JsonProperty("device")
    public java.util.Map<String, Object> device;

    public TransferRecurringCreateRequest withDevice(java.util.Map<String, Object> device) {
        this.device = device;
        return this;
    }
    
    /**
     * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("funding_account_id")
    public String fundingAccountId;

    public TransferRecurringCreateRequest withFundingAccountId(String fundingAccountId) {
        this.fundingAccountId = fundingAccountId;
        return this;
    }
    
    /**
     * A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
     */
    @JsonProperty("idempotency_key")
    public String idempotencyKey;

    public TransferRecurringCreateRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * The currency of the transfer amount. The default value is "USD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iso_currency_code")
    public String isoCurrencyCode;

    public TransferRecurringCreateRequest withIsoCurrencyCode(String isoCurrencyCode) {
        this.isoCurrencyCode = isoCurrencyCode;
        return this;
    }
    
    /**
     * The network or rails used for the transfer.
     * 
     * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
     */
    @JsonProperty("network")
    public TransferNetworkEnum network;

    public TransferRecurringCreateRequest withNetwork(TransferNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * The schedule that the recurring transfer will be executed on.
     */
    @JsonProperty("schedule")
    public TransferRecurringSchedule schedule;

    public TransferRecurringCreateRequest withSchedule(TransferRecurringSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;

    public TransferRecurringCreateRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * Plaid\u2019s unique identifier for a test clock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_clock_id")
    public String testClockId;

    public TransferRecurringCreateRequest withTestClockId(String testClockId) {
        this.testClockId = testClockId;
        return this;
    }
    
    /**
     * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     */
    @JsonProperty("type")
    public TransferTypeEnum type;

    public TransferRecurringCreateRequest withType(TransferTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The legal name and other information for the account holder.
     */
    @JsonProperty("user")
    public java.util.Map<String, Object> user;

    public TransferRecurringCreateRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    /**
     * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
     */
    @JsonProperty("user_present")
    public Boolean userPresent;

    public TransferRecurringCreateRequest withUserPresent(Boolean userPresent) {
        this.userPresent = userPresent;
        return this;
    }
    
    public TransferRecurringCreateRequest(@JsonProperty("access_token") String accessToken, @JsonProperty("account_id") String accountId, @JsonProperty("amount") String amount, @JsonProperty("description") String description, @JsonProperty("device") java.util.Map<String, Object> device, @JsonProperty("idempotency_key") String idempotencyKey, @JsonProperty("network") TransferNetworkEnum network, @JsonProperty("schedule") TransferRecurringSchedule schedule, @JsonProperty("type") TransferTypeEnum type, @JsonProperty("user") java.util.Map<String, Object> user, @JsonProperty("user_present") Boolean userPresent) {
        this.accessToken = accessToken;
        this.accountId = accountId;
        this.amount = amount;
        this.description = description;
        this.device = device;
        this.idempotencyKey = idempotencyKey;
        this.network = network;
        this.schedule = schedule;
        this.type = type;
        this.user = user;
        this.userPresent = userPresent;
  }
}
