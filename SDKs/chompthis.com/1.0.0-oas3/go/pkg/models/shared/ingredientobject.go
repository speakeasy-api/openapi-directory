// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// IngredientObjectItemsCalorieConversionFactor - An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.
type IngredientObjectItemsCalorieConversionFactor struct {
	// The multiplication factor for carbohydrates
	CarbohydrateValue *float64 `json:"carbohydrate_value,omitempty"`
	// The multiplication factor for fat
	FatValue *float64 `json:"fat_value,omitempty"`
	// The multiplication factor for protein
	ProteinValue *float64 `json:"protein_value,omitempty"`
}

// IngredientObjectItemsComponents - An object containing information on a specific component of this food item
type IngredientObjectItemsComponents struct {
	// The number of obersvations on which the measure is based
	DataPoints *int64 `json:"data_points,omitempty"`
	// The weight of the component in grams
	GramWeight *float64 `json:"gram_weight,omitempty"`
	// Whether the component is refuse, i.e. not edible
	IsRefuse *bool `json:"is_refuse,omitempty"`
	// The kind of component, e.g. bone
	Name *string `json:"name,omitempty"`
	// The weight of the component as a percentage of the total weight of the food
	PctWeight *float64 `json:"pct_weight,omitempty"`
}

// IngredientObjectItemsNutrients - An object containing information for a specific nutrient found in this food item
type IngredientObjectItemsNutrients struct {
	// Number of observations on which the value is based
	DataPoints *int64 `json:"data_points,omitempty"`
	// Description of the nutrient source
	Description *string `json:"description,omitempty"`
	// Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.
	Footnote *string `json:"footnote,omitempty"`
	// Maximum nutrient value
	Max *float64 `json:"max,omitempty"`
	// The unit used for the measure of this nutrient
	MeasurementUnit *string `json:"measurement_unit,omitempty"`
	// Median nutrient value
	Median *float64 `json:"median,omitempty"`
	// Minimum nutrient value
	Min *float64 `json:"min,omitempty"`
	// Nutrient name
	Name *string `json:"name,omitempty"`
	// Amount of the nutrient per 100g of food
	Per100g *float64 `json:"per_100g,omitempty"`
	// Nutrient rank
	Rank *int64 `json:"rank,omitempty"`
}

// IngredientObjectItemsPortions - An object containing information on a specific food portion found in this item
type IngredientObjectItemsPortions struct {
	// The number of observations on which the measure is based
	DataPoints *int64 `json:"data_points,omitempty"`
	// Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.
	Description *string `json:"description,omitempty"`
	// Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.
	Footnote *string `json:"footnote,omitempty"`
	// The weight of the measure in grams
	GramWeight *float64 `json:"gram_weight,omitempty"`
	// The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)
	MeasurementUnit *string `json:"measurement_unit,omitempty"`
	// Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)
	Modifier *string `json:"modifier,omitempty"`
}

// IngredientObjectItems - An object containing information for this specific item.
type IngredientObjectItems struct {
	// An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.
	CalorieConversionFactor *IngredientObjectItemsCalorieConversionFactor `json:"calorie_conversion_factor,omitempty"`
	Categories              []string                                      `json:"categories,omitempty"`
	// Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is "BRAND's Spicy Enchilada" the common name may be "Chicken enchilada")
	CommonName *string `json:"common_name,omitempty"`
	// An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
	Components []IngredientObjectItemsComponents `json:"components,omitempty"`
	// Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
	Footnote *string `json:"footnote,omitempty"`
	// Item name as provided by brand owner or as shown on packaging
	Name *string `json:"name,omitempty"`
	// An array containing nutrient informatio objects for this food item
	Nutrients []IngredientObjectItemsNutrients `json:"nutrients,omitempty"`
	// An array of objects containing information on discrete amounts of a food found in this item
	Portions []IngredientObjectItemsPortions `json:"portions,omitempty"`
	// The multiplication factor used to calculate protein from nitrogen
	ProteinConversionFactor *float64 `json:"protein_conversion_factor,omitempty"`
	// A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.
	Score *string `json:"score,omitempty"`
	// The original search term that found this food item
	SearchTerm *string `json:"search_term,omitempty"`
}

// IngredientObject - Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
type IngredientObject struct {
	// An array containing an object for each individual item returned by your API call.
	Items []IngredientObjectItems `json:"items,omitempty"`
}
