/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { OpenHoursRule } from "./openhoursrule";
import { Expose, Transform } from "class-transformer";

/**
 * The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true.
 */
export class OpenHours extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: OpenHoursRule, elemDepth: 2 })
  @Expose({ name: "CUSTOM" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OpenHoursRule[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OpenHoursRule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  custom?: Record<string, OpenHoursRule[]>;

  @SpeakeasyMetadata({ elemType: OpenHoursRule, elemDepth: 2 })
  @Expose({ name: "EMAIL" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OpenHoursRule[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OpenHoursRule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  email?: Record<string, OpenHoursRule[]>;

  @SpeakeasyMetadata({ elemType: OpenHoursRule, elemDepth: 2 })
  @Expose({ name: "PUSH" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OpenHoursRule[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OpenHoursRule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  push?: Record<string, OpenHoursRule[]>;

  @SpeakeasyMetadata({ elemType: OpenHoursRule, elemDepth: 2 })
  @Expose({ name: "SMS" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OpenHoursRule[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OpenHoursRule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  sms?: Record<string, OpenHoursRule[]>;

  @SpeakeasyMetadata({ elemType: OpenHoursRule, elemDepth: 2 })
  @Expose({ name: "VOICE" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OpenHoursRule[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OpenHoursRule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  voice?: Record<string, OpenHoursRule[]>;
}
