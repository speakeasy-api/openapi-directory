/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LegalEntity - OK - the request has succeeded.
 */
public class LegalEntity {
    /**
     * Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    public java.util.Map<String, LegalEntityCapability> capabilities;
    public LegalEntity withCapabilities(java.util.Map<String, LegalEntityCapability> capabilities) {
        this.capabilities = capabilities;
        return this;
    }
    
    /**
     * List of documents uploaded for the legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentDetails")
    public DocumentReference[] documentDetails;
    public LegalEntity withDocumentDetails(DocumentReference[] documentDetails) {
        this.documentDetails = documentDetails;
        return this;
    }
    
    /**
     * List of documents uploaded for the legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    public EntityReference[] documents;
    public LegalEntity withDocuments(EntityReference[] documents) {
        this.documents = documents;
        return this;
    }
    
    /**
     * List of legal entities associated with the current legal entity.
     * For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityAssociations")
    public LegalEntityAssociation[] entityAssociations;
    public LegalEntity withEntityAssociations(LegalEntityAssociation[] entityAssociations) {
        this.entityAssociations = entityAssociations;
        return this;
    }
    
    /**
     * The unique identifier of the legal entity.
     */
    @JsonProperty("id")
    public String id;
    public LegalEntity withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual")
    public Individual individual;
    public LegalEntity withIndividual(Individual individual) {
        this.individual = individual;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public Organization organization;
    public LegalEntity withOrganization(Organization organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * Your reference for the legal entity, maximum 150 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;
    public LegalEntity withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("soleProprietorship")
    public SoleProprietorship soleProprietorship;
    public LegalEntity withSoleProprietorship(SoleProprietorship soleProprietorship) {
        this.soleProprietorship = soleProprietorship;
        return this;
    }
    
    /**
     * List of transfer instruments that the legal entity owns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferInstruments")
    public TransferInstrumentReference[] transferInstruments;
    public LegalEntity withTransferInstruments(TransferInstrumentReference[] transferInstruments) {
        this.transferInstruments = transferInstruments;
        return this;
    }
    
    /**
     * The type of legal entity.
     * 
     *  Possible values: **individual**, **organization**, or **soleProprietorship**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public LegalEntityTypeEnum type;
    public LegalEntity withType(LegalEntityTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
