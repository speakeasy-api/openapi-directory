/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CodespaceGitStatus - Details about the codespace's git repository.
 */
public class CodespaceGitStatus {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ahead")
    public Long ahead;
    public CodespaceGitStatus withAhead(Long ahead) {
        this.ahead = ahead;
        return this;
    }
    
    /**
     * The number of commits the local repository is behind the remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("behind")
    public Long behind;
    public CodespaceGitStatus withBehind(Long behind) {
        this.behind = behind;
        return this;
    }
    
    /**
     * Whether the local repository has uncommitted changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_uncommitted_changes")
    public Boolean hasUncommittedChanges;
    public CodespaceGitStatus withHasUncommittedChanges(Boolean hasUncommittedChanges) {
        this.hasUncommittedChanges = hasUncommittedChanges;
        return this;
    }
    
    /**
     * Whether the local repository has unpushed changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_unpushed_changes")
    public Boolean hasUnpushedChanges;
    public CodespaceGitStatus withHasUnpushedChanges(Boolean hasUnpushedChanges) {
        this.hasUnpushedChanges = hasUnpushedChanges;
        return this;
    }
    
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref")
    public String ref;
    public CodespaceGitStatus withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
}
