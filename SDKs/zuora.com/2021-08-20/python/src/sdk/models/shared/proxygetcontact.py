"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetContact:
    r"""Container for custom fields of a Contact object."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The Zuora account ID associated with this contact. This field is not required when you use the Subscribe call. This field is required for all other calls.
    **Character limit: **32 **Values: **a valid account ID
    """  
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The first line of the contact's address, which is often a street address or business name.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The second line of the contact's address.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})
    r"""The city of the contact's address.
    **Character limit**: 40 **Values: **a string of 40 characters or fewer
    """  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The country of the contact's address."""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('County'), 'exclude': lambda f: f is None }})
    r"""The county. May optionally be used by Zuora Tax to calculate county tax.
    **Character limit**: 32 **Values**: a string of 32 characters or fewer
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the contact. **Character limit**: 32 **Values**: automatically generated"""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the contact was created. **Character limit**: 29 **Values**: automatically generated"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""A description for the contact.
    **Character limit**: 100 **Values**: a string of 100 characters or fewer
    """  
    fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fax'), 'exclude': lambda f: f is None }})
    r"""The contact's fax number.
    **Character limit**: 40 **Values**: a string of 40 characters or fewer
    """  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})
    r"""The contact's first name.
    **Character limit**: 100 **Values**: a string of the contact's first name
    """  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomePhone'), 'exclude': lambda f: f is None }})
    r"""The contact's home phone number.
    **Character limit**: 40 **Values**: a string of 40 characters or fewer
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Object identifier."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})
    r"""The contact's last name.
    **Character limit**: 100 **Values**: a string of 100 characters or fewer
    """  
    mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MobilePhone'), 'exclude': lambda f: f is None }})
    r"""The contact's mobile phone number.
    **Character limit**: 40 **Values**: a string of 40 characters or fewer
    """  
    nick_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NickName'), 'exclude': lambda f: f is None }})
    r"""A nickname for the contact.
    **Character limit**: 100 **Values**: a string of 100 characters or fewer
    """  
    other_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherPhone'), 'exclude': lambda f: f is None }})
    r"""An additional phone number for the contact.
    **Character limit**: 40 **Values**: a string of 40 characters or fewer
    """  
    other_phone_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherPhoneType'), 'exclude': lambda f: f is None }})
    r"""The type of the `OtherPhone`. **Character limit**: 20 **Values**: `Work`, `Mobile`, `Home`, `Other`"""  
    personal_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PersonalEmail'), 'exclude': lambda f: f is None }})
    r"""The contact's personal email address.
    **Character limit**: 80 **Values**: a string of 80 characters or fewer
    """  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalCode'), 'exclude': lambda f: f is None }})
    r"""The zip code for the contact's address.
    **Character limit:** 20 **Values: **a string of 20 characters or fewer
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})
    r"""The state or province of the contact's address."""  
    tax_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRegion'), 'exclude': lambda f: f is None }})
    r"""If using Zuora Tax rules"""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the user who lasted updated the contact.
    **Character limit**: 32 **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the contact was last updated.
    **Character limit**: 29 **Values**: automatically generated
    """  
    work_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkEmail'), 'exclude': lambda f: f is None }})
    r"""The contact's business email address.
    **Character limit**: 80 **Values**: a string of 80 characters or fewer
    """  
    work_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkPhone'), 'exclude': lambda f: f is None }})
    r"""The contact's business phone number.
    **Character limit**: 40 **notes**: -- **Values**: a string of 40 characters or fewer
    """  
    