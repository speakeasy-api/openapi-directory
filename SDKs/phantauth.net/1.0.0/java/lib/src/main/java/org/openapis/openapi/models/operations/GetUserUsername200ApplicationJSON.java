/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetUserUsername200ApplicationJSON - OK
 */
public class GetUserUsername200ApplicationJSON {
    /**
     * The URL of the user's JSON representation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("@id")
    public String atId;

    public GetUserUsername200ApplicationJSON withAtId(String atId) {
        this.atId = atId;
        return this;
    }
    
    /**
     * The user's preferred postal address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public GetUserUsername200ApplicationJSONAddress address;

    public GetUserUsername200ApplicationJSON withAddress(GetUserUsername200ApplicationJSONAddress address) {
        this.address = address;
        return this;
    }
    
    /**
     * The user's birthday, represented as an ISO 8601:2004 [ISO8601\u20112004] YYYY-MM-DD format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthdate")
    public String birthdate;

    public GetUserUsername200ApplicationJSON withBirthdate(String birthdate) {
        this.birthdate = birthdate;
        return this;
    }
    
    /**
     * The user's preferred email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public GetUserUsername200ApplicationJSON withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * True if the user's e-mail address has been verified; otherwise false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_verified")
    public Boolean emailVerified;

    public GetUserUsername200ApplicationJSON withEmailVerified(Boolean emailVerified) {
        this.emailVerified = emailVerified;
        return this;
    }
    
    /**
     * The user's surname(s) or last name(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family_name")
    public String familyName;

    public GetUserUsername200ApplicationJSON withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }
    
    /**
     * The enduser's gender. Possible values are: female, male, and unknown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    public String gender;

    public GetUserUsername200ApplicationJSON withGender(String gender) {
        this.gender = gender;
        return this;
    }
    
    /**
     * The user's given name(s) or first name(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("given_name")
    public String givenName;

    public GetUserUsername200ApplicationJSON withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }
    
    /**
     * The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    public String locale;

    public GetUserUsername200ApplicationJSON withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * The simplified URL of the user's profile page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("me")
    public String me;

    public GetUserUsername200ApplicationJSON withMe(String me) {
        this.me = me;
        return this;
    }
    
    /**
     * The user's middle name(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    public String middleName;

    public GetUserUsername200ApplicationJSON withMiddleName(String middleName) {
        this.middleName = middleName;
        return this;
    }
    
    /**
     * The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GetUserUsername200ApplicationJSON withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A casual name of the User that may or may not be the same as the given_name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    public String nickname;

    public GetUserUsername200ApplicationJSON withNickname(String nickname) {
        this.nickname = nickname;
        return this;
    }
    
    /**
     * The user's generated password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public GetUserUsername200ApplicationJSON withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The user's preferred telephone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;

    public GetUserUsername200ApplicationJSON withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * True if the enduser's phone number has been verified; otherwise false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number_verified")
    public Boolean phoneNumberVerified;

    public GetUserUsername200ApplicationJSON withPhoneNumberVerified(Boolean phoneNumberVerified) {
        this.phoneNumberVerified = phoneNumberVerified;
        return this;
    }
    
    /**
     * The URL of the user's profile picture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("picture")
    public String picture;

    public GetUserUsername200ApplicationJSON withPicture(String picture) {
        this.picture = picture;
        return this;
    }
    
    /**
     * A shorthand name by which the user wishes to be referred to at the Relying Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_username")
    public String preferredUsername;

    public GetUserUsername200ApplicationJSON withPreferredUsername(String preferredUsername) {
        this.preferredUsername = preferredUsername;
        return this;
    }
    
    /**
     * The URL of the user's profile page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    public String profile;

    public GetUserUsername200ApplicationJSON withProfile(String profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * Subject - User identifier at the issuer.
     */
    @JsonProperty("sub")
    public String sub;

    public GetUserUsername200ApplicationJSON withSub(String sub) {
        this.sub = sub;
        return this;
    }
    
    /**
     * The user's simplified, shortened identifier at the Issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public GetUserUsername200ApplicationJSON withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public Double updatedAt;

    public GetUserUsername200ApplicationJSON withUpdatedAt(Double updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The URL of user's mailbox in a webmail application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webmail")
    public String webmail;

    public GetUserUsername200ApplicationJSON withWebmail(String webmail) {
        this.webmail = webmail;
        return this;
    }
    
    /**
     * The URL of the user's webpage or blog.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;

    public GetUserUsername200ApplicationJSON withWebsite(String website) {
        this.website = website;
        return this;
    }
    
    /**
     * A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoneinfo")
    public String zoneinfo;

    public GetUserUsername200ApplicationJSON withZoneinfo(String zoneinfo) {
        this.zoneinfo = zoneinfo;
        return this;
    }
    
    public GetUserUsername200ApplicationJSON(@JsonProperty("sub") String sub) {
        this.sub = sub;
  }
}
