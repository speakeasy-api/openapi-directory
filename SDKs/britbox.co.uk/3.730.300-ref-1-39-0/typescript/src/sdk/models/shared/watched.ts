/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * OK
 */
export class Watched extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "firstWatchedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstWatchedDate: Date;

  /**
   * True - if the item is fully watched, False - otherwise.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFullyWatched" })
  isFullyWatched?: boolean;

  /**
   * The id of the item watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastWatchedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastWatchedDate: Date;

  /**
   * The last playhead position watched for the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position: number;
}
