/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DiaryControllerGetAllocationsQueryParams {
    /**
     * The unique appointment type identifier
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=appointmentType")
    public String appointmentType;
    public DiaryControllerGetAllocationsQueryParams withAppointmentType(String appointmentType) {
        this.appointmentType = appointmentType;
        return this;
    }
    
    /**
     * Branch ID to check appointments (required if no property submitted)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=branchID")
    public String branchID;
    public DiaryControllerGetAllocationsQueryParams withBranchID(String branchID) {
        this.branchID = branchID;
        return this;
    }
    
    /**
     * Sales or Lettings property?
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lettings")
    public Boolean lettings;
    public DiaryControllerGetAllocationsQueryParams withLettings(Boolean lettings) {
        this.lettings = lettings;
        return this;
    }
    
    /**
     * The date to search from
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=preferredDate")
    public OffsetDateTime preferredDate;
    public DiaryControllerGetAllocationsQueryParams withPreferredDate(OffsetDateTime preferredDate) {
        this.preferredDate = preferredDate;
        return this;
    }
    
    /**
     * The unique property identifier (Sales or Lettings) determines branch and property type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=propertyIdentifier")
    public String propertyIdentifier;
    public DiaryControllerGetAllocationsQueryParams withPropertyIdentifier(String propertyIdentifier) {
        this.propertyIdentifier = propertyIdentifier;
        return this;
    }
    
}
