"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import batcherror as shared_batcherror
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TaskAddResultStatusEnum(str, Enum):
    r"""The status of the add task request."""
    SUCCESS = 'success'
    CLIENTERROR = 'clienterror'
    SERVERERROR = 'servererror'
    UNMAPPED = 'unmapped'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskAddResult:
    r"""Result for a single task added as part of an add task collection operation."""
    
    status: TaskAddResultStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the add task request."""  
    task_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId') }})
    r"""The id of the task for which this is the result."""  
    error: Optional[shared_batcherror.BatchError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""An error response received from the Azure Batch service."""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eTag'), 'exclude': lambda f: f is None }})
    r"""The ETag of the task, if the task was successfully added."""  
    last_modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last modified time of the task."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""The URL of the task, if the task was successfully added."""  
    