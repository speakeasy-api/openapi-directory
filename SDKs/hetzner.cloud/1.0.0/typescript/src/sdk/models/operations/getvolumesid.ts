/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetVolumesIdRequest extends SpeakeasyBase {
  /**
   * ID of the Volume
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Location of the Volume. Volume can only be attached to Servers in the same Location.
 */
export class GetVolumesId200ApplicationJSONVolumeLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class GetVolumesId200ApplicationJSONVolumeProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Current status of the Volume
 */
export enum GetVolumesId200ApplicationJSONVolumeStatusEnum {
  Creating = "creating",
  Available = "available",
}

export class GetVolumesId200ApplicationJSONVolume extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Filesystem of the Volume if formatted on creation, null if not formatted on creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Device path on the file system for the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linux_device" })
  linuxDevice: string;

  /**
   * Location of the Volume. Volume can only be attached to Servers in the same Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GetVolumesId200ApplicationJSONVolumeLocation)
  location: GetVolumesId200ApplicationJSONVolumeLocation;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetVolumesId200ApplicationJSONVolumeProtection)
  protection: GetVolumesId200ApplicationJSONVolumeProtection;

  /**
   * ID of the Server the Volume is attached to, null if it is not attached at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Size in GB of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  /**
   * Current status of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetVolumesId200ApplicationJSONVolumeStatusEnum;
}

/**
 * The `volume` key contains the volume
 */
export class GetVolumesId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "volume" })
  @Type(() => GetVolumesId200ApplicationJSONVolume)
  volume: GetVolumesId200ApplicationJSONVolume;
}

export class GetVolumesIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `volume` key contains the volume
   */
  @SpeakeasyMetadata()
  getVolumesId200ApplicationJSONObject?: GetVolumesId200ApplicationJSON;
}
